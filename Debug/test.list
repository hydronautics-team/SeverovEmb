
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08010658  08010658  00020658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010830  08010830  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08010830  08010830  00020830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010838  08010838  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010838  08010838  00020838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801083c  0801083c  0002083c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08010840  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          00003088  20000110  20000110  00030110  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003198  20003198  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002542f  00000000  00000000  000301c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005aff  00000000  00000000  000555f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c10  00000000  00000000  0005b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000159d  00000000  00000000  0005cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022cb2  00000000  00000000  0005e2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026f04  00000000  00000000  00080f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4620  00000000  00000000  000a7e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b0c  00000000  00000000  0016c47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00173f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801063c 	.word	0x0801063c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0801063c 	.word	0x0801063c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8a:	f000 b9f1 	b.w	8000f70 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f883 	bl	8000ca8 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f876 	bl	8000ca8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f865 	bl	8000ca8 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f857 	bl	8000ca8 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a6 	b.w	8000f70 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff fef1 	bl	8000a2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_dmul>
 8000c7a:	f000 f97b 	bl	8000f74 <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fbe8 	bl	8000454 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fc5e 	bl	8000548 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faa0 	bl	80001d8 <__aeabi_dsub>
 8000c98:	f000 f96c 	bl	8000f74 <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fe8 <fromTickToMs+0x34>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe8 <fromTickToMs+0x34>
 8000fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	447a0000 	.word	0x447a0000

08000fec <cmp>:
uint32_t MS5837_conv_start_tick = CONVERTION_TIMEOUT;

void calculate();
void init_new_convertion();

int cmp(const void *a, const void *b) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MS5837_02BA_init>:

bool MS5837_02BA_begin(I2C_HandleTypeDef * hi2c){
	return(MS5837_02BA_init(hi2c));
}

bool MS5837_02BA_init(I2C_HandleTypeDef * hi2c){
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
	MS5837_hi2c = hi2c;
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	HAL_I2C_Init(hi2c);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f005 fd16 	bl	8006a4c <HAL_I2C_Init>
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, HAL_MAX_DELAY) != HAL_OK){
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <MS5837_02BA_init+0xa4>)
 800102e:	21ec      	movs	r1, #236	; 0xec
 8001030:	f005 fd9c 	bl	8006b6c <HAL_I2C_Master_Transmit>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MS5837_02BA_init+0x32>
		return false;
 800103a:	2300      	movs	r3, #0
 800103c:	e032      	b.n	80010a4 <MS5837_02BA_init+0x98>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e029      	b.n	800109c <MS5837_02BA_init+0x90>
		uint8_t prom_buff[2];
		prom_addr += 2;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3302      	adds	r3, #2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 020e 	add.w	r2, r7, #14
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21ec      	movs	r1, #236	; 0xec
 8001062:	f005 fd83 	bl	8006b6c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	21ec      	movs	r1, #236	; 0xec
 8001078:	f005 fe6c 	bl	8006d54 <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	7b7a      	ldrb	r2, [r7, #13]
 8001082:	4313      	orrs	r3, r2
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	17d9      	asrs	r1, r3, #31
 8001088:	461c      	mov	r4, r3
 800108a:	460d      	mov	r5, r1
 800108c:	4909      	ldr	r1, [pc, #36]	; (80010b4 <MS5837_02BA_init+0xa8>)
 800108e:	00d3      	lsls	r3, r2, #3
 8001090:	440b      	add	r3, r1
 8001092:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d9d2      	bls.n	8001048 <MS5837_02BA_init+0x3c>
	}
	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bdb0      	pop	{r4, r5, r7, pc}
 80010ac:	2000012c 	.word	0x2000012c
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000138 	.word	0x20000138

080010b8 <MS5837_02BA_get_actual_pressure>:

int32_t MS5837_02BA_get_actual_pressure(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
 80010be:	f004 fdf7 	bl	8005cb0 <HAL_GetTick>
 80010c2:	6078      	str	r0, [r7, #4]
	if(MS5837_I2C_NONE == MS5837_I2C_State){
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <MS5837_02BA_get_actual_pressure+0x18>
		init_new_convertion();
 80010cc:	f000 f83e 	bl	800114c <init_new_convertion>
	}
	if(MS5837_I2C_D1_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d10f      	bne.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b13      	cmp	r3, #19
 80010e2:	d909      	bls.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
		MS5837_I2C_State = MS5837_I2C_D1_TX_ADC_COM;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010e6:	2203      	movs	r2, #3
 80010e8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	f005 ff24 	bl	8006f40 <HAL_I2C_Master_Transmit_IT>
	}
	if(MS5837_I2C_D2_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d10f      	bne.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b13      	cmp	r3, #19
 800110a:	d909      	bls.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
		MS5837_I2C_State = MS5837_I2C_D2_TX_ADC_COM;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 800110e:	2207      	movs	r2, #7
 8001110:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 800111a:	21ec      	movs	r1, #236	; 0xec
 800111c:	f005 ff10 	bl	8006f40 <HAL_I2C_Master_Transmit_IT>
	}
//	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(MS5837_hi2c);
	return presure-initial_pressure;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MS5837_02BA_get_actual_pressure+0x8c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MS5837_02BA_get_actual_pressure+0x90>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000018b 	.word	0x2000018b
 8001138:	20000004 	.word	0x20000004
 800113c:	2000012c 	.word	0x2000012c
 8001140:	20000130 	.word	0x20000130
 8001144:	20000180 	.word	0x20000180
 8001148:	20000184 	.word	0x20000184

0800114c <init_new_convertion>:

void init_new_convertion(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	MS5837_I2C_State = MS5837_I2C_D1_TX_CONV_COM;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <init_new_convertion+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH);
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <init_new_convertion+0x20>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <init_new_convertion+0x24>)
 800115e:	21ec      	movs	r1, #236	; 0xec
 8001160:	f005 feee 	bl	8006f40 <HAL_I2C_Master_Transmit_IT>
//	MS5837_conv_start_tick = HAL_GetTick();
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000018b 	.word	0x2000018b
 800116c:	2000012c 	.word	0x2000012c
 8001170:	20000001 	.word	0x20000001

08001174 <MS5837_I2C_MasterRxCplt>:

void MS5837_I2C_MasterRxCplt (I2C_HandleTypeDef * hi2c){
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800117c:	491f      	ldr	r1, [pc, #124]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 800117e:	6809      	ldr	r1, [r1, #0]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	4288      	cmp	r0, r1
 8001184:	d135      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
		if(MS5837_I2C_D1_RX_ADC == MS5837_I2C_State){
 8001186:	491e      	ldr	r1, [pc, #120]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001188:	7809      	ldrb	r1, [r1, #0]
 800118a:	2904      	cmp	r1, #4
 800118c:	d119      	bne.n	80011c2 <MS5837_I2C_MasterRxCplt+0x4e>
			D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800118e:	491d      	ldr	r1, [pc, #116]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001190:	7809      	ldrb	r1, [r1, #0]
 8001192:	0408      	lsls	r0, r1, #16
 8001194:	491b      	ldr	r1, [pc, #108]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001196:	7849      	ldrb	r1, [r1, #1]
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	4301      	orrs	r1, r0
 800119c:	4819      	ldr	r0, [pc, #100]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 800119e:	7880      	ldrb	r0, [r0, #2]
 80011a0:	4301      	orrs	r1, r0
 80011a2:	17c8      	asrs	r0, r1, #31
 80011a4:	460a      	mov	r2, r1
 80011a6:	4603      	mov	r3, r0
 80011a8:	4917      	ldr	r1, [pc, #92]	; (8001208 <MS5837_I2C_MasterRxCplt+0x94>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
			MS5837_I2C_State = MS5837_I2C_D2_TX_CONV_COM;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH);
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <MS5837_I2C_MasterRxCplt+0x98>)
 80011bc:	21ec      	movs	r1, #236	; 0xec
 80011be:	f005 febf 	bl	8006f40 <HAL_I2C_Master_Transmit_IT>
		}
		if(MS5837_I2C_D2_RX_ADC == MS5837_I2C_State){
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d113      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
			D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	041a      	lsls	r2, r3, #16
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	4313      	orrs	r3, r2
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011da:	7892      	ldrb	r2, [r2, #2]
 80011dc:	4313      	orrs	r3, r2
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	461c      	mov	r4, r3
 80011e2:	4615      	mov	r5, r2
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MS5837_I2C_MasterRxCplt+0x9c>)
 80011e6:	e9c3 4500 	strd	r4, r5, [r3]
			init_new_convertion();
 80011ea:	f7ff ffaf 	bl	800114c <init_new_convertion>
			calculate();
 80011ee:	f000 f90b 	bl	8001408 <calculate>
		}
//		MS5837_conv_start_tick = HAL_GetTick();
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000012c 	.word	0x2000012c
 8001200:	2000018b 	.word	0x2000018b
 8001204:	20000188 	.word	0x20000188
 8001208:	20000170 	.word	0x20000170
 800120c:	20000002 	.word	0x20000002
 8001210:	20000178 	.word	0x20000178

08001214 <MS5837_I2C_MasterTxCplt>:

void MS5837_I2C_MasterTxCplt (I2C_HandleTypeDef * hi2c){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d133      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
		if(MS5837_I2C_D1_TX_CONV_COM == MS5837_I2C_State){
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <MS5837_I2C_MasterTxCplt+0x2a>
			MS5837_I2C_State = MS5837_I2C_D1_CONVERTION;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001230:	2202      	movs	r2, #2
 8001232:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001234:	f004 fd3c 	bl	8005cb0 <HAL_GetTick>
 8001238:	4603      	mov	r3, r0
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 800123c:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D1_TX_ADC_COM == MS5837_I2C_State){
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d109      	bne.n	800125a <MS5837_I2C_MasterTxCplt+0x46>
			MS5837_I2C_State = MS5837_I2C_D1_RX_ADC;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001248:	2204      	movs	r2, #4
 800124a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2303      	movs	r3, #3
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001254:	21ec      	movs	r1, #236	; 0xec
 8001256:	f005 fee3 	bl	8007020 <HAL_I2C_Master_Receive_IT>
		}
		if(MS5837_I2C_D2_TX_CONV_COM == MS5837_I2C_State){
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d107      	bne.n	8001272 <MS5837_I2C_MasterTxCplt+0x5e>
			MS5837_I2C_State = MS5837_I2C_D2_CONVERTION;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001264:	2206      	movs	r2, #6
 8001266:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001268:	f004 fd22 	bl	8005cb0 <HAL_GetTick>
 800126c:	4603      	mov	r3, r0
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 8001270:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D2_TX_ADC_COM == MS5837_I2C_State){
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d109      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
			MS5837_I2C_State = MS5837_I2C_D2_RX_ADC;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800127c:	2208      	movs	r2, #8
 800127e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	2303      	movs	r3, #3
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001288:	21ec      	movs	r1, #236	; 0xec
 800128a:	f005 fec9 	bl	8007020 <HAL_I2C_Master_Receive_IT>
		}
	}
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000012c 	.word	0x2000012c
 800129c:	2000018b 	.word	0x2000018b
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000188 	.word	0x20000188

080012a8 <MS5837_02BA_check_pressure>:

void MS5837_I2C_MasterError (I2C_HandleTypeDef * hi2c){
	__NOP();
}

int32_t MS5837_02BA_check_pressure(){
 80012a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af02      	add	r7, sp, #8
	//initializing D1 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	4a34      	ldr	r2, [pc, #208]	; (8001390 <MS5837_02BA_check_pressure+0xe8>)
 80012be:	21ec      	movs	r1, #236	; 0xec
 80012c0:	f005 fc54 	bl	8006b6c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f004 fcff 	bl	8005cc8 <HAL_Delay>
	//reading D1 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 80012d8:	21ec      	movs	r1, #236	; 0xec
 80012da:	f005 fc47 	bl	8006b6c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2303      	movs	r3, #3
 80012ea:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012ec:	21ec      	movs	r1, #236	; 0xec
 80012ee:	f005 fd31 	bl	8006d54 <HAL_I2C_Master_Receive>
	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001302:	7892      	ldrb	r2, [r2, #2]
 8001304:	4313      	orrs	r3, r2
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	4698      	mov	r8, r3
 800130a:	4691      	mov	r9, r2
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MS5837_02BA_check_pressure+0xf4>)
 800130e:	e9c3 8900 	strd	r8, r9, [r3]
	//initializing D2 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <MS5837_02BA_check_pressure+0xf8>)
 8001320:	21ec      	movs	r1, #236	; 0xec
 8001322:	f005 fc23 	bl	8006b6c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001326:	2014      	movs	r0, #20
 8001328:	f004 fcce 	bl	8005cc8 <HAL_Delay>
	//reading D2 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 800133a:	21ec      	movs	r1, #236	; 0xec
 800133c:	f005 fc16 	bl	8006b6c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2303      	movs	r3, #3
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800134e:	21ec      	movs	r1, #236	; 0xec
 8001350:	f005 fd00 	bl	8006d54 <HAL_I2C_Master_Receive>
	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4313      	orrs	r3, r2
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001364:	7892      	ldrb	r2, [r2, #2]
 8001366:	4313      	orrs	r3, r2
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	461c      	mov	r4, r3
 800136c:	4615      	mov	r5, r2
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MS5837_02BA_check_pressure+0xfc>)
 8001370:	e9c3 4500 	strd	r4, r5, [r3]
	calculate();
 8001374:	f000 f848 	bl	8001408 <calculate>
	return presure-initial_pressure;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MS5837_02BA_check_pressure+0x100>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MS5837_02BA_check_pressure+0x104>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800138a:	bf00      	nop
 800138c:	2000012c 	.word	0x2000012c
 8001390:	20000001 	.word	0x20000001
 8001394:	20000130 	.word	0x20000130
 8001398:	20000188 	.word	0x20000188
 800139c:	20000170 	.word	0x20000170
 80013a0:	20000002 	.word	0x20000002
 80013a4:	20000178 	.word	0x20000178
 80013a8:	20000180 	.word	0x20000180
 80013ac:	20000184 	.word	0x20000184

080013b0 <MS5837_02BA_reset_pressure>:

uint32_t MS5837_02BA_reset_pressure(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b09a      	sub	sp, #104	; 0x68
 80013b4:	af00      	add	r7, sp, #0
	int32_t current_pressure[25];

	for(int i =0;i<25;i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
 80013ba:	e00b      	b.n	80013d4 <MS5837_02BA_reset_pressure+0x24>
	{
		current_pressure[i]=MS5837_02BA_check_pressure();
 80013bc:	f7ff ff74 	bl	80012a8 <MS5837_02BA_check_pressure>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	3368      	adds	r3, #104	; 0x68
 80013c8:	443b      	add	r3, r7
 80013ca:	f843 2c68 	str.w	r2, [r3, #-104]
	for(int i =0;i<25;i++)
 80013ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d0:	3301      	adds	r3, #1
 80013d2:	667b      	str	r3, [r7, #100]	; 0x64
 80013d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d6:	2b18      	cmp	r3, #24
 80013d8:	ddf0      	ble.n	80013bc <MS5837_02BA_reset_pressure+0xc>
	}
	qsort(current_pressure, 25, sizeof(int32_t), cmp );
 80013da:	4638      	mov	r0, r7
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MS5837_02BA_reset_pressure+0x4c>)
 80013de:	2204      	movs	r2, #4
 80013e0:	2119      	movs	r1, #25
 80013e2:	f00e fce3 	bl	800fdac <qsort>
	init_new_convertion();
 80013e6:	f7ff feb1 	bl	800114c <init_new_convertion>
	return initial_pressure = current_pressure[24];
 80013ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3768      	adds	r7, #104	; 0x68
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08000fed 	.word	0x08000fed
 8001400:	20000184 	.word	0x20000184
 8001404:	00000000 	.word	0x00000000

08001408 <calculate>:

void calculate(){
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b0be      	sub	sp, #248	; 0xf8
 800140e:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t TEMP = 0;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	int64_t OFF = 0;
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	int64_t SENS = 0;
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	int64_t P = 0;
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	int64_t SENSi = 0;
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	int64_t OFFi = 0;
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int64_t Ti = 0;
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int64_t OFF2 = 0;
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t SENS2 = 0;
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	int64_t P2 = 0;
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP2 = 0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	//first order compensation
	dT = D2 -  C[4]*256;
 80014a0:	4be1      	ldr	r3, [pc, #900]	; (8001828 <calculate+0x420>)
 80014a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014a6:	4be1      	ldr	r3, [pc, #900]	; (800182c <calculate+0x424>)
 80014a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014ac:	f04f 0000 	mov.w	r0, #0
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	0219      	lsls	r1, r3, #8
 80014b6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80014ba:	0210      	lsls	r0, r2, #8
 80014bc:	1a23      	subs	r3, r4, r0
 80014be:	663b      	str	r3, [r7, #96]	; 0x60
 80014c0:	eb65 0301 	sbc.w	r3, r5, r1
 80014c4:	667b      	str	r3, [r7, #100]	; 0x64
 80014c6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80014ca:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	TEMP = 2000 + dT*C[4]/8388608;
 80014ce:	4bd7      	ldr	r3, [pc, #860]	; (800182c <calculate+0x424>)
 80014d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014d4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80014d8:	fb02 f501 	mul.w	r5, r2, r1
 80014dc:	fb00 f403 	mul.w	r4, r0, r3
 80014e0:	442c      	add	r4, r5
 80014e2:	fba0 8902 	umull	r8, r9, r0, r2
 80014e6:	eb04 0309 	add.w	r3, r4, r9
 80014ea:	4699      	mov	r9, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 80014f8:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 80014fc:	ea4f 53d9 	mov.w	r3, r9, lsr #23
 8001500:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 8001504:	65b9      	str	r1, [r7, #88]	; 0x58
 8001506:	f143 0300 	adc.w	r3, r3, #0
 800150a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800150c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001510:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8

//	OFF = C[1]*65536 + (C[3]*dT)/128;
//	SENS = C[0]*32768 + (C[2]*dT)/256;
//	P = ((D1 * SENS)/(2097152) - OFF)/8192;

	OFF = (C[1])*131072+(C[3]*dT)/64;
 8001514:	4bc5      	ldr	r3, [pc, #788]	; (800182c <calculate+0x424>)
 8001516:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800151a:	f04f 0800 	mov.w	r8, #0
 800151e:	f04f 0900 	mov.w	r9, #0
 8001522:	ea4f 4943 	mov.w	r9, r3, lsl #17
 8001526:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 800152a:	ea4f 4842 	mov.w	r8, r2, lsl #17
 800152e:	4bbf      	ldr	r3, [pc, #764]	; (800182c <calculate+0x424>)
 8001530:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001534:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001538:	fb02 f501 	mul.w	r5, r2, r1
 800153c:	fb00 f403 	mul.w	r4, r0, r3
 8001540:	442c      	add	r4, r5
 8001542:	fba0 ab02 	umull	sl, fp, r0, r2
 8001546:	eb04 030b 	add.w	r3, r4, fp
 800154a:	469b      	mov	fp, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	ea4f 129a 	mov.w	r2, sl, lsr #6
 8001558:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800155c:	ea4f 139b 	mov.w	r3, fp, lsr #6
 8001560:	eb18 0102 	adds.w	r1, r8, r2
 8001564:	6539      	str	r1, [r7, #80]	; 0x50
 8001566:	eb49 0303 	adc.w	r3, r9, r3
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
 800156c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001570:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	SENS = C[0]*65536+(C[2]*dT)/128;
 8001574:	4bad      	ldr	r3, [pc, #692]	; (800182c <calculate+0x424>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f04f 0800 	mov.w	r8, #0
 800157e:	f04f 0900 	mov.w	r9, #0
 8001582:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8001586:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 800158a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800158e:	4ba7      	ldr	r3, [pc, #668]	; (800182c <calculate+0x424>)
 8001590:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001594:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001598:	fb02 f501 	mul.w	r5, r2, r1
 800159c:	fb00 f403 	mul.w	r4, r0, r3
 80015a0:	442c      	add	r4, r5
 80015a2:	fba0 2302 	umull	r2, r3, r0, r2
 80015a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015aa:	4613      	mov	r3, r2
 80015ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b4:	18e3      	adds	r3, r4, r3
 80015b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80015c6:	4621      	mov	r1, r4
 80015c8:	09ca      	lsrs	r2, r1, #7
 80015ca:	4629      	mov	r1, r5
 80015cc:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80015d0:	4629      	mov	r1, r5
 80015d2:	09cb      	lsrs	r3, r1, #7
 80015d4:	eb18 0102 	adds.w	r1, r8, r2
 80015d8:	64b9      	str	r1, [r7, #72]	; 0x48
 80015da:	eb49 0303 	adc.w	r3, r9, r3
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80015e4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	P = (D1*SENS/(2097152)-OFF)/(32768);
 80015e8:	4b91      	ldr	r3, [pc, #580]	; (8001830 <calculate+0x428>)
 80015ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ee:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80015f2:	fb02 f501 	mul.w	r5, r2, r1
 80015f6:	fb00 f403 	mul.w	r4, r0, r3
 80015fa:	442c      	add	r4, r5
 80015fc:	fba0 2302 	umull	r2, r3, r0, r2
 8001600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001604:	4613      	mov	r3, r2
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800160a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160e:	18e3      	adds	r3, r4, r3
 8001610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001620:	4623      	mov	r3, r4
 8001622:	0d58      	lsrs	r0, r3, #21
 8001624:	462b      	mov	r3, r5
 8001626:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800162a:	462b      	mov	r3, r5
 800162c:	0d59      	lsrs	r1, r3, #21
 800162e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001632:	1a84      	subs	r4, r0, r2
 8001634:	643c      	str	r4, [r7, #64]	; 0x40
 8001636:	eb61 0303 	sbc.w	r3, r1, r3
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001648:	4621      	mov	r1, r4
 800164a:	0bca      	lsrs	r2, r1, #15
 800164c:	4629      	mov	r1, r5
 800164e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001652:	4629      	mov	r1, r5
 8001654:	0bcb      	lsrs	r3, r1, #15
 8001656:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 800165a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800165e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001662:	fb03 f102 	mul.w	r1, r3, r2
 8001666:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800166a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	18ca      	adds	r2, r1, r3
 8001674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001678:	fba3 1303 	umull	r1, r3, r3, r3
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800167e:	460b      	mov	r3, r1
 8001680:	67bb      	str	r3, [r7, #120]	; 0x78
 8001682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001688:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800168c:	460b      	mov	r3, r1
 800168e:	18db      	adds	r3, r3, r3
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4613      	mov	r3, r2
 8001694:	eb42 0303 	adc.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7fe ff23 	bl	80004ec <__aeabi_l2d>
 80016a6:	a35e      	add	r3, pc, #376	; (adr r3, 8001820 <calculate+0x418>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7ff f876 	bl	800079c <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fac0 	bl	8000c3c <__aeabi_d2lz>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 80016c4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016c8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80016ce:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016d8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016dc:	6339      	str	r1, [r7, #48]	; 0x30
 80016de:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80016e8:	462b      	mov	r3, r5
 80016ea:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80016ee:	4642      	mov	r2, r8
 80016f0:	fb02 f203 	mul.w	r2, r2, r3
 80016f4:	464b      	mov	r3, r9
 80016f6:	4621      	mov	r1, r4
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	4622      	mov	r2, r4
 8001700:	4641      	mov	r1, r8
 8001702:	fba2 1201 	umull	r1, r2, r2, r1
 8001706:	677a      	str	r2, [r7, #116]	; 0x74
 8001708:	460a      	mov	r2, r1
 800170a:	673a      	str	r2, [r7, #112]	; 0x70
 800170c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800170e:	4413      	add	r3, r2
 8001710:	677b      	str	r3, [r7, #116]	; 0x74
 8001712:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001716:	2900      	cmp	r1, #0
 8001718:	da07      	bge.n	800172a <calculate+0x322>
 800171a:	f110 030f 	adds.w	r3, r0, #15
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	f141 0300 	adc.w	r3, r1, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	0902      	lsrs	r2, r0, #4
 8001734:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001738:	110b      	asrs	r3, r1, #4
 800173a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	SENSi = 0;
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	//	}

	OFF2 = OFF - OFFi;
 800174a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800174e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001752:	1a84      	subs	r4, r0, r2
 8001754:	60bc      	str	r4, [r7, #8]
 8001756:	eb61 0303 	sbc.w	r3, r1, r3
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001760:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS2 = SENS - SENSi;
 8001764:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001768:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800176c:	1a84      	subs	r4, r0, r2
 800176e:	603c      	str	r4, [r7, #0]
 8001770:	eb61 0303 	sbc.w	r3, r1, r3
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e9d7 3400 	ldrd	r3, r4, [r7]
 800177a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	TEMP2 = (TEMP - Ti) / 100; //C
 800177e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001782:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001786:	1a84      	subs	r4, r0, r2
 8001788:	62bc      	str	r4, [r7, #40]	; 0x28
 800178a:	eb61 0303 	sbc.w	r3, r1, r3
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001790:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800179c:	f7ff f9e6 	bl	8000b6c <__aeabi_ldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <calculate+0x428>)
 80017aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ae:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80017b2:	fb02 f501 	mul.w	r5, r2, r1
 80017b6:	fb00 f403 	mul.w	r4, r0, r3
 80017ba:	442c      	add	r4, r5
 80017bc:	fba0 2302 	umull	r2, r3, r0, r2
 80017c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017c2:	4613      	mov	r3, r2
 80017c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80017c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c8:	18e3      	adds	r3, r4, r3
 80017ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80017d8:	4621      	mov	r1, r4
 80017da:	0d4a      	lsrs	r2, r1, #21
 80017dc:	4629      	mov	r1, r5
 80017de:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80017e2:	4629      	mov	r1, r5
 80017e4:	0d4b      	lsrs	r3, r1, #21
 80017e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80017ea:	1a14      	subs	r4, r2, r0
 80017ec:	623c      	str	r4, [r7, #32]
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
 80017f4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001800:	f7ff fa04 	bl	8000c0c <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int32_t res[2];
	res[0] = P;
 800180c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	res[1] = TEMP/100;
 8001814:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001818:	f04f 0264 	mov.w	r2, #100	; 0x64
 800181c:	e00a      	b.n	8001834 <calculate+0x42c>
 800181e:	bf00      	nop
 8001820:	fe280000 	.word	0xfe280000
 8001824:	423fffff 	.word	0x423fffff
 8001828:	20000178 	.word	0x20000178
 800182c:	20000138 	.word	0x20000138
 8001830:	20000170 	.word	0x20000170
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	f7ff f998 	bl	8000b6c <__aeabi_ldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	presure = res[0]/10;
 8001846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <calculate+0x45c>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	1092      	asrs	r2, r2, #2
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <calculate+0x460>)
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	37f8      	adds	r7, #248	; 0xf8
 800185e:	46bd      	mov	sp, r7
 8001860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001864:	66666667 	.word	0x66666667
 8001868:	20000180 	.word	0x20000180

0800186c <GetCrc16Checksumm>:
 */

#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8001878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187c:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	3b02      	subs	r3, #2
 8001882:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8001884:	e025      	b.n	80018d2 <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001896:	4053      	eors	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	737b      	strb	r3, [r7, #13]
 80018a0:	e014      	b.n	80018cc <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 80018a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da09      	bge.n	80018be <GetCrc16Checksumm+0x52>
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	e002      	b.n	80018c4 <GetCrc16Checksumm+0x58>
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 80018c6:	7b7b      	ldrb	r3, [r7, #13]
 80018c8:	3301      	adds	r3, #1
 80018ca:	737b      	strb	r3, [r7, #13]
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d9e7      	bls.n	80018a2 <GetCrc16Checksumm+0x36>
    while (len--) {
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	807a      	strh	r2, [r7, #2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1d4      	bne.n	8001886 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 80018dc:	89fb      	ldrh	r3, [r7, #14]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb6 	bl	800186c <GetCrc16Checksumm>
 8001900:	4603      	mov	r3, r0
 8001902:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	3b02      	subs	r3, #2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 8001914:	89fa      	ldrh	r2, [r7, #14]
 8001916:	8afb      	ldrh	r3, [r7, #22]
 8001918:	429a      	cmp	r2, r3
 800191a:	d101      	bne.n	8001920 <IsCrc16ChecksummCorrect+0x36>
		return true;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8001920:	2300      	movs	r3, #0
	}
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff96 	bl	800186c <GetCrc16Checksumm>
 8001940:	4603      	mov	r3, r0
 8001942:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	3b02      	subs	r3, #2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	89fa      	ldrh	r2, [r7, #14]
 8001952:	801a      	strh	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	3b01      	subs	r3, #1
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e009      	b.n	8001992 <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	4053      	eors	r3, r2
 800198a:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3301      	adds	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	3b01      	subs	r3, #1
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 800199c:	7dfa      	ldrb	r2, [r7, #23]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d101      	bne.n	80019a8 <IsChecksumm8bCorrect+0x4c>
        return 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <IsChecksumm8bCorrect+0x4e>
    else return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	e009      	b.n	80019e4 <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	4053      	eors	r3, r2
 80019dc:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e009      	b.n	8001a3c <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	4053      	eors	r3, r2
 8001a34:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf0      	blt.n	8001a28 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8001a46:	7dfa      	ldrb	r2, [r7, #23]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d101      	bne.n	8001a52 <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 8001a52:	2300      	movs	r3, #0
	}
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 8001a70:	2301      	movs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	e009      	b.n	8001a8a <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	4053      	eors	r3, r2
 8001a82:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d857      	bhi.n	8001b72 <PickBit+0xc6>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <PickBit+0x1c>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ae9 	.word	0x08001ae9
 8001acc:	08001afb 	.word	0x08001afb
 8001ad0:	08001b0d 	.word	0x08001b0d
 8001ad4:	08001b1f 	.word	0x08001b1f
 8001ad8:	08001b31 	.word	0x08001b31
 8001adc:	08001b43 	.word	0x08001b43
 8001ae0:	08001b55 	.word	0x08001b55
 8001ae4:	08001b67 	.word	0x08001b67
	case 0:
			return (bool) (input & 0b00000001);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	e03c      	b.n	8001b74 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e033      	b.n	8001b74 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	e02a      	b.n	8001b74 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e021      	b.n	8001b74 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e018      	b.n	8001b74 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	e00f      	b.n	8001b74 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	e006      	b.n	8001b74 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	09db      	lsrs	r3, r3, #7
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e000      	b.n	8001b74 <PickBit+0xc8>
	}
	return false;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <variableInit>:

uint16_t counterRx = 0;


void variableInit()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b86:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 8001b88:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <variableInit+0x13c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <variableInit+0x140>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <variableInit+0x140>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <variableInit+0x140>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <variableInit+0x140>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <variableInit+0x140>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <variableInit+0x140>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <variableInit+0x144>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <variableInit+0x144>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <variableInit+0x144>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <variableInit+0x144>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <variableInit+0x144>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <variableInit+0x144>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	831a      	strh	r2, [r3, #24]

	rSensors.pressure_raw = 0;
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <variableInit+0x144>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58
	rSensors.pressure = 0;
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <variableInit+0x144>)
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c
	rSensors.pressure_null = 0;
 8001bf0:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <variableInit+0x144>)
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	661a      	str	r2, [r3, #96]	; 0x60
	rSensors.last_pressure = 0;
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <variableInit+0x144>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	665a      	str	r2, [r3, #100]	; 0x64

	rSensors.rollSpeed = 0;
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <variableInit+0x144>)
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <variableInit+0x144>)
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 8001c10:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <variableInit+0x144>)
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <variableInit+0x144>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <variableInit+0x144>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <variableInit+0x144>)
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <variableInit+0x144>)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <variableInit+0x144>)
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <variableInit+0x144>)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <variableInit+0x144>)
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <variableInit+0x144>)
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <variableInit+0x144>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <variableInit+0x144>)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <variableInit+0x148>)
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <variableInit+0x148>)
 8001c72:	2205      	movs	r2, #5
 8001c74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <variableInit+0x148>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <variableInit+0x148>)
 8001c80:	2206      	movs	r2, #6
 8001c82:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <variableInit+0x148>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	779a      	strb	r2, [r3, #30]

	rSensors.startIMU = true;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <variableInit+0x144>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rSensors.startPressure = true;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <variableInit+0x144>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	thrustersInit();
 8001c9a:	f003 faff 	bl	800529c <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 f96d 	bl	8002f80 <flashReadSettings>
	flashReadStructure(&config);
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 fb23 	bl	80032f4 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <variableInit+0x140>)
 8001cb0:	789b      	ldrb	r3, [r3, #2]
 8001cb2:	2b00      	cmp	r3, #0
		return;
	}
}
 8001cb4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20001e3c 	.word	0x20001e3c
 8001cc0:	20001d2c 	.word	0x20001d2c
 8001cc4:	20001dc8 	.word	0x20001dc8
 8001cc8:	20001e70 	.word	0x20001e70

08001ccc <uartBusesInit>:

void uartBusesInit()
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001cd2:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001cd4:	4a75      	ldr	r2, [pc, #468]	; (8001eac <uartBusesInit+0x1e0>)
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001cd8:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001cda:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <uartBusesInit+0x1e4>)
 8001cdc:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001cde:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001ce0:	4a74      	ldr	r2, [pc, #464]	; (8001eb4 <uartBusesInit+0x1e8>)
 8001ce2:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001cec:	4b6e      	ldr	r3, [pc, #440]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001cf6:	2214      	movs	r2, #20
 8001cf8:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 8001cfa:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001cfc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d00:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001d02:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d04:	22c8      	movs	r2, #200	; 0xc8
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d0a:	22c8      	movs	r2, #200	; 0xc8
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001d0e:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 8001d16:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d18:	4a67      	ldr	r2, [pc, #412]	; (8001eb8 <uartBusesInit+0x1ec>)
 8001d1a:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d22:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 8001d28:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001d30:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d38:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d40:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 8001d46:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d48:	2264      	movs	r2, #100	; 0x64
 8001d4a:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001d4c:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d4e:	2264      	movs	r2, #100	; 0x64
 8001d50:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 8001d52:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d5c:	4a57      	ldr	r2, [pc, #348]	; (8001ebc <uartBusesInit+0x1f0>)
 8001d5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d62:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d68:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 8001d76:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d78:	220a      	movs	r2, #10
 8001d7a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d86:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d90:	2264      	movs	r2, #100	; 0x64
 8001d92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001d98:	2264      	movs	r2, #100	; 0x64
 8001d9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 8001d9e:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 8001da6:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001da8:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <uartBusesInit+0x1f4>)
 8001daa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001db0:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <uartBusesInit+0x1f8>)
 8001db2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001dde:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001de0:	2264      	movs	r2, #100	; 0x64
 8001de2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001de8:	2264      	movs	r2, #100	; 0x64
 8001dea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e04a      	b.n	8001e92 <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001dfc:	79fa      	ldrb	r2, [r7, #7]
 8001dfe:	492a      	ldr	r1, [pc, #168]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	3308      	adds	r3, #8
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	4925      	ldr	r1, [pc, #148]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3309      	adds	r3, #9
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	4920      	ldr	r1, [pc, #128]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	330a      	adds	r3, #10
 8001e34:	2200      	movs	r2, #0
 8001e36:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	491b      	ldr	r1, [pc, #108]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	330c      	adds	r3, #12
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001e4c:	79fa      	ldrb	r2, [r7, #7]
 8001e4e:	4916      	ldr	r1, [pc, #88]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3310      	adds	r3, #16
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	4911      	ldr	r1, [pc, #68]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3314      	adds	r3, #20
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	490b      	ldr	r1, [pc, #44]	; (8001ea8 <uartBusesInit+0x1dc>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3318      	adds	r3, #24
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d9b1      	bls.n	8001dfc <uartBusesInit+0x130>
	}
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000018c 	.word	0x2000018c
 8001eac:	20002810 	.word	0x20002810
 8001eb0:	20002288 	.word	0x20002288
 8001eb4:	200022dc 	.word	0x200022dc
 8001eb8:	20002700 	.word	0x20002700
 8001ebc:	20002678 	.word	0x20002678
 8001ec0:	20002788 	.word	0x20002788
 8001ec4:	20002340 	.word	0x20002340

08001ec8 <i2cBusesInit>:

void i2cBusesInit()
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
	// TODO refactor i2c communication routines
	i2cBus[DEV_I2C].hi2c = &hi2c1; // Link to hi2c will be set before receiving
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <i2cBusesInit+0x14>)
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <i2cBusesInit+0x18>)
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	2000026c 	.word	0x2000026c
 8001ee0:	200023e8 	.word	0x200023e8

08001ee4 <transmitPackage>:


bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4618      	mov	r0, r3
 8001efc:	f009 f822 	bl	800af44 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00d      	beq.n	8001f26 <transmitPackage+0x42>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d117      	bne.n	8001f3e <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f008 ff50 	bl	800adc4 <HAL_UART_Transmit_DMA>
            break;
 8001f24:	e00d      	b.n	8001f42 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	f008 fea2 	bl	800ac80 <HAL_UART_Transmit_IT>
            break;
 8001f3c:	e001      	b.n	8001f42 <transmitPackage+0x5e>
        default:
            return false;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e036      	b.n	8001fb0 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001f42:	f00c f9af 	bl	800e2a4 <xTaskGetTickCount>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f833 	bl	8000fb4 <fromTickToMs>
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 8001f58:	e01c      	b.n	8001f94 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 8001f5a:	f00c f9a3 	bl	800e2a4 <xTaskGetTickCount>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f827 	bl	8000fb4 <fromTickToMs>
 8001f66:	eeb0 7a40 	vmov.f32	s14, s0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	dd01      	ble.n	8001f8e <transmitPackage+0xaa>
    		return false;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e010      	b.n	8001fb0 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 8001f8e:	2032      	movs	r0, #50	; 0x32
 8001f90:	f00a fe5e 	bl	800cc50 <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7a5b      	ldrb	r3, [r3, #9]
 8001f98:	f083 0301 	eor.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <transmitPackage+0xca>
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f083 0301 	eor.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1d5      	bne.n	8001f5a <transmitPackage+0x76>
    }
    return true;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f009 f82d 	bl	800b034 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f008 ffb0 	bl	800af44 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d018      	beq.n	8002020 <transmitAndReceive+0x68>
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12d      	bne.n	800204e <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	f008 ff5a 	bl	800aebc <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	f008 fed3 	bl	800adc4 <HAL_UART_Transmit_DMA>
			break;
 800201e:	e018      	b.n	8002052 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	f008 fe83 	bl	800ad3c <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	f008 fe1a 	bl	800ac80 <HAL_UART_Transmit_IT>
			break;
 800204c:	e001      	b.n	8002052 <transmitAndReceive+0x9a>
		default:
			return false;
 800204e:	2300      	movs	r3, #0
 8002050:	e03d      	b.n	80020ce <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8002052:	f00c f927 	bl	800e2a4 <xTaskGetTickCount>
 8002056:	4603      	mov	r3, r0
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ffab 	bl	8000fb4 <fromTickToMs>
 800205e:	eef0 7a40 	vmov.f32	s15, s0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8002068:	e01c      	b.n	80020a4 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800206a:	f00c f91b 	bl	800e2a4 <xTaskGetTickCount>
 800206e:	4603      	mov	r3, r0
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ff9f 	bl	8000fb4 <fromTickToMs>
 8002076:	eeb0 7a40 	vmov.f32	s14, s0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002080:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	dd01      	ble.n	800209e <transmitAndReceive+0xe6>
			return false;
 800209a:	2300      	movs	r3, #0
 800209c:	e017      	b.n	80020ce <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 800209e:	2032      	movs	r0, #50	; 0x32
 80020a0:	f00a fdd6 	bl	800cc50 <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7a5b      	ldrb	r3, [r3, #9]
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <transmitAndReceive+0x114>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7a1b      	ldrb	r3, [r3, #8]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <transmitAndReceive+0x114>
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f083 0301 	eor.w	r3, r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ce      	bne.n	800206a <transmitAndReceive+0xb2>
	}
	return true;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_UART_TxCpltCallback+0x6c>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d103      	bne.n	80020f2 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_UART_TxCpltCallback+0x6c>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	725a      	strb	r2, [r3, #9]
		return;
 80020f0:	e022      	b.n	8002138 <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e01a      	b.n	8002132 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	4911      	ldr	r1, [pc, #68]	; (8002144 <HAL_UART_TxCpltCallback+0x6c>)
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3330      	adds	r3, #48	; 0x30
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d10b      	bne.n	800212c <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_UART_TxCpltCallback+0x6c>)
 8002120:	4413      	add	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2201      	movs	r2, #1
 8002128:	725a      	strb	r2, [r3, #9]
			break;
 800212a:	e005      	b.n	8002138 <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	3301      	adds	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d9e1      	bls.n	80020fc <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000018c 	.word	0x2000018c

08002148 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_UART_RxCpltCallback+0x7c>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d102      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800215a:	f000 f84b 	bl	80021f4 <ShoreReceive>
		return;
 800215e:	e02d      	b.n	80021bc <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e025      	b.n	80021b6 <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	4915      	ldr	r1, [pc, #84]	; (80021c4 <HAL_UART_RxCpltCallback+0x7c>)
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3330      	adds	r3, #48	; 0x30
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d116      	bne.n	80021b0 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_UART_RxCpltCallback+0x7c>)
 800218e:	4413      	add	r3, r2
 8002190:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2201      	movs	r2, #1
 8002196:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 8002198:	f00c f884 	bl	800e2a4 <xTaskGetTickCount>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe ff08 	bl	8000fb4 <fromTickToMs>
 80021a4:	eef0 7a40 	vmov.f32	s15, s0
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 80021ae:	e005      	b.n	80021bc <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	3301      	adds	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d9d6      	bls.n	800216a <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000018c 	.word	0x2000018c

080021c8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterRxCplt(hi2c);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe ffcf 	bl	8001174 <MS5837_I2C_MasterRxCplt>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterTxCplt(hi2c);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff f814 	bl	8001214 <MS5837_I2C_MasterTxCplt>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <ShoreReceive>:
	MS5837_I2C_MasterError(hi2c);
}


void ShoreReceive()
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <ShoreReceive+0xec>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <ShoreReceive+0xf0>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d142      	bne.n	800228e <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8002208:	2300      	movs	r3, #0
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	e03b      	b.n	8002286 <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <ShoreReceive+0xf4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	4935      	ldr	r1, [pc, #212]	; (80022ec <ShoreReceive+0xf8>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	429a      	cmp	r2, r3
 800221c:	d125      	bne.n	800226a <ShoreReceive+0x76>
				counterRx = 1;
 800221e:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <ShoreReceive+0xf0>)
 8002220:	2201      	movs	r2, #1
 8002222:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <ShoreReceive+0xfc>)
 8002228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <ShoreReceive+0xf4>)
 8002234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <ShoreReceive+0xf4>)
 800223a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <ShoreReceive+0xf4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <ShoreReceive+0xf4>)
 8002244:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002248:	b292      	uxth	r2, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f008 fd76 	bl	800ad3c <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <ShoreReceive+0x100>)
 8002252:	681c      	ldr	r4, [r3, #0]
 8002254:	f00c f836 	bl	800e2c4 <xTaskGetTickCountFromISR>
 8002258:	4602      	mov	r2, r0
 800225a:	2300      	movs	r3, #0
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <ShoreReceive+0xec>)
 8002260:	2106      	movs	r1, #6
 8002262:	4620      	mov	r0, r4
 8002264:	f00c fe92 	bl	800ef8c <xTimerGenericCommand>
				break;
 8002268:	e026      	b.n	80022b8 <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d107      	bne.n	8002280 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <ShoreReceive+0xf4>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <ShoreReceive+0xf4>)
 8002276:	6811      	ldr	r1, [r2, #0]
 8002278:	2201      	movs	r2, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f008 fd5e 	bl	800ad3c <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	3301      	adds	r3, #1
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d9c0      	bls.n	800220e <ShoreReceive+0x1a>
 800228c:	e014      	b.n	80022b8 <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <ShoreReceive+0xf0>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d110      	bne.n	80022b8 <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <ShoreReceive+0xf4>)
 8002298:	2201      	movs	r2, #1
 800229a:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 800229c:	f00c f802 	bl	800e2a4 <xTaskGetTickCount>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe86 	bl	8000fb4 <fromTickToMs>
 80022a8:	eef0 7a40 	vmov.f32	s15, s0
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <ShoreReceive+0xf4>)
 80022ae:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <ShoreReceive+0xf0>)
 80022b4:	2202      	movs	r2, #2
 80022b6:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <ShoreReceive+0xec>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10a      	bne.n	80022d6 <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <ShoreReceive+0xec>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
		taskYIELD();
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <ShoreReceive+0x104>)
 80022c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	f3bf 8f6f 	isb	sy
	}
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000278 	.word	0x20000278
 80022e4:	20000274 	.word	0x20000274
 80022e8:	2000018c 	.word	0x2000018c
 80022ec:	080107c4 	.word	0x080107c4
 80022f0:	080107bc 	.word	0x080107bc
 80022f4:	20000280 	.word	0x20000280
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 8002308:	23aa      	movs	r3, #170	; 0xaa
 800230a:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 800230c:	23aa      	movs	r3, #170	; 0xaa
 800230e:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	4916      	ldr	r1, [pc, #88]	; (800236c <DevicesRequestUpdate+0x70>)
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	440b      	add	r3, r1
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	4911      	ldr	r1, [pc, #68]	; (800236c <DevicesRequestUpdate+0x70>)
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	3301      	adds	r3, #1
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	72fb      	strb	r3, [r7, #11]
    //req.velocity1 = 0;
    //req.velocity2 = rDevice[dev].force;

   // if(dev == GRAB) {
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <DevicesRequestUpdate+0x70>)
 8002338:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800233c:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <DevicesRequestUpdate+0x70>)
 8002340:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002344:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	461a      	mov	r2, r3
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	6010      	str	r0, [r2, #0]
 8002352:	8899      	ldrh	r1, [r3, #4]
 8002354:	799b      	ldrb	r3, [r3, #6]
 8002356:	8091      	strh	r1, [r2, #4]
 8002358:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800235a:	2107      	movs	r1, #7
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fb2a 	bl	80019b6 <AddChecksumm8b>
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001e70 	.word	0x20001e70

08002370 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 800237c:	210a      	movs	r1, #10
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff faec 	bl	800195c <IsChecksumm8bCorrect>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04a      	beq.n	8002420 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	6810      	ldr	r0, [r2, #0]
 8002392:	6851      	ldr	r1, [r2, #4]
 8002394:	c303      	stmia	r3!, {r0, r1}
 8002396:	8912      	ldrh	r2, [r2, #8]
 8002398:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80023a0:	b298      	uxth	r0, r3
 80023a2:	4924      	ldr	r1, [pc, #144]	; (8002434 <DevicesResponseUpdate+0xc4>)
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	3304      	adds	r3, #4
 80023b0:	4602      	mov	r2, r0
 80023b2:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	7cf8      	ldrb	r0, [r7, #19]
 80023b8:	491e      	ldr	r1, [pc, #120]	; (8002434 <DevicesResponseUpdate+0xc4>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	440b      	add	r3, r1
 80023c4:	3307      	adds	r3, #7
 80023c6:	4602      	mov	r2, r0
 80023c8:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	7d38      	ldrb	r0, [r7, #20]
 80023ce:	4919      	ldr	r1, [pc, #100]	; (8002434 <DevicesResponseUpdate+0xc4>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	440b      	add	r3, r1
 80023da:	3308      	adds	r3, #8
 80023dc:	4602      	mov	r2, r0
 80023de:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <DevicesResponseUpdate+0xc4>)
 80023e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <DevicesResponseUpdate+0x88>
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d103      	bne.n	80023f8 <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <DevicesResponseUpdate+0xc8>)
 80023f2:	2203      	movs	r2, #3
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	e00a      	b.n	800240e <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <DevicesResponseUpdate+0xc4>)
 80023fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <DevicesResponseUpdate+0x9e>
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d102      	bne.n	800240e <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <DevicesResponseUpdate+0xc8>)
 800240a:	2204      	movs	r2, #4
 800240c:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <DevicesResponseUpdate+0xcc>)
 8002410:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002414:	3301      	adds	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <DevicesResponseUpdate+0xcc>)
 800241a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 800241e:	e004      	b.n	800242a <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <DevicesResponseUpdate+0xcc>)
 8002422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002424:	3301      	adds	r3, #1
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <DevicesResponseUpdate+0xcc>)
 8002428:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20001e70 	.word	0x20001e70
 8002438:	20001eac 	.word	0x20001eac
 800243c:	2000018c 	.word	0x2000018c

08002440 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8002446:	af00      	add	r7, sp, #0
 8002448:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800244c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002450:	6018      	str	r0, [r3, #0]
	bool flag = false;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	flag = IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH);
 8002458:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800245c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002460:	211f      	movs	r1, #31
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	f7ff fa41 	bl	80018ea <IsCrc16ChecksummCorrect>
 8002468:	4603      	mov	r3, r0
 800246a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 800246e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002472:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002476:	211f      	movs	r1, #31
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f7ff fa36 	bl	80018ea <IsCrc16ChecksummCorrect>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8142 	beq.w	800270a <ShoreRequest+0x2ca>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 8002486:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800248a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f507 7405 	add.w	r4, r7, #532	; 0x214
 8002494:	461d      	mov	r5, r3
 8002496:	6828      	ldr	r0, [r5, #0]
 8002498:	6869      	ldr	r1, [r5, #4]
 800249a:	68aa      	ldr	r2, [r5, #8]
 800249c:	68eb      	ldr	r3, [r5, #12]
 800249e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a0:	6928      	ldr	r0, [r5, #16]
 80024a2:	6969      	ldr	r1, [r5, #20]
 80024a4:	69aa      	ldr	r2, [r5, #24]
 80024a6:	c407      	stmia	r4!, {r0, r1, r2}
 80024a8:	8bab      	ldrh	r3, [r5, #28]
 80024aa:	7faa      	ldrb	r2, [r5, #30]
 80024ac:	8023      	strh	r3, [r4, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	70a3      	strb	r3, [r4, #2]

    	uint8_t tempCameraNum = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

        rJoySpeed.march = req.march;
 80024b8:	f8d7 3217 	ldr.w	r3, [r7, #535]	; 0x217
 80024bc:	4a98      	ldr	r2, [pc, #608]	; (8002720 <ShoreRequest+0x2e0>)
 80024be:	6013      	str	r3, [r2, #0]
        rJoySpeed.lag = req.lag;
 80024c0:	f8d7 321b 	ldr.w	r3, [r7, #539]	; 0x21b
 80024c4:	4a96      	ldr	r2, [pc, #600]	; (8002720 <ShoreRequest+0x2e0>)
 80024c6:	6053      	str	r3, [r2, #4]
        rJoySpeed.depth = req.depth;
 80024c8:	f8d7 321f 	ldr.w	r3, [r7, #543]	; 0x21f
 80024cc:	4a94      	ldr	r2, [pc, #592]	; (8002720 <ShoreRequest+0x2e0>)
 80024ce:	6093      	str	r3, [r2, #8]
        rJoySpeed.roll = req.roll;
 80024d0:	f8d7 3223 	ldr.w	r3, [r7, #547]	; 0x223
 80024d4:	4a92      	ldr	r2, [pc, #584]	; (8002720 <ShoreRequest+0x2e0>)
 80024d6:	60d3      	str	r3, [r2, #12]
        rJoySpeed.pitch = req.pitch;
 80024d8:	f8d7 3227 	ldr.w	r3, [r7, #551]	; 0x227
 80024dc:	4a90      	ldr	r2, [pc, #576]	; (8002720 <ShoreRequest+0x2e0>)
 80024de:	6113      	str	r3, [r2, #16]
        rJoySpeed.yaw = req.yaw;
 80024e0:	f8d7 322b 	ldr.w	r3, [r7, #555]	; 0x22b
 80024e4:	4a8e      	ldr	r2, [pc, #568]	; (8002720 <ShoreRequest+0x2e0>)
 80024e6:	6153      	str	r3, [r2, #20]

        rDevice[GRAB].force = req.grab;
 80024e8:	f997 2230 	ldrsb.w	r2, [r7, #560]	; 0x230
 80024ec:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <ShoreRequest+0x2e4>)
 80024ee:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 80024f0:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <ShoreRequest+0x2e4>)
 80024f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80024f6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80024fa:	d102      	bne.n	8002502 <ShoreRequest+0xc2>
            rDevice[GRAB].force = -127;
 80024fc:	4b89      	ldr	r3, [pc, #548]	; (8002724 <ShoreRequest+0x2e4>)
 80024fe:	2281      	movs	r2, #129	; 0x81
 8002500:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.drop;
 8002502:	f997 222f 	ldrsb.w	r2, [r7, #559]	; 0x22f
 8002506:	4b87      	ldr	r3, [pc, #540]	; (8002724 <ShoreRequest+0x2e4>)
 8002508:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 800250c:	4b85      	ldr	r3, [pc, #532]	; (8002724 <ShoreRequest+0x2e4>)
 800250e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8002512:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002516:	d103      	bne.n	8002520 <ShoreRequest+0xe0>
        	rDevice[TILT].force = -127;
 8002518:	4b82      	ldr	r3, [pc, #520]	; (8002724 <ShoreRequest+0x2e4>)
 800251a:	2281      	movs	r2, #129	; 0x81
 800251c:	f883 2020 	strb.w	r2, [r3, #32]
//        rDevice[DEV1].force = req.dev1;
//        rDevice[DEV2].force = req.dev2;

//        rState.lag_error = (float) req.lag_error;

        rSensors.startIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 8002520:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002524:	2106      	movs	r1, #6
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fac0 	bl	8001aac <PickBit>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <ShoreRequest+0x2e8>)
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 8002536:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800253a:	2107      	movs	r1, #7
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fab5 	bl	8001aac <PickBit>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <ShoreRequest+0x11c>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd75 	bl	800303c <flashFillStructure>
        	flashWriteSettings(&config);
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fd36 	bl	8002fc8 <flashWriteSettings>
        }

//        tempCameraNum = req.cameras;

        uint8_t old_reset = rComputer.reset;
 800255c:	4b73      	ldr	r3, [pc, #460]	; (800272c <ShoreRequest+0x2ec>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
   //         	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
//            }
//        }
//        rComputer.reset = req.pc_reset;

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 8002564:	4b72      	ldr	r3, [pc, #456]	; (8002730 <ShoreRequest+0x2f0>)
 8002566:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800256a:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 800256e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002572:	2103      	movs	r1, #3
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fa99 	bl	8001aac <PickBit>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <ShoreRequest+0x2f0>)
 8002580:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 8002584:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <ShoreRequest+0x162>
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <ShoreRequest+0x2f0>)
 8002594:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <ShoreRequest+0x162>
        	stabilizationStart(STAB_YAW);
 800259c:	2003      	movs	r0, #3
 800259e:	f002 f9cf 	bl	8004940 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <ShoreRequest+0x2f0>)
 80025a4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80025a8:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 80025ac:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fa7a 	bl	8001aac <PickBit>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <ShoreRequest+0x2f0>)
 80025be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 80025c2:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <ShoreRequest+0x1a0>
 80025d0:	4b57      	ldr	r3, [pc, #348]	; (8002730 <ShoreRequest+0x2f0>)
 80025d2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <ShoreRequest+0x1a0>
        	stabilizationStart(STAB_ROLL);
 80025da:	2004      	movs	r0, #4
 80025dc:	f002 f9b0 	bl	8004940 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <ShoreRequest+0x2f0>)
 80025e2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80025e6:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 80025ea:	4b51      	ldr	r3, [pc, #324]	; (8002730 <ShoreRequest+0x2f0>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 80025f2:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <ShoreRequest+0x1d0>
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <ShoreRequest+0x2f0>)
 8002602:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <ShoreRequest+0x1d0>
        	stabilizationStart(STAB_PITCH);
 800260a:	2005      	movs	r0, #5
 800260c:	f002 f998 	bl	8004940 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 8002610:	4b47      	ldr	r3, [pc, #284]	; (8002730 <ShoreRequest+0x2f0>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8002618:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fa44 	bl	8001aac <PickBit>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <ShoreRequest+0x2f0>)
 800262a:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 800262c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <ShoreRequest+0x208>
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <ShoreRequest+0x2f0>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <ShoreRequest+0x208>
        	stabilizationStart(STAB_DEPTH);
 8002642:	2000      	movs	r0, #0
 8002644:	f002 f97c 	bl	8004940 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <ShoreRequest+0x2f0>)
 800264a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800264e:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 8002652:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002656:	2104      	movs	r1, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fa27 	bl	8001aac <PickBit>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <ShoreRequest+0x2f0>)
 8002664:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8002668:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <ShoreRequest+0x246>
 8002676:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <ShoreRequest+0x2f0>)
 8002678:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <ShoreRequest+0x246>
        	stabilizationStart(STAB_LAG);
 8002680:	2002      	movs	r0, #2
 8002682:	f002 f95d 	bl	8004940 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <ShoreRequest+0x2f0>)
 8002688:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800268c:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8002690:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002694:	2105      	movs	r1, #5
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fa08 	bl	8001aac <PickBit>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <ShoreRequest+0x2f0>)
 80026a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 80026a6:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <ShoreRequest+0x284>
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <ShoreRequest+0x2f0>)
 80026b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <ShoreRequest+0x284>
        	stabilizationStart(STAB_MARCH);
 80026be:	2001      	movs	r0, #1
 80026c0:	f002 f93e 	bl	8004940 <stabilizationStart>
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <ShoreRequest+0x2f4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f897 2236 	ldrb.w	r2, [r7, #566]	; 0x236
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d013      	beq.n	80026f8 <ShoreRequest+0x2b8>
        	rState.cameraNum = tempCameraNum;
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <ShoreRequest+0x2f4>)
 80026d2:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80026d6:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <ShoreRequest+0x2f4>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d80b      	bhi.n	80026f8 <ShoreRequest+0x2b8>
 80026e0:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <ShoreRequest+0x2a8>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	080026f9 	.word	0x080026f9
 80026ec:	080026f9 	.word	0x080026f9
 80026f0:	080026f9 	.word	0x080026f9
 80026f4:	080026f9 	.word	0x080026f9
        		break;
        	}
        }

        // TODO tuuuupoooo
        formThrustVectors();
 80026f8:	f002 feac 	bl	8005454 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <ShoreRequest+0x2f8>)
 80026fe:	895b      	ldrh	r3, [r3, #10]
 8002700:	3301      	adds	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <ShoreRequest+0x2f8>)
 8002706:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8002708:	e004      	b.n	8002714 <ShoreRequest+0x2d4>
    	++uartBus[SHORE_UART].brokenRxCounter;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <ShoreRequest+0x2f8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <ShoreRequest+0x2f8>)
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}
 800271e:	bf00      	nop
 8002720:	20001e40 	.word	0x20001e40
 8002724:	20001e70 	.word	0x20001e70
 8002728:	20001dc8 	.word	0x20001dc8
 800272c:	20001e3c 	.word	0x20001e3c
 8002730:	20001eb0 	.word	0x20001eb0
 8002734:	20001d2c 	.word	0x20001d2c
 8002738:	2000018c 	.word	0x2000018c

0800273c <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b098      	sub	sp, #96	; 0x60
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 8002744:	2154      	movs	r1, #84	; 0x54
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff f8cf 	bl	80018ea <IsCrc16ChecksummCorrect>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8124 	beq.w	800299c <ShoreConfigRequest+0x260>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	4611      	mov	r1, r2
 800275c:	2254      	movs	r2, #84	; 0x54
 800275e:	4618      	mov	r0, r3
 8002760:	f00d fcfe 	bl	8010160 <memcpy>

		rJoySpeed.march = req.march;
 8002764:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002770:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <ShoreConfigRequest+0x274>)
 8002772:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 8002776:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <ShoreConfigRequest+0x274>)
 8002784:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 8002788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002794:	4b86      	ldr	r3, [pc, #536]	; (80029b0 <ShoreConfigRequest+0x274>)
 8002796:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 800279a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a6:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <ShoreConfigRequest+0x274>)
 80027a8:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 80027ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b8:	4b7d      	ldr	r3, [pc, #500]	; (80029b0 <ShoreConfigRequest+0x274>)
 80027ba:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 80027be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ca:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <ShoreConfigRequest+0x274>)
 80027cc:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 80027d0:	7a7b      	ldrb	r3, [r7, #9]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f8d7 3016 	ldr.w	r3, [r7, #22]
 80027d8:	4976      	ldr	r1, [pc, #472]	; (80029b4 <ShoreConfigRequest+0x278>)
 80027da:	224c      	movs	r2, #76	; 0x4c
 80027dc:	fb00 f202 	mul.w	r2, r0, r2
 80027e0:	440a      	add	r2, r1
 80027e2:	3204      	adds	r2, #4
 80027e4:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 80027e6:	7a7b      	ldrb	r3, [r7, #9]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f8d7 301a 	ldr.w	r3, [r7, #26]
 80027ee:	4971      	ldr	r1, [pc, #452]	; (80029b4 <ShoreConfigRequest+0x278>)
 80027f0:	224c      	movs	r2, #76	; 0x4c
 80027f2:	fb00 f202 	mul.w	r2, r0, r2
 80027f6:	440a      	add	r2, r1
 80027f8:	3208      	adds	r2, #8
 80027fa:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 80027fc:	7a7b      	ldrb	r3, [r7, #9]
 80027fe:	4618      	mov	r0, r3
 8002800:	f8d7 301e 	ldr.w	r3, [r7, #30]
 8002804:	496b      	ldr	r1, [pc, #428]	; (80029b4 <ShoreConfigRequest+0x278>)
 8002806:	224c      	movs	r2, #76	; 0x4c
 8002808:	fb00 f202 	mul.w	r2, r0, r2
 800280c:	440a      	add	r2, r1
 800280e:	320c      	adds	r2, #12
 8002810:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 8002812:	7a7b      	ldrb	r3, [r7, #9]
 8002814:	4618      	mov	r0, r3
 8002816:	f8d7 3022 	ldr.w	r3, [r7, #34]	; 0x22
 800281a:	4966      	ldr	r1, [pc, #408]	; (80029b4 <ShoreConfigRequest+0x278>)
 800281c:	224c      	movs	r2, #76	; 0x4c
 800281e:	fb00 f202 	mul.w	r2, r0, r2
 8002822:	440a      	add	r2, r1
 8002824:	3210      	adds	r2, #16
 8002826:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 8002828:	7a7b      	ldrb	r3, [r7, #9]
 800282a:	4618      	mov	r0, r3
 800282c:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 8002830:	4960      	ldr	r1, [pc, #384]	; (80029b4 <ShoreConfigRequest+0x278>)
 8002832:	224c      	movs	r2, #76	; 0x4c
 8002834:	fb00 f202 	mul.w	r2, r0, r2
 8002838:	440a      	add	r2, r1
 800283a:	3214      	adds	r2, #20
 800283c:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 800283e:	7a7b      	ldrb	r3, [r7, #9]
 8002840:	4618      	mov	r0, r3
 8002842:	f8d7 302a 	ldr.w	r3, [r7, #42]	; 0x2a
 8002846:	495b      	ldr	r1, [pc, #364]	; (80029b4 <ShoreConfigRequest+0x278>)
 8002848:	224c      	movs	r2, #76	; 0x4c
 800284a:	fb00 f202 	mul.w	r2, r0, r2
 800284e:	440a      	add	r2, r1
 8002850:	3218      	adds	r2, #24
 8002852:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 8002854:	7a7b      	ldrb	r3, [r7, #9]
 8002856:	4618      	mov	r0, r3
 8002858:	f8d7 302e 	ldr.w	r3, [r7, #46]	; 0x2e
 800285c:	4955      	ldr	r1, [pc, #340]	; (80029b4 <ShoreConfigRequest+0x278>)
 800285e:	224c      	movs	r2, #76	; 0x4c
 8002860:	fb00 f202 	mul.w	r2, r0, r2
 8002864:	440a      	add	r2, r1
 8002866:	321c      	adds	r2, #28
 8002868:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 800286a:	7a7b      	ldrb	r3, [r7, #9]
 800286c:	4618      	mov	r0, r3
 800286e:	f8d7 3032 	ldr.w	r3, [r7, #50]	; 0x32
 8002872:	4950      	ldr	r1, [pc, #320]	; (80029b4 <ShoreConfigRequest+0x278>)
 8002874:	224c      	movs	r2, #76	; 0x4c
 8002876:	fb00 f202 	mul.w	r2, r0, r2
 800287a:	440a      	add	r2, r1
 800287c:	3228      	adds	r2, #40	; 0x28
 800287e:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8002880:	7a7b      	ldrb	r3, [r7, #9]
 8002882:	4618      	mov	r0, r3
 8002884:	f8d7 3036 	ldr.w	r3, [r7, #54]	; 0x36
 8002888:	494a      	ldr	r1, [pc, #296]	; (80029b4 <ShoreConfigRequest+0x278>)
 800288a:	224c      	movs	r2, #76	; 0x4c
 800288c:	fb00 f202 	mul.w	r2, r0, r2
 8002890:	440a      	add	r2, r1
 8002892:	322c      	adds	r2, #44	; 0x2c
 8002894:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8002896:	7a7b      	ldrb	r3, [r7, #9]
 8002898:	4618      	mov	r0, r3
 800289a:	f8d7 303a 	ldr.w	r3, [r7, #58]	; 0x3a
 800289e:	4945      	ldr	r1, [pc, #276]	; (80029b4 <ShoreConfigRequest+0x278>)
 80028a0:	224c      	movs	r2, #76	; 0x4c
 80028a2:	fb00 f202 	mul.w	r2, r0, r2
 80028a6:	440a      	add	r2, r1
 80028a8:	3230      	adds	r2, #48	; 0x30
 80028aa:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 80028ac:	7a7b      	ldrb	r3, [r7, #9]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f8d7 303e 	ldr.w	r3, [r7, #62]	; 0x3e
 80028b4:	493f      	ldr	r1, [pc, #252]	; (80029b4 <ShoreConfigRequest+0x278>)
 80028b6:	224c      	movs	r2, #76	; 0x4c
 80028b8:	fb00 f202 	mul.w	r2, r0, r2
 80028bc:	440a      	add	r2, r1
 80028be:	3234      	adds	r2, #52	; 0x34
 80028c0:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 80028c2:	7a7b      	ldrb	r3, [r7, #9]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f8d7 3042 	ldr.w	r3, [r7, #66]	; 0x42
 80028ca:	493a      	ldr	r1, [pc, #232]	; (80029b4 <ShoreConfigRequest+0x278>)
 80028cc:	224c      	movs	r2, #76	; 0x4c
 80028ce:	fb00 f202 	mul.w	r2, r0, r2
 80028d2:	440a      	add	r2, r1
 80028d4:	3238      	adds	r2, #56	; 0x38
 80028d6:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 80028d8:	7a7b      	ldrb	r3, [r7, #9]
 80028da:	4618      	mov	r0, r3
 80028dc:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 80028e0:	4934      	ldr	r1, [pc, #208]	; (80029b4 <ShoreConfigRequest+0x278>)
 80028e2:	224c      	movs	r2, #76	; 0x4c
 80028e4:	fb00 f202 	mul.w	r2, r0, r2
 80028e8:	440a      	add	r2, r1
 80028ea:	323c      	adds	r2, #60	; 0x3c
 80028ec:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 80028ee:	7a7b      	ldrb	r3, [r7, #9]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f8d7 304a 	ldr.w	r3, [r7, #74]	; 0x4a
 80028f6:	492f      	ldr	r1, [pc, #188]	; (80029b4 <ShoreConfigRequest+0x278>)
 80028f8:	224c      	movs	r2, #76	; 0x4c
 80028fa:	fb00 f202 	mul.w	r2, r0, r2
 80028fe:	440a      	add	r2, r1
 8002900:	3220      	adds	r2, #32
 8002902:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 8002904:	7a7b      	ldrb	r3, [r7, #9]
 8002906:	4618      	mov	r0, r3
 8002908:	f8d7 304e 	ldr.w	r3, [r7, #78]	; 0x4e
 800290c:	4929      	ldr	r1, [pc, #164]	; (80029b4 <ShoreConfigRequest+0x278>)
 800290e:	224c      	movs	r2, #76	; 0x4c
 8002910:	fb00 f202 	mul.w	r2, r0, r2
 8002914:	440a      	add	r2, r1
 8002916:	3224      	adds	r2, #36	; 0x24
 8002918:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 800291a:	7a7b      	ldrb	r3, [r7, #9]
 800291c:	4618      	mov	r0, r3
 800291e:	f8d7 3052 	ldr.w	r3, [r7, #82]	; 0x52
 8002922:	4924      	ldr	r1, [pc, #144]	; (80029b4 <ShoreConfigRequest+0x278>)
 8002924:	224c      	movs	r2, #76	; 0x4c
 8002926:	fb00 f202 	mul.w	r2, r0, r2
 800292a:	440a      	add	r2, r1
 800292c:	3244      	adds	r2, #68	; 0x44
 800292e:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 8002930:	7a7b      	ldrb	r3, [r7, #9]
 8002932:	4618      	mov	r0, r3
 8002934:	f8d7 3056 	ldr.w	r3, [r7, #86]	; 0x56
 8002938:	491e      	ldr	r1, [pc, #120]	; (80029b4 <ShoreConfigRequest+0x278>)
 800293a:	224c      	movs	r2, #76	; 0x4c
 800293c:	fb00 f202 	mul.w	r2, r0, r2
 8002940:	440a      	add	r2, r1
 8002942:	3248      	adds	r2, #72	; 0x48
 8002944:	6013      	str	r3, [r2, #0]

		if(rState.contourSelected != req.contour) {
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <ShoreConfigRequest+0x27c>)
 8002948:	785a      	ldrb	r2, [r3, #1]
 800294a:	7a7b      	ldrb	r3, [r7, #9]
 800294c:	429a      	cmp	r2, r3
 800294e:	d01c      	beq.n	800298a <ShoreConfigRequest+0x24e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002950:	2300      	movs	r3, #0
 8002952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002956:	e00d      	b.n	8002974 <ShoreConfigRequest+0x238>
				rStabConstants[i].enable = false;
 8002958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800295c:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <ShoreConfigRequest+0x278>)
 800295e:	214c      	movs	r1, #76	; 0x4c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800296a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800296e:	3301      	adds	r3, #1
 8002970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002978:	2b05      	cmp	r3, #5
 800297a:	d9ed      	bls.n	8002958 <ShoreConfigRequest+0x21c>
			}
			rState.contourSelected = req.contour;
 800297c:	7a7a      	ldrb	r2, [r7, #9]
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <ShoreConfigRequest+0x27c>)
 8002980:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	4618      	mov	r0, r3
 8002986:	f001 ffdb 	bl	8004940 <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 800298a:	f002 fd63 	bl	8005454 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <ShoreConfigRequest+0x280>)
 8002990:	895b      	ldrh	r3, [r3, #10]
 8002992:	3301      	adds	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <ShoreConfigRequest+0x280>)
 8002998:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 800299a:	e004      	b.n	80029a6 <ShoreConfigRequest+0x26a>
		++uartBus[SHORE_UART].brokenRxCounter;
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <ShoreConfigRequest+0x280>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <ShoreConfigRequest+0x280>)
 80029a4:	60d3      	str	r3, [r2, #12]
}
 80029a6:	bf00      	nop
 80029a8:	3760      	adds	r7, #96	; 0x60
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20001e40 	.word	0x20001e40
 80029b4:	20001eb0 	.word	0x20001eb0
 80029b8:	20001d2c 	.word	0x20001d2c
 80029bc:	2000018c 	.word	0x2000018c

080029c0 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 80029c0:	b5b0      	push	{r4, r5, r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 80029c8:	2111      	movs	r1, #17
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe ff8d 	bl	80018ea <IsCrc16ChecksummCorrect>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 809a 	beq.w	8002b0c <ShoreDirectRequest+0x14c>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f107 040c 	add.w	r4, r7, #12
 80029de:	461d      	mov	r5, r3
 80029e0:	6828      	ldr	r0, [r5, #0]
 80029e2:	6869      	ldr	r1, [r5, #4]
 80029e4:	68aa      	ldr	r2, [r5, #8]
 80029e6:	68eb      	ldr	r3, [r5, #12]
 80029e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ea:	7c2b      	ldrb	r3, [r5, #16]
 80029ec:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80029ee:	2300      	movs	r3, #0
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e00a      	b.n	8002a0a <ShoreDirectRequest+0x4a>
			rStabConstants[i].enable = false;
 80029f4:	7ffb      	ldrb	r3, [r7, #31]
 80029f6:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <ShoreDirectRequest+0x160>)
 80029f8:	214c      	movs	r1, #76	; 0x4c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a04:	7ffb      	ldrb	r3, [r7, #31]
 8002a06:	3301      	adds	r3, #1
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d9f1      	bls.n	80029f4 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002a10:	2300      	movs	r3, #0
 8002a12:	77bb      	strb	r3, [r7, #30]
 8002a14:	e070      	b.n	8002af8 <ShoreDirectRequest+0x138>
			if(i != req.number) {
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	7fba      	ldrb	r2, [r7, #30]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d00a      	beq.n	8002a34 <ShoreDirectRequest+0x74>
				rThrusters[i].desiredSpeed = 0;
 8002a1e:	7fba      	ldrb	r2, [r7, #30]
 8002a20:	4940      	ldr	r1, [pc, #256]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e05e      	b.n	8002af2 <ShoreDirectRequest+0x132>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 8002a34:	7b7b      	ldrb	r3, [r7, #13]
 8002a36:	4619      	mov	r1, r3
 8002a38:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002a3c:	4a39      	ldr	r2, [pc, #228]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002a3e:	460b      	mov	r3, r1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	440b      	add	r3, r1
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	3302      	adds	r3, #2
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002a4e:	7b7b      	ldrb	r3, [r7, #13]
 8002a50:	4619      	mov	r1, r3
 8002a52:	7bb8      	ldrb	r0, [r7, #14]
 8002a54:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002a56:	460b      	mov	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	4602      	mov	r2, r0
 8002a62:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 8002a64:	7b7b      	ldrb	r3, [r7, #13]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	461a      	mov	r2, r3
 8002a70:	492c      	ldr	r1, [pc, #176]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002a72:	4603      	mov	r3, r0
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4403      	add	r3, r0
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002a80:	7b7b      	ldrb	r3, [r7, #13]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f8d7 2015 	ldr.w	r2, [r7, #21]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4925      	ldr	r1, [pc, #148]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002a8e:	4603      	mov	r3, r0
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4403      	add	r3, r0
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	3310      	adds	r3, #16
 8002a9a:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002a9c:	7b7b      	ldrb	r3, [r7, #13]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 8002ab6:	7b7b      	ldrb	r3, [r7, #13]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f997 001a 	ldrsb.w	r0, [r7, #26]
 8002abe:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	440b      	add	r3, r1
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3315      	adds	r3, #21
 8002acc:	4602      	mov	r2, r0
 8002ace:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 8002ad0:	7c3b      	ldrb	r3, [r7, #16]
 8002ad2:	7b7a      	ldrb	r2, [r7, #13]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2d8      	uxtb	r0, r3
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <ShoreDirectRequest+0x164>)
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	440b      	add	r3, r1
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	3316      	adds	r3, #22
 8002aee:	4602      	mov	r2, r0
 8002af0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002af2:	7fbb      	ldrb	r3, [r7, #30]
 8002af4:	3301      	adds	r3, #1
 8002af6:	77bb      	strb	r3, [r7, #30]
 8002af8:	7fbb      	ldrb	r3, [r7, #30]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d98b      	bls.n	8002a16 <ShoreDirectRequest+0x56>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <ShoreDirectRequest+0x168>)
 8002b00:	895b      	ldrh	r3, [r3, #10]
 8002b02:	3301      	adds	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <ShoreDirectRequest+0x168>)
 8002b08:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002b0a:	e004      	b.n	8002b16 <ShoreDirectRequest+0x156>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <ShoreDirectRequest+0x168>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <ShoreDirectRequest+0x168>)
 8002b14:	60d3      	str	r3, [r2, #12]
}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20001eb0 	.word	0x20001eb0
 8002b24:	20001d38 	.word	0x20001d38
 8002b28:	2000018c 	.word	0x2000018c

08002b2c <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <ShoreResponse+0x50>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <ShoreResponse+0x50>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <ShoreResponse+0x50>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <ShoreResponse+0x50>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <ShoreResponse+0x50>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <ShoreResponse+0x50>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <ShoreResponse+0x50>)
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	623b      	str	r3, [r7, #32]
   // res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // TODO do this properly pls
   // res.dev_errors = 0;//robot->device.errors;
  //  res.pc_errors = rComputer.errors;

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH-2);
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	221e      	movs	r2, #30
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f00d fafa 	bl	8010160 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe fedb 	bl	800192a <AddCrc16Checksumm>
}
 8002b74:	bf00      	nop
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20001dc8 	.word	0x20001dc8

08002b80 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b09c      	sub	sp, #112	; 0x70
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002b88:	2355      	movs	r3, #85	; 0x55
 8002b8a:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 8002b8c:	4b74      	ldr	r3, [pc, #464]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 8002b94:	4b72      	ldr	r3, [pc, #456]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 8002b9c:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 8002ba4:	4b6e      	ldr	r3, [pc, #440]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 8002bac:	4b6c      	ldr	r3, [pc, #432]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002bc4:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <ShoreConfigResponse+0x1e0>)
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002bd4:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4a63      	ldr	r2, [pc, #396]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002bdc:	2358      	movs	r3, #88	; 0x58
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 8002bec:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4a5d      	ldr	r2, [pc, #372]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002bf4:	2358      	movs	r3, #88	; 0x58
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002c06:	4b57      	ldr	r3, [pc, #348]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4a56      	ldr	r2, [pc, #344]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002c0e:	2358      	movs	r3, #88	; 0x58
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3308      	adds	r3, #8
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	4619      	mov	r1, r3
 8002c26:	4a50      	ldr	r2, [pc, #320]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002c28:	2358      	movs	r3, #88	; 0x58
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	331c      	adds	r3, #28
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002c38:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002c40:	2358      	movs	r3, #88	; 0x58
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3320      	adds	r3, #32
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002c50:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	4619      	mov	r1, r3
 8002c56:	4a44      	ldr	r2, [pc, #272]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002c58:	2358      	movs	r3, #88	; 0x58
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3324      	adds	r3, #36	; 0x24
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002c68:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4a3e      	ldr	r2, [pc, #248]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002c70:	2358      	movs	r3, #88	; 0x58
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3328      	adds	r3, #40	; 0x28
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002c82:	785b      	ldrb	r3, [r3, #1]
 8002c84:	4619      	mov	r1, r3
 8002c86:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002c88:	2358      	movs	r3, #88	; 0x58
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	332c      	adds	r3, #44	; 0x2c
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4a32      	ldr	r2, [pc, #200]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002ca0:	2358      	movs	r3, #88	; 0x58
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3330      	adds	r3, #48	; 0x30
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002cb2:	785b      	ldrb	r3, [r3, #1]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002cb8:	2358      	movs	r3, #88	; 0x58
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3338      	adds	r3, #56	; 0x38
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002cc8:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002cd0:	2358      	movs	r3, #88	; 0x58
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	333c      	adds	r3, #60	; 0x3c
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002ce8:	2358      	movs	r3, #88	; 0x58
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3340      	adds	r3, #64	; 0x40
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002cfa:	785b      	ldrb	r3, [r3, #1]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002d00:	2358      	movs	r3, #88	; 0x58
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3334      	adds	r3, #52	; 0x34
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	4619      	mov	r1, r3
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002d18:	2358      	movs	r3, #88	; 0x58
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	334c      	adds	r3, #76	; 0x4c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <ShoreConfigResponse+0x1e4>)
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <ShoreConfigResponse+0x1e8>)
 8002d30:	2358      	movs	r3, #88	; 0x58
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3350      	adds	r3, #80	; 0x50
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	2263      	movs	r2, #99	; 0x63
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f00d fa08 	bl	8010160 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002d50:	2163      	movs	r1, #99	; 0x63
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fde9 	bl	800192a <AddCrc16Checksumm>
}
 8002d58:	bf00      	nop
 8002d5a:	3770      	adds	r7, #112	; 0x70
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20001dc8 	.word	0x20001dc8
 8002d64:	20001d2c 	.word	0x20001d2c
 8002d68:	20002078 	.word	0x20002078

08002d6c <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002d74:	23ff      	movs	r3, #255	; 0xff
 8002d76:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002d78:	23aa      	movs	r3, #170	; 0xaa
 8002d7a:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 8002d7c:	23bb      	movs	r3, #187	; 0xbb
 8002d7e:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	6010      	str	r0, [r2, #0]
 8002d8c:	889b      	ldrh	r3, [r3, #4]
 8002d8e:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 8002d90:	2106      	movs	r1, #6
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fdc9 	bl	800192a <AddCrc16Checksumm>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)&&(ReceiveBuf[1] != 0x01)&&(ReceiveBuf[2] != 0x08)&&(ReceiveBuf[3] != 0x01))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2bfa      	cmp	r3, #250	; 0xfa
 8002dae:	d00e      	beq.n	8002dce <ImuReceive+0x2e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3301      	adds	r3, #1
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d009      	beq.n	8002dce <ImuReceive+0x2e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d004      	beq.n	8002dce <ImuReceive+0x2e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3303      	adds	r3, #3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d152      	bne.n	8002e74 <ImuReceive+0xd4>
		 return;


	 rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	331c      	adds	r3, #28
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	b21a      	sxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	331d      	adds	r3, #29
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b21b      	sxth	r3, r3
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b21b      	sxth	r3, r3
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <ImuReceive+0xe0>)
 8002de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		 //crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
		 uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3301      	adds	r3, #1
 8002df0:	211b      	movs	r1, #27
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f848 	bl	8002e88 <calculateCRC>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	81fb      	strh	r3, [r7, #14]
		 if (rSensors.crc != calculated_crc)
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <ImuReceive+0xe0>)
 8002dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e02:	89fa      	ldrh	r2, [r7, #14]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d137      	bne.n	8002e78 <ImuReceive+0xd8>
		 return;



  	  memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <ImuReceive+0xe0>)
 8002e12:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3308      	adds	r3, #8
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <ImuReceive+0xe0>)
 8002e1e:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	330c      	adds	r3, #12
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <ImuReceive+0xe0>)
 8002e2a:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.rollSpeed, ReceiveBuf + 16, sizeof(rSensors.rollSpeed));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3310      	adds	r3, #16
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <ImuReceive+0xe0>)
 8002e36:	61da      	str	r2, [r3, #28]
  	  memcpy(&rSensors.pitchSpeed, ReceiveBuf + 20, sizeof(rSensors.pitchSpeed));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3314      	adds	r3, #20
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <ImuReceive+0xe0>)
 8002e42:	621a      	str	r2, [r3, #32]
  	  memcpy(&rSensors.yawSpeed, ReceiveBuf + 24, sizeof(rSensors.yawSpeed));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3318      	adds	r3, #24
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <ImuReceive+0xe0>)
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
//
//  	  memcpy(&rSensors.accelX, ReceiveBuf + 28, sizeof(rSensors.accelX));
//  	  memcpy(&rSensors.accelY, ReceiveBuf + 32, sizeof(rSensors.accelY));
//  	  memcpy(&rSensors.accelZ, ReceiveBuf + 36, sizeof(rSensors.accelZ));

    rSensors.LastTick = xTaskGetTickCount();
 8002e50:	f00b fa28 	bl	800e2a4 <xTaskGetTickCount>
 8002e54:	ee07 0a90 	vmov	s15, r0
 8002e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <ImuReceive+0xe0>)
 8002e5e:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <ImuReceive+0xe4>)
 8002e64:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <ImuReceive+0xe4>)
 8002e6e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002e72:	e002      	b.n	8002e7a <ImuReceive+0xda>
		 return;
 8002e74:	bf00      	nop
 8002e76:	e000      	b.n	8002e7a <ImuReceive+0xda>
		 return;
 8002e78:	bf00      	nop
}
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20001dc8 	.word	0x20001dc8
 8002e84:	2000018c 	.word	0x2000018c

08002e88 <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	e030      	b.n	8002efe <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 8002e9c:	897b      	ldrh	r3, [r7, #10]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	897b      	ldrh	r3, [r7, #10]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	897b      	ldrh	r3, [r7, #10]
 8002ebe:	4053      	eors	r3, r2
 8002ec0:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	4053      	eors	r3, r2
 8002ed0:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	b21a      	sxth	r2, r3
 8002ed8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002edc:	4053      	eors	r3, r2
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	015b      	lsls	r3, r3, #5
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 8002eec:	b21a      	sxth	r2, r3
 8002eee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ef2:	4053      	eors	r3, r2
 8002ef4:	b21b      	sxth	r3, r3
 8002ef6:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3ca      	bcc.n	8002e9c <calculateCRC+0x14>
    }
    return crc;
 8002f06:	897b      	ldrh	r3, [r7, #10]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <MX_DMA_Init+0x68>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <MX_DMA_Init+0x68>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6153      	str	r3, [r2, #20]
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <MX_DMA_Init+0x68>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2105      	movs	r1, #5
 8002f36:	200e      	movs	r0, #14
 8002f38:	f002 ffa2 	bl	8005e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f3c:	200e      	movs	r0, #14
 8002f3e:	f002 ffbb 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2105      	movs	r1, #5
 8002f46:	200f      	movs	r0, #15
 8002f48:	f002 ff9a 	bl	8005e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f4c:	200f      	movs	r0, #15
 8002f4e:	f002 ffb3 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2105      	movs	r1, #5
 8002f56:	2010      	movs	r0, #16
 8002f58:	f002 ff92 	bl	8005e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002f5c:	2010      	movs	r0, #16
 8002f5e:	f002 ffab 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2105      	movs	r1, #5
 8002f66:	2011      	movs	r0, #17
 8002f68:	f002 ff8a 	bl	8005e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002f6c:	2011      	movs	r0, #17
 8002f6e:	f002 ffa3 	bl	8005eb8 <HAL_NVIC_EnableIRQ>

}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <flashReadSettings+0x44>)
 8002f8a:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002f90:	2300      	movs	r3, #0
 8002f92:	81fb      	strh	r3, [r7, #14]
 8002f94:	e00c      	b.n	8002fb0 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	601a      	str	r2, [r3, #0]
		source_addr++;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	617b      	str	r3, [r7, #20]
		dest_addr++;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	3301      	adds	r3, #1
 8002fae:	81fb      	strh	r3, [r7, #14]
 8002fb0:	89fb      	ldrh	r3, [r7, #14]
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	d9ef      	bls.n	8002f96 <flashReadSettings+0x16>
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	0803f800 	.word	0x0803f800

08002fc8 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 8002fd0:	f003 fa28 	bl	8006424 <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_PAGES; // erase only 1 page
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <flashWriteSettings+0x70>)
 8002fda:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 8002fe0:	f107 020c 	add.w	r2, r7, #12
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fade 	bl	80065ac <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <flashWriteSettings+0x70>)
 8002ff6:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e013      	b.n	8003026 <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 8002ffe:	6a39      	ldr	r1, [r7, #32]
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	461c      	mov	r4, r3
 8003008:	4615      	mov	r5, r2
 800300a:	4622      	mov	r2, r4
 800300c:	462b      	mov	r3, r5
 800300e:	2002      	movs	r0, #2
 8003010:	f003 f998 	bl	8006344 <HAL_FLASH_Program>
		source_addr++;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	3304      	adds	r3, #4
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	3304      	adds	r3, #4
 800301e:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	3301      	adds	r3, #1
 8003024:	77fb      	strb	r3, [r7, #31]
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d9e8      	bls.n	8002ffe <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 800302c:	f003 fa20 	bl	8006470 <HAL_FLASH_Lock>
}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bdb0      	pop	{r4, r5, r7, pc}
 8003038:	0803f800 	.word	0x0803f800

0800303c <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	22aa      	movs	r2, #170	; 0xaa
 8003048:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e143      	b.n	80032d8 <flashFillStructure+0x29c>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	49a6      	ldr	r1, [pc, #664]	; (80032f0 <flashFillStructure+0x2b4>)
 8003056:	204c      	movs	r0, #76	; 0x4c
 8003058:	fb00 f303 	mul.w	r3, r0, r3
 800305c:	440b      	add	r3, r1
 800305e:	3304      	adds	r3, #4
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3301      	adds	r3, #1
 8003070:	4602      	mov	r2, r0
 8003072:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	499d      	ldr	r1, [pc, #628]	; (80032f0 <flashFillStructure+0x2b4>)
 800307a:	204c      	movs	r0, #76	; 0x4c
 800307c:	fb00 f303 	mul.w	r3, r0, r3
 8003080:	440b      	add	r3, r1
 8003082:	3308      	adds	r3, #8
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3305      	adds	r3, #5
 8003094:	4602      	mov	r2, r0
 8003096:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	4994      	ldr	r1, [pc, #592]	; (80032f0 <flashFillStructure+0x2b4>)
 800309e:	204c      	movs	r0, #76	; 0x4c
 80030a0:	fb00 f303 	mul.w	r3, r0, r3
 80030a4:	440b      	add	r3, r1
 80030a6:	330c      	adds	r3, #12
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	3308      	adds	r3, #8
 80030b8:	3301      	adds	r3, #1
 80030ba:	4602      	mov	r2, r0
 80030bc:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	498b      	ldr	r1, [pc, #556]	; (80032f0 <flashFillStructure+0x2b4>)
 80030c4:	204c      	movs	r0, #76	; 0x4c
 80030c6:	fb00 f303 	mul.w	r3, r0, r3
 80030ca:	440b      	add	r3, r1
 80030cc:	3310      	adds	r3, #16
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3308      	adds	r3, #8
 80030de:	3305      	adds	r3, #5
 80030e0:	4602      	mov	r2, r0
 80030e2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	4981      	ldr	r1, [pc, #516]	; (80032f0 <flashFillStructure+0x2b4>)
 80030ea:	204c      	movs	r0, #76	; 0x4c
 80030ec:	fb00 f303 	mul.w	r3, r0, r3
 80030f0:	440b      	add	r3, r1
 80030f2:	3318      	adds	r3, #24
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3310      	adds	r3, #16
 8003104:	3301      	adds	r3, #1
 8003106:	4602      	mov	r2, r0
 8003108:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	4978      	ldr	r1, [pc, #480]	; (80032f0 <flashFillStructure+0x2b4>)
 8003110:	204c      	movs	r0, #76	; 0x4c
 8003112:	fb00 f303 	mul.w	r3, r0, r3
 8003116:	440b      	add	r3, r1
 8003118:	3314      	adds	r3, #20
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3310      	adds	r3, #16
 800312a:	3305      	adds	r3, #5
 800312c:	4602      	mov	r2, r0
 800312e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	496e      	ldr	r1, [pc, #440]	; (80032f0 <flashFillStructure+0x2b4>)
 8003136:	204c      	movs	r0, #76	; 0x4c
 8003138:	fb00 f303 	mul.w	r3, r0, r3
 800313c:	440b      	add	r3, r1
 800313e:	331c      	adds	r3, #28
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3318      	adds	r3, #24
 8003150:	3301      	adds	r3, #1
 8003152:	4602      	mov	r2, r0
 8003154:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	4965      	ldr	r1, [pc, #404]	; (80032f0 <flashFillStructure+0x2b4>)
 800315c:	204c      	movs	r0, #76	; 0x4c
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	440b      	add	r3, r1
 8003164:	3328      	adds	r3, #40	; 0x28
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3318      	adds	r3, #24
 8003176:	3305      	adds	r3, #5
 8003178:	4602      	mov	r2, r0
 800317a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	495b      	ldr	r1, [pc, #364]	; (80032f0 <flashFillStructure+0x2b4>)
 8003182:	204c      	movs	r0, #76	; 0x4c
 8003184:	fb00 f303 	mul.w	r3, r0, r3
 8003188:	440b      	add	r3, r1
 800318a:	332c      	adds	r3, #44	; 0x2c
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3320      	adds	r3, #32
 800319c:	3301      	adds	r3, #1
 800319e:	4602      	mov	r2, r0
 80031a0:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	4952      	ldr	r1, [pc, #328]	; (80032f0 <flashFillStructure+0x2b4>)
 80031a8:	204c      	movs	r0, #76	; 0x4c
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	440b      	add	r3, r1
 80031b0:	3330      	adds	r3, #48	; 0x30
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3320      	adds	r3, #32
 80031c2:	3305      	adds	r3, #5
 80031c4:	4602      	mov	r2, r0
 80031c6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	4948      	ldr	r1, [pc, #288]	; (80032f0 <flashFillStructure+0x2b4>)
 80031ce:	204c      	movs	r0, #76	; 0x4c
 80031d0:	fb00 f303 	mul.w	r3, r0, r3
 80031d4:	440b      	add	r3, r1
 80031d6:	3334      	adds	r3, #52	; 0x34
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3328      	adds	r3, #40	; 0x28
 80031e8:	3301      	adds	r3, #1
 80031ea:	4602      	mov	r2, r0
 80031ec:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	493f      	ldr	r1, [pc, #252]	; (80032f0 <flashFillStructure+0x2b4>)
 80031f4:	204c      	movs	r0, #76	; 0x4c
 80031f6:	fb00 f303 	mul.w	r3, r0, r3
 80031fa:	440b      	add	r3, r1
 80031fc:	3338      	adds	r3, #56	; 0x38
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3328      	adds	r3, #40	; 0x28
 800320e:	3305      	adds	r3, #5
 8003210:	4602      	mov	r2, r0
 8003212:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	4935      	ldr	r1, [pc, #212]	; (80032f0 <flashFillStructure+0x2b4>)
 800321a:	204c      	movs	r0, #76	; 0x4c
 800321c:	fb00 f303 	mul.w	r3, r0, r3
 8003220:	440b      	add	r3, r1
 8003222:	333c      	adds	r3, #60	; 0x3c
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3330      	adds	r3, #48	; 0x30
 8003234:	3301      	adds	r3, #1
 8003236:	4602      	mov	r2, r0
 8003238:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	492c      	ldr	r1, [pc, #176]	; (80032f0 <flashFillStructure+0x2b4>)
 8003240:	204c      	movs	r0, #76	; 0x4c
 8003242:	fb00 f303 	mul.w	r3, r0, r3
 8003246:	440b      	add	r3, r1
 8003248:	3320      	adds	r3, #32
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3330      	adds	r3, #48	; 0x30
 800325a:	3305      	adds	r3, #5
 800325c:	4602      	mov	r2, r0
 800325e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	4922      	ldr	r1, [pc, #136]	; (80032f0 <flashFillStructure+0x2b4>)
 8003266:	204c      	movs	r0, #76	; 0x4c
 8003268:	fb00 f303 	mul.w	r3, r0, r3
 800326c:	440b      	add	r3, r1
 800326e:	3324      	adds	r3, #36	; 0x24
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3338      	adds	r3, #56	; 0x38
 8003280:	3301      	adds	r3, #1
 8003282:	4602      	mov	r2, r0
 8003284:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	4919      	ldr	r1, [pc, #100]	; (80032f0 <flashFillStructure+0x2b4>)
 800328c:	204c      	movs	r0, #76	; 0x4c
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	440b      	add	r3, r1
 8003294:	3344      	adds	r3, #68	; 0x44
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3338      	adds	r3, #56	; 0x38
 80032a6:	3305      	adds	r3, #5
 80032a8:	4602      	mov	r2, r0
 80032aa:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	490f      	ldr	r1, [pc, #60]	; (80032f0 <flashFillStructure+0x2b4>)
 80032b2:	204c      	movs	r0, #76	; 0x4c
 80032b4:	fb00 f303 	mul.w	r3, r0, r3
 80032b8:	440b      	add	r3, r1
 80032ba:	3348      	adds	r3, #72	; 0x48
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3340      	adds	r3, #64	; 0x40
 80032cc:	3301      	adds	r3, #1
 80032ce:	4602      	mov	r2, r0
 80032d0:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	3301      	adds	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	f67f aeb8 	bls.w	8003050 <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20001eb0 	.word	0x20001eb0

080032f4 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e132      	b.n	8003568 <flashReadStructure+0x274>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	7bf9      	ldrb	r1, [r7, #15]
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4403      	add	r3, r0
 8003312:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003316:	489f      	ldr	r0, [pc, #636]	; (8003594 <flashReadStructure+0x2a0>)
 8003318:	224c      	movs	r2, #76	; 0x4c
 800331a:	fb01 f202 	mul.w	r2, r1, r2
 800331e:	4402      	add	r2, r0
 8003320:	3204      	adds	r2, #4
 8003322:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	7bf9      	ldrb	r1, [r7, #15]
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4403      	add	r3, r0
 8003334:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003338:	4896      	ldr	r0, [pc, #600]	; (8003594 <flashReadStructure+0x2a0>)
 800333a:	224c      	movs	r2, #76	; 0x4c
 800333c:	fb01 f202 	mul.w	r2, r1, r2
 8003340:	4402      	add	r2, r0
 8003342:	3208      	adds	r2, #8
 8003344:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	7bf9      	ldrb	r1, [r7, #15]
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4403      	add	r3, r0
 8003356:	3308      	adds	r3, #8
 8003358:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800335c:	488d      	ldr	r0, [pc, #564]	; (8003594 <flashReadStructure+0x2a0>)
 800335e:	224c      	movs	r2, #76	; 0x4c
 8003360:	fb01 f202 	mul.w	r2, r1, r2
 8003364:	4402      	add	r2, r0
 8003366:	320c      	adds	r2, #12
 8003368:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	7bf9      	ldrb	r1, [r7, #15]
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4403      	add	r3, r0
 800337a:	3308      	adds	r3, #8
 800337c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003380:	4884      	ldr	r0, [pc, #528]	; (8003594 <flashReadStructure+0x2a0>)
 8003382:	224c      	movs	r2, #76	; 0x4c
 8003384:	fb01 f202 	mul.w	r2, r1, r2
 8003388:	4402      	add	r2, r0
 800338a:	3210      	adds	r2, #16
 800338c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	7bf9      	ldrb	r1, [r7, #15]
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	3310      	adds	r3, #16
 80033a0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80033a4:	487b      	ldr	r0, [pc, #492]	; (8003594 <flashReadStructure+0x2a0>)
 80033a6:	224c      	movs	r2, #76	; 0x4c
 80033a8:	fb01 f202 	mul.w	r2, r1, r2
 80033ac:	4402      	add	r2, r0
 80033ae:	3218      	adds	r2, #24
 80033b0:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	7bf9      	ldrb	r1, [r7, #15]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4403      	add	r3, r0
 80033c2:	3310      	adds	r3, #16
 80033c4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80033c8:	4872      	ldr	r0, [pc, #456]	; (8003594 <flashReadStructure+0x2a0>)
 80033ca:	224c      	movs	r2, #76	; 0x4c
 80033cc:	fb01 f202 	mul.w	r2, r1, r2
 80033d0:	4402      	add	r2, r0
 80033d2:	3214      	adds	r2, #20
 80033d4:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	7bf9      	ldrb	r1, [r7, #15]
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4403      	add	r3, r0
 80033e6:	3318      	adds	r3, #24
 80033e8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80033ec:	4869      	ldr	r0, [pc, #420]	; (8003594 <flashReadStructure+0x2a0>)
 80033ee:	224c      	movs	r2, #76	; 0x4c
 80033f0:	fb01 f202 	mul.w	r2, r1, r2
 80033f4:	4402      	add	r2, r0
 80033f6:	321c      	adds	r2, #28
 80033f8:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	7bf9      	ldrb	r1, [r7, #15]
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4403      	add	r3, r0
 800340a:	3318      	adds	r3, #24
 800340c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003410:	4860      	ldr	r0, [pc, #384]	; (8003594 <flashReadStructure+0x2a0>)
 8003412:	224c      	movs	r2, #76	; 0x4c
 8003414:	fb01 f202 	mul.w	r2, r1, r2
 8003418:	4402      	add	r2, r0
 800341a:	3228      	adds	r2, #40	; 0x28
 800341c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	7bf9      	ldrb	r1, [r7, #15]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	3320      	adds	r3, #32
 8003430:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003434:	4857      	ldr	r0, [pc, #348]	; (8003594 <flashReadStructure+0x2a0>)
 8003436:	224c      	movs	r2, #76	; 0x4c
 8003438:	fb01 f202 	mul.w	r2, r1, r2
 800343c:	4402      	add	r2, r0
 800343e:	322c      	adds	r2, #44	; 0x2c
 8003440:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	7bf9      	ldrb	r1, [r7, #15]
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4403      	add	r3, r0
 8003452:	3320      	adds	r3, #32
 8003454:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003458:	484e      	ldr	r0, [pc, #312]	; (8003594 <flashReadStructure+0x2a0>)
 800345a:	224c      	movs	r2, #76	; 0x4c
 800345c:	fb01 f202 	mul.w	r2, r1, r2
 8003460:	4402      	add	r2, r0
 8003462:	3230      	adds	r2, #48	; 0x30
 8003464:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	7bf9      	ldrb	r1, [r7, #15]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4403      	add	r3, r0
 8003476:	3328      	adds	r3, #40	; 0x28
 8003478:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800347c:	4845      	ldr	r0, [pc, #276]	; (8003594 <flashReadStructure+0x2a0>)
 800347e:	224c      	movs	r2, #76	; 0x4c
 8003480:	fb01 f202 	mul.w	r2, r1, r2
 8003484:	4402      	add	r2, r0
 8003486:	3234      	adds	r2, #52	; 0x34
 8003488:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	7bf9      	ldrb	r1, [r7, #15]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4403      	add	r3, r0
 800349a:	3328      	adds	r3, #40	; 0x28
 800349c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80034a0:	483c      	ldr	r0, [pc, #240]	; (8003594 <flashReadStructure+0x2a0>)
 80034a2:	224c      	movs	r2, #76	; 0x4c
 80034a4:	fb01 f202 	mul.w	r2, r1, r2
 80034a8:	4402      	add	r2, r0
 80034aa:	3238      	adds	r2, #56	; 0x38
 80034ac:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	7bf9      	ldrb	r1, [r7, #15]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4403      	add	r3, r0
 80034be:	3330      	adds	r3, #48	; 0x30
 80034c0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80034c4:	4833      	ldr	r0, [pc, #204]	; (8003594 <flashReadStructure+0x2a0>)
 80034c6:	224c      	movs	r2, #76	; 0x4c
 80034c8:	fb01 f202 	mul.w	r2, r1, r2
 80034cc:	4402      	add	r2, r0
 80034ce:	323c      	adds	r2, #60	; 0x3c
 80034d0:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	7bf9      	ldrb	r1, [r7, #15]
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4403      	add	r3, r0
 80034e2:	3330      	adds	r3, #48	; 0x30
 80034e4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80034e8:	482a      	ldr	r0, [pc, #168]	; (8003594 <flashReadStructure+0x2a0>)
 80034ea:	224c      	movs	r2, #76	; 0x4c
 80034ec:	fb01 f202 	mul.w	r2, r1, r2
 80034f0:	4402      	add	r2, r0
 80034f2:	3220      	adds	r2, #32
 80034f4:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	7bf9      	ldrb	r1, [r7, #15]
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4403      	add	r3, r0
 8003506:	3338      	adds	r3, #56	; 0x38
 8003508:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800350c:	4821      	ldr	r0, [pc, #132]	; (8003594 <flashReadStructure+0x2a0>)
 800350e:	224c      	movs	r2, #76	; 0x4c
 8003510:	fb01 f202 	mul.w	r2, r1, r2
 8003514:	4402      	add	r2, r0
 8003516:	3224      	adds	r2, #36	; 0x24
 8003518:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	7bf9      	ldrb	r1, [r7, #15]
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	3338      	adds	r3, #56	; 0x38
 800352c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003530:	4818      	ldr	r0, [pc, #96]	; (8003594 <flashReadStructure+0x2a0>)
 8003532:	224c      	movs	r2, #76	; 0x4c
 8003534:	fb01 f202 	mul.w	r2, r1, r2
 8003538:	4402      	add	r2, r0
 800353a:	3244      	adds	r2, #68	; 0x44
 800353c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	7bf9      	ldrb	r1, [r7, #15]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	3340      	adds	r3, #64	; 0x40
 8003550:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003554:	480f      	ldr	r0, [pc, #60]	; (8003594 <flashReadStructure+0x2a0>)
 8003556:	224c      	movs	r2, #76	; 0x4c
 8003558:	fb01 f202 	mul.w	r2, r1, r2
 800355c:	4402      	add	r2, r0
 800355e:	3248      	adds	r2, #72	; 0x48
 8003560:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	3301      	adds	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b05      	cmp	r3, #5
 800356c:	f67f aec9 	bls.w	8003302 <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2baa      	cmp	r3, #170	; 0xaa
 8003576:	d103      	bne.n	8003580 <flashReadStructure+0x28c>
		rState.flash = true;
 8003578:	4b07      	ldr	r3, [pc, #28]	; (8003598 <flashReadStructure+0x2a4>)
 800357a:	2201      	movs	r2, #1
 800357c:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 800357e:	e002      	b.n	8003586 <flashReadStructure+0x292>
		rState.flash = false;
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <flashReadStructure+0x2a4>)
 8003582:	2200      	movs	r2, #0
 8003584:	709a      	strb	r2, [r3, #2]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20001eb0 	.word	0x20001eb0
 8003598:	20001d2c 	.word	0x20001d2c

0800359c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80035ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <vApplicationGetIdleTaskMemory+0x30>)
 80035b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	200015cc 	.word	0x200015cc
 80035cc:	2000167c 	.word	0x2000167c

080035d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <vApplicationGetTimerTaskMemory+0x2c>)
 80035e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4a06      	ldr	r2, [pc, #24]	; (8003600 <vApplicationGetTimerTaskMemory+0x30>)
 80035e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	2000187c 	.word	0x2000187c
 8003600:	2000192c 	.word	0x2000192c

08003604 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b0bc      	sub	sp, #240	; 0xf0
 8003608:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 800360a:	f7fe fb5f 	bl	8001ccc <uartBusesInit>
    i2cBusesInit();
 800360e:	f7fe fc5b 	bl	8001ec8 <i2cBusesInit>
    variableInit();
 8003612:	f7fe fab5 	bl	8001b80 <variableInit>
    stabilizationInit();
 8003616:	f000 fe8f 	bl	8004338 <stabilizationInit>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003620:	4b76      	ldr	r3, [pc, #472]	; (80037fc <MX_FREERTOS_Init+0x1f8>)
 8003622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 8003626:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800362a:	4618      	mov	r0, r3
 800362c:	f009 fb58 	bl	800cce0 <osMutexCreate>
 8003630:	4603      	mov	r3, r0
 8003632:	4a73      	ldr	r2, [pc, #460]	; (8003800 <MX_FREERTOS_Init+0x1fc>)
 8003634:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 8003636:	4b73      	ldr	r3, [pc, #460]	; (8003804 <MX_FREERTOS_Init+0x200>)
 8003638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 8003642:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f009 fb14 	bl	800cc78 <osTimerCreate>
 8003650:	4603      	mov	r3, r0
 8003652:	4a6d      	ldr	r2, [pc, #436]	; (8003808 <MX_FREERTOS_Init+0x204>)
 8003654:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTimer */
  osTimerDef(tTechCommTimer, tTechCommTimer_callback);
 8003656:	4b6d      	ldr	r3, [pc, #436]	; (800380c <MX_FREERTOS_Init+0x208>)
 8003658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  tTechCommTimerHandle = osTimerCreate(osTimer(tTechCommTimer), osTimerOnce, NULL);
 8003662:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f009 fb04 	bl	800cc78 <osTimerCreate>
 8003670:	4603      	mov	r3, r0
 8003672:	4a67      	ldr	r2, [pc, #412]	; (8003810 <MX_FREERTOS_Init+0x20c>)
 8003674:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 8003676:	4b67      	ldr	r3, [pc, #412]	; (8003814 <MX_FREERTOS_Init+0x210>)
 8003678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 8003682:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f009 faf4 	bl	800cc78 <osTimerCreate>
 8003690:	4603      	mov	r3, r0
 8003692:	4a61      	ldr	r2, [pc, #388]	; (8003818 <MX_FREERTOS_Init+0x214>)
 8003694:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8003696:	4b5f      	ldr	r3, [pc, #380]	; (8003814 <MX_FREERTOS_Init+0x210>)
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036a2:	485e      	ldr	r0, [pc, #376]	; (800381c <MX_FREERTOS_Init+0x218>)
 80036a4:	f00b fbe2 	bl	800ee6c <xTimerCreate>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <MX_FREERTOS_Init+0x21c>)
 80036ac:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 80036ae:	4b55      	ldr	r3, [pc, #340]	; (8003804 <MX_FREERTOS_Init+0x200>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	2200      	movs	r2, #0
 80036b6:	211e      	movs	r1, #30
 80036b8:	485a      	ldr	r0, [pc, #360]	; (8003824 <MX_FREERTOS_Init+0x220>)
 80036ba:	f00b fbd7 	bl	800ee6c <xTimerCreate>
 80036be:	4603      	mov	r3, r0
 80036c0:	4a59      	ldr	r2, [pc, #356]	; (8003828 <MX_FREERTOS_Init+0x224>)
 80036c2:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 80036c4:	4b56      	ldr	r3, [pc, #344]	; (8003820 <MX_FREERTOS_Init+0x21c>)
 80036c6:	681c      	ldr	r4, [r3, #0]
 80036c8:	f00a fdec 	bl	800e2a4 <xTaskGetTickCount>
 80036cc:	4602      	mov	r2, r0
 80036ce:	230a      	movs	r3, #10
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	2101      	movs	r1, #1
 80036d6:	4620      	mov	r0, r4
 80036d8:	f00b fc58 	bl	800ef8c <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 80036dc:	4b53      	ldr	r3, [pc, #332]	; (800382c <MX_FREERTOS_Init+0x228>)
 80036de:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80036e2:	461d      	mov	r5, r3
 80036e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 80036f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f009 fa5e 	bl	800cbb8 <osThreadCreate>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4a4c      	ldr	r2, [pc, #304]	; (8003830 <MX_FREERTOS_Init+0x22c>)
 8003700:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 8003702:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <MX_FREERTOS_Init+0x230>)
 8003704:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003708:	461d      	mov	r5, r3
 800370a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800370c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800370e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 8003716:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f009 fa4b 	bl	800cbb8 <osThreadCreate>
 8003722:	4603      	mov	r3, r0
 8003724:	4a44      	ldr	r2, [pc, #272]	; (8003838 <MX_FREERTOS_Init+0x234>)
 8003726:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 8003728:	4b44      	ldr	r3, [pc, #272]	; (800383c <MX_FREERTOS_Init+0x238>)
 800372a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800372e:	461d      	mov	r5, r3
 8003730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 800373c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f009 fa38 	bl	800cbb8 <osThreadCreate>
 8003748:	4603      	mov	r3, r0
 800374a:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <MX_FREERTOS_Init+0x23c>)
 800374c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityIdle, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <MX_FREERTOS_Init+0x240>)
 8003750:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003754:	461d      	mov	r5, r3
 8003756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800375e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 8003762:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f009 fa25 	bl	800cbb8 <osThreadCreate>
 800376e:	4603      	mov	r3, r0
 8003770:	4a35      	ldr	r2, [pc, #212]	; (8003848 <MX_FREERTOS_Init+0x244>)
 8003772:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityIdle, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <MX_FREERTOS_Init+0x248>)
 8003776:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800377a:	461d      	mov	r5, r3
 800377c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800377e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003780:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 8003788:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f009 fa12 	bl	800cbb8 <osThreadCreate>
 8003794:	4603      	mov	r3, r0
 8003796:	4a2e      	ldr	r2, [pc, #184]	; (8003850 <MX_FREERTOS_Init+0x24c>)
 8003798:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <MX_FREERTOS_Init+0x250>)
 800379c:	f107 0420 	add.w	r4, r7, #32
 80037a0:	461d      	mov	r5, r3
 80037a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 80037ae:	f107 0320 	add.w	r3, r7, #32
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f009 f9ff 	bl	800cbb8 <osThreadCreate>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <MX_FREERTOS_Init+0x254>)
 80037be:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityHigh, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 80037c0:	4b26      	ldr	r3, [pc, #152]	; (800385c <MX_FREERTOS_Init+0x258>)
 80037c2:	1d3c      	adds	r4, r7, #4
 80037c4:	461d      	mov	r5, r3
 80037c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f009 f9ee 	bl	800cbb8 <osThreadCreate>
 80037dc:	4603      	mov	r3, r0
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <MX_FREERTOS_Init+0x25c>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <MX_FREERTOS_Init+0x260>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <MX_FREERTOS_Init+0x260>)
 80037e8:	6811      	ldr	r1, [r2, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f007 faa5 	bl	800ad3c <HAL_UART_Receive_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80037f2:	bf00      	nop
 80037f4:	37e8      	adds	r7, #232	; 0xe8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bdb0      	pop	{r4, r5, r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20001584 	.word	0x20001584
 8003800:	20001580 	.word	0x20001580
 8003804:	08003ce9 	.word	0x08003ce9
 8003808:	20001574 	.word	0x20001574
 800380c:	08003df5 	.word	0x08003df5
 8003810:	20001578 	.word	0x20001578
 8003814:	08003e09 	.word	0x08003e09
 8003818:	2000157c 	.word	0x2000157c
 800381c:	08010658 	.word	0x08010658
 8003820:	20000284 	.word	0x20000284
 8003824:	08010660 	.word	0x08010660
 8003828:	20000280 	.word	0x20000280
 800382c:	0801067c 	.word	0x0801067c
 8003830:	20000288 	.word	0x20000288
 8003834:	080106a8 	.word	0x080106a8
 8003838:	2000053c 	.word	0x2000053c
 800383c:	080106d4 	.word	0x080106d4
 8003840:	200007f0 	.word	0x200007f0
 8003844:	08010704 	.word	0x08010704
 8003848:	20000aa4 	.word	0x20000aa4
 800384c:	08010730 	.word	0x08010730
 8003850:	20000d58 	.word	0x20000d58
 8003854:	0801075c 	.word	0x0801075c
 8003858:	2000100c 	.word	0x2000100c
 800385c:	08010784 	.word	0x08010784
 8003860:	200012c0 	.word	0x200012c0
 8003864:	2000018c 	.word	0x2000018c

08003868 <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 8003870:	f009 f992 	bl	800cb98 <osKernelSysTick>
 8003874:	4603      	mov	r3, r0
 8003876:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  toggle_counter++;
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <func_tLedBlinkingTask+0x60>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <func_tLedBlinkingTask+0x60>)
 8003880:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8003882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003886:	4811      	ldr	r0, [pc, #68]	; (80038cc <func_tLedBlinkingTask+0x64>)
 8003888:	f003 f8c6 	bl	8006a18 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	2164      	movs	r1, #100	; 0x64
 8003892:	4618      	mov	r0, r3
 8003894:	f009 fa3c 	bl	800cd10 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8003898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800389c:	480b      	ldr	r0, [pc, #44]	; (80038cc <func_tLedBlinkingTask+0x64>)
 800389e:	f003 f8bb 	bl	8006a18 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	2164      	movs	r1, #100	; 0x64
 80038a8:	4618      	mov	r0, r3
 80038aa:	f009 fa31 	bl	800cd10 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 80038ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038b2:	4806      	ldr	r0, [pc, #24]	; (80038cc <func_tLedBlinkingTask+0x64>)
 80038b4:	f003 f8b0 	bl	8006a18 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 80038b8:	f107 030c 	add.w	r3, r7, #12
 80038bc:	2164      	movs	r1, #100	; 0x64
 80038be:	4618      	mov	r0, r3
 80038c0:	f009 fa26 	bl	800cd10 <osDelayUntil>
	  toggle_counter++;
 80038c4:	e7d8      	b.n	8003878 <func_tLedBlinkingTask+0x10>
 80038c6:	bf00      	nop
 80038c8:	2000027c 	.word	0x2000027c
 80038cc:	48000400 	.word	0x48000400

080038d0 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 80038d8:	f009 f95e 	bl	800cb98 <osKernelSysTick>
 80038dc:	4603      	mov	r3, r0
 80038de:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 80038e4:	2201      	movs	r2, #1
 80038e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ee:	f003 f87b 	bl	80069e8 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 80038f2:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <func_tVmaCommTask+0xdc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2114      	movs	r1, #20
 80038f8:	4618      	mov	r0, r3
 80038fa:	f009 fed3 	bl	800d6a4 <xQueueSemaphoreTake>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10b      	bne.n	800391c <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	4619      	mov	r1, r3
 8003908:	4829      	ldr	r0, [pc, #164]	; (80039b0 <func_tVmaCommTask+0xe0>)
 800390a:	f001 fd27 	bl	800535c <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 800390e:	4b27      	ldr	r3, [pc, #156]	; (80039ac <func_tVmaCommTask+0xdc>)
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	2300      	movs	r3, #0
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	f009 fc4e 	bl	800d1b8 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <func_tVmaCommTask+0xe4>)
 800391e:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <func_tVmaCommTask+0xe0>)
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <func_tVmaCommTask+0xe4>)
 8003924:	220b      	movs	r2, #11
 8003926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <func_tVmaCommTask+0xe8>)
 8003934:	4413      	add	r3, r2
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <func_tVmaCommTask+0xe4>)
 8003938:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <func_tVmaCommTask+0xe4>)
 800393c:	2209      	movs	r2, #9
 800393e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8003942:	2100      	movs	r1, #0
 8003944:	481d      	ldr	r0, [pc, #116]	; (80039bc <func_tVmaCommTask+0xec>)
 8003946:	f7fe fb37 	bl	8001fb8 <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <func_tVmaCommTask+0xdc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2114      	movs	r1, #20
 8003950:	4618      	mov	r0, r3
 8003952:	f009 fea7 	bl	800d6a4 <xQueueSemaphoreTake>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d111      	bne.n	8003980 <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <func_tVmaCommTask+0xe8>)
 8003966:	4413      	add	r3, r2
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fd35 	bl	80053dc <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <func_tVmaCommTask+0xdc>)
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	f009 fc1c 	bl	800d1b8 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <func_tVmaCommTask+0xf0>)
 8003986:	fb83 3102 	smull	r3, r1, r3, r2
 800398a:	17d3      	asrs	r3, r2, #31
 800398c:	1ac9      	subs	r1, r1, r3
 800398e:	460b      	mov	r3, r1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	440b      	add	r3, r1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	1ad1      	subs	r1, r2, r3
 8003998:	460b      	mov	r3, r1
 800399a:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 800399c:	f107 0308 	add.w	r3, r7, #8
 80039a0:	2114      	movs	r1, #20
 80039a2:	4618      	mov	r0, r3
 80039a4:	f009 f9b4 	bl	800cd10 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 80039a8:	e7a3      	b.n	80038f2 <func_tVmaCommTask+0x22>
 80039aa:	bf00      	nop
 80039ac:	20001580 	.word	0x20001580
 80039b0:	20002360 	.word	0x20002360
 80039b4:	2000018c 	.word	0x2000018c
 80039b8:	2000236c 	.word	0x2000236c
 80039bc:	200001c4 	.word	0x200001c4
 80039c0:	2aaaaaab 	.word	0x2aaaaaab

080039c4 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 80039cc:	f009 f8e4 	bl	800cb98 <osKernelSysTick>
 80039d0:	4603      	mov	r3, r0
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.startIMU) {
 80039d4:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <func_tImuCommTask+0xc8>)
 80039d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 80039de:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <func_tImuCommTask+0xcc>)
 80039e0:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <func_tImuCommTask+0xd0>)
 80039e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <func_tImuCommTask+0xcc>)
 80039e8:	2214      	movs	r2, #20
 80039ea:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 80039ee:	2100      	movs	r1, #0
 80039f0:	4829      	ldr	r0, [pc, #164]	; (8003a98 <func_tImuCommTask+0xd4>)
 80039f2:	f7fe fa77 	bl	8001ee4 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <func_tImuCommTask+0xcc>)
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <func_tImuCommTask+0xd8>)
 80039fa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 80039fe:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <func_tImuCommTask+0xcc>)
 8003a00:	221b      	movs	r2, #27
 8003a02:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003a06:	2100      	movs	r1, #0
 8003a08:	4823      	ldr	r0, [pc, #140]	; (8003a98 <func_tImuCommTask+0xd4>)
 8003a0a:	f7fe fa6b 	bl	8001ee4 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <func_tImuCommTask+0xc8>)
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <func_tImuCommTask+0xc8>)
 8003a14:	6613      	str	r3, [r2, #96]	; 0x60
	  		rSensors.startIMU = false;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <func_tImuCommTask+0xc8>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a1e:	e02d      	b.n	8003a7c <func_tImuCommTask+0xb8>
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <func_tImuCommTask+0xcc>)
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <func_tImuCommTask+0xdc>)
 8003a24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <func_tImuCommTask+0xcc>)
 8003a2a:	221e      	movs	r2, #30
 8003a2c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <func_tImuCommTask+0xcc>)
 8003a32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a36:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <func_tImuCommTask+0xcc>)
 8003a38:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <func_tImuCommTask+0xcc>)
 8003a3e:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8003a42:	b292      	uxth	r2, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f007 f979 	bl	800ad3c <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	210a      	movs	r1, #10
 8003a50:	4618      	mov	r0, r3
 8003a52:	f009 f95d 	bl	800cd10 <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <func_tImuCommTask+0xe0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	210a      	movs	r1, #10
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f009 fe21 	bl	800d6a4 <xQueueSemaphoreTake>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d109      	bne.n	8003a7c <func_tImuCommTask+0xb8>
	  			ImuReceive(ImuResponseBuffer);
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <func_tImuCommTask+0xdc>)
 8003a6a:	f7ff f999 	bl	8002da0 <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <func_tImuCommTask+0xe0>)
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	2200      	movs	r2, #0
 8003a76:	2100      	movs	r1, #0
 8003a78:	f009 fb9e 	bl	800d1b8 <xQueueGenericSend>
	  		}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003a7c:	f107 030c 	add.w	r3, r7, #12
 8003a80:	210a      	movs	r1, #10
 8003a82:	4618      	mov	r0, r3
 8003a84:	f009 f944 	bl	800cd10 <osDelayUntil>
	  	if(rSensors.startIMU) {
 8003a88:	e7a4      	b.n	80039d4 <func_tImuCommTask+0x10>
 8003a8a:	bf00      	nop
 8003a8c:	20001dc8 	.word	0x20001dc8
 8003a90:	2000018c 	.word	0x2000018c
 8003a94:	20000024 	.word	0x20000024
 8003a98:	20000234 	.word	0x20000234
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	20002340 	.word	0x20002340
 8003aa4:	20001580 	.word	0x20001580

08003aa8 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003ab0:	f009 f872 	bl	800cb98 <osKernelSysTick>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003ab8:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <func_tStabilizationTask+0x70>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	210a      	movs	r1, #10
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f009 fdf0 	bl	800d6a4 <xQueueSemaphoreTake>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d11e      	bne.n	8003b08 <func_tStabilizationTask+0x60>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e00f      	b.n	8003af0 <func_tStabilizationTask+0x48>
				if (rStabConstants[i].enable) {
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <func_tStabilizationTask+0x74>)
 8003ad4:	214c      	movs	r1, #76	; 0x4c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <func_tStabilizationTask+0x42>
					stabilizationUpdate(i);
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f817 	bl	8004b18 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	3301      	adds	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d9ec      	bls.n	8003ad0 <func_tStabilizationTask+0x28>
				}
			}
			formThrustVectors();
 8003af6:	f001 fcad 	bl	8005454 <formThrustVectors>
			xSemaphoreGive(mutDataHandle);
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <func_tStabilizationTask+0x70>)
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	2200      	movs	r2, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	f009 fb58 	bl	800d1b8 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	210a      	movs	r1, #10
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f009 f8fe 	bl	800cd10 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003b14:	e7d0      	b.n	8003ab8 <func_tStabilizationTask+0x10>
 8003b16:	bf00      	nop
 8003b18:	20001580 	.word	0x20001580
 8003b1c:	20001eb0 	.word	0x20001eb0

08003b20 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003b28:	f009 f836 	bl	800cb98 <osKernelSysTick>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003b34:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <func_tDevCommTask+0xd8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f009 fdb1 	bl	800d6a4 <xQueueSemaphoreTake>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d10b      	bne.n	8003b60 <func_tDevCommTask+0x40>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	482b      	ldr	r0, [pc, #172]	; (8003bfc <func_tDevCommTask+0xdc>)
 8003b4e:	f7fe fbd5 	bl	80022fc <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <func_tDevCommTask+0xd8>)
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f009 fb2c 	bl	800d1b8 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003b60:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <func_tDevCommTask+0xe0>)
 8003b62:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <func_tDevCommTask+0xdc>)
 8003b64:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <func_tDevCommTask+0xe0>)
 8003b68:	2207      	movs	r2, #7
 8003b6a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <func_tDevCommTask+0xe4>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <func_tDevCommTask+0xe0>)
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <func_tDevCommTask+0xe0>)
 8003b82:	220a      	movs	r2, #10
 8003b84:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	481f      	ldr	r0, [pc, #124]	; (8003c08 <func_tDevCommTask+0xe8>)
 8003b8c:	f7fe fa14 	bl	8001fb8 <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <func_tDevCommTask+0xd8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f009 fd83 	bl	800d6a4 <xQueueSemaphoreTake>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d112      	bne.n	8003bca <func_tDevCommTask+0xaa>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <func_tDevCommTask+0xe4>)
 8003bb0:	4413      	add	r3, r2
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fbda 	bl	8002370 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <func_tDevCommTask+0xd8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	f009 faf7 	bl	800d1b8 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <func_tDevCommTask+0xec>)
 8003bd0:	fb83 3102 	smull	r3, r1, r3, r2
 8003bd4:	17d3      	asrs	r3, r2, #31
 8003bd6:	1ac9      	subs	r1, r1, r3
 8003bd8:	460b      	mov	r3, r1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	440b      	add	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	1ad1      	subs	r1, r2, r3
 8003be2:	460b      	mov	r3, r1
 8003be4:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 8003be6:	f107 0308 	add.w	r3, r7, #8
 8003bea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f009 f88e 	bl	800cd10 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003bf4:	e79e      	b.n	8003b34 <func_tDevCommTask+0x14>
 8003bf6:	bf00      	nop
 8003bf8:	20001580 	.word	0x20001580
 8003bfc:	200023a4 	.word	0x200023a4
 8003c00:	2000018c 	.word	0x2000018c
 8003c04:	200023ac 	.word	0x200023ac
 8003c08:	200001fc 	.word	0x200001fc
 8003c0c:	2aaaaaab 	.word	0x2aaaaaab

08003c10 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003c18:	f008 ffbe 	bl	800cb98 <osKernelSysTick>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <func_tSensCommTask+0xa4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	210a      	movs	r1, #10
 8003c26:	4618      	mov	r0, r3
 8003c28:	f009 fd3c 	bl	800d6a4 <xQueueSemaphoreTake>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d139      	bne.n	8003ca6 <func_tSensCommTask+0x96>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
    	rSensors.pressure_raw = MS5837_02BA_get_actual_pressure();
 8003c32:	f7fd fa41 	bl	80010b8 <MS5837_02BA_get_actual_pressure>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c3a:	6593      	str	r3, [r2, #88]	; 0x58
    	float pressure = movingAverageIterate(&pressure_filter, rSensors.pressure_raw);
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c48:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4c:	481b      	ldr	r0, [pc, #108]	; (8003cbc <func_tSensCommTask+0xac>)
 8003c4e:	f000 fb19 	bl	8004284 <movingAverageIterate>
 8003c52:	ed87 0a03 	vstr	s0, [r7, #12]
    	rSensors.last_pressure = rSensors.pressure;
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c5c:	6653      	str	r3, [r2, #100]	; 0x64
		rSensors.pressure = pressure;
 8003c5e:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	65d3      	str	r3, [r2, #92]	; 0x5c
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
				(rSensors.pressure - rSensors.last_pressure)*1000/DELAY_SENSOR_TASK);
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c66:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c6c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c74:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003cc0 <func_tSensCommTask+0xb0>
 8003c78:	ee67 7a87 	vmul.f32	s15, s15, s14
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
 8003c7c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c84:	eeb0 0a47 	vmov.f32	s0, s14
 8003c88:	480e      	ldr	r0, [pc, #56]	; (8003cc4 <func_tSensCommTask+0xb4>)
 8003c8a:	f000 fafb 	bl	8004284 <movingAverageIterate>
 8003c8e:	eef0 7a40 	vmov.f32	s15, s0
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <func_tSensCommTask+0xa8>)
 8003c94:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		xSemaphoreGive(mutDataHandle);
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <func_tSensCommTask+0xa4>)
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f009 fa89 	bl	800d1b8 <xQueueGenericSend>
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // �?справленная задержка
 8003ca6:	f107 0308 	add.w	r3, r7, #8
 8003caa:	210a      	movs	r1, #10
 8003cac:	4618      	mov	r0, r3
 8003cae:	f009 f82f 	bl	800cd10 <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003cb2:	e7b5      	b.n	8003c20 <func_tSensCommTask+0x10>
 8003cb4:	20001580 	.word	0x20001580
 8003cb8:	20001dc8 	.word	0x20001dc8
 8003cbc:	2000243c 	.word	0x2000243c
 8003cc0:	447a0000 	.word	0x447a0000
 8003cc4:	2000250c 	.word	0x2000250c

08003cc8 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003cd0:	f008 ff62 	bl	800cb98 <osKernelSysTick>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	210a      	movs	r1, #10
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f009 f816 	bl	800cd10 <osDelayUntil>
 8003ce4:	e7f8      	b.n	8003cd8 <func_tPcCommTask+0x10>
	...

08003ce8 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003cf0:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <func_tUartTimer+0x100>)
 8003cf2:	7a1b      	ldrb	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d05a      	beq.n	8003dae <func_tUartTimer+0xc6>
		bool package = true;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <func_tUartTimer+0x104>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2105      	movs	r1, #5
 8003d02:	4618      	mov	r0, r3
 8003d04:	f009 fcce 	bl	800d6a4 <xQueueSemaphoreTake>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d140      	bne.n	8003d90 <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <func_tUartTimer+0x100>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2baa      	cmp	r3, #170	; 0xaa
 8003d16:	d023      	beq.n	8003d60 <func_tUartTimer+0x78>
 8003d18:	2baa      	cmp	r3, #170	; 0xaa
 8003d1a:	dc30      	bgt.n	8003d7e <func_tUartTimer+0x96>
 8003d1c:	2b55      	cmp	r3, #85	; 0x55
 8003d1e:	d010      	beq.n	8003d42 <func_tUartTimer+0x5a>
 8003d20:	2ba5      	cmp	r3, #165	; 0xa5
 8003d22:	d12c      	bne.n	8003d7e <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <func_tUartTimer+0x100>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fb89 	bl	8002440 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003d2e:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <func_tUartTimer+0x100>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fefa 	bl	8002b2c <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <func_tUartTimer+0x100>)
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003d40:	e01f      	b.n	8003d82 <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003d42:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <func_tUartTimer+0x100>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fcf8 	bl	800273c <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <func_tUartTimer+0x100>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe ff15 	bl	8002b80 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8003d56:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <func_tUartTimer+0x100>)
 8003d58:	2263      	movs	r2, #99	; 0x63
 8003d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003d5e:	e010      	b.n	8003d82 <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003d60:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <func_tUartTimer+0x100>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fe2b 	bl	80029c0 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <func_tUartTimer+0x100>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fffc 	bl	8002d6c <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003d74:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <func_tUartTimer+0x100>)
 8003d76:	2206      	movs	r2, #6
 8003d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003d7c:	e001      	b.n	8003d82 <func_tUartTimer+0x9a>
				default:
					package = false;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <func_tUartTimer+0x104>)
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	2300      	movs	r3, #0
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f009 fa14 	bl	800d1b8 <xQueueGenericSend>
		}
		if(package) {
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <func_tUartTimer+0x100>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <func_tUartTimer+0x100>)
 8003d9c:	6851      	ldr	r1, [r2, #4]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <func_tUartTimer+0x100>)
 8003da0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003da4:	b292      	uxth	r2, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f006 ff6a 	bl	800ac80 <HAL_UART_Transmit_IT>
 8003dac:	e004      	b.n	8003db8 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <func_tUartTimer+0x100>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	3301      	adds	r3, #1
 8003db4:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <func_tUartTimer+0x100>)
 8003db6:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <func_tUartTimer+0x108>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <func_tUartTimer+0x100>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <func_tUartTimer+0x100>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f007 f933 	bl	800b034 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <func_tUartTimer+0x100>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <func_tUartTimer+0x100>)
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f006 ffaf 	bl	800ad3c <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	2000018c 	.word	0x2000018c
 8003dec:	20001580 	.word	0x20001580
 8003df0:	20000274 	.word	0x20000274

08003df4 <tTechCommTimer_callback>:

/* tTechCommTimer_callback function */
void tTechCommTimer_callback(void const * argument)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTimer_callback */

  /* USER CODE END tTechCommTimer_callback */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8003e10:	f00a fa48 	bl	800e2a4 <xTaskGetTickCount>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd f8cc 	bl	8000fb4 <fromTickToMs>
 8003e1c:	eeb0 7a40 	vmov.f32	s14, s0
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <tSilence_func+0x94>)
 8003e22:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ea0 <tSilence_func+0x98>
 8003e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e36:	dd20      	ble.n	8003e7a <tSilence_func+0x72>
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <tSilence_func+0x9c>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11c      	bne.n	8003e7a <tSilence_func+0x72>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <tSilence_func+0x94>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	4618      	mov	r0, r3
 8003e46:	f007 f8f5 	bl	800b034 <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <tSilence_func+0x94>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <tSilence_func+0x94>)
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	4618      	mov	r0, r3
 8003e56:	f006 ff71 	bl	800ad3c <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <tSilence_func+0xa0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2105      	movs	r1, #5
 8003e60:	4618      	mov	r0, r3
 8003e62:	f009 fc1f 	bl	800d6a4 <xQueueSemaphoreTake>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <tSilence_func+0x72>
//			resetThrusters();
//			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
//				rStabConstants[i].enable = false;
//			}

			xSemaphoreGive(mutDataHandle);
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <tSilence_func+0xa0>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	f009 f99f 	bl	800d1b8 <xQueueGenericSend>
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF

	xTimerStart(SilenceTimer, 50);
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <tSilence_func+0xa4>)
 8003e7c:	681c      	ldr	r4, [r3, #0]
 8003e7e:	f00a fa11 	bl	800e2a4 <xTaskGetTickCount>
 8003e82:	4602      	mov	r2, r0
 8003e84:	2332      	movs	r3, #50	; 0x32
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f00b f87d 	bl	800ef8c <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2000018c 	.word	0x2000018c
 8003ea0:	447a0000 	.word	0x447a0000
 8003ea4:	20000274 	.word	0x20000274
 8003ea8:	20001580 	.word	0x20001580
 8003eac:	20000284 	.word	0x20000284

08003eb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb6:	f107 0314 	add.w	r3, r7, #20
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ec6:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4a3f      	ldr	r2, [pc, #252]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ed0:	6153      	str	r3, [r2, #20]
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4a39      	ldr	r2, [pc, #228]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee8:	6153      	str	r3, [r2, #20]
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef6:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4a33      	ldr	r2, [pc, #204]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f00:	6153      	str	r3, [r2, #20]
 8003f02:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f0e:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4a2d      	ldr	r2, [pc, #180]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f18:	6153      	str	r3, [r2, #20]
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f26:	4b28      	ldr	r3, [pc, #160]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f30:	6153      	str	r3, [r2, #20]
 8003f32:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <MX_GPIO_Init+0x118>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003f44:	4821      	ldr	r0, [pc, #132]	; (8003fcc <MX_GPIO_Init+0x11c>)
 8003f46:	f002 fd4f 	bl	80069e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f50:	481f      	ldr	r0, [pc, #124]	; (8003fd0 <MX_GPIO_Init+0x120>)
 8003f52:	f002 fd49 	bl	80069e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8003f56:	2200      	movs	r2, #0
 8003f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f60:	f002 fd42 	bl	80069e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 8003f64:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f76:	f107 0314 	add.w	r3, r7, #20
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4813      	ldr	r0, [pc, #76]	; (8003fcc <MX_GPIO_Init+0x11c>)
 8003f7e:	f002 fbb9 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 8003f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f90:	2300      	movs	r3, #0
 8003f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4619      	mov	r1, r3
 8003f9a:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <MX_GPIO_Init+0x120>)
 8003f9c:	f002 fbaa 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8003fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f107 0314 	add.w	r3, r7, #20
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbc:	f002 fb9a 	bl	80066f4 <HAL_GPIO_Init>

}
 8003fc0:	bf00      	nop
 8003fc2:	3728      	adds	r7, #40	; 0x28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	48000400 	.word	0x48000400
 8003fd0:	48000c00 	.word	0x48000c00

08003fd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <MX_I2C1_Init+0x74>)
 8003fda:	4a1c      	ldr	r2, [pc, #112]	; (800404c <MX_I2C1_Init+0x78>)
 8003fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <MX_I2C1_Init+0x74>)
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <MX_I2C1_Init+0x7c>)
 8003fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <MX_I2C1_Init+0x74>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <MX_I2C1_Init+0x74>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <MX_I2C1_Init+0x74>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <MX_I2C1_Init+0x74>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <MX_I2C1_Init+0x74>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <MX_I2C1_Init+0x74>)
 8004004:	2200      	movs	r2, #0
 8004006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <MX_I2C1_Init+0x74>)
 800400a:	2200      	movs	r2, #0
 800400c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800400e:	480e      	ldr	r0, [pc, #56]	; (8004048 <MX_I2C1_Init+0x74>)
 8004010:	f002 fd1c 	bl	8006a4c <HAL_I2C_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800401a:	f000 f905 	bl	8004228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800401e:	2100      	movs	r1, #0
 8004020:	4809      	ldr	r0, [pc, #36]	; (8004048 <MX_I2C1_Init+0x74>)
 8004022:	f004 fdb7 	bl	8008b94 <HAL_I2CEx_ConfigAnalogFilter>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800402c:	f000 f8fc 	bl	8004228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004030:	2100      	movs	r1, #0
 8004032:	4805      	ldr	r0, [pc, #20]	; (8004048 <MX_I2C1_Init+0x74>)
 8004034:	f004 fdf9 	bl	8008c2a <HAL_I2CEx_ConfigDigitalFilter>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800403e:	f000 f8f3 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200023e8 	.word	0x200023e8
 800404c:	40005400 	.word	0x40005400
 8004050:	2000090e 	.word	0x2000090e

08004054 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_I2C_MspInit+0x8c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d12f      	bne.n	80040d6 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_I2C_MspInit+0x90>)
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <HAL_I2C_MspInit+0x90>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6153      	str	r3, [r2, #20]
 8004082:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <HAL_I2C_MspInit+0x90>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800408e:	23c0      	movs	r3, #192	; 0xc0
 8004090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004092:	2312      	movs	r3, #18
 8004094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800409a:	2303      	movs	r3, #3
 800409c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800409e:	2304      	movs	r3, #4
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4619      	mov	r1, r3
 80040a8:	480f      	ldr	r0, [pc, #60]	; (80040e8 <HAL_I2C_MspInit+0x94>)
 80040aa:	f002 fb23 	bl	80066f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_I2C_MspInit+0x90>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_I2C_MspInit+0x90>)
 80040b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040b8:	61d3      	str	r3, [r2, #28]
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_I2C_MspInit+0x90>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2105      	movs	r1, #5
 80040ca:	201f      	movs	r0, #31
 80040cc:	f001 fed8 	bl	8005e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80040d0:	201f      	movs	r0, #31
 80040d2:	f001 fef1 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80040d6:	bf00      	nop
 80040d8:	3728      	adds	r7, #40	; 0x28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40005400 	.word	0x40005400
 80040e4:	40021000 	.word	0x40021000
 80040e8:	48000400 	.word	0x48000400

080040ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040f0:	f001 fdb4 	bl	8005c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040f4:	f000 f828 	bl	8004148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040f8:	f7ff feda 	bl	8003eb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80040fc:	f7fe ff0a 	bl	8002f14 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004100:	f001 fb44 	bl	800578c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004104:	f7ff ff66 	bl	8003fd4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004108:	f001 fb70 	bl	80057ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800410c:	f001 fba2 	bl	8005854 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8004110:	f001 fb0c 	bl	800572c <MX_UART4_Init>
  MX_TIM7_Init();
 8004114:	f001 fab4 	bl	8005680 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(30e3); //30 seconds delay to start PC
  MS5837_02BA_init(&hi2c1);
 8004118:	4808      	ldr	r0, [pc, #32]	; (800413c <main+0x50>)
 800411a:	f7fc ff77 	bl	800100c <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 800411e:	f7fd f947 	bl	80013b0 <MS5837_02BA_reset_pressure>

  movingAverageInit(&pressure_filter, 50);
 8004122:	2132      	movs	r1, #50	; 0x32
 8004124:	4806      	ldr	r0, [pc, #24]	; (8004140 <main+0x54>)
 8004126:	f000 f884 	bl	8004232 <movingAverageInit>
  movingAverageInit(&velocity_pressure_filter, 50);
 800412a:	2132      	movs	r1, #50	; 0x32
 800412c:	4805      	ldr	r0, [pc, #20]	; (8004144 <main+0x58>)
 800412e:	f000 f880 	bl	8004232 <movingAverageInit>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004132:	f7ff fa67 	bl	8003604 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004136:	f008 fd28 	bl	800cb8a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800413a:	e7fe      	b.n	800413a <main+0x4e>
 800413c:	200023e8 	.word	0x200023e8
 8004140:	2000243c 	.word	0x2000243c
 8004144:	2000250c 	.word	0x2000250c

08004148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b09e      	sub	sp, #120	; 0x78
 800414c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800414e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004152:	2228      	movs	r2, #40	; 0x28
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f00b ff78 	bl	801004c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800415c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800416c:	463b      	mov	r3, r7
 800416e:	223c      	movs	r2, #60	; 0x3c
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f00b ff6a 	bl	801004c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004178:	2302      	movs	r3, #2
 800417a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800417c:	2301      	movs	r3, #1
 800417e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004180:	2310      	movs	r3, #16
 8004182:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004184:	2302      	movs	r3, #2
 8004186:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004188:	2300      	movs	r3, #0
 800418a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800418c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8004190:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004192:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004196:	4618      	mov	r0, r3
 8004198:	f004 fd94 	bl	8008cc4 <HAL_RCC_OscConfig>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80041a2:	f000 f841 	bl	8004228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041a6:	230f      	movs	r3, #15
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041aa:	2302      	movs	r3, #2
 80041ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041ae:	2300      	movs	r3, #0
 80041b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041b8:	2300      	movs	r3, #0
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041c0:	2101      	movs	r1, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f005 fdbc 	bl	8009d40 <HAL_RCC_ClockConfig>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80041ce:	f000 f82b 	bl	8004228 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80041d2:	232f      	movs	r3, #47	; 0x2f
 80041d4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ea:	463b      	mov	r3, r7
 80041ec:	4618      	mov	r0, r3
 80041ee:	f006 f811 	bl	800a214 <HAL_RCCEx_PeriphCLKConfig>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80041f8:	f000 f816 	bl	8004228 <Error_Handler>
  }
}
 80041fc:	bf00      	nop
 80041fe:	3778      	adds	r7, #120	; 0x78
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004216:	f001 fd37 	bl	8005c88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00

08004228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800422c:	b672      	cpsid	i
}
 800422e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004230:	e7fe      	b.n	8004230 <Error_Handler+0x8>

08004232 <movingAverageInit>:
#include "moving_average.h"

void movingAverageInit(Moving_Average_filter* filter, uint8_t order)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	70fb      	strb	r3, [r7, #3]
	filter->order = order;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e009      	b.n	8004260 <movingAverageInit+0x2e>
		filter->data[i] = 0;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	3301      	adds	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b31      	cmp	r3, #49	; 0x31
 8004264:	d9f2      	bls.n	800424c <movingAverageInit+0x1a>
	filter->current_element = 0;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	filter->average = 0;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <movingAverageIterate>:

float movingAverageIterate(Moving_Average_filter* filter, float value)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	ed87 0a00 	vstr	s0, [r7]
	int32_t last_value = filter->data[filter->current_element];
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042a4:	ee17 3a90 	vmov	r3, s15
 80042a8:	60fb      	str	r3, [r7, #12]
	filter->data[filter->current_element] = value;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	601a      	str	r2, [r3, #0]
	filter->average = (filter->average * filter->order - last_value + value) / (float)filter->order;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042e0:	edd7 7a00 	vldr	s15, [r7]
 80042e4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	filter->current_element = (filter->current_element+1)%filter->order;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004306:	3301      	adds	r3, #1
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 800430e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004312:	fb01 f202 	mul.w	r2, r1, r2
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	b2da      	uxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	return filter->average;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004326:	ee07 3a90 	vmov	s15, r3
}
 800432a:	eeb0 0a67 	vmov.f32	s0, s15
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800433e:	2300      	movs	r3, #0
 8004340:	71fb      	strb	r3, [r7, #7]
 8004342:	e15d      	b.n	8004600 <stabilizationInit+0x2c8>
		rStabConstants[i].enable = false;
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	4abf      	ldr	r2, [pc, #764]	; (8004644 <stabilizationInit+0x30c>)
 8004348:	214c      	movs	r1, #76	; 0x4c
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	4413      	add	r3, r2
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	4abc      	ldr	r2, [pc, #752]	; (8004648 <stabilizationInit+0x310>)
 8004358:	2158      	movs	r1, #88	; 0x58
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	330c      	adds	r3, #12
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	4ab7      	ldr	r2, [pc, #732]	; (8004648 <stabilizationInit+0x310>)
 800436c:	2158      	movs	r1, #88	; 0x58
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3310      	adds	r3, #16
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	4ab2      	ldr	r2, [pc, #712]	; (8004648 <stabilizationInit+0x310>)
 8004380:	2158      	movs	r1, #88	; 0x58
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3314      	adds	r3, #20
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	4aad      	ldr	r2, [pc, #692]	; (8004648 <stabilizationInit+0x310>)
 8004394:	2158      	movs	r1, #88	; 0x58
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3318      	adds	r3, #24
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	4aa8      	ldr	r2, [pc, #672]	; (8004648 <stabilizationInit+0x310>)
 80043a8:	2158      	movs	r1, #88	; 0x58
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	331c      	adds	r3, #28
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	4aa3      	ldr	r2, [pc, #652]	; (8004648 <stabilizationInit+0x310>)
 80043bc:	2158      	movs	r1, #88	; 0x58
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3320      	adds	r3, #32
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	4a9e      	ldr	r2, [pc, #632]	; (8004648 <stabilizationInit+0x310>)
 80043d0:	2158      	movs	r1, #88	; 0x58
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3324      	adds	r3, #36	; 0x24
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	4a99      	ldr	r2, [pc, #612]	; (8004648 <stabilizationInit+0x310>)
 80043e4:	2158      	movs	r1, #88	; 0x58
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3328      	adds	r3, #40	; 0x28
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	4a94      	ldr	r2, [pc, #592]	; (8004648 <stabilizationInit+0x310>)
 80043f8:	2158      	movs	r1, #88	; 0x58
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	332c      	adds	r3, #44	; 0x2c
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	4a8f      	ldr	r2, [pc, #572]	; (8004648 <stabilizationInit+0x310>)
 800440c:	2158      	movs	r1, #88	; 0x58
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	4413      	add	r3, r2
 8004414:	3330      	adds	r3, #48	; 0x30
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	4a8a      	ldr	r2, [pc, #552]	; (8004648 <stabilizationInit+0x310>)
 8004420:	2158      	movs	r1, #88	; 0x58
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	3334      	adds	r3, #52	; 0x34
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	4a85      	ldr	r2, [pc, #532]	; (8004648 <stabilizationInit+0x310>)
 8004434:	2158      	movs	r1, #88	; 0x58
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3338      	adds	r3, #56	; 0x38
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	4a80      	ldr	r2, [pc, #512]	; (8004648 <stabilizationInit+0x310>)
 8004448:	2158      	movs	r1, #88	; 0x58
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	333c      	adds	r3, #60	; 0x3c
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	4a7b      	ldr	r2, [pc, #492]	; (8004648 <stabilizationInit+0x310>)
 800445c:	2158      	movs	r1, #88	; 0x58
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	3340      	adds	r3, #64	; 0x40
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	4a76      	ldr	r2, [pc, #472]	; (8004648 <stabilizationInit+0x310>)
 8004470:	2158      	movs	r1, #88	; 0x58
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3344      	adds	r3, #68	; 0x44
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	4a71      	ldr	r2, [pc, #452]	; (8004648 <stabilizationInit+0x310>)
 8004484:	2158      	movs	r1, #88	; 0x58
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	3348      	adds	r3, #72	; 0x48
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	4a6c      	ldr	r2, [pc, #432]	; (8004648 <stabilizationInit+0x310>)
 8004498:	2158      	movs	r1, #88	; 0x58
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	334c      	adds	r3, #76	; 0x4c
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	4a67      	ldr	r2, [pc, #412]	; (8004648 <stabilizationInit+0x310>)
 80044ac:	2158      	movs	r1, #88	; 0x58
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	3350      	adds	r3, #80	; 0x50
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	4a62      	ldr	r2, [pc, #392]	; (8004648 <stabilizationInit+0x310>)
 80044c0:	2158      	movs	r1, #88	; 0x58
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	3354      	adds	r3, #84	; 0x54
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 80044d0:	4b5e      	ldr	r3, [pc, #376]	; (800464c <stabilizationInit+0x314>)
 80044d2:	789b      	ldrb	r3, [r3, #2]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 8090 	bne.w	80045fa <stabilizationInit+0x2c2>
			rStabConstants[i].pJoyUnitCast = 1;
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	4a59      	ldr	r2, [pc, #356]	; (8004644 <stabilizationInit+0x30c>)
 80044de:	214c      	movs	r1, #76	; 0x4c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3304      	adds	r3, #4
 80044e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80044ec:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4a54      	ldr	r2, [pc, #336]	; (8004644 <stabilizationInit+0x30c>)
 80044f2:	214c      	movs	r1, #76	; 0x4c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	3308      	adds	r3, #8
 80044fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004500:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4a4f      	ldr	r2, [pc, #316]	; (8004644 <stabilizationInit+0x30c>)
 8004506:	214c      	movs	r1, #76	; 0x4c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	330c      	adds	r3, #12
 8004510:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004514:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	4a4a      	ldr	r2, [pc, #296]	; (8004644 <stabilizationInit+0x30c>)
 800451a:	214c      	movs	r1, #76	; 0x4c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	3318      	adds	r3, #24
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	4a45      	ldr	r2, [pc, #276]	; (8004644 <stabilizationInit+0x30c>)
 800452e:	214c      	movs	r1, #76	; 0x4c
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	331c      	adds	r3, #28
 8004538:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800453c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4a40      	ldr	r2, [pc, #256]	; (8004644 <stabilizationInit+0x30c>)
 8004542:	214c      	movs	r1, #76	; 0x4c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	3310      	adds	r3, #16
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4a3b      	ldr	r2, [pc, #236]	; (8004644 <stabilizationInit+0x30c>)
 8004556:	214c      	movs	r1, #76	; 0x4c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3314      	adds	r3, #20
 8004560:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004564:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	4a36      	ldr	r2, [pc, #216]	; (8004644 <stabilizationInit+0x30c>)
 800456a:	214c      	movs	r1, #76	; 0x4c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	3328      	adds	r3, #40	; 0x28
 8004574:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004578:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	4a31      	ldr	r2, [pc, #196]	; (8004644 <stabilizationInit+0x30c>)
 800457e:	214c      	movs	r1, #76	; 0x4c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	332c      	adds	r3, #44	; 0x2c
 8004588:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800458c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <stabilizationInit+0x30c>)
 8004592:	214c      	movs	r1, #76	; 0x4c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	3330      	adds	r3, #48	; 0x30
 800459c:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <stabilizationInit+0x318>)
 800459e:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	4a28      	ldr	r2, [pc, #160]	; (8004644 <stabilizationInit+0x30c>)
 80045a4:	214c      	movs	r1, #76	; 0x4c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3334      	adds	r3, #52	; 0x34
 80045ae:	4a29      	ldr	r2, [pc, #164]	; (8004654 <stabilizationInit+0x31c>)
 80045b0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	4a23      	ldr	r2, [pc, #140]	; (8004644 <stabilizationInit+0x30c>)
 80045b6:	214c      	movs	r1, #76	; 0x4c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	333c      	adds	r3, #60	; 0x3c
 80045c0:	4a25      	ldr	r2, [pc, #148]	; (8004658 <stabilizationInit+0x320>)
 80045c2:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <stabilizationInit+0x30c>)
 80045c8:	214c      	movs	r1, #76	; 0x4c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3338      	adds	r3, #56	; 0x38
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <stabilizationInit+0x324>)
 80045d4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <stabilizationInit+0x30c>)
 80045da:	214c      	movs	r1, #76	; 0x4c
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	3344      	adds	r3, #68	; 0x44
 80045e4:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <stabilizationInit+0x328>)
 80045e6:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <stabilizationInit+0x30c>)
 80045ec:	214c      	movs	r1, #76	; 0x4c
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	3348      	adds	r3, #72	; 0x48
 80045f6:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <stabilizationInit+0x32c>)
 80045f8:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	3301      	adds	r3, #1
 80045fe:	71fb      	strb	r3, [r7, #7]
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b05      	cmp	r3, #5
 8004604:	f67f ae9e 	bls.w	8004344 <stabilizationInit+0xc>
		}
	}

	/////////DEBUG!!!!////////////////////////////////////////////
	rStabConstants[STAB_YAW].enable = false;
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <stabilizationInit+0x30c>)
 800460a:	2200      	movs	r2, #0
 800460c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_ROLL].enable = false;
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <stabilizationInit+0x30c>)
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	rStabConstants[STAB_DEPTH].enable = false;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <stabilizationInit+0x30c>)
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
	rStabConstants[STAB_MARCH].enable = false;
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <stabilizationInit+0x30c>)
 8004620:	2200      	movs	r2, #0
 8004622:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rStabConstants[STAB_LAG].enable = false;
 8004626:	4b07      	ldr	r3, [pc, #28]	; (8004644 <stabilizationInit+0x30c>)
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rStabConstants[STAB_PITCH].enable = false;
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <stabilizationInit+0x30c>)
 8004630:	2200      	movs	r2, #0
 8004632:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
	//////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rMonitorInput.roll;
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <stabilizationInit+0x310>)
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <stabilizationInit+0x330>)
 800463a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 800463e:	4b02      	ldr	r3, [pc, #8]	; (8004648 <stabilizationInit+0x310>)
 8004640:	e014      	b.n	800466c <stabilizationInit+0x334>
 8004642:	bf00      	nop
 8004644:	20001eb0 	.word	0x20001eb0
 8004648:	20002078 	.word	0x20002078
 800464c:	20001d2c 	.word	0x20001d2c
 8004650:	c47a0000 	.word	0xc47a0000
 8004654:	447a0000 	.word	0x447a0000
 8004658:	459c4000 	.word	0x459c4000
 800465c:	c59c4000 	.word	0xc59c4000
 8004660:	46fa0000 	.word	0x46fa0000
 8004664:	c6fa0000 	.word	0xc6fa0000
 8004668:	20001e64 	.word	0x20001e64
 800466c:	4a96      	ldr	r2, [pc, #600]	; (80048c8 <stabilizationInit+0x590>)
 800466e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 8004672:	4b96      	ldr	r3, [pc, #600]	; (80048cc <stabilizationInit+0x594>)
 8004674:	4a96      	ldr	r2, [pc, #600]	; (80048d0 <stabilizationInit+0x598>)
 8004676:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 800467a:	4b96      	ldr	r3, [pc, #600]	; (80048d4 <stabilizationInit+0x59c>)
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rMonitorInput.pitch;
 8004682:	4b92      	ldr	r3, [pc, #584]	; (80048cc <stabilizationInit+0x594>)
 8004684:	4a94      	ldr	r2, [pc, #592]	; (80048d8 <stabilizationInit+0x5a0>)
 8004686:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 800468a:	4b90      	ldr	r3, [pc, #576]	; (80048cc <stabilizationInit+0x594>)
 800468c:	4a93      	ldr	r2, [pc, #588]	; (80048dc <stabilizationInit+0x5a4>)
 800468e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 8004692:	4b8e      	ldr	r3, [pc, #568]	; (80048cc <stabilizationInit+0x594>)
 8004694:	4a92      	ldr	r2, [pc, #584]	; (80048e0 <stabilizationInit+0x5a8>)
 8004696:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 800469a:	4b8e      	ldr	r3, [pc, #568]	; (80048d4 <stabilizationInit+0x59c>)
 800469c:	2201      	movs	r2, #1
 800469e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rMonitorInput.yaw;
 80046a2:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <stabilizationInit+0x594>)
 80046a4:	4a8f      	ldr	r2, [pc, #572]	; (80048e4 <stabilizationInit+0x5ac>)
 80046a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 80046aa:	4b88      	ldr	r3, [pc, #544]	; (80048cc <stabilizationInit+0x594>)
 80046ac:	4a8e      	ldr	r2, [pc, #568]	; (80048e8 <stabilizationInit+0x5b0>)
 80046ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 80046b2:	4b86      	ldr	r3, [pc, #536]	; (80048cc <stabilizationInit+0x594>)
 80046b4:	4a8d      	ldr	r2, [pc, #564]	; (80048ec <stabilizationInit+0x5b4>)
 80046b6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 80046ba:	4b86      	ldr	r3, [pc, #536]	; (80048d4 <stabilizationInit+0x59c>)
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rMonitorInput.depth;
 80046c2:	4b82      	ldr	r3, [pc, #520]	; (80048cc <stabilizationInit+0x594>)
 80046c4:	4a8a      	ldr	r2, [pc, #552]	; (80048f0 <stabilizationInit+0x5b8>)
 80046c6:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 80046c8:	4b80      	ldr	r3, [pc, #512]	; (80048cc <stabilizationInit+0x594>)
 80046ca:	4a8a      	ldr	r2, [pc, #552]	; (80048f4 <stabilizationInit+0x5bc>)
 80046cc:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 80046ce:	4b7f      	ldr	r3, [pc, #508]	; (80048cc <stabilizationInit+0x594>)
 80046d0:	4a89      	ldr	r2, [pc, #548]	; (80048f8 <stabilizationInit+0x5c0>)
 80046d2:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 80046d4:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <stabilizationInit+0x59c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rMonitorInput.lag;
 80046da:	4b7c      	ldr	r3, [pc, #496]	; (80048cc <stabilizationInit+0x594>)
 80046dc:	4a87      	ldr	r2, [pc, #540]	; (80048fc <stabilizationInit+0x5c4>)
 80046de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 80046e2:	4b7a      	ldr	r3, [pc, #488]	; (80048cc <stabilizationInit+0x594>)
 80046e4:	4a86      	ldr	r2, [pc, #536]	; (8004900 <stabilizationInit+0x5c8>)
 80046e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 80046ea:	4b78      	ldr	r3, [pc, #480]	; (80048cc <stabilizationInit+0x594>)
 80046ec:	4a85      	ldr	r2, [pc, #532]	; (8004904 <stabilizationInit+0x5cc>)
 80046ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 80046f2:	4b78      	ldr	r3, [pc, #480]	; (80048d4 <stabilizationInit+0x59c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rMonitorInput.march;
 80046fa:	4b74      	ldr	r3, [pc, #464]	; (80048cc <stabilizationInit+0x594>)
 80046fc:	4a82      	ldr	r2, [pc, #520]	; (8004908 <stabilizationInit+0x5d0>)
 80046fe:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8004700:	4b72      	ldr	r3, [pc, #456]	; (80048cc <stabilizationInit+0x594>)
 8004702:	4a82      	ldr	r2, [pc, #520]	; (800490c <stabilizationInit+0x5d4>)
 8004704:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 8004706:	4b71      	ldr	r3, [pc, #452]	; (80048cc <stabilizationInit+0x594>)
 8004708:	4a81      	ldr	r2, [pc, #516]	; (8004910 <stabilizationInit+0x5d8>)
 800470a:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 800470c:	4b71      	ldr	r3, [pc, #452]	; (80048d4 <stabilizationInit+0x59c>)
 800470e:	2200      	movs	r2, #0
 8004710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


    //upload coef

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 8004714:	4b6f      	ldr	r3, [pc, #444]	; (80048d4 <stabilizationInit+0x59c>)
 8004716:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800471a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 800471e:	4b6d      	ldr	r3, [pc, #436]	; (80048d4 <stabilizationInit+0x59c>)
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pErrGain = 1;
 8004728:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <stabilizationInit+0x59c>)
 800472a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800472e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 8004732:	4b68      	ldr	r3, [pc, #416]	; (80048d4 <stabilizationInit+0x59c>)
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 1;
 800473c:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <stabilizationInit+0x59c>)
 800473e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004742:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 8004746:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <stabilizationInit+0x59c>)
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 8004750:	4b60      	ldr	r3, [pc, #384]	; (80048d4 <stabilizationInit+0x59c>)
 8004752:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004756:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	rStabConstants[STAB_YAW].pid.pGain = 0.1;
 800475a:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <stabilizationInit+0x59c>)
 800475c:	4a6d      	ldr	r2, [pc, #436]	; (8004914 <stabilizationInit+0x5dc>)
 800475e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pid.iGain = 0;
 8004762:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <stabilizationInit+0x59c>)
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].pid.iMax = 90;
 800476c:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <stabilizationInit+0x59c>)
 800476e:	4a6a      	ldr	r2, [pc, #424]	; (8004918 <stabilizationInit+0x5e0>)
 8004770:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pid.iMin = -90;
 8004774:	4b57      	ldr	r3, [pc, #348]	; (80048d4 <stabilizationInit+0x59c>)
 8004776:	4a69      	ldr	r2, [pc, #420]	; (800491c <stabilizationInit+0x5e4>)
 8004778:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].pThrustersCast = 45;
 800477c:	4b55      	ldr	r3, [pc, #340]	; (80048d4 <stabilizationInit+0x59c>)
 800477e:	4a68      	ldr	r2, [pc, #416]	; (8004920 <stabilizationInit+0x5e8>)
 8004780:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	rStabConstants[STAB_YAW].pThrustersMax = 90;
 8004784:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <stabilizationInit+0x59c>)
 8004786:	4a64      	ldr	r2, [pc, #400]	; (8004918 <stabilizationInit+0x5e0>)
 8004788:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	rStabConstants[STAB_YAW].pThrustersMin = -90;
 800478c:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <stabilizationInit+0x59c>)
 800478e:	4a63      	ldr	r2, [pc, #396]	; (800491c <stabilizationInit+0x5e4>)
 8004790:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 8004794:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <stabilizationInit+0x59c>)
 8004796:	4a63      	ldr	r2, [pc, #396]	; (8004924 <stabilizationInit+0x5ec>)
 8004798:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 800479c:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <stabilizationInit+0x59c>)
 800479e:	4a62      	ldr	r2, [pc, #392]	; (8004928 <stabilizationInit+0x5f0>)
 80047a0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    rStabConstants[STAB_YAW].joyIntegration = false;
 80047a4:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <stabilizationInit+0x59c>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5

	//rStabConstants[STAB_DEPTH].enable = true;

	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 80047ac:	4b49      	ldr	r3, [pc, #292]	; (80048d4 <stabilizationInit+0x59c>)
 80047ae:	4a5f      	ldr	r2, [pc, #380]	; (800492c <stabilizationInit+0x5f4>)
 80047b0:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 80047b2:	4b48      	ldr	r3, [pc, #288]	; (80048d4 <stabilizationInit+0x59c>)
 80047b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047b8:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 80047ba:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <stabilizationInit+0x59c>)
 80047bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047c0:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 0;//0.02;
 80047c2:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <stabilizationInit+0x59c>)
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = 1;//25;
 80047ca:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <stabilizationInit+0x59c>)
 80047cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047d0:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 80047d2:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <stabilizationInit+0x59c>)
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = 1;
 80047da:	4b3e      	ldr	r3, [pc, #248]	; (80048d4 <stabilizationInit+0x59c>)
 80047dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047e0:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 1;
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <stabilizationInit+0x59c>)
 80047e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047e8:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 0;
 80047ea:	4b3a      	ldr	r3, [pc, #232]	; (80048d4 <stabilizationInit+0x59c>)
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 90;
 80047f2:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <stabilizationInit+0x59c>)
 80047f4:	4a48      	ldr	r2, [pc, #288]	; (8004918 <stabilizationInit+0x5e0>)
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -90;
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <stabilizationInit+0x59c>)
 80047fa:	4a48      	ldr	r2, [pc, #288]	; (800491c <stabilizationInit+0x5e4>)
 80047fc:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersCast = 0.3;
 80047fe:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <stabilizationInit+0x59c>)
 8004800:	4a4b      	ldr	r2, [pc, #300]	; (8004930 <stabilizationInit+0x5f8>)
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].pThrustersMax = 90;
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <stabilizationInit+0x59c>)
 8004806:	4a44      	ldr	r2, [pc, #272]	; (8004918 <stabilizationInit+0x5e0>)
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -90;
 800480a:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <stabilizationInit+0x59c>)
 800480c:	4a43      	ldr	r2, [pc, #268]	; (800491c <stabilizationInit+0x5e4>)
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 8004810:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <stabilizationInit+0x59c>)
 8004812:	4a44      	ldr	r2, [pc, #272]	; (8004924 <stabilizationInit+0x5ec>)
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 8004816:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <stabilizationInit+0x59c>)
 8004818:	4a43      	ldr	r2, [pc, #268]	; (8004928 <stabilizationInit+0x5f0>)
 800481a:	649a      	str	r2, [r3, #72]	; 0x48
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 800481c:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <stabilizationInit+0x59c>)
 800481e:	2200      	movs	r2, #0
 8004820:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_ROLL].pJoyUnitCast = 1;
 8004822:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <stabilizationInit+0x59c>)
 8004824:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004828:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	rStabConstants[STAB_ROLL].pSpeedDyn = 0;
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <stabilizationInit+0x59c>)
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	rStabConstants[STAB_ROLL].pErrGain = 1;
 8004836:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <stabilizationInit+0x59c>)
 8004838:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800483c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].T = 0;
 8004840:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <stabilizationInit+0x59c>)
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].K = 1;
 800484a:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <stabilizationInit+0x59c>)
 800484c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004850:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].T = 0;
 8004854:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <stabilizationInit+0x59c>)
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].K = 1;
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <stabilizationInit+0x59c>)
 8004860:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004864:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	rStabConstants[STAB_ROLL].pid.pGain = 0.1;
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <stabilizationInit+0x59c>)
 800486a:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <stabilizationInit+0x5dc>)
 800486c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	rStabConstants[STAB_ROLL].pid.iGain = 0;
 8004870:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <stabilizationInit+0x59c>)
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	rStabConstants[STAB_ROLL].pid.iMax = 50;
 800487a:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <stabilizationInit+0x59c>)
 800487c:	4a2d      	ldr	r2, [pc, #180]	; (8004934 <stabilizationInit+0x5fc>)
 800487e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	rStabConstants[STAB_ROLL].pid.iMin = -50;
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <stabilizationInit+0x59c>)
 8004884:	4a2c      	ldr	r2, [pc, #176]	; (8004938 <stabilizationInit+0x600>)
 8004886:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	rStabConstants[STAB_ROLL].pThrustersCast = 40;
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <stabilizationInit+0x59c>)
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <stabilizationInit+0x604>)
 800488e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_ROLL].pThrustersMax = 90;
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <stabilizationInit+0x59c>)
 8004894:	4a20      	ldr	r2, [pc, #128]	; (8004918 <stabilizationInit+0x5e0>)
 8004896:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_ROLL].pThrustersMin = -90;
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <stabilizationInit+0x59c>)
 800489c:	4a1f      	ldr	r2, [pc, #124]	; (800491c <stabilizationInit+0x5e4>)
 800489e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	rStabConstants[STAB_ROLL].sOutSummatorMax = 32000;
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <stabilizationInit+0x59c>)
 80048a4:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <stabilizationInit+0x5ec>)
 80048a6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_ROLL].sOutSummatorMin = -32000;
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <stabilizationInit+0x59c>)
 80048ac:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <stabilizationInit+0x5f0>)
 80048ae:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    rStabConstants[STAB_ROLL].joyIntegration = false;
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <stabilizationInit+0x59c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131


}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20001de4 	.word	0x20001de4
 80048cc:	20002078 	.word	0x20002078
 80048d0:	20001dc8 	.word	0x20001dc8
 80048d4:	20001eb0 	.word	0x20001eb0
 80048d8:	20001e68 	.word	0x20001e68
 80048dc:	20001de8 	.word	0x20001de8
 80048e0:	20001dcc 	.word	0x20001dcc
 80048e4:	20001e6c 	.word	0x20001e6c
 80048e8:	20001dec 	.word	0x20001dec
 80048ec:	20001dd0 	.word	0x20001dd0
 80048f0:	20001e60 	.word	0x20001e60
 80048f4:	20001e30 	.word	0x20001e30
 80048f8:	20001e24 	.word	0x20001e24
 80048fc:	20001e5c 	.word	0x20001e5c
 8004900:	20002138 	.word	0x20002138
 8004904:	20001d34 	.word	0x20001d34
 8004908:	20001e58 	.word	0x20001e58
 800490c:	200020e0 	.word	0x200020e0
 8004910:	20001e40 	.word	0x20001e40
 8004914:	3dcccccd 	.word	0x3dcccccd
 8004918:	42b40000 	.word	0x42b40000
 800491c:	c2b40000 	.word	0xc2b40000
 8004920:	42340000 	.word	0x42340000
 8004924:	46fa0000 	.word	0x46fa0000
 8004928:	c6fa0000 	.word	0xc6fa0000
 800492c:	bf800000 	.word	0xbf800000
 8004930:	3e99999a 	.word	0x3e99999a
 8004934:	42480000 	.word	0x42480000
 8004938:	c2480000 	.word	0xc2480000
 800493c:	42200000 	.word	0x42200000

08004940 <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	4a6f      	ldr	r2, [pc, #444]	; (8004b0c <stabilizationStart+0x1cc>)
 800494e:	214c      	movs	r1, #76	; 0x4c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	4a6c      	ldr	r2, [pc, #432]	; (8004b10 <stabilizationStart+0x1d0>)
 800495e:	2158      	movs	r1, #88	; 0x58
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	4968      	ldr	r1, [pc, #416]	; (8004b10 <stabilizationStart+0x1d0>)
 8004970:	2058      	movs	r0, #88	; 0x58
 8004972:	fb00 f303 	mul.w	r3, r0, r3
 8004976:	440b      	add	r3, r1
 8004978:	3314      	adds	r3, #20
 800497a:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	4a64      	ldr	r2, [pc, #400]	; (8004b10 <stabilizationStart+0x1d0>)
 8004980:	2158      	movs	r1, #88	; 0x58
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	3308      	adds	r3, #8
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	495f      	ldr	r1, [pc, #380]	; (8004b10 <stabilizationStart+0x1d0>)
 8004992:	2058      	movs	r0, #88	; 0x58
 8004994:	fb00 f303 	mul.w	r3, r0, r3
 8004998:	440b      	add	r3, r1
 800499a:	3318      	adds	r3, #24
 800499c:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	4a5b      	ldr	r2, [pc, #364]	; (8004b10 <stabilizationStart+0x1d0>)
 80049a2:	2158      	movs	r1, #88	; 0x58
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3310      	adds	r3, #16
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d103      	bne.n	80049c0 <stabilizationStart+0x80>
{
	rSensors.yaw =0;
 80049b8:	4b56      	ldr	r3, [pc, #344]	; (8004b14 <stabilizationStart+0x1d4>)
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	4a53      	ldr	r2, [pc, #332]	; (8004b10 <stabilizationStart+0x1d0>)
 80049c4:	2158      	movs	r1, #88	; 0x58
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	331c      	adds	r3, #28
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <stabilizationStart+0x1d0>)
 80049d8:	2158      	movs	r1, #88	; 0x58
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	3308      	adds	r3, #8
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	4949      	ldr	r1, [pc, #292]	; (8004b10 <stabilizationStart+0x1d0>)
 80049ea:	2058      	movs	r0, #88	; 0x58
 80049ec:	fb00 f303 	mul.w	r3, r0, r3
 80049f0:	440b      	add	r3, r1
 80049f2:	3320      	adds	r3, #32
 80049f4:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	4a45      	ldr	r2, [pc, #276]	; (8004b10 <stabilizationStart+0x1d0>)
 80049fa:	2158      	movs	r1, #88	; 0x58
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	4a40      	ldr	r2, [pc, #256]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a0e:	2158      	movs	r1, #88	; 0x58
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3328      	adds	r3, #40	; 0x28
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	4a3b      	ldr	r2, [pc, #236]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a22:	2158      	movs	r1, #88	; 0x58
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	332c      	adds	r3, #44	; 0x2c
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4a36      	ldr	r2, [pc, #216]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a36:	2158      	movs	r1, #88	; 0x58
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3330      	adds	r3, #48	; 0x30
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a4a:	2158      	movs	r1, #88	; 0x58
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3334      	adds	r3, #52	; 0x34
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a5e:	2158      	movs	r1, #88	; 0x58
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	3338      	adds	r3, #56	; 0x38
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a72:	2158      	movs	r1, #88	; 0x58
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	333c      	adds	r3, #60	; 0x3c
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a86:	2158      	movs	r1, #88	; 0x58
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3340      	adds	r3, #64	; 0x40
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	4a1d      	ldr	r2, [pc, #116]	; (8004b10 <stabilizationStart+0x1d0>)
 8004a9a:	2158      	movs	r1, #88	; 0x58
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3344      	adds	r3, #68	; 0x44
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <stabilizationStart+0x1d0>)
 8004aae:	2158      	movs	r1, #88	; 0x58
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3348      	adds	r3, #72	; 0x48
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <stabilizationStart+0x1d0>)
 8004ac2:	2158      	movs	r1, #88	; 0x58
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	334c      	adds	r3, #76	; 0x4c
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <stabilizationStart+0x1d0>)
 8004ad6:	2158      	movs	r1, #88	; 0x58
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	3350      	adds	r3, #80	; 0x50
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8004ae6:	f009 fbdd 	bl	800e2a4 <xTaskGetTickCount>
 8004aea:	ee07 0a90 	vmov	s15, r0
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af4:	4a06      	ldr	r2, [pc, #24]	; (8004b10 <stabilizationStart+0x1d0>)
 8004af6:	2158      	movs	r1, #88	; 0x58
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3354      	adds	r3, #84	; 0x54
 8004b00:	edc3 7a00 	vstr	s15, [r3]
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20001eb0 	.word	0x20001eb0
 8004b10:	20002078 	.word	0x20002078
 8004b14:	20001dc8 	.word	0x20001dc8

08004b18 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8004b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	4603      	mov	r3, r0
 8004b22:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	224c      	movs	r2, #76	; 0x4c
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	4ac7      	ldr	r2, [pc, #796]	; (8004e4c <stabilizationUpdate+0x334>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2258      	movs	r2, #88	; 0x58
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	4ac5      	ldr	r2, [pc, #788]	; (8004e50 <stabilizationUpdate+0x338>)
 8004b3c:	4413      	add	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004b40:	f009 fbb0 	bl	800e2a4 <xTaskGetTickCount>
 8004b44:	ee07 0a90 	vmov	s15, r0
 8004b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5a:	ee17 0a90 	vmov	r0, s15
 8004b5e:	f7fc fa29 	bl	8000fb4 <fromTickToMs>
 8004b62:	eeb0 7a40 	vmov.f32	s14, s0
 8004b66:	eddf 6abb 	vldr	s13, [pc, #748]	; 8004e54 <stabilizationUpdate+0x33c>
 8004b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b6e:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004b72:	f009 fb97 	bl	800e2a4 <xTaskGetTickCount>
 8004b76:	ee07 0a90 	vmov	s15, r0
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3318      	adds	r3, #24
 8004b88:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	edd3 7a00 	vldr	s15, [r3]
 8004b90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d02b      	beq.n	8004bf2 <stabilizationUpdate+0xda>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	edd3 6a00 	vldr	s13, [r3]
 8004ba6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004baa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004bae:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004e64 <stabilizationUpdate+0x34c>
 8004bb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004bb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	ed93 6a00 	vldr	s12, [r3]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bcc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004bd0:	ed9f 6aa1 	vldr	s12, [pc, #644]	; 8004e58 <stabilizationUpdate+0x340>
 8004bd4:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	edd3 7a05 	vldr	s15, [r3, #20]
 8004bde:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004bf0:	e01f      	b.n	8004c32 <stabilizationUpdate+0x11a>
	}
	else {
		if(contour==STAB_PITCH)
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d110      	bne.n	8004c1a <stabilizationUpdate+0x102>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	ed93 7a00 	vldr	s14, [r3]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004e5c <stabilizationUpdate+0x344>
 8004c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004c18:	e00b      	b.n	8004c32 <stabilizationUpdate+0x11a>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K;//*10;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	ed93 7a00 	vldr	s14, [r3]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	edd3 7a00 	vldr	s15, [r3]
 8004c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4e:	d061      	beq.n	8004d14 <stabilizationUpdate+0x1fc>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fb fc1f 	bl	8000498 <__aeabi_f2d>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	460d      	mov	r5, r1
 8004c5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c62:	eeb1 7a67 	vneg.f32	s14, s15
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c70:	ee16 0a90 	vmov	r0, s13
 8004c74:	f7fb fc10 	bl	8000498 <__aeabi_f2d>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	ec43 2b10 	vmov	d0, r2, r3
 8004c80:	f00b fad6 	bl	8010230 <exp>
 8004c84:	ec53 2b10 	vmov	r2, r3, d0
 8004c88:	4620      	mov	r0, r4
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	f7fb fc5c 	bl	8000548 <__aeabi_dmul>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4690      	mov	r8, r2
 8004c96:	4699      	mov	r9, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	ed93 7a06 	vldr	s14, [r3, #24]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca8:	ee17 0a90 	vmov	r0, s15
 8004cac:	f7fb fbf4 	bl	8000498 <__aeabi_f2d>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb8:	eeb1 7a67 	vneg.f32	s14, s15
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cc6:	ee16 0a90 	vmov	r0, s13
 8004cca:	f7fb fbe5 	bl	8000498 <__aeabi_f2d>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	ec43 2b10 	vmov	d0, r2, r3
 8004cd6:	f00b faab 	bl	8010230 <exp>
 8004cda:	ec53 2b10 	vmov	r2, r3, d0
 8004cde:	f04f 0000 	mov.w	r0, #0
 8004ce2:	495f      	ldr	r1, [pc, #380]	; (8004e60 <stabilizationUpdate+0x348>)
 8004ce4:	f7fb fa78 	bl	80001d8 <__aeabi_dsub>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4620      	mov	r0, r4
 8004cee:	4629      	mov	r1, r5
 8004cf0:	f7fb fc2a 	bl	8000548 <__aeabi_dmul>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	f7fb fa6e 	bl	80001dc <__adddf3>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	f7fb fee0 	bl	8000acc <__aeabi_d2f>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
 8004d12:	e00b      	b.n	8004d2c <stabilizationUpdate+0x214>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	ed93 7a00 	vldr	s14, [r3]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	edd3 6a00 	vldr	s13, [r3]
 8004d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004d62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004d66:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00f      	beq.n	8004dbc <stabilizationUpdate+0x2a4>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	edd3 6a07 	vldr	s13, [r3, #28]
 8004da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	edc3 7a08 	vstr	s15, [r3, #32]
 8004dba:	e003      	b.n	8004dc4 <stabilizationUpdate+0x2ac>
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	ed93 7a08 	vldr	s14, [r3, #32]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004e24:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004e64 <stabilizationUpdate+0x34c>
 8004e28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e34:	dd18      	ble.n	8004e68 <stabilizationUpdate+0x350>
    	state->pid_iValue = constants->pid.iMax*100;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004e3c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004e64 <stabilizationUpdate+0x34c>
 8004e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004e4a:	e026      	b.n	8004e9a <stabilizationUpdate+0x382>
 8004e4c:	20001eb0 	.word	0x20001eb0
 8004e50:	20002078 	.word	0x20002078
 8004e54:	447a0000 	.word	0x447a0000
 8004e58:	428c0000 	.word	0x428c0000
 8004e5c:	437a0000 	.word	0x437a0000
 8004e60:	3ff00000 	.word	0x3ff00000
 8004e64:	42c80000 	.word	0x42c80000
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e74:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8004e64 <stabilizationUpdate+0x34c>
 8004e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e84:	d509      	bpl.n	8004e9a <stabilizationUpdate+0x382>
    	state->pid_iValue = constants->pid.iMin*100;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e8c:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8004e64 <stabilizationUpdate+0x34c>
 8004e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	edd3 6a00 	vldr	s13, [r3]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3320      	adds	r3, #32
 8004ef6:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	edd3 7a00 	vldr	s15, [r3]
 8004efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	d061      	beq.n	8004fcc <stabilizationUpdate+0x4b4>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb fac3 	bl	8000498 <__aeabi_f2d>
 8004f12:	4604      	mov	r4, r0
 8004f14:	460d      	mov	r5, r1
 8004f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f1a:	eeb1 7a67 	vneg.f32	s14, s15
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	edd3 7a00 	vldr	s15, [r3]
 8004f24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f28:	ee16 0a90 	vmov	r0, s13
 8004f2c:	f7fb fab4 	bl	8000498 <__aeabi_f2d>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	ec43 2b10 	vmov	d0, r2, r3
 8004f38:	f00b f97a 	bl	8010230 <exp>
 8004f3c:	ec53 2b10 	vmov	r2, r3, d0
 8004f40:	4620      	mov	r0, r4
 8004f42:	4629      	mov	r1, r5
 8004f44:	f7fb fb00 	bl	8000548 <__aeabi_dmul>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4690      	mov	r8, r2
 8004f4e:	4699      	mov	r9, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f60:	ee17 0a90 	vmov	r0, s15
 8004f64:	f7fb fa98 	bl	8000498 <__aeabi_f2d>
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f70:	eeb1 7a67 	vneg.f32	s14, s15
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	edd3 7a00 	vldr	s15, [r3]
 8004f7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f7e:	ee16 0a90 	vmov	r0, s13
 8004f82:	f7fb fa89 	bl	8000498 <__aeabi_f2d>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	ec43 2b10 	vmov	d0, r2, r3
 8004f8e:	f00b f94f 	bl	8010230 <exp>
 8004f92:	ec53 2b10 	vmov	r2, r3, d0
 8004f96:	f04f 0000 	mov.w	r0, #0
 8004f9a:	492d      	ldr	r1, [pc, #180]	; (8005050 <stabilizationUpdate+0x538>)
 8004f9c:	f7fb f91c 	bl	80001d8 <__aeabi_dsub>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7fb face 	bl	8000548 <__aeabi_dmul>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb f912 	bl	80001dc <__adddf3>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f7fb fd84 	bl	8000acc <__aeabi_d2f>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fca:	e00a      	b.n	8004fe2 <stabilizationUpdate+0x4ca>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	649a      	str	r2, [r3, #72]	; 0x48

    state->thrustersFiltered = constants->pThrustersCast*state->speedError;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

    if(state->thrustersFiltered > constants->pThrustersMax) {
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800500c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	dd04      	ble.n	8005020 <stabilizationUpdate+0x508>
    	state->thrustersFiltered = constants->pThrustersMax;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	64da      	str	r2, [r3, #76]	; 0x4c
 800501e:	e00e      	b.n	800503e <stabilizationUpdate+0x526>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800502c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005034:	d503      	bpl.n	800503e <stabilizationUpdate+0x526>
    	state->thrustersFiltered = constants->pThrustersMin;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = state->thrustersFiltered;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005046:	bf00      	nop
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005050:	3ff00000 	.word	0x3ff00000

08005054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_MspInit+0x4c>)
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <HAL_MspInit+0x4c>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6193      	str	r3, [r2, #24]
 8005066:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <HAL_MspInit+0x4c>)
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_MspInit+0x4c>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <HAL_MspInit+0x4c>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507c:	61d3      	str	r3, [r2, #28]
 800507e:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <HAL_MspInit+0x4c>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800508a:	2200      	movs	r2, #0
 800508c:	210f      	movs	r1, #15
 800508e:	f06f 0001 	mvn.w	r0, #1
 8005092:	f000 fef5 	bl	8005e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000

080050a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	; 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80050b4:	4b2e      	ldr	r3, [pc, #184]	; (8005170 <HAL_InitTick+0xcc>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	4a2d      	ldr	r2, [pc, #180]	; (8005170 <HAL_InitTick+0xcc>)
 80050ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050be:	6193      	str	r3, [r2, #24]
 80050c0:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <HAL_InitTick+0xcc>)
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80050cc:	f107 020c 	add.w	r2, r7, #12
 80050d0:	f107 0310 	add.w	r3, r7, #16
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f005 f86a 	bl	800a1b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80050dc:	f005 f846 	bl	800a16c <HAL_RCC_GetPCLK2Freq>
 80050e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <HAL_InitTick+0xd0>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	0c9b      	lsrs	r3, r3, #18
 80050ec:	3b01      	subs	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80050f0:	4b21      	ldr	r3, [pc, #132]	; (8005178 <HAL_InitTick+0xd4>)
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <HAL_InitTick+0xd8>)
 80050f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_InitTick+0xd4>)
 80050f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <HAL_InitTick+0xd4>)
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005104:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <HAL_InitTick+0xd4>)
 8005106:	2200      	movs	r2, #0
 8005108:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800510a:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <HAL_InitTick+0xd4>)
 800510c:	2200      	movs	r2, #0
 800510e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_InitTick+0xd4>)
 8005112:	2200      	movs	r2, #0
 8005114:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005116:	4818      	ldr	r0, [pc, #96]	; (8005178 <HAL_InitTick+0xd4>)
 8005118:	f005 fa2c 	bl	800a574 <HAL_TIM_Base_Init>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11b      	bne.n	8005162 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800512a:	4813      	ldr	r0, [pc, #76]	; (8005178 <HAL_InitTick+0xd4>)
 800512c:	f005 fa7a 	bl	800a624 <HAL_TIM_Base_Start_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800513a:	2b00      	cmp	r3, #0
 800513c:	d111      	bne.n	8005162 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800513e:	2019      	movs	r0, #25
 8005140:	f000 feba 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d808      	bhi.n	800515c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800514a:	2200      	movs	r2, #0
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	2019      	movs	r0, #25
 8005150:	f000 fe96 	bl	8005e80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005154:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <HAL_InitTick+0xdc>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e002      	b.n	8005162 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005166:	4618      	mov	r0, r3
 8005168:	3730      	adds	r7, #48	; 0x30
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	431bde83 	.word	0x431bde83
 8005178:	200025dc 	.word	0x200025dc
 800517c:	40012c00 	.word	0x40012c00
 8005180:	200000b4 	.word	0x200000b4

08005184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005188:	e7fe      	b.n	8005188 <NMI_Handler+0x4>

0800518a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800518a:	b480      	push	{r7}
 800518c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800518e:	e7fe      	b.n	800518e <HardFault_Handler+0x4>

08005190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005194:	e7fe      	b.n	8005194 <MemManage_Handler+0x4>

08005196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800519a:	e7fe      	b.n	800519a <BusFault_Handler+0x4>

0800519c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051a0:	e7fe      	b.n	80051a0 <UsageFault_Handler+0x4>

080051a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <DMA1_Channel4_IRQHandler+0x10>)
 80051b6:	f000 ffaa 	bl	800610e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20002898 	.word	0x20002898

080051c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80051c8:	4802      	ldr	r0, [pc, #8]	; (80051d4 <DMA1_Channel5_IRQHandler+0x10>)
 80051ca:	f000 ffa0 	bl	800610e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200028dc 	.word	0x200028dc

080051d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80051dc:	4802      	ldr	r0, [pc, #8]	; (80051e8 <DMA1_Channel6_IRQHandler+0x10>)
 80051de:	f000 ff96 	bl	800610e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20002920 	.word	0x20002920

080051ec <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80051f0:	4802      	ldr	r0, [pc, #8]	; (80051fc <DMA1_Channel7_IRQHandler+0x10>)
 80051f2:	f000 ff8c 	bl	800610e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20002964 	.word	0x20002964

08005200 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005204:	4802      	ldr	r0, [pc, #8]	; (8005210 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005206:	f005 fa77 	bl	800a6f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	200025dc 	.word	0x200025dc

08005214 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005218:	4802      	ldr	r0, [pc, #8]	; (8005224 <I2C1_EV_IRQHandler+0x10>)
 800521a:	f001 ff71 	bl	8007100 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200023e8 	.word	0x200023e8

08005228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <USART1_IRQHandler+0x10>)
 800522e:	f005 ffc9 	bl	800b1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20002700 	.word	0x20002700

0800523c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005240:	4802      	ldr	r0, [pc, #8]	; (800524c <USART2_IRQHandler+0x10>)
 8005242:	f005 ffbf 	bl	800b1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20002788 	.word	0x20002788

08005250 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005254:	4802      	ldr	r0, [pc, #8]	; (8005260 <USART3_IRQHandler+0x10>)
 8005256:	f005 ffb5 	bl	800b1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20002810 	.word	0x20002810

08005264 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005268:	4802      	ldr	r0, [pc, #8]	; (8005274 <UART4_IRQHandler+0x10>)
 800526a:	f005 ffab 	bl	800b1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20002678 	.word	0x20002678

08005278 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <SystemInit+0x20>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	4a05      	ldr	r2, [pc, #20]	; (8005298 <SystemInit+0x20>)
 8005284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <thrustersInit>:
    {0.0, 0.0, 1.0, 0.0, -1.0},
    {-1.0, -1.0, 0.0, 1.0, 0.0}
};

void thrustersInit()
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
  rThrusters[FDR].address = 1; //Forward Left
 80052a2:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <thrustersInit+0xb8>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <thrustersInit+0xb8>)
 80052aa:	2202      	movs	r2, #2
 80052ac:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <thrustersInit+0xb8>)
 80052b0:	2203      	movs	r2, #3
 80052b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 80052b6:	4b27      	ldr	r3, [pc, #156]	; (8005354 <thrustersInit+0xb8>)
 80052b8:	2204      	movs	r2, #4
 80052ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 80052be:	4b25      	ldr	r3, [pc, #148]	; (8005354 <thrustersInit+0xb8>)
 80052c0:	2205      	movs	r2, #5
 80052c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 80052c6:	4b23      	ldr	r3, [pc, #140]	; (8005354 <thrustersInit+0xb8>)
 80052c8:	2206      	movs	r2, #6
 80052ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
//  rThrusters[BUR].address = 7; //Back Up Right
//  rThrusters[BUL].address = 8; //Back Up Left

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80052ce:	2300      	movs	r3, #0
 80052d0:	71fb      	strb	r3, [r7, #7]
 80052d2:	e034      	b.n	800533e <thrustersInit+0xa2>
    rThrusters[i].desiredSpeed = 0;
 80052d4:	79fa      	ldrb	r2, [r7, #7]
 80052d6:	491f      	ldr	r1, [pc, #124]	; (8005354 <thrustersInit+0xb8>)
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3302      	adds	r3, #2
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 80052e8:	79fa      	ldrb	r2, [r7, #7]
 80052ea:	491a      	ldr	r1, [pc, #104]	; (8005354 <thrustersInit+0xb8>)
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	440b      	add	r3, r1
 80052f6:	330c      	adds	r3, #12
 80052f8:	4a17      	ldr	r2, [pc, #92]	; (8005358 <thrustersInit+0xbc>)
 80052fa:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 80052fc:	79fa      	ldrb	r2, [r7, #7]
 80052fe:	4915      	ldr	r1, [pc, #84]	; (8005354 <thrustersInit+0xb8>)
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	440b      	add	r3, r1
 800530a:	3310      	adds	r3, #16
 800530c:	4a12      	ldr	r2, [pc, #72]	; (8005358 <thrustersInit+0xbc>)
 800530e:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 8005310:	79fa      	ldrb	r2, [r7, #7]
 8005312:	4910      	ldr	r1, [pc, #64]	; (8005354 <thrustersInit+0xb8>)
 8005314:	4613      	mov	r3, r2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4413      	add	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	440b      	add	r3, r1
 800531e:	3314      	adds	r3, #20
 8005320:	227f      	movs	r2, #127	; 0x7f
 8005322:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 8005324:	79fa      	ldrb	r2, [r7, #7]
 8005326:	490b      	ldr	r1, [pc, #44]	; (8005354 <thrustersInit+0xb8>)
 8005328:	4613      	mov	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4413      	add	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	440b      	add	r3, r1
 8005332:	3315      	adds	r3, #21
 8005334:	227f      	movs	r2, #127	; 0x7f
 8005336:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	3301      	adds	r3, #1
 800533c:	71fb      	strb	r3, [r7, #7]
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	2b05      	cmp	r3, #5
 8005342:	d9c7      	bls.n	80052d4 <thrustersInit+0x38>
  }

}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20001d38 	.word	0x20001d38
 8005358:	3f333333 	.word	0x3f333333

0800535c <fillThrustersRequest>:
  }

}

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8005368:	23aa      	movs	r3, #170	; 0xaa
 800536a:	723b      	strb	r3, [r7, #8]
    res.type = 0x01;
 800536c:	2301      	movs	r3, #1
 800536e:	727b      	strb	r3, [r7, #9]
    res.address = 0xAF;
 8005370:	23af      	movs	r3, #175	; 0xaf
 8005372:	72bb      	strb	r3, [r7, #10]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e012      	b.n	80053a0 <fillThrustersRequest+0x44>
//    	}
//    	else if(velocity < 0) {
//    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
//    	}

    	res.velocity[i] = rThrusters[i].desiredSpeed;
 800537a:	4916      	ldr	r1, [pc, #88]	; (80053d4 <fillThrustersRequest+0x78>)
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	3302      	adds	r3, #2
 800538a:	f993 1000 	ldrsb.w	r1, [r3]
 800538e:	f107 020b 	add.w	r2, r7, #11
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	460a      	mov	r2, r1
 8005398:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	3301      	adds	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	dde9      	ble.n	800537a <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <fillThrustersRequest+0x7c>)
 80053a8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80053ac:	747b      	strb	r3, [r7, #17]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	cb03      	ldmia	r3!, {r0, r1}
 80053b8:	6010      	str	r0, [r2, #0]
 80053ba:	6051      	str	r1, [r2, #4]
 80053bc:	8819      	ldrh	r1, [r3, #0]
 80053be:	789b      	ldrb	r3, [r3, #2]
 80053c0:	8111      	strh	r1, [r2, #8]
 80053c2:	7293      	strb	r3, [r2, #10]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 80053c4:	210b      	movs	r1, #11
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fc fb4a 	bl	8001a60 <AddChecksumm8bVma>
}
 80053cc:	bf00      	nop
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20001d38 	.word	0x20001d38
 80053d8:	20001e70 	.word	0x20001e70

080053dc <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 80053e8:	2109      	movs	r1, #9
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc fb0b 	bl	8001a06 <IsChecksumm8bCorrectVma>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01f      	beq.n	8005436 <fillThrustersResponse+0x5a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01b      	beq.n	8005436 <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	f107 030c 	add.w	r3, r7, #12
 8005404:	6810      	ldr	r0, [r2, #0]
 8005406:	6851      	ldr	r1, [r2, #4]
 8005408:	c303      	stmia	r3!, {r0, r1}
 800540a:	7a12      	ldrb	r2, [r2, #8]
 800540c:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	8a38      	ldrh	r0, [r7, #16]
 8005412:	490e      	ldr	r1, [pc, #56]	; (800544c <fillThrustersResponse+0x70>)
 8005414:	4613      	mov	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	440b      	add	r3, r1
 800541e:	3304      	adds	r3, #4
 8005420:	4602      	mov	r2, r0
 8005422:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <fillThrustersResponse+0x74>)
 8005426:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800542a:	3301      	adds	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <fillThrustersResponse+0x74>)
 8005430:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8005434:	e005      	b.n	8005442 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <fillThrustersResponse+0x74>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	3301      	adds	r3, #1
 800543c:	4a04      	ldr	r2, [pc, #16]	; (8005450 <fillThrustersResponse+0x74>)
 800543e:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20001d38 	.word	0x20001d38
 8005450:	2000018c 	.word	0x2000018c

08005454 <formThrustVectors>:

void formThrustVectors()
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b08f      	sub	sp, #60	; 0x3c
 8005458:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800545a:	2300      	movs	r3, #0
 800545c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005460:	e00d      	b.n	800547e <formThrustVectors+0x2a>
    velocity[i] = 0;
 8005462:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	3338      	adds	r3, #56	; 0x38
 800546a:	443b      	add	r3, r7
 800546c:	3b1c      	subs	r3, #28
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005478:	3301      	adds	r3, #1
 800547a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800547e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005482:	2b05      	cmp	r3, #5
 8005484:	d9ed      	bls.n	8005462 <formThrustVectors+0xe>
//  Uz = rStabState[STAB_DEPTH].outputSignal;
//  Upsi = rStabState[STAB_YAW].outputSignal;
//  Ugamma = rStabState[STAB_ROLL].outputSignal;
//  Uteta = rJoySpeed.pitch;

  U[STAB_MARCH] = rJoySpeed.march;
 8005486:	4b67      	ldr	r3, [pc, #412]	; (8005624 <formThrustVectors+0x1d0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60bb      	str	r3, [r7, #8]
  U[STAB_LAG] = rJoySpeed.lag;
 800548c:	4b65      	ldr	r3, [pc, #404]	; (8005624 <formThrustVectors+0x1d0>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  U[STAB_DEPTH] = rJoySpeed.depth;
 8005492:	4b64      	ldr	r3, [pc, #400]	; (8005624 <formThrustVectors+0x1d0>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	607b      	str	r3, [r7, #4]
  U[STAB_YAW] = rJoySpeed.yaw;
 8005498:	4b62      	ldr	r3, [pc, #392]	; (8005624 <formThrustVectors+0x1d0>)
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	613b      	str	r3, [r7, #16]
  U[STAB_ROLL] = rJoySpeed.roll;
 800549e:	4b61      	ldr	r3, [pc, #388]	; (8005624 <formThrustVectors+0x1d0>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	617b      	str	r3, [r7, #20]
  U[STAB_PITCH] = rJoySpeed.pitch;
 80054a4:	4b5f      	ldr	r3, [pc, #380]	; (8005624 <formThrustVectors+0x1d0>)
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	61bb      	str	r3, [r7, #24]

  for(uint8_t i = 0; i < 6; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80054b0:	e01e      	b.n	80054f0 <formThrustVectors+0x9c>
  {
	if(rStabConstants[i].enable)
 80054b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80054b6:	4a5c      	ldr	r2, [pc, #368]	; (8005628 <formThrustVectors+0x1d4>)
 80054b8:	214c      	movs	r1, #76	; 0x4c
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	4413      	add	r3, r2
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00f      	beq.n	80054e6 <formThrustVectors+0x92>
		U[i] = rStabState[i].outputSignal;
 80054c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80054ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80054ce:	4957      	ldr	r1, [pc, #348]	; (800562c <formThrustVectors+0x1d8>)
 80054d0:	2058      	movs	r0, #88	; 0x58
 80054d2:	fb00 f202 	mul.w	r2, r0, r2
 80054d6:	440a      	add	r2, r1
 80054d8:	3250      	adds	r2, #80	; 0x50
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	3338      	adds	r3, #56	; 0x38
 80054e0:	443b      	add	r3, r7
 80054e2:	3b34      	subs	r3, #52	; 0x34
 80054e4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < 6; i++)
 80054e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80054ea:	3301      	adds	r3, #1
 80054ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80054f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d9dc      	bls.n	80054b2 <formThrustVectors+0x5e>
  }

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80054fe:	e087      	b.n	8005610 <formThrustVectors+0x1bc>
  {
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 8005500:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005504:	494a      	ldr	r1, [pc, #296]	; (8005630 <formThrustVectors+0x1dc>)
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	ed93 7a00 	vldr	s14, [r3]
 8005514:	edd7 7a02 	vldr	s15, [r7, #8]
 8005518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800551c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005520:	4943      	ldr	r1, [pc, #268]	; (8005630 <formThrustVectors+0x1dc>)
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	3304      	adds	r3, #4
 800552e:	edd3 6a00 	vldr	s13, [r3]
 8005532:	edd7 7a03 	vldr	s15, [r7, #12]
 8005536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800553a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800553e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005542:	493b      	ldr	r1, [pc, #236]	; (8005630 <formThrustVectors+0x1dc>)
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	3308      	adds	r3, #8
 8005550:	edd3 6a00 	vldr	s13, [r3]
 8005554:	edd7 7a01 	vldr	s15, [r7, #4]
 8005558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800555c:	ee37 7a27 	vadd.f32	s14, s14, s15
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 8005560:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005564:	4932      	ldr	r1, [pc, #200]	; (8005630 <formThrustVectors+0x1dc>)
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	330c      	adds	r3, #12
 8005572:	edd3 6a00 	vldr	s13, [r3]
 8005576:	edd7 7a04 	vldr	s15, [r7, #16]
 800557a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800557e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005582:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005586:	492a      	ldr	r1, [pc, #168]	; (8005630 <formThrustVectors+0x1dc>)
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	3310      	adds	r3, #16
 8005594:	edd3 6a00 	vldr	s13, [r3]
 8005598:	edd7 7a05 	vldr	s15, [r7, #20]
 800559c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 80055a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 80055a4:	ee77 7a27 	vadd.f32	s15, s14, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	3338      	adds	r3, #56	; 0x38
 80055ac:	443b      	add	r3, r7
 80055ae:	3b1c      	subs	r3, #28
 80055b0:	edc3 7a00 	vstr	s15, [r3]
    if(!thruster_init)
 80055b4:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <formThrustVectors+0x1e0>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d119      	bne.n	80055f0 <formThrustVectors+0x19c>
    {
    	rThrusters[i].desiredSpeed = resizeFloatToInt8(velocity[i]);
 80055bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	3338      	adds	r3, #56	; 0x38
 80055c4:	443b      	add	r3, r7
 80055c6:	3b1c      	subs	r3, #28
 80055c8:	edd3 7a00 	vldr	s15, [r3]
 80055cc:	f897 4035 	ldrb.w	r4, [r7, #53]	; 0x35
 80055d0:	eeb0 0a67 	vmov.f32	s0, s15
 80055d4:	f000 f832 	bl	800563c <resizeFloatToInt8>
 80055d8:	4603      	mov	r3, r0
 80055da:	4619      	mov	r1, r3
 80055dc:	4a16      	ldr	r2, [pc, #88]	; (8005638 <formThrustVectors+0x1e4>)
 80055de:	4623      	mov	r3, r4
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4423      	add	r3, r4
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4413      	add	r3, r2
 80055e8:	3302      	adds	r3, #2
 80055ea:	460a      	mov	r2, r1
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e00a      	b.n	8005606 <formThrustVectors+0x1b2>
    }
    else
    	rThrusters[i].desiredSpeed = 0;
 80055f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80055f4:	4910      	ldr	r1, [pc, #64]	; (8005638 <formThrustVectors+0x1e4>)
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	3302      	adds	r3, #2
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8005606:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800560a:	3301      	adds	r3, #1
 800560c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005610:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005614:	2b05      	cmp	r3, #5
 8005616:	f67f af73 	bls.w	8005500 <formThrustVectors+0xac>
  	}

}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	373c      	adds	r7, #60	; 0x3c
 8005620:	46bd      	mov	sp, r7
 8005622:	bd90      	pop	{r4, r7, pc}
 8005624:	20001e40 	.word	0x20001e40
 8005628:	20001eb0 	.word	0x20001eb0
 800562c:	20002078 	.word	0x20002078
 8005630:	2000003c 	.word	0x2000003c
 8005634:	20002628 	.word	0x20002628
 8005638:	20001d38 	.word	0x20001d38

0800563c <resizeFloatToInt8>:

int8_t resizeFloatToInt8(float input)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 8005646:	edd7 7a01 	vldr	s15, [r7, #4]
 800564a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800564e:	ee17 3a90 	vmov	r3, s15
 8005652:	60fb      	str	r3, [r7, #12]
//  cast = cast / 0xFF;
  if (cast > 127) {
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b7f      	cmp	r3, #127	; 0x7f
 8005658:	dd02      	ble.n	8005660 <resizeFloatToInt8+0x24>
    cast = 127;
 800565a:	237f      	movs	r3, #127	; 0x7f
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e006      	b.n	800566e <resizeFloatToInt8+0x32>
  }
  else if(cast < -127) {
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8005666:	da02      	bge.n	800566e <resizeFloatToInt8+0x32>
    cast = -127;
 8005668:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800566c:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	b25b      	sxtb	r3, r3
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005690:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <MX_TIM7_Init+0x64>)
 8005692:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <MX_TIM7_Init+0x68>)
 8005694:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <MX_TIM7_Init+0x64>)
 8005698:	2200      	movs	r2, #0
 800569a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800569c:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <MX_TIM7_Init+0x64>)
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <MX_TIM7_Init+0x64>)
 80056a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <MX_TIM7_Init+0x64>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80056b0:	480c      	ldr	r0, [pc, #48]	; (80056e4 <MX_TIM7_Init+0x64>)
 80056b2:	f004 ff5f 	bl	800a574 <HAL_TIM_Base_Init>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80056bc:	f7fe fdb4 	bl	8004228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056c0:	2300      	movs	r3, #0
 80056c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	4619      	mov	r1, r3
 80056cc:	4805      	ldr	r0, [pc, #20]	; (80056e4 <MX_TIM7_Init+0x64>)
 80056ce:	f005 f9eb 	bl	800aaa8 <HAL_TIMEx_MasterConfigSynchronization>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80056d8:	f7fe fda6 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	2000262c 	.word	0x2000262c
 80056e8:	40001400 	.word	0x40001400

080056ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <HAL_TIM_Base_MspInit+0x38>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10b      	bne.n	8005716 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <HAL_TIM_Base_MspInit+0x3c>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	4a09      	ldr	r2, [pc, #36]	; (8005728 <HAL_TIM_Base_MspInit+0x3c>)
 8005704:	f043 0320 	orr.w	r3, r3, #32
 8005708:	61d3      	str	r3, [r2, #28]
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <HAL_TIM_Base_MspInit+0x3c>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40001400 	.word	0x40001400
 8005728:	40021000 	.word	0x40021000

0800572c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005730:	4b14      	ldr	r3, [pc, #80]	; (8005784 <MX_UART4_Init+0x58>)
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <MX_UART4_Init+0x5c>)
 8005734:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <MX_UART4_Init+0x58>)
 8005738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800573c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <MX_UART4_Init+0x58>)
 8005740:	2200      	movs	r2, #0
 8005742:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005744:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <MX_UART4_Init+0x58>)
 8005746:	2200      	movs	r2, #0
 8005748:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800574a:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <MX_UART4_Init+0x58>)
 800574c:	2200      	movs	r2, #0
 800574e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <MX_UART4_Init+0x58>)
 8005752:	220c      	movs	r2, #12
 8005754:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <MX_UART4_Init+0x58>)
 8005758:	2200      	movs	r2, #0
 800575a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <MX_UART4_Init+0x58>)
 800575e:	2200      	movs	r2, #0
 8005760:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005762:	4b08      	ldr	r3, [pc, #32]	; (8005784 <MX_UART4_Init+0x58>)
 8005764:	2200      	movs	r2, #0
 8005766:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <MX_UART4_Init+0x58>)
 800576a:	2200      	movs	r2, #0
 800576c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800576e:	4805      	ldr	r0, [pc, #20]	; (8005784 <MX_UART4_Init+0x58>)
 8005770:	f005 fa38 	bl	800abe4 <HAL_UART_Init>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800577a:	f7fe fd55 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20002678 	.word	0x20002678
 8005788:	40004c00 	.word	0x40004c00

0800578c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005790:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 8005792:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <MX_USART1_UART_Init+0x5c>)
 8005794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005796:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 8005798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800579c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800579e:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057b2:	220c      	movs	r2, #12
 80057b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057be:	2200      	movs	r2, #0
 80057c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057ce:	4805      	ldr	r0, [pc, #20]	; (80057e4 <MX_USART1_UART_Init+0x58>)
 80057d0:	f005 fa08 	bl	800abe4 <HAL_UART_Init>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80057da:	f7fe fd25 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20002700 	.word	0x20002700
 80057e8:	40013800 	.word	0x40013800

080057ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80057f0:	4b16      	ldr	r3, [pc, #88]	; (800584c <MX_USART2_UART_Init+0x60>)
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <MX_USART2_UART_Init+0x64>)
 80057f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80057f6:	4b15      	ldr	r3, [pc, #84]	; (800584c <MX_USART2_UART_Init+0x60>)
 80057f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80057fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80057fe:	4b13      	ldr	r3, [pc, #76]	; (800584c <MX_USART2_UART_Init+0x60>)
 8005800:	2200      	movs	r2, #0
 8005802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <MX_USART2_UART_Init+0x60>)
 8005806:	2200      	movs	r2, #0
 8005808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <MX_USART2_UART_Init+0x60>)
 800580c:	2200      	movs	r2, #0
 800580e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005810:	4b0e      	ldr	r3, [pc, #56]	; (800584c <MX_USART2_UART_Init+0x60>)
 8005812:	220c      	movs	r2, #12
 8005814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <MX_USART2_UART_Init+0x60>)
 8005818:	2200      	movs	r2, #0
 800581a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <MX_USART2_UART_Init+0x60>)
 800581e:	2200      	movs	r2, #0
 8005820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <MX_USART2_UART_Init+0x60>)
 8005824:	2200      	movs	r2, #0
 8005826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <MX_USART2_UART_Init+0x60>)
 800582a:	2220      	movs	r2, #32
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <MX_USART2_UART_Init+0x60>)
 8005830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005834:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005836:	4805      	ldr	r0, [pc, #20]	; (800584c <MX_USART2_UART_Init+0x60>)
 8005838:	f005 f9d4 	bl	800abe4 <HAL_UART_Init>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8005842:	f7fe fcf1 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20002788 	.word	0x20002788
 8005850:	40004400 	.word	0x40004400

08005854 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <MX_USART3_UART_Init+0x58>)
 800585a:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <MX_USART3_UART_Init+0x5c>)
 800585c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <MX_USART3_UART_Init+0x58>)
 8005860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <MX_USART3_UART_Init+0x58>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <MX_USART3_UART_Init+0x58>)
 800586e:	2200      	movs	r2, #0
 8005870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005872:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <MX_USART3_UART_Init+0x58>)
 8005874:	2200      	movs	r2, #0
 8005876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <MX_USART3_UART_Init+0x58>)
 800587a:	220c      	movs	r2, #12
 800587c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <MX_USART3_UART_Init+0x58>)
 8005880:	2200      	movs	r2, #0
 8005882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <MX_USART3_UART_Init+0x58>)
 8005886:	2200      	movs	r2, #0
 8005888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <MX_USART3_UART_Init+0x58>)
 800588c:	2200      	movs	r2, #0
 800588e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <MX_USART3_UART_Init+0x58>)
 8005892:	2200      	movs	r2, #0
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005896:	4805      	ldr	r0, [pc, #20]	; (80058ac <MX_USART3_UART_Init+0x58>)
 8005898:	f005 f9a4 	bl	800abe4 <HAL_UART_Init>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80058a2:	f7fe fcc1 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80058a6:	bf00      	nop
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20002810 	.word	0x20002810
 80058b0:	40004800 	.word	0x40004800

080058b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b090      	sub	sp, #64	; 0x40
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4aa0      	ldr	r2, [pc, #640]	; (8005b54 <HAL_UART_MspInit+0x2a0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d131      	bne.n	800593a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80058d6:	4ba0      	ldr	r3, [pc, #640]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	4a9f      	ldr	r2, [pc, #636]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 80058dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e0:	61d3      	str	r3, [r2, #28]
 80058e2:	4b9d      	ldr	r3, [pc, #628]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ee:	4b9a      	ldr	r3, [pc, #616]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	4a99      	ldr	r2, [pc, #612]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 80058f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f8:	6153      	str	r3, [r2, #20]
 80058fa:	4b97      	ldr	r3, [pc, #604]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005906:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590c:	2302      	movs	r3, #2
 800590e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005910:	2300      	movs	r3, #0
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005914:	2303      	movs	r3, #3
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005918:	2305      	movs	r3, #5
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800591c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005920:	4619      	mov	r1, r3
 8005922:	488e      	ldr	r0, [pc, #568]	; (8005b5c <HAL_UART_MspInit+0x2a8>)
 8005924:	f000 fee6 	bl	80066f4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005928:	2200      	movs	r2, #0
 800592a:	2105      	movs	r1, #5
 800592c:	2034      	movs	r0, #52	; 0x34
 800592e:	f000 faa7 	bl	8005e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005932:	2034      	movs	r0, #52	; 0x34
 8005934:	f000 fac0 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005938:	e15c      	b.n	8005bf4 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a88      	ldr	r2, [pc, #544]	; (8005b60 <HAL_UART_MspInit+0x2ac>)
 8005940:	4293      	cmp	r3, r2
 8005942:	f040 8081 	bne.w	8005a48 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005946:	4b84      	ldr	r3, [pc, #528]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	4a83      	ldr	r2, [pc, #524]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 800594c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005950:	6193      	str	r3, [r2, #24]
 8005952:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800595e:	4b7e      	ldr	r3, [pc, #504]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4a7d      	ldr	r2, [pc, #500]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005968:	6153      	str	r3, [r2, #20]
 800596a:	4b7b      	ldr	r3, [pc, #492]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800597c:	2302      	movs	r3, #2
 800597e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005980:	2300      	movs	r3, #0
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005984:	2303      	movs	r3, #3
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005988:	2307      	movs	r3, #7
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800598c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005990:	4619      	mov	r1, r3
 8005992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005996:	f000 fead 	bl	80066f4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800599a:	4b72      	ldr	r3, [pc, #456]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 800599c:	4a72      	ldr	r2, [pc, #456]	; (8005b68 <HAL_UART_MspInit+0x2b4>)
 800599e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059a0:	4b70      	ldr	r3, [pc, #448]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059a2:	2210      	movs	r2, #16
 80059a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059a6:	4b6f      	ldr	r3, [pc, #444]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059ac:	4b6d      	ldr	r3, [pc, #436]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059b2:	4b6c      	ldr	r3, [pc, #432]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059b8:	4b6a      	ldr	r3, [pc, #424]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80059be:	4b69      	ldr	r3, [pc, #420]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80059c4:	4b67      	ldr	r3, [pc, #412]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059c6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80059ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80059cc:	4865      	ldr	r0, [pc, #404]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059ce:	f000 fa81 	bl	8005ed4 <HAL_DMA_Init>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_UART_MspInit+0x128>
      Error_Handler();
 80059d8:	f7fe fc26 	bl	8004228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a61      	ldr	r2, [pc, #388]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059e0:	671a      	str	r2, [r3, #112]	; 0x70
 80059e2:	4a60      	ldr	r2, [pc, #384]	; (8005b64 <HAL_UART_MspInit+0x2b0>)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80059e8:	4b60      	ldr	r3, [pc, #384]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 80059ea:	4a61      	ldr	r2, [pc, #388]	; (8005b70 <HAL_UART_MspInit+0x2bc>)
 80059ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059ee:	4b5f      	ldr	r3, [pc, #380]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059f4:	4b5d      	ldr	r3, [pc, #372]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059fa:	4b5c      	ldr	r3, [pc, #368]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a00:	4b5a      	ldr	r3, [pc, #360]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a06:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005a0c:	4b57      	ldr	r3, [pc, #348]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a12:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 8005a14:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005a18:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005a1a:	4854      	ldr	r0, [pc, #336]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 8005a1c:	f000 fa5a 	bl	8005ed4 <HAL_DMA_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8005a26:	f7fe fbff 	bl	8004228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a4f      	ldr	r2, [pc, #316]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 8005a2e:	675a      	str	r2, [r3, #116]	; 0x74
 8005a30:	4a4e      	ldr	r2, [pc, #312]	; (8005b6c <HAL_UART_MspInit+0x2b8>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005a36:	2200      	movs	r2, #0
 8005a38:	2105      	movs	r1, #5
 8005a3a:	2025      	movs	r0, #37	; 0x25
 8005a3c:	f000 fa20 	bl	8005e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a40:	2025      	movs	r0, #37	; 0x25
 8005a42:	f000 fa39 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
}
 8005a46:	e0d5      	b.n	8005bf4 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a49      	ldr	r2, [pc, #292]	; (8005b74 <HAL_UART_MspInit+0x2c0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f040 809a 	bne.w	8005b88 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a54:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5e:	61d3      	str	r3, [r2, #28]
 8005a60:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a6c:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	4a39      	ldr	r2, [pc, #228]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a76:	6153      	str	r3, [r2, #20]
 8005a78:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_UART_MspInit+0x2a4>)
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005a84:	230c      	movs	r3, #12
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a90:	2303      	movs	r3, #3
 8005a92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a94:	2307      	movs	r3, #7
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aa2:	f000 fe27 	bl	80066f4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005aa6:	4b34      	ldr	r3, [pc, #208]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005aa8:	4a34      	ldr	r2, [pc, #208]	; (8005b7c <HAL_UART_MspInit+0x2c8>)
 8005aaa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005aac:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ab2:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ab8:	4b2f      	ldr	r3, [pc, #188]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005abe:	4b2e      	ldr	r3, [pc, #184]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ac4:	4b2c      	ldr	r3, [pc, #176]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ad0:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005ad2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005ad6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ad8:	4827      	ldr	r0, [pc, #156]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005ada:	f000 f9fb 	bl	8005ed4 <HAL_DMA_Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8005ae4:	f7fe fba0 	bl	8004228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005aec:	675a      	str	r2, [r3, #116]	; 0x74
 8005aee:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <HAL_UART_MspInit+0x2c4>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005af4:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005af6:	4a23      	ldr	r2, [pc, #140]	; (8005b84 <HAL_UART_MspInit+0x2d0>)
 8005af8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005afa:	4b21      	ldr	r3, [pc, #132]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005afc:	2210      	movs	r2, #16
 8005afe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b00:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b06:	4b1e      	ldr	r3, [pc, #120]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b0c:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b12:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b1e:	4b18      	ldr	r3, [pc, #96]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005b26:	4816      	ldr	r0, [pc, #88]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b28:	f000 f9d4 	bl	8005ed4 <HAL_DMA_Init>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_UART_MspInit+0x282>
      Error_Handler();
 8005b32:	f7fe fb79 	bl	8004228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a11      	ldr	r2, [pc, #68]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b3a:	671a      	str	r2, [r3, #112]	; 0x70
 8005b3c:	4a10      	ldr	r2, [pc, #64]	; (8005b80 <HAL_UART_MspInit+0x2cc>)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005b42:	2200      	movs	r2, #0
 8005b44:	2105      	movs	r1, #5
 8005b46:	2026      	movs	r0, #38	; 0x26
 8005b48:	f000 f99a 	bl	8005e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b4c:	2026      	movs	r0, #38	; 0x26
 8005b4e:	f000 f9b3 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
}
 8005b52:	e04f      	b.n	8005bf4 <HAL_UART_MspInit+0x340>
 8005b54:	40004c00 	.word	0x40004c00
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	48000800 	.word	0x48000800
 8005b60:	40013800 	.word	0x40013800
 8005b64:	20002898 	.word	0x20002898
 8005b68:	40020044 	.word	0x40020044
 8005b6c:	200028dc 	.word	0x200028dc
 8005b70:	40020058 	.word	0x40020058
 8005b74:	40004400 	.word	0x40004400
 8005b78:	20002920 	.word	0x20002920
 8005b7c:	4002006c 	.word	0x4002006c
 8005b80:	20002964 	.word	0x20002964
 8005b84:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_UART_MspInit+0x348>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d130      	bne.n	8005bf4 <HAL_UART_MspInit+0x340>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005b92:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <HAL_UART_MspInit+0x34c>)
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <HAL_UART_MspInit+0x34c>)
 8005b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b9c:	61d3      	str	r3, [r2, #28]
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <HAL_UART_MspInit+0x34c>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005baa:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <HAL_UART_MspInit+0x34c>)
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <HAL_UART_MspInit+0x34c>)
 8005bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb4:	6153      	str	r3, [r2, #20]
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_UART_MspInit+0x34c>)
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005bc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005bd4:	2307      	movs	r3, #7
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4809      	ldr	r0, [pc, #36]	; (8005c04 <HAL_UART_MspInit+0x350>)
 8005be0:	f000 fd88 	bl	80066f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005be4:	2200      	movs	r2, #0
 8005be6:	2105      	movs	r1, #5
 8005be8:	2027      	movs	r0, #39	; 0x27
 8005bea:	f000 f949 	bl	8005e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005bee:	2027      	movs	r0, #39	; 0x27
 8005bf0:	f000 f962 	bl	8005eb8 <HAL_NVIC_EnableIRQ>
}
 8005bf4:	bf00      	nop
 8005bf6:	3740      	adds	r7, #64	; 0x40
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40004800 	.word	0x40004800
 8005c00:	40021000 	.word	0x40021000
 8005c04:	48000400 	.word	0x48000400

08005c08 <Reset_Handler>:
 8005c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c40 <LoopForever+0x2>
 8005c0c:	f7ff fb34 	bl	8005278 <SystemInit>
 8005c10:	480c      	ldr	r0, [pc, #48]	; (8005c44 <LoopForever+0x6>)
 8005c12:	490d      	ldr	r1, [pc, #52]	; (8005c48 <LoopForever+0xa>)
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <LoopForever+0xe>)
 8005c16:	2300      	movs	r3, #0
 8005c18:	e002      	b.n	8005c20 <LoopCopyDataInit>

08005c1a <CopyDataInit>:
 8005c1a:	58d4      	ldr	r4, [r2, r3]
 8005c1c:	50c4      	str	r4, [r0, r3]
 8005c1e:	3304      	adds	r3, #4

08005c20 <LoopCopyDataInit>:
 8005c20:	18c4      	adds	r4, r0, r3
 8005c22:	428c      	cmp	r4, r1
 8005c24:	d3f9      	bcc.n	8005c1a <CopyDataInit>
 8005c26:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <LoopForever+0x12>)
 8005c28:	4c0a      	ldr	r4, [pc, #40]	; (8005c54 <LoopForever+0x16>)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e001      	b.n	8005c32 <LoopFillZerobss>

08005c2e <FillZerobss>:
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	3204      	adds	r2, #4

08005c32 <LoopFillZerobss>:
 8005c32:	42a2      	cmp	r2, r4
 8005c34:	d3fb      	bcc.n	8005c2e <FillZerobss>
 8005c36:	f00a fa6d 	bl	8010114 <__libc_init_array>
 8005c3a:	f7fe fa57 	bl	80040ec <main>

08005c3e <LoopForever>:
 8005c3e:	e7fe      	b.n	8005c3e <LoopForever>
 8005c40:	2000a000 	.word	0x2000a000
 8005c44:	20000000 	.word	0x20000000
 8005c48:	20000110 	.word	0x20000110
 8005c4c:	08010840 	.word	0x08010840
 8005c50:	20000110 	.word	0x20000110
 8005c54:	20003198 	.word	0x20003198

08005c58 <ADC1_2_IRQHandler>:
 8005c58:	e7fe      	b.n	8005c58 <ADC1_2_IRQHandler>
	...

08005c5c <HAL_Init>:
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <HAL_Init+0x28>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a07      	ldr	r2, [pc, #28]	; (8005c84 <HAL_Init+0x28>)
 8005c66:	f043 0310 	orr.w	r3, r3, #16
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	2003      	movs	r0, #3
 8005c6e:	f000 f8fc 	bl	8005e6a <HAL_NVIC_SetPriorityGrouping>
 8005c72:	200f      	movs	r0, #15
 8005c74:	f7ff fa16 	bl	80050a4 <HAL_InitTick>
 8005c78:	f7ff f9ec 	bl	8005054 <HAL_MspInit>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40022000 	.word	0x40022000

08005c88 <HAL_IncTick>:
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_IncTick+0x20>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_IncTick+0x24>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <HAL_IncTick+0x24>)
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	200000b8 	.word	0x200000b8
 8005cac:	200029a8 	.word	0x200029a8

08005cb0 <HAL_GetTick>:
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <HAL_GetTick+0x14>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	200029a8 	.word	0x200029a8

08005cc8 <HAL_Delay>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	f7ff ffee 	bl	8005cb0 <HAL_GetTick>
 8005cd4:	60b8      	str	r0, [r7, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d005      	beq.n	8005cee <HAL_Delay+0x26>
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <HAL_Delay+0x44>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	bf00      	nop
 8005cf0:	f7ff ffde 	bl	8005cb0 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d8f7      	bhi.n	8005cf0 <HAL_Delay+0x28>
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200000b8 	.word	0x200000b8

08005d10 <__NVIC_SetPriorityGrouping>:
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <__NVIC_SetPriorityGrouping+0x44>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	021a      	lsls	r2, r3, #8
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <__NVIC_SetPriorityGrouping+0x44>)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	60d3      	str	r3, [r2, #12]
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000ed00 	.word	0xe000ed00

08005d58 <__NVIC_GetPriorityGrouping>:
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <__NVIC_GetPriorityGrouping+0x18>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	4618      	mov	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <__NVIC_EnableIRQ>:
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	71fb      	strb	r3, [r7, #7]
 8005d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	db0b      	blt.n	8005d9e <__NVIC_EnableIRQ+0x2a>
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	f003 021f 	and.w	r2, r3, #31
 8005d8c:	4907      	ldr	r1, [pc, #28]	; (8005dac <__NVIC_EnableIRQ+0x38>)
 8005d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	fa00 f202 	lsl.w	r2, r0, r2
 8005d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	e000e100 	.word	0xe000e100

08005db0 <__NVIC_SetPriority>:
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	6039      	str	r1, [r7, #0]
 8005dba:	71fb      	strb	r3, [r7, #7]
 8005dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db0a      	blt.n	8005dda <__NVIC_SetPriority+0x2a>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	490c      	ldr	r1, [pc, #48]	; (8005dfc <__NVIC_SetPriority+0x4c>)
 8005dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dce:	0112      	lsls	r2, r2, #4
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005dd8:	e00a      	b.n	8005df0 <__NVIC_SetPriority+0x40>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4908      	ldr	r1, [pc, #32]	; (8005e00 <__NVIC_SetPriority+0x50>)
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	3b04      	subs	r3, #4
 8005de8:	0112      	lsls	r2, r2, #4
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	440b      	add	r3, r1
 8005dee:	761a      	strb	r2, [r3, #24]
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	e000e100 	.word	0xe000e100
 8005e00:	e000ed00 	.word	0xe000ed00

08005e04 <NVIC_EncodePriority>:
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	; 0x24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f1c3 0307 	rsb	r3, r3, #7
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	bf28      	it	cs
 8005e22:	2304      	movcs	r3, #4
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d902      	bls.n	8005e34 <NVIC_EncodePriority+0x30>
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3b03      	subs	r3, #3
 8005e32:	e000      	b.n	8005e36 <NVIC_EncodePriority+0x32>
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43da      	mvns	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	401a      	ands	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	43d9      	mvns	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3724      	adds	r7, #36	; 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_NVIC_SetPriorityGrouping>:
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff ff4c 	bl	8005d10 <__NVIC_SetPriorityGrouping>
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_NVIC_SetPriority>:
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	73fb      	strb	r3, [r7, #15]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	f7ff ff61 	bl	8005d58 <__NVIC_GetPriorityGrouping>
 8005e96:	6178      	str	r0, [r7, #20]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	6978      	ldr	r0, [r7, #20]
 8005e9e:	f7ff ffb1 	bl	8005e04 <NVIC_EncodePriority>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ff80 	bl	8005db0 <__NVIC_SetPriority>
 8005eb0:	bf00      	nop
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_NVIC_EnableIRQ>:
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	71fb      	strb	r3, [r7, #7]
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ff54 	bl	8005d74 <__NVIC_EnableIRQ>
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_DMA_Init>:
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_DMA_Init+0x16>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e037      	b.n	8005f5a <HAL_DMA_Init+0x86>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f00:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f9c5 	bl	80062cc <DMA_CalcBaseAndBitshift>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2020 	strb.w	r2, [r3, #32]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_DMA_Start_IT>:
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b086      	sub	sp, #24
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	75fb      	strb	r3, [r7, #23]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_DMA_Start_IT+0x20>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e04a      	b.n	8006018 <HAL_DMA_Start_IT+0xb6>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2020 	strb.w	r2, [r3, #32]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d13a      	bne.n	800600a <HAL_DMA_Start_IT+0xa8>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f958 	bl	800626e <DMA_SetConfig>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <HAL_DMA_Start_IT+0x76>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 020e 	orr.w	r2, r2, #14
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e00f      	b.n	8005ff8 <HAL_DMA_Start_IT+0x96>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 020a 	orr.w	r2, r2, #10
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0204 	bic.w	r2, r2, #4
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e005      	b.n	8006016 <HAL_DMA_Start_IT+0xb4>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2020 	strb.w	r2, [r3, #32]
 8006012:	2302      	movs	r3, #2
 8006014:	75fb      	strb	r3, [r7, #23]
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_DMA_Abort>:
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800602e:	2b02      	cmp	r3, #2
 8006030:	d008      	beq.n	8006044 <HAL_DMA_Abort+0x24>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2204      	movs	r2, #4
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2020 	strb.w	r2, [r3, #32]
 8006040:	2301      	movs	r3, #1
 8006042:	e020      	b.n	8006086 <HAL_DMA_Abort+0x66>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 020e 	bic.w	r2, r2, #14
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	2101      	movs	r1, #1
 800606e:	fa01 f202 	lsl.w	r2, r1, r2
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2020 	strb.w	r2, [r3, #32]
 8006084:	2300      	movs	r3, #0
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_DMA_Abort_IT>:
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d005      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x22>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2204      	movs	r2, #4
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
 80060b2:	e027      	b.n	8006104 <HAL_DMA_Abort_IT+0x72>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 020e 	bic.w	r2, r2, #14
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0201 	bic.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f202 	lsl.w	r2, r1, r2
 80060e2:	605a      	str	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2020 	strb.w	r2, [r3, #32]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_DMA_Abort_IT+0x72>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_DMA_IRQHandler>:
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	2204      	movs	r2, #4
 800612c:	409a      	lsls	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d024      	beq.n	8006180 <HAL_DMA_IRQHandler+0x72>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01f      	beq.n	8006180 <HAL_DMA_IRQHandler+0x72>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <HAL_DMA_IRQHandler+0x50>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0204 	bic.w	r2, r2, #4
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006166:	2104      	movs	r1, #4
 8006168:	fa01 f202 	lsl.w	r2, r1, r2
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d06a      	beq.n	800624c <HAL_DMA_IRQHandler+0x13e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
 800617e:	e065      	b.n	800624c <HAL_DMA_IRQHandler+0x13e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	2202      	movs	r2, #2
 8006186:	409a      	lsls	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d02c      	beq.n	80061ea <HAL_DMA_IRQHandler+0xdc>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d027      	beq.n	80061ea <HAL_DMA_IRQHandler+0xdc>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <HAL_DMA_IRQHandler+0xb2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 020a 	bic.w	r2, r2, #10
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	2102      	movs	r1, #2
 80061ca:	fa01 f202 	lsl.w	r2, r1, r2
 80061ce:	605a      	str	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2020 	strb.w	r2, [r3, #32]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d035      	beq.n	800624c <HAL_DMA_IRQHandler+0x13e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
 80061e8:	e030      	b.n	800624c <HAL_DMA_IRQHandler+0x13e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	2208      	movs	r2, #8
 80061f0:	409a      	lsls	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d028      	beq.n	800624c <HAL_DMA_IRQHandler+0x13e>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d023      	beq.n	800624c <HAL_DMA_IRQHandler+0x13e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 020e 	bic.w	r2, r2, #14
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621c:	2101      	movs	r1, #1
 800621e:	fa01 f202 	lsl.w	r2, r1, r2
 8006222:	605a      	str	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2020 	strb.w	r2, [r3, #32]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <HAL_DMA_IRQHandler+0x13e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	e7ff      	b.n	800624c <HAL_DMA_IRQHandler+0x13e>
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_DMA_GetState>:
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <DMA_SetConfig>:
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006284:	2101      	movs	r1, #1
 8006286:	fa01 f202 	lsl.w	r2, r1, r2
 800628a:	605a      	str	r2, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	605a      	str	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b10      	cmp	r3, #16
 800629a:	d108      	bne.n	80062ae <DMA_SetConfig+0x40>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	e007      	b.n	80062be <DMA_SetConfig+0x50>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	609a      	str	r2, [r3, #8]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <DMA_CalcBaseAndBitshift>:
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	4b14      	ldr	r3, [pc, #80]	; (800632c <DMA_CalcBaseAndBitshift+0x60>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	d80f      	bhi.n	8006300 <DMA_CalcBaseAndBitshift+0x34>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	4b12      	ldr	r3, [pc, #72]	; (8006330 <DMA_CalcBaseAndBitshift+0x64>)
 80062e8:	4413      	add	r3, r2
 80062ea:	4a12      	ldr	r2, [pc, #72]	; (8006334 <DMA_CalcBaseAndBitshift+0x68>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	009a      	lsls	r2, r3, #2
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0f      	ldr	r2, [pc, #60]	; (8006338 <DMA_CalcBaseAndBitshift+0x6c>)
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80062fe:	e00e      	b.n	800631e <DMA_CalcBaseAndBitshift+0x52>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <DMA_CalcBaseAndBitshift+0x70>)
 8006308:	4413      	add	r3, r2
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <DMA_CalcBaseAndBitshift+0x68>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	009a      	lsls	r2, r3, #2
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	641a      	str	r2, [r3, #64]	; 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a09      	ldr	r2, [pc, #36]	; (8006340 <DMA_CalcBaseAndBitshift+0x74>)
 800631c:	63da      	str	r2, [r3, #60]	; 0x3c
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40020407 	.word	0x40020407
 8006330:	bffdfff8 	.word	0xbffdfff8
 8006334:	cccccccd 	.word	0xcccccccd
 8006338:	40020000 	.word	0x40020000
 800633c:	bffdfbf8 	.word	0xbffdfbf8
 8006340:	40020400 	.word	0x40020400

08006344 <HAL_FLASH_Program>:
 8006344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	e9c7 2300 	strd	r2, r3, [r7]
 8006352:	2301      	movs	r3, #1
 8006354:	75fb      	strb	r3, [r7, #23]
 8006356:	2300      	movs	r3, #0
 8006358:	75bb      	strb	r3, [r7, #22]
 800635a:	2300      	movs	r3, #0
 800635c:	757b      	strb	r3, [r7, #21]
 800635e:	4b2f      	ldr	r3, [pc, #188]	; (800641c <HAL_FLASH_Program+0xd8>)
 8006360:	7e1b      	ldrb	r3, [r3, #24]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_FLASH_Program+0x26>
 8006366:	2302      	movs	r3, #2
 8006368:	e054      	b.n	8006414 <HAL_FLASH_Program+0xd0>
 800636a:	4b2c      	ldr	r3, [pc, #176]	; (800641c <HAL_FLASH_Program+0xd8>)
 800636c:	2201      	movs	r2, #1
 800636e:	761a      	strb	r2, [r3, #24]
 8006370:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006374:	f000 f8a8 	bl	80064c8 <FLASH_WaitForLastOperation>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d144      	bne.n	800640c <HAL_FLASH_Program+0xc8>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d102      	bne.n	800638e <HAL_FLASH_Program+0x4a>
 8006388:	2301      	movs	r3, #1
 800638a:	757b      	strb	r3, [r7, #21]
 800638c:	e007      	b.n	800639e <HAL_FLASH_Program+0x5a>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d102      	bne.n	800639a <HAL_FLASH_Program+0x56>
 8006394:	2302      	movs	r3, #2
 8006396:	757b      	strb	r3, [r7, #21]
 8006398:	e001      	b.n	800639e <HAL_FLASH_Program+0x5a>
 800639a:	2304      	movs	r3, #4
 800639c:	757b      	strb	r3, [r7, #21]
 800639e:	2300      	movs	r3, #0
 80063a0:	75bb      	strb	r3, [r7, #22]
 80063a2:	e02d      	b.n	8006400 <HAL_FLASH_Program+0xbc>
 80063a4:	7dbb      	ldrb	r3, [r7, #22]
 80063a6:	005a      	lsls	r2, r3, #1
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	eb02 0c03 	add.w	ip, r2, r3
 80063ae:	7dbb      	ldrb	r3, [r7, #22]
 80063b0:	0119      	lsls	r1, r3, #4
 80063b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b6:	f1c1 0620 	rsb	r6, r1, #32
 80063ba:	f1a1 0020 	sub.w	r0, r1, #32
 80063be:	fa22 f401 	lsr.w	r4, r2, r1
 80063c2:	fa03 f606 	lsl.w	r6, r3, r6
 80063c6:	4334      	orrs	r4, r6
 80063c8:	fa23 f000 	lsr.w	r0, r3, r0
 80063cc:	4304      	orrs	r4, r0
 80063ce:	fa23 f501 	lsr.w	r5, r3, r1
 80063d2:	b2a3      	uxth	r3, r4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4660      	mov	r0, ip
 80063d8:	f000 f85a 	bl	8006490 <FLASH_Program_HalfWord>
 80063dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063e0:	f000 f872 	bl	80064c8 <FLASH_WaitForLastOperation>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]
 80063e8:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <HAL_FLASH_Program+0xdc>)
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <HAL_FLASH_Program+0xdc>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	6113      	str	r3, [r2, #16]
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <HAL_FLASH_Program+0xc6>
 80063fa:	7dbb      	ldrb	r3, [r7, #22]
 80063fc:	3301      	adds	r3, #1
 80063fe:	75bb      	strb	r3, [r7, #22]
 8006400:	7dba      	ldrb	r2, [r7, #22]
 8006402:	7d7b      	ldrb	r3, [r7, #21]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3cd      	bcc.n	80063a4 <HAL_FLASH_Program+0x60>
 8006408:	e000      	b.n	800640c <HAL_FLASH_Program+0xc8>
 800640a:	bf00      	nop
 800640c:	4b03      	ldr	r3, [pc, #12]	; (800641c <HAL_FLASH_Program+0xd8>)
 800640e:	2200      	movs	r2, #0
 8006410:	761a      	strb	r2, [r3, #24]
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	4618      	mov	r0, r3
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800641c:	200029b0 	.word	0x200029b0
 8006420:	40022000 	.word	0x40022000

08006424 <HAL_FLASH_Unlock>:
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	2300      	movs	r3, #0
 800642c:	71fb      	strb	r3, [r7, #7]
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_FLASH_Unlock+0x40>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <HAL_FLASH_Unlock+0x32>
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_FLASH_Unlock+0x40>)
 800643c:	4a0a      	ldr	r2, [pc, #40]	; (8006468 <HAL_FLASH_Unlock+0x44>)
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	4b08      	ldr	r3, [pc, #32]	; (8006464 <HAL_FLASH_Unlock+0x40>)
 8006442:	4a0a      	ldr	r2, [pc, #40]	; (800646c <HAL_FLASH_Unlock+0x48>)
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <HAL_FLASH_Unlock+0x40>)
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_FLASH_Unlock+0x32>
 8006452:	2301      	movs	r3, #1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40022000 	.word	0x40022000
 8006468:	45670123 	.word	0x45670123
 800646c:	cdef89ab 	.word	0xcdef89ab

08006470 <HAL_FLASH_Lock>:
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_FLASH_Lock+0x1c>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	4a04      	ldr	r2, [pc, #16]	; (800648c <HAL_FLASH_Lock+0x1c>)
 800647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647e:	6113      	str	r3, [r2, #16]
 8006480:	2300      	movs	r3, #0
 8006482:	4618      	mov	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	40022000 	.word	0x40022000

08006490 <FLASH_Program_HalfWord>:
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
 800649c:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <FLASH_Program_HalfWord+0x30>)
 800649e:	2200      	movs	r2, #0
 80064a0:	61da      	str	r2, [r3, #28]
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <FLASH_Program_HalfWord+0x34>)
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <FLASH_Program_HalfWord+0x34>)
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	6113      	str	r3, [r2, #16]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	887a      	ldrh	r2, [r7, #2]
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	200029b0 	.word	0x200029b0
 80064c4:	40022000 	.word	0x40022000

080064c8 <FLASH_WaitForLastOperation>:
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	f7ff fbee 	bl	8005cb0 <HAL_GetTick>
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	e010      	b.n	80064fa <FLASH_WaitForLastOperation+0x32>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d00c      	beq.n	80064fa <FLASH_WaitForLastOperation+0x32>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <FLASH_WaitForLastOperation+0x2e>
 80064e6:	f7ff fbe3 	bl	8005cb0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d201      	bcs.n	80064fa <FLASH_WaitForLastOperation+0x32>
 80064f6:	2303      	movs	r3, #3
 80064f8:	e01f      	b.n	800653a <FLASH_WaitForLastOperation+0x72>
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <FLASH_WaitForLastOperation+0x7c>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d0e8      	beq.n	80064d8 <FLASH_WaitForLastOperation+0x10>
 8006506:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <FLASH_WaitForLastOperation+0x7c>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b20      	cmp	r3, #32
 8006510:	d102      	bne.n	8006518 <FLASH_WaitForLastOperation+0x50>
 8006512:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <FLASH_WaitForLastOperation+0x7c>)
 8006514:	2220      	movs	r2, #32
 8006516:	60da      	str	r2, [r3, #12]
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <FLASH_WaitForLastOperation+0x7c>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b10      	cmp	r3, #16
 8006522:	d005      	beq.n	8006530 <FLASH_WaitForLastOperation+0x68>
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <FLASH_WaitForLastOperation+0x7c>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b04      	cmp	r3, #4
 800652e:	d103      	bne.n	8006538 <FLASH_WaitForLastOperation+0x70>
 8006530:	f000 f80a 	bl	8006548 <FLASH_SetErrorCode>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <FLASH_WaitForLastOperation+0x72>
 8006538:	2300      	movs	r3, #0
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40022000 	.word	0x40022000

08006548 <FLASH_SetErrorCode>:
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <FLASH_SetErrorCode+0x5c>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b10      	cmp	r3, #16
 800655c:	d109      	bne.n	8006572 <FLASH_SetErrorCode+0x2a>
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <FLASH_SetErrorCode+0x60>)
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f043 0302 	orr.w	r3, r3, #2
 8006566:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <FLASH_SetErrorCode+0x60>)
 8006568:	61d3      	str	r3, [r2, #28]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f043 0310 	orr.w	r3, r3, #16
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <FLASH_SetErrorCode+0x5c>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b04      	cmp	r3, #4
 800657c:	d109      	bne.n	8006592 <FLASH_SetErrorCode+0x4a>
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <FLASH_SetErrorCode+0x60>)
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <FLASH_SetErrorCode+0x60>)
 8006588:	61d3      	str	r3, [r2, #28]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f043 0304 	orr.w	r3, r3, #4
 8006590:	607b      	str	r3, [r7, #4]
 8006592:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <FLASH_SetErrorCode+0x5c>)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60d3      	str	r3, [r2, #12]
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	40022000 	.word	0x40022000
 80065a8:	200029b0 	.word	0x200029b0

080065ac <HAL_FLASHEx_Erase>:
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <HAL_FLASHEx_Erase+0xcc>)
 80065c0:	7e1b      	ldrb	r3, [r3, #24]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_FLASHEx_Erase+0x1e>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e052      	b.n	8006670 <HAL_FLASHEx_Erase+0xc4>
 80065ca:	4b2b      	ldr	r3, [pc, #172]	; (8006678 <HAL_FLASHEx_Erase+0xcc>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	761a      	strb	r2, [r3, #24]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d115      	bne.n	8006604 <HAL_FLASHEx_Erase+0x58>
 80065d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065dc:	f7ff ff74 	bl	80064c8 <FLASH_WaitForLastOperation>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d140      	bne.n	8006668 <HAL_FLASHEx_Erase+0xbc>
 80065e6:	f000 f84b 	bl	8006680 <FLASH_MassErase>
 80065ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065ee:	f7ff ff6b 	bl	80064c8 <FLASH_WaitForLastOperation>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
 80065f6:	4b21      	ldr	r3, [pc, #132]	; (800667c <HAL_FLASHEx_Erase+0xd0>)
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	4a20      	ldr	r2, [pc, #128]	; (800667c <HAL_FLASHEx_Erase+0xd0>)
 80065fc:	f023 0304 	bic.w	r3, r3, #4
 8006600:	6113      	str	r3, [r2, #16]
 8006602:	e031      	b.n	8006668 <HAL_FLASHEx_Erase+0xbc>
 8006604:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006608:	f7ff ff5e 	bl	80064c8 <FLASH_WaitForLastOperation>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d12a      	bne.n	8006668 <HAL_FLASHEx_Erase+0xbc>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	f04f 32ff 	mov.w	r2, #4294967295
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	e019      	b.n	8006656 <HAL_FLASHEx_Erase+0xaa>
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f000 f846 	bl	80066b4 <FLASH_PageErase>
 8006628:	f24c 3050 	movw	r0, #50000	; 0xc350
 800662c:	f7ff ff4c 	bl	80064c8 <FLASH_WaitForLastOperation>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
 8006634:	4b11      	ldr	r3, [pc, #68]	; (800667c <HAL_FLASHEx_Erase+0xd0>)
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	4a10      	ldr	r2, [pc, #64]	; (800667c <HAL_FLASHEx_Erase+0xd0>)
 800663a:	f023 0302 	bic.w	r3, r3, #2
 800663e:	6113      	str	r3, [r2, #16]
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_FLASHEx_Erase+0xa2>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e00c      	b.n	8006668 <HAL_FLASHEx_Erase+0xbc>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	02da      	lsls	r2, r3, #11
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4413      	add	r3, r2
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d3dc      	bcc.n	8006622 <HAL_FLASHEx_Erase+0x76>
 8006668:	4b03      	ldr	r3, [pc, #12]	; (8006678 <HAL_FLASHEx_Erase+0xcc>)
 800666a:	2200      	movs	r2, #0
 800666c:	761a      	strb	r2, [r3, #24]
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200029b0 	.word	0x200029b0
 800667c:	40022000 	.word	0x40022000

08006680 <FLASH_MassErase>:
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
 8006684:	4b09      	ldr	r3, [pc, #36]	; (80066ac <FLASH_MassErase+0x2c>)
 8006686:	2200      	movs	r2, #0
 8006688:	61da      	str	r2, [r3, #28]
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <FLASH_MassErase+0x30>)
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <FLASH_MassErase+0x30>)
 8006690:	f043 0304 	orr.w	r3, r3, #4
 8006694:	6113      	str	r3, [r2, #16]
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <FLASH_MassErase+0x30>)
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	4a05      	ldr	r2, [pc, #20]	; (80066b0 <FLASH_MassErase+0x30>)
 800669c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a0:	6113      	str	r3, [r2, #16]
 80066a2:	bf00      	nop
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	200029b0 	.word	0x200029b0
 80066b0:	40022000 	.word	0x40022000

080066b4 <FLASH_PageErase>:
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <FLASH_PageErase+0x38>)
 80066be:	2200      	movs	r2, #0
 80066c0:	61da      	str	r2, [r3, #28]
 80066c2:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <FLASH_PageErase+0x3c>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <FLASH_PageErase+0x3c>)
 80066c8:	f043 0302 	orr.w	r3, r3, #2
 80066cc:	6113      	str	r3, [r2, #16]
 80066ce:	4a08      	ldr	r2, [pc, #32]	; (80066f0 <FLASH_PageErase+0x3c>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6153      	str	r3, [r2, #20]
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <FLASH_PageErase+0x3c>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <FLASH_PageErase+0x3c>)
 80066da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066de:	6113      	str	r3, [r2, #16]
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	200029b0 	.word	0x200029b0
 80066f0:	40022000 	.word	0x40022000

080066f4 <HAL_GPIO_Init>:
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	e154      	b.n	80069ae <HAL_GPIO_Init+0x2ba>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	2101      	movs	r1, #1
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	fa01 f303 	lsl.w	r3, r1, r3
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8146 	beq.w	80069a8 <HAL_GPIO_Init+0x2b4>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d005      	beq.n	8006734 <HAL_GPIO_Init+0x40>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d130      	bne.n	8006796 <HAL_GPIO_Init+0xa2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	2203      	movs	r2, #3
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4013      	ands	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	2201      	movs	r2, #1
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4013      	ands	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	f003 0201 	and.w	r2, r3, #1
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d017      	beq.n	80067d2 <HAL_GPIO_Init+0xde>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	2203      	movs	r2, #3
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	43db      	mvns	r3, r3
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4013      	ands	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	60da      	str	r2, [r3, #12]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d123      	bne.n	8006826 <HAL_GPIO_Init+0x132>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	08da      	lsrs	r2, r3, #3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3208      	adds	r2, #8
 80067e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	220f      	movs	r2, #15
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4013      	ands	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	08da      	lsrs	r2, r3, #3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3208      	adds	r2, #8
 8006820:	6939      	ldr	r1, [r7, #16]
 8006822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	2203      	movs	r2, #3
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	43db      	mvns	r3, r3
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4013      	ands	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 0203 	and.w	r2, r3, #3
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80a0 	beq.w	80069a8 <HAL_GPIO_Init+0x2b4>
 8006868:	4b58      	ldr	r3, [pc, #352]	; (80069cc <HAL_GPIO_Init+0x2d8>)
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4a57      	ldr	r2, [pc, #348]	; (80069cc <HAL_GPIO_Init+0x2d8>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	6193      	str	r3, [r2, #24]
 8006874:	4b55      	ldr	r3, [pc, #340]	; (80069cc <HAL_GPIO_Init+0x2d8>)
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4a53      	ldr	r2, [pc, #332]	; (80069d0 <HAL_GPIO_Init+0x2dc>)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	3302      	adds	r3, #2
 8006888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	220f      	movs	r2, #15
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4013      	ands	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80068aa:	d019      	beq.n	80068e0 <HAL_GPIO_Init+0x1ec>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a49      	ldr	r2, [pc, #292]	; (80069d4 <HAL_GPIO_Init+0x2e0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <HAL_GPIO_Init+0x1e8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a48      	ldr	r2, [pc, #288]	; (80069d8 <HAL_GPIO_Init+0x2e4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00d      	beq.n	80068d8 <HAL_GPIO_Init+0x1e4>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a47      	ldr	r2, [pc, #284]	; (80069dc <HAL_GPIO_Init+0x2e8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <HAL_GPIO_Init+0x1e0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a46      	ldr	r2, [pc, #280]	; (80069e0 <HAL_GPIO_Init+0x2ec>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d101      	bne.n	80068d0 <HAL_GPIO_Init+0x1dc>
 80068cc:	2304      	movs	r3, #4
 80068ce:	e008      	b.n	80068e2 <HAL_GPIO_Init+0x1ee>
 80068d0:	2305      	movs	r3, #5
 80068d2:	e006      	b.n	80068e2 <HAL_GPIO_Init+0x1ee>
 80068d4:	2303      	movs	r3, #3
 80068d6:	e004      	b.n	80068e2 <HAL_GPIO_Init+0x1ee>
 80068d8:	2302      	movs	r3, #2
 80068da:	e002      	b.n	80068e2 <HAL_GPIO_Init+0x1ee>
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <HAL_GPIO_Init+0x1ee>
 80068e0:	2300      	movs	r3, #0
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	f002 0203 	and.w	r2, r2, #3
 80068e8:	0092      	lsls	r2, r2, #2
 80068ea:	4093      	lsls	r3, r2
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	4937      	ldr	r1, [pc, #220]	; (80069d0 <HAL_GPIO_Init+0x2dc>)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	089b      	lsrs	r3, r3, #2
 80068f8:	3302      	adds	r3, #2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006900:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	43db      	mvns	r3, r3
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4013      	ands	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_GPIO_Init+0x230>
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	4a2f      	ldr	r2, [pc, #188]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6093      	str	r3, [r2, #8]
 800692a:	4b2e      	ldr	r3, [pc, #184]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	43db      	mvns	r3, r3
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4013      	ands	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_GPIO_Init+0x25a>
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	60d3      	str	r3, [r2, #12]
 8006954:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	43db      	mvns	r3, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4013      	ands	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_GPIO_Init+0x284>
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	4a1a      	ldr	r2, [pc, #104]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6053      	str	r3, [r2, #4]
 800697e:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	43db      	mvns	r3, r3
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4013      	ands	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_GPIO_Init+0x2ae>
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <HAL_GPIO_Init+0x2f0>)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	3301      	adds	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f aea3 	bne.w	8006704 <HAL_GPIO_Init+0x10>
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40010000 	.word	0x40010000
 80069d4:	48000400 	.word	0x48000400
 80069d8:	48000800 	.word	0x48000800
 80069dc:	48000c00 	.word	0x48000c00
 80069e0:	48001000 	.word	0x48001000
 80069e4:	40010400 	.word	0x40010400

080069e8 <HAL_GPIO_WritePin>:
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
 80069f4:	4613      	mov	r3, r2
 80069f6:	707b      	strb	r3, [r7, #1]
 80069f8:	787b      	ldrb	r3, [r7, #1]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_GPIO_WritePin+0x1e>
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	619a      	str	r2, [r3, #24]
 8006a04:	e002      	b.n	8006a0c <HAL_GPIO_WritePin+0x24>
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_GPIO_TogglePin>:
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	887a      	ldrh	r2, [r7, #2]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	041a      	lsls	r2, r3, #16
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	43d9      	mvns	r1, r3
 8006a36:	887b      	ldrh	r3, [r7, #2]
 8006a38:	400b      	ands	r3, r1
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	619a      	str	r2, [r3, #24]
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_I2C_Init>:
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_I2C_Init+0x12>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e081      	b.n	8006b62 <HAL_I2C_Init+0x116>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_I2C_Init+0x2c>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fd faee 	bl	8004054 <HAL_I2C_MspInit>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2224      	movs	r2, #36	; 0x24
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a9c:	611a      	str	r2, [r3, #16]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aac:	609a      	str	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <HAL_I2C_Init+0x7a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ac2:	609a      	str	r2, [r3, #8]
 8006ac4:	e006      	b.n	8006ad4 <HAL_I2C_Init+0x88>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d104      	bne.n	8006ae6 <HAL_I2C_Init+0x9a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af8:	6053      	str	r3, [r2, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	ea42 0103 	orr.w	r1, r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	021a      	lsls	r2, r3, #8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69d9      	ldr	r1, [r3, #28]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	645a      	str	r2, [r3, #68]	; 0x44
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b60:	2300      	movs	r3, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <HAL_I2C_Master_Transmit>:
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	461a      	mov	r2, r3
 8006b78:	460b      	mov	r3, r1
 8006b7a:	817b      	strh	r3, [r7, #10]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	813b      	strh	r3, [r7, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	f040 80da 	bne.w	8006d42 <HAL_I2C_Master_Transmit+0x1d6>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_I2C_Master_Transmit+0x30>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e0d3      	b.n	8006d44 <HAL_I2C_Master_Transmit+0x1d8>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba4:	f7ff f884 	bl	8005cb0 <HAL_GetTick>
 8006ba8:	6178      	str	r0, [r7, #20]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	2319      	movs	r3, #25
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f001 fc99 	bl	80084ee <I2C_WaitOnFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <HAL_I2C_Master_Transmit+0x5a>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e0be      	b.n	8006d44 <HAL_I2C_Master_Transmit+0x1d8>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2221      	movs	r2, #33	; 0x21
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2210      	movs	r2, #16
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	645a      	str	r2, [r3, #68]	; 0x44
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	625a      	str	r2, [r3, #36]	; 0x24
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	893a      	ldrh	r2, [r7, #8]
 8006be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	635a      	str	r2, [r3, #52]	; 0x34
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2bff      	cmp	r3, #255	; 0xff
 8006bf6:	d90e      	bls.n	8006c16 <HAL_I2C_Master_Transmit+0xaa>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	22ff      	movs	r2, #255	; 0xff
 8006bfc:	851a      	strh	r2, [r3, #40]	; 0x28
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	8979      	ldrh	r1, [r7, #10]
 8006c06:	4b51      	ldr	r3, [pc, #324]	; (8006d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f001 fea8 	bl	8008964 <I2C_TransferConfig>
 8006c14:	e06c      	b.n	8006cf0 <HAL_I2C_Master_Transmit+0x184>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	8979      	ldrh	r1, [r7, #10]
 8006c28:	4b48      	ldr	r3, [pc, #288]	; (8006d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f001 fe97 	bl	8008964 <I2C_TransferConfig>
 8006c36:	e05b      	b.n	8006cf0 <HAL_I2C_Master_Transmit+0x184>
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	6a39      	ldr	r1, [r7, #32]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f001 fca5 	bl	800858c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_I2C_Master_Transmit+0xe0>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e07b      	b.n	8006d44 <HAL_I2C_Master_Transmit+0x1d8>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d034      	beq.n	8006cf0 <HAL_I2C_Master_Transmit+0x184>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d130      	bne.n	8006cf0 <HAL_I2C_Master_Transmit+0x184>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	2200      	movs	r2, #0
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 fc28 	bl	80084ee <I2C_WaitOnFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_I2C_Master_Transmit+0x13c>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e04d      	b.n	8006d44 <HAL_I2C_Master_Transmit+0x1d8>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2bff      	cmp	r3, #255	; 0xff
 8006cb0:	d90e      	bls.n	8006cd0 <HAL_I2C_Master_Transmit+0x164>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	8979      	ldrh	r1, [r7, #10]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f001 fe4b 	bl	8008964 <I2C_TransferConfig>
 8006cce:	e00f      	b.n	8006cf0 <HAL_I2C_Master_Transmit+0x184>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	8979      	ldrh	r1, [r7, #10]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f001 fe3a 	bl	8008964 <I2C_TransferConfig>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d19e      	bne.n	8006c38 <HAL_I2C_Master_Transmit+0xcc>
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	6a39      	ldr	r1, [r7, #32]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f001 fc8b 	bl	800861a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_I2C_Master_Transmit+0x1a2>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e01a      	b.n	8006d44 <HAL_I2C_Master_Transmit+0x1d8>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2220      	movs	r2, #32
 8006d14:	61da      	str	r2, [r3, #28]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6859      	ldr	r1, [r3, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_I2C_Master_Transmit+0x1e4>)
 8006d22:	400b      	ands	r3, r1
 8006d24:	6053      	str	r3, [r2, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <HAL_I2C_Master_Transmit+0x1d8>
 8006d42:	2302      	movs	r3, #2
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	80002000 	.word	0x80002000
 8006d50:	fe00e800 	.word	0xfe00e800

08006d54 <HAL_I2C_Master_Receive>:
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	460b      	mov	r3, r1
 8006d62:	817b      	strh	r3, [r7, #10]
 8006d64:	4613      	mov	r3, r2
 8006d66:	813b      	strh	r3, [r7, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	f040 80db 	bne.w	8006f2c <HAL_I2C_Master_Receive+0x1d8>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_I2C_Master_Receive+0x30>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e0d4      	b.n	8006f2e <HAL_I2C_Master_Receive+0x1da>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d8c:	f7fe ff90 	bl	8005cb0 <HAL_GetTick>
 8006d90:	6178      	str	r0, [r7, #20]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	2319      	movs	r3, #25
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f001 fba5 	bl	80084ee <I2C_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_I2C_Master_Receive+0x5a>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e0bf      	b.n	8006f2e <HAL_I2C_Master_Receive+0x1da>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2222      	movs	r2, #34	; 0x22
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2210      	movs	r2, #16
 8006dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	645a      	str	r2, [r3, #68]	; 0x44
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	893a      	ldrh	r2, [r7, #8]
 8006dce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2bff      	cmp	r3, #255	; 0xff
 8006dde:	d90e      	bls.n	8006dfe <HAL_I2C_Master_Receive+0xaa>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	22ff      	movs	r2, #255	; 0xff
 8006de4:	851a      	strh	r2, [r3, #40]	; 0x28
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	8979      	ldrh	r1, [r7, #10]
 8006dee:	4b52      	ldr	r3, [pc, #328]	; (8006f38 <HAL_I2C_Master_Receive+0x1e4>)
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f001 fdb4 	bl	8008964 <I2C_TransferConfig>
 8006dfc:	e06d      	b.n	8006eda <HAL_I2C_Master_Receive+0x186>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	8979      	ldrh	r1, [r7, #10]
 8006e10:	4b49      	ldr	r3, [pc, #292]	; (8006f38 <HAL_I2C_Master_Receive+0x1e4>)
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f001 fda3 	bl	8008964 <I2C_TransferConfig>
 8006e1e:	e05c      	b.n	8006eda <HAL_I2C_Master_Receive+0x186>
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	6a39      	ldr	r1, [r7, #32]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f001 fc3b 	bl	80086a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <HAL_I2C_Master_Receive+0xe0>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e07c      	b.n	8006f2e <HAL_I2C_Master_Receive+0x1da>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d034      	beq.n	8006eda <HAL_I2C_Master_Receive+0x186>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d130      	bne.n	8006eda <HAL_I2C_Master_Receive+0x186>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f001 fb33 	bl	80084ee <I2C_WaitOnFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_I2C_Master_Receive+0x13e>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e04d      	b.n	8006f2e <HAL_I2C_Master_Receive+0x1da>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2bff      	cmp	r3, #255	; 0xff
 8006e9a:	d90e      	bls.n	8006eba <HAL_I2C_Master_Receive+0x166>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	22ff      	movs	r2, #255	; 0xff
 8006ea0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	8979      	ldrh	r1, [r7, #10]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f001 fd56 	bl	8008964 <I2C_TransferConfig>
 8006eb8:	e00f      	b.n	8006eda <HAL_I2C_Master_Receive+0x186>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	8979      	ldrh	r1, [r7, #10]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f001 fd45 	bl	8008964 <I2C_TransferConfig>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d19d      	bne.n	8006e20 <HAL_I2C_Master_Receive+0xcc>
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	6a39      	ldr	r1, [r7, #32]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f001 fb96 	bl	800861a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_I2C_Master_Receive+0x1a4>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e01a      	b.n	8006f2e <HAL_I2C_Master_Receive+0x1da>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2220      	movs	r2, #32
 8006efe:	61da      	str	r2, [r3, #28]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <HAL_I2C_Master_Receive+0x1e8>)
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	6053      	str	r3, [r2, #4]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e000      	b.n	8006f2e <HAL_I2C_Master_Receive+0x1da>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	80002400 	.word	0x80002400
 8006f3c:	fe00e800 	.word	0xfe00e800

08006f40 <HAL_I2C_Master_Transmit_IT>:
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	817b      	strh	r3, [r7, #10]
 8006f50:	4613      	mov	r3, r2
 8006f52:	813b      	strh	r3, [r7, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d153      	bne.n	8007008 <HAL_I2C_Master_Transmit_IT+0xc8>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6e:	d101      	bne.n	8006f74 <HAL_I2C_Master_Transmit_IT+0x34>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e04a      	b.n	800700a <HAL_I2C_Master_Transmit_IT+0xca>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2C_Master_Transmit_IT+0x42>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e043      	b.n	800700a <HAL_I2C_Master_Transmit_IT+0xca>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2221      	movs	r2, #33	; 0x21
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2210      	movs	r2, #16
 8006f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	893a      	ldrh	r2, [r7, #8]
 8006faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a19      	ldr	r2, [pc, #100]	; (8007014 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a18      	ldr	r2, [pc, #96]	; (8007018 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8006fb6:	635a      	str	r2, [r3, #52]	; 0x34
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d906      	bls.n	8006fd0 <HAL_I2C_Master_Transmit_IT+0x90>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e007      	b.n	8006fe0 <HAL_I2C_Master_Transmit_IT+0xa0>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	8979      	ldrh	r1, [r7, #10]
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_I2C_Master_Transmit_IT+0xdc>)
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f001 fcb8 	bl	8008964 <I2C_TransferConfig>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f001 fce2 	bl	80089c8 <I2C_Enable_IRQ>
 8007004:	2300      	movs	r3, #0
 8007006:	e000      	b.n	800700a <HAL_I2C_Master_Transmit_IT+0xca>
 8007008:	2302      	movs	r3, #2
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	ffff0000 	.word	0xffff0000
 8007018:	080071dd 	.word	0x080071dd
 800701c:	80002000 	.word	0x80002000

08007020 <HAL_I2C_Master_Receive_IT>:
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	461a      	mov	r2, r3
 800702c:	460b      	mov	r3, r1
 800702e:	817b      	strh	r3, [r7, #10]
 8007030:	4613      	mov	r3, r2
 8007032:	813b      	strh	r3, [r7, #8]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b20      	cmp	r3, #32
 800703e:	d153      	bne.n	80070e8 <HAL_I2C_Master_Receive_IT+0xc8>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800704e:	d101      	bne.n	8007054 <HAL_I2C_Master_Receive_IT+0x34>
 8007050:	2302      	movs	r3, #2
 8007052:	e04a      	b.n	80070ea <HAL_I2C_Master_Receive_IT+0xca>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_I2C_Master_Receive_IT+0x42>
 800705e:	2302      	movs	r3, #2
 8007060:	e043      	b.n	80070ea <HAL_I2C_Master_Receive_IT+0xca>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2222      	movs	r2, #34	; 0x22
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2210      	movs	r2, #16
 8007076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	645a      	str	r2, [r3, #68]	; 0x44
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	893a      	ldrh	r2, [r7, #8]
 800708a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a19      	ldr	r2, [pc, #100]	; (80070f4 <HAL_I2C_Master_Receive_IT+0xd4>)
 8007090:	62da      	str	r2, [r3, #44]	; 0x2c
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <HAL_I2C_Master_Receive_IT+0xd8>)
 8007096:	635a      	str	r2, [r3, #52]	; 0x34
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709c:	b29b      	uxth	r3, r3
 800709e:	2bff      	cmp	r3, #255	; 0xff
 80070a0:	d906      	bls.n	80070b0 <HAL_I2C_Master_Receive_IT+0x90>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80070a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e007      	b.n	80070c0 <HAL_I2C_Master_Receive_IT+0xa0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80070ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	8979      	ldrh	r1, [r7, #10]
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <HAL_I2C_Master_Receive_IT+0xdc>)
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f001 fc48 	bl	8008964 <I2C_TransferConfig>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070dc:	2102      	movs	r1, #2
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f001 fc72 	bl	80089c8 <I2C_Enable_IRQ>
 80070e4:	2300      	movs	r3, #0
 80070e6:	e000      	b.n	80070ea <HAL_I2C_Master_Receive_IT+0xca>
 80070e8:	2302      	movs	r3, #2
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	ffff0000 	.word	0xffff0000
 80070f8:	080071dd 	.word	0x080071dd
 80070fc:	80002400 	.word	0x80002400

08007100 <HAL_I2C_EV_IRQHandler>:
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <HAL_I2C_EV_IRQHandler+0x2c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_I2C_SlaveTxCpltCallback>:
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_I2C_SlaveRxCpltCallback>:
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_I2C_AddrCallback>:
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
 8007168:	4613      	mov	r3, r2
 800716a:	803b      	strh	r3, [r7, #0]
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_I2C_ListenCpltCallback>:
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_I2C_MemTxCpltCallback>:
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_I2C_MemRxCpltCallback>:
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_I2C_ErrorCallback>:
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_I2C_AbortCpltCallback>:
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <I2C_Master_ISR_IT>:
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <I2C_Master_ISR_IT+0x1e>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e108      	b.n	800740c <I2C_Master_ISR_IT+0x230>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	d012      	beq.n	8007232 <I2C_Master_ISR_IT+0x56>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <I2C_Master_ISR_IT+0x56>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2210      	movs	r2, #16
 800721c:	61da      	str	r2, [r3, #28]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007222:	f043 0204 	orr.w	r2, r3, #4
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	645a      	str	r2, [r3, #68]	; 0x44
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f001 f91d 	bl	800846a <I2C_Flush_TXDR>
 8007230:	e0d9      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d022      	beq.n	8007282 <I2C_Master_ISR_IT+0xa6>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d01d      	beq.n	8007282 <I2C_Master_ISR_IT+0xa6>
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 0304 	bic.w	r3, r3, #4
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	625a      	str	r2, [r3, #36]	; 0x24
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	851a      	strh	r2, [r3, #40]	; 0x28
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007280:	e0b1      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01d      	beq.n	80072c8 <I2C_Master_ISR_IT+0xec>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d018      	beq.n	80072c8 <I2C_Master_ISR_IT+0xec>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	629a      	str	r2, [r3, #40]	; 0x28
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072c6:	e08e      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d05c      	beq.n	800738c <I2C_Master_ISR_IT+0x1b0>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d057      	beq.n	800738c <I2C_Master_ISR_IT+0x1b0>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d040      	beq.n	8007368 <I2C_Master_ISR_IT+0x18c>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d13c      	bne.n	8007368 <I2C_Master_ISR_IT+0x18c>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072fa:	827b      	strh	r3, [r7, #18]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2bff      	cmp	r3, #255	; 0xff
 8007304:	d90e      	bls.n	8007324 <I2C_Master_ISR_IT+0x148>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	22ff      	movs	r2, #255	; 0xff
 800730a:	851a      	strh	r2, [r3, #40]	; 0x28
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007310:	b2da      	uxtb	r2, r3
 8007312:	8a79      	ldrh	r1, [r7, #18]
 8007314:	2300      	movs	r3, #0
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f001 fb21 	bl	8008964 <I2C_TransferConfig>
 8007322:	e032      	b.n	800738a <I2C_Master_ISR_IT+0x1ae>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	851a      	strh	r2, [r3, #40]	; 0x28
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007336:	d00b      	beq.n	8007350 <I2C_Master_ISR_IT+0x174>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733c:	b2da      	uxtb	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	8a79      	ldrh	r1, [r7, #18]
 8007344:	2000      	movs	r0, #0
 8007346:	9000      	str	r0, [sp, #0]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 fb0b 	bl	8008964 <I2C_TransferConfig>
 800734e:	e01c      	b.n	800738a <I2C_Master_ISR_IT+0x1ae>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007354:	b2da      	uxtb	r2, r3
 8007356:	8a79      	ldrh	r1, [r7, #18]
 8007358:	2300      	movs	r3, #0
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 faff 	bl	8008964 <I2C_TransferConfig>
 8007366:	e010      	b.n	800738a <I2C_Master_ISR_IT+0x1ae>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007376:	d003      	beq.n	8007380 <I2C_Master_ISR_IT+0x1a4>
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fca3 	bl	8007cc4 <I2C_ITMasterSeqCplt>
 800737e:	e032      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 8007380:	2140      	movs	r1, #64	; 0x40
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 ff5a 	bl	800823c <I2C_ITError>
 8007388:	e02d      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 800738a:	e02c      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d027      	beq.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d022      	beq.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d119      	bne.n	80073de <I2C_Master_ISR_IT+0x202>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b8:	d015      	beq.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073c2:	d108      	bne.n	80073d6 <I2C_Master_ISR_IT+0x1fa>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073d2:	605a      	str	r2, [r3, #4]
 80073d4:	e007      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fc74 	bl	8007cc4 <I2C_ITMasterSeqCplt>
 80073dc:	e003      	b.n	80073e6 <I2C_Master_ISR_IT+0x20a>
 80073de:	2140      	movs	r1, #64	; 0x40
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 ff2b 	bl	800823c <I2C_ITError>
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d008      	beq.n	8007402 <I2C_Master_ISR_IT+0x226>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <I2C_Master_ISR_IT+0x226>
 80073fa:	6979      	ldr	r1, [r7, #20]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fcfb 	bl	8007df8 <I2C_ITMasterCplt>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800740a:	2300      	movs	r3, #0
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <I2C_Slave_ISR_IT>:
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	613b      	str	r3, [r7, #16]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <I2C_Slave_ISR_IT+0x24>
 8007434:	2302      	movs	r3, #2
 8007436:	e0e1      	b.n	80075fc <I2C_Slave_ISR_IT+0x1e8>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d008      	beq.n	800745c <I2C_Slave_ISR_IT+0x48>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <I2C_Slave_ISR_IT+0x48>
 8007454:	6939      	ldr	r1, [r7, #16]
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 fd96 	bl	8007f88 <I2C_ITSlaveCplt>
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	2b00      	cmp	r3, #0
 8007464:	d04b      	beq.n	80074fe <I2C_Slave_ISR_IT+0xea>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b00      	cmp	r3, #0
 800746e:	d046      	beq.n	80074fe <I2C_Slave_ISR_IT+0xea>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d128      	bne.n	80074cc <I2C_Slave_ISR_IT+0xb8>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b28      	cmp	r3, #40	; 0x28
 8007484:	d108      	bne.n	8007498 <I2C_Slave_ISR_IT+0x84>
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800748c:	d104      	bne.n	8007498 <I2C_Slave_ISR_IT+0x84>
 800748e:	6939      	ldr	r1, [r7, #16]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fe7f 	bl	8008194 <I2C_ITListenCplt>
 8007496:	e031      	b.n	80074fc <I2C_Slave_ISR_IT+0xe8>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b29      	cmp	r3, #41	; 0x29
 80074a2:	d10e      	bne.n	80074c2 <I2C_Slave_ISR_IT+0xae>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074aa:	d00a      	beq.n	80074c2 <I2C_Slave_ISR_IT+0xae>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2210      	movs	r2, #16
 80074b2:	61da      	str	r2, [r3, #28]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 ffd8 	bl	800846a <I2C_Flush_TXDR>
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fc3f 	bl	8007d3e <I2C_ITSlaveSeqCplt>
 80074c0:	e01c      	b.n	80074fc <I2C_Slave_ISR_IT+0xe8>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2210      	movs	r2, #16
 80074c8:	61da      	str	r2, [r3, #28]
 80074ca:	e08f      	b.n	80075ec <I2C_Slave_ISR_IT+0x1d8>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2210      	movs	r2, #16
 80074d2:	61da      	str	r2, [r3, #28]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d8:	f043 0204 	orr.w	r2, r3, #4
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	645a      	str	r2, [r3, #68]	; 0x44
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <I2C_Slave_ISR_IT+0xda>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074ec:	d17e      	bne.n	80075ec <I2C_Slave_ISR_IT+0x1d8>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f2:	4619      	mov	r1, r3
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fea1 	bl	800823c <I2C_ITError>
 80074fa:	e077      	b.n	80075ec <I2C_Slave_ISR_IT+0x1d8>
 80074fc:	e076      	b.n	80075ec <I2C_Slave_ISR_IT+0x1d8>
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d02f      	beq.n	8007568 <I2C_Slave_ISR_IT+0x154>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d02a      	beq.n	8007568 <I2C_Slave_ISR_IT+0x154>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d018      	beq.n	800754e <I2C_Slave_ISR_IT+0x13a>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	625a      	str	r2, [r3, #36]	; 0x24
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d14b      	bne.n	80075f0 <I2C_Slave_ISR_IT+0x1dc>
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800755e:	d047      	beq.n	80075f0 <I2C_Slave_ISR_IT+0x1dc>
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fbec 	bl	8007d3e <I2C_ITSlaveSeqCplt>
 8007566:	e043      	b.n	80075f0 <I2C_Slave_ISR_IT+0x1dc>
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <I2C_Slave_ISR_IT+0x172>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <I2C_Slave_ISR_IT+0x172>
 800757c:	6939      	ldr	r1, [r7, #16]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fb1c 	bl	8007bbc <I2C_ITAddrCplt>
 8007584:	e035      	b.n	80075f2 <I2C_Slave_ISR_IT+0x1de>
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d030      	beq.n	80075f2 <I2C_Slave_ISR_IT+0x1de>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d02b      	beq.n	80075f2 <I2C_Slave_ISR_IT+0x1de>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d018      	beq.n	80075d6 <I2C_Slave_ISR_IT+0x1c2>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80075d4:	e00d      	b.n	80075f2 <I2C_Slave_ISR_IT+0x1de>
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075dc:	d002      	beq.n	80075e4 <I2C_Slave_ISR_IT+0x1d0>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <I2C_Slave_ISR_IT+0x1de>
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fbaa 	bl	8007d3e <I2C_ITSlaveSeqCplt>
 80075ea:	e002      	b.n	80075f2 <I2C_Slave_ISR_IT+0x1de>
 80075ec:	bf00      	nop
 80075ee:	e000      	b.n	80075f2 <I2C_Slave_ISR_IT+0x1de>
 80075f0:	bf00      	nop
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075fa:	2300      	movs	r3, #0
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <I2C_Master_ISR_DMA>:
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af02      	add	r7, sp, #8
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <I2C_Master_ISR_DMA+0x1a>
 800761a:	2302      	movs	r3, #2
 800761c:	e0d9      	b.n	80077d2 <I2C_Master_ISR_DMA+0x1ce>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b00      	cmp	r3, #0
 800762e:	d016      	beq.n	800765e <I2C_Master_ISR_DMA+0x5a>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b00      	cmp	r3, #0
 8007638:	d011      	beq.n	800765e <I2C_Master_ISR_DMA+0x5a>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2210      	movs	r2, #16
 8007640:	61da      	str	r2, [r3, #28]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	f043 0204 	orr.w	r2, r3, #4
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	645a      	str	r2, [r3, #68]	; 0x44
 800764e:	2120      	movs	r1, #32
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f001 f9b9 	bl	80089c8 <I2C_Enable_IRQ>
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 ff07 	bl	800846a <I2C_Flush_TXDR>
 800765c:	e0b4      	b.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d071      	beq.n	800774c <I2C_Master_ISR_DMA+0x148>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d06c      	beq.n	800774c <I2C_Master_ISR_DMA+0x148>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d04e      	beq.n	800772a <I2C_Master_ISR_DMA+0x126>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007698:	827b      	strh	r3, [r7, #18]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2bff      	cmp	r3, #255	; 0xff
 80076a2:	d906      	bls.n	80076b2 <I2C_Master_ISR_DMA+0xae>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	22ff      	movs	r2, #255	; 0xff
 80076a8:	851a      	strh	r2, [r3, #40]	; 0x28
 80076aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	e010      	b.n	80076d4 <I2C_Master_ISR_DMA+0xd0>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076c4:	d003      	beq.n	80076ce <I2C_Master_ISR_DMA+0xca>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e002      	b.n	80076d4 <I2C_Master_ISR_DMA+0xd0>
 80076ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	8a79      	ldrh	r1, [r7, #18]
 80076dc:	2300      	movs	r3, #0
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f001 f93e 	bl	8008964 <I2C_TransferConfig>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b22      	cmp	r3, #34	; 0x22
 8007704:	d108      	bne.n	8007718 <I2C_Master_ISR_DMA+0x114>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e057      	b.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e04e      	b.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007738:	d003      	beq.n	8007742 <I2C_Master_ISR_DMA+0x13e>
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fac2 	bl	8007cc4 <I2C_ITMasterSeqCplt>
 8007740:	e042      	b.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 8007742:	2140      	movs	r1, #64	; 0x40
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fd79 	bl	800823c <I2C_ITError>
 800774a:	e03d      	b.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d028      	beq.n	80077a8 <I2C_Master_ISR_DMA+0x1a4>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d023      	beq.n	80077a8 <I2C_Master_ISR_DMA+0x1a4>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d119      	bne.n	800779e <I2C_Master_ISR_DMA+0x19a>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007778:	d025      	beq.n	80077c6 <I2C_Master_ISR_DMA+0x1c2>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007782:	d108      	bne.n	8007796 <I2C_Master_ISR_DMA+0x192>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007792:	605a      	str	r2, [r3, #4]
 8007794:	e017      	b.n	80077c6 <I2C_Master_ISR_DMA+0x1c2>
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fa94 	bl	8007cc4 <I2C_ITMasterSeqCplt>
 800779c:	e013      	b.n	80077c6 <I2C_Master_ISR_DMA+0x1c2>
 800779e:	2140      	movs	r1, #64	; 0x40
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fd4b 	bl	800823c <I2C_ITError>
 80077a6:	e00e      	b.n	80077c6 <I2C_Master_ISR_DMA+0x1c2>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fb1a 	bl	8007df8 <I2C_ITMasterCplt>
 80077c4:	e000      	b.n	80077c8 <I2C_Master_ISR_DMA+0x1c4>
 80077c6:	bf00      	nop
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077d0:	2300      	movs	r3, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <I2C_Mem_ISR_DMA>:
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	4b87      	ldr	r3, [pc, #540]	; (8007a08 <I2C_Mem_ISR_DMA+0x22c>)
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <I2C_Mem_ISR_DMA+0x1e>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e102      	b.n	8007a00 <I2C_Mem_ISR_DMA+0x224>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	d016      	beq.n	800783a <I2C_Mem_ISR_DMA+0x5e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f003 0310 	and.w	r3, r3, #16
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <I2C_Mem_ISR_DMA+0x5e>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2210      	movs	r2, #16
 800781c:	61da      	str	r2, [r3, #28]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	f043 0204 	orr.w	r2, r3, #4
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	645a      	str	r2, [r3, #68]	; 0x44
 800782a:	2120      	movs	r1, #32
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f001 f8cb 	bl	80089c8 <I2C_Enable_IRQ>
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fe19 	bl	800846a <I2C_Flush_TXDR>
 8007838:	e0dd      	b.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00e      	beq.n	8007862 <I2C_Mem_ISR_DMA+0x86>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <I2C_Mem_ISR_DMA+0x86>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007856:	629a      	str	r2, [r3, #40]	; 0x28
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f04f 32ff 	mov.w	r2, #4294967295
 800785e:	651a      	str	r2, [r3, #80]	; 0x50
 8007860:	e0c9      	b.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007868:	2b00      	cmp	r3, #0
 800786a:	d05b      	beq.n	8007924 <I2C_Mem_ISR_DMA+0x148>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d056      	beq.n	8007924 <I2C_Mem_ISR_DMA+0x148>
 8007876:	2110      	movs	r1, #16
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f001 f8a5 	bl	80089c8 <I2C_Enable_IRQ>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d048      	beq.n	800791a <I2C_Mem_ISR_DMA+0x13e>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2bff      	cmp	r3, #255	; 0xff
 8007890:	d910      	bls.n	80078b4 <I2C_Mem_ISR_DMA+0xd8>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	22ff      	movs	r2, #255	; 0xff
 8007896:	851a      	strh	r2, [r3, #40]	; 0x28
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789c:	b299      	uxth	r1, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	2300      	movs	r3, #0
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f001 f859 	bl	8008964 <I2C_TransferConfig>
 80078b2:	e011      	b.n	80078d8 <I2C_Mem_ISR_DMA+0xfc>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	b299      	uxth	r1, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	2300      	movs	r3, #0
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f001 f846 	bl	8008964 <I2C_TransferConfig>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b22      	cmp	r3, #34	; 0x22
 80078f4:	d108      	bne.n	8007908 <I2C_Mem_ISR_DMA+0x12c>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e076      	b.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e06d      	b.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 800791a:	2140      	movs	r1, #64	; 0x40
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fc8d 	bl	800823c <I2C_ITError>
 8007922:	e068      	b.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d055      	beq.n	80079da <I2C_Mem_ISR_DMA+0x1fe>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b00      	cmp	r3, #0
 8007936:	d050      	beq.n	80079da <I2C_Mem_ISR_DMA+0x1fe>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b22      	cmp	r3, #34	; 0x22
 8007942:	d101      	bne.n	8007948 <I2C_Mem_ISR_DMA+0x16c>
 8007944:	4b31      	ldr	r3, [pc, #196]	; (8007a0c <I2C_Mem_ISR_DMA+0x230>)
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d910      	bls.n	8007974 <I2C_Mem_ISR_DMA+0x198>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	22ff      	movs	r2, #255	; 0xff
 8007956:	851a      	strh	r2, [r3, #40]	; 0x28
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795c:	b299      	uxth	r1, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007962:	b2da      	uxtb	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fff9 	bl	8008964 <I2C_TransferConfig>
 8007972:	e011      	b.n	8007998 <I2C_Mem_ISR_DMA+0x1bc>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	851a      	strh	r2, [r3, #40]	; 0x28
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	b299      	uxth	r1, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007988:	b2da      	uxtb	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 ffe6 	bl	8008964 <I2C_TransferConfig>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b22      	cmp	r3, #34	; 0x22
 80079b4:	d108      	bne.n	80079c8 <I2C_Mem_ISR_DMA+0x1ec>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	e016      	b.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	e00d      	b.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <I2C_Mem_ISR_DMA+0x21a>
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fa01 	bl	8007df8 <I2C_ITMasterCplt>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079fe:	2300      	movs	r3, #0
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	80002000 	.word	0x80002000
 8007a0c:	80002400 	.word	0x80002400

08007a10 <I2C_Slave_ISR_DMA>:
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <I2C_Slave_ISR_DMA+0x24>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e0bf      	b.n	8007bb4 <I2C_Slave_ISR_DMA+0x1a4>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <I2C_Slave_ISR_DMA+0x48>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <I2C_Slave_ISR_DMA+0x48>
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fa98 	bl	8007f88 <I2C_ITSlaveCplt>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 0310 	and.w	r3, r3, #16
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 8095 	beq.w	8007b8e <I2C_Slave_ISR_DMA+0x17e>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 808f 	beq.w	8007b8e <I2C_Slave_ISR_DMA+0x17e>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <I2C_Slave_ISR_DMA+0x74>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d07d      	beq.n	8007b80 <I2C_Slave_ISR_DMA+0x170>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00c      	beq.n	8007aa6 <I2C_Slave_ISR_DMA+0x96>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <I2C_Slave_ISR_DMA+0x96>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <I2C_Slave_ISR_DMA+0x96>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00c      	beq.n	8007ac8 <I2C_Slave_ISR_DMA+0xb8>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <I2C_Slave_ISR_DMA+0xb8>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <I2C_Slave_ISR_DMA+0xb8>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d128      	bne.n	8007b20 <I2C_Slave_ISR_DMA+0x110>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b28      	cmp	r3, #40	; 0x28
 8007ad8:	d108      	bne.n	8007aec <I2C_Slave_ISR_DMA+0xdc>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ae0:	d104      	bne.n	8007aec <I2C_Slave_ISR_DMA+0xdc>
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fb55 	bl	8008194 <I2C_ITListenCplt>
 8007aea:	e048      	b.n	8007b7e <I2C_Slave_ISR_DMA+0x16e>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b29      	cmp	r3, #41	; 0x29
 8007af6:	d10e      	bne.n	8007b16 <I2C_Slave_ISR_DMA+0x106>
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007afe:	d00a      	beq.n	8007b16 <I2C_Slave_ISR_DMA+0x106>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2210      	movs	r2, #16
 8007b06:	61da      	str	r2, [r3, #28]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fcae 	bl	800846a <I2C_Flush_TXDR>
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f915 	bl	8007d3e <I2C_ITSlaveSeqCplt>
 8007b14:	e033      	b.n	8007b7e <I2C_Slave_ISR_DMA+0x16e>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	61da      	str	r2, [r3, #28]
 8007b1e:	e034      	b.n	8007b8a <I2C_Slave_ISR_DMA+0x17a>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2210      	movs	r2, #16
 8007b26:	61da      	str	r2, [r3, #28]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2c:	f043 0204 	orr.w	r2, r3, #4
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	645a      	str	r2, [r3, #68]	; 0x44
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b3a:	75fb      	strb	r3, [r7, #23]
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <I2C_Slave_ISR_DMA+0x13a>
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b48:	d11f      	bne.n	8007b8a <I2C_Slave_ISR_DMA+0x17a>
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b21      	cmp	r3, #33	; 0x21
 8007b4e:	d002      	beq.n	8007b56 <I2C_Slave_ISR_DMA+0x146>
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	2b29      	cmp	r3, #41	; 0x29
 8007b54:	d103      	bne.n	8007b5e <I2C_Slave_ISR_DMA+0x14e>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2221      	movs	r2, #33	; 0x21
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8007b5c:	e008      	b.n	8007b70 <I2C_Slave_ISR_DMA+0x160>
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	2b22      	cmp	r3, #34	; 0x22
 8007b62:	d002      	beq.n	8007b6a <I2C_Slave_ISR_DMA+0x15a>
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	2b2a      	cmp	r3, #42	; 0x2a
 8007b68:	d102      	bne.n	8007b70 <I2C_Slave_ISR_DMA+0x160>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2222      	movs	r2, #34	; 0x22
 8007b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b74:	4619      	mov	r1, r3
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fb60 	bl	800823c <I2C_ITError>
 8007b7c:	e005      	b.n	8007b8a <I2C_Slave_ISR_DMA+0x17a>
 8007b7e:	e004      	b.n	8007b8a <I2C_Slave_ISR_DMA+0x17a>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2210      	movs	r2, #16
 8007b86:	61da      	str	r2, [r3, #28]
 8007b88:	e00f      	b.n	8007baa <I2C_Slave_ISR_DMA+0x19a>
 8007b8a:	bf00      	nop
 8007b8c:	e00d      	b.n	8007baa <I2C_Slave_ISR_DMA+0x19a>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <I2C_Slave_ISR_DMA+0x19a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <I2C_Slave_ISR_DMA+0x19a>
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f809 	bl	8007bbc <I2C_ITAddrCplt>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <I2C_ITAddrCplt>:
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bd2:	2b28      	cmp	r3, #40	; 0x28
 8007bd4:	d16a      	bne.n	8007cac <I2C_ITAddrCplt+0xf0>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007bf4:	81bb      	strh	r3, [r7, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c02:	817b      	strh	r3, [r7, #10]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007c10:	813b      	strh	r3, [r7, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d138      	bne.n	8007c8c <I2C_ITAddrCplt+0xd0>
 8007c1a:	897b      	ldrh	r3, [r7, #10]
 8007c1c:	09db      	lsrs	r3, r3, #7
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	89bb      	ldrh	r3, [r7, #12]
 8007c22:	4053      	eors	r3, r2
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f003 0306 	and.w	r3, r3, #6
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d11c      	bne.n	8007c68 <I2C_ITAddrCplt+0xac>
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	81bb      	strh	r3, [r7, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	649a      	str	r2, [r3, #72]	; 0x48
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d13b      	bne.n	8007cbc <I2C_ITAddrCplt+0x100>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	649a      	str	r2, [r3, #72]	; 0x48
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2208      	movs	r2, #8
 8007c50:	61da      	str	r2, [r3, #28]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c5a:	89ba      	ldrh	r2, [r7, #12]
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fa7b 	bl	800715c <HAL_I2C_AddrCallback>
 8007c66:	e029      	b.n	8007cbc <I2C_ITAddrCplt+0x100>
 8007c68:	893b      	ldrh	r3, [r7, #8]
 8007c6a:	81bb      	strh	r3, [r7, #12]
 8007c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 ff31 	bl	8008ad8 <I2C_Disable_IRQ>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c7e:	89ba      	ldrh	r2, [r7, #12]
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fa69 	bl	800715c <HAL_I2C_AddrCallback>
 8007c8a:	e017      	b.n	8007cbc <I2C_ITAddrCplt+0x100>
 8007c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 ff21 	bl	8008ad8 <I2C_Disable_IRQ>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c9e:	89ba      	ldrh	r2, [r7, #12]
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff fa59 	bl	800715c <HAL_I2C_AddrCallback>
 8007caa:	e007      	b.n	8007cbc <I2C_ITAddrCplt+0x100>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	61da      	str	r2, [r3, #28]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <I2C_ITMasterSeqCplt>:
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b21      	cmp	r3, #33	; 0x21
 8007cde:	d115      	bne.n	8007d0c <I2C_ITMasterSeqCplt+0x48>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2211      	movs	r2, #17
 8007cec:	631a      	str	r2, [r3, #48]	; 0x30
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	635a      	str	r2, [r3, #52]	; 0x34
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 feee 	bl	8008ad8 <I2C_Disable_IRQ>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7fa fa6a 	bl	80021de <HAL_I2C_MasterTxCpltCallback>
 8007d0a:	e014      	b.n	8007d36 <I2C_ITMasterSeqCplt+0x72>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2212      	movs	r2, #18
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8007d20:	2102      	movs	r1, #2
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fed8 	bl	8008ad8 <I2C_Disable_IRQ>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fa fa49 	bl	80021c8 <HAL_I2C_MasterRxCpltCallback>
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <I2C_ITSlaveSeqCplt>:
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <I2C_ITSlaveSeqCplt+0x34>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	e00c      	b.n	8007d8c <I2C_ITSlaveSeqCplt+0x4e>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <I2C_ITSlaveSeqCplt+0x4e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b29      	cmp	r3, #41	; 0x29
 8007d96:	d112      	bne.n	8007dbe <I2C_ITSlaveSeqCplt+0x80>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2228      	movs	r2, #40	; 0x28
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2221      	movs	r2, #33	; 0x21
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30
 8007da6:	2101      	movs	r1, #1
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fe95 	bl	8008ad8 <I2C_Disable_IRQ>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7ff f9bc 	bl	8007134 <HAL_I2C_SlaveTxCpltCallback>
 8007dbc:	e017      	b.n	8007dee <I2C_ITSlaveSeqCplt+0xb0>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc8:	d111      	bne.n	8007dee <I2C_ITSlaveSeqCplt+0xb0>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2228      	movs	r2, #40	; 0x28
 8007dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2222      	movs	r2, #34	; 0x22
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8007dd8:	2102      	movs	r1, #2
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fe7c 	bl	8008ad8 <I2C_Disable_IRQ>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff f9ad 	bl	8007148 <HAL_I2C_SlaveRxCpltCallback>
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <I2C_ITMasterCplt>:
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	61da      	str	r2, [r3, #28]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b21      	cmp	r3, #33	; 0x21
 8007e18:	d107      	bne.n	8007e2a <I2C_ITMasterCplt+0x32>
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fe5b 	bl	8008ad8 <I2C_Disable_IRQ>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2211      	movs	r2, #17
 8007e26:	631a      	str	r2, [r3, #48]	; 0x30
 8007e28:	e00c      	b.n	8007e44 <I2C_ITMasterCplt+0x4c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b22      	cmp	r3, #34	; 0x22
 8007e34:	d106      	bne.n	8007e44 <I2C_ITMasterCplt+0x4c>
 8007e36:	2102      	movs	r1, #2
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fe4d 	bl	8008ad8 <I2C_Disable_IRQ>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2212      	movs	r2, #18
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b4c      	ldr	r3, [pc, #304]	; (8007f80 <I2C_ITMasterCplt+0x188>)
 8007e50:	400b      	ands	r3, r1
 8007e52:	6053      	str	r3, [r2, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	635a      	str	r2, [r3, #52]	; 0x34
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a49      	ldr	r2, [pc, #292]	; (8007f84 <I2C_ITMasterCplt+0x18c>)
 8007e5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <I2C_ITMasterCplt+0x86>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2210      	movs	r2, #16
 8007e70:	61da      	str	r2, [r3, #28]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e76:	f043 0204 	orr.w	r2, r3, #4
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	645a      	str	r2, [r3, #68]	; 0x44
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b60      	cmp	r3, #96	; 0x60
 8007e88:	d10a      	bne.n	8007ea0 <I2C_ITMasterCplt+0xa8>
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <I2C_ITMasterCplt+0xa8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fae2 	bl	800846a <I2C_Flush_TXDR>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b60      	cmp	r3, #96	; 0x60
 8007eb6:	d002      	beq.n	8007ebe <I2C_ITMasterCplt+0xc6>
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d006      	beq.n	8007ecc <I2C_ITMasterCplt+0xd4>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9b9 	bl	800823c <I2C_ITError>
 8007eca:	e054      	b.n	8007f76 <I2C_ITMasterCplt+0x17e>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b21      	cmp	r3, #33	; 0x21
 8007ed6:	d124      	bne.n	8007f22 <I2C_ITMasterCplt+0x12a>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d10b      	bne.n	8007f0a <I2C_ITMasterCplt+0x112>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff f942 	bl	800718c <HAL_I2C_MemTxCpltCallback>
 8007f08:	e035      	b.n	8007f76 <I2C_ITMasterCplt+0x17e>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fa f95f 	bl	80021de <HAL_I2C_MasterTxCpltCallback>
 8007f20:	e029      	b.n	8007f76 <I2C_ITMasterCplt+0x17e>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b22      	cmp	r3, #34	; 0x22
 8007f2c:	d123      	bne.n	8007f76 <I2C_ITMasterCplt+0x17e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d10b      	bne.n	8007f60 <I2C_ITMasterCplt+0x168>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff f921 	bl	80071a0 <HAL_I2C_MemRxCpltCallback>
 8007f5e:	e00a      	b.n	8007f76 <I2C_ITMasterCplt+0x17e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7fa f929 	bl	80021c8 <HAL_I2C_MasterRxCpltCallback>
 8007f76:	bf00      	nop
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	fe00e800 	.word	0xfe00e800
 8007f84:	ffff0000 	.word	0xffff0000

08007f88 <I2C_ITSlaveCplt>:
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fa4:	73fb      	strb	r3, [r7, #15]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2220      	movs	r2, #32
 8007fac:	61da      	str	r2, [r3, #28]
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b21      	cmp	r3, #33	; 0x21
 8007fb2:	d002      	beq.n	8007fba <I2C_ITSlaveCplt+0x32>
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b29      	cmp	r3, #41	; 0x29
 8007fb8:	d108      	bne.n	8007fcc <I2C_ITSlaveCplt+0x44>
 8007fba:	f248 0101 	movw	r1, #32769	; 0x8001
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fd8a 	bl	8008ad8 <I2C_Disable_IRQ>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2221      	movs	r2, #33	; 0x21
 8007fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8007fca:	e00d      	b.n	8007fe8 <I2C_ITSlaveCplt+0x60>
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b22      	cmp	r3, #34	; 0x22
 8007fd0:	d002      	beq.n	8007fd8 <I2C_ITSlaveCplt+0x50>
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd6:	d107      	bne.n	8007fe8 <I2C_ITSlaveCplt+0x60>
 8007fd8:	f248 0102 	movw	r1, #32770	; 0x8002
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fd7b 	bl	8008ad8 <I2C_Disable_IRQ>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2222      	movs	r2, #34	; 0x22
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ff6:	605a      	str	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6859      	ldr	r1, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	4b62      	ldr	r3, [pc, #392]	; (800818c <I2C_ITSlaveCplt+0x204>)
 8008004:	400b      	ands	r3, r1
 8008006:	6053      	str	r3, [r2, #4]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa2e 	bl	800846a <I2C_Flush_TXDR>
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d013      	beq.n	8008040 <I2C_ITSlaveCplt+0xb8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01f      	beq.n	8008070 <I2C_ITSlaveCplt+0xe8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800803e:	e017      	b.n	8008070 <I2C_ITSlaveCplt+0xe8>
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d012      	beq.n	8008070 <I2C_ITSlaveCplt+0xe8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <I2C_ITSlaveCplt+0xe8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <I2C_ITSlaveCplt+0x134>
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f023 0304 	bic.w	r3, r3, #4
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	701a      	strb	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	625a      	str	r2, [r3, #36]	; 0x24
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00c      	beq.n	80080bc <I2C_ITSlaveCplt+0x134>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <I2C_ITSlaveCplt+0x14a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ca:	f043 0204 	orr.w	r2, r3, #4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	635a      	str	r2, [r3, #52]	; 0x34
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d010      	beq.n	800810a <I2C_ITSlaveCplt+0x182>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8a4 	bl	800823c <I2C_ITError>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b28      	cmp	r3, #40	; 0x28
 80080fe:	d141      	bne.n	8008184 <I2C_ITSlaveCplt+0x1fc>
 8008100:	6979      	ldr	r1, [r7, #20]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f846 	bl	8008194 <I2C_ITListenCplt>
 8008108:	e03c      	b.n	8008184 <I2C_ITSlaveCplt+0x1fc>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008112:	d014      	beq.n	800813e <I2C_ITSlaveCplt+0x1b6>
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff fe12 	bl	8007d3e <I2C_ITSlaveSeqCplt>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a1c      	ldr	r2, [pc, #112]	; (8008190 <I2C_ITSlaveCplt+0x208>)
 800811e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff f81e 	bl	8007178 <HAL_I2C_ListenCpltCallback>
 800813c:	e022      	b.n	8008184 <I2C_ITSlaveCplt+0x1fc>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b22      	cmp	r3, #34	; 0x22
 8008148:	d10e      	bne.n	8008168 <I2C_ITSlaveCplt+0x1e0>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7fe fff1 	bl	8007148 <HAL_I2C_SlaveRxCpltCallback>
 8008166:	e00d      	b.n	8008184 <I2C_ITSlaveCplt+0x1fc>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fe ffd8 	bl	8007134 <HAL_I2C_SlaveTxCpltCallback>
 8008184:	bf00      	nop
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	fe00e800 	.word	0xfe00e800
 8008190:	ffff0000 	.word	0xffff0000

08008194 <I2C_ITListenCplt>:
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a25      	ldr	r2, [pc, #148]	; (8008238 <I2C_ITListenCplt+0xa4>)
 80081a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	631a      	str	r2, [r3, #48]	; 0x30
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	635a      	str	r2, [r3, #52]	; 0x34
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d022      	beq.n	8008210 <I2C_ITListenCplt+0x7c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	625a      	str	r2, [r3, #36]	; 0x24
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d012      	beq.n	8008210 <I2C_ITListenCplt+0x7c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008208:	f043 0204 	orr.w	r2, r3, #4
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	645a      	str	r2, [r3, #68]	; 0x44
 8008210:	f248 0103 	movw	r1, #32771	; 0x8003
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc5f 	bl	8008ad8 <I2C_Disable_IRQ>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2210      	movs	r2, #16
 8008220:	61da      	str	r2, [r3, #28]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fe ffa4 	bl	8007178 <HAL_I2C_ListenCpltCallback>
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	ffff0000 	.word	0xffff0000

0800823c <I2C_ITError>:
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800824c:	73fb      	strb	r3, [r7, #15]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a6d      	ldr	r2, [pc, #436]	; (8008410 <I2C_ITError+0x1d4>)
 800825a:	62da      	str	r2, [r3, #44]	; 0x2c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	645a      	str	r2, [r3, #68]	; 0x44
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	2b28      	cmp	r3, #40	; 0x28
 8008272:	d005      	beq.n	8008280 <I2C_ITError+0x44>
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	2b29      	cmp	r3, #41	; 0x29
 8008278:	d002      	beq.n	8008280 <I2C_ITError+0x44>
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	2b2a      	cmp	r3, #42	; 0x2a
 800827e:	d10b      	bne.n	8008298 <I2C_ITError+0x5c>
 8008280:	2103      	movs	r1, #3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fc28 	bl	8008ad8 <I2C_Disable_IRQ>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2228      	movs	r2, #40	; 0x28
 800828c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a60      	ldr	r2, [pc, #384]	; (8008414 <I2C_ITError+0x1d8>)
 8008294:	635a      	str	r2, [r3, #52]	; 0x34
 8008296:	e030      	b.n	80082fa <I2C_ITError+0xbe>
 8008298:	f248 0103 	movw	r1, #32771	; 0x8003
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fc1b 	bl	8008ad8 <I2C_Disable_IRQ>
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8e1 	bl	800846a <I2C_Flush_TXDR>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b60      	cmp	r3, #96	; 0x60
 80082b2:	d01f      	beq.n	80082f4 <I2C_ITError+0xb8>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	d114      	bne.n	80082f4 <I2C_ITError+0xb8>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	f003 0310 	and.w	r3, r3, #16
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d109      	bne.n	80082ec <I2C_ITError+0xb0>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2210      	movs	r2, #16
 80082de:	61da      	str	r2, [r3, #28]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e4:	f043 0204 	orr.w	r2, r3, #4
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	645a      	str	r2, [r3, #68]	; 0x44
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2220      	movs	r2, #32
 80082f2:	61da      	str	r2, [r3, #28]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	635a      	str	r2, [r3, #52]	; 0x34
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fe:	60bb      	str	r3, [r7, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	2b00      	cmp	r3, #0
 8008306:	d039      	beq.n	800837c <I2C_ITError+0x140>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b11      	cmp	r3, #17
 800830c:	d002      	beq.n	8008314 <I2C_ITError+0xd8>
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b21      	cmp	r3, #33	; 0x21
 8008312:	d133      	bne.n	800837c <I2C_ITError+0x140>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800831e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008322:	d107      	bne.n	8008334 <I2C_ITError+0xf8>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	4618      	mov	r0, r3
 800833a:	f7fd ff8b 	bl	8006254 <HAL_DMA_GetState>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d017      	beq.n	8008374 <I2C_ITError+0x138>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	4a33      	ldr	r2, [pc, #204]	; (8008418 <I2C_ITError+0x1dc>)
 800834a:	635a      	str	r2, [r3, #52]	; 0x34
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	4618      	mov	r0, r3
 800835a:	f7fd fe9a 	bl	8006092 <HAL_DMA_Abort_IT>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d04d      	beq.n	8008400 <I2C_ITError+0x1c4>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800836e:	4610      	mov	r0, r2
 8008370:	4798      	blx	r3
 8008372:	e045      	b.n	8008400 <I2C_ITError+0x1c4>
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f851 	bl	800841c <I2C_TreatErrorCallback>
 800837a:	e041      	b.n	8008400 <I2C_ITError+0x1c4>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d039      	beq.n	80083f8 <I2C_ITError+0x1bc>
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b12      	cmp	r3, #18
 8008388:	d002      	beq.n	8008390 <I2C_ITError+0x154>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b22      	cmp	r3, #34	; 0x22
 800838e:	d133      	bne.n	80083f8 <I2C_ITError+0x1bc>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800839a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800839e:	d107      	bne.n	80083b0 <I2C_ITError+0x174>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fd ff4d 	bl	8006254 <HAL_DMA_GetState>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d017      	beq.n	80083f0 <I2C_ITError+0x1b4>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c4:	4a14      	ldr	r2, [pc, #80]	; (8008418 <I2C_ITError+0x1dc>)
 80083c6:	635a      	str	r2, [r3, #52]	; 0x34
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fd fe5c 	bl	8006092 <HAL_DMA_Abort_IT>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d011      	beq.n	8008404 <I2C_ITError+0x1c8>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083ea:	4610      	mov	r0, r2
 80083ec:	4798      	blx	r3
 80083ee:	e009      	b.n	8008404 <I2C_ITError+0x1c8>
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f813 	bl	800841c <I2C_TreatErrorCallback>
 80083f6:	e005      	b.n	8008404 <I2C_ITError+0x1c8>
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f80f 	bl	800841c <I2C_TreatErrorCallback>
 80083fe:	e002      	b.n	8008406 <I2C_ITError+0x1ca>
 8008400:	bf00      	nop
 8008402:	e000      	b.n	8008406 <I2C_ITError+0x1ca>
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	ffff0000 	.word	0xffff0000
 8008414:	08007415 	.word	0x08007415
 8008418:	080084b3 	.word	0x080084b3

0800841c <I2C_TreatErrorCallback>:
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b60      	cmp	r3, #96	; 0x60
 800842e:	d10e      	bne.n	800844e <I2C_TreatErrorCallback+0x32>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fe febe 	bl	80071c8 <HAL_I2C_AbortCpltCallback>
 800844c:	e009      	b.n	8008462 <I2C_TreatErrorCallback+0x46>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fe fea9 	bl	80071b4 <HAL_I2C_ErrorCallback>
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <I2C_Flush_TXDR>:
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b02      	cmp	r3, #2
 800847e:	d103      	bne.n	8008488 <I2C_Flush_TXDR+0x1e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2200      	movs	r2, #0
 8008486:	629a      	str	r2, [r3, #40]	; 0x28
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b01      	cmp	r3, #1
 8008494:	d007      	beq.n	80084a6 <I2C_Flush_TXDR+0x3c>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699a      	ldr	r2, [r3, #24]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0201 	orr.w	r2, r2, #1
 80084a4:	619a      	str	r2, [r3, #24]
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <I2C_DMAAbort>:
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <I2C_DMAAbort+0x1e>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	2200      	movs	r2, #0
 80084ce:	635a      	str	r2, [r3, #52]	; 0x34
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <I2C_DMAAbort+0x2e>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084dc:	2200      	movs	r2, #0
 80084de:	635a      	str	r2, [r3, #52]	; 0x34
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f7ff ff9b 	bl	800841c <I2C_TreatErrorCallback>
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <I2C_WaitOnFlagUntilTimeout>:
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	603b      	str	r3, [r7, #0]
 80084fa:	4613      	mov	r3, r2
 80084fc:	71fb      	strb	r3, [r7, #7]
 80084fe:	e031      	b.n	8008564 <I2C_WaitOnFlagUntilTimeout+0x76>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d02d      	beq.n	8008564 <I2C_WaitOnFlagUntilTimeout+0x76>
 8008508:	f7fd fbd2 	bl	8005cb0 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d302      	bcc.n	800851e <I2C_WaitOnFlagUntilTimeout+0x30>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d122      	bne.n	8008564 <I2C_WaitOnFlagUntilTimeout+0x76>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4013      	ands	r3, r2
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	bf0c      	ite	eq
 800852e:	2301      	moveq	r3, #1
 8008530:	2300      	movne	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	429a      	cmp	r2, r3
 800853a:	d113      	bne.n	8008564 <I2C_WaitOnFlagUntilTimeout+0x76>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008540:	f043 0220 	orr.w	r2, r3, #32
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	645a      	str	r2, [r3, #68]	; 0x44
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008560:	2301      	movs	r3, #1
 8008562:	e00f      	b.n	8008584 <I2C_WaitOnFlagUntilTimeout+0x96>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4013      	ands	r3, r2
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	429a      	cmp	r2, r3
 8008580:	d0be      	beq.n	8008500 <I2C_WaitOnFlagUntilTimeout+0x12>
 8008582:	2300      	movs	r3, #0
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <I2C_WaitOnTXISFlagUntilTimeout>:
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	e033      	b.n	8008602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	68b9      	ldr	r1, [r7, #8]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f900 	bl	80087a4 <I2C_IsErrorOccurred>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e031      	b.n	8008612 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d025      	beq.n	8008602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80085b6:	f7fd fb7b 	bl	8005cb0 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d302      	bcc.n	80085cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d11a      	bne.n	8008602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d013      	beq.n	8008602 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085de:	f043 0220 	orr.w	r2, r3, #32
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	645a      	str	r2, [r3, #68]	; 0x44
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085fe:	2301      	movs	r3, #1
 8008600:	e007      	b.n	8008612 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b02      	cmp	r3, #2
 800860e:	d1c4      	bne.n	800859a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8008610:	2300      	movs	r3, #0
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <I2C_WaitOnSTOPFlagUntilTimeout>:
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	e02f      	b.n	8008688 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f8b9 	bl	80087a4 <I2C_IsErrorOccurred>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8008638:	2301      	movs	r3, #1
 800863a:	e02d      	b.n	8008698 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 800863c:	f7fd fb38 	bl	8005cb0 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	429a      	cmp	r2, r3
 800864a:	d302      	bcc.n	8008652 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d11a      	bne.n	8008688 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b20      	cmp	r3, #32
 800865e:	d013      	beq.n	8008688 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008664:	f043 0220 	orr.w	r2, r3, #32
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	645a      	str	r2, [r3, #68]	; 0x44
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008684:	2301      	movs	r3, #1
 8008686:	e007      	b.n	8008698 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b20      	cmp	r3, #32
 8008694:	d1c8      	bne.n	8008628 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8008696:	2300      	movs	r3, #0
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	e06b      	b.n	8008786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f876 	bl	80087a4 <I2C_IsErrorOccurred>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
 80086be:	2301      	movs	r3, #1
 80086c0:	e069      	b.n	8008796 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d138      	bne.n	8008742 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d105      	bne.n	80086ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80086e6:	2300      	movs	r3, #0
 80086e8:	e055      	b.n	8008796 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b10      	cmp	r3, #16
 80086f6:	d107      	bne.n	8008708 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2210      	movs	r2, #16
 80086fe:	61da      	str	r2, [r3, #28]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2204      	movs	r2, #4
 8008704:	645a      	str	r2, [r3, #68]	; 0x44
 8008706:	e002      	b.n	800870e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	645a      	str	r2, [r3, #68]	; 0x44
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2220      	movs	r2, #32
 8008714:	61da      	str	r2, [r3, #28]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6859      	ldr	r1, [r3, #4]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	4b1f      	ldr	r3, [pc, #124]	; (80087a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008722:	400b      	ands	r3, r1
 8008724:	6053      	str	r3, [r2, #4]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800873e:	2301      	movs	r3, #1
 8008740:	e029      	b.n	8008796 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008742:	f7fd fab5 	bl	8005cb0 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	429a      	cmp	r2, r3
 8008750:	d302      	bcc.n	8008758 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d116      	bne.n	8008786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b04      	cmp	r3, #4
 8008764:	d00f      	beq.n	8008786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	645a      	str	r2, [r3, #68]	; 0x44
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2220      	movs	r2, #32
 8008776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008782:	2301      	movs	r3, #1
 8008784:	e007      	b.n	8008796 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b04      	cmp	r3, #4
 8008792:	d18c      	bne.n	80086ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8008794:	2300      	movs	r3, #0
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	fe00e800 	.word	0xfe00e800

080087a4 <I2C_IsErrorOccurred>:
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	2300      	movs	r3, #0
 80087b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	2300      	movs	r3, #0
 80087c0:	623b      	str	r3, [r7, #32]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d068      	beq.n	80088a2 <I2C_IsErrorOccurred+0xfe>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2210      	movs	r2, #16
 80087d6:	61da      	str	r2, [r3, #28]
 80087d8:	e049      	b.n	800886e <I2C_IsErrorOccurred+0xca>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d045      	beq.n	800886e <I2C_IsErrorOccurred+0xca>
 80087e2:	f7fd fa65 	bl	8005cb0 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d302      	bcc.n	80087f8 <I2C_IsErrorOccurred+0x54>
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d13a      	bne.n	800886e <I2C_IsErrorOccurred+0xca>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800880a:	74fb      	strb	r3, [r7, #19]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800881a:	d121      	bne.n	8008860 <I2C_IsErrorOccurred+0xbc>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008822:	d01d      	beq.n	8008860 <I2C_IsErrorOccurred+0xbc>
 8008824:	7cfb      	ldrb	r3, [r7, #19]
 8008826:	2b20      	cmp	r3, #32
 8008828:	d01a      	beq.n	8008860 <I2C_IsErrorOccurred+0xbc>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008838:	605a      	str	r2, [r3, #4]
 800883a:	f7fd fa39 	bl	8005cb0 <HAL_GetTick>
 800883e:	61f8      	str	r0, [r7, #28]
 8008840:	e00e      	b.n	8008860 <I2C_IsErrorOccurred+0xbc>
 8008842:	f7fd fa35 	bl	8005cb0 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b19      	cmp	r3, #25
 800884e:	d907      	bls.n	8008860 <I2C_IsErrorOccurred+0xbc>
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	f043 0320 	orr.w	r3, r3, #32
 8008856:	623b      	str	r3, [r7, #32]
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800885e:	e006      	b.n	800886e <I2C_IsErrorOccurred+0xca>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b20      	cmp	r3, #32
 800886c:	d1e9      	bne.n	8008842 <I2C_IsErrorOccurred+0x9e>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b20      	cmp	r3, #32
 800887a:	d003      	beq.n	8008884 <I2C_IsErrorOccurred+0xe0>
 800887c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0aa      	beq.n	80087da <I2C_IsErrorOccurred+0x36>
 8008884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008888:	2b00      	cmp	r3, #0
 800888a:	d103      	bne.n	8008894 <I2C_IsErrorOccurred+0xf0>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2220      	movs	r2, #32
 8008892:	61da      	str	r2, [r3, #28]
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	f043 0304 	orr.w	r3, r3, #4
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	2301      	movs	r3, #1
 800889e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <I2C_IsErrorOccurred+0x128>
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	623b      	str	r3, [r7, #32]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088c4:	61da      	str	r2, [r3, #28]
 80088c6:	2301      	movs	r3, #1
 80088c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <I2C_IsErrorOccurred+0x14a>
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	f043 0308 	orr.w	r3, r3, #8
 80088dc:	623b      	str	r3, [r7, #32]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088e6:	61da      	str	r2, [r3, #28]
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <I2C_IsErrorOccurred+0x16c>
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	f043 0302 	orr.w	r3, r3, #2
 80088fe:	623b      	str	r3, [r7, #32]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008908:	61da      	str	r2, [r3, #28]
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01c      	beq.n	8008952 <I2C_IsErrorOccurred+0x1ae>
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7ff fda6 	bl	800846a <I2C_Flush_TXDR>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6859      	ldr	r1, [r3, #4]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <I2C_IsErrorOccurred+0x1bc>)
 800892a:	400b      	ands	r3, r1
 800892c:	6053      	str	r3, [r2, #4]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	431a      	orrs	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	645a      	str	r2, [r3, #68]	; 0x44
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008956:	4618      	mov	r0, r3
 8008958:	3728      	adds	r7, #40	; 0x28
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	fe00e800 	.word	0xfe00e800

08008964 <I2C_TransferConfig>:
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	607b      	str	r3, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	817b      	strh	r3, [r7, #10]
 8008972:	4613      	mov	r3, r2
 8008974:	727b      	strb	r3, [r7, #9]
 8008976:	897b      	ldrh	r3, [r7, #10]
 8008978:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800897c:	7a7b      	ldrb	r3, [r7, #9]
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	431a      	orrs	r2, r3
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	4313      	orrs	r3, r2
 800898e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	0d5b      	lsrs	r3, r3, #21
 800899e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80089a2:	4b08      	ldr	r3, [pc, #32]	; (80089c4 <I2C_TransferConfig+0x60>)
 80089a4:	430b      	orrs	r3, r1
 80089a6:	43db      	mvns	r3, r3
 80089a8:	ea02 0103 	and.w	r1, r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	03ff63ff 	.word	0x03ff63ff

080089c8 <I2C_Enable_IRQ>:
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	807b      	strh	r3, [r7, #2]
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	4a3b      	ldr	r2, [pc, #236]	; (8008acc <I2C_Enable_IRQ+0x104>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d032      	beq.n	8008a48 <I2C_Enable_IRQ+0x80>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	4a3a      	ldr	r2, [pc, #232]	; (8008ad0 <I2C_Enable_IRQ+0x108>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d02d      	beq.n	8008a48 <I2C_Enable_IRQ+0x80>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	4a38      	ldr	r2, [pc, #224]	; (8008ad4 <I2C_Enable_IRQ+0x10c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d028      	beq.n	8008a48 <I2C_Enable_IRQ+0x80>
 80089f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	da03      	bge.n	8008a06 <I2C_Enable_IRQ+0x3e>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	887b      	ldrh	r3, [r7, #2]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <I2C_Enable_IRQ+0x50>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	887b      	ldrh	r3, [r7, #2]
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <I2C_Enable_IRQ+0x62>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	887b      	ldrh	r3, [r7, #2]
 8008a2c:	2b10      	cmp	r3, #16
 8008a2e:	d103      	bne.n	8008a38 <I2C_Enable_IRQ+0x70>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	887b      	ldrh	r3, [r7, #2]
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	d138      	bne.n	8008ab0 <I2C_Enable_IRQ+0xe8>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f043 0320 	orr.w	r3, r3, #32
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	e033      	b.n	8008ab0 <I2C_Enable_IRQ+0xe8>
 8008a48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	da03      	bge.n	8008a58 <I2C_Enable_IRQ+0x90>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	887b      	ldrh	r3, [r7, #2]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <I2C_Enable_IRQ+0xa2>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	887b      	ldrh	r3, [r7, #2]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <I2C_Enable_IRQ+0xb4>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	887b      	ldrh	r3, [r7, #2]
 8008a7e:	2b10      	cmp	r3, #16
 8008a80:	d103      	bne.n	8008a8a <I2C_Enable_IRQ+0xc2>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	887b      	ldrh	r3, [r7, #2]
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d103      	bne.n	8008a98 <I2C_Enable_IRQ+0xd0>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	4a0d      	ldr	r2, [pc, #52]	; (8008ad4 <I2C_Enable_IRQ+0x10c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d006      	beq.n	8008ab0 <I2C_Enable_IRQ+0xe8>
 8008aa2:	887b      	ldrh	r3, [r7, #2]
 8008aa4:	2b40      	cmp	r3, #64	; 0x40
 8008aa6:	d103      	bne.n	8008ab0 <I2C_Enable_IRQ+0xe8>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6819      	ldr	r1, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	08007605 	.word	0x08007605
 8008ad0:	08007a11 	.word	0x08007a11
 8008ad4:	080077dd 	.word	0x080077dd

08008ad8 <I2C_Disable_IRQ>:
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	807b      	strh	r3, [r7, #2]
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	887b      	ldrh	r3, [r7, #2]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00f      	beq.n	8008b12 <I2C_Disable_IRQ+0x3a>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b06:	2b28      	cmp	r3, #40	; 0x28
 8008b08:	d003      	beq.n	8008b12 <I2C_Disable_IRQ+0x3a>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	887b      	ldrh	r3, [r7, #2]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00f      	beq.n	8008b3c <I2C_Disable_IRQ+0x64>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b30:	2b28      	cmp	r3, #40	; 0x28
 8008b32:	d003      	beq.n	8008b3c <I2C_Disable_IRQ+0x64>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da03      	bge.n	8008b4c <I2C_Disable_IRQ+0x74>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	887b      	ldrh	r3, [r7, #2]
 8008b4e:	2b10      	cmp	r3, #16
 8008b50:	d103      	bne.n	8008b5a <I2C_Disable_IRQ+0x82>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	887b      	ldrh	r3, [r7, #2]
 8008b5c:	2b20      	cmp	r3, #32
 8008b5e:	d103      	bne.n	8008b68 <I2C_Disable_IRQ+0x90>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f043 0320 	orr.w	r3, r3, #32
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	887b      	ldrh	r3, [r7, #2]
 8008b6a:	2b40      	cmp	r3, #64	; 0x40
 8008b6c:	d103      	bne.n	8008b76 <I2C_Disable_IRQ+0x9e>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6819      	ldr	r1, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	43da      	mvns	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	400a      	ands	r2, r1
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	bf00      	nop
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_I2CEx_ConfigAnalogFilter>:
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	d138      	bne.n	8008c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e032      	b.n	8008c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2224      	movs	r2, #36	; 0x24
 8008bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0201 	bic.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6819      	ldr	r1, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e000      	b.n	8008c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <HAL_I2CEx_ConfigDigitalFilter>:
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d139      	bne.n	8008cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e033      	b.n	8008cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2224      	movs	r2, #36	; 0x24
 8008c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f042 0201 	orr.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e000      	b.n	8008cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <HAL_RCC_OscConfig>:
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008cd4:	6018      	str	r0, [r3, #0]
 8008cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d102      	bne.n	8008cea <HAL_RCC_OscConfig+0x26>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f001 b823 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 8008cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 817d 	beq.w	8008ffa <HAL_RCC_OscConfig+0x336>
 8008d00:	4bbc      	ldr	r3, [pc, #752]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f003 030c 	and.w	r3, r3, #12
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d00c      	beq.n	8008d26 <HAL_RCC_OscConfig+0x62>
 8008d0c:	4bb9      	ldr	r3, [pc, #740]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f003 030c 	and.w	r3, r3, #12
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d15c      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x10e>
 8008d18:	4bb6      	ldr	r3, [pc, #728]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d24:	d155      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x10e>
 8008d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8008d2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008d32:	fa93 f3a3 	rbit	r3, r3
 8008d36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8008d3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008d3e:	fab3 f383 	clz	r3, r3
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	f043 0301 	orr.w	r3, r3, #1
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d102      	bne.n	8008d58 <HAL_RCC_OscConfig+0x94>
 8008d52:	4ba8      	ldr	r3, [pc, #672]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	e015      	b.n	8008d84 <HAL_RCC_OscConfig+0xc0>
 8008d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008d60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008d64:	fa93 f3a3 	rbit	r3, r3
 8008d68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008d74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008d78:	fa93 f3a3 	rbit	r3, r3
 8008d7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008d80:	4b9c      	ldr	r3, [pc, #624]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008d8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008d90:	fa92 f2a2 	rbit	r2, r2
 8008d94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8008d98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008d9c:	fab2 f282 	clz	r2, r2
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	f042 0220 	orr.w	r2, r2, #32
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	f002 021f 	and.w	r2, r2, #31
 8008dac:	2101      	movs	r1, #1
 8008dae:	fa01 f202 	lsl.w	r2, r1, r2
 8008db2:	4013      	ands	r3, r2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 811f 	beq.w	8008ff8 <HAL_RCC_OscConfig+0x334>
 8008dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f040 8116 	bne.w	8008ff8 <HAL_RCC_OscConfig+0x334>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f000 bfaf 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 8008dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de2:	d106      	bne.n	8008df2 <HAL_RCC_OscConfig+0x12e>
 8008de4:	4b83      	ldr	r3, [pc, #524]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a82      	ldr	r2, [pc, #520]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	e036      	b.n	8008e60 <HAL_RCC_OscConfig+0x19c>
 8008df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10c      	bne.n	8008e1c <HAL_RCC_OscConfig+0x158>
 8008e02:	4b7c      	ldr	r3, [pc, #496]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a7b      	ldr	r2, [pc, #492]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	4b79      	ldr	r3, [pc, #484]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a78      	ldr	r2, [pc, #480]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	e021      	b.n	8008e60 <HAL_RCC_OscConfig+0x19c>
 8008e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCC_OscConfig+0x184>
 8008e2e:	4b71      	ldr	r3, [pc, #452]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a70      	ldr	r2, [pc, #448]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	4b6e      	ldr	r3, [pc, #440]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a6d      	ldr	r2, [pc, #436]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e00b      	b.n	8008e60 <HAL_RCC_OscConfig+0x19c>
 8008e48:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a69      	ldr	r2, [pc, #420]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	4b67      	ldr	r3, [pc, #412]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a66      	ldr	r2, [pc, #408]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	4b64      	ldr	r3, [pc, #400]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	f023 020f 	bic.w	r2, r3, #15
 8008e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	495f      	ldr	r1, [pc, #380]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d059      	beq.n	8008f3e <HAL_RCC_OscConfig+0x27a>
 8008e8a:	f7fc ff11 	bl	8005cb0 <HAL_GetTick>
 8008e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8008e92:	e00a      	b.n	8008eaa <HAL_RCC_OscConfig+0x1e6>
 8008e94:	f7fc ff0c 	bl	8005cb0 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b64      	cmp	r3, #100	; 0x64
 8008ea2:	d902      	bls.n	8008eaa <HAL_RCC_OscConfig+0x1e6>
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	f000 bf43 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 8008eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008eae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8008eb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008eb6:	fa93 f3a3 	rbit	r3, r3
 8008eba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8008ebe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008ec2:	fab3 f383 	clz	r3, r3
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f043 0301 	orr.w	r3, r3, #1
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d102      	bne.n	8008edc <HAL_RCC_OscConfig+0x218>
 8008ed6:	4b47      	ldr	r3, [pc, #284]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	e015      	b.n	8008f08 <HAL_RCC_OscConfig+0x244>
 8008edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ee0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008ee4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8008ee8:	fa93 f3a3 	rbit	r3, r3
 8008eec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ef4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008ef8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8008efc:	fa93 f3a3 	rbit	r3, r3
 8008f00:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008f04:	4b3b      	ldr	r3, [pc, #236]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f0c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8008f10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008f14:	fa92 f2a2 	rbit	r2, r2
 8008f18:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8008f1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8008f20:	fab2 f282 	clz	r2, r2
 8008f24:	b2d2      	uxtb	r2, r2
 8008f26:	f042 0220 	orr.w	r2, r2, #32
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	f002 021f 	and.w	r2, r2, #31
 8008f30:	2101      	movs	r1, #1
 8008f32:	fa01 f202 	lsl.w	r2, r1, r2
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0ab      	beq.n	8008e94 <HAL_RCC_OscConfig+0x1d0>
 8008f3c:	e05d      	b.n	8008ffa <HAL_RCC_OscConfig+0x336>
 8008f3e:	f7fc feb7 	bl	8005cb0 <HAL_GetTick>
 8008f42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8008f46:	e00a      	b.n	8008f5e <HAL_RCC_OscConfig+0x29a>
 8008f48:	f7fc feb2 	bl	8005cb0 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b64      	cmp	r3, #100	; 0x64
 8008f56:	d902      	bls.n	8008f5e <HAL_RCC_OscConfig+0x29a>
 8008f58:	2303      	movs	r3, #3
 8008f5a:	f000 bee9 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 8008f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f62:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8008f66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8008f6a:	fa93 f3a3 	rbit	r3, r3
 8008f6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8008f72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008f76:	fab3 f383 	clz	r3, r3
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	095b      	lsrs	r3, r3, #5
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d102      	bne.n	8008f90 <HAL_RCC_OscConfig+0x2cc>
 8008f8a:	4b1a      	ldr	r3, [pc, #104]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	e015      	b.n	8008fbc <HAL_RCC_OscConfig+0x2f8>
 8008f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008f98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008f9c:	fa93 f3a3 	rbit	r3, r3
 8008fa0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fa8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008fac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008fb0:	fa93 f3a3 	rbit	r3, r3
 8008fb4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008fb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <HAL_RCC_OscConfig+0x330>)
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008fc0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8008fc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008fc8:	fa92 f2a2 	rbit	r2, r2
 8008fcc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8008fd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008fd4:	fab2 f282 	clz	r2, r2
 8008fd8:	b2d2      	uxtb	r2, r2
 8008fda:	f042 0220 	orr.w	r2, r2, #32
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	f002 021f 	and.w	r2, r2, #31
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1ab      	bne.n	8008f48 <HAL_RCC_OscConfig+0x284>
 8008ff0:	e003      	b.n	8008ffa <HAL_RCC_OscConfig+0x336>
 8008ff2:	bf00      	nop
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	bf00      	nop
 8008ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 817d 	beq.w	800930a <HAL_RCC_OscConfig+0x646>
 8009010:	4ba6      	ldr	r3, [pc, #664]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f003 030c 	and.w	r3, r3, #12
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00b      	beq.n	8009034 <HAL_RCC_OscConfig+0x370>
 800901c:	4ba3      	ldr	r3, [pc, #652]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f003 030c 	and.w	r3, r3, #12
 8009024:	2b08      	cmp	r3, #8
 8009026:	d172      	bne.n	800910e <HAL_RCC_OscConfig+0x44a>
 8009028:	4ba0      	ldr	r3, [pc, #640]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d16c      	bne.n	800910e <HAL_RCC_OscConfig+0x44a>
 8009034:	2302      	movs	r3, #2
 8009036:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800903a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800903e:	fa93 f3a3 	rbit	r3, r3
 8009042:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8009046:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800904a:	fab3 f383 	clz	r3, r3
 800904e:	b2db      	uxtb	r3, r3
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b01      	cmp	r3, #1
 800905c:	d102      	bne.n	8009064 <HAL_RCC_OscConfig+0x3a0>
 800905e:	4b93      	ldr	r3, [pc, #588]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	e013      	b.n	800908c <HAL_RCC_OscConfig+0x3c8>
 8009064:	2302      	movs	r3, #2
 8009066:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800906a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800906e:	fa93 f3a3 	rbit	r3, r3
 8009072:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009076:	2302      	movs	r3, #2
 8009078:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800907c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009080:	fa93 f3a3 	rbit	r3, r3
 8009084:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009088:	4b88      	ldr	r3, [pc, #544]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	2202      	movs	r2, #2
 800908e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8009092:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009096:	fa92 f2a2 	rbit	r2, r2
 800909a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800909e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80090a2:	fab2 f282 	clz	r2, r2
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	f042 0220 	orr.w	r2, r2, #32
 80090ac:	b2d2      	uxtb	r2, r2
 80090ae:	f002 021f 	and.w	r2, r2, #31
 80090b2:	2101      	movs	r1, #1
 80090b4:	fa01 f202 	lsl.w	r2, r1, r2
 80090b8:	4013      	ands	r3, r2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_RCC_OscConfig+0x410>
 80090be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80090c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d002      	beq.n	80090d4 <HAL_RCC_OscConfig+0x410>
 80090ce:	2301      	movs	r3, #1
 80090d0:	f000 be2e 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 80090d4:	4b75      	ldr	r3, [pc, #468]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80090e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	21f8      	movs	r1, #248	; 0xf8
 80090ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 80090ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80090f2:	fa91 f1a1 	rbit	r1, r1
 80090f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 80090fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80090fe:	fab1 f181 	clz	r1, r1
 8009102:	b2c9      	uxtb	r1, r1
 8009104:	408b      	lsls	r3, r1
 8009106:	4969      	ldr	r1, [pc, #420]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 8009108:	4313      	orrs	r3, r2
 800910a:	600b      	str	r3, [r1, #0]
 800910c:	e0fd      	b.n	800930a <HAL_RCC_OscConfig+0x646>
 800910e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 8088 	beq.w	8009230 <HAL_RCC_OscConfig+0x56c>
 8009120:	2301      	movs	r3, #1
 8009122:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8009126:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800912a:	fa93 f3a3 	rbit	r3, r3
 800912e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009132:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009136:	fab3 f383 	clz	r3, r3
 800913a:	b2db      	uxtb	r3, r3
 800913c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009140:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	461a      	mov	r2, r3
 8009148:	2301      	movs	r3, #1
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	f7fc fdb0 	bl	8005cb0 <HAL_GetTick>
 8009150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009154:	e00a      	b.n	800916c <HAL_RCC_OscConfig+0x4a8>
 8009156:	f7fc fdab 	bl	8005cb0 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d902      	bls.n	800916c <HAL_RCC_OscConfig+0x4a8>
 8009166:	2303      	movs	r3, #3
 8009168:	f000 bde2 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 800916c:	2302      	movs	r3, #2
 800916e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8009172:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8009176:	fa93 f3a3 	rbit	r3, r3
 800917a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800917e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009182:	fab3 f383 	clz	r3, r3
 8009186:	b2db      	uxtb	r3, r3
 8009188:	095b      	lsrs	r3, r3, #5
 800918a:	b2db      	uxtb	r3, r3
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b01      	cmp	r3, #1
 8009194:	d102      	bne.n	800919c <HAL_RCC_OscConfig+0x4d8>
 8009196:	4b45      	ldr	r3, [pc, #276]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	e013      	b.n	80091c4 <HAL_RCC_OscConfig+0x500>
 800919c:	2302      	movs	r3, #2
 800919e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80091a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80091a6:	fa93 f3a3 	rbit	r3, r3
 80091aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80091ae:	2302      	movs	r3, #2
 80091b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80091b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80091b8:	fa93 f3a3 	rbit	r3, r3
 80091bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80091c0:	4b3a      	ldr	r3, [pc, #232]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	2202      	movs	r2, #2
 80091c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80091ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80091ce:	fa92 f2a2 	rbit	r2, r2
 80091d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80091d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80091da:	fab2 f282 	clz	r2, r2
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	f042 0220 	orr.w	r2, r2, #32
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	f002 021f 	and.w	r2, r2, #31
 80091ea:	2101      	movs	r1, #1
 80091ec:	fa01 f202 	lsl.w	r2, r1, r2
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0af      	beq.n	8009156 <HAL_RCC_OscConfig+0x492>
 80091f6:	4b2d      	ldr	r3, [pc, #180]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	21f8      	movs	r1, #248	; 0xf8
 800920c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8009210:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009214:	fa91 f1a1 	rbit	r1, r1
 8009218:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 800921c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009220:	fab1 f181 	clz	r1, r1
 8009224:	b2c9      	uxtb	r1, r1
 8009226:	408b      	lsls	r3, r1
 8009228:	4920      	ldr	r1, [pc, #128]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 800922a:	4313      	orrs	r3, r2
 800922c:	600b      	str	r3, [r1, #0]
 800922e:	e06c      	b.n	800930a <HAL_RCC_OscConfig+0x646>
 8009230:	2301      	movs	r3, #1
 8009232:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009236:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800923a:	fa93 f3a3 	rbit	r3, r3
 800923e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009242:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009246:	fab3 f383 	clz	r3, r3
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009250:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	461a      	mov	r2, r3
 8009258:	2300      	movs	r3, #0
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	f7fc fd28 	bl	8005cb0 <HAL_GetTick>
 8009260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009264:	e00a      	b.n	800927c <HAL_RCC_OscConfig+0x5b8>
 8009266:	f7fc fd23 	bl	8005cb0 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d902      	bls.n	800927c <HAL_RCC_OscConfig+0x5b8>
 8009276:	2303      	movs	r3, #3
 8009278:	f000 bd5a 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 800927c:	2302      	movs	r3, #2
 800927e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009282:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009286:	fa93 f3a3 	rbit	r3, r3
 800928a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800928e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009292:	fab3 f383 	clz	r3, r3
 8009296:	b2db      	uxtb	r3, r3
 8009298:	095b      	lsrs	r3, r3, #5
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f043 0301 	orr.w	r3, r3, #1
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d104      	bne.n	80092b0 <HAL_RCC_OscConfig+0x5ec>
 80092a6:	4b01      	ldr	r3, [pc, #4]	; (80092ac <HAL_RCC_OscConfig+0x5e8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	e015      	b.n	80092d8 <HAL_RCC_OscConfig+0x614>
 80092ac:	40021000 	.word	0x40021000
 80092b0:	2302      	movs	r3, #2
 80092b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80092b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ba:	fa93 f3a3 	rbit	r3, r3
 80092be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80092c2:	2302      	movs	r3, #2
 80092c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80092c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092cc:	fa93 f3a3 	rbit	r3, r3
 80092d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092d4:	4bc8      	ldr	r3, [pc, #800]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2202      	movs	r2, #2
 80092da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80092de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80092e2:	fa92 f2a2 	rbit	r2, r2
 80092e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80092ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80092ee:	fab2 f282 	clz	r2, r2
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	f042 0220 	orr.w	r2, r2, #32
 80092f8:	b2d2      	uxtb	r2, r2
 80092fa:	f002 021f 	and.w	r2, r2, #31
 80092fe:	2101      	movs	r1, #1
 8009300:	fa01 f202 	lsl.w	r2, r1, r2
 8009304:	4013      	ands	r3, r2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1ad      	bne.n	8009266 <HAL_RCC_OscConfig+0x5a2>
 800930a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800930e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0308 	and.w	r3, r3, #8
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 8110 	beq.w	8009540 <HAL_RCC_OscConfig+0x87c>
 8009320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d079      	beq.n	8009424 <HAL_RCC_OscConfig+0x760>
 8009330:	2301      	movs	r3, #1
 8009332:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009336:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800933a:	fa93 f3a3 	rbit	r3, r3
 800933e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009346:	fab3 f383 	clz	r3, r3
 800934a:	b2db      	uxtb	r3, r3
 800934c:	461a      	mov	r2, r3
 800934e:	4bab      	ldr	r3, [pc, #684]	; (80095fc <HAL_RCC_OscConfig+0x938>)
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	461a      	mov	r2, r3
 8009356:	2301      	movs	r3, #1
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	f7fc fca9 	bl	8005cb0 <HAL_GetTick>
 800935e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009362:	e00a      	b.n	800937a <HAL_RCC_OscConfig+0x6b6>
 8009364:	f7fc fca4 	bl	8005cb0 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	2b02      	cmp	r3, #2
 8009372:	d902      	bls.n	800937a <HAL_RCC_OscConfig+0x6b6>
 8009374:	2303      	movs	r3, #3
 8009376:	f000 bcdb 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 800937a:	2302      	movs	r3, #2
 800937c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009380:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009384:	fa93 f3a3 	rbit	r3, r3
 8009388:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800938c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009390:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009394:	2202      	movs	r2, #2
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800939c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	fa93 f2a3 	rbit	r2, r3
 80093a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b8:	2202      	movs	r2, #2
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	fa93 f2a3 	rbit	r2, r3
 80093ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	4b88      	ldr	r3, [pc, #544]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 80093d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80093e0:	2102      	movs	r1, #2
 80093e2:	6019      	str	r1, [r3, #0]
 80093e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	fa93 f1a3 	rbit	r1, r3
 80093f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093fa:	6019      	str	r1, [r3, #0]
 80093fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009400:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	fab3 f383 	clz	r3, r3
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f003 031f 	and.w	r3, r3, #31
 8009416:	2101      	movs	r1, #1
 8009418:	fa01 f303 	lsl.w	r3, r1, r3
 800941c:	4013      	ands	r3, r2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0a0      	beq.n	8009364 <HAL_RCC_OscConfig+0x6a0>
 8009422:	e08d      	b.n	8009540 <HAL_RCC_OscConfig+0x87c>
 8009424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009428:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800942c:	2201      	movs	r2, #1
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009434:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	fa93 f2a3 	rbit	r2, r3
 800943e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009442:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800944c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	fab3 f383 	clz	r3, r3
 8009456:	b2db      	uxtb	r3, r3
 8009458:	461a      	mov	r2, r3
 800945a:	4b68      	ldr	r3, [pc, #416]	; (80095fc <HAL_RCC_OscConfig+0x938>)
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	461a      	mov	r2, r3
 8009462:	2300      	movs	r3, #0
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	f7fc fc23 	bl	8005cb0 <HAL_GetTick>
 800946a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800946e:	e00a      	b.n	8009486 <HAL_RCC_OscConfig+0x7c2>
 8009470:	f7fc fc1e 	bl	8005cb0 <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d902      	bls.n	8009486 <HAL_RCC_OscConfig+0x7c2>
 8009480:	2303      	movs	r3, #3
 8009482:	f000 bc55 	b.w	8009d30 <HAL_RCC_OscConfig+0x106c>
 8009486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800948a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800948e:	2202      	movs	r2, #2
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009496:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	fa93 f2a3 	rbit	r2, r3
 80094a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80094b2:	2202      	movs	r2, #2
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	fa93 f2a3 	rbit	r2, r3
 80094c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d6:	2202      	movs	r2, #2
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	fa93 f2a3 	rbit	r2, r3
 80094e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	4b41      	ldr	r3, [pc, #260]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 80094f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80094fe:	2102      	movs	r1, #2
 8009500:	6019      	str	r1, [r3, #0]
 8009502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009506:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	fa93 f1a3 	rbit	r1, r3
 8009510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009514:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009518:	6019      	str	r1, [r3, #0]
 800951a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800951e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	fab3 f383 	clz	r3, r3
 8009528:	b2db      	uxtb	r3, r3
 800952a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 031f 	and.w	r3, r3, #31
 8009534:	2101      	movs	r1, #1
 8009536:	fa01 f303 	lsl.w	r3, r1, r3
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d197      	bne.n	8009470 <HAL_RCC_OscConfig+0x7ac>
 8009540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81a1 	beq.w	8009898 <HAL_RCC_OscConfig+0xbd4>
 8009556:	2300      	movs	r3, #0
 8009558:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 800955c:	4b26      	ldr	r3, [pc, #152]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d116      	bne.n	8009596 <HAL_RCC_OscConfig+0x8d2>
 8009568:	4b23      	ldr	r3, [pc, #140]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	4a22      	ldr	r2, [pc, #136]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 800956e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009572:	61d3      	str	r3, [r2, #28]
 8009574:	4b20      	ldr	r3, [pc, #128]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800957c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009580:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800958a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2301      	movs	r3, #1
 8009592:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8009596:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <HAL_RCC_OscConfig+0x93c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d11a      	bne.n	80095d8 <HAL_RCC_OscConfig+0x914>
 80095a2:	4b17      	ldr	r3, [pc, #92]	; (8009600 <HAL_RCC_OscConfig+0x93c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a16      	ldr	r2, [pc, #88]	; (8009600 <HAL_RCC_OscConfig+0x93c>)
 80095a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	f7fc fb7f 	bl	8005cb0 <HAL_GetTick>
 80095b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80095b6:	e009      	b.n	80095cc <HAL_RCC_OscConfig+0x908>
 80095b8:	f7fc fb7a 	bl	8005cb0 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b64      	cmp	r3, #100	; 0x64
 80095c6:	d901      	bls.n	80095cc <HAL_RCC_OscConfig+0x908>
 80095c8:	2303      	movs	r3, #3
 80095ca:	e3b1      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 80095cc:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <HAL_RCC_OscConfig+0x93c>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0ef      	beq.n	80095b8 <HAL_RCC_OscConfig+0x8f4>
 80095d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d10d      	bne.n	8009604 <HAL_RCC_OscConfig+0x940>
 80095e8:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	4a02      	ldr	r2, [pc, #8]	; (80095f8 <HAL_RCC_OscConfig+0x934>)
 80095ee:	f043 0301 	orr.w	r3, r3, #1
 80095f2:	6213      	str	r3, [r2, #32]
 80095f4:	e03c      	b.n	8009670 <HAL_RCC_OscConfig+0x9ac>
 80095f6:	bf00      	nop
 80095f8:	40021000 	.word	0x40021000
 80095fc:	10908120 	.word	0x10908120
 8009600:	40007000 	.word	0x40007000
 8009604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009608:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10c      	bne.n	800962e <HAL_RCC_OscConfig+0x96a>
 8009614:	4bc1      	ldr	r3, [pc, #772]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	4ac0      	ldr	r2, [pc, #768]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800961a:	f023 0301 	bic.w	r3, r3, #1
 800961e:	6213      	str	r3, [r2, #32]
 8009620:	4bbe      	ldr	r3, [pc, #760]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	4abd      	ldr	r2, [pc, #756]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009626:	f023 0304 	bic.w	r3, r3, #4
 800962a:	6213      	str	r3, [r2, #32]
 800962c:	e020      	b.n	8009670 <HAL_RCC_OscConfig+0x9ac>
 800962e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	2b05      	cmp	r3, #5
 800963c:	d10c      	bne.n	8009658 <HAL_RCC_OscConfig+0x994>
 800963e:	4bb7      	ldr	r3, [pc, #732]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	4ab6      	ldr	r2, [pc, #728]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009644:	f043 0304 	orr.w	r3, r3, #4
 8009648:	6213      	str	r3, [r2, #32]
 800964a:	4bb4      	ldr	r3, [pc, #720]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	4ab3      	ldr	r2, [pc, #716]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009650:	f043 0301 	orr.w	r3, r3, #1
 8009654:	6213      	str	r3, [r2, #32]
 8009656:	e00b      	b.n	8009670 <HAL_RCC_OscConfig+0x9ac>
 8009658:	4bb0      	ldr	r3, [pc, #704]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	4aaf      	ldr	r2, [pc, #700]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800965e:	f023 0301 	bic.w	r3, r3, #1
 8009662:	6213      	str	r3, [r2, #32]
 8009664:	4bad      	ldr	r3, [pc, #692]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	4aac      	ldr	r2, [pc, #688]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800966a:	f023 0304 	bic.w	r3, r3, #4
 800966e:	6213      	str	r3, [r2, #32]
 8009670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009674:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8081 	beq.w	8009784 <HAL_RCC_OscConfig+0xac0>
 8009682:	f7fc fb15 	bl	8005cb0 <HAL_GetTick>
 8009686:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800968a:	e00b      	b.n	80096a4 <HAL_RCC_OscConfig+0x9e0>
 800968c:	f7fc fb10 	bl	8005cb0 <HAL_GetTick>
 8009690:	4602      	mov	r2, r0
 8009692:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	f241 3288 	movw	r2, #5000	; 0x1388
 800969c:	4293      	cmp	r3, r2
 800969e:	d901      	bls.n	80096a4 <HAL_RCC_OscConfig+0x9e0>
 80096a0:	2303      	movs	r3, #3
 80096a2:	e345      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 80096a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80096ac:	2202      	movs	r2, #2
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	fa93 f2a3 	rbit	r2, r3
 80096be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096d0:	2202      	movs	r2, #2
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	fa93 f2a3 	rbit	r2, r3
 80096e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	fab3 f383 	clz	r3, r3
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	f043 0302 	orr.w	r3, r3, #2
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b02      	cmp	r3, #2
 8009708:	d102      	bne.n	8009710 <HAL_RCC_OscConfig+0xa4c>
 800970a:	4b84      	ldr	r3, [pc, #528]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	e013      	b.n	8009738 <HAL_RCC_OscConfig+0xa74>
 8009710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009714:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009718:	2202      	movs	r2, #2
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009720:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	fa93 f2a3 	rbit	r2, r3
 800972a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800972e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	4b79      	ldr	r3, [pc, #484]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800973c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009740:	2102      	movs	r1, #2
 8009742:	6011      	str	r1, [r2, #0]
 8009744:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009748:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	fa92 f1a2 	rbit	r1, r2
 8009752:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009756:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800975a:	6011      	str	r1, [r2, #0]
 800975c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009760:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	fab2 f282 	clz	r2, r2
 800976a:	b2d2      	uxtb	r2, r2
 800976c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009770:	b2d2      	uxtb	r2, r2
 8009772:	f002 021f 	and.w	r2, r2, #31
 8009776:	2101      	movs	r1, #1
 8009778:	fa01 f202 	lsl.w	r2, r1, r2
 800977c:	4013      	ands	r3, r2
 800977e:	2b00      	cmp	r3, #0
 8009780:	d084      	beq.n	800968c <HAL_RCC_OscConfig+0x9c8>
 8009782:	e07f      	b.n	8009884 <HAL_RCC_OscConfig+0xbc0>
 8009784:	f7fc fa94 	bl	8005cb0 <HAL_GetTick>
 8009788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800978c:	e00b      	b.n	80097a6 <HAL_RCC_OscConfig+0xae2>
 800978e:	f7fc fa8f 	bl	8005cb0 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	f241 3288 	movw	r2, #5000	; 0x1388
 800979e:	4293      	cmp	r3, r2
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0xae2>
 80097a2:	2303      	movs	r3, #3
 80097a4:	e2c4      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 80097a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80097ae:	2202      	movs	r2, #2
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	fa93 f2a3 	rbit	r2, r3
 80097c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80097d2:	2202      	movs	r2, #2
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	fa93 f2a3 	rbit	r2, r3
 80097e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	fab3 f383 	clz	r3, r3
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	095b      	lsrs	r3, r3, #5
 8009800:	b2db      	uxtb	r3, r3
 8009802:	f043 0302 	orr.w	r3, r3, #2
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b02      	cmp	r3, #2
 800980a:	d102      	bne.n	8009812 <HAL_RCC_OscConfig+0xb4e>
 800980c:	4b43      	ldr	r3, [pc, #268]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	e013      	b.n	800983a <HAL_RCC_OscConfig+0xb76>
 8009812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009816:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800981a:	2202      	movs	r2, #2
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009822:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	fa93 f2a3 	rbit	r2, r3
 800982c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009830:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	4b39      	ldr	r3, [pc, #228]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800983e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009842:	2102      	movs	r1, #2
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800984a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800984e:	6812      	ldr	r2, [r2, #0]
 8009850:	fa92 f1a2 	rbit	r1, r2
 8009854:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009858:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009862:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	fab2 f282 	clz	r2, r2
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009872:	b2d2      	uxtb	r2, r2
 8009874:	f002 021f 	and.w	r2, r2, #31
 8009878:	2101      	movs	r1, #1
 800987a:	fa01 f202 	lsl.w	r2, r1, r2
 800987e:	4013      	ands	r3, r2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d184      	bne.n	800978e <HAL_RCC_OscConfig+0xaca>
 8009884:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009888:	2b01      	cmp	r3, #1
 800988a:	d105      	bne.n	8009898 <HAL_RCC_OscConfig+0xbd4>
 800988c:	4b23      	ldr	r3, [pc, #140]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	4a22      	ldr	r2, [pc, #136]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 8009892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009896:	61d3      	str	r3, [r2, #28]
 8009898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800989c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8242 	beq.w	8009d2e <HAL_RCC_OscConfig+0x106a>
 80098aa:	4b1c      	ldr	r3, [pc, #112]	; (800991c <HAL_RCC_OscConfig+0xc58>)
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f003 030c 	and.w	r3, r3, #12
 80098b2:	2b08      	cmp	r3, #8
 80098b4:	f000 8213 	beq.w	8009cde <HAL_RCC_OscConfig+0x101a>
 80098b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	f040 8162 	bne.w	8009b8e <HAL_RCC_OscConfig+0xeca>
 80098ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80098d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	fa93 f2a3 	rbit	r2, r3
 80098e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	fab3 f383 	clz	r3, r3
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009904:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	461a      	mov	r2, r3
 800990c:	2300      	movs	r3, #0
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	f7fc f9ce 	bl	8005cb0 <HAL_GetTick>
 8009914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009918:	e00c      	b.n	8009934 <HAL_RCC_OscConfig+0xc70>
 800991a:	bf00      	nop
 800991c:	40021000 	.word	0x40021000
 8009920:	f7fc f9c6 	bl	8005cb0 <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <HAL_RCC_OscConfig+0xc70>
 8009930:	2303      	movs	r3, #3
 8009932:	e1fd      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 8009934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009938:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800993c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009946:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	fa93 f2a3 	rbit	r2, r3
 8009950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009954:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800995e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	fab3 f383 	clz	r3, r3
 8009968:	b2db      	uxtb	r3, r3
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f043 0301 	orr.w	r3, r3, #1
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b01      	cmp	r3, #1
 8009976:	d102      	bne.n	800997e <HAL_RCC_OscConfig+0xcba>
 8009978:	4bb0      	ldr	r3, [pc, #704]	; (8009c3c <HAL_RCC_OscConfig+0xf78>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	e027      	b.n	80099ce <HAL_RCC_OscConfig+0xd0a>
 800997e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009982:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009990:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	fa93 f2a3 	rbit	r2, r3
 800999a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800999e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80099ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	fa93 f2a3 	rbit	r2, r3
 80099c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	4b9c      	ldr	r3, [pc, #624]	; (8009c3c <HAL_RCC_OscConfig+0xf78>)
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80099d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80099da:	6011      	str	r1, [r2, #0]
 80099dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	fa92 f1a2 	rbit	r1, r2
 80099ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80099f2:	6011      	str	r1, [r2, #0]
 80099f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80099fc:	6812      	ldr	r2, [r2, #0]
 80099fe:	fab2 f282 	clz	r2, r2
 8009a02:	b2d2      	uxtb	r2, r2
 8009a04:	f042 0220 	orr.w	r2, r2, #32
 8009a08:	b2d2      	uxtb	r2, r2
 8009a0a:	f002 021f 	and.w	r2, r2, #31
 8009a0e:	2101      	movs	r1, #1
 8009a10:	fa01 f202 	lsl.w	r2, r1, r2
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d182      	bne.n	8009920 <HAL_RCC_OscConfig+0xc5c>
 8009a1a:	4b88      	ldr	r3, [pc, #544]	; (8009c3c <HAL_RCC_OscConfig+0xf78>)
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	430b      	orrs	r3, r1
 8009a3c:	497f      	ldr	r1, [pc, #508]	; (8009c3c <HAL_RCC_OscConfig+0xf78>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	604b      	str	r3, [r1, #4]
 8009a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	fa93 f2a3 	rbit	r2, r3
 8009a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	fab3 f383 	clz	r3, r3
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	461a      	mov	r2, r3
 8009a84:	2301      	movs	r3, #1
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	f7fc f912 	bl	8005cb0 <HAL_GetTick>
 8009a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009a90:	e009      	b.n	8009aa6 <HAL_RCC_OscConfig+0xde2>
 8009a92:	f7fc f90d 	bl	8005cb0 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0xde2>
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e144      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 8009aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aaa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ab8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	fa93 f2a3 	rbit	r2, r3
 8009ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ac6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ad0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	fab3 f383 	clz	r3, r3
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f043 0301 	orr.w	r3, r3, #1
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d102      	bne.n	8009af0 <HAL_RCC_OscConfig+0xe2c>
 8009aea:	4b54      	ldr	r3, [pc, #336]	; (8009c3c <HAL_RCC_OscConfig+0xf78>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	e027      	b.n	8009b40 <HAL_RCC_OscConfig+0xe7c>
 8009af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009af4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	fa93 f2a3 	rbit	r2, r3
 8009b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	fa93 f2a3 	rbit	r2, r3
 8009b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	4b3f      	ldr	r3, [pc, #252]	; (8009c3c <HAL_RCC_OscConfig+0xf78>)
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009b48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009b4c:	6011      	str	r1, [r2, #0]
 8009b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009b56:	6812      	ldr	r2, [r2, #0]
 8009b58:	fa92 f1a2 	rbit	r1, r2
 8009b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009b6e:	6812      	ldr	r2, [r2, #0]
 8009b70:	fab2 f282 	clz	r2, r2
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	f042 0220 	orr.w	r2, r2, #32
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	f002 021f 	and.w	r2, r2, #31
 8009b80:	2101      	movs	r1, #1
 8009b82:	fa01 f202 	lsl.w	r2, r1, r2
 8009b86:	4013      	ands	r3, r2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d082      	beq.n	8009a92 <HAL_RCC_OscConfig+0xdce>
 8009b8c:	e0cf      	b.n	8009d2e <HAL_RCC_OscConfig+0x106a>
 8009b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009b96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ba0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	fa93 f2a3 	rbit	r2, r3
 8009baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	fab3 f383 	clz	r3, r3
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009bc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	461a      	mov	r2, r3
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	f7fc f86c 	bl	8005cb0 <HAL_GetTick>
 8009bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009bdc:	e009      	b.n	8009bf2 <HAL_RCC_OscConfig+0xf2e>
 8009bde:	f7fc f867 	bl	8005cb0 <HAL_GetTick>
 8009be2:	4602      	mov	r2, r0
 8009be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d901      	bls.n	8009bf2 <HAL_RCC_OscConfig+0xf2e>
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e09e      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 8009bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bf6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	fa93 f2a3 	rbit	r2, r3
 8009c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	fab3 f383 	clz	r3, r3
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f043 0301 	orr.w	r3, r3, #1
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d104      	bne.n	8009c40 <HAL_RCC_OscConfig+0xf7c>
 8009c36:	4b01      	ldr	r3, [pc, #4]	; (8009c3c <HAL_RCC_OscConfig+0xf78>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	e029      	b.n	8009c90 <HAL_RCC_OscConfig+0xfcc>
 8009c3c:	40021000 	.word	0x40021000
 8009c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	fa93 f2a3 	rbit	r2, r3
 8009c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	fa93 f2a3 	rbit	r2, r3
 8009c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	4b2b      	ldr	r3, [pc, #172]	; (8009d3c <HAL_RCC_OscConfig+0x1078>)
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009c98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009c9c:	6011      	str	r1, [r2, #0]
 8009c9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ca2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009ca6:	6812      	ldr	r2, [r2, #0]
 8009ca8:	fa92 f1a2 	rbit	r1, r2
 8009cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cb0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009cb4:	6011      	str	r1, [r2, #0]
 8009cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009cbe:	6812      	ldr	r2, [r2, #0]
 8009cc0:	fab2 f282 	clz	r2, r2
 8009cc4:	b2d2      	uxtb	r2, r2
 8009cc6:	f042 0220 	orr.w	r2, r2, #32
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	f002 021f 	and.w	r2, r2, #31
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d180      	bne.n	8009bde <HAL_RCC_OscConfig+0xf1a>
 8009cdc:	e027      	b.n	8009d2e <HAL_RCC_OscConfig+0x106a>
 8009cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d101      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x102e>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e01e      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 8009cf2:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <HAL_RCC_OscConfig+0x1078>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8009cfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009cfe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d10b      	bne.n	8009d2a <HAL_RCC_OscConfig+0x1066>
 8009d12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009d16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d001      	beq.n	8009d2e <HAL_RCC_OscConfig+0x106a>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e000      	b.n	8009d30 <HAL_RCC_OscConfig+0x106c>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40021000 	.word	0x40021000

08009d40 <HAL_RCC_ClockConfig>:
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b09e      	sub	sp, #120	; 0x78
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	677b      	str	r3, [r7, #116]	; 0x74
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <HAL_RCC_ClockConfig+0x18>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e162      	b.n	800a01e <HAL_RCC_ClockConfig+0x2de>
 8009d58:	4b90      	ldr	r3, [pc, #576]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d910      	bls.n	8009d88 <HAL_RCC_ClockConfig+0x48>
 8009d66:	4b8d      	ldr	r3, [pc, #564]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f023 0207 	bic.w	r2, r3, #7
 8009d6e:	498b      	ldr	r1, [pc, #556]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	600b      	str	r3, [r1, #0]
 8009d76:	4b89      	ldr	r3, [pc, #548]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d001      	beq.n	8009d88 <HAL_RCC_ClockConfig+0x48>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e14a      	b.n	800a01e <HAL_RCC_ClockConfig+0x2de>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d008      	beq.n	8009da6 <HAL_RCC_ClockConfig+0x66>
 8009d94:	4b82      	ldr	r3, [pc, #520]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	497f      	ldr	r1, [pc, #508]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	604b      	str	r3, [r1, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 80dc 	beq.w	8009f6c <HAL_RCC_ClockConfig+0x22c>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d13c      	bne.n	8009e36 <HAL_RCC_ClockConfig+0xf6>
 8009dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009dc0:	673b      	str	r3, [r7, #112]	; 0x70
 8009dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dc4:	fa93 f3a3 	rbit	r3, r3
 8009dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dcc:	fab3 f383 	clz	r3, r3
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	095b      	lsrs	r3, r3, #5
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d102      	bne.n	8009de6 <HAL_RCC_ClockConfig+0xa6>
 8009de0:	4b6f      	ldr	r3, [pc, #444]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	e00f      	b.n	8009e06 <HAL_RCC_ClockConfig+0xc6>
 8009de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dee:	fa93 f3a3 	rbit	r3, r3
 8009df2:	667b      	str	r3, [r7, #100]	; 0x64
 8009df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009df8:	663b      	str	r3, [r7, #96]	; 0x60
 8009dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dfc:	fa93 f3a3 	rbit	r3, r3
 8009e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e02:	4b67      	ldr	r3, [pc, #412]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009e0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e0e:	fa92 f2a2 	rbit	r2, r2
 8009e12:	657a      	str	r2, [r7, #84]	; 0x54
 8009e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e16:	fab2 f282 	clz	r2, r2
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	f042 0220 	orr.w	r2, r2, #32
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	f002 021f 	and.w	r2, r2, #31
 8009e26:	2101      	movs	r1, #1
 8009e28:	fa01 f202 	lsl.w	r2, r1, r2
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d17b      	bne.n	8009f2a <HAL_RCC_ClockConfig+0x1ea>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e0f3      	b.n	800a01e <HAL_RCC_ClockConfig+0x2de>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d13c      	bne.n	8009eb8 <HAL_RCC_ClockConfig+0x178>
 8009e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e42:	653b      	str	r3, [r7, #80]	; 0x50
 8009e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e46:	fa93 f3a3 	rbit	r3, r3
 8009e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4e:	fab3 f383 	clz	r3, r3
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	095b      	lsrs	r3, r3, #5
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f043 0301 	orr.w	r3, r3, #1
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d102      	bne.n	8009e68 <HAL_RCC_ClockConfig+0x128>
 8009e62:	4b4f      	ldr	r3, [pc, #316]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	e00f      	b.n	8009e88 <HAL_RCC_ClockConfig+0x148>
 8009e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e70:	fa93 f3a3 	rbit	r3, r3
 8009e74:	647b      	str	r3, [r7, #68]	; 0x44
 8009e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e7e:	fa93 f3a3 	rbit	r3, r3
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e84:	4b46      	ldr	r3, [pc, #280]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8009e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e90:	fa92 f2a2 	rbit	r2, r2
 8009e94:	637a      	str	r2, [r7, #52]	; 0x34
 8009e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e98:	fab2 f282 	clz	r2, r2
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	f042 0220 	orr.w	r2, r2, #32
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	f002 021f 	and.w	r2, r2, #31
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8009eae:	4013      	ands	r3, r2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d13a      	bne.n	8009f2a <HAL_RCC_ClockConfig+0x1ea>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e0b2      	b.n	800a01e <HAL_RCC_ClockConfig+0x2de>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	633b      	str	r3, [r7, #48]	; 0x30
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	fa93 f3a3 	rbit	r3, r3
 8009ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	fab3 f383 	clz	r3, r3
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d102      	bne.n	8009ee0 <HAL_RCC_ClockConfig+0x1a0>
 8009eda:	4b31      	ldr	r3, [pc, #196]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	e00d      	b.n	8009efc <HAL_RCC_ClockConfig+0x1bc>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	fa93 f3a3 	rbit	r3, r3
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
 8009eec:	2302      	movs	r3, #2
 8009eee:	623b      	str	r3, [r7, #32]
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	fa93 f3a3 	rbit	r3, r3
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	4b29      	ldr	r3, [pc, #164]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	2202      	movs	r2, #2
 8009efe:	61ba      	str	r2, [r7, #24]
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	fa92 f2a2 	rbit	r2, r2
 8009f06:	617a      	str	r2, [r7, #20]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	fab2 f282 	clz	r2, r2
 8009f0e:	b2d2      	uxtb	r2, r2
 8009f10:	f042 0220 	orr.w	r2, r2, #32
 8009f14:	b2d2      	uxtb	r2, r2
 8009f16:	f002 021f 	and.w	r2, r2, #31
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8009f20:	4013      	ands	r3, r2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_RCC_ClockConfig+0x1ea>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e079      	b.n	800a01e <HAL_RCC_ClockConfig+0x2de>
 8009f2a:	4b1d      	ldr	r3, [pc, #116]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f023 0203 	bic.w	r2, r3, #3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	491a      	ldr	r1, [pc, #104]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	604b      	str	r3, [r1, #4]
 8009f3c:	f7fb feb8 	bl	8005cb0 <HAL_GetTick>
 8009f40:	6778      	str	r0, [r7, #116]	; 0x74
 8009f42:	e00a      	b.n	8009f5a <HAL_RCC_ClockConfig+0x21a>
 8009f44:	f7fb feb4 	bl	8005cb0 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d901      	bls.n	8009f5a <HAL_RCC_ClockConfig+0x21a>
 8009f56:	2303      	movs	r3, #3
 8009f58:	e061      	b.n	800a01e <HAL_RCC_ClockConfig+0x2de>
 8009f5a:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <HAL_RCC_ClockConfig+0x260>)
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f003 020c 	and.w	r2, r3, #12
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d1eb      	bne.n	8009f44 <HAL_RCC_ClockConfig+0x204>
 8009f6c:	4b0b      	ldr	r3, [pc, #44]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d214      	bcs.n	8009fa4 <HAL_RCC_ClockConfig+0x264>
 8009f7a:	4b08      	ldr	r3, [pc, #32]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f023 0207 	bic.w	r2, r3, #7
 8009f82:	4906      	ldr	r1, [pc, #24]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	600b      	str	r3, [r1, #0]
 8009f8a:	4b04      	ldr	r3, [pc, #16]	; (8009f9c <HAL_RCC_ClockConfig+0x25c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0307 	and.w	r3, r3, #7
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d005      	beq.n	8009fa4 <HAL_RCC_ClockConfig+0x264>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e040      	b.n	800a01e <HAL_RCC_ClockConfig+0x2de>
 8009f9c:	40022000 	.word	0x40022000
 8009fa0:	40021000 	.word	0x40021000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0304 	and.w	r3, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d008      	beq.n	8009fc2 <HAL_RCC_ClockConfig+0x282>
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <HAL_RCC_ClockConfig+0x2e8>)
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	491a      	ldr	r1, [pc, #104]	; (800a028 <HAL_RCC_ClockConfig+0x2e8>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	604b      	str	r3, [r1, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0308 	and.w	r3, r3, #8
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d009      	beq.n	8009fe2 <HAL_RCC_ClockConfig+0x2a2>
 8009fce:	4b16      	ldr	r3, [pc, #88]	; (800a028 <HAL_RCC_ClockConfig+0x2e8>)
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	4912      	ldr	r1, [pc, #72]	; (800a028 <HAL_RCC_ClockConfig+0x2e8>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	604b      	str	r3, [r1, #4]
 8009fe2:	f000 f829 	bl	800a038 <HAL_RCC_GetSysClockFreq>
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <HAL_RCC_ClockConfig+0x2e8>)
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ff0:	22f0      	movs	r2, #240	; 0xf0
 8009ff2:	613a      	str	r2, [r7, #16]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	fa92 f2a2 	rbit	r2, r2
 8009ffa:	60fa      	str	r2, [r7, #12]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	fab2 f282 	clz	r2, r2
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	40d3      	lsrs	r3, r2
 800a006:	4a09      	ldr	r2, [pc, #36]	; (800a02c <HAL_RCC_ClockConfig+0x2ec>)
 800a008:	5cd3      	ldrb	r3, [r2, r3]
 800a00a:	fa21 f303 	lsr.w	r3, r1, r3
 800a00e:	4a08      	ldr	r2, [pc, #32]	; (800a030 <HAL_RCC_ClockConfig+0x2f0>)
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	4b08      	ldr	r3, [pc, #32]	; (800a034 <HAL_RCC_ClockConfig+0x2f4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4618      	mov	r0, r3
 800a018:	f7fb f844 	bl	80050a4 <HAL_InitTick>
 800a01c:	2300      	movs	r3, #0
 800a01e:	4618      	mov	r0, r3
 800a020:	3778      	adds	r7, #120	; 0x78
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	40021000 	.word	0x40021000
 800a02c:	080107c8 	.word	0x080107c8
 800a030:	20000038 	.word	0x20000038
 800a034:	200000b4 	.word	0x200000b4

0800a038 <HAL_RCC_GetSysClockFreq>:
 800a038:	b480      	push	{r7}
 800a03a:	b08b      	sub	sp, #44	; 0x2c
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	2300      	movs	r3, #0
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	2300      	movs	r3, #0
 800a050:	623b      	str	r3, [r7, #32]
 800a052:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	61fb      	str	r3, [r7, #28]
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f003 030c 	and.w	r3, r3, #12
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d002      	beq.n	800a068 <HAL_RCC_GetSysClockFreq+0x30>
 800a062:	2b08      	cmp	r3, #8
 800a064:	d003      	beq.n	800a06e <HAL_RCC_GetSysClockFreq+0x36>
 800a066:	e03c      	b.n	800a0e2 <HAL_RCC_GetSysClockFreq+0xaa>
 800a068:	4b24      	ldr	r3, [pc, #144]	; (800a0fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800a06a:	623b      	str	r3, [r7, #32]
 800a06c:	e03c      	b.n	800a0e8 <HAL_RCC_GetSysClockFreq+0xb0>
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a074:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a078:	60ba      	str	r2, [r7, #8]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	fa92 f2a2 	rbit	r2, r2
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	fab2 f282 	clz	r2, r2
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	40d3      	lsrs	r3, r2
 800a08c:	4a1c      	ldr	r2, [pc, #112]	; (800a100 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a08e:	5cd3      	ldrb	r3, [r2, r3]
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	4b19      	ldr	r3, [pc, #100]	; (800a0f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	f003 030f 	and.w	r3, r3, #15
 800a09a:	220f      	movs	r2, #15
 800a09c:	613a      	str	r2, [r7, #16]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	fa92 f2a2 	rbit	r2, r2
 800a0a4:	60fa      	str	r2, [r7, #12]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	fab2 f282 	clz	r2, r2
 800a0ac:	b2d2      	uxtb	r2, r2
 800a0ae:	40d3      	lsrs	r3, r2
 800a0b0:	4a14      	ldr	r2, [pc, #80]	; (800a104 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a0b2:	5cd3      	ldrb	r3, [r2, r3]
 800a0b4:	61bb      	str	r3, [r7, #24]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d008      	beq.n	800a0d2 <HAL_RCC_GetSysClockFreq+0x9a>
 800a0c0:	4a0e      	ldr	r2, [pc, #56]	; (800a0fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	fb02 f303 	mul.w	r3, r2, r3
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a0d0:	e004      	b.n	800a0dc <HAL_RCC_GetSysClockFreq+0xa4>
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	4a0c      	ldr	r2, [pc, #48]	; (800a108 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a0d6:	fb02 f303 	mul.w	r3, r2, r3
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	623b      	str	r3, [r7, #32]
 800a0e0:	e002      	b.n	800a0e8 <HAL_RCC_GetSysClockFreq+0xb0>
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <HAL_RCC_GetSysClockFreq+0xd4>)
 800a0e4:	623b      	str	r3, [r7, #32]
 800a0e6:	bf00      	nop
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	372c      	adds	r7, #44	; 0x2c
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40021000 	.word	0x40021000
 800a0fc:	016e3600 	.word	0x016e3600
 800a100:	080107e0 	.word	0x080107e0
 800a104:	080107f0 	.word	0x080107f0
 800a108:	003d0900 	.word	0x003d0900
 800a10c:	007a1200 	.word	0x007a1200

0800a110 <HAL_RCC_GetHCLKFreq>:
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
 800a114:	4b03      	ldr	r3, [pc, #12]	; (800a124 <HAL_RCC_GetHCLKFreq+0x14>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4618      	mov	r0, r3
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	20000038 	.word	0x20000038

0800a128 <HAL_RCC_GetPCLK1Freq>:
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	f7ff ffef 	bl	800a110 <HAL_RCC_GetHCLKFreq>
 800a132:	4601      	mov	r1, r0
 800a134:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a13c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a140:	607a      	str	r2, [r7, #4]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	fa92 f2a2 	rbit	r2, r2
 800a148:	603a      	str	r2, [r7, #0]
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	fab2 f282 	clz	r2, r2
 800a150:	b2d2      	uxtb	r2, r2
 800a152:	40d3      	lsrs	r3, r2
 800a154:	4a04      	ldr	r2, [pc, #16]	; (800a168 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a156:	5cd3      	ldrb	r3, [r2, r3]
 800a158:	fa21 f303 	lsr.w	r3, r1, r3
 800a15c:	4618      	mov	r0, r3
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	40021000 	.word	0x40021000
 800a168:	080107d8 	.word	0x080107d8

0800a16c <HAL_RCC_GetPCLK2Freq>:
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	f7ff ffcd 	bl	800a110 <HAL_RCC_GetHCLKFreq>
 800a176:	4601      	mov	r1, r0
 800a178:	4b0b      	ldr	r3, [pc, #44]	; (800a1a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a180:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	fa92 f2a2 	rbit	r2, r2
 800a18c:	603a      	str	r2, [r7, #0]
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	fab2 f282 	clz	r2, r2
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	40d3      	lsrs	r3, r2
 800a198:	4a04      	ldr	r2, [pc, #16]	; (800a1ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800a19a:	5cd3      	ldrb	r3, [r2, r3]
 800a19c:	fa21 f303 	lsr.w	r3, r1, r3
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	40021000 	.word	0x40021000
 800a1ac:	080107d8 	.word	0x080107d8

0800a1b0 <HAL_RCC_GetClockConfig>:
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	220f      	movs	r2, #15
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	4b12      	ldr	r3, [pc, #72]	; (800a20c <HAL_RCC_GetClockConfig+0x5c>)
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f003 0203 	and.w	r2, r3, #3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	605a      	str	r2, [r3, #4]
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <HAL_RCC_GetClockConfig+0x5c>)
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	609a      	str	r2, [r3, #8]
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <HAL_RCC_GetClockConfig+0x5c>)
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60da      	str	r2, [r3, #12]
 800a1e4:	4b09      	ldr	r3, [pc, #36]	; (800a20c <HAL_RCC_GetClockConfig+0x5c>)
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	08db      	lsrs	r3, r3, #3
 800a1ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	611a      	str	r2, [r3, #16]
 800a1f2:	4b07      	ldr	r3, [pc, #28]	; (800a210 <HAL_RCC_GetClockConfig+0x60>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0207 	and.w	r2, r3, #7
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	40021000 	.word	0x40021000
 800a210:	40022000 	.word	0x40022000

0800a214 <HAL_RCCEx_PeriphCLKConfig>:
 800a214:	b580      	push	{r7, lr}
 800a216:	b092      	sub	sp, #72	; 0x48
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	2300      	movs	r3, #0
 800a21e:	643b      	str	r3, [r7, #64]	; 0x40
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a224:	2300      	movs	r3, #0
 800a226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80d4 	beq.w	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a238:	4b4e      	ldr	r3, [pc, #312]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10e      	bne.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a244:	4b4b      	ldr	r3, [pc, #300]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	4a4a      	ldr	r2, [pc, #296]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a24a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a24e:	61d3      	str	r3, [r2, #28]
 800a250:	4b48      	ldr	r3, [pc, #288]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a258:	60bb      	str	r3, [r7, #8]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2301      	movs	r3, #1
 800a25e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a262:	4b45      	ldr	r3, [pc, #276]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d118      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800a26e:	4b42      	ldr	r3, [pc, #264]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a41      	ldr	r2, [pc, #260]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	f7fb fd19 	bl	8005cb0 <HAL_GetTick>
 800a27e:	6438      	str	r0, [r7, #64]	; 0x40
 800a280:	e008      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a282:	f7fb fd15 	bl	8005cb0 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b64      	cmp	r3, #100	; 0x64
 800a28e:	d901      	bls.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a290:	2303      	movs	r3, #3
 800a292:	e169      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a294:	4b38      	ldr	r3, [pc, #224]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0f0      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a2a0:	4b34      	ldr	r3, [pc, #208]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 8084 	beq.w	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d07c      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a2c0:	4b2c      	ldr	r3, [pc, #176]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2ce:	633b      	str	r3, [r7, #48]	; 0x30
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	fa93 f3a3 	rbit	r3, r3
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	fab3 f383 	clz	r3, r3
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4b26      	ldr	r3, [pc, #152]	; (800a37c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a2e4:	4413      	add	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	fa93 f3a3 	rbit	r3, r3
 800a2fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fe:	fab3 f383 	clz	r3, r3
 800a302:	b2db      	uxtb	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	4b1d      	ldr	r3, [pc, #116]	; (800a37c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	461a      	mov	r2, r3
 800a30e:	2300      	movs	r3, #0
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	4a18      	ldr	r2, [pc, #96]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a316:	6213      	str	r3, [r2, #32]
 800a318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d04b      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a322:	f7fb fcc5 	bl	8005cb0 <HAL_GetTick>
 800a326:	6438      	str	r0, [r7, #64]	; 0x40
 800a328:	e00a      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800a32a:	f7fb fcc1 	bl	8005cb0 <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	f241 3288 	movw	r2, #5000	; 0x1388
 800a338:	4293      	cmp	r3, r2
 800a33a:	d901      	bls.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800a33c:	2303      	movs	r3, #3
 800a33e:	e113      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a340:	2302      	movs	r3, #2
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	fa93 f3a3 	rbit	r3, r3
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
 800a34c:	2302      	movs	r3, #2
 800a34e:	623b      	str	r3, [r7, #32]
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	fa93 f3a3 	rbit	r3, r3
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	fab3 f383 	clz	r3, r3
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	095b      	lsrs	r3, r3, #5
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f043 0302 	orr.w	r3, r3, #2
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d108      	bne.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a36e:	4b01      	ldr	r3, [pc, #4]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	e00d      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a374:	40021000 	.word	0x40021000
 800a378:	40007000 	.word	0x40007000
 800a37c:	10908100 	.word	0x10908100
 800a380:	2302      	movs	r3, #2
 800a382:	61bb      	str	r3, [r7, #24]
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	fa93 f3a3 	rbit	r3, r3
 800a38a:	617b      	str	r3, [r7, #20]
 800a38c:	4b78      	ldr	r3, [pc, #480]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	2202      	movs	r2, #2
 800a392:	613a      	str	r2, [r7, #16]
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	fa92 f2a2 	rbit	r2, r2
 800a39a:	60fa      	str	r2, [r7, #12]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	fab2 f282 	clz	r2, r2
 800a3a2:	b2d2      	uxtb	r2, r2
 800a3a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	f002 021f 	and.w	r2, r2, #31
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	fa01 f202 	lsl.w	r2, r1, r2
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0b7      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a3ba:	4b6d      	ldr	r3, [pc, #436]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	496a      	ldr	r1, [pc, #424]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	620b      	str	r3, [r1, #32]
 800a3cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d105      	bne.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a3d4:	4b66      	ldr	r3, [pc, #408]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a3d6:	69db      	ldr	r3, [r3, #28]
 800a3d8:	4a65      	ldr	r2, [pc, #404]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a3da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3de:	61d3      	str	r3, [r2, #28]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a3ec:	4b60      	ldr	r3, [pc, #384]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f0:	f023 0203 	bic.w	r2, r3, #3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	495d      	ldr	r1, [pc, #372]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	630b      	str	r3, [r1, #48]	; 0x30
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d008      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x208>
 800a40a:	4b59      	ldr	r3, [pc, #356]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	4956      	ldr	r1, [pc, #344]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	630b      	str	r3, [r1, #48]	; 0x30
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b00      	cmp	r3, #0
 800a426:	d008      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x226>
 800a428:	4b51      	ldr	r3, [pc, #324]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	494e      	ldr	r1, [pc, #312]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a436:	4313      	orrs	r3, r2
 800a438:	630b      	str	r3, [r1, #48]	; 0x30
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d008      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a446:	4b4a      	ldr	r3, [pc, #296]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	f023 0210 	bic.w	r2, r3, #16
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	4947      	ldr	r1, [pc, #284]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a454:	4313      	orrs	r3, r2
 800a456:	630b      	str	r3, [r1, #48]	; 0x30
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d008      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a464:	4b42      	ldr	r3, [pc, #264]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a470:	493f      	ldr	r1, [pc, #252]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a472:	4313      	orrs	r3, r2
 800a474:	604b      	str	r3, [r1, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800a482:	4b3b      	ldr	r3, [pc, #236]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	f023 0220 	bic.w	r2, r3, #32
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	4938      	ldr	r1, [pc, #224]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a490:	4313      	orrs	r3, r2
 800a492:	630b      	str	r3, [r1, #48]	; 0x30
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0308 	and.w	r3, r3, #8
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d008      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800a4a0:	4b33      	ldr	r3, [pc, #204]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	4930      	ldr	r1, [pc, #192]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	630b      	str	r3, [r1, #48]	; 0x30
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0310 	and.w	r3, r3, #16
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d008      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a4be:	4b2c      	ldr	r3, [pc, #176]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	4929      	ldr	r1, [pc, #164]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	630b      	str	r3, [r1, #48]	; 0x30
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d008      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a4dc:	4b24      	ldr	r3, [pc, #144]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	4921      	ldr	r1, [pc, #132]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	604b      	str	r3, [r1, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d008      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a4fa:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	491a      	ldr	r1, [pc, #104]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a514:	2b00      	cmp	r3, #0
 800a516:	d008      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x316>
 800a518:	4b15      	ldr	r3, [pc, #84]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a524:	4912      	ldr	r1, [pc, #72]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a526:	4313      	orrs	r3, r2
 800a528:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d008      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800a536:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a542:	490b      	ldr	r1, [pc, #44]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a544:	4313      	orrs	r3, r2
 800a546:	630b      	str	r3, [r1, #48]	; 0x30
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d008      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800a554:	4b06      	ldr	r3, [pc, #24]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a560:	4903      	ldr	r1, [pc, #12]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a562:	4313      	orrs	r3, r2
 800a564:	630b      	str	r3, [r1, #48]	; 0x30
 800a566:	2300      	movs	r3, #0
 800a568:	4618      	mov	r0, r3
 800a56a:	3748      	adds	r7, #72	; 0x48
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	40021000 	.word	0x40021000

0800a574 <HAL_TIM_Base_Init>:
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_TIM_Base_Init+0x12>
 800a582:	2301      	movs	r3, #1
 800a584:	e049      	b.n	800a61a <HAL_TIM_Base_Init+0xa6>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <HAL_TIM_Base_Init+0x2c>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7fb f8a6 	bl	80056ec <HAL_TIM_Base_MspInit>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f000 f9e8 	bl	800a988 <TIM_Base_SetConfig>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a618:	2300      	movs	r3, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_TIM_Base_Start_IT>:
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b01      	cmp	r3, #1
 800a636:	d001      	beq.n	800a63c <HAL_TIM_Base_Start_IT+0x18>
 800a638:	2301      	movs	r3, #1
 800a63a:	e04a      	b.n	800a6d2 <HAL_TIM_Base_Start_IT+0xae>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f042 0201 	orr.w	r2, r2, #1
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a21      	ldr	r2, [pc, #132]	; (800a6e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d018      	beq.n	800a690 <HAL_TIM_Base_Start_IT+0x6c>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a666:	d013      	beq.n	800a690 <HAL_TIM_Base_Start_IT+0x6c>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a1d      	ldr	r2, [pc, #116]	; (800a6e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d00e      	beq.n	800a690 <HAL_TIM_Base_Start_IT+0x6c>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a1c      	ldr	r2, [pc, #112]	; (800a6e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d009      	beq.n	800a690 <HAL_TIM_Base_Start_IT+0x6c>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a1a      	ldr	r2, [pc, #104]	; (800a6ec <HAL_TIM_Base_Start_IT+0xc8>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d004      	beq.n	800a690 <HAL_TIM_Base_Start_IT+0x6c>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a19      	ldr	r2, [pc, #100]	; (800a6f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d115      	bne.n	800a6bc <HAL_TIM_Base_Start_IT+0x98>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689a      	ldr	r2, [r3, #8]
 800a696:	4b17      	ldr	r3, [pc, #92]	; (800a6f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a698:	4013      	ands	r3, r2
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b06      	cmp	r3, #6
 800a6a0:	d015      	beq.n	800a6ce <HAL_TIM_Base_Start_IT+0xaa>
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a8:	d011      	beq.n	800a6ce <HAL_TIM_Base_Start_IT+0xaa>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f042 0201 	orr.w	r2, r2, #1
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	e008      	b.n	800a6ce <HAL_TIM_Base_Start_IT+0xaa>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f042 0201 	orr.w	r2, r2, #1
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	e000      	b.n	800a6d0 <HAL_TIM_Base_Start_IT+0xac>
 800a6ce:	bf00      	nop
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40012c00 	.word	0x40012c00
 800a6e4:	40000400 	.word	0x40000400
 800a6e8:	40000800 	.word	0x40000800
 800a6ec:	40013400 	.word	0x40013400
 800a6f0:	40014000 	.word	0x40014000
 800a6f4:	00010007 	.word	0x00010007

0800a6f8 <HAL_TIM_IRQHandler>:
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d122      	bne.n	800a754 <HAL_TIM_IRQHandler+0x5c>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d11b      	bne.n	800a754 <HAL_TIM_IRQHandler+0x5c>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f06f 0202 	mvn.w	r2, #2
 800a724:	611a      	str	r2, [r3, #16]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	771a      	strb	r2, [r3, #28]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_TIM_IRQHandler+0x4a>
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f905 	bl	800a94a <HAL_TIM_IC_CaptureCallback>
 800a740:	e005      	b.n	800a74e <HAL_TIM_IRQHandler+0x56>
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f8f7 	bl	800a936 <HAL_TIM_OC_DelayElapsedCallback>
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f908 	bl	800a95e <HAL_TIM_PWM_PulseFinishedCallback>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d122      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0xb0>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d11b      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0xb0>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0204 	mvn.w	r2, #4
 800a778:	611a      	str	r2, [r3, #16]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2202      	movs	r2, #2
 800a77e:	771a      	strb	r2, [r3, #28]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_TIM_IRQHandler+0x9e>
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f8db 	bl	800a94a <HAL_TIM_IC_CaptureCallback>
 800a794:	e005      	b.n	800a7a2 <HAL_TIM_IRQHandler+0xaa>
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f8cd 	bl	800a936 <HAL_TIM_OC_DelayElapsedCallback>
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f8de 	bl	800a95e <HAL_TIM_PWM_PulseFinishedCallback>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	771a      	strb	r2, [r3, #28]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	2b08      	cmp	r3, #8
 800a7b4:	d122      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x104>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	f003 0308 	and.w	r3, r3, #8
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d11b      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x104>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f06f 0208 	mvn.w	r2, #8
 800a7cc:	611a      	str	r2, [r3, #16]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2204      	movs	r2, #4
 800a7d2:	771a      	strb	r2, [r3, #28]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69db      	ldr	r3, [r3, #28]
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <HAL_TIM_IRQHandler+0xf2>
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f8b1 	bl	800a94a <HAL_TIM_IC_CaptureCallback>
 800a7e8:	e005      	b.n	800a7f6 <HAL_TIM_IRQHandler+0xfe>
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f8a3 	bl	800a936 <HAL_TIM_OC_DelayElapsedCallback>
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f8b4 	bl	800a95e <HAL_TIM_PWM_PulseFinishedCallback>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	771a      	strb	r2, [r3, #28]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f003 0310 	and.w	r3, r3, #16
 800a806:	2b10      	cmp	r3, #16
 800a808:	d122      	bne.n	800a850 <HAL_TIM_IRQHandler+0x158>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f003 0310 	and.w	r3, r3, #16
 800a814:	2b10      	cmp	r3, #16
 800a816:	d11b      	bne.n	800a850 <HAL_TIM_IRQHandler+0x158>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0210 	mvn.w	r2, #16
 800a820:	611a      	str	r2, [r3, #16]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2208      	movs	r2, #8
 800a826:	771a      	strb	r2, [r3, #28]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_TIM_IRQHandler+0x146>
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f887 	bl	800a94a <HAL_TIM_IC_CaptureCallback>
 800a83c:	e005      	b.n	800a84a <HAL_TIM_IRQHandler+0x152>
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f879 	bl	800a936 <HAL_TIM_OC_DelayElapsedCallback>
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f88a 	bl	800a95e <HAL_TIM_PWM_PulseFinishedCallback>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	771a      	strb	r2, [r3, #28]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d10e      	bne.n	800a87c <HAL_TIM_IRQHandler+0x184>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d107      	bne.n	800a87c <HAL_TIM_IRQHandler+0x184>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0201 	mvn.w	r2, #1
 800a874:	611a      	str	r2, [r3, #16]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7f9 fcc4 	bl	8004204 <HAL_TIM_PeriodElapsedCallback>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a886:	2b80      	cmp	r3, #128	; 0x80
 800a888:	d10e      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x1b0>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a894:	2b80      	cmp	r3, #128	; 0x80
 800a896:	d107      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x1b0>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8a0:	611a      	str	r2, [r3, #16]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f98a 	bl	800abbc <HAL_TIMEx_BreakCallback>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b6:	d10e      	bne.n	800a8d6 <HAL_TIM_IRQHandler+0x1de>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c2:	2b80      	cmp	r3, #128	; 0x80
 800a8c4:	d107      	bne.n	800a8d6 <HAL_TIM_IRQHandler+0x1de>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a8ce:	611a      	str	r2, [r3, #16]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f97d 	bl	800abd0 <HAL_TIMEx_Break2Callback>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e0:	2b40      	cmp	r3, #64	; 0x40
 800a8e2:	d10e      	bne.n	800a902 <HAL_TIM_IRQHandler+0x20a>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ee:	2b40      	cmp	r3, #64	; 0x40
 800a8f0:	d107      	bne.n	800a902 <HAL_TIM_IRQHandler+0x20a>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8fa:	611a      	str	r2, [r3, #16]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f838 	bl	800a972 <HAL_TIM_TriggerCallback>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f003 0320 	and.w	r3, r3, #32
 800a90c:	2b20      	cmp	r3, #32
 800a90e:	d10e      	bne.n	800a92e <HAL_TIM_IRQHandler+0x236>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f003 0320 	and.w	r3, r3, #32
 800a91a:	2b20      	cmp	r3, #32
 800a91c:	d107      	bne.n	800a92e <HAL_TIM_IRQHandler+0x236>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f06f 0220 	mvn.w	r2, #32
 800a926:	611a      	str	r2, [r3, #16]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f93d 	bl	800aba8 <HAL_TIMEx_CommutCallback>
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <HAL_TIM_OC_DelayElapsedCallback>:
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	bf00      	nop
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <HAL_TIM_IC_CaptureCallback>:
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	bf00      	nop
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <HAL_TIM_PWM_PulseFinishedCallback>:
 800a95e:	b480      	push	{r7}
 800a960:	b083      	sub	sp, #12
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	bf00      	nop
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <HAL_TIM_TriggerCallback>:
 800a972:	b480      	push	{r7}
 800a974:	b083      	sub	sp, #12
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	bf00      	nop
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
	...

0800a988 <TIM_Base_SetConfig>:
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a3c      	ldr	r2, [pc, #240]	; (800aa8c <TIM_Base_SetConfig+0x104>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d00f      	beq.n	800a9c0 <TIM_Base_SetConfig+0x38>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a6:	d00b      	beq.n	800a9c0 <TIM_Base_SetConfig+0x38>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a39      	ldr	r2, [pc, #228]	; (800aa90 <TIM_Base_SetConfig+0x108>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d007      	beq.n	800a9c0 <TIM_Base_SetConfig+0x38>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a38      	ldr	r2, [pc, #224]	; (800aa94 <TIM_Base_SetConfig+0x10c>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d003      	beq.n	800a9c0 <TIM_Base_SetConfig+0x38>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a37      	ldr	r2, [pc, #220]	; (800aa98 <TIM_Base_SetConfig+0x110>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d108      	bne.n	800a9d2 <TIM_Base_SetConfig+0x4a>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a2d      	ldr	r2, [pc, #180]	; (800aa8c <TIM_Base_SetConfig+0x104>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d01b      	beq.n	800aa12 <TIM_Base_SetConfig+0x8a>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e0:	d017      	beq.n	800aa12 <TIM_Base_SetConfig+0x8a>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a2a      	ldr	r2, [pc, #168]	; (800aa90 <TIM_Base_SetConfig+0x108>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d013      	beq.n	800aa12 <TIM_Base_SetConfig+0x8a>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a29      	ldr	r2, [pc, #164]	; (800aa94 <TIM_Base_SetConfig+0x10c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00f      	beq.n	800aa12 <TIM_Base_SetConfig+0x8a>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a28      	ldr	r2, [pc, #160]	; (800aa98 <TIM_Base_SetConfig+0x110>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00b      	beq.n	800aa12 <TIM_Base_SetConfig+0x8a>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a27      	ldr	r2, [pc, #156]	; (800aa9c <TIM_Base_SetConfig+0x114>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d007      	beq.n	800aa12 <TIM_Base_SetConfig+0x8a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a26      	ldr	r2, [pc, #152]	; (800aaa0 <TIM_Base_SetConfig+0x118>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d003      	beq.n	800aa12 <TIM_Base_SetConfig+0x8a>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a25      	ldr	r2, [pc, #148]	; (800aaa4 <TIM_Base_SetConfig+0x11c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d108      	bne.n	800aa24 <TIM_Base_SetConfig+0x9c>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	689a      	ldr	r2, [r3, #8]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	629a      	str	r2, [r3, #40]	; 0x28
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a10      	ldr	r2, [pc, #64]	; (800aa8c <TIM_Base_SetConfig+0x104>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d00f      	beq.n	800aa70 <TIM_Base_SetConfig+0xe8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a11      	ldr	r2, [pc, #68]	; (800aa98 <TIM_Base_SetConfig+0x110>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d00b      	beq.n	800aa70 <TIM_Base_SetConfig+0xe8>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a10      	ldr	r2, [pc, #64]	; (800aa9c <TIM_Base_SetConfig+0x114>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d007      	beq.n	800aa70 <TIM_Base_SetConfig+0xe8>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a0f      	ldr	r2, [pc, #60]	; (800aaa0 <TIM_Base_SetConfig+0x118>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d003      	beq.n	800aa70 <TIM_Base_SetConfig+0xe8>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a0e      	ldr	r2, [pc, #56]	; (800aaa4 <TIM_Base_SetConfig+0x11c>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d103      	bne.n	800aa78 <TIM_Base_SetConfig+0xf0>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	691a      	ldr	r2, [r3, #16]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	631a      	str	r2, [r3, #48]	; 0x30
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	615a      	str	r2, [r3, #20]
 800aa7e:	bf00      	nop
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	40012c00 	.word	0x40012c00
 800aa90:	40000400 	.word	0x40000400
 800aa94:	40000800 	.word	0x40000800
 800aa98:	40013400 	.word	0x40013400
 800aa9c:	40014000 	.word	0x40014000
 800aaa0:	40014400 	.word	0x40014400
 800aaa4:	40014800 	.word	0x40014800

0800aaa8 <HAL_TIMEx_MasterConfigSynchronization>:
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e063      	b.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	60bb      	str	r3, [r7, #8]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a2b      	ldr	r2, [pc, #172]	; (800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d004      	beq.n	800aaf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a2a      	ldr	r2, [pc, #168]	; (800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d108      	bne.n	800ab06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	605a      	str	r2, [r3, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a1b      	ldr	r2, [pc, #108]	; (800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d018      	beq.n	800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab32:	d013      	beq.n	800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a18      	ldr	r2, [pc, #96]	; (800ab9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d00e      	beq.n	800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a17      	ldr	r2, [pc, #92]	; (800aba0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d009      	beq.n	800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a12      	ldr	r2, [pc, #72]	; (800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d004      	beq.n	800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a13      	ldr	r2, [pc, #76]	; (800aba4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d10c      	bne.n	800ab76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab62:	60bb      	str	r3, [r7, #8]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60bb      	str	r3, [r7, #8]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	609a      	str	r2, [r3, #8]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ab86:	2300      	movs	r3, #0
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	40012c00 	.word	0x40012c00
 800ab98:	40013400 	.word	0x40013400
 800ab9c:	40000400 	.word	0x40000400
 800aba0:	40000800 	.word	0x40000800
 800aba4:	40014000 	.word	0x40014000

0800aba8 <HAL_TIMEx_CommutCallback>:
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_TIMEx_BreakCallback>:
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_TIMEx_Break2Callback>:
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_UART_Init>:
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <HAL_UART_Init+0x12>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e040      	b.n	800ac78 <HAL_UART_Init+0x94>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d106      	bne.n	800ac0c <HAL_UART_Init+0x28>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fa fe54 	bl	80058b4 <HAL_UART_MspInit>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2224      	movs	r2, #36	; 0x24
 800ac10:	67da      	str	r2, [r3, #124]	; 0x7c
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0201 	bic.w	r2, r2, #1
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fdf2 	bl	800b80c <UART_SetConfig>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d101      	bne.n	800ac32 <HAL_UART_Init+0x4e>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e022      	b.n	800ac78 <HAL_UART_Init+0x94>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <HAL_UART_Init+0x5c>
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 ffba 	bl	800bbb4 <UART_AdvFeatureConfig>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac4e:	605a      	str	r2, [r3, #4]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	689a      	ldr	r2, [r3, #8]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac5e:	609a      	str	r2, [r3, #8]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 f841 	bl	800bcf8 <UART_CheckIdleState>
 800ac76:	4603      	mov	r3, r0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_UART_Transmit_IT>:
 800ac80:	b480      	push	{r7}
 800ac82:	b08b      	sub	sp, #44	; 0x2c
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	80fb      	strh	r3, [r7, #6]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	d147      	bne.n	800ad26 <HAL_UART_Transmit_IT+0xa6>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <HAL_UART_Transmit_IT+0x22>
 800ac9c:	88fb      	ldrh	r3, [r7, #6]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_UART_Transmit_IT+0x26>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e040      	b.n	800ad28 <HAL_UART_Transmit_IT+0xa8>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	64da      	str	r2, [r3, #76]	; 0x4c
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	88fa      	ldrh	r2, [r7, #6]
 800acb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	88fa      	ldrh	r2, [r7, #6]
 800acb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	66da      	str	r2, [r3, #108]	; 0x6c
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2221      	movs	r2, #33	; 0x21
 800acce:	67da      	str	r2, [r3, #124]	; 0x7c
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd8:	d107      	bne.n	800acea <HAL_UART_Transmit_IT+0x6a>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <HAL_UART_Transmit_IT+0x6a>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	4a13      	ldr	r2, [pc, #76]	; (800ad34 <HAL_UART_Transmit_IT+0xb4>)
 800ace6:	66da      	str	r2, [r3, #108]	; 0x6c
 800ace8:	e002      	b.n	800acf0 <HAL_UART_Transmit_IT+0x70>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4a12      	ldr	r2, [pc, #72]	; (800ad38 <HAL_UART_Transmit_IT+0xb8>)
 800acee:	66da      	str	r2, [r3, #108]	; 0x6c
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	617b      	str	r3, [r7, #20]
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	e853 3f00 	ldrex	r3, [r3]
 800acfc:	613b      	str	r3, [r7, #16]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	623b      	str	r3, [r7, #32]
 800ad10:	61fa      	str	r2, [r7, #28]
 800ad12:	69f9      	ldr	r1, [r7, #28]
 800ad14:	6a3a      	ldr	r2, [r7, #32]
 800ad16:	e841 2300 	strex	r3, r2, [r1]
 800ad1a:	61bb      	str	r3, [r7, #24]
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1e6      	bne.n	800acf0 <HAL_UART_Transmit_IT+0x70>
 800ad22:	2300      	movs	r3, #0
 800ad24:	e000      	b.n	800ad28 <HAL_UART_Transmit_IT+0xa8>
 800ad26:	2302      	movs	r3, #2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	372c      	adds	r7, #44	; 0x2c
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	0800c6bf 	.word	0x0800c6bf
 800ad38:	0800c607 	.word	0x0800c607

0800ad3c <HAL_UART_Receive_IT>:
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08a      	sub	sp, #40	; 0x28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80fb      	strh	r3, [r7, #6]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad50:	2b20      	cmp	r3, #32
 800ad52:	d132      	bne.n	800adba <HAL_UART_Receive_IT+0x7e>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <HAL_UART_Receive_IT+0x24>
 800ad5a:	88fb      	ldrh	r3, [r7, #6]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <HAL_UART_Receive_IT+0x28>
 800ad60:	2301      	movs	r3, #1
 800ad62:	e02b      	b.n	800adbc <HAL_UART_Receive_IT+0x80>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	661a      	str	r2, [r3, #96]	; 0x60
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d018      	beq.n	800adaa <HAL_UART_Receive_IT+0x6e>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	617b      	str	r3, [r7, #20]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	613b      	str	r3, [r7, #16]
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	623b      	str	r3, [r7, #32]
 800ad98:	61fa      	str	r2, [r7, #28]
 800ad9a:	69f9      	ldr	r1, [r7, #28]
 800ad9c:	6a3a      	ldr	r2, [r7, #32]
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e6      	bne.n	800ad78 <HAL_UART_Receive_IT+0x3c>
 800adaa:	88fb      	ldrh	r3, [r7, #6]
 800adac:	461a      	mov	r2, r3
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f001 f8b1 	bl	800bf18 <UART_Start_Receive_IT>
 800adb6:	4603      	mov	r3, r0
 800adb8:	e000      	b.n	800adbc <HAL_UART_Receive_IT+0x80>
 800adba:	2302      	movs	r3, #2
 800adbc:	4618      	mov	r0, r3
 800adbe:	3728      	adds	r7, #40	; 0x28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <HAL_UART_Transmit_DMA>:
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08a      	sub	sp, #40	; 0x28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	4613      	mov	r3, r2
 800add0:	80fb      	strh	r3, [r7, #6]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add6:	2b20      	cmp	r3, #32
 800add8:	d165      	bne.n	800aea6 <HAL_UART_Transmit_DMA+0xe2>
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <HAL_UART_Transmit_DMA+0x22>
 800ade0:	88fb      	ldrh	r3, [r7, #6]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d101      	bne.n	800adea <HAL_UART_Transmit_DMA+0x26>
 800ade6:	2301      	movs	r3, #1
 800ade8:	e05e      	b.n	800aea8 <HAL_UART_Transmit_DMA+0xe4>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	64da      	str	r2, [r3, #76]	; 0x4c
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	88fa      	ldrh	r2, [r7, #6]
 800adf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	88fa      	ldrh	r2, [r7, #6]
 800adfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2221      	movs	r2, #33	; 0x21
 800ae0c:	67da      	str	r2, [r3, #124]	; 0x7c
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d027      	beq.n	800ae66 <HAL_UART_Transmit_DMA+0xa2>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1a:	4a25      	ldr	r2, [pc, #148]	; (800aeb0 <HAL_UART_Transmit_DMA+0xec>)
 800ae1c:	629a      	str	r2, [r3, #40]	; 0x28
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae22:	4a24      	ldr	r2, [pc, #144]	; (800aeb4 <HAL_UART_Transmit_DMA+0xf0>)
 800ae24:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2a:	4a23      	ldr	r2, [pc, #140]	; (800aeb8 <HAL_UART_Transmit_DMA+0xf4>)
 800ae2c:	631a      	str	r2, [r3, #48]	; 0x30
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae32:	2200      	movs	r2, #0
 800ae34:	635a      	str	r2, [r3, #52]	; 0x34
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae3e:	4619      	mov	r1, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3328      	adds	r3, #40	; 0x28
 800ae46:	461a      	mov	r2, r3
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	f7fb f88a 	bl	8005f62 <HAL_DMA_Start_IT>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d008      	beq.n	800ae66 <HAL_UART_Transmit_DMA+0xa2>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2210      	movs	r2, #16
 800ae58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	67da      	str	r2, [r3, #124]	; 0x7c
 800ae62:	2301      	movs	r3, #1
 800ae64:	e020      	b.n	800aea8 <HAL_UART_Transmit_DMA+0xe4>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2240      	movs	r2, #64	; 0x40
 800ae6c:	621a      	str	r2, [r3, #32]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3308      	adds	r3, #8
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	613b      	str	r3, [r7, #16]
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae84:	627b      	str	r3, [r7, #36]	; 0x24
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8e:	623a      	str	r2, [r7, #32]
 800ae90:	61fb      	str	r3, [r7, #28]
 800ae92:	69f9      	ldr	r1, [r7, #28]
 800ae94:	6a3a      	ldr	r2, [r7, #32]
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	61bb      	str	r3, [r7, #24]
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e5      	bne.n	800ae6e <HAL_UART_Transmit_DMA+0xaa>
 800aea2:	2300      	movs	r3, #0
 800aea4:	e000      	b.n	800aea8 <HAL_UART_Transmit_DMA+0xe4>
 800aea6:	2302      	movs	r3, #2
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3728      	adds	r7, #40	; 0x28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	0800c2d5 	.word	0x0800c2d5
 800aeb4:	0800c369 	.word	0x0800c369
 800aeb8:	0800c4e9 	.word	0x0800c4e9

0800aebc <HAL_UART_Receive_DMA>:
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08a      	sub	sp, #40	; 0x28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	4613      	mov	r3, r2
 800aec8:	80fb      	strh	r3, [r7, #6]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aed0:	2b20      	cmp	r3, #32
 800aed2:	d132      	bne.n	800af3a <HAL_UART_Receive_DMA+0x7e>
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <HAL_UART_Receive_DMA+0x24>
 800aeda:	88fb      	ldrh	r3, [r7, #6]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <HAL_UART_Receive_DMA+0x28>
 800aee0:	2301      	movs	r3, #1
 800aee2:	e02b      	b.n	800af3c <HAL_UART_Receive_DMA+0x80>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	661a      	str	r2, [r3, #96]	; 0x60
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d018      	beq.n	800af2a <HAL_UART_Receive_DMA+0x6e>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	617b      	str	r3, [r7, #20]
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	e853 3f00 	ldrex	r3, [r3]
 800af04:	613b      	str	r3, [r7, #16]
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	623b      	str	r3, [r7, #32]
 800af18:	61fa      	str	r2, [r7, #28]
 800af1a:	69f9      	ldr	r1, [r7, #28]
 800af1c:	6a3a      	ldr	r2, [r7, #32]
 800af1e:	e841 2300 	strex	r3, r2, [r1]
 800af22:	61bb      	str	r3, [r7, #24]
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1e6      	bne.n	800aef8 <HAL_UART_Receive_DMA+0x3c>
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	461a      	mov	r2, r3
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f001 f8a5 	bl	800c080 <UART_Start_Receive_DMA>
 800af36:	4603      	mov	r3, r0
 800af38:	e000      	b.n	800af3c <HAL_UART_Receive_DMA+0x80>
 800af3a:	2302      	movs	r3, #2
 800af3c:	4618      	mov	r0, r3
 800af3e:	3728      	adds	r7, #40	; 0x28
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_UART_AbortTransmit_IT>:
 800af44:	b580      	push	{r7, lr}
 800af46:	b08e      	sub	sp, #56	; 0x38
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	623b      	str	r3, [r7, #32]
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	61fb      	str	r3, [r7, #28]
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af60:	637b      	str	r3, [r7, #52]	; 0x34
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af6c:	62ba      	str	r2, [r7, #40]	; 0x28
 800af6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e6      	bne.n	800af4c <HAL_UART_AbortTransmit_IT+0x8>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af88:	2b80      	cmp	r3, #128	; 0x80
 800af8a:	d13f      	bne.n	800b00c <HAL_UART_AbortTransmit_IT+0xc8>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3308      	adds	r3, #8
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	e853 3f00 	ldrex	r3, [r3]
 800af9a:	60bb      	str	r3, [r7, #8]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afa2:	633b      	str	r3, [r7, #48]	; 0x30
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3308      	adds	r3, #8
 800afaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afac:	61ba      	str	r2, [r7, #24]
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	6979      	ldr	r1, [r7, #20]
 800afb2:	69ba      	ldr	r2, [r7, #24]
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	613b      	str	r3, [r7, #16]
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e5      	bne.n	800af8c <HAL_UART_AbortTransmit_IT+0x48>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d013      	beq.n	800aff0 <HAL_UART_AbortTransmit_IT+0xac>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afcc:	4a18      	ldr	r2, [pc, #96]	; (800b030 <HAL_UART_AbortTransmit_IT+0xec>)
 800afce:	635a      	str	r2, [r3, #52]	; 0x34
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fb f85c 	bl	8006092 <HAL_DMA_Abort_IT>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d022      	beq.n	800b026 <HAL_UART_AbortTransmit_IT+0xe2>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800afea:	4610      	mov	r0, r2
 800afec:	4798      	blx	r3
 800afee:	e01a      	b.n	800b026 <HAL_UART_AbortTransmit_IT+0xe2>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	66da      	str	r2, [r3, #108]	; 0x6c
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2220      	movs	r2, #32
 800b002:	67da      	str	r2, [r3, #124]	; 0x7c
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fbe1 	bl	800b7cc <HAL_UART_AbortTransmitCpltCallback>
 800b00a:	e00c      	b.n	800b026 <HAL_UART_AbortTransmit_IT+0xe2>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	66da      	str	r2, [r3, #108]	; 0x6c
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2220      	movs	r2, #32
 800b01e:	67da      	str	r2, [r3, #124]	; 0x7c
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fbd3 	bl	800b7cc <HAL_UART_AbortTransmitCpltCallback>
 800b026:	2300      	movs	r3, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	3738      	adds	r7, #56	; 0x38
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	0800c593 	.word	0x0800c593

0800b034 <HAL_UART_AbortReceive_IT>:
 800b034:	b580      	push	{r7, lr}
 800b036:	b09a      	sub	sp, #104	; 0x68
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	64bb      	str	r3, [r7, #72]	; 0x48
 800b042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b044:	e853 3f00 	ldrex	r3, [r3]
 800b048:	647b      	str	r3, [r7, #68]	; 0x44
 800b04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b04c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b050:	667b      	str	r3, [r7, #100]	; 0x64
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b05a:	657b      	str	r3, [r7, #84]	; 0x54
 800b05c:	653a      	str	r2, [r7, #80]	; 0x50
 800b05e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b062:	e841 2300 	strex	r3, r2, [r1]
 800b066:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1e6      	bne.n	800b03c <HAL_UART_AbortReceive_IT+0x8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	637b      	str	r3, [r7, #52]	; 0x34
 800b076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b078:	e853 3f00 	ldrex	r3, [r3]
 800b07c:	633b      	str	r3, [r7, #48]	; 0x30
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	f023 0301 	bic.w	r3, r3, #1
 800b084:	663b      	str	r3, [r7, #96]	; 0x60
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b08e:	643a      	str	r2, [r7, #64]	; 0x40
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b092:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b096:	e841 2300 	strex	r3, r2, [r1]
 800b09a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1e5      	bne.n	800b06e <HAL_UART_AbortReceive_IT+0x3a>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d118      	bne.n	800b0dc <HAL_UART_AbortReceive_IT+0xa8>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	623b      	str	r3, [r7, #32]
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	61fb      	str	r3, [r7, #28]
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	f023 0310 	bic.w	r3, r3, #16
 800b0be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ca:	62ba      	str	r2, [r7, #40]	; 0x28
 800b0cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0d0:	e841 2300 	strex	r3, r2, [r1]
 800b0d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e6      	bne.n	800b0aa <HAL_UART_AbortReceive_IT+0x76>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e6:	2b40      	cmp	r3, #64	; 0x40
 800b0e8:	d14f      	bne.n	800b18a <HAL_UART_AbortReceive_IT+0x156>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	60bb      	str	r3, [r7, #8]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b100:	65bb      	str	r3, [r7, #88]	; 0x58
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3308      	adds	r3, #8
 800b108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b10a:	61ba      	str	r2, [r7, #24]
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	6979      	ldr	r1, [r7, #20]
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	e841 2300 	strex	r3, r2, [r1]
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1e5      	bne.n	800b0ea <HAL_UART_AbortReceive_IT+0xb6>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b122:	2b00      	cmp	r3, #0
 800b124:	d013      	beq.n	800b14e <HAL_UART_AbortReceive_IT+0x11a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b12a:	4a25      	ldr	r2, [pc, #148]	; (800b1c0 <HAL_UART_AbortReceive_IT+0x18c>)
 800b12c:	635a      	str	r2, [r3, #52]	; 0x34
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b132:	4618      	mov	r0, r3
 800b134:	f7fa ffad 	bl	8006092 <HAL_DMA_Abort_IT>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d03a      	beq.n	800b1b4 <HAL_UART_AbortReceive_IT+0x180>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b148:	4610      	mov	r0, r2
 800b14a:	4798      	blx	r3
 800b14c:	e032      	b.n	800b1b4 <HAL_UART_AbortReceive_IT+0x180>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	655a      	str	r2, [r3, #84]	; 0x54
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	220f      	movs	r2, #15
 800b162:	621a      	str	r2, [r3, #32]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	699a      	ldr	r2, [r3, #24]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f042 0208 	orr.w	r2, r2, #8
 800b172:	619a      	str	r2, [r3, #24]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2220      	movs	r2, #32
 800b178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	661a      	str	r2, [r3, #96]	; 0x60
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fb2c 	bl	800b7e0 <HAL_UART_AbortReceiveCpltCallback>
 800b188:	e014      	b.n	800b1b4 <HAL_UART_AbortReceive_IT+0x180>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	655a      	str	r2, [r3, #84]	; 0x54
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	220f      	movs	r2, #15
 800b19e:	621a      	str	r2, [r3, #32]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	661a      	str	r2, [r3, #96]	; 0x60
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fb16 	bl	800b7e0 <HAL_UART_AbortReceiveCpltCallback>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3768      	adds	r7, #104	; 0x68
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	0800c5bd 	.word	0x0800c5bd

0800b1c4 <HAL_UART_IRQHandler>:
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b0ba      	sub	sp, #232	; 0xe8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b1ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d115      	bne.n	800b22c <HAL_UART_IRQHandler+0x68>
 800b200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00f      	beq.n	800b22c <HAL_UART_IRQHandler+0x68>
 800b20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <HAL_UART_IRQHandler+0x68>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 82ab 	beq.w	800b778 <HAL_UART_IRQHandler+0x5b4>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	4798      	blx	r3
 800b22a:	e2a5      	b.n	800b778 <HAL_UART_IRQHandler+0x5b4>
 800b22c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8117 	beq.w	800b464 <HAL_UART_IRQHandler+0x2a0>
 800b236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <HAL_UART_IRQHandler+0x8c>
 800b242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b246:	4b85      	ldr	r3, [pc, #532]	; (800b45c <HAL_UART_IRQHandler+0x298>)
 800b248:	4013      	ands	r3, r2
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 810a 	beq.w	800b464 <HAL_UART_IRQHandler+0x2a0>
 800b250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d011      	beq.n	800b280 <HAL_UART_IRQHandler+0xbc>
 800b25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00b      	beq.n	800b280 <HAL_UART_IRQHandler+0xbc>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2201      	movs	r2, #1
 800b26e:	621a      	str	r2, [r3, #32]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b276:	f043 0201 	orr.w	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d011      	beq.n	800b2b0 <HAL_UART_IRQHandler+0xec>
 800b28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <HAL_UART_IRQHandler+0xec>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2202      	movs	r2, #2
 800b29e:	621a      	str	r2, [r3, #32]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2a6:	f043 0204 	orr.w	r2, r3, #4
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d011      	beq.n	800b2e0 <HAL_UART_IRQHandler+0x11c>
 800b2bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00b      	beq.n	800b2e0 <HAL_UART_IRQHandler+0x11c>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	621a      	str	r2, [r3, #32]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2d6:	f043 0202 	orr.w	r2, r3, #2
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d017      	beq.n	800b31c <HAL_UART_IRQHandler+0x158>
 800b2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d105      	bne.n	800b304 <HAL_UART_IRQHandler+0x140>
 800b2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <HAL_UART_IRQHandler+0x158>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2208      	movs	r2, #8
 800b30a:	621a      	str	r2, [r3, #32]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b312:	f043 0208 	orr.w	r2, r3, #8
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b324:	2b00      	cmp	r3, #0
 800b326:	d012      	beq.n	800b34e <HAL_UART_IRQHandler+0x18a>
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b32c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00c      	beq.n	800b34e <HAL_UART_IRQHandler+0x18a>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b33c:	621a      	str	r2, [r3, #32]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b344:	f043 0220 	orr.w	r2, r3, #32
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 8211 	beq.w	800b77c <HAL_UART_IRQHandler+0x5b8>
 800b35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b35e:	f003 0320 	and.w	r3, r3, #32
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00d      	beq.n	800b382 <HAL_UART_IRQHandler+0x1be>
 800b366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d007      	beq.n	800b382 <HAL_UART_IRQHandler+0x1be>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <HAL_UART_IRQHandler+0x1be>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4798      	blx	r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b396:	2b40      	cmp	r3, #64	; 0x40
 800b398:	d005      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x1e2>
 800b39a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b39e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d04f      	beq.n	800b446 <HAL_UART_IRQHandler+0x282>
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 ff30 	bl	800c20c <UART_EndRxTransfer>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b6:	2b40      	cmp	r3, #64	; 0x40
 800b3b8:	d141      	bne.n	800b43e <HAL_UART_IRQHandler+0x27a>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3308      	adds	r3, #8
 800b3c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b3ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3f6:	e841 2300 	strex	r3, r2, [r1]
 800b3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1d9      	bne.n	800b3ba <HAL_UART_IRQHandler+0x1f6>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d013      	beq.n	800b436 <HAL_UART_IRQHandler+0x272>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b412:	4a13      	ldr	r2, [pc, #76]	; (800b460 <HAL_UART_IRQHandler+0x29c>)
 800b414:	635a      	str	r2, [r3, #52]	; 0x34
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fa fe39 	bl	8006092 <HAL_DMA_Abort_IT>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d017      	beq.n	800b456 <HAL_UART_IRQHandler+0x292>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b430:	4610      	mov	r0, r2
 800b432:	4798      	blx	r3
 800b434:	e00f      	b.n	800b456 <HAL_UART_IRQHandler+0x292>
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f9be 	bl	800b7b8 <HAL_UART_ErrorCallback>
 800b43c:	e00b      	b.n	800b456 <HAL_UART_IRQHandler+0x292>
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f9ba 	bl	800b7b8 <HAL_UART_ErrorCallback>
 800b444:	e007      	b.n	800b456 <HAL_UART_IRQHandler+0x292>
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f9b6 	bl	800b7b8 <HAL_UART_ErrorCallback>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b454:	e192      	b.n	800b77c <HAL_UART_IRQHandler+0x5b8>
 800b456:	bf00      	nop
 800b458:	e190      	b.n	800b77c <HAL_UART_IRQHandler+0x5b8>
 800b45a:	bf00      	nop
 800b45c:	04000120 	.word	0x04000120
 800b460:	0800c567 	.word	0x0800c567
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b468:	2b01      	cmp	r3, #1
 800b46a:	f040 814b 	bne.w	800b704 <HAL_UART_IRQHandler+0x540>
 800b46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b472:	f003 0310 	and.w	r3, r3, #16
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 8144 	beq.w	800b704 <HAL_UART_IRQHandler+0x540>
 800b47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 813d 	beq.w	800b704 <HAL_UART_IRQHandler+0x540>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2210      	movs	r2, #16
 800b490:	621a      	str	r2, [r3, #32]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49c:	2b40      	cmp	r3, #64	; 0x40
 800b49e:	f040 80b5 	bne.w	800b60c <HAL_UART_IRQHandler+0x448>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800b4ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 8164 	beq.w	800b780 <HAL_UART_IRQHandler+0x5bc>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b4be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	f080 815c 	bcs.w	800b780 <HAL_UART_IRQHandler+0x5bc>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	f000 8086 	beq.w	800b5ea <HAL_UART_IRQHandler+0x426>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b50c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b510:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b514:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1da      	bne.n	800b4de <HAL_UART_IRQHandler+0x31a>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3308      	adds	r3, #8
 800b52e:	677b      	str	r3, [r7, #116]	; 0x74
 800b530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	673b      	str	r3, [r7, #112]	; 0x70
 800b538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b53a:	f023 0301 	bic.w	r3, r3, #1
 800b53e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3308      	adds	r3, #8
 800b548:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b54c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b550:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b552:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b55e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e1      	bne.n	800b528 <HAL_UART_IRQHandler+0x364>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3308      	adds	r3, #8
 800b56a:	663b      	str	r3, [r7, #96]	; 0x60
 800b56c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b56e:	e853 3f00 	ldrex	r3, [r3]
 800b572:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b57a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3308      	adds	r3, #8
 800b584:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b588:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b58a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b58c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b58e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b590:	e841 2300 	strex	r3, r2, [r1]
 800b594:	667b      	str	r3, [r7, #100]	; 0x64
 800b596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e3      	bne.n	800b564 <HAL_UART_IRQHandler+0x3a0>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2220      	movs	r2, #32
 800b5a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	661a      	str	r2, [r3, #96]	; 0x60
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b2:	e853 3f00 	ldrex	r3, [r3]
 800b5b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ba:	f023 0310 	bic.w	r3, r3, #16
 800b5be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5ce:	657a      	str	r2, [r7, #84]	; 0x54
 800b5d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b5da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e4      	bne.n	800b5aa <HAL_UART_IRQHandler+0x3e6>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fa fd1b 	bl	8006020 <HAL_DMA_Abort>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	665a      	str	r2, [r3, #100]	; 0x64
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	b29b      	uxth	r3, r3
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 f8f5 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
 800b60a:	e0b9      	b.n	800b780 <HAL_UART_IRQHandler+0x5bc>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b618:	b29b      	uxth	r3, r3
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b626:	b29b      	uxth	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 80ab 	beq.w	800b784 <HAL_UART_IRQHandler+0x5c0>
 800b62e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 80a6 	beq.w	800b784 <HAL_UART_IRQHandler+0x5c0>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b640:	e853 3f00 	ldrex	r3, [r3]
 800b644:	637b      	str	r3, [r7, #52]	; 0x34
 800b646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b64c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	461a      	mov	r2, r3
 800b656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b65a:	647b      	str	r3, [r7, #68]	; 0x44
 800b65c:	643a      	str	r2, [r7, #64]	; 0x40
 800b65e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b662:	e841 2300 	strex	r3, r2, [r1]
 800b666:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1e4      	bne.n	800b638 <HAL_UART_IRQHandler+0x474>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3308      	adds	r3, #8
 800b674:	627b      	str	r3, [r7, #36]	; 0x24
 800b676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	623b      	str	r3, [r7, #32]
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	f023 0301 	bic.w	r3, r3, #1
 800b684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3308      	adds	r3, #8
 800b68e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b692:	633a      	str	r2, [r7, #48]	; 0x30
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e3      	bne.n	800b66e <HAL_UART_IRQHandler+0x4aa>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	661a      	str	r2, [r3, #96]	; 0x60
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	669a      	str	r2, [r3, #104]	; 0x68
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	613b      	str	r3, [r7, #16]
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	e853 3f00 	ldrex	r3, [r3]
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f023 0310 	bic.w	r3, r3, #16
 800b6ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6dc:	61fb      	str	r3, [r7, #28]
 800b6de:	61ba      	str	r2, [r7, #24]
 800b6e0:	69b9      	ldr	r1, [r7, #24]
 800b6e2:	69fa      	ldr	r2, [r7, #28]
 800b6e4:	e841 2300 	strex	r3, r2, [r1]
 800b6e8:	617b      	str	r3, [r7, #20]
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1e4      	bne.n	800b6ba <HAL_UART_IRQHandler+0x4f6>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	665a      	str	r2, [r3, #100]	; 0x64
 800b6f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f879 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
 800b702:	e03f      	b.n	800b784 <HAL_UART_IRQHandler+0x5c0>
 800b704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00e      	beq.n	800b72e <HAL_UART_IRQHandler+0x56a>
 800b710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d008      	beq.n	800b72e <HAL_UART_IRQHandler+0x56a>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b724:	621a      	str	r2, [r3, #32]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f001 f9fb 	bl	800cb22 <HAL_UARTEx_WakeupCallback>
 800b72c:	e02d      	b.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00e      	beq.n	800b758 <HAL_UART_IRQHandler+0x594>
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b742:	2b00      	cmp	r3, #0
 800b744:	d008      	beq.n	800b758 <HAL_UART_IRQHandler+0x594>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d01c      	beq.n	800b788 <HAL_UART_IRQHandler+0x5c4>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
 800b756:	e017      	b.n	800b788 <HAL_UART_IRQHandler+0x5c4>
 800b758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d012      	beq.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00c      	beq.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f001 f804 	bl	800c77e <UART_EndTransmit_IT>
 800b776:	e008      	b.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b778:	bf00      	nop
 800b77a:	e006      	b.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b77c:	bf00      	nop
 800b77e:	e004      	b.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b780:	bf00      	nop
 800b782:	e002      	b.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b784:	bf00      	nop
 800b786:	e000      	b.n	800b78a <HAL_UART_IRQHandler+0x5c6>
 800b788:	bf00      	nop
 800b78a:	37e8      	adds	r7, #232	; 0xe8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <HAL_UART_TxHalfCpltCallback>:
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_UART_RxHalfCpltCallback>:
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_UART_ErrorCallback>:
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_UART_AbortTransmitCpltCallback>:
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_UART_AbortReceiveCpltCallback>:
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_UARTEx_RxEventCallback>:
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	807b      	strh	r3, [r7, #2]
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <UART_SetConfig>:
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	2300      	movs	r3, #0
 800b816:	77bb      	strb	r3, [r7, #30]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	431a      	orrs	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	431a      	orrs	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	617b      	str	r3, [r7, #20]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b83a:	f023 030c 	bic.w	r3, r3, #12
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	6979      	ldr	r1, [r7, #20]
 800b844:	430b      	orrs	r3, r1
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68da      	ldr	r2, [r3, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	605a      	str	r2, [r3, #4]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a1b      	ldr	r3, [r3, #32]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	430a      	orrs	r2, r1
 800b880:	609a      	str	r2, [r3, #8]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4aa7      	ldr	r2, [pc, #668]	; (800bb24 <UART_SetConfig+0x318>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d120      	bne.n	800b8ce <UART_SetConfig+0xc2>
 800b88c:	4ba6      	ldr	r3, [pc, #664]	; (800bb28 <UART_SetConfig+0x31c>)
 800b88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b890:	f003 0303 	and.w	r3, r3, #3
 800b894:	2b03      	cmp	r3, #3
 800b896:	d817      	bhi.n	800b8c8 <UART_SetConfig+0xbc>
 800b898:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <UART_SetConfig+0x94>)
 800b89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89e:	bf00      	nop
 800b8a0:	0800b8b1 	.word	0x0800b8b1
 800b8a4:	0800b8bd 	.word	0x0800b8bd
 800b8a8:	0800b8c3 	.word	0x0800b8c3
 800b8ac:	0800b8b7 	.word	0x0800b8b7
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	77fb      	strb	r3, [r7, #31]
 800b8b4:	e0b5      	b.n	800ba22 <UART_SetConfig+0x216>
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	77fb      	strb	r3, [r7, #31]
 800b8ba:	e0b2      	b.n	800ba22 <UART_SetConfig+0x216>
 800b8bc:	2304      	movs	r3, #4
 800b8be:	77fb      	strb	r3, [r7, #31]
 800b8c0:	e0af      	b.n	800ba22 <UART_SetConfig+0x216>
 800b8c2:	2308      	movs	r3, #8
 800b8c4:	77fb      	strb	r3, [r7, #31]
 800b8c6:	e0ac      	b.n	800ba22 <UART_SetConfig+0x216>
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	77fb      	strb	r3, [r7, #31]
 800b8cc:	e0a9      	b.n	800ba22 <UART_SetConfig+0x216>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a96      	ldr	r2, [pc, #600]	; (800bb2c <UART_SetConfig+0x320>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d124      	bne.n	800b922 <UART_SetConfig+0x116>
 800b8d8:	4b93      	ldr	r3, [pc, #588]	; (800bb28 <UART_SetConfig+0x31c>)
 800b8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b8e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8e4:	d011      	beq.n	800b90a <UART_SetConfig+0xfe>
 800b8e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8ea:	d817      	bhi.n	800b91c <UART_SetConfig+0x110>
 800b8ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8f0:	d011      	beq.n	800b916 <UART_SetConfig+0x10a>
 800b8f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8f6:	d811      	bhi.n	800b91c <UART_SetConfig+0x110>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <UART_SetConfig+0xf8>
 800b8fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b900:	d006      	beq.n	800b910 <UART_SetConfig+0x104>
 800b902:	e00b      	b.n	800b91c <UART_SetConfig+0x110>
 800b904:	2300      	movs	r3, #0
 800b906:	77fb      	strb	r3, [r7, #31]
 800b908:	e08b      	b.n	800ba22 <UART_SetConfig+0x216>
 800b90a:	2302      	movs	r3, #2
 800b90c:	77fb      	strb	r3, [r7, #31]
 800b90e:	e088      	b.n	800ba22 <UART_SetConfig+0x216>
 800b910:	2304      	movs	r3, #4
 800b912:	77fb      	strb	r3, [r7, #31]
 800b914:	e085      	b.n	800ba22 <UART_SetConfig+0x216>
 800b916:	2308      	movs	r3, #8
 800b918:	77fb      	strb	r3, [r7, #31]
 800b91a:	e082      	b.n	800ba22 <UART_SetConfig+0x216>
 800b91c:	2310      	movs	r3, #16
 800b91e:	77fb      	strb	r3, [r7, #31]
 800b920:	e07f      	b.n	800ba22 <UART_SetConfig+0x216>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a82      	ldr	r2, [pc, #520]	; (800bb30 <UART_SetConfig+0x324>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d124      	bne.n	800b976 <UART_SetConfig+0x16a>
 800b92c:	4b7e      	ldr	r3, [pc, #504]	; (800bb28 <UART_SetConfig+0x31c>)
 800b92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b930:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b934:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b938:	d011      	beq.n	800b95e <UART_SetConfig+0x152>
 800b93a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b93e:	d817      	bhi.n	800b970 <UART_SetConfig+0x164>
 800b940:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b944:	d011      	beq.n	800b96a <UART_SetConfig+0x15e>
 800b946:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b94a:	d811      	bhi.n	800b970 <UART_SetConfig+0x164>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <UART_SetConfig+0x14c>
 800b950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b954:	d006      	beq.n	800b964 <UART_SetConfig+0x158>
 800b956:	e00b      	b.n	800b970 <UART_SetConfig+0x164>
 800b958:	2300      	movs	r3, #0
 800b95a:	77fb      	strb	r3, [r7, #31]
 800b95c:	e061      	b.n	800ba22 <UART_SetConfig+0x216>
 800b95e:	2302      	movs	r3, #2
 800b960:	77fb      	strb	r3, [r7, #31]
 800b962:	e05e      	b.n	800ba22 <UART_SetConfig+0x216>
 800b964:	2304      	movs	r3, #4
 800b966:	77fb      	strb	r3, [r7, #31]
 800b968:	e05b      	b.n	800ba22 <UART_SetConfig+0x216>
 800b96a:	2308      	movs	r3, #8
 800b96c:	77fb      	strb	r3, [r7, #31]
 800b96e:	e058      	b.n	800ba22 <UART_SetConfig+0x216>
 800b970:	2310      	movs	r3, #16
 800b972:	77fb      	strb	r3, [r7, #31]
 800b974:	e055      	b.n	800ba22 <UART_SetConfig+0x216>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a6e      	ldr	r2, [pc, #440]	; (800bb34 <UART_SetConfig+0x328>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d124      	bne.n	800b9ca <UART_SetConfig+0x1be>
 800b980:	4b69      	ldr	r3, [pc, #420]	; (800bb28 <UART_SetConfig+0x31c>)
 800b982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b984:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b98c:	d011      	beq.n	800b9b2 <UART_SetConfig+0x1a6>
 800b98e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b992:	d817      	bhi.n	800b9c4 <UART_SetConfig+0x1b8>
 800b994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b998:	d011      	beq.n	800b9be <UART_SetConfig+0x1b2>
 800b99a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b99e:	d811      	bhi.n	800b9c4 <UART_SetConfig+0x1b8>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <UART_SetConfig+0x1a0>
 800b9a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9a8:	d006      	beq.n	800b9b8 <UART_SetConfig+0x1ac>
 800b9aa:	e00b      	b.n	800b9c4 <UART_SetConfig+0x1b8>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	77fb      	strb	r3, [r7, #31]
 800b9b0:	e037      	b.n	800ba22 <UART_SetConfig+0x216>
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	77fb      	strb	r3, [r7, #31]
 800b9b6:	e034      	b.n	800ba22 <UART_SetConfig+0x216>
 800b9b8:	2304      	movs	r3, #4
 800b9ba:	77fb      	strb	r3, [r7, #31]
 800b9bc:	e031      	b.n	800ba22 <UART_SetConfig+0x216>
 800b9be:	2308      	movs	r3, #8
 800b9c0:	77fb      	strb	r3, [r7, #31]
 800b9c2:	e02e      	b.n	800ba22 <UART_SetConfig+0x216>
 800b9c4:	2310      	movs	r3, #16
 800b9c6:	77fb      	strb	r3, [r7, #31]
 800b9c8:	e02b      	b.n	800ba22 <UART_SetConfig+0x216>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a5a      	ldr	r2, [pc, #360]	; (800bb38 <UART_SetConfig+0x32c>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d124      	bne.n	800ba1e <UART_SetConfig+0x212>
 800b9d4:	4b54      	ldr	r3, [pc, #336]	; (800bb28 <UART_SetConfig+0x31c>)
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b9dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b9e0:	d011      	beq.n	800ba06 <UART_SetConfig+0x1fa>
 800b9e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b9e6:	d817      	bhi.n	800ba18 <UART_SetConfig+0x20c>
 800b9e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9ec:	d011      	beq.n	800ba12 <UART_SetConfig+0x206>
 800b9ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9f2:	d811      	bhi.n	800ba18 <UART_SetConfig+0x20c>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <UART_SetConfig+0x1f4>
 800b9f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9fc:	d006      	beq.n	800ba0c <UART_SetConfig+0x200>
 800b9fe:	e00b      	b.n	800ba18 <UART_SetConfig+0x20c>
 800ba00:	2300      	movs	r3, #0
 800ba02:	77fb      	strb	r3, [r7, #31]
 800ba04:	e00d      	b.n	800ba22 <UART_SetConfig+0x216>
 800ba06:	2302      	movs	r3, #2
 800ba08:	77fb      	strb	r3, [r7, #31]
 800ba0a:	e00a      	b.n	800ba22 <UART_SetConfig+0x216>
 800ba0c:	2304      	movs	r3, #4
 800ba0e:	77fb      	strb	r3, [r7, #31]
 800ba10:	e007      	b.n	800ba22 <UART_SetConfig+0x216>
 800ba12:	2308      	movs	r3, #8
 800ba14:	77fb      	strb	r3, [r7, #31]
 800ba16:	e004      	b.n	800ba22 <UART_SetConfig+0x216>
 800ba18:	2310      	movs	r3, #16
 800ba1a:	77fb      	strb	r3, [r7, #31]
 800ba1c:	e001      	b.n	800ba22 <UART_SetConfig+0x216>
 800ba1e:	2310      	movs	r3, #16
 800ba20:	77fb      	strb	r3, [r7, #31]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba2a:	d15b      	bne.n	800bae4 <UART_SetConfig+0x2d8>
 800ba2c:	7ffb      	ldrb	r3, [r7, #31]
 800ba2e:	2b08      	cmp	r3, #8
 800ba30:	d827      	bhi.n	800ba82 <UART_SetConfig+0x276>
 800ba32:	a201      	add	r2, pc, #4	; (adr r2, 800ba38 <UART_SetConfig+0x22c>)
 800ba34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba38:	0800ba5d 	.word	0x0800ba5d
 800ba3c:	0800ba65 	.word	0x0800ba65
 800ba40:	0800ba6d 	.word	0x0800ba6d
 800ba44:	0800ba83 	.word	0x0800ba83
 800ba48:	0800ba73 	.word	0x0800ba73
 800ba4c:	0800ba83 	.word	0x0800ba83
 800ba50:	0800ba83 	.word	0x0800ba83
 800ba54:	0800ba83 	.word	0x0800ba83
 800ba58:	0800ba7b 	.word	0x0800ba7b
 800ba5c:	f7fe fb64 	bl	800a128 <HAL_RCC_GetPCLK1Freq>
 800ba60:	61b8      	str	r0, [r7, #24]
 800ba62:	e013      	b.n	800ba8c <UART_SetConfig+0x280>
 800ba64:	f7fe fb82 	bl	800a16c <HAL_RCC_GetPCLK2Freq>
 800ba68:	61b8      	str	r0, [r7, #24]
 800ba6a:	e00f      	b.n	800ba8c <UART_SetConfig+0x280>
 800ba6c:	4b33      	ldr	r3, [pc, #204]	; (800bb3c <UART_SetConfig+0x330>)
 800ba6e:	61bb      	str	r3, [r7, #24]
 800ba70:	e00c      	b.n	800ba8c <UART_SetConfig+0x280>
 800ba72:	f7fe fae1 	bl	800a038 <HAL_RCC_GetSysClockFreq>
 800ba76:	61b8      	str	r0, [r7, #24]
 800ba78:	e008      	b.n	800ba8c <UART_SetConfig+0x280>
 800ba7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba7e:	61bb      	str	r3, [r7, #24]
 800ba80:	e004      	b.n	800ba8c <UART_SetConfig+0x280>
 800ba82:	2300      	movs	r3, #0
 800ba84:	61bb      	str	r3, [r7, #24]
 800ba86:	2301      	movs	r3, #1
 800ba88:	77bb      	strb	r3, [r7, #30]
 800ba8a:	bf00      	nop
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 8082 	beq.w	800bb98 <UART_SetConfig+0x38c>
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	005a      	lsls	r2, r3, #1
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	085b      	lsrs	r3, r3, #1
 800ba9e:	441a      	add	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa8:	613b      	str	r3, [r7, #16]
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2b0f      	cmp	r3, #15
 800baae:	d916      	bls.n	800bade <UART_SetConfig+0x2d2>
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab6:	d212      	bcs.n	800bade <UART_SetConfig+0x2d2>
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	b29b      	uxth	r3, r3
 800babc:	f023 030f 	bic.w	r3, r3, #15
 800bac0:	81fb      	strh	r3, [r7, #14]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	085b      	lsrs	r3, r3, #1
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	f003 0307 	and.w	r3, r3, #7
 800bacc:	b29a      	uxth	r2, r3
 800bace:	89fb      	ldrh	r3, [r7, #14]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	81fb      	strh	r3, [r7, #14]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	89fa      	ldrh	r2, [r7, #14]
 800bada:	60da      	str	r2, [r3, #12]
 800badc:	e05c      	b.n	800bb98 <UART_SetConfig+0x38c>
 800bade:	2301      	movs	r3, #1
 800bae0:	77bb      	strb	r3, [r7, #30]
 800bae2:	e059      	b.n	800bb98 <UART_SetConfig+0x38c>
 800bae4:	7ffb      	ldrb	r3, [r7, #31]
 800bae6:	2b08      	cmp	r3, #8
 800bae8:	d835      	bhi.n	800bb56 <UART_SetConfig+0x34a>
 800baea:	a201      	add	r2, pc, #4	; (adr r2, 800baf0 <UART_SetConfig+0x2e4>)
 800baec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf0:	0800bb15 	.word	0x0800bb15
 800baf4:	0800bb1d 	.word	0x0800bb1d
 800baf8:	0800bb41 	.word	0x0800bb41
 800bafc:	0800bb57 	.word	0x0800bb57
 800bb00:	0800bb47 	.word	0x0800bb47
 800bb04:	0800bb57 	.word	0x0800bb57
 800bb08:	0800bb57 	.word	0x0800bb57
 800bb0c:	0800bb57 	.word	0x0800bb57
 800bb10:	0800bb4f 	.word	0x0800bb4f
 800bb14:	f7fe fb08 	bl	800a128 <HAL_RCC_GetPCLK1Freq>
 800bb18:	61b8      	str	r0, [r7, #24]
 800bb1a:	e021      	b.n	800bb60 <UART_SetConfig+0x354>
 800bb1c:	f7fe fb26 	bl	800a16c <HAL_RCC_GetPCLK2Freq>
 800bb20:	61b8      	str	r0, [r7, #24]
 800bb22:	e01d      	b.n	800bb60 <UART_SetConfig+0x354>
 800bb24:	40013800 	.word	0x40013800
 800bb28:	40021000 	.word	0x40021000
 800bb2c:	40004400 	.word	0x40004400
 800bb30:	40004800 	.word	0x40004800
 800bb34:	40004c00 	.word	0x40004c00
 800bb38:	40005000 	.word	0x40005000
 800bb3c:	007a1200 	.word	0x007a1200
 800bb40:	4b1b      	ldr	r3, [pc, #108]	; (800bbb0 <UART_SetConfig+0x3a4>)
 800bb42:	61bb      	str	r3, [r7, #24]
 800bb44:	e00c      	b.n	800bb60 <UART_SetConfig+0x354>
 800bb46:	f7fe fa77 	bl	800a038 <HAL_RCC_GetSysClockFreq>
 800bb4a:	61b8      	str	r0, [r7, #24]
 800bb4c:	e008      	b.n	800bb60 <UART_SetConfig+0x354>
 800bb4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb52:	61bb      	str	r3, [r7, #24]
 800bb54:	e004      	b.n	800bb60 <UART_SetConfig+0x354>
 800bb56:	2300      	movs	r3, #0
 800bb58:	61bb      	str	r3, [r7, #24]
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	77bb      	strb	r3, [r7, #30]
 800bb5e:	bf00      	nop
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d018      	beq.n	800bb98 <UART_SetConfig+0x38c>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	085a      	lsrs	r2, r3, #1
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	441a      	add	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb78:	613b      	str	r3, [r7, #16]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	2b0f      	cmp	r3, #15
 800bb7e:	d909      	bls.n	800bb94 <UART_SetConfig+0x388>
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb86:	d205      	bcs.n	800bb94 <UART_SetConfig+0x388>
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	60da      	str	r2, [r3, #12]
 800bb92:	e001      	b.n	800bb98 <UART_SetConfig+0x38c>
 800bb94:	2301      	movs	r3, #1
 800bb96:	77bb      	strb	r3, [r7, #30]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	669a      	str	r2, [r3, #104]	; 0x68
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	66da      	str	r2, [r3, #108]	; 0x6c
 800bba4:	7fbb      	ldrb	r3, [r7, #30]
 800bba6:	4618      	mov	r0, r3
 800bba8:	3720      	adds	r7, #32
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	007a1200 	.word	0x007a1200

0800bbb4 <UART_AdvFeatureConfig>:
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00a      	beq.n	800bbde <UART_AdvFeatureConfig+0x2a>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	605a      	str	r2, [r3, #4]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	f003 0302 	and.w	r3, r3, #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00a      	beq.n	800bc00 <UART_AdvFeatureConfig+0x4c>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	605a      	str	r2, [r3, #4]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <UART_AdvFeatureConfig+0x6e>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	605a      	str	r2, [r3, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	f003 0308 	and.w	r3, r3, #8
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00a      	beq.n	800bc44 <UART_AdvFeatureConfig+0x90>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	605a      	str	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	f003 0310 	and.w	r3, r3, #16
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00a      	beq.n	800bc66 <UART_AdvFeatureConfig+0xb2>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	609a      	str	r2, [r3, #8]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <UART_AdvFeatureConfig+0xd4>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	430a      	orrs	r2, r1
 800bc86:	609a      	str	r2, [r3, #8]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01a      	beq.n	800bcca <UART_AdvFeatureConfig+0x116>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	605a      	str	r2, [r3, #4]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb2:	d10a      	bne.n	800bcca <UART_AdvFeatureConfig+0x116>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00a      	beq.n	800bcec <UART_AdvFeatureConfig+0x138>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	605a      	str	r2, [r3, #4]
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <UART_CheckIdleState>:
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b098      	sub	sp, #96	; 0x60
 800bcfc:	af02      	add	r7, sp, #8
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bd08:	f7f9 ffd2 	bl	8005cb0 <HAL_GetTick>
 800bd0c:	6578      	str	r0, [r7, #84]	; 0x54
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0308 	and.w	r3, r3, #8
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d12e      	bne.n	800bd7a <UART_CheckIdleState+0x82>
 800bd1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd24:	2200      	movs	r2, #0
 800bd26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f88c 	bl	800be48 <UART_WaitOnFlagUntilTimeout>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d021      	beq.n	800bd7a <UART_CheckIdleState+0x82>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	637b      	str	r3, [r7, #52]	; 0x34
 800bd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd4a:	653b      	str	r3, [r7, #80]	; 0x50
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	461a      	mov	r2, r3
 800bd52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd54:	647b      	str	r3, [r7, #68]	; 0x44
 800bd56:	643a      	str	r2, [r7, #64]	; 0x40
 800bd58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd5c:	e841 2300 	strex	r3, r2, [r1]
 800bd60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1e6      	bne.n	800bd36 <UART_CheckIdleState+0x3e>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2220      	movs	r2, #32
 800bd6c:	67da      	str	r2, [r3, #124]	; 0x7c
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800bd76:	2303      	movs	r3, #3
 800bd78:	e062      	b.n	800be40 <UART_CheckIdleState+0x148>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d149      	bne.n	800be1c <UART_CheckIdleState+0x124>
 800bd88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd90:	2200      	movs	r2, #0
 800bd92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f856 	bl	800be48 <UART_WaitOnFlagUntilTimeout>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d03c      	beq.n	800be1c <UART_CheckIdleState+0x124>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	623b      	str	r3, [r7, #32]
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc0:	633b      	str	r3, [r7, #48]	; 0x30
 800bdc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e6      	bne.n	800bda2 <UART_CheckIdleState+0xaa>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3308      	adds	r3, #8
 800bdda:	613b      	str	r3, [r7, #16]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	e853 3f00 	ldrex	r3, [r3]
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f023 0301 	bic.w	r3, r3, #1
 800bdea:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdf4:	61fa      	str	r2, [r7, #28]
 800bdf6:	61bb      	str	r3, [r7, #24]
 800bdf8:	69b9      	ldr	r1, [r7, #24]
 800bdfa:	69fa      	ldr	r2, [r7, #28]
 800bdfc:	e841 2300 	strex	r3, r2, [r1]
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e5      	bne.n	800bdd4 <UART_CheckIdleState+0xdc>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2220      	movs	r2, #32
 800be0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800be18:	2303      	movs	r3, #3
 800be1a:	e011      	b.n	800be40 <UART_CheckIdleState+0x148>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	67da      	str	r2, [r3, #124]	; 0x7c
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2220      	movs	r2, #32
 800be26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	661a      	str	r2, [r3, #96]	; 0x60
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	665a      	str	r2, [r3, #100]	; 0x64
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800be3e:	2300      	movs	r3, #0
 800be40:	4618      	mov	r0, r3
 800be42:	3758      	adds	r7, #88	; 0x58
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <UART_WaitOnFlagUntilTimeout>:
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	4613      	mov	r3, r2
 800be56:	71fb      	strb	r3, [r7, #7]
 800be58:	e049      	b.n	800beee <UART_WaitOnFlagUntilTimeout+0xa6>
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be60:	d045      	beq.n	800beee <UART_WaitOnFlagUntilTimeout+0xa6>
 800be62:	f7f9 ff25 	bl	8005cb0 <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	69ba      	ldr	r2, [r7, #24]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d302      	bcc.n	800be78 <UART_WaitOnFlagUntilTimeout+0x30>
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <UART_WaitOnFlagUntilTimeout+0x34>
 800be78:	2303      	movs	r3, #3
 800be7a:	e048      	b.n	800bf0e <UART_WaitOnFlagUntilTimeout+0xc6>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0304 	and.w	r3, r3, #4
 800be86:	2b00      	cmp	r3, #0
 800be88:	d031      	beq.n	800beee <UART_WaitOnFlagUntilTimeout+0xa6>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	69db      	ldr	r3, [r3, #28]
 800be90:	f003 0308 	and.w	r3, r3, #8
 800be94:	2b08      	cmp	r3, #8
 800be96:	d110      	bne.n	800beba <UART_WaitOnFlagUntilTimeout+0x72>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2208      	movs	r2, #8
 800be9e:	621a      	str	r2, [r3, #32]
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 f9b3 	bl	800c20c <UART_EndRxTransfer>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2208      	movs	r2, #8
 800beaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800beb6:	2301      	movs	r3, #1
 800beb8:	e029      	b.n	800bf0e <UART_WaitOnFlagUntilTimeout+0xc6>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bec8:	d111      	bne.n	800beee <UART_WaitOnFlagUntilTimeout+0xa6>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bed2:	621a      	str	r2, [r3, #32]
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f999 	bl	800c20c <UART_EndRxTransfer>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2220      	movs	r2, #32
 800bede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800beea:	2303      	movs	r3, #3
 800beec:	e00f      	b.n	800bf0e <UART_WaitOnFlagUntilTimeout+0xc6>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	69da      	ldr	r2, [r3, #28]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	4013      	ands	r3, r2
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	429a      	cmp	r2, r3
 800befc:	bf0c      	ite	eq
 800befe:	2301      	moveq	r3, #1
 800bf00:	2300      	movne	r3, #0
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	461a      	mov	r2, r3
 800bf06:	79fb      	ldrb	r3, [r7, #7]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d0a6      	beq.n	800be5a <UART_WaitOnFlagUntilTimeout+0x12>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <UART_Start_Receive_IT>:
 800bf18:	b480      	push	{r7}
 800bf1a:	b097      	sub	sp, #92	; 0x5c
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	4613      	mov	r3, r2
 800bf24:	80fb      	strh	r3, [r7, #6]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	655a      	str	r2, [r3, #84]	; 0x54
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	88fa      	ldrh	r2, [r7, #6]
 800bf30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	88fa      	ldrh	r2, [r7, #6]
 800bf38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	669a      	str	r2, [r3, #104]	; 0x68
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf4a:	d10e      	bne.n	800bf6a <UART_Start_Receive_IT+0x52>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d105      	bne.n	800bf60 <UART_Start_Receive_IT+0x48>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bf5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf5e:	e01a      	b.n	800bf96 <UART_Start_Receive_IT+0x7e>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	22ff      	movs	r2, #255	; 0xff
 800bf64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf68:	e015      	b.n	800bf96 <UART_Start_Receive_IT+0x7e>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10d      	bne.n	800bf8e <UART_Start_Receive_IT+0x76>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d104      	bne.n	800bf84 <UART_Start_Receive_IT+0x6c>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf82:	e008      	b.n	800bf96 <UART_Start_Receive_IT+0x7e>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	227f      	movs	r2, #127	; 0x7f
 800bf88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf8c:	e003      	b.n	800bf96 <UART_Start_Receive_IT+0x7e>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2222      	movs	r2, #34	; 0x22
 800bfa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3308      	adds	r3, #8
 800bfac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb0:	e853 3f00 	ldrex	r3, [r3]
 800bfb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	657b      	str	r3, [r7, #84]	; 0x54
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfc6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bfc8:	647b      	str	r3, [r7, #68]	; 0x44
 800bfca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfce:	e841 2300 	strex	r3, r2, [r1]
 800bfd2:	643b      	str	r3, [r7, #64]	; 0x40
 800bfd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1e5      	bne.n	800bfa6 <UART_Start_Receive_IT+0x8e>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfe2:	d107      	bne.n	800bff4 <UART_Start_Receive_IT+0xdc>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d103      	bne.n	800bff4 <UART_Start_Receive_IT+0xdc>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	4a22      	ldr	r2, [pc, #136]	; (800c078 <UART_Start_Receive_IT+0x160>)
 800bff0:	669a      	str	r2, [r3, #104]	; 0x68
 800bff2:	e002      	b.n	800bffa <UART_Start_Receive_IT+0xe2>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	4a21      	ldr	r2, [pc, #132]	; (800c07c <UART_Start_Receive_IT+0x164>)
 800bff8:	669a      	str	r2, [r3, #104]	; 0x68
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d019      	beq.n	800c036 <UART_Start_Receive_IT+0x11e>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	62bb      	str	r3, [r7, #40]	; 0x28
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	e853 3f00 	ldrex	r3, [r3]
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c016:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c020:	637b      	str	r3, [r7, #52]	; 0x34
 800c022:	633a      	str	r2, [r7, #48]	; 0x30
 800c024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c028:	e841 2300 	strex	r3, r2, [r1]
 800c02c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e6      	bne.n	800c002 <UART_Start_Receive_IT+0xea>
 800c034:	e018      	b.n	800c068 <UART_Start_Receive_IT+0x150>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	617b      	str	r3, [r7, #20]
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	e853 3f00 	ldrex	r3, [r3]
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f043 0320 	orr.w	r3, r3, #32
 800c04a:	653b      	str	r3, [r7, #80]	; 0x50
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	461a      	mov	r2, r3
 800c052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c054:	623b      	str	r3, [r7, #32]
 800c056:	61fa      	str	r2, [r7, #28]
 800c058:	69f9      	ldr	r1, [r7, #28]
 800c05a:	6a3a      	ldr	r2, [r7, #32]
 800c05c:	e841 2300 	strex	r3, r2, [r1]
 800c060:	61bb      	str	r3, [r7, #24]
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1e6      	bne.n	800c036 <UART_Start_Receive_IT+0x11e>
 800c068:	2300      	movs	r3, #0
 800c06a:	4618      	mov	r0, r3
 800c06c:	375c      	adds	r7, #92	; 0x5c
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	0800c97b 	.word	0x0800c97b
 800c07c:	0800c7d3 	.word	0x0800c7d3

0800c080 <UART_Start_Receive_DMA>:
 800c080:	b580      	push	{r7, lr}
 800c082:	b096      	sub	sp, #88	; 0x58
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	4613      	mov	r3, r2
 800c08c:	80fb      	strh	r3, [r7, #6]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	655a      	str	r2, [r3, #84]	; 0x54
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	88fa      	ldrh	r2, [r7, #6]
 800c098:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2222      	movs	r2, #34	; 0x22
 800c0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d028      	beq.n	800c106 <UART_Start_Receive_DMA+0x86>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0b8:	4a3e      	ldr	r2, [pc, #248]	; (800c1b4 <UART_Start_Receive_DMA+0x134>)
 800c0ba:	629a      	str	r2, [r3, #40]	; 0x28
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c0:	4a3d      	ldr	r2, [pc, #244]	; (800c1b8 <UART_Start_Receive_DMA+0x138>)
 800c0c2:	62da      	str	r2, [r3, #44]	; 0x2c
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c8:	4a3c      	ldr	r2, [pc, #240]	; (800c1bc <UART_Start_Receive_DMA+0x13c>)
 800c0ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	635a      	str	r2, [r3, #52]	; 0x34
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	3324      	adds	r3, #36	; 0x24
 800c0de:	4619      	mov	r1, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	88fb      	ldrh	r3, [r7, #6]
 800c0e8:	f7f9 ff3b 	bl	8005f62 <HAL_DMA_Start_IT>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d009      	beq.n	800c106 <UART_Start_Receive_DMA+0x86>
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2210      	movs	r2, #16
 800c0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c102:	2301      	movs	r3, #1
 800c104:	e051      	b.n	800c1aa <UART_Start_Receive_DMA+0x12a>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d018      	beq.n	800c140 <UART_Start_Receive_DMA+0xc0>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c116:	e853 3f00 	ldrex	r3, [r3]
 800c11a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c122:	657b      	str	r3, [r7, #84]	; 0x54
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	461a      	mov	r2, r3
 800c12a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c12c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c12e:	647a      	str	r2, [r7, #68]	; 0x44
 800c130:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c134:	e841 2300 	strex	r3, r2, [r1]
 800c138:	643b      	str	r3, [r7, #64]	; 0x40
 800c13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1e6      	bne.n	800c10e <UART_Start_Receive_DMA+0x8e>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3308      	adds	r3, #8
 800c146:	62bb      	str	r3, [r7, #40]	; 0x28
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	e853 3f00 	ldrex	r3, [r3]
 800c14e:	627b      	str	r3, [r7, #36]	; 0x24
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	f043 0301 	orr.w	r3, r3, #1
 800c156:	653b      	str	r3, [r7, #80]	; 0x50
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3308      	adds	r3, #8
 800c15e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c160:	637a      	str	r2, [r7, #52]	; 0x34
 800c162:	633b      	str	r3, [r7, #48]	; 0x30
 800c164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c168:	e841 2300 	strex	r3, r2, [r1]
 800c16c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1e5      	bne.n	800c140 <UART_Start_Receive_DMA+0xc0>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3308      	adds	r3, #8
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	e853 3f00 	ldrex	r3, [r3]
 800c182:	613b      	str	r3, [r7, #16]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c18a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3308      	adds	r3, #8
 800c192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c194:	623a      	str	r2, [r7, #32]
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	69f9      	ldr	r1, [r7, #28]
 800c19a:	6a3a      	ldr	r2, [r7, #32]
 800c19c:	e841 2300 	strex	r3, r2, [r1]
 800c1a0:	61bb      	str	r3, [r7, #24]
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1e5      	bne.n	800c174 <UART_Start_Receive_DMA+0xf4>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3758      	adds	r7, #88	; 0x58
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	0800c385 	.word	0x0800c385
 800c1b8:	0800c4ab 	.word	0x0800c4ab
 800c1bc:	0800c4e9 	.word	0x0800c4e9

0800c1c0 <UART_EndTxTransfer>:
 800c1c0:	b480      	push	{r7}
 800c1c2:	b089      	sub	sp, #36	; 0x24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	e853 3f00 	ldrex	r3, [r3]
 800c1d4:	60bb      	str	r3, [r7, #8]
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c1dc:	61fb      	str	r3, [r7, #28]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	61bb      	str	r3, [r7, #24]
 800c1e8:	617a      	str	r2, [r7, #20]
 800c1ea:	6979      	ldr	r1, [r7, #20]
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	e841 2300 	strex	r3, r2, [r1]
 800c1f2:	613b      	str	r3, [r7, #16]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1e6      	bne.n	800c1c8 <UART_EndTxTransfer+0x8>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2220      	movs	r2, #32
 800c1fe:	67da      	str	r2, [r3, #124]	; 0x7c
 800c200:	bf00      	nop
 800c202:	3724      	adds	r7, #36	; 0x24
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <UART_EndRxTransfer>:
 800c20c:	b480      	push	{r7}
 800c20e:	b095      	sub	sp, #84	; 0x54
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	637b      	str	r3, [r7, #52]	; 0x34
 800c21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21c:	e853 3f00 	ldrex	r3, [r3]
 800c220:	633b      	str	r3, [r7, #48]	; 0x30
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c232:	643b      	str	r3, [r7, #64]	; 0x40
 800c234:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c236:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c23a:	e841 2300 	strex	r3, r2, [r1]
 800c23e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1e6      	bne.n	800c214 <UART_EndRxTransfer+0x8>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3308      	adds	r3, #8
 800c24c:	623b      	str	r3, [r7, #32]
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	e853 3f00 	ldrex	r3, [r3]
 800c254:	61fb      	str	r3, [r7, #28]
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	f023 0301 	bic.w	r3, r3, #1
 800c25c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	3308      	adds	r3, #8
 800c264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c266:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c268:	62bb      	str	r3, [r7, #40]	; 0x28
 800c26a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c26c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c26e:	e841 2300 	strex	r3, r2, [r1]
 800c272:	627b      	str	r3, [r7, #36]	; 0x24
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1e5      	bne.n	800c246 <UART_EndRxTransfer+0x3a>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d118      	bne.n	800c2b4 <UART_EndRxTransfer+0xa8>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	e853 3f00 	ldrex	r3, [r3]
 800c28e:	60bb      	str	r3, [r7, #8]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	f023 0310 	bic.w	r3, r3, #16
 800c296:	647b      	str	r3, [r7, #68]	; 0x44
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	461a      	mov	r2, r3
 800c29e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2a0:	61bb      	str	r3, [r7, #24]
 800c2a2:	617a      	str	r2, [r7, #20]
 800c2a4:	6979      	ldr	r1, [r7, #20]
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	e841 2300 	strex	r3, r2, [r1]
 800c2ac:	613b      	str	r3, [r7, #16]
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1e6      	bne.n	800c282 <UART_EndRxTransfer+0x76>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	661a      	str	r2, [r3, #96]	; 0x60
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	669a      	str	r2, [r3, #104]	; 0x68
 800c2c8:	bf00      	nop
 800c2ca:	3754      	adds	r7, #84	; 0x54
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <UART_DMATransmitCplt>:
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b090      	sub	sp, #64	; 0x40
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	2b20      	cmp	r3, #32
 800c2e8:	d037      	beq.n	800c35a <UART_DMATransmitCplt+0x86>
 800c2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	e853 3f00 	ldrex	r3, [r3]
 800c300:	623b      	str	r3, [r7, #32]
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c308:	63bb      	str	r3, [r7, #56]	; 0x38
 800c30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3308      	adds	r3, #8
 800c310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c312:	633a      	str	r2, [r7, #48]	; 0x30
 800c314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c31a:	e841 2300 	strex	r3, r2, [r1]
 800c31e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1e5      	bne.n	800c2f2 <UART_DMATransmitCplt+0x1e>
 800c326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	613b      	str	r3, [r7, #16]
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	e853 3f00 	ldrex	r3, [r3]
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33a:	637b      	str	r3, [r7, #52]	; 0x34
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	461a      	mov	r2, r3
 800c342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c344:	61fb      	str	r3, [r7, #28]
 800c346:	61ba      	str	r2, [r7, #24]
 800c348:	69b9      	ldr	r1, [r7, #24]
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	e841 2300 	strex	r3, r2, [r1]
 800c350:	617b      	str	r3, [r7, #20]
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1e6      	bne.n	800c326 <UART_DMATransmitCplt+0x52>
 800c358:	e002      	b.n	800c360 <UART_DMATransmitCplt+0x8c>
 800c35a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c35c:	f7f5 febc 	bl	80020d8 <HAL_UART_TxCpltCallback>
 800c360:	bf00      	nop
 800c362:	3740      	adds	r7, #64	; 0x40
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <UART_DMATxHalfCplt>:
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f7ff fa0a 	bl	800b790 <HAL_UART_TxHalfCpltCallback>
 800c37c:	bf00      	nop
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <UART_DMAReceiveCplt>:
 800c384:	b580      	push	{r7, lr}
 800c386:	b09c      	sub	sp, #112	; 0x70
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c390:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	2b20      	cmp	r3, #32
 800c398:	d071      	beq.n	800c47e <UART_DMAReceiveCplt+0xfa>
 800c39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c39c:	2200      	movs	r2, #0
 800c39e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3aa:	e853 3f00 	ldrex	r3, [r3]
 800c3ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3c2:	657a      	str	r2, [r7, #84]	; 0x54
 800c3c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3c8:	e841 2300 	strex	r3, r2, [r1]
 800c3cc:	653b      	str	r3, [r7, #80]	; 0x50
 800c3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e6      	bne.n	800c3a2 <UART_DMAReceiveCplt+0x1e>
 800c3d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3308      	adds	r3, #8
 800c3da:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	e853 3f00 	ldrex	r3, [r3]
 800c3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e6:	f023 0301 	bic.w	r3, r3, #1
 800c3ea:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c3f4:	647a      	str	r2, [r7, #68]	; 0x44
 800c3f6:	643b      	str	r3, [r7, #64]	; 0x40
 800c3f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3fc:	e841 2300 	strex	r3, r2, [r1]
 800c400:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e5      	bne.n	800c3d4 <UART_DMAReceiveCplt+0x50>
 800c408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3308      	adds	r3, #8
 800c40e:	627b      	str	r3, [r7, #36]	; 0x24
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	623b      	str	r3, [r7, #32]
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c41e:	663b      	str	r3, [r7, #96]	; 0x60
 800c420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3308      	adds	r3, #8
 800c426:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c428:	633a      	str	r2, [r7, #48]	; 0x30
 800c42a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c42c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	62bb      	str	r3, [r7, #40]	; 0x28
 800c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e5      	bne.n	800c408 <UART_DMAReceiveCplt+0x84>
 800c43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c43e:	2220      	movs	r2, #32
 800c440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d118      	bne.n	800c47e <UART_DMAReceiveCplt+0xfa>
 800c44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	613b      	str	r3, [r7, #16]
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f023 0310 	bic.w	r3, r3, #16
 800c460:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c46a:	61fb      	str	r3, [r7, #28]
 800c46c:	61ba      	str	r2, [r7, #24]
 800c46e:	69b9      	ldr	r1, [r7, #24]
 800c470:	69fa      	ldr	r2, [r7, #28]
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e6      	bne.n	800c44c <UART_DMAReceiveCplt+0xc8>
 800c47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c480:	2200      	movs	r2, #0
 800c482:	665a      	str	r2, [r3, #100]	; 0x64
 800c484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d107      	bne.n	800c49c <UART_DMAReceiveCplt+0x118>
 800c48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c48e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c492:	4619      	mov	r1, r3
 800c494:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c496:	f7ff f9ad 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
 800c49a:	e002      	b.n	800c4a2 <UART_DMAReceiveCplt+0x11e>
 800c49c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c49e:	f7f5 fe53 	bl	8002148 <HAL_UART_RxCpltCallback>
 800c4a2:	bf00      	nop
 800c4a4:	3770      	adds	r7, #112	; 0x70
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <UART_DMARxHalfCplt>:
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	665a      	str	r2, [r3, #100]	; 0x64
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d109      	bne.n	800c4da <UART_DMARxHalfCplt+0x30>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c4cc:	085b      	lsrs	r3, r3, #1
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f7ff f98e 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
 800c4d8:	e002      	b.n	800c4e0 <UART_DMARxHalfCplt+0x36>
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7ff f962 	bl	800b7a4 <HAL_UART_RxHalfCpltCallback>
 800c4e0:	bf00      	nop
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <UART_DMAError>:
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c502:	60fb      	str	r3, [r7, #12]
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c50e:	2b80      	cmp	r3, #128	; 0x80
 800c510:	d109      	bne.n	800c526 <UART_DMAError+0x3e>
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2b21      	cmp	r3, #33	; 0x21
 800c516:	d106      	bne.n	800c526 <UART_DMAError+0x3e>
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c520:	6978      	ldr	r0, [r7, #20]
 800c522:	f7ff fe4d 	bl	800c1c0 <UART_EndTxTransfer>
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c530:	2b40      	cmp	r3, #64	; 0x40
 800c532:	d109      	bne.n	800c548 <UART_DMAError+0x60>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b22      	cmp	r3, #34	; 0x22
 800c538:	d106      	bne.n	800c548 <UART_DMAError+0x60>
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c542:	6978      	ldr	r0, [r7, #20]
 800c544:	f7ff fe62 	bl	800c20c <UART_EndRxTransfer>
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c54e:	f043 0210 	orr.w	r2, r3, #16
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c558:	6978      	ldr	r0, [r7, #20]
 800c55a:	f7ff f92d 	bl	800b7b8 <HAL_UART_ErrorCallback>
 800c55e:	bf00      	nop
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <UART_DMAAbortOnError>:
 800c566:	b580      	push	{r7, lr}
 800c568:	b084      	sub	sp, #16
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f7ff f917 	bl	800b7b8 <HAL_UART_ErrorCallback>
 800c58a:	bf00      	nop
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <UART_DMATxOnlyAbortCallback>:
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2220      	movs	r2, #32
 800c5ac:	67da      	str	r2, [r3, #124]	; 0x7c
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f7ff f90c 	bl	800b7cc <HAL_UART_AbortTransmitCpltCallback>
 800c5b4:	bf00      	nop
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <UART_DMARxOnlyAbortCallback>:
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c8:	60fb      	str	r3, [r7, #12]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	220f      	movs	r2, #15
 800c5d8:	621a      	str	r2, [r3, #32]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	699a      	ldr	r2, [r3, #24]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f042 0208 	orr.w	r2, r2, #8
 800c5e8:	619a      	str	r2, [r3, #24]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	661a      	str	r2, [r3, #96]	; 0x60
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f7ff f8f1 	bl	800b7e0 <HAL_UART_AbortReceiveCpltCallback>
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <UART_TxISR_8BIT>:
 800c606:	b480      	push	{r7}
 800c608:	b08f      	sub	sp, #60	; 0x3c
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c612:	2b21      	cmp	r3, #33	; 0x21
 800c614:	d14d      	bne.n	800c6b2 <UART_TxISR_8BIT+0xac>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d132      	bne.n	800c688 <UART_TxISR_8BIT+0x82>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	623b      	str	r3, [r7, #32]
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	e853 3f00 	ldrex	r3, [r3]
 800c62e:	61fb      	str	r3, [r7, #28]
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c636:	637b      	str	r3, [r7, #52]	; 0x34
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	461a      	mov	r2, r3
 800c63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c640:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c642:	62ba      	str	r2, [r7, #40]	; 0x28
 800c644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c648:	e841 2300 	strex	r3, r2, [r1]
 800c64c:	627b      	str	r3, [r7, #36]	; 0x24
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e6      	bne.n	800c622 <UART_TxISR_8BIT+0x1c>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	e853 3f00 	ldrex	r3, [r3]
 800c660:	60bb      	str	r3, [r7, #8]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c668:	633b      	str	r3, [r7, #48]	; 0x30
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	461a      	mov	r2, r3
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	61bb      	str	r3, [r7, #24]
 800c674:	617a      	str	r2, [r7, #20]
 800c676:	6979      	ldr	r1, [r7, #20]
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	613b      	str	r3, [r7, #16]
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e6      	bne.n	800c654 <UART_TxISR_8BIT+0x4e>
 800c686:	e014      	b.n	800c6b2 <UART_TxISR_8BIT+0xac>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68c:	781a      	ldrb	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	b292      	uxth	r2, r2
 800c694:	851a      	strh	r2, [r3, #40]	; 0x28
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	64da      	str	r2, [r3, #76]	; 0x4c
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c6b2:	bf00      	nop
 800c6b4:	373c      	adds	r7, #60	; 0x3c
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <UART_TxISR_16BIT>:
 800c6be:	b480      	push	{r7}
 800c6c0:	b091      	sub	sp, #68	; 0x44
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6ca:	2b21      	cmp	r3, #33	; 0x21
 800c6cc:	d151      	bne.n	800c772 <UART_TxISR_16BIT+0xb4>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d132      	bne.n	800c740 <UART_TxISR_16BIT+0x82>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	e853 3f00 	ldrex	r3, [r3]
 800c6e6:	623b      	str	r3, [r7, #32]
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	633b      	str	r3, [r7, #48]	; 0x30
 800c6fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c700:	e841 2300 	strex	r3, r2, [r1]
 800c704:	62bb      	str	r3, [r7, #40]	; 0x28
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1e6      	bne.n	800c6da <UART_TxISR_16BIT+0x1c>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	613b      	str	r3, [r7, #16]
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	e853 3f00 	ldrex	r3, [r3]
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c720:	637b      	str	r3, [r7, #52]	; 0x34
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72a:	61fb      	str	r3, [r7, #28]
 800c72c:	61ba      	str	r2, [r7, #24]
 800c72e:	69b9      	ldr	r1, [r7, #24]
 800c730:	69fa      	ldr	r2, [r7, #28]
 800c732:	e841 2300 	strex	r3, r2, [r1]
 800c736:	617b      	str	r3, [r7, #20]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1e6      	bne.n	800c70c <UART_TxISR_16BIT+0x4e>
 800c73e:	e018      	b.n	800c772 <UART_TxISR_16BIT+0xb4>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c748:	881a      	ldrh	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c752:	b292      	uxth	r2, r2
 800c754:	851a      	strh	r2, [r3, #40]	; 0x28
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c75a:	1c9a      	adds	r2, r3, #2
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	64da      	str	r2, [r3, #76]	; 0x4c
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c766:	b29b      	uxth	r3, r3
 800c768:	3b01      	subs	r3, #1
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c772:	bf00      	nop
 800c774:	3744      	adds	r7, #68	; 0x44
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <UART_EndTransmit_IT>:
 800c77e:	b580      	push	{r7, lr}
 800c780:	b088      	sub	sp, #32
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	e853 3f00 	ldrex	r3, [r3]
 800c792:	60bb      	str	r3, [r7, #8]
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c79a:	61fb      	str	r3, [r7, #28]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	61bb      	str	r3, [r7, #24]
 800c7a6:	617a      	str	r2, [r7, #20]
 800c7a8:	6979      	ldr	r1, [r7, #20]
 800c7aa:	69ba      	ldr	r2, [r7, #24]
 800c7ac:	e841 2300 	strex	r3, r2, [r1]
 800c7b0:	613b      	str	r3, [r7, #16]
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1e6      	bne.n	800c786 <UART_EndTransmit_IT+0x8>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2220      	movs	r2, #32
 800c7bc:	67da      	str	r2, [r3, #124]	; 0x7c
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	66da      	str	r2, [r3, #108]	; 0x6c
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7f5 fc87 	bl	80020d8 <HAL_UART_TxCpltCallback>
 800c7ca:	bf00      	nop
 800c7cc:	3720      	adds	r7, #32
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <UART_RxISR_8BIT>:
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b09c      	sub	sp, #112	; 0x70
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7e0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ea:	2b22      	cmp	r3, #34	; 0x22
 800c7ec:	f040 80b9 	bne.w	800c962 <UART_RxISR_8BIT+0x190>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c7fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c7fe:	b2d9      	uxtb	r1, r3
 800c800:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c804:	b2da      	uxtb	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c80a:	400a      	ands	r2, r1
 800c80c:	b2d2      	uxtb	r2, r2
 800c80e:	701a      	strb	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c814:	1c5a      	adds	r2, r3, #1
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	655a      	str	r2, [r3, #84]	; 0x54
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c820:	b29b      	uxth	r3, r3
 800c822:	3b01      	subs	r3, #1
 800c824:	b29a      	uxth	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c832:	b29b      	uxth	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	f040 809c 	bne.w	800c972 <UART_RxISR_8BIT+0x1a0>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c842:	e853 3f00 	ldrex	r3, [r3]
 800c846:	64bb      	str	r3, [r7, #72]	; 0x48
 800c848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c84a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c84e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	461a      	mov	r2, r3
 800c856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c858:	65bb      	str	r3, [r7, #88]	; 0x58
 800c85a:	657a      	str	r2, [r7, #84]	; 0x54
 800c85c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c85e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c860:	e841 2300 	strex	r3, r2, [r1]
 800c864:	653b      	str	r3, [r7, #80]	; 0x50
 800c866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1e6      	bne.n	800c83a <UART_RxISR_8BIT+0x68>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3308      	adds	r3, #8
 800c872:	63bb      	str	r3, [r7, #56]	; 0x38
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	e853 3f00 	ldrex	r3, [r3]
 800c87a:	637b      	str	r3, [r7, #52]	; 0x34
 800c87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87e:	f023 0301 	bic.w	r3, r3, #1
 800c882:	667b      	str	r3, [r7, #100]	; 0x64
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3308      	adds	r3, #8
 800c88a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c88c:	647a      	str	r2, [r7, #68]	; 0x44
 800c88e:	643b      	str	r3, [r7, #64]	; 0x40
 800c890:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c894:	e841 2300 	strex	r3, r2, [r1]
 800c898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1e5      	bne.n	800c86c <UART_RxISR_8BIT+0x9a>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2220      	movs	r2, #32
 800c8a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	669a      	str	r2, [r3, #104]	; 0x68
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	665a      	str	r2, [r3, #100]	; 0x64
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d018      	beq.n	800c8f4 <UART_RxISR_8BIT+0x122>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	e853 3f00 	ldrex	r3, [r3]
 800c8ce:	623b      	str	r3, [r7, #32]
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c8d6:	663b      	str	r3, [r7, #96]	; 0x60
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8e0:	633b      	str	r3, [r7, #48]	; 0x30
 800c8e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e8:	e841 2300 	strex	r3, r2, [r1]
 800c8ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1e6      	bne.n	800c8c2 <UART_RxISR_8BIT+0xf0>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d12e      	bne.n	800c95a <UART_RxISR_8BIT+0x188>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	661a      	str	r2, [r3, #96]	; 0x60
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	613b      	str	r3, [r7, #16]
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f023 0310 	bic.w	r3, r3, #16
 800c916:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c920:	61fb      	str	r3, [r7, #28]
 800c922:	61ba      	str	r2, [r7, #24]
 800c924:	69b9      	ldr	r1, [r7, #24]
 800c926:	69fa      	ldr	r2, [r7, #28]
 800c928:	e841 2300 	strex	r3, r2, [r1]
 800c92c:	617b      	str	r3, [r7, #20]
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e6      	bne.n	800c902 <UART_RxISR_8BIT+0x130>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	69db      	ldr	r3, [r3, #28]
 800c93a:	f003 0310 	and.w	r3, r3, #16
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d103      	bne.n	800c94a <UART_RxISR_8BIT+0x178>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2210      	movs	r2, #16
 800c948:	621a      	str	r2, [r3, #32]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c950:	4619      	mov	r1, r3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7fe ff4e 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
 800c958:	e00b      	b.n	800c972 <UART_RxISR_8BIT+0x1a0>
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7f5 fbf4 	bl	8002148 <HAL_UART_RxCpltCallback>
 800c960:	e007      	b.n	800c972 <UART_RxISR_8BIT+0x1a0>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	699a      	ldr	r2, [r3, #24]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f042 0208 	orr.w	r2, r2, #8
 800c970:	619a      	str	r2, [r3, #24]
 800c972:	bf00      	nop
 800c974:	3770      	adds	r7, #112	; 0x70
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <UART_RxISR_16BIT>:
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b09c      	sub	sp, #112	; 0x70
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c988:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c992:	2b22      	cmp	r3, #34	; 0x22
 800c994:	f040 80b9 	bne.w	800cb0a <UART_RxISR_16BIT+0x190>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c99e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9a8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c9ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9b6:	801a      	strh	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9bc:	1c9a      	adds	r2, r3, #2
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	655a      	str	r2, [r3, #84]	; 0x54
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f040 809c 	bne.w	800cb1a <UART_RxISR_16BIT+0x1a0>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ea:	e853 3f00 	ldrex	r3, [r3]
 800c9ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9f6:	667b      	str	r3, [r7, #100]	; 0x64
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca00:	657b      	str	r3, [r7, #84]	; 0x54
 800ca02:	653a      	str	r2, [r7, #80]	; 0x50
 800ca04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca08:	e841 2300 	strex	r3, r2, [r1]
 800ca0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e6      	bne.n	800c9e2 <UART_RxISR_16BIT+0x68>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	3308      	adds	r3, #8
 800ca1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1e:	e853 3f00 	ldrex	r3, [r3]
 800ca22:	633b      	str	r3, [r7, #48]	; 0x30
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	f023 0301 	bic.w	r3, r3, #1
 800ca2a:	663b      	str	r3, [r7, #96]	; 0x60
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	3308      	adds	r3, #8
 800ca32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca34:	643a      	str	r2, [r7, #64]	; 0x40
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca3c:	e841 2300 	strex	r3, r2, [r1]
 800ca40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1e5      	bne.n	800ca14 <UART_RxISR_16BIT+0x9a>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2220      	movs	r2, #32
 800ca4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	669a      	str	r2, [r3, #104]	; 0x68
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	665a      	str	r2, [r3, #100]	; 0x64
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d018      	beq.n	800ca9c <UART_RxISR_16BIT+0x122>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	623b      	str	r3, [r7, #32]
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	e853 3f00 	ldrex	r3, [r3]
 800ca76:	61fb      	str	r3, [r7, #28]
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	461a      	mov	r2, r3
 800ca86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca8a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ca8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca90:	e841 2300 	strex	r3, r2, [r1]
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1e6      	bne.n	800ca6a <UART_RxISR_16BIT+0xf0>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d12e      	bne.n	800cb02 <UART_RxISR_16BIT+0x188>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	661a      	str	r2, [r3, #96]	; 0x60
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	60fb      	str	r3, [r7, #12]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	60bb      	str	r3, [r7, #8]
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f023 0310 	bic.w	r3, r3, #16
 800cabe:	65bb      	str	r3, [r7, #88]	; 0x58
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	461a      	mov	r2, r3
 800cac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cac8:	61bb      	str	r3, [r7, #24]
 800caca:	617a      	str	r2, [r7, #20]
 800cacc:	6979      	ldr	r1, [r7, #20]
 800cace:	69ba      	ldr	r2, [r7, #24]
 800cad0:	e841 2300 	strex	r3, r2, [r1]
 800cad4:	613b      	str	r3, [r7, #16]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e6      	bne.n	800caaa <UART_RxISR_16BIT+0x130>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	69db      	ldr	r3, [r3, #28]
 800cae2:	f003 0310 	and.w	r3, r3, #16
 800cae6:	2b10      	cmp	r3, #16
 800cae8:	d103      	bne.n	800caf2 <UART_RxISR_16BIT+0x178>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2210      	movs	r2, #16
 800caf0:	621a      	str	r2, [r3, #32]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800caf8:	4619      	mov	r1, r3
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7fe fe7a 	bl	800b7f4 <HAL_UARTEx_RxEventCallback>
 800cb00:	e00b      	b.n	800cb1a <UART_RxISR_16BIT+0x1a0>
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7f5 fb20 	bl	8002148 <HAL_UART_RxCpltCallback>
 800cb08:	e007      	b.n	800cb1a <UART_RxISR_16BIT+0x1a0>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	699a      	ldr	r2, [r3, #24]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f042 0208 	orr.w	r2, r2, #8
 800cb18:	619a      	str	r2, [r3, #24]
 800cb1a:	bf00      	nop
 800cb1c:	3770      	adds	r7, #112	; 0x70
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <HAL_UARTEx_WakeupCallback>:
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <makeFreeRtosPriority>:
 800cb36:	b480      	push	{r7}
 800cb38:	b085      	sub	sp, #20
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	80fb      	strh	r3, [r7, #6]
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb48:	2b84      	cmp	r3, #132	; 0x84
 800cb4a:	d005      	beq.n	800cb58 <makeFreeRtosPriority+0x22>
 800cb4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4413      	add	r3, r2
 800cb54:	3303      	adds	r3, #3
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <inHandlerMode>:
 800cb66:	b480      	push	{r7}
 800cb68:	b083      	sub	sp, #12
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	f3ef 8305 	mrs	r3, IPSR
 800cb70:	607b      	str	r3, [r7, #4]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bf14      	ite	ne
 800cb78:	2301      	movne	r3, #1
 800cb7a:	2300      	moveq	r3, #0
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	4618      	mov	r0, r3
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <osKernelStart>:
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	f001 fa6f 	bl	800e070 <vTaskStartScheduler>
 800cb92:	2300      	movs	r3, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <osKernelSysTick>:
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	f7ff ffe3 	bl	800cb66 <inHandlerMode>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d003      	beq.n	800cbae <osKernelSysTick+0x16>
 800cba6:	f001 fb8d 	bl	800e2c4 <xTaskGetTickCountFromISR>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	e002      	b.n	800cbb4 <osKernelSysTick+0x1c>
 800cbae:	f001 fb79 	bl	800e2a4 <xTaskGetTickCount>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <osThreadCreate>:
 800cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbba:	b089      	sub	sp, #36	; 0x24
 800cbbc:	af04      	add	r7, sp, #16
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	695b      	ldr	r3, [r3, #20]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d020      	beq.n	800cc0c <osThreadCreate+0x54>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d01c      	beq.n	800cc0c <osThreadCreate+0x54>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	685c      	ldr	r4, [r3, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681d      	ldr	r5, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	691e      	ldr	r6, [r3, #16]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7ff ffa6 	bl	800cb36 <makeFreeRtosPriority>
 800cbea:	4601      	mov	r1, r0
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	695b      	ldr	r3, [r3, #20]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	6992      	ldr	r2, [r2, #24]
 800cbf4:	9202      	str	r2, [sp, #8]
 800cbf6:	9301      	str	r3, [sp, #4]
 800cbf8:	9100      	str	r1, [sp, #0]
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4620      	mov	r0, r4
 800cc02:	f000 ffe1 	bl	800dbc8 <xTaskCreateStatic>
 800cc06:	4603      	mov	r3, r0
 800cc08:	60fb      	str	r3, [r7, #12]
 800cc0a:	e01c      	b.n	800cc46 <osThreadCreate+0x8e>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685c      	ldr	r4, [r3, #4]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681d      	ldr	r5, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	b29e      	uxth	r6, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff ff88 	bl	800cb36 <makeFreeRtosPriority>
 800cc26:	4602      	mov	r2, r0
 800cc28:	f107 030c 	add.w	r3, r7, #12
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	9200      	str	r2, [sp, #0]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	4632      	mov	r2, r6
 800cc34:	4629      	mov	r1, r5
 800cc36:	4620      	mov	r0, r4
 800cc38:	f001 f822 	bl	800dc80 <xTaskCreate>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d001      	beq.n	800cc46 <osThreadCreate+0x8e>
 800cc42:	2300      	movs	r3, #0
 800cc44:	e000      	b.n	800cc48 <osThreadCreate+0x90>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc50 <osDelay>:
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <osDelay+0x16>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	e000      	b.n	800cc68 <osDelay+0x18>
 800cc66:	2301      	movs	r3, #1
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f001 f9cd 	bl	800e008 <vTaskDelay>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <osTimerCreate>:
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	460b      	mov	r3, r1
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	72fb      	strb	r3, [r7, #11]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d013      	beq.n	800ccb6 <osTimerCreate+0x3e>
 800cc8e:	7afb      	ldrb	r3, [r7, #11]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d101      	bne.n	800cc98 <osTimerCreate+0x20>
 800cc94:	2101      	movs	r1, #1
 800cc96:	e000      	b.n	800cc9a <osTimerCreate+0x22>
 800cc98:	2100      	movs	r1, #0
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	6852      	ldr	r2, [r2, #4]
 800cca2:	9201      	str	r2, [sp, #4]
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	460a      	mov	r2, r1
 800ccaa:	2101      	movs	r1, #1
 800ccac:	480b      	ldr	r0, [pc, #44]	; (800ccdc <osTimerCreate+0x64>)
 800ccae:	f002 f8fe 	bl	800eeae <xTimerCreateStatic>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	e00e      	b.n	800ccd4 <osTimerCreate+0x5c>
 800ccb6:	7afb      	ldrb	r3, [r7, #11]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d101      	bne.n	800ccc0 <osTimerCreate+0x48>
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	e000      	b.n	800ccc2 <osTimerCreate+0x4a>
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2101      	movs	r1, #1
 800cccc:	4803      	ldr	r0, [pc, #12]	; (800ccdc <osTimerCreate+0x64>)
 800ccce:	f002 f8cd 	bl	800ee6c <xTimerCreate>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	080107a0 	.word	0x080107a0

0800cce0 <osMutexCreate>:
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d007      	beq.n	800cd00 <osMutexCreate+0x20>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	2001      	movs	r0, #1
 800ccf8:	f000 fa42 	bl	800d180 <xQueueCreateMutexStatic>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	e003      	b.n	800cd08 <osMutexCreate+0x28>
 800cd00:	2001      	movs	r0, #1
 800cd02:	f000 fa25 	bl	800d150 <xQueueCreateMutex>
 800cd06:	4603      	mov	r3, r0
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <osDelayUntil>:
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <osDelayUntil+0x18>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	e000      	b.n	800cd2a <osDelayUntil+0x1a>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 f8ed 	bl	800df0c <vTaskDelayUntil>
 800cd32:	2300      	movs	r3, #0
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <vListInitialise>:
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f103 0208 	add.w	r2, r3, #8
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f04f 32ff 	mov.w	r2, #4294967295
 800cd54:	609a      	str	r2, [r3, #8]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f103 0208 	add.w	r2, r3, #8
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	60da      	str	r2, [r3, #12]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f103 0208 	add.w	r2, r3, #8
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	611a      	str	r2, [r3, #16]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <vListInitialiseItem>:
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	611a      	str	r2, [r3, #16]
 800cd8a:	bf00      	nop
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <vListInsertEnd>:
 800cd96:	b480      	push	{r7}
 800cd98:	b085      	sub	sp, #20
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	6039      	str	r1, [r7, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	605a      	str	r2, [r3, #4]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	689a      	ldr	r2, [r3, #8]
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	609a      	str	r2, [r3, #8]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	605a      	str	r2, [r3, #4]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	609a      	str	r2, [r3, #8]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	611a      	str	r2, [r3, #16]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	601a      	str	r2, [r3, #0]
 800cdd2:	bf00      	nop
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <vListInsert>:
 800cdde:	b480      	push	{r7}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	6039      	str	r1, [r7, #0]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	60bb      	str	r3, [r7, #8]
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf4:	d103      	bne.n	800cdfe <vListInsert+0x20>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	60fb      	str	r3, [r7, #12]
 800cdfc:	e00c      	b.n	800ce18 <vListInsert+0x3a>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3308      	adds	r3, #8
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	e002      	b.n	800ce0c <vListInsert+0x2e>
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d2f6      	bcs.n	800ce06 <vListInsert+0x28>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	685a      	ldr	r2, [r3, #4]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	605a      	str	r2, [r3, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	609a      	str	r2, [r3, #8]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	609a      	str	r2, [r3, #8]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	605a      	str	r2, [r3, #4]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	611a      	str	r2, [r3, #16]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	1c5a      	adds	r2, r3, #1
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	bf00      	nop
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <uxListRemove>:
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	60fb      	str	r3, [r7, #12]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	6892      	ldr	r2, [r2, #8]
 800ce66:	609a      	str	r2, [r3, #8]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	6852      	ldr	r2, [r2, #4]
 800ce70:	605a      	str	r2, [r3, #4]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d103      	bne.n	800ce84 <uxListRemove+0x34>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	689a      	ldr	r2, [r3, #8]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	605a      	str	r2, [r3, #4]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	611a      	str	r2, [r3, #16]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	1e5a      	subs	r2, r3, #1
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3714      	adds	r7, #20
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <xQueueGenericReset>:
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	60fb      	str	r3, [r7, #12]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10a      	bne.n	800cece <xQueueGenericReset+0x2a>
 800ceb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	60bb      	str	r3, [r7, #8]
 800ceca:	bf00      	nop
 800cecc:	e7fe      	b.n	800cecc <xQueueGenericReset+0x28>
 800cece:	f002 fc39 	bl	800f744 <vPortEnterCritical>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceda:	68f9      	ldr	r1, [r7, #12]
 800cedc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cede:	fb01 f303 	mul.w	r3, r1, r3
 800cee2:	441a      	add	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	605a      	str	r2, [r3, #4]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2200      	movs	r2, #0
 800ceec:	639a      	str	r2, [r3, #56]	; 0x38
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	609a      	str	r2, [r3, #8]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cefe:	3b01      	subs	r3, #1
 800cf00:	68f9      	ldr	r1, [r7, #12]
 800cf02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf04:	fb01 f303 	mul.w	r3, r1, r3
 800cf08:	441a      	add	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	22ff      	movs	r2, #255	; 0xff
 800cf12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	22ff      	movs	r2, #255	; 0xff
 800cf1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d114      	bne.n	800cf4e <xQueueGenericReset+0xaa>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d01a      	beq.n	800cf62 <xQueueGenericReset+0xbe>
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	3310      	adds	r3, #16
 800cf30:	4618      	mov	r0, r3
 800cf32:	f001 fb49 	bl	800e5c8 <xTaskRemoveFromEventList>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d012      	beq.n	800cf62 <xQueueGenericReset+0xbe>
 800cf3c:	4b0c      	ldr	r3, [pc, #48]	; (800cf70 <xQueueGenericReset+0xcc>)
 800cf3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	e009      	b.n	800cf62 <xQueueGenericReset+0xbe>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3310      	adds	r3, #16
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fef2 	bl	800cd3c <vListInitialise>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3324      	adds	r3, #36	; 0x24
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff feed 	bl	800cd3c <vListInitialise>
 800cf62:	f002 fc1f 	bl	800f7a4 <vPortExitCritical>
 800cf66:	2301      	movs	r3, #1
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	e000ed04 	.word	0xe000ed04

0800cf74 <xQueueGenericCreateStatic>:
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08e      	sub	sp, #56	; 0x38
 800cf78:	af02      	add	r7, sp, #8
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	603b      	str	r3, [r7, #0]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <xQueueGenericCreateStatic+0x2a>
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <xQueueGenericCreateStatic+0x28>
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10a      	bne.n	800cfba <xQueueGenericCreateStatic+0x46>
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <xQueueGenericCreateStatic+0x44>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <xQueueGenericCreateStatic+0x52>
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <xQueueGenericCreateStatic+0x56>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e000      	b.n	800cfcc <xQueueGenericCreateStatic+0x58>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10a      	bne.n	800cfe6 <xQueueGenericCreateStatic+0x72>
 800cfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	623b      	str	r3, [r7, #32]
 800cfe2:	bf00      	nop
 800cfe4:	e7fe      	b.n	800cfe4 <xQueueGenericCreateStatic+0x70>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d102      	bne.n	800cff2 <xQueueGenericCreateStatic+0x7e>
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <xQueueGenericCreateStatic+0x82>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <xQueueGenericCreateStatic+0x84>
 800cff6:	2300      	movs	r3, #0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <xQueueGenericCreateStatic+0x9e>
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	61fb      	str	r3, [r7, #28]
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <xQueueGenericCreateStatic+0x9c>
 800d012:	2348      	movs	r3, #72	; 0x48
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b48      	cmp	r3, #72	; 0x48
 800d01a:	d00a      	beq.n	800d032 <xQueueGenericCreateStatic+0xbe>
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	61bb      	str	r3, [r7, #24]
 800d02e:	bf00      	nop
 800d030:	e7fe      	b.n	800d030 <xQueueGenericCreateStatic+0xbc>
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00d      	beq.n	800d058 <xQueueGenericCreateStatic+0xe4>
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d044:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	4613      	mov	r3, r2
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	68b9      	ldr	r1, [r7, #8]
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 f843 	bl	800d0de <prvInitialiseNewQueue>
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	4618      	mov	r0, r3
 800d05c:	3730      	adds	r7, #48	; 0x30
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <xQueueGenericCreate>:
 800d062:	b580      	push	{r7, lr}
 800d064:	b08a      	sub	sp, #40	; 0x28
 800d066:	af02      	add	r7, sp, #8
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	4613      	mov	r3, r2
 800d06e:	71fb      	strb	r3, [r7, #7]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10a      	bne.n	800d08c <xQueueGenericCreate+0x2a>
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	613b      	str	r3, [r7, #16]
 800d088:	bf00      	nop
 800d08a:	e7fe      	b.n	800d08a <xQueueGenericCreate+0x28>
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d102      	bne.n	800d098 <xQueueGenericCreate+0x36>
 800d092:	2300      	movs	r3, #0
 800d094:	61fb      	str	r3, [r7, #28]
 800d096:	e004      	b.n	800d0a2 <xQueueGenericCreate+0x40>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	fb02 f303 	mul.w	r3, r2, r3
 800d0a0:	61fb      	str	r3, [r7, #28]
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	3348      	adds	r3, #72	; 0x48
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f002 fc6e 	bl	800f988 <pvPortMalloc>
 800d0ac:	61b8      	str	r0, [r7, #24]
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00f      	beq.n	800d0d4 <xQueueGenericCreate+0x72>
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	3348      	adds	r3, #72	; 0x48
 800d0b8:	617b      	str	r3, [r7, #20]
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d0c2:	79fa      	ldrb	r2, [r7, #7]
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	697a      	ldr	r2, [r7, #20]
 800d0cc:	68b9      	ldr	r1, [r7, #8]
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f000 f805 	bl	800d0de <prvInitialiseNewQueue>
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3720      	adds	r7, #32
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <prvInitialiseNewQueue>:
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	607a      	str	r2, [r7, #4]
 800d0ea:	70fb      	strb	r3, [r7, #3]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d103      	bne.n	800d0fa <prvInitialiseNewQueue+0x1c>
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	69ba      	ldr	r2, [r7, #24]
 800d0f6:	601a      	str	r2, [r3, #0]
 800d0f8:	e002      	b.n	800d100 <prvInitialiseNewQueue+0x22>
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	63da      	str	r2, [r3, #60]	; 0x3c
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	641a      	str	r2, [r3, #64]	; 0x40
 800d10c:	2101      	movs	r1, #1
 800d10e:	69b8      	ldr	r0, [r7, #24]
 800d110:	f7ff fec8 	bl	800cea4 <xQueueGenericReset>
 800d114:	bf00      	nop
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <prvInitialiseMutex>:
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00e      	beq.n	800d148 <prvInitialiseMutex+0x2c>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	605a      	str	r2, [r3, #4]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	60da      	str	r2, [r3, #12]
 800d13c:	2300      	movs	r3, #0
 800d13e:	2200      	movs	r2, #0
 800d140:	2100      	movs	r1, #0
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f838 	bl	800d1b8 <xQueueGenericSend>
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <xQueueCreateMutex>:
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	71fb      	strb	r3, [r7, #7]
 800d15a:	2301      	movs	r3, #1
 800d15c:	617b      	str	r3, [r7, #20]
 800d15e:	2300      	movs	r3, #0
 800d160:	613b      	str	r3, [r7, #16]
 800d162:	79fb      	ldrb	r3, [r7, #7]
 800d164:	461a      	mov	r2, r3
 800d166:	6939      	ldr	r1, [r7, #16]
 800d168:	6978      	ldr	r0, [r7, #20]
 800d16a:	f7ff ff7a 	bl	800d062 <xQueueGenericCreate>
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7ff ffd3 	bl	800d11c <prvInitialiseMutex>
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	4618      	mov	r0, r3
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <xQueueCreateMutexStatic>:
 800d180:	b580      	push	{r7, lr}
 800d182:	b088      	sub	sp, #32
 800d184:	af02      	add	r7, sp, #8
 800d186:	4603      	mov	r3, r0
 800d188:	6039      	str	r1, [r7, #0]
 800d18a:	71fb      	strb	r3, [r7, #7]
 800d18c:	2301      	movs	r3, #1
 800d18e:	617b      	str	r3, [r7, #20]
 800d190:	2300      	movs	r3, #0
 800d192:	613b      	str	r3, [r7, #16]
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2200      	movs	r2, #0
 800d19c:	6939      	ldr	r1, [r7, #16]
 800d19e:	6978      	ldr	r0, [r7, #20]
 800d1a0:	f7ff fee8 	bl	800cf74 <xQueueGenericCreateStatic>
 800d1a4:	60f8      	str	r0, [r7, #12]
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7ff ffb8 	bl	800d11c <prvInitialiseMutex>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
	...

0800d1b8 <xQueueGenericSend>:
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08e      	sub	sp, #56	; 0x38
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	633b      	str	r3, [r7, #48]	; 0x30
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <xQueueGenericSend+0x32>
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <xQueueGenericSend+0x30>
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d103      	bne.n	800d1f8 <xQueueGenericSend+0x40>
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d101      	bne.n	800d1fc <xQueueGenericSend+0x44>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e000      	b.n	800d1fe <xQueueGenericSend+0x46>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <xQueueGenericSend+0x60>
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	627b      	str	r3, [r7, #36]	; 0x24
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <xQueueGenericSend+0x5e>
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d103      	bne.n	800d226 <xQueueGenericSend+0x6e>
 800d21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d222:	2b01      	cmp	r3, #1
 800d224:	d101      	bne.n	800d22a <xQueueGenericSend+0x72>
 800d226:	2301      	movs	r3, #1
 800d228:	e000      	b.n	800d22c <xQueueGenericSend+0x74>
 800d22a:	2300      	movs	r3, #0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d10a      	bne.n	800d246 <xQueueGenericSend+0x8e>
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	623b      	str	r3, [r7, #32]
 800d242:	bf00      	nop
 800d244:	e7fe      	b.n	800d244 <xQueueGenericSend+0x8c>
 800d246:	f001 fb85 	bl	800e954 <xTaskGetSchedulerState>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d102      	bne.n	800d256 <xQueueGenericSend+0x9e>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d101      	bne.n	800d25a <xQueueGenericSend+0xa2>
 800d256:	2301      	movs	r3, #1
 800d258:	e000      	b.n	800d25c <xQueueGenericSend+0xa4>
 800d25a:	2300      	movs	r3, #0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10a      	bne.n	800d276 <xQueueGenericSend+0xbe>
 800d260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	61fb      	str	r3, [r7, #28]
 800d272:	bf00      	nop
 800d274:	e7fe      	b.n	800d274 <xQueueGenericSend+0xbc>
 800d276:	f002 fa65 	bl	800f744 <vPortEnterCritical>
 800d27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d282:	429a      	cmp	r2, r3
 800d284:	d302      	bcc.n	800d28c <xQueueGenericSend+0xd4>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d129      	bne.n	800d2e0 <xQueueGenericSend+0x128>
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d292:	f000 fb2b 	bl	800d8ec <prvCopyDataToQueue>
 800d296:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d010      	beq.n	800d2c2 <xQueueGenericSend+0x10a>
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	3324      	adds	r3, #36	; 0x24
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f001 f98f 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d013      	beq.n	800d2d8 <xQueueGenericSend+0x120>
 800d2b0:	4b3f      	ldr	r3, [pc, #252]	; (800d3b0 <xQueueGenericSend+0x1f8>)
 800d2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	e00a      	b.n	800d2d8 <xQueueGenericSend+0x120>
 800d2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d007      	beq.n	800d2d8 <xQueueGenericSend+0x120>
 800d2c8:	4b39      	ldr	r3, [pc, #228]	; (800d3b0 <xQueueGenericSend+0x1f8>)
 800d2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f002 fa64 	bl	800f7a4 <vPortExitCritical>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e063      	b.n	800d3a8 <xQueueGenericSend+0x1f0>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d103      	bne.n	800d2ee <xQueueGenericSend+0x136>
 800d2e6:	f002 fa5d 	bl	800f7a4 <vPortExitCritical>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e05c      	b.n	800d3a8 <xQueueGenericSend+0x1f0>
 800d2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d106      	bne.n	800d302 <xQueueGenericSend+0x14a>
 800d2f4:	f107 0314 	add.w	r3, r7, #20
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f001 f9c7 	bl	800e68c <vTaskInternalSetTimeOutState>
 800d2fe:	2301      	movs	r3, #1
 800d300:	637b      	str	r3, [r7, #52]	; 0x34
 800d302:	f002 fa4f 	bl	800f7a4 <vPortExitCritical>
 800d306:	f000 ff23 	bl	800e150 <vTaskSuspendAll>
 800d30a:	f002 fa1b 	bl	800f744 <vPortEnterCritical>
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d314:	b25b      	sxtb	r3, r3
 800d316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31a:	d103      	bne.n	800d324 <xQueueGenericSend+0x16c>
 800d31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d32a:	b25b      	sxtb	r3, r3
 800d32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d330:	d103      	bne.n	800d33a <xQueueGenericSend+0x182>
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	2200      	movs	r2, #0
 800d336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d33a:	f002 fa33 	bl	800f7a4 <vPortExitCritical>
 800d33e:	1d3a      	adds	r2, r7, #4
 800d340:	f107 0314 	add.w	r3, r7, #20
 800d344:	4611      	mov	r1, r2
 800d346:	4618      	mov	r0, r3
 800d348:	f001 f9b6 	bl	800e6b8 <xTaskCheckForTimeOut>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d124      	bne.n	800d39c <xQueueGenericSend+0x1e4>
 800d352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d354:	f000 fbc2 	bl	800dadc <prvIsQueueFull>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d018      	beq.n	800d390 <xQueueGenericSend+0x1d8>
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	3310      	adds	r3, #16
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	4611      	mov	r1, r2
 800d366:	4618      	mov	r0, r3
 800d368:	f001 f8de 	bl	800e528 <vTaskPlaceOnEventList>
 800d36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d36e:	f000 fb4d 	bl	800da0c <prvUnlockQueue>
 800d372:	f000 fefb 	bl	800e16c <xTaskResumeAll>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f47f af7c 	bne.w	800d276 <xQueueGenericSend+0xbe>
 800d37e:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <xQueueGenericSend+0x1f8>)
 800d380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	e772      	b.n	800d276 <xQueueGenericSend+0xbe>
 800d390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d392:	f000 fb3b 	bl	800da0c <prvUnlockQueue>
 800d396:	f000 fee9 	bl	800e16c <xTaskResumeAll>
 800d39a:	e76c      	b.n	800d276 <xQueueGenericSend+0xbe>
 800d39c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d39e:	f000 fb35 	bl	800da0c <prvUnlockQueue>
 800d3a2:	f000 fee3 	bl	800e16c <xTaskResumeAll>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3738      	adds	r7, #56	; 0x38
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	e000ed04 	.word	0xe000ed04

0800d3b4 <xQueueGenericSendFromISR>:
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08e      	sub	sp, #56	; 0x38
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	633b      	str	r3, [r7, #48]	; 0x30
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10a      	bne.n	800d3e2 <xQueueGenericSendFromISR+0x2e>
 800d3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d3de:	bf00      	nop
 800d3e0:	e7fe      	b.n	800d3e0 <xQueueGenericSendFromISR+0x2c>
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d103      	bne.n	800d3f0 <xQueueGenericSendFromISR+0x3c>
 800d3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d101      	bne.n	800d3f4 <xQueueGenericSendFromISR+0x40>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e000      	b.n	800d3f6 <xQueueGenericSendFromISR+0x42>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10a      	bne.n	800d410 <xQueueGenericSendFromISR+0x5c>
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	623b      	str	r3, [r7, #32]
 800d40c:	bf00      	nop
 800d40e:	e7fe      	b.n	800d40e <xQueueGenericSendFromISR+0x5a>
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b02      	cmp	r3, #2
 800d414:	d103      	bne.n	800d41e <xQueueGenericSendFromISR+0x6a>
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d101      	bne.n	800d422 <xQueueGenericSendFromISR+0x6e>
 800d41e:	2301      	movs	r3, #1
 800d420:	e000      	b.n	800d424 <xQueueGenericSendFromISR+0x70>
 800d422:	2300      	movs	r3, #0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10a      	bne.n	800d43e <xQueueGenericSendFromISR+0x8a>
 800d428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	61fb      	str	r3, [r7, #28]
 800d43a:	bf00      	nop
 800d43c:	e7fe      	b.n	800d43c <xQueueGenericSendFromISR+0x88>
 800d43e:	f002 fa63 	bl	800f908 <vPortValidateInterruptPriority>
 800d442:	f3ef 8211 	mrs	r2, BASEPRI
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	61ba      	str	r2, [r7, #24]
 800d458:	617b      	str	r3, [r7, #20]
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d466:	429a      	cmp	r2, r3
 800d468:	d302      	bcc.n	800d470 <xQueueGenericSendFromISR+0xbc>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b02      	cmp	r3, #2
 800d46e:	d12c      	bne.n	800d4ca <xQueueGenericSendFromISR+0x116>
 800d470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	68b9      	ldr	r1, [r7, #8]
 800d47e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d480:	f000 fa34 	bl	800d8ec <prvCopyDataToQueue>
 800d484:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48c:	d112      	bne.n	800d4b4 <xQueueGenericSendFromISR+0x100>
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d492:	2b00      	cmp	r3, #0
 800d494:	d016      	beq.n	800d4c4 <xQueueGenericSendFromISR+0x110>
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	3324      	adds	r3, #36	; 0x24
 800d49a:	4618      	mov	r0, r3
 800d49c:	f001 f894 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00e      	beq.n	800d4c4 <xQueueGenericSendFromISR+0x110>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00b      	beq.n	800d4c4 <xQueueGenericSendFromISR+0x110>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	601a      	str	r2, [r3, #0]
 800d4b2:	e007      	b.n	800d4c4 <xQueueGenericSendFromISR+0x110>
 800d4b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	b25a      	sxtb	r2, r3
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c8:	e001      	b.n	800d4ce <xQueueGenericSendFromISR+0x11a>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	613b      	str	r3, [r7, #16]
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	bf00      	nop
 800d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3738      	adds	r7, #56	; 0x38
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <xQueueReceive>:
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b08c      	sub	sp, #48	; 0x30
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <xQueueReceive+0x30>
 800d4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	623b      	str	r3, [r7, #32]
 800d510:	bf00      	nop
 800d512:	e7fe      	b.n	800d512 <xQueueReceive+0x2e>
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d103      	bne.n	800d522 <xQueueReceive+0x3e>
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <xQueueReceive+0x42>
 800d522:	2301      	movs	r3, #1
 800d524:	e000      	b.n	800d528 <xQueueReceive+0x44>
 800d526:	2300      	movs	r3, #0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d10a      	bne.n	800d542 <xQueueReceive+0x5e>
 800d52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	61fb      	str	r3, [r7, #28]
 800d53e:	bf00      	nop
 800d540:	e7fe      	b.n	800d540 <xQueueReceive+0x5c>
 800d542:	f001 fa07 	bl	800e954 <xTaskGetSchedulerState>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d102      	bne.n	800d552 <xQueueReceive+0x6e>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <xQueueReceive+0x72>
 800d552:	2301      	movs	r3, #1
 800d554:	e000      	b.n	800d558 <xQueueReceive+0x74>
 800d556:	2300      	movs	r3, #0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10a      	bne.n	800d572 <xQueueReceive+0x8e>
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	61bb      	str	r3, [r7, #24]
 800d56e:	bf00      	nop
 800d570:	e7fe      	b.n	800d570 <xQueueReceive+0x8c>
 800d572:	f002 f8e7 	bl	800f744 <vPortEnterCritical>
 800d576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57a:	627b      	str	r3, [r7, #36]	; 0x24
 800d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d01f      	beq.n	800d5c2 <xQueueReceive+0xde>
 800d582:	68b9      	ldr	r1, [r7, #8]
 800d584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d586:	f000 fa1b 	bl	800d9c0 <prvCopyDataFromQueue>
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	1e5a      	subs	r2, r3, #1
 800d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d590:	639a      	str	r2, [r3, #56]	; 0x38
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00f      	beq.n	800d5ba <xQueueReceive+0xd6>
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	3310      	adds	r3, #16
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f001 f812 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <xQueueReceive+0xd6>
 800d5aa:	4b3d      	ldr	r3, [pc, #244]	; (800d6a0 <xQueueReceive+0x1bc>)
 800d5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f002 f8f3 	bl	800f7a4 <vPortExitCritical>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e069      	b.n	800d696 <xQueueReceive+0x1b2>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d103      	bne.n	800d5d0 <xQueueReceive+0xec>
 800d5c8:	f002 f8ec 	bl	800f7a4 <vPortExitCritical>
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	e062      	b.n	800d696 <xQueueReceive+0x1b2>
 800d5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d106      	bne.n	800d5e4 <xQueueReceive+0x100>
 800d5d6:	f107 0310 	add.w	r3, r7, #16
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f001 f856 	bl	800e68c <vTaskInternalSetTimeOutState>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5e4:	f002 f8de 	bl	800f7a4 <vPortExitCritical>
 800d5e8:	f000 fdb2 	bl	800e150 <vTaskSuspendAll>
 800d5ec:	f002 f8aa 	bl	800f744 <vPortEnterCritical>
 800d5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5fc:	d103      	bne.n	800d606 <xQueueReceive+0x122>
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	2200      	movs	r2, #0
 800d602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d60c:	b25b      	sxtb	r3, r3
 800d60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d612:	d103      	bne.n	800d61c <xQueueReceive+0x138>
 800d614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d61c:	f002 f8c2 	bl	800f7a4 <vPortExitCritical>
 800d620:	1d3a      	adds	r2, r7, #4
 800d622:	f107 0310 	add.w	r3, r7, #16
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f001 f845 	bl	800e6b8 <xTaskCheckForTimeOut>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d123      	bne.n	800d67c <xQueueReceive+0x198>
 800d634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d636:	f000 fa3b 	bl	800dab0 <prvIsQueueEmpty>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d017      	beq.n	800d670 <xQueueReceive+0x18c>
 800d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d642:	3324      	adds	r3, #36	; 0x24
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	4611      	mov	r1, r2
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 ff6d 	bl	800e528 <vTaskPlaceOnEventList>
 800d64e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d650:	f000 f9dc 	bl	800da0c <prvUnlockQueue>
 800d654:	f000 fd8a 	bl	800e16c <xTaskResumeAll>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d189      	bne.n	800d572 <xQueueReceive+0x8e>
 800d65e:	4b10      	ldr	r3, [pc, #64]	; (800d6a0 <xQueueReceive+0x1bc>)
 800d660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	e780      	b.n	800d572 <xQueueReceive+0x8e>
 800d670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d672:	f000 f9cb 	bl	800da0c <prvUnlockQueue>
 800d676:	f000 fd79 	bl	800e16c <xTaskResumeAll>
 800d67a:	e77a      	b.n	800d572 <xQueueReceive+0x8e>
 800d67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d67e:	f000 f9c5 	bl	800da0c <prvUnlockQueue>
 800d682:	f000 fd73 	bl	800e16c <xTaskResumeAll>
 800d686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d688:	f000 fa12 	bl	800dab0 <prvIsQueueEmpty>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f43f af6f 	beq.w	800d572 <xQueueReceive+0x8e>
 800d694:	2300      	movs	r3, #0
 800d696:	4618      	mov	r0, r3
 800d698:	3730      	adds	r7, #48	; 0x30
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	e000ed04 	.word	0xe000ed04

0800d6a4 <xQueueSemaphoreTake>:
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08e      	sub	sp, #56	; 0x38
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	633b      	str	r3, [r7, #48]	; 0x30
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10a      	bne.n	800d6d6 <xQueueSemaphoreTake+0x32>
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	623b      	str	r3, [r7, #32]
 800d6d2:	bf00      	nop
 800d6d4:	e7fe      	b.n	800d6d4 <xQueueSemaphoreTake+0x30>
 800d6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00a      	beq.n	800d6f4 <xQueueSemaphoreTake+0x50>
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	61fb      	str	r3, [r7, #28]
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <xQueueSemaphoreTake+0x4e>
 800d6f4:	f001 f92e 	bl	800e954 <xTaskGetSchedulerState>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d102      	bne.n	800d704 <xQueueSemaphoreTake+0x60>
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <xQueueSemaphoreTake+0x64>
 800d704:	2301      	movs	r3, #1
 800d706:	e000      	b.n	800d70a <xQueueSemaphoreTake+0x66>
 800d708:	2300      	movs	r3, #0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10a      	bne.n	800d724 <xQueueSemaphoreTake+0x80>
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	61bb      	str	r3, [r7, #24]
 800d720:	bf00      	nop
 800d722:	e7fe      	b.n	800d722 <xQueueSemaphoreTake+0x7e>
 800d724:	f002 f80e 	bl	800f744 <vPortEnterCritical>
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	2b00      	cmp	r3, #0
 800d732:	d024      	beq.n	800d77e <xQueueSemaphoreTake+0xda>
 800d734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d736:	1e5a      	subs	r2, r3, #1
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	639a      	str	r2, [r3, #56]	; 0x38
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d104      	bne.n	800d74e <xQueueSemaphoreTake+0xaa>
 800d744:	f001 fad0 	bl	800ece8 <pvTaskIncrementMutexHeldCount>
 800d748:	4602      	mov	r2, r0
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	605a      	str	r2, [r3, #4]
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00f      	beq.n	800d776 <xQueueSemaphoreTake+0xd2>
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	3310      	adds	r3, #16
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 ff34 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d007      	beq.n	800d776 <xQueueSemaphoreTake+0xd2>
 800d766:	4b54      	ldr	r3, [pc, #336]	; (800d8b8 <xQueueSemaphoreTake+0x214>)
 800d768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f002 f815 	bl	800f7a4 <vPortExitCritical>
 800d77a:	2301      	movs	r3, #1
 800d77c:	e097      	b.n	800d8ae <xQueueSemaphoreTake+0x20a>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d111      	bne.n	800d7a8 <xQueueSemaphoreTake+0x104>
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <xQueueSemaphoreTake+0xfc>
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	617b      	str	r3, [r7, #20]
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <xQueueSemaphoreTake+0xfa>
 800d7a0:	f002 f800 	bl	800f7a4 <vPortExitCritical>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e082      	b.n	800d8ae <xQueueSemaphoreTake+0x20a>
 800d7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <xQueueSemaphoreTake+0x118>
 800d7ae:	f107 030c 	add.w	r3, r7, #12
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 ff6a 	bl	800e68c <vTaskInternalSetTimeOutState>
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d7bc:	f001 fff2 	bl	800f7a4 <vPortExitCritical>
 800d7c0:	f000 fcc6 	bl	800e150 <vTaskSuspendAll>
 800d7c4:	f001 ffbe 	bl	800f744 <vPortEnterCritical>
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ce:	b25b      	sxtb	r3, r3
 800d7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d4:	d103      	bne.n	800d7de <xQueueSemaphoreTake+0x13a>
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7e4:	b25b      	sxtb	r3, r3
 800d7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ea:	d103      	bne.n	800d7f4 <xQueueSemaphoreTake+0x150>
 800d7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7f4:	f001 ffd6 	bl	800f7a4 <vPortExitCritical>
 800d7f8:	463a      	mov	r2, r7
 800d7fa:	f107 030c 	add.w	r3, r7, #12
 800d7fe:	4611      	mov	r1, r2
 800d800:	4618      	mov	r0, r3
 800d802:	f000 ff59 	bl	800e6b8 <xTaskCheckForTimeOut>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d132      	bne.n	800d872 <xQueueSemaphoreTake+0x1ce>
 800d80c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d80e:	f000 f94f 	bl	800dab0 <prvIsQueueEmpty>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d026      	beq.n	800d866 <xQueueSemaphoreTake+0x1c2>
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d109      	bne.n	800d834 <xQueueSemaphoreTake+0x190>
 800d820:	f001 ff90 	bl	800f744 <vPortEnterCritical>
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	4618      	mov	r0, r3
 800d82a:	f001 f8b1 	bl	800e990 <xTaskPriorityInherit>
 800d82e:	6338      	str	r0, [r7, #48]	; 0x30
 800d830:	f001 ffb8 	bl	800f7a4 <vPortExitCritical>
 800d834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d836:	3324      	adds	r3, #36	; 0x24
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	4611      	mov	r1, r2
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 fe73 	bl	800e528 <vTaskPlaceOnEventList>
 800d842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d844:	f000 f8e2 	bl	800da0c <prvUnlockQueue>
 800d848:	f000 fc90 	bl	800e16c <xTaskResumeAll>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f47f af68 	bne.w	800d724 <xQueueSemaphoreTake+0x80>
 800d854:	4b18      	ldr	r3, [pc, #96]	; (800d8b8 <xQueueSemaphoreTake+0x214>)
 800d856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d85a:	601a      	str	r2, [r3, #0]
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	e75e      	b.n	800d724 <xQueueSemaphoreTake+0x80>
 800d866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d868:	f000 f8d0 	bl	800da0c <prvUnlockQueue>
 800d86c:	f000 fc7e 	bl	800e16c <xTaskResumeAll>
 800d870:	e758      	b.n	800d724 <xQueueSemaphoreTake+0x80>
 800d872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d874:	f000 f8ca 	bl	800da0c <prvUnlockQueue>
 800d878:	f000 fc78 	bl	800e16c <xTaskResumeAll>
 800d87c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d87e:	f000 f917 	bl	800dab0 <prvIsQueueEmpty>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	f43f af4d 	beq.w	800d724 <xQueueSemaphoreTake+0x80>
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00d      	beq.n	800d8ac <xQueueSemaphoreTake+0x208>
 800d890:	f001 ff58 	bl	800f744 <vPortEnterCritical>
 800d894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d896:	f000 f811 	bl	800d8bc <prvGetDisinheritPriorityAfterTimeout>
 800d89a:	6278      	str	r0, [r7, #36]	; 0x24
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f001 f980 	bl	800eba8 <vTaskPriorityDisinheritAfterTimeout>
 800d8a8:	f001 ff7c 	bl	800f7a4 <vPortExitCritical>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3738      	adds	r7, #56	; 0x38
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	e000ed04 	.word	0xe000ed04

0800d8bc <prvGetDisinheritPriorityAfterTimeout>:
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d006      	beq.n	800d8da <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f1c3 0307 	rsb	r3, r3, #7
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	e001      	b.n	800d8de <prvGetDisinheritPriorityAfterTimeout+0x22>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <prvCopyDataToQueue>:
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	617b      	str	r3, [r7, #20]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10d      	bne.n	800d926 <prvCopyDataToQueue+0x3a>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d14d      	bne.n	800d9ae <prvCopyDataToQueue+0xc2>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	4618      	mov	r0, r3
 800d918:	f001 f8c0 	bl	800ea9c <xTaskPriorityDisinherit>
 800d91c:	6178      	str	r0, [r7, #20]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	605a      	str	r2, [r3, #4]
 800d924:	e043      	b.n	800d9ae <prvCopyDataToQueue+0xc2>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d119      	bne.n	800d960 <prvCopyDataToQueue+0x74>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6898      	ldr	r0, [r3, #8]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d934:	461a      	mov	r2, r3
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	f002 fc12 	bl	8010160 <memcpy>
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	689a      	ldr	r2, [r3, #8]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d944:	441a      	add	r2, r3
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	609a      	str	r2, [r3, #8]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	689a      	ldr	r2, [r3, #8]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	429a      	cmp	r2, r3
 800d954:	d32b      	bcc.n	800d9ae <prvCopyDataToQueue+0xc2>
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	609a      	str	r2, [r3, #8]
 800d95e:	e026      	b.n	800d9ae <prvCopyDataToQueue+0xc2>
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	68d8      	ldr	r0, [r3, #12]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d968:	461a      	mov	r2, r3
 800d96a:	68b9      	ldr	r1, [r7, #8]
 800d96c:	f002 fbf8 	bl	8010160 <memcpy>
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	68da      	ldr	r2, [r3, #12]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d978:	425b      	negs	r3, r3
 800d97a:	441a      	add	r2, r3
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	60da      	str	r2, [r3, #12]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	68da      	ldr	r2, [r3, #12]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d207      	bcs.n	800d99c <prvCopyDataToQueue+0xb0>
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d994:	425b      	negs	r3, r3
 800d996:	441a      	add	r2, r3
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	60da      	str	r2, [r3, #12]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d105      	bne.n	800d9ae <prvCopyDataToQueue+0xc2>
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <prvCopyDataToQueue+0xc2>
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	613b      	str	r3, [r7, #16]
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	1c5a      	adds	r2, r3, #1
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	639a      	str	r2, [r3, #56]	; 0x38
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3718      	adds	r7, #24
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <prvCopyDataFromQueue>:
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d018      	beq.n	800da04 <prvCopyDataFromQueue+0x44>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68da      	ldr	r2, [r3, #12]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9da:	441a      	add	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	60da      	str	r2, [r3, #12]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	68da      	ldr	r2, [r3, #12]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d303      	bcc.n	800d9f4 <prvCopyDataFromQueue+0x34>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	60da      	str	r2, [r3, #12]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	68d9      	ldr	r1, [r3, #12]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	6838      	ldr	r0, [r7, #0]
 800da00:	f002 fbae 	bl	8010160 <memcpy>
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <prvUnlockQueue>:
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	f001 fe96 	bl	800f744 <vPortEnterCritical>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da1e:	73fb      	strb	r3, [r7, #15]
 800da20:	e011      	b.n	800da46 <prvUnlockQueue+0x3a>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	2b00      	cmp	r3, #0
 800da28:	d012      	beq.n	800da50 <prvUnlockQueue+0x44>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3324      	adds	r3, #36	; 0x24
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 fdca 	bl	800e5c8 <xTaskRemoveFromEventList>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <prvUnlockQueue+0x32>
 800da3a:	f000 fe9f 	bl	800e77c <vTaskMissedYield>
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
 800da40:	3b01      	subs	r3, #1
 800da42:	b2db      	uxtb	r3, r3
 800da44:	73fb      	strb	r3, [r7, #15]
 800da46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	dce9      	bgt.n	800da22 <prvUnlockQueue+0x16>
 800da4e:	e000      	b.n	800da52 <prvUnlockQueue+0x46>
 800da50:	bf00      	nop
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	22ff      	movs	r2, #255	; 0xff
 800da56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da5a:	f001 fea3 	bl	800f7a4 <vPortExitCritical>
 800da5e:	f001 fe71 	bl	800f744 <vPortEnterCritical>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da68:	73bb      	strb	r3, [r7, #14]
 800da6a:	e011      	b.n	800da90 <prvUnlockQueue+0x84>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d012      	beq.n	800da9a <prvUnlockQueue+0x8e>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	3310      	adds	r3, #16
 800da78:	4618      	mov	r0, r3
 800da7a:	f000 fda5 	bl	800e5c8 <xTaskRemoveFromEventList>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <prvUnlockQueue+0x7c>
 800da84:	f000 fe7a 	bl	800e77c <vTaskMissedYield>
 800da88:	7bbb      	ldrb	r3, [r7, #14]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	73bb      	strb	r3, [r7, #14]
 800da90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da94:	2b00      	cmp	r3, #0
 800da96:	dce9      	bgt.n	800da6c <prvUnlockQueue+0x60>
 800da98:	e000      	b.n	800da9c <prvUnlockQueue+0x90>
 800da9a:	bf00      	nop
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	22ff      	movs	r2, #255	; 0xff
 800daa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800daa4:	f001 fe7e 	bl	800f7a4 <vPortExitCritical>
 800daa8:	bf00      	nop
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <prvIsQueueEmpty>:
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	f001 fe44 	bl	800f744 <vPortEnterCritical>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d102      	bne.n	800daca <prvIsQueueEmpty+0x1a>
 800dac4:	2301      	movs	r3, #1
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	e001      	b.n	800dace <prvIsQueueEmpty+0x1e>
 800daca:	2300      	movs	r3, #0
 800dacc:	60fb      	str	r3, [r7, #12]
 800dace:	f001 fe69 	bl	800f7a4 <vPortExitCritical>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <prvIsQueueFull>:
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	f001 fe2e 	bl	800f744 <vPortEnterCritical>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d102      	bne.n	800dafa <prvIsQueueFull+0x1e>
 800daf4:	2301      	movs	r3, #1
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	e001      	b.n	800dafe <prvIsQueueFull+0x22>
 800dafa:	2300      	movs	r3, #0
 800dafc:	60fb      	str	r3, [r7, #12]
 800dafe:	f001 fe51 	bl	800f7a4 <vPortExitCritical>
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	4618      	mov	r0, r3
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <vQueueAddToRegistry>:
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
 800db1a:	e014      	b.n	800db46 <vQueueAddToRegistry+0x3a>
 800db1c:	4a0f      	ldr	r2, [pc, #60]	; (800db5c <vQueueAddToRegistry+0x50>)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10b      	bne.n	800db40 <vQueueAddToRegistry+0x34>
 800db28:	490c      	ldr	r1, [pc, #48]	; (800db5c <vQueueAddToRegistry+0x50>)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800db32:	4a0a      	ldr	r2, [pc, #40]	; (800db5c <vQueueAddToRegistry+0x50>)
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	00db      	lsls	r3, r3, #3
 800db38:	4413      	add	r3, r2
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	605a      	str	r2, [r3, #4]
 800db3e:	e006      	b.n	800db4e <vQueueAddToRegistry+0x42>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	3301      	adds	r3, #1
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2b07      	cmp	r3, #7
 800db4a:	d9e7      	bls.n	800db1c <vQueueAddToRegistry+0x10>
 800db4c:	bf00      	nop
 800db4e:	bf00      	nop
 800db50:	3714      	adds	r7, #20
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	200029d0 	.word	0x200029d0

0800db60 <vQueueWaitForMessageRestricted>:
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	f001 fde8 	bl	800f744 <vPortEnterCritical>
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db7a:	b25b      	sxtb	r3, r3
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d103      	bne.n	800db8a <vQueueWaitForMessageRestricted+0x2a>
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db90:	b25b      	sxtb	r3, r3
 800db92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db96:	d103      	bne.n	800dba0 <vQueueWaitForMessageRestricted+0x40>
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dba0:	f001 fe00 	bl	800f7a4 <vPortExitCritical>
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d106      	bne.n	800dbba <vQueueWaitForMessageRestricted+0x5a>
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	3324      	adds	r3, #36	; 0x24
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	68b9      	ldr	r1, [r7, #8]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 fcdb 	bl	800e570 <vTaskPlaceOnEventListRestricted>
 800dbba:	6978      	ldr	r0, [r7, #20]
 800dbbc:	f7ff ff26 	bl	800da0c <prvUnlockQueue>
 800dbc0:	bf00      	nop
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <xTaskCreateStatic>:
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08e      	sub	sp, #56	; 0x38
 800dbcc:	af04      	add	r7, sp, #16
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	603b      	str	r3, [r7, #0]
 800dbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <xTaskCreateStatic+0x2a>
 800dbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	623b      	str	r3, [r7, #32]
 800dbee:	bf00      	nop
 800dbf0:	e7fe      	b.n	800dbf0 <xTaskCreateStatic+0x28>
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10a      	bne.n	800dc0e <xTaskCreateStatic+0x46>
 800dbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	61fb      	str	r3, [r7, #28]
 800dc0a:	bf00      	nop
 800dc0c:	e7fe      	b.n	800dc0c <xTaskCreateStatic+0x44>
 800dc0e:	23b0      	movs	r3, #176	; 0xb0
 800dc10:	613b      	str	r3, [r7, #16]
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	2bb0      	cmp	r3, #176	; 0xb0
 800dc16:	d00a      	beq.n	800dc2e <xTaskCreateStatic+0x66>
 800dc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1c:	f383 8811 	msr	BASEPRI, r3
 800dc20:	f3bf 8f6f 	isb	sy
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	61bb      	str	r3, [r7, #24]
 800dc2a:	bf00      	nop
 800dc2c:	e7fe      	b.n	800dc2c <xTaskCreateStatic+0x64>
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d01e      	beq.n	800dc72 <xTaskCreateStatic+0xaa>
 800dc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d01b      	beq.n	800dc72 <xTaskCreateStatic+0xaa>
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc42:	631a      	str	r2, [r3, #48]	; 0x30
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	2202      	movs	r2, #2
 800dc48:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	9303      	str	r3, [sp, #12]
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	9302      	str	r3, [sp, #8]
 800dc54:	f107 0314 	add.w	r3, r7, #20
 800dc58:	9301      	str	r3, [sp, #4]
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f000 f851 	bl	800dd0c <prvInitialiseNewTask>
 800dc6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc6c:	f000 f8e4 	bl	800de38 <prvAddNewTaskToReadyList>
 800dc70:	e001      	b.n	800dc76 <xTaskCreateStatic+0xae>
 800dc72:	2300      	movs	r3, #0
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3728      	adds	r7, #40	; 0x28
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <xTaskCreate>:
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b08c      	sub	sp, #48	; 0x30
 800dc84:	af04      	add	r7, sp, #16
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	603b      	str	r3, [r7, #0]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	80fb      	strh	r3, [r7, #6]
 800dc90:	88fb      	ldrh	r3, [r7, #6]
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 fe77 	bl	800f988 <pvPortMalloc>
 800dc9a:	6178      	str	r0, [r7, #20]
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00e      	beq.n	800dcc0 <xTaskCreate+0x40>
 800dca2:	20b0      	movs	r0, #176	; 0xb0
 800dca4:	f001 fe70 	bl	800f988 <pvPortMalloc>
 800dca8:	61f8      	str	r0, [r7, #28]
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <xTaskCreate+0x38>
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	631a      	str	r2, [r3, #48]	; 0x30
 800dcb6:	e005      	b.n	800dcc4 <xTaskCreate+0x44>
 800dcb8:	6978      	ldr	r0, [r7, #20]
 800dcba:	f001 ff29 	bl	800fb10 <vPortFree>
 800dcbe:	e001      	b.n	800dcc4 <xTaskCreate+0x44>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d017      	beq.n	800dcfa <xTaskCreate+0x7a>
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800dcd2:	88fa      	ldrh	r2, [r7, #6]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	9303      	str	r3, [sp, #12]
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	9302      	str	r3, [sp, #8]
 800dcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	68b9      	ldr	r1, [r7, #8]
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 f80f 	bl	800dd0c <prvInitialiseNewTask>
 800dcee:	69f8      	ldr	r0, [r7, #28]
 800dcf0:	f000 f8a2 	bl	800de38 <prvAddNewTaskToReadyList>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	61bb      	str	r3, [r7, #24]
 800dcf8:	e002      	b.n	800dd00 <xTaskCreate+0x80>
 800dcfa:	f04f 33ff 	mov.w	r3, #4294967295
 800dcfe:	61bb      	str	r3, [r7, #24]
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	4618      	mov	r0, r3
 800dd04:	3720      	adds	r7, #32
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
	...

0800dd0c <prvInitialiseNewTask>:
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	603b      	str	r3, [r7, #0]
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dd24:	3b01      	subs	r3, #1
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	61bb      	str	r3, [r7, #24]
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	f023 0307 	bic.w	r3, r3, #7
 800dd32:	61bb      	str	r3, [r7, #24]
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	f003 0307 	and.w	r3, r3, #7
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00a      	beq.n	800dd54 <prvInitialiseNewTask+0x48>
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	617b      	str	r3, [r7, #20]
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <prvInitialiseNewTask+0x46>
 800dd54:	2300      	movs	r3, #0
 800dd56:	61fb      	str	r3, [r7, #28]
 800dd58:	e012      	b.n	800dd80 <prvInitialiseNewTask+0x74>
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	4413      	add	r3, r2
 800dd60:	7819      	ldrb	r1, [r3, #0]
 800dd62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	4413      	add	r3, r2
 800dd68:	3334      	adds	r3, #52	; 0x34
 800dd6a:	460a      	mov	r2, r1
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	4413      	add	r3, r2
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d006      	beq.n	800dd88 <prvInitialiseNewTask+0x7c>
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	61fb      	str	r3, [r7, #28]
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	2b1f      	cmp	r3, #31
 800dd84:	d9e9      	bls.n	800dd5a <prvInitialiseNewTask+0x4e>
 800dd86:	e000      	b.n	800dd8a <prvInitialiseNewTask+0x7e>
 800dd88:	bf00      	nop
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd94:	2b06      	cmp	r3, #6
 800dd96:	d901      	bls.n	800dd9c <prvInitialiseNewTask+0x90>
 800dd98:	2306      	movs	r3, #6
 800dd9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dda0:	62da      	str	r2, [r3, #44]	; 0x2c
 800dda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dda6:	655a      	str	r2, [r3, #84]	; 0x54
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	2200      	movs	r2, #0
 800ddac:	659a      	str	r2, [r3, #88]	; 0x58
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe ffe2 	bl	800cd7c <vListInitialiseItem>
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddba:	3318      	adds	r3, #24
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe ffdd 	bl	800cd7c <vListInitialiseItem>
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc6:	611a      	str	r2, [r3, #16]
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	f1c3 0207 	rsb	r2, r3, #7
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	619a      	str	r2, [r3, #24]
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd6:	625a      	str	r2, [r3, #36]	; 0x24
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	2200      	movs	r2, #0
 800dddc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	335c      	adds	r3, #92	; 0x5c
 800ddec:	224c      	movs	r2, #76	; 0x4c
 800ddee:	2100      	movs	r1, #0
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f002 f92b 	bl	801004c <memset>
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	4a0c      	ldr	r2, [pc, #48]	; (800de2c <prvInitialiseNewTask+0x120>)
 800ddfa:	661a      	str	r2, [r3, #96]	; 0x60
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	4a0c      	ldr	r2, [pc, #48]	; (800de30 <prvInitialiseNewTask+0x124>)
 800de00:	665a      	str	r2, [r3, #100]	; 0x64
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	4a0b      	ldr	r2, [pc, #44]	; (800de34 <prvInitialiseNewTask+0x128>)
 800de06:	669a      	str	r2, [r3, #104]	; 0x68
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	68f9      	ldr	r1, [r7, #12]
 800de0c:	69b8      	ldr	r0, [r7, #24]
 800de0e:	f001 fb6d 	bl	800f4ec <pxPortInitialiseStack>
 800de12:	4602      	mov	r2, r0
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	601a      	str	r2, [r3, #0]
 800de18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <prvInitialiseNewTask+0x118>
 800de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	bf00      	nop
 800de26:	3720      	adds	r7, #32
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	20003058 	.word	0x20003058
 800de30:	200030c0 	.word	0x200030c0
 800de34:	20003128 	.word	0x20003128

0800de38 <prvAddNewTaskToReadyList>:
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	f001 fc80 	bl	800f744 <vPortEnterCritical>
 800de44:	4b2a      	ldr	r3, [pc, #168]	; (800def0 <prvAddNewTaskToReadyList+0xb8>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	3301      	adds	r3, #1
 800de4a:	4a29      	ldr	r2, [pc, #164]	; (800def0 <prvAddNewTaskToReadyList+0xb8>)
 800de4c:	6013      	str	r3, [r2, #0]
 800de4e:	4b29      	ldr	r3, [pc, #164]	; (800def4 <prvAddNewTaskToReadyList+0xbc>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d109      	bne.n	800de6a <prvAddNewTaskToReadyList+0x32>
 800de56:	4a27      	ldr	r2, [pc, #156]	; (800def4 <prvAddNewTaskToReadyList+0xbc>)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6013      	str	r3, [r2, #0]
 800de5c:	4b24      	ldr	r3, [pc, #144]	; (800def0 <prvAddNewTaskToReadyList+0xb8>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d110      	bne.n	800de86 <prvAddNewTaskToReadyList+0x4e>
 800de64:	f000 fcae 	bl	800e7c4 <prvInitialiseTaskLists>
 800de68:	e00d      	b.n	800de86 <prvAddNewTaskToReadyList+0x4e>
 800de6a:	4b23      	ldr	r3, [pc, #140]	; (800def8 <prvAddNewTaskToReadyList+0xc0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d109      	bne.n	800de86 <prvAddNewTaskToReadyList+0x4e>
 800de72:	4b20      	ldr	r3, [pc, #128]	; (800def4 <prvAddNewTaskToReadyList+0xbc>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d802      	bhi.n	800de86 <prvAddNewTaskToReadyList+0x4e>
 800de80:	4a1c      	ldr	r2, [pc, #112]	; (800def4 <prvAddNewTaskToReadyList+0xbc>)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	4b1d      	ldr	r3, [pc, #116]	; (800defc <prvAddNewTaskToReadyList+0xc4>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	4a1b      	ldr	r2, [pc, #108]	; (800defc <prvAddNewTaskToReadyList+0xc4>)
 800de8e:	6013      	str	r3, [r2, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de94:	2201      	movs	r2, #1
 800de96:	409a      	lsls	r2, r3
 800de98:	4b19      	ldr	r3, [pc, #100]	; (800df00 <prvAddNewTaskToReadyList+0xc8>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	4a18      	ldr	r2, [pc, #96]	; (800df00 <prvAddNewTaskToReadyList+0xc8>)
 800dea0:	6013      	str	r3, [r2, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea6:	4613      	mov	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4413      	add	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	4a15      	ldr	r2, [pc, #84]	; (800df04 <prvAddNewTaskToReadyList+0xcc>)
 800deb0:	441a      	add	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	3304      	adds	r3, #4
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f7fe ff6c 	bl	800cd96 <vListInsertEnd>
 800debe:	f001 fc71 	bl	800f7a4 <vPortExitCritical>
 800dec2:	4b0d      	ldr	r3, [pc, #52]	; (800def8 <prvAddNewTaskToReadyList+0xc0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00e      	beq.n	800dee8 <prvAddNewTaskToReadyList+0xb0>
 800deca:	4b0a      	ldr	r3, [pc, #40]	; (800def4 <prvAddNewTaskToReadyList+0xbc>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d207      	bcs.n	800dee8 <prvAddNewTaskToReadyList+0xb0>
 800ded8:	4b0b      	ldr	r3, [pc, #44]	; (800df08 <prvAddNewTaskToReadyList+0xd0>)
 800deda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dede:	601a      	str	r2, [r3, #0]
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	bf00      	nop
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	20002b10 	.word	0x20002b10
 800def4:	20002a10 	.word	0x20002a10
 800def8:	20002b1c 	.word	0x20002b1c
 800defc:	20002b2c 	.word	0x20002b2c
 800df00:	20002b18 	.word	0x20002b18
 800df04:	20002a14 	.word	0x20002a14
 800df08:	e000ed04 	.word	0xe000ed04

0800df0c <vTaskDelayUntil>:
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08a      	sub	sp, #40	; 0x28
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
 800df16:	2300      	movs	r3, #0
 800df18:	627b      	str	r3, [r7, #36]	; 0x24
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <vTaskDelayUntil+0x2a>
 800df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	617b      	str	r3, [r7, #20]
 800df32:	bf00      	nop
 800df34:	e7fe      	b.n	800df34 <vTaskDelayUntil+0x28>
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <vTaskDelayUntil+0x46>
 800df3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	613b      	str	r3, [r7, #16]
 800df4e:	bf00      	nop
 800df50:	e7fe      	b.n	800df50 <vTaskDelayUntil+0x44>
 800df52:	4b2a      	ldr	r3, [pc, #168]	; (800dffc <vTaskDelayUntil+0xf0>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00a      	beq.n	800df70 <vTaskDelayUntil+0x64>
 800df5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	bf00      	nop
 800df6e:	e7fe      	b.n	800df6e <vTaskDelayUntil+0x62>
 800df70:	f000 f8ee 	bl	800e150 <vTaskSuspendAll>
 800df74:	4b22      	ldr	r3, [pc, #136]	; (800e000 <vTaskDelayUntil+0xf4>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	623b      	str	r3, [r7, #32]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	683a      	ldr	r2, [r7, #0]
 800df80:	4413      	add	r3, r2
 800df82:	61fb      	str	r3, [r7, #28]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6a3a      	ldr	r2, [r7, #32]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d20b      	bcs.n	800dfa6 <vTaskDelayUntil+0x9a>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	69fa      	ldr	r2, [r7, #28]
 800df94:	429a      	cmp	r2, r3
 800df96:	d211      	bcs.n	800dfbc <vTaskDelayUntil+0xb0>
 800df98:	69fa      	ldr	r2, [r7, #28]
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d90d      	bls.n	800dfbc <vTaskDelayUntil+0xb0>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800dfa4:	e00a      	b.n	800dfbc <vTaskDelayUntil+0xb0>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	69fa      	ldr	r2, [r7, #28]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d303      	bcc.n	800dfb8 <vTaskDelayUntil+0xac>
 800dfb0:	69fa      	ldr	r2, [r7, #28]
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d901      	bls.n	800dfbc <vTaskDelayUntil+0xb0>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	627b      	str	r3, [r7, #36]	; 0x24
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	69fa      	ldr	r2, [r7, #28]
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d006      	beq.n	800dfd6 <vTaskDelayUntil+0xca>
 800dfc8:	69fa      	ldr	r2, [r7, #28]
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	2100      	movs	r1, #0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 fe9d 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
 800dfd6:	f000 f8c9 	bl	800e16c <xTaskResumeAll>
 800dfda:	61b8      	str	r0, [r7, #24]
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d107      	bne.n	800dff2 <vTaskDelayUntil+0xe6>
 800dfe2:	4b08      	ldr	r3, [pc, #32]	; (800e004 <vTaskDelayUntil+0xf8>)
 800dfe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfe8:	601a      	str	r2, [r3, #0]
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	bf00      	nop
 800dff4:	3728      	adds	r7, #40	; 0x28
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	20002b38 	.word	0x20002b38
 800e000:	20002b14 	.word	0x20002b14
 800e004:	e000ed04 	.word	0xe000ed04

0800e008 <vTaskDelay>:
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	2300      	movs	r3, #0
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d017      	beq.n	800e04a <vTaskDelay+0x42>
 800e01a:	4b13      	ldr	r3, [pc, #76]	; (800e068 <vTaskDelay+0x60>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00a      	beq.n	800e038 <vTaskDelay+0x30>
 800e022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	60bb      	str	r3, [r7, #8]
 800e034:	bf00      	nop
 800e036:	e7fe      	b.n	800e036 <vTaskDelay+0x2e>
 800e038:	f000 f88a 	bl	800e150 <vTaskSuspendAll>
 800e03c:	2100      	movs	r1, #0
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fe66 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
 800e044:	f000 f892 	bl	800e16c <xTaskResumeAll>
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d107      	bne.n	800e060 <vTaskDelay+0x58>
 800e050:	4b06      	ldr	r3, [pc, #24]	; (800e06c <vTaskDelay+0x64>)
 800e052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e056:	601a      	str	r2, [r3, #0]
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	bf00      	nop
 800e062:	3710      	adds	r7, #16
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	20002b38 	.word	0x20002b38
 800e06c:	e000ed04 	.word	0xe000ed04

0800e070 <vTaskStartScheduler>:
 800e070:	b580      	push	{r7, lr}
 800e072:	b08a      	sub	sp, #40	; 0x28
 800e074:	af04      	add	r7, sp, #16
 800e076:	2300      	movs	r3, #0
 800e078:	60bb      	str	r3, [r7, #8]
 800e07a:	2300      	movs	r3, #0
 800e07c:	607b      	str	r3, [r7, #4]
 800e07e:	463a      	mov	r2, r7
 800e080:	1d39      	adds	r1, r7, #4
 800e082:	f107 0308 	add.w	r3, r7, #8
 800e086:	4618      	mov	r0, r3
 800e088:	f7f5 fa88 	bl	800359c <vApplicationGetIdleTaskMemory>
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	9202      	str	r2, [sp, #8]
 800e094:	9301      	str	r3, [sp, #4]
 800e096:	2300      	movs	r3, #0
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	2300      	movs	r3, #0
 800e09c:	460a      	mov	r2, r1
 800e09e:	4924      	ldr	r1, [pc, #144]	; (800e130 <vTaskStartScheduler+0xc0>)
 800e0a0:	4824      	ldr	r0, [pc, #144]	; (800e134 <vTaskStartScheduler+0xc4>)
 800e0a2:	f7ff fd91 	bl	800dbc8 <xTaskCreateStatic>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4a23      	ldr	r2, [pc, #140]	; (800e138 <vTaskStartScheduler+0xc8>)
 800e0aa:	6013      	str	r3, [r2, #0]
 800e0ac:	4b22      	ldr	r3, [pc, #136]	; (800e138 <vTaskStartScheduler+0xc8>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <vTaskStartScheduler+0x4a>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	617b      	str	r3, [r7, #20]
 800e0b8:	e001      	b.n	800e0be <vTaskStartScheduler+0x4e>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	617b      	str	r3, [r7, #20]
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d102      	bne.n	800e0ca <vTaskStartScheduler+0x5a>
 800e0c4:	f000 fe8a 	bl	800eddc <xTimerCreateTimerTask>
 800e0c8:	6178      	str	r0, [r7, #20]
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d11b      	bne.n	800e108 <vTaskStartScheduler+0x98>
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	613b      	str	r3, [r7, #16]
 800e0e2:	bf00      	nop
 800e0e4:	4b15      	ldr	r3, [pc, #84]	; (800e13c <vTaskStartScheduler+0xcc>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	335c      	adds	r3, #92	; 0x5c
 800e0ea:	4a15      	ldr	r2, [pc, #84]	; (800e140 <vTaskStartScheduler+0xd0>)
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	4b15      	ldr	r3, [pc, #84]	; (800e144 <vTaskStartScheduler+0xd4>)
 800e0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	4b14      	ldr	r3, [pc, #80]	; (800e148 <vTaskStartScheduler+0xd8>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	4b13      	ldr	r3, [pc, #76]	; (800e14c <vTaskStartScheduler+0xdc>)
 800e0fe:	2200      	movs	r2, #0
 800e100:	601a      	str	r2, [r3, #0]
 800e102:	f001 fa7d 	bl	800f600 <xPortStartScheduler>
 800e106:	e00e      	b.n	800e126 <vTaskStartScheduler+0xb6>
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10e:	d10a      	bne.n	800e126 <vTaskStartScheduler+0xb6>
 800e110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	bf00      	nop
 800e124:	e7fe      	b.n	800e124 <vTaskStartScheduler+0xb4>
 800e126:	bf00      	nop
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	080107a4 	.word	0x080107a4
 800e134:	0800e795 	.word	0x0800e795
 800e138:	20002b34 	.word	0x20002b34
 800e13c:	20002a10 	.word	0x20002a10
 800e140:	2000010c 	.word	0x2000010c
 800e144:	20002b30 	.word	0x20002b30
 800e148:	20002b1c 	.word	0x20002b1c
 800e14c:	20002b14 	.word	0x20002b14

0800e150 <vTaskSuspendAll>:
 800e150:	b480      	push	{r7}
 800e152:	af00      	add	r7, sp, #0
 800e154:	4b04      	ldr	r3, [pc, #16]	; (800e168 <vTaskSuspendAll+0x18>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	3301      	adds	r3, #1
 800e15a:	4a03      	ldr	r2, [pc, #12]	; (800e168 <vTaskSuspendAll+0x18>)
 800e15c:	6013      	str	r3, [r2, #0]
 800e15e:	bf00      	nop
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr
 800e168:	20002b38 	.word	0x20002b38

0800e16c <xTaskResumeAll>:
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	2300      	movs	r3, #0
 800e174:	60fb      	str	r3, [r7, #12]
 800e176:	2300      	movs	r3, #0
 800e178:	60bb      	str	r3, [r7, #8]
 800e17a:	4b41      	ldr	r3, [pc, #260]	; (800e280 <xTaskResumeAll+0x114>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10a      	bne.n	800e198 <xTaskResumeAll+0x2c>
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	603b      	str	r3, [r7, #0]
 800e194:	bf00      	nop
 800e196:	e7fe      	b.n	800e196 <xTaskResumeAll+0x2a>
 800e198:	f001 fad4 	bl	800f744 <vPortEnterCritical>
 800e19c:	4b38      	ldr	r3, [pc, #224]	; (800e280 <xTaskResumeAll+0x114>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	4a37      	ldr	r2, [pc, #220]	; (800e280 <xTaskResumeAll+0x114>)
 800e1a4:	6013      	str	r3, [r2, #0]
 800e1a6:	4b36      	ldr	r3, [pc, #216]	; (800e280 <xTaskResumeAll+0x114>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d161      	bne.n	800e272 <xTaskResumeAll+0x106>
 800e1ae:	4b35      	ldr	r3, [pc, #212]	; (800e284 <xTaskResumeAll+0x118>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d05d      	beq.n	800e272 <xTaskResumeAll+0x106>
 800e1b6:	e02e      	b.n	800e216 <xTaskResumeAll+0xaa>
 800e1b8:	4b33      	ldr	r3, [pc, #204]	; (800e288 <xTaskResumeAll+0x11c>)
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	60fb      	str	r3, [r7, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3318      	adds	r3, #24
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe fe43 	bl	800ce50 <uxListRemove>
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fe fe3e 	bl	800ce50 <uxListRemove>
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d8:	2201      	movs	r2, #1
 800e1da:	409a      	lsls	r2, r3
 800e1dc:	4b2b      	ldr	r3, [pc, #172]	; (800e28c <xTaskResumeAll+0x120>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	4a2a      	ldr	r2, [pc, #168]	; (800e28c <xTaskResumeAll+0x120>)
 800e1e4:	6013      	str	r3, [r2, #0]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	4413      	add	r3, r2
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	4a27      	ldr	r2, [pc, #156]	; (800e290 <xTaskResumeAll+0x124>)
 800e1f4:	441a      	add	r2, r3
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f7fe fdca 	bl	800cd96 <vListInsertEnd>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e206:	4b23      	ldr	r3, [pc, #140]	; (800e294 <xTaskResumeAll+0x128>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d302      	bcc.n	800e216 <xTaskResumeAll+0xaa>
 800e210:	4b21      	ldr	r3, [pc, #132]	; (800e298 <xTaskResumeAll+0x12c>)
 800e212:	2201      	movs	r2, #1
 800e214:	601a      	str	r2, [r3, #0]
 800e216:	4b1c      	ldr	r3, [pc, #112]	; (800e288 <xTaskResumeAll+0x11c>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1cc      	bne.n	800e1b8 <xTaskResumeAll+0x4c>
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <xTaskResumeAll+0xbc>
 800e224:	f000 fb70 	bl	800e908 <prvResetNextTaskUnblockTime>
 800e228:	4b1c      	ldr	r3, [pc, #112]	; (800e29c <xTaskResumeAll+0x130>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	607b      	str	r3, [r7, #4]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d010      	beq.n	800e256 <xTaskResumeAll+0xea>
 800e234:	f000 f858 	bl	800e2e8 <xTaskIncrementTick>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <xTaskResumeAll+0xd8>
 800e23e:	4b16      	ldr	r3, [pc, #88]	; (800e298 <xTaskResumeAll+0x12c>)
 800e240:	2201      	movs	r2, #1
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3b01      	subs	r3, #1
 800e248:	607b      	str	r3, [r7, #4]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1f1      	bne.n	800e234 <xTaskResumeAll+0xc8>
 800e250:	4b12      	ldr	r3, [pc, #72]	; (800e29c <xTaskResumeAll+0x130>)
 800e252:	2200      	movs	r2, #0
 800e254:	601a      	str	r2, [r3, #0]
 800e256:	4b10      	ldr	r3, [pc, #64]	; (800e298 <xTaskResumeAll+0x12c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d009      	beq.n	800e272 <xTaskResumeAll+0x106>
 800e25e:	2301      	movs	r3, #1
 800e260:	60bb      	str	r3, [r7, #8]
 800e262:	4b0f      	ldr	r3, [pc, #60]	; (800e2a0 <xTaskResumeAll+0x134>)
 800e264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f001 fa97 	bl	800f7a4 <vPortExitCritical>
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	20002b38 	.word	0x20002b38
 800e284:	20002b10 	.word	0x20002b10
 800e288:	20002ad0 	.word	0x20002ad0
 800e28c:	20002b18 	.word	0x20002b18
 800e290:	20002a14 	.word	0x20002a14
 800e294:	20002a10 	.word	0x20002a10
 800e298:	20002b24 	.word	0x20002b24
 800e29c:	20002b20 	.word	0x20002b20
 800e2a0:	e000ed04 	.word	0xe000ed04

0800e2a4 <xTaskGetTickCount>:
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <xTaskGetTickCount+0x1c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	607b      	str	r3, [r7, #4]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	20002b14 	.word	0x20002b14

0800e2c4 <xTaskGetTickCountFromISR>:
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	f001 fb1d 	bl	800f908 <vPortValidateInterruptPriority>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	607b      	str	r3, [r7, #4]
 800e2d2:	4b04      	ldr	r3, [pc, #16]	; (800e2e4 <xTaskGetTickCountFromISR+0x20>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	603b      	str	r3, [r7, #0]
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	20002b14 	.word	0x20002b14

0800e2e8 <xTaskIncrementTick>:
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	617b      	str	r3, [r7, #20]
 800e2f2:	4b51      	ldr	r3, [pc, #324]	; (800e438 <xTaskIncrementTick+0x150>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f040 808d 	bne.w	800e416 <xTaskIncrementTick+0x12e>
 800e2fc:	4b4f      	ldr	r3, [pc, #316]	; (800e43c <xTaskIncrementTick+0x154>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3301      	adds	r3, #1
 800e302:	613b      	str	r3, [r7, #16]
 800e304:	4a4d      	ldr	r2, [pc, #308]	; (800e43c <xTaskIncrementTick+0x154>)
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	6013      	str	r3, [r2, #0]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d120      	bne.n	800e352 <xTaskIncrementTick+0x6a>
 800e310:	4b4b      	ldr	r3, [pc, #300]	; (800e440 <xTaskIncrementTick+0x158>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00a      	beq.n	800e330 <xTaskIncrementTick+0x48>
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	603b      	str	r3, [r7, #0]
 800e32c:	bf00      	nop
 800e32e:	e7fe      	b.n	800e32e <xTaskIncrementTick+0x46>
 800e330:	4b43      	ldr	r3, [pc, #268]	; (800e440 <xTaskIncrementTick+0x158>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	60fb      	str	r3, [r7, #12]
 800e336:	4b43      	ldr	r3, [pc, #268]	; (800e444 <xTaskIncrementTick+0x15c>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a41      	ldr	r2, [pc, #260]	; (800e440 <xTaskIncrementTick+0x158>)
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	4a41      	ldr	r2, [pc, #260]	; (800e444 <xTaskIncrementTick+0x15c>)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6013      	str	r3, [r2, #0]
 800e344:	4b40      	ldr	r3, [pc, #256]	; (800e448 <xTaskIncrementTick+0x160>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3301      	adds	r3, #1
 800e34a:	4a3f      	ldr	r2, [pc, #252]	; (800e448 <xTaskIncrementTick+0x160>)
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	f000 fadb 	bl	800e908 <prvResetNextTaskUnblockTime>
 800e352:	4b3e      	ldr	r3, [pc, #248]	; (800e44c <xTaskIncrementTick+0x164>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	693a      	ldr	r2, [r7, #16]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d34d      	bcc.n	800e3f8 <xTaskIncrementTick+0x110>
 800e35c:	4b38      	ldr	r3, [pc, #224]	; (800e440 <xTaskIncrementTick+0x158>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <xTaskIncrementTick+0x82>
 800e366:	2301      	movs	r3, #1
 800e368:	e000      	b.n	800e36c <xTaskIncrementTick+0x84>
 800e36a:	2300      	movs	r3, #0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d004      	beq.n	800e37a <xTaskIncrementTick+0x92>
 800e370:	4b36      	ldr	r3, [pc, #216]	; (800e44c <xTaskIncrementTick+0x164>)
 800e372:	f04f 32ff 	mov.w	r2, #4294967295
 800e376:	601a      	str	r2, [r3, #0]
 800e378:	e03e      	b.n	800e3f8 <xTaskIncrementTick+0x110>
 800e37a:	4b31      	ldr	r3, [pc, #196]	; (800e440 <xTaskIncrementTick+0x158>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	60bb      	str	r3, [r7, #8]
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	607b      	str	r3, [r7, #4]
 800e38a:	693a      	ldr	r2, [r7, #16]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d203      	bcs.n	800e39a <xTaskIncrementTick+0xb2>
 800e392:	4a2e      	ldr	r2, [pc, #184]	; (800e44c <xTaskIncrementTick+0x164>)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	e02e      	b.n	800e3f8 <xTaskIncrementTick+0x110>
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	3304      	adds	r3, #4
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe fd56 	bl	800ce50 <uxListRemove>
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d004      	beq.n	800e3b6 <xTaskIncrementTick+0xce>
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	3318      	adds	r3, #24
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fe fd4d 	bl	800ce50 <uxListRemove>
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	409a      	lsls	r2, r3
 800e3be:	4b24      	ldr	r3, [pc, #144]	; (800e450 <xTaskIncrementTick+0x168>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	4a22      	ldr	r2, [pc, #136]	; (800e450 <xTaskIncrementTick+0x168>)
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4a1f      	ldr	r2, [pc, #124]	; (800e454 <xTaskIncrementTick+0x16c>)
 800e3d6:	441a      	add	r2, r3
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	3304      	adds	r3, #4
 800e3dc:	4619      	mov	r1, r3
 800e3de:	4610      	mov	r0, r2
 800e3e0:	f7fe fcd9 	bl	800cd96 <vListInsertEnd>
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e8:	4b1b      	ldr	r3, [pc, #108]	; (800e458 <xTaskIncrementTick+0x170>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d3b4      	bcc.n	800e35c <xTaskIncrementTick+0x74>
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	617b      	str	r3, [r7, #20]
 800e3f6:	e7b1      	b.n	800e35c <xTaskIncrementTick+0x74>
 800e3f8:	4b17      	ldr	r3, [pc, #92]	; (800e458 <xTaskIncrementTick+0x170>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fe:	4915      	ldr	r1, [pc, #84]	; (800e454 <xTaskIncrementTick+0x16c>)
 800e400:	4613      	mov	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	440b      	add	r3, r1
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d907      	bls.n	800e420 <xTaskIncrementTick+0x138>
 800e410:	2301      	movs	r3, #1
 800e412:	617b      	str	r3, [r7, #20]
 800e414:	e004      	b.n	800e420 <xTaskIncrementTick+0x138>
 800e416:	4b11      	ldr	r3, [pc, #68]	; (800e45c <xTaskIncrementTick+0x174>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3301      	adds	r3, #1
 800e41c:	4a0f      	ldr	r2, [pc, #60]	; (800e45c <xTaskIncrementTick+0x174>)
 800e41e:	6013      	str	r3, [r2, #0]
 800e420:	4b0f      	ldr	r3, [pc, #60]	; (800e460 <xTaskIncrementTick+0x178>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d001      	beq.n	800e42c <xTaskIncrementTick+0x144>
 800e428:	2301      	movs	r3, #1
 800e42a:	617b      	str	r3, [r7, #20]
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	20002b38 	.word	0x20002b38
 800e43c:	20002b14 	.word	0x20002b14
 800e440:	20002ac8 	.word	0x20002ac8
 800e444:	20002acc 	.word	0x20002acc
 800e448:	20002b28 	.word	0x20002b28
 800e44c:	20002b30 	.word	0x20002b30
 800e450:	20002b18 	.word	0x20002b18
 800e454:	20002a14 	.word	0x20002a14
 800e458:	20002a10 	.word	0x20002a10
 800e45c:	20002b20 	.word	0x20002b20
 800e460:	20002b24 	.word	0x20002b24

0800e464 <vTaskSwitchContext>:
 800e464:	b480      	push	{r7}
 800e466:	b087      	sub	sp, #28
 800e468:	af00      	add	r7, sp, #0
 800e46a:	4b29      	ldr	r3, [pc, #164]	; (800e510 <vTaskSwitchContext+0xac>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d003      	beq.n	800e47a <vTaskSwitchContext+0x16>
 800e472:	4b28      	ldr	r3, [pc, #160]	; (800e514 <vTaskSwitchContext+0xb0>)
 800e474:	2201      	movs	r2, #1
 800e476:	601a      	str	r2, [r3, #0]
 800e478:	e044      	b.n	800e504 <vTaskSwitchContext+0xa0>
 800e47a:	4b26      	ldr	r3, [pc, #152]	; (800e514 <vTaskSwitchContext+0xb0>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	4b25      	ldr	r3, [pc, #148]	; (800e518 <vTaskSwitchContext+0xb4>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	60fb      	str	r3, [r7, #12]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	fab3 f383 	clz	r3, r3
 800e48c:	72fb      	strb	r3, [r7, #11]
 800e48e:	7afb      	ldrb	r3, [r7, #11]
 800e490:	f1c3 031f 	rsb	r3, r3, #31
 800e494:	617b      	str	r3, [r7, #20]
 800e496:	4921      	ldr	r1, [pc, #132]	; (800e51c <vTaskSwitchContext+0xb8>)
 800e498:	697a      	ldr	r2, [r7, #20]
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	440b      	add	r3, r1
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d10a      	bne.n	800e4c0 <vTaskSwitchContext+0x5c>
 800e4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	607b      	str	r3, [r7, #4]
 800e4bc:	bf00      	nop
 800e4be:	e7fe      	b.n	800e4be <vTaskSwitchContext+0x5a>
 800e4c0:	697a      	ldr	r2, [r7, #20]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4a14      	ldr	r2, [pc, #80]	; (800e51c <vTaskSwitchContext+0xb8>)
 800e4cc:	4413      	add	r3, r2
 800e4ce:	613b      	str	r3, [r7, #16]
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	685a      	ldr	r2, [r3, #4]
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	605a      	str	r2, [r3, #4]
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	685a      	ldr	r2, [r3, #4]
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	3308      	adds	r3, #8
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d104      	bne.n	800e4f0 <vTaskSwitchContext+0x8c>
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	605a      	str	r2, [r3, #4]
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	4a0a      	ldr	r2, [pc, #40]	; (800e520 <vTaskSwitchContext+0xbc>)
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	4b09      	ldr	r3, [pc, #36]	; (800e520 <vTaskSwitchContext+0xbc>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	335c      	adds	r3, #92	; 0x5c
 800e500:	4a08      	ldr	r2, [pc, #32]	; (800e524 <vTaskSwitchContext+0xc0>)
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	bf00      	nop
 800e506:	371c      	adds	r7, #28
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	20002b38 	.word	0x20002b38
 800e514:	20002b24 	.word	0x20002b24
 800e518:	20002b18 	.word	0x20002b18
 800e51c:	20002a14 	.word	0x20002a14
 800e520:	20002a10 	.word	0x20002a10
 800e524:	2000010c 	.word	0x2000010c

0800e528 <vTaskPlaceOnEventList>:
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10a      	bne.n	800e54e <vTaskPlaceOnEventList+0x26>
 800e538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	bf00      	nop
 800e54c:	e7fe      	b.n	800e54c <vTaskPlaceOnEventList+0x24>
 800e54e:	4b07      	ldr	r3, [pc, #28]	; (800e56c <vTaskPlaceOnEventList+0x44>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3318      	adds	r3, #24
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7fe fc41 	bl	800cdde <vListInsert>
 800e55c:	2101      	movs	r1, #1
 800e55e:	6838      	ldr	r0, [r7, #0]
 800e560:	f000 fbd6 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	20002a10 	.word	0x20002a10

0800e570 <vTaskPlaceOnEventListRestricted>:
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d10a      	bne.n	800e598 <vTaskPlaceOnEventListRestricted+0x28>
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	617b      	str	r3, [r7, #20]
 800e594:	bf00      	nop
 800e596:	e7fe      	b.n	800e596 <vTaskPlaceOnEventListRestricted+0x26>
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3318      	adds	r3, #24
 800e59e:	4619      	mov	r1, r3
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f7fe fbf8 	bl	800cd96 <vListInsertEnd>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <vTaskPlaceOnEventListRestricted+0x42>
 800e5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b0:	60bb      	str	r3, [r7, #8]
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	68b8      	ldr	r0, [r7, #8]
 800e5b6:	f000 fbab 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
 800e5ba:	bf00      	nop
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20002a10 	.word	0x20002a10

0800e5c8 <xTaskRemoveFromEventList>:
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	613b      	str	r3, [r7, #16]
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10a      	bne.n	800e5f4 <xTaskRemoveFromEventList+0x2c>
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	60fb      	str	r3, [r7, #12]
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <xTaskRemoveFromEventList+0x2a>
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	3318      	adds	r3, #24
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe fc29 	bl	800ce50 <uxListRemove>
 800e5fe:	4b1d      	ldr	r3, [pc, #116]	; (800e674 <xTaskRemoveFromEventList+0xac>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d11c      	bne.n	800e640 <xTaskRemoveFromEventList+0x78>
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	3304      	adds	r3, #4
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fc20 	bl	800ce50 <uxListRemove>
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e614:	2201      	movs	r2, #1
 800e616:	409a      	lsls	r2, r3
 800e618:	4b17      	ldr	r3, [pc, #92]	; (800e678 <xTaskRemoveFromEventList+0xb0>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	4a16      	ldr	r2, [pc, #88]	; (800e678 <xTaskRemoveFromEventList+0xb0>)
 800e620:	6013      	str	r3, [r2, #0]
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e626:	4613      	mov	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	4413      	add	r3, r2
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	4a13      	ldr	r2, [pc, #76]	; (800e67c <xTaskRemoveFromEventList+0xb4>)
 800e630:	441a      	add	r2, r3
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	3304      	adds	r3, #4
 800e636:	4619      	mov	r1, r3
 800e638:	4610      	mov	r0, r2
 800e63a:	f7fe fbac 	bl	800cd96 <vListInsertEnd>
 800e63e:	e005      	b.n	800e64c <xTaskRemoveFromEventList+0x84>
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	3318      	adds	r3, #24
 800e644:	4619      	mov	r1, r3
 800e646:	480e      	ldr	r0, [pc, #56]	; (800e680 <xTaskRemoveFromEventList+0xb8>)
 800e648:	f7fe fba5 	bl	800cd96 <vListInsertEnd>
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e650:	4b0c      	ldr	r3, [pc, #48]	; (800e684 <xTaskRemoveFromEventList+0xbc>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e656:	429a      	cmp	r2, r3
 800e658:	d905      	bls.n	800e666 <xTaskRemoveFromEventList+0x9e>
 800e65a:	2301      	movs	r3, #1
 800e65c:	617b      	str	r3, [r7, #20]
 800e65e:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <xTaskRemoveFromEventList+0xc0>)
 800e660:	2201      	movs	r2, #1
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	e001      	b.n	800e66a <xTaskRemoveFromEventList+0xa2>
 800e666:	2300      	movs	r3, #0
 800e668:	617b      	str	r3, [r7, #20]
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	20002b38 	.word	0x20002b38
 800e678:	20002b18 	.word	0x20002b18
 800e67c:	20002a14 	.word	0x20002a14
 800e680:	20002ad0 	.word	0x20002ad0
 800e684:	20002a10 	.word	0x20002a10
 800e688:	20002b24 	.word	0x20002b24

0800e68c <vTaskInternalSetTimeOutState>:
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	4b06      	ldr	r3, [pc, #24]	; (800e6b0 <vTaskInternalSetTimeOutState+0x24>)
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	601a      	str	r2, [r3, #0]
 800e69c:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <vTaskInternalSetTimeOutState+0x28>)
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	605a      	str	r2, [r3, #4]
 800e6a4:	bf00      	nop
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr
 800e6b0:	20002b28 	.word	0x20002b28
 800e6b4:	20002b14 	.word	0x20002b14

0800e6b8 <xTaskCheckForTimeOut>:
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b088      	sub	sp, #32
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10a      	bne.n	800e6de <xTaskCheckForTimeOut+0x26>
 800e6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6cc:	f383 8811 	msr	BASEPRI, r3
 800e6d0:	f3bf 8f6f 	isb	sy
 800e6d4:	f3bf 8f4f 	dsb	sy
 800e6d8:	613b      	str	r3, [r7, #16]
 800e6da:	bf00      	nop
 800e6dc:	e7fe      	b.n	800e6dc <xTaskCheckForTimeOut+0x24>
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d10a      	bne.n	800e6fa <xTaskCheckForTimeOut+0x42>
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	60fb      	str	r3, [r7, #12]
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <xTaskCheckForTimeOut+0x40>
 800e6fa:	f001 f823 	bl	800f744 <vPortEnterCritical>
 800e6fe:	4b1d      	ldr	r3, [pc, #116]	; (800e774 <xTaskCheckForTimeOut+0xbc>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	61bb      	str	r3, [r7, #24]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	1ad3      	subs	r3, r2, r3
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e716:	d102      	bne.n	800e71e <xTaskCheckForTimeOut+0x66>
 800e718:	2300      	movs	r3, #0
 800e71a:	61fb      	str	r3, [r7, #28]
 800e71c:	e023      	b.n	800e766 <xTaskCheckForTimeOut+0xae>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	4b15      	ldr	r3, [pc, #84]	; (800e778 <xTaskCheckForTimeOut+0xc0>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	429a      	cmp	r2, r3
 800e728:	d007      	beq.n	800e73a <xTaskCheckForTimeOut+0x82>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	69ba      	ldr	r2, [r7, #24]
 800e730:	429a      	cmp	r2, r3
 800e732:	d302      	bcc.n	800e73a <xTaskCheckForTimeOut+0x82>
 800e734:	2301      	movs	r3, #1
 800e736:	61fb      	str	r3, [r7, #28]
 800e738:	e015      	b.n	800e766 <xTaskCheckForTimeOut+0xae>
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	429a      	cmp	r2, r3
 800e742:	d20b      	bcs.n	800e75c <xTaskCheckForTimeOut+0xa4>
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	1ad2      	subs	r2, r2, r3
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	601a      	str	r2, [r3, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7ff ff9b 	bl	800e68c <vTaskInternalSetTimeOutState>
 800e756:	2300      	movs	r3, #0
 800e758:	61fb      	str	r3, [r7, #28]
 800e75a:	e004      	b.n	800e766 <xTaskCheckForTimeOut+0xae>
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	2200      	movs	r2, #0
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	2301      	movs	r3, #1
 800e764:	61fb      	str	r3, [r7, #28]
 800e766:	f001 f81d 	bl	800f7a4 <vPortExitCritical>
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	4618      	mov	r0, r3
 800e76e:	3720      	adds	r7, #32
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	20002b14 	.word	0x20002b14
 800e778:	20002b28 	.word	0x20002b28

0800e77c <vTaskMissedYield>:
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
 800e780:	4b03      	ldr	r3, [pc, #12]	; (800e790 <vTaskMissedYield+0x14>)
 800e782:	2201      	movs	r2, #1
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	bf00      	nop
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	20002b24 	.word	0x20002b24

0800e794 <prvIdleTask>:
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	f000 f852 	bl	800e844 <prvCheckTasksWaitingTermination>
 800e7a0:	4b06      	ldr	r3, [pc, #24]	; (800e7bc <prvIdleTask+0x28>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d9f9      	bls.n	800e79c <prvIdleTask+0x8>
 800e7a8:	4b05      	ldr	r3, [pc, #20]	; (800e7c0 <prvIdleTask+0x2c>)
 800e7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ae:	601a      	str	r2, [r3, #0]
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	e7f0      	b.n	800e79c <prvIdleTask+0x8>
 800e7ba:	bf00      	nop
 800e7bc:	20002a14 	.word	0x20002a14
 800e7c0:	e000ed04 	.word	0xe000ed04

0800e7c4 <prvInitialiseTaskLists>:
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	607b      	str	r3, [r7, #4]
 800e7ce:	e00c      	b.n	800e7ea <prvInitialiseTaskLists+0x26>
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4413      	add	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4a12      	ldr	r2, [pc, #72]	; (800e824 <prvInitialiseTaskLists+0x60>)
 800e7dc:	4413      	add	r3, r2
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fe faac 	bl	800cd3c <vListInitialise>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	607b      	str	r3, [r7, #4]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b06      	cmp	r3, #6
 800e7ee:	d9ef      	bls.n	800e7d0 <prvInitialiseTaskLists+0xc>
 800e7f0:	480d      	ldr	r0, [pc, #52]	; (800e828 <prvInitialiseTaskLists+0x64>)
 800e7f2:	f7fe faa3 	bl	800cd3c <vListInitialise>
 800e7f6:	480d      	ldr	r0, [pc, #52]	; (800e82c <prvInitialiseTaskLists+0x68>)
 800e7f8:	f7fe faa0 	bl	800cd3c <vListInitialise>
 800e7fc:	480c      	ldr	r0, [pc, #48]	; (800e830 <prvInitialiseTaskLists+0x6c>)
 800e7fe:	f7fe fa9d 	bl	800cd3c <vListInitialise>
 800e802:	480c      	ldr	r0, [pc, #48]	; (800e834 <prvInitialiseTaskLists+0x70>)
 800e804:	f7fe fa9a 	bl	800cd3c <vListInitialise>
 800e808:	480b      	ldr	r0, [pc, #44]	; (800e838 <prvInitialiseTaskLists+0x74>)
 800e80a:	f7fe fa97 	bl	800cd3c <vListInitialise>
 800e80e:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <prvInitialiseTaskLists+0x78>)
 800e810:	4a05      	ldr	r2, [pc, #20]	; (800e828 <prvInitialiseTaskLists+0x64>)
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	4b0a      	ldr	r3, [pc, #40]	; (800e840 <prvInitialiseTaskLists+0x7c>)
 800e816:	4a05      	ldr	r2, [pc, #20]	; (800e82c <prvInitialiseTaskLists+0x68>)
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	bf00      	nop
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	20002a14 	.word	0x20002a14
 800e828:	20002aa0 	.word	0x20002aa0
 800e82c:	20002ab4 	.word	0x20002ab4
 800e830:	20002ad0 	.word	0x20002ad0
 800e834:	20002ae4 	.word	0x20002ae4
 800e838:	20002afc 	.word	0x20002afc
 800e83c:	20002ac8 	.word	0x20002ac8
 800e840:	20002acc 	.word	0x20002acc

0800e844 <prvCheckTasksWaitingTermination>:
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
 800e84a:	e019      	b.n	800e880 <prvCheckTasksWaitingTermination+0x3c>
 800e84c:	f000 ff7a 	bl	800f744 <vPortEnterCritical>
 800e850:	4b10      	ldr	r3, [pc, #64]	; (800e894 <prvCheckTasksWaitingTermination+0x50>)
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	607b      	str	r3, [r7, #4]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	3304      	adds	r3, #4
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fe faf7 	bl	800ce50 <uxListRemove>
 800e862:	4b0d      	ldr	r3, [pc, #52]	; (800e898 <prvCheckTasksWaitingTermination+0x54>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	3b01      	subs	r3, #1
 800e868:	4a0b      	ldr	r2, [pc, #44]	; (800e898 <prvCheckTasksWaitingTermination+0x54>)
 800e86a:	6013      	str	r3, [r2, #0]
 800e86c:	4b0b      	ldr	r3, [pc, #44]	; (800e89c <prvCheckTasksWaitingTermination+0x58>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	3b01      	subs	r3, #1
 800e872:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <prvCheckTasksWaitingTermination+0x58>)
 800e874:	6013      	str	r3, [r2, #0]
 800e876:	f000 ff95 	bl	800f7a4 <vPortExitCritical>
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f810 	bl	800e8a0 <prvDeleteTCB>
 800e880:	4b06      	ldr	r3, [pc, #24]	; (800e89c <prvCheckTasksWaitingTermination+0x58>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1e1      	bne.n	800e84c <prvCheckTasksWaitingTermination+0x8>
 800e888:	bf00      	nop
 800e88a:	bf00      	nop
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	20002ae4 	.word	0x20002ae4
 800e898:	20002b10 	.word	0x20002b10
 800e89c:	20002af8 	.word	0x20002af8

0800e8a0 <prvDeleteTCB>:
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	335c      	adds	r3, #92	; 0x5c
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f001 fbd5 	bl	801005c <_reclaim_reent>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d108      	bne.n	800e8ce <prvDeleteTCB+0x2e>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f001 f925 	bl	800fb10 <vPortFree>
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f001 f922 	bl	800fb10 <vPortFree>
 800e8cc:	e018      	b.n	800e900 <prvDeleteTCB+0x60>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d103      	bne.n	800e8e0 <prvDeleteTCB+0x40>
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f001 f919 	bl	800fb10 <vPortFree>
 800e8de:	e00f      	b.n	800e900 <prvDeleteTCB+0x60>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d00a      	beq.n	800e900 <prvDeleteTCB+0x60>
 800e8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ee:	f383 8811 	msr	BASEPRI, r3
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	60fb      	str	r3, [r7, #12]
 800e8fc:	bf00      	nop
 800e8fe:	e7fe      	b.n	800e8fe <prvDeleteTCB+0x5e>
 800e900:	bf00      	nop
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <prvResetNextTaskUnblockTime>:
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	4b0f      	ldr	r3, [pc, #60]	; (800e94c <prvResetNextTaskUnblockTime+0x44>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d101      	bne.n	800e91c <prvResetNextTaskUnblockTime+0x14>
 800e918:	2301      	movs	r3, #1
 800e91a:	e000      	b.n	800e91e <prvResetNextTaskUnblockTime+0x16>
 800e91c:	2300      	movs	r3, #0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d004      	beq.n	800e92c <prvResetNextTaskUnblockTime+0x24>
 800e922:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <prvResetNextTaskUnblockTime+0x48>)
 800e924:	f04f 32ff 	mov.w	r2, #4294967295
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	e008      	b.n	800e93e <prvResetNextTaskUnblockTime+0x36>
 800e92c:	4b07      	ldr	r3, [pc, #28]	; (800e94c <prvResetNextTaskUnblockTime+0x44>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	607b      	str	r3, [r7, #4]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	4a05      	ldr	r2, [pc, #20]	; (800e950 <prvResetNextTaskUnblockTime+0x48>)
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	bf00      	nop
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	20002ac8 	.word	0x20002ac8
 800e950:	20002b30 	.word	0x20002b30

0800e954 <xTaskGetSchedulerState>:
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 800e95a:	4b0b      	ldr	r3, [pc, #44]	; (800e988 <xTaskGetSchedulerState+0x34>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d102      	bne.n	800e968 <xTaskGetSchedulerState+0x14>
 800e962:	2301      	movs	r3, #1
 800e964:	607b      	str	r3, [r7, #4]
 800e966:	e008      	b.n	800e97a <xTaskGetSchedulerState+0x26>
 800e968:	4b08      	ldr	r3, [pc, #32]	; (800e98c <xTaskGetSchedulerState+0x38>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d102      	bne.n	800e976 <xTaskGetSchedulerState+0x22>
 800e970:	2302      	movs	r3, #2
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	e001      	b.n	800e97a <xTaskGetSchedulerState+0x26>
 800e976:	2300      	movs	r3, #0
 800e978:	607b      	str	r3, [r7, #4]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4618      	mov	r0, r3
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	20002b1c 	.word	0x20002b1c
 800e98c:	20002b38 	.word	0x20002b38

0800e990 <xTaskPriorityInherit>:
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	60bb      	str	r3, [r7, #8]
 800e99c:	2300      	movs	r3, #0
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d06e      	beq.n	800ea84 <xTaskPriorityInherit+0xf4>
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9aa:	4b39      	ldr	r3, [pc, #228]	; (800ea90 <xTaskPriorityInherit+0x100>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d25e      	bcs.n	800ea72 <xTaskPriorityInherit+0xe2>
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	db06      	blt.n	800e9ca <xTaskPriorityInherit+0x3a>
 800e9bc:	4b34      	ldr	r3, [pc, #208]	; (800ea90 <xTaskPriorityInherit+0x100>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c2:	f1c3 0207 	rsb	r2, r3, #7
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	619a      	str	r2, [r3, #24]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	6959      	ldr	r1, [r3, #20]
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4a2e      	ldr	r2, [pc, #184]	; (800ea94 <xTaskPriorityInherit+0x104>)
 800e9dc:	4413      	add	r3, r2
 800e9de:	4299      	cmp	r1, r3
 800e9e0:	d101      	bne.n	800e9e6 <xTaskPriorityInherit+0x56>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e000      	b.n	800e9e8 <xTaskPriorityInherit+0x58>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d03a      	beq.n	800ea62 <xTaskPriorityInherit+0xd2>
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	3304      	adds	r3, #4
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe fa2d 	bl	800ce50 <uxListRemove>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d115      	bne.n	800ea28 <xTaskPriorityInherit+0x98>
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea00:	4924      	ldr	r1, [pc, #144]	; (800ea94 <xTaskPriorityInherit+0x104>)
 800ea02:	4613      	mov	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	440b      	add	r3, r1
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10a      	bne.n	800ea28 <xTaskPriorityInherit+0x98>
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea16:	2201      	movs	r2, #1
 800ea18:	fa02 f303 	lsl.w	r3, r2, r3
 800ea1c:	43da      	mvns	r2, r3
 800ea1e:	4b1e      	ldr	r3, [pc, #120]	; (800ea98 <xTaskPriorityInherit+0x108>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4013      	ands	r3, r2
 800ea24:	4a1c      	ldr	r2, [pc, #112]	; (800ea98 <xTaskPriorityInherit+0x108>)
 800ea26:	6013      	str	r3, [r2, #0]
 800ea28:	4b19      	ldr	r3, [pc, #100]	; (800ea90 <xTaskPriorityInherit+0x100>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	62da      	str	r2, [r3, #44]	; 0x2c
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea36:	2201      	movs	r2, #1
 800ea38:	409a      	lsls	r2, r3
 800ea3a:	4b17      	ldr	r3, [pc, #92]	; (800ea98 <xTaskPriorityInherit+0x108>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	4a15      	ldr	r2, [pc, #84]	; (800ea98 <xTaskPriorityInherit+0x108>)
 800ea42:	6013      	str	r3, [r2, #0]
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea48:	4613      	mov	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4413      	add	r3, r2
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	4a10      	ldr	r2, [pc, #64]	; (800ea94 <xTaskPriorityInherit+0x104>)
 800ea52:	441a      	add	r2, r3
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	3304      	adds	r3, #4
 800ea58:	4619      	mov	r1, r3
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	f7fe f99b 	bl	800cd96 <vListInsertEnd>
 800ea60:	e004      	b.n	800ea6c <xTaskPriorityInherit+0xdc>
 800ea62:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <xTaskPriorityInherit+0x100>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	60fb      	str	r3, [r7, #12]
 800ea70:	e008      	b.n	800ea84 <xTaskPriorityInherit+0xf4>
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea76:	4b06      	ldr	r3, [pc, #24]	; (800ea90 <xTaskPriorityInherit+0x100>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d201      	bcs.n	800ea84 <xTaskPriorityInherit+0xf4>
 800ea80:	2301      	movs	r3, #1
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20002a10 	.word	0x20002a10
 800ea94:	20002a14 	.word	0x20002a14
 800ea98:	20002b18 	.word	0x20002b18

0800ea9c <xTaskPriorityDisinherit>:
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	613b      	str	r3, [r7, #16]
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	617b      	str	r3, [r7, #20]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d06e      	beq.n	800eb90 <xTaskPriorityDisinherit+0xf4>
 800eab2:	4b3a      	ldr	r3, [pc, #232]	; (800eb9c <xTaskPriorityDisinherit+0x100>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d00a      	beq.n	800ead2 <xTaskPriorityDisinherit+0x36>
 800eabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac0:	f383 8811 	msr	BASEPRI, r3
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	f3bf 8f4f 	dsb	sy
 800eacc:	60fb      	str	r3, [r7, #12]
 800eace:	bf00      	nop
 800ead0:	e7fe      	b.n	800ead0 <xTaskPriorityDisinherit+0x34>
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10a      	bne.n	800eaf0 <xTaskPriorityDisinherit+0x54>
 800eada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	60bb      	str	r3, [r7, #8]
 800eaec:	bf00      	nop
 800eaee:	e7fe      	b.n	800eaee <xTaskPriorityDisinherit+0x52>
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaf4:	1e5a      	subs	r2, r3, #1
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	659a      	str	r2, [r3, #88]	; 0x58
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d044      	beq.n	800eb90 <xTaskPriorityDisinherit+0xf4>
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d140      	bne.n	800eb90 <xTaskPriorityDisinherit+0xf4>
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	3304      	adds	r3, #4
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe f99c 	bl	800ce50 <uxListRemove>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d115      	bne.n	800eb4a <xTaskPriorityDisinherit+0xae>
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb22:	491f      	ldr	r1, [pc, #124]	; (800eba0 <xTaskPriorityDisinherit+0x104>)
 800eb24:	4613      	mov	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4413      	add	r3, r2
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	440b      	add	r3, r1
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10a      	bne.n	800eb4a <xTaskPriorityDisinherit+0xae>
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb38:	2201      	movs	r2, #1
 800eb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb3e:	43da      	mvns	r2, r3
 800eb40:	4b18      	ldr	r3, [pc, #96]	; (800eba4 <xTaskPriorityDisinherit+0x108>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4013      	ands	r3, r2
 800eb46:	4a17      	ldr	r2, [pc, #92]	; (800eba4 <xTaskPriorityDisinherit+0x108>)
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	62da      	str	r2, [r3, #44]	; 0x2c
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb56:	f1c3 0207 	rsb	r2, r3, #7
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	619a      	str	r2, [r3, #24]
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb62:	2201      	movs	r2, #1
 800eb64:	409a      	lsls	r2, r3
 800eb66:	4b0f      	ldr	r3, [pc, #60]	; (800eba4 <xTaskPriorityDisinherit+0x108>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	4a0d      	ldr	r2, [pc, #52]	; (800eba4 <xTaskPriorityDisinherit+0x108>)
 800eb6e:	6013      	str	r3, [r2, #0]
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb74:	4613      	mov	r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4a08      	ldr	r2, [pc, #32]	; (800eba0 <xTaskPriorityDisinherit+0x104>)
 800eb7e:	441a      	add	r2, r3
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	3304      	adds	r3, #4
 800eb84:	4619      	mov	r1, r3
 800eb86:	4610      	mov	r0, r2
 800eb88:	f7fe f905 	bl	800cd96 <vListInsertEnd>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	617b      	str	r3, [r7, #20]
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20002a10 	.word	0x20002a10
 800eba0:	20002a14 	.word	0x20002a14
 800eba4:	20002b18 	.word	0x20002b18

0800eba8 <vTaskPriorityDisinheritAfterTimeout>:
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b088      	sub	sp, #32
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	61bb      	str	r3, [r7, #24]
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	617b      	str	r3, [r7, #20]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 8088 	beq.w	800ecd2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10a      	bne.n	800ebe0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	bf00      	nop
 800ebde:	e7fe      	b.n	800ebde <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d902      	bls.n	800ebf0 <vTaskPriorityDisinheritAfterTimeout+0x48>
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	61fb      	str	r3, [r7, #28]
 800ebee:	e002      	b.n	800ebf6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebf4:	61fb      	str	r3, [r7, #28]
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	69fa      	ldr	r2, [r7, #28]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d068      	beq.n	800ecd2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec04:	697a      	ldr	r2, [r7, #20]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d163      	bne.n	800ecd2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800ec0a:	4b34      	ldr	r3, [pc, #208]	; (800ecdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	69ba      	ldr	r2, [r7, #24]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d10a      	bne.n	800ec2a <vTaskPriorityDisinheritAfterTimeout+0x82>
 800ec14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	60bb      	str	r3, [r7, #8]
 800ec26:	bf00      	nop
 800ec28:	e7fe      	b.n	800ec28 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2e:	613b      	str	r3, [r7, #16]
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	69fa      	ldr	r2, [r7, #28]
 800ec34:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	699b      	ldr	r3, [r3, #24]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	db04      	blt.n	800ec48 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	f1c3 0207 	rsb	r2, r3, #7
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	619a      	str	r2, [r3, #24]
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	6959      	ldr	r1, [r3, #20]
 800ec4c:	693a      	ldr	r2, [r7, #16]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	4413      	add	r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	4a22      	ldr	r2, [pc, #136]	; (800ece0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ec58:	4413      	add	r3, r2
 800ec5a:	4299      	cmp	r1, r3
 800ec5c:	d101      	bne.n	800ec62 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e000      	b.n	800ec64 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800ec62:	2300      	movs	r3, #0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d034      	beq.n	800ecd2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	3304      	adds	r3, #4
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fe f8ef 	bl	800ce50 <uxListRemove>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d115      	bne.n	800eca4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7c:	4918      	ldr	r1, [pc, #96]	; (800ece0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ec7e:	4613      	mov	r3, r2
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	4413      	add	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	440b      	add	r3, r1
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10a      	bne.n	800eca4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec92:	2201      	movs	r2, #1
 800ec94:	fa02 f303 	lsl.w	r3, r2, r3
 800ec98:	43da      	mvns	r2, r3
 800ec9a:	4b12      	ldr	r3, [pc, #72]	; (800ece4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4013      	ands	r3, r2
 800eca0:	4a10      	ldr	r2, [pc, #64]	; (800ece4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800eca2:	6013      	str	r3, [r2, #0]
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca8:	2201      	movs	r2, #1
 800ecaa:	409a      	lsls	r2, r3
 800ecac:	4b0d      	ldr	r3, [pc, #52]	; (800ece4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	4a0c      	ldr	r2, [pc, #48]	; (800ece4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ecb4:	6013      	str	r3, [r2, #0]
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecba:	4613      	mov	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4a07      	ldr	r2, [pc, #28]	; (800ece0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ecc4:	441a      	add	r2, r3
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	3304      	adds	r3, #4
 800ecca:	4619      	mov	r1, r3
 800eccc:	4610      	mov	r0, r2
 800ecce:	f7fe f862 	bl	800cd96 <vListInsertEnd>
 800ecd2:	bf00      	nop
 800ecd4:	3720      	adds	r7, #32
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	20002a10 	.word	0x20002a10
 800ece0:	20002a14 	.word	0x20002a14
 800ece4:	20002b18 	.word	0x20002b18

0800ece8 <pvTaskIncrementMutexHeldCount>:
 800ece8:	b480      	push	{r7}
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	4b07      	ldr	r3, [pc, #28]	; (800ed0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d004      	beq.n	800ecfe <pvTaskIncrementMutexHeldCount+0x16>
 800ecf4:	4b05      	ldr	r3, [pc, #20]	; (800ed0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ecfa:	3201      	adds	r2, #1
 800ecfc:	659a      	str	r2, [r3, #88]	; 0x58
 800ecfe:	4b03      	ldr	r3, [pc, #12]	; (800ed0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4618      	mov	r0, r3
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	20002a10 	.word	0x20002a10

0800ed10 <prvAddCurrentTaskToDelayedList>:
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
 800ed1a:	4b29      	ldr	r3, [pc, #164]	; (800edc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	60fb      	str	r3, [r7, #12]
 800ed20:	4b28      	ldr	r3, [pc, #160]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3304      	adds	r3, #4
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe f892 	bl	800ce50 <uxListRemove>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10b      	bne.n	800ed4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ed32:	4b24      	ldr	r3, [pc, #144]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed38:	2201      	movs	r2, #1
 800ed3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed3e:	43da      	mvns	r2, r3
 800ed40:	4b21      	ldr	r3, [pc, #132]	; (800edc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4013      	ands	r3, r2
 800ed46:	4a20      	ldr	r2, [pc, #128]	; (800edc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ed48:	6013      	str	r3, [r2, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed50:	d10a      	bne.n	800ed68 <prvAddCurrentTaskToDelayedList+0x58>
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d007      	beq.n	800ed68 <prvAddCurrentTaskToDelayedList+0x58>
 800ed58:	4b1a      	ldr	r3, [pc, #104]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4619      	mov	r1, r3
 800ed60:	481a      	ldr	r0, [pc, #104]	; (800edcc <prvAddCurrentTaskToDelayedList+0xbc>)
 800ed62:	f7fe f818 	bl	800cd96 <vListInsertEnd>
 800ed66:	e026      	b.n	800edb6 <prvAddCurrentTaskToDelayedList+0xa6>
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	60bb      	str	r3, [r7, #8]
 800ed70:	4b14      	ldr	r3, [pc, #80]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	605a      	str	r2, [r3, #4]
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d209      	bcs.n	800ed94 <prvAddCurrentTaskToDelayedList+0x84>
 800ed80:	4b13      	ldr	r3, [pc, #76]	; (800edd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	4b0f      	ldr	r3, [pc, #60]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3304      	adds	r3, #4
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	f7fe f826 	bl	800cdde <vListInsert>
 800ed92:	e010      	b.n	800edb6 <prvAddCurrentTaskToDelayedList+0xa6>
 800ed94:	4b0f      	ldr	r3, [pc, #60]	; (800edd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	4b0a      	ldr	r3, [pc, #40]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3304      	adds	r3, #4
 800ed9e:	4619      	mov	r1, r3
 800eda0:	4610      	mov	r0, r2
 800eda2:	f7fe f81c 	bl	800cdde <vListInsert>
 800eda6:	4b0c      	ldr	r3, [pc, #48]	; (800edd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	429a      	cmp	r2, r3
 800edae:	d202      	bcs.n	800edb6 <prvAddCurrentTaskToDelayedList+0xa6>
 800edb0:	4a09      	ldr	r2, [pc, #36]	; (800edd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	6013      	str	r3, [r2, #0]
 800edb6:	bf00      	nop
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	20002b14 	.word	0x20002b14
 800edc4:	20002a10 	.word	0x20002a10
 800edc8:	20002b18 	.word	0x20002b18
 800edcc:	20002afc 	.word	0x20002afc
 800edd0:	20002acc 	.word	0x20002acc
 800edd4:	20002ac8 	.word	0x20002ac8
 800edd8:	20002b30 	.word	0x20002b30

0800eddc <xTimerCreateTimerTask>:
 800eddc:	b580      	push	{r7, lr}
 800edde:	b08a      	sub	sp, #40	; 0x28
 800ede0:	af04      	add	r7, sp, #16
 800ede2:	2300      	movs	r3, #0
 800ede4:	617b      	str	r3, [r7, #20]
 800ede6:	f000 fb41 	bl	800f46c <prvCheckForValidListAndQueue>
 800edea:	4b1c      	ldr	r3, [pc, #112]	; (800ee5c <xTimerCreateTimerTask+0x80>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d021      	beq.n	800ee36 <xTimerCreateTimerTask+0x5a>
 800edf2:	2300      	movs	r3, #0
 800edf4:	60fb      	str	r3, [r7, #12]
 800edf6:	2300      	movs	r3, #0
 800edf8:	60bb      	str	r3, [r7, #8]
 800edfa:	1d3a      	adds	r2, r7, #4
 800edfc:	f107 0108 	add.w	r1, r7, #8
 800ee00:	f107 030c 	add.w	r3, r7, #12
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f4 fbe3 	bl	80035d0 <vApplicationGetTimerTaskMemory>
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	9202      	str	r2, [sp, #8]
 800ee12:	9301      	str	r3, [sp, #4]
 800ee14:	2302      	movs	r3, #2
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	2300      	movs	r3, #0
 800ee1a:	460a      	mov	r2, r1
 800ee1c:	4910      	ldr	r1, [pc, #64]	; (800ee60 <xTimerCreateTimerTask+0x84>)
 800ee1e:	4811      	ldr	r0, [pc, #68]	; (800ee64 <xTimerCreateTimerTask+0x88>)
 800ee20:	f7fe fed2 	bl	800dbc8 <xTaskCreateStatic>
 800ee24:	4603      	mov	r3, r0
 800ee26:	4a10      	ldr	r2, [pc, #64]	; (800ee68 <xTimerCreateTimerTask+0x8c>)
 800ee28:	6013      	str	r3, [r2, #0]
 800ee2a:	4b0f      	ldr	r3, [pc, #60]	; (800ee68 <xTimerCreateTimerTask+0x8c>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <xTimerCreateTimerTask+0x5a>
 800ee32:	2301      	movs	r3, #1
 800ee34:	617b      	str	r3, [r7, #20]
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10a      	bne.n	800ee52 <xTimerCreateTimerTask+0x76>
 800ee3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	613b      	str	r3, [r7, #16]
 800ee4e:	bf00      	nop
 800ee50:	e7fe      	b.n	800ee50 <xTimerCreateTimerTask+0x74>
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20002b6c 	.word	0x20002b6c
 800ee60:	080107ac 	.word	0x080107ac
 800ee64:	0800f0a9 	.word	0x0800f0a9
 800ee68:	20002b70 	.word	0x20002b70

0800ee6c <xTimerCreate>:
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b088      	sub	sp, #32
 800ee70:	af02      	add	r7, sp, #8
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
 800ee78:	603b      	str	r3, [r7, #0]
 800ee7a:	202c      	movs	r0, #44	; 0x2c
 800ee7c:	f000 fd84 	bl	800f988 <pvPortMalloc>
 800ee80:	6178      	str	r0, [r7, #20]
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00d      	beq.n	800eea4 <xTimerCreate+0x38>
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	9301      	str	r3, [sp, #4]
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	68b9      	ldr	r1, [r7, #8]
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 f846 	bl	800ef28 <prvInitialiseNewTimer>
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <xTimerCreateStatic>:
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b08a      	sub	sp, #40	; 0x28
 800eeb2:	af02      	add	r7, sp, #8
 800eeb4:	60f8      	str	r0, [r7, #12]
 800eeb6:	60b9      	str	r1, [r7, #8]
 800eeb8:	607a      	str	r2, [r7, #4]
 800eeba:	603b      	str	r3, [r7, #0]
 800eebc:	232c      	movs	r3, #44	; 0x2c
 800eebe:	613b      	str	r3, [r7, #16]
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	2b2c      	cmp	r3, #44	; 0x2c
 800eec4:	d00a      	beq.n	800eedc <xTimerCreateStatic+0x2e>
 800eec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeca:	f383 8811 	msr	BASEPRI, r3
 800eece:	f3bf 8f6f 	isb	sy
 800eed2:	f3bf 8f4f 	dsb	sy
 800eed6:	61bb      	str	r3, [r7, #24]
 800eed8:	bf00      	nop
 800eeda:	e7fe      	b.n	800eeda <xTimerCreateStatic+0x2c>
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10a      	bne.n	800eef8 <xTimerCreateStatic+0x4a>
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	bf00      	nop
 800eef6:	e7fe      	b.n	800eef6 <xTimerCreateStatic+0x48>
 800eef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefa:	61fb      	str	r3, [r7, #28]
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00d      	beq.n	800ef1e <xTimerCreateStatic+0x70>
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	9301      	str	r3, [sp, #4]
 800ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	68b9      	ldr	r1, [r7, #8]
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f000 f809 	bl	800ef28 <prvInitialiseNewTimer>
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	4618      	mov	r0, r3
 800ef22:	3720      	adds	r7, #32
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <prvInitialiseNewTimer>:
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10a      	bne.n	800ef52 <prvInitialiseNewTimer+0x2a>
 800ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	617b      	str	r3, [r7, #20]
 800ef4e:	bf00      	nop
 800ef50:	e7fe      	b.n	800ef50 <prvInitialiseNewTimer+0x28>
 800ef52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d015      	beq.n	800ef84 <prvInitialiseNewTimer+0x5c>
 800ef58:	f000 fa88 	bl	800f46c <prvCheckForValidListAndQueue>
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	601a      	str	r2, [r3, #0]
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	68ba      	ldr	r2, [r7, #8]
 800ef66:	619a      	str	r2, [r3, #24]
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	61da      	str	r2, [r3, #28]
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	683a      	ldr	r2, [r7, #0]
 800ef72:	621a      	str	r2, [r3, #32]
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	6a3a      	ldr	r2, [r7, #32]
 800ef78:	625a      	str	r2, [r3, #36]	; 0x24
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fd fefc 	bl	800cd7c <vListInitialiseItem>
 800ef84:	bf00      	nop
 800ef86:	3718      	adds	r7, #24
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <xTimerGenericCommand>:
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b08a      	sub	sp, #40	; 0x28
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
 800ef98:	603b      	str	r3, [r7, #0]
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10a      	bne.n	800efba <xTimerGenericCommand+0x2e>
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	623b      	str	r3, [r7, #32]
 800efb6:	bf00      	nop
 800efb8:	e7fe      	b.n	800efb8 <xTimerGenericCommand+0x2c>
 800efba:	4b1a      	ldr	r3, [pc, #104]	; (800f024 <xTimerGenericCommand+0x98>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d02a      	beq.n	800f018 <xTimerGenericCommand+0x8c>
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	617b      	str	r3, [r7, #20]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	61bb      	str	r3, [r7, #24]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	61fb      	str	r3, [r7, #28]
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	2b05      	cmp	r3, #5
 800efd2:	dc18      	bgt.n	800f006 <xTimerGenericCommand+0x7a>
 800efd4:	f7ff fcbe 	bl	800e954 <xTaskGetSchedulerState>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b02      	cmp	r3, #2
 800efdc:	d109      	bne.n	800eff2 <xTimerGenericCommand+0x66>
 800efde:	4b11      	ldr	r3, [pc, #68]	; (800f024 <xTimerGenericCommand+0x98>)
 800efe0:	6818      	ldr	r0, [r3, #0]
 800efe2:	f107 0114 	add.w	r1, r7, #20
 800efe6:	2300      	movs	r3, #0
 800efe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efea:	f7fe f8e5 	bl	800d1b8 <xQueueGenericSend>
 800efee:	6278      	str	r0, [r7, #36]	; 0x24
 800eff0:	e012      	b.n	800f018 <xTimerGenericCommand+0x8c>
 800eff2:	4b0c      	ldr	r3, [pc, #48]	; (800f024 <xTimerGenericCommand+0x98>)
 800eff4:	6818      	ldr	r0, [r3, #0]
 800eff6:	f107 0114 	add.w	r1, r7, #20
 800effa:	2300      	movs	r3, #0
 800effc:	2200      	movs	r2, #0
 800effe:	f7fe f8db 	bl	800d1b8 <xQueueGenericSend>
 800f002:	6278      	str	r0, [r7, #36]	; 0x24
 800f004:	e008      	b.n	800f018 <xTimerGenericCommand+0x8c>
 800f006:	4b07      	ldr	r3, [pc, #28]	; (800f024 <xTimerGenericCommand+0x98>)
 800f008:	6818      	ldr	r0, [r3, #0]
 800f00a:	f107 0114 	add.w	r1, r7, #20
 800f00e:	2300      	movs	r3, #0
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	f7fe f9cf 	bl	800d3b4 <xQueueGenericSendFromISR>
 800f016:	6278      	str	r0, [r7, #36]	; 0x24
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	4618      	mov	r0, r3
 800f01c:	3728      	adds	r7, #40	; 0x28
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20002b6c 	.word	0x20002b6c

0800f028 <prvProcessExpiredTimer>:
 800f028:	b580      	push	{r7, lr}
 800f02a:	b088      	sub	sp, #32
 800f02c:	af02      	add	r7, sp, #8
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
 800f032:	4b1c      	ldr	r3, [pc, #112]	; (800f0a4 <prvProcessExpiredTimer+0x7c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	617b      	str	r3, [r7, #20]
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	3304      	adds	r3, #4
 800f040:	4618      	mov	r0, r3
 800f042:	f7fd ff05 	bl	800ce50 <uxListRemove>
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	69db      	ldr	r3, [r3, #28]
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d122      	bne.n	800f094 <prvProcessExpiredTimer+0x6c>
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	699a      	ldr	r2, [r3, #24]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	18d1      	adds	r1, r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	6978      	ldr	r0, [r7, #20]
 800f05c:	f000 f8c8 	bl	800f1f0 <prvInsertTimerInActiveList>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d016      	beq.n	800f094 <prvProcessExpiredTimer+0x6c>
 800f066:	2300      	movs	r3, #0
 800f068:	9300      	str	r3, [sp, #0]
 800f06a:	2300      	movs	r3, #0
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	2100      	movs	r1, #0
 800f070:	6978      	ldr	r0, [r7, #20]
 800f072:	f7ff ff8b 	bl	800ef8c <xTimerGenericCommand>
 800f076:	6138      	str	r0, [r7, #16]
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10a      	bne.n	800f094 <prvProcessExpiredTimer+0x6c>
 800f07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	60fb      	str	r3, [r7, #12]
 800f090:	bf00      	nop
 800f092:	e7fe      	b.n	800f092 <prvProcessExpiredTimer+0x6a>
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f098:	6978      	ldr	r0, [r7, #20]
 800f09a:	4798      	blx	r3
 800f09c:	bf00      	nop
 800f09e:	3718      	adds	r7, #24
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	20002b64 	.word	0x20002b64

0800f0a8 <prvTimerTask>:
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	f107 0308 	add.w	r3, r7, #8
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f000 f857 	bl	800f168 <prvGetNextExpireTime>
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f803 	bl	800f0cc <prvProcessTimerOrBlockTask>
 800f0c6:	f000 f8d5 	bl	800f274 <prvProcessReceivedCommands>
 800f0ca:	e7f1      	b.n	800f0b0 <prvTimerTask+0x8>

0800f0cc <prvProcessTimerOrBlockTask>:
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
 800f0d6:	f7ff f83b 	bl	800e150 <vTaskSuspendAll>
 800f0da:	f107 0308 	add.w	r3, r7, #8
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f000 f866 	bl	800f1b0 <prvSampleTimeNow>
 800f0e4:	60f8      	str	r0, [r7, #12]
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d130      	bne.n	800f14e <prvProcessTimerOrBlockTask+0x82>
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10a      	bne.n	800f108 <prvProcessTimerOrBlockTask+0x3c>
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d806      	bhi.n	800f108 <prvProcessTimerOrBlockTask+0x3c>
 800f0fa:	f7ff f837 	bl	800e16c <xTaskResumeAll>
 800f0fe:	68f9      	ldr	r1, [r7, #12]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7ff ff91 	bl	800f028 <prvProcessExpiredTimer>
 800f106:	e024      	b.n	800f152 <prvProcessTimerOrBlockTask+0x86>
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d008      	beq.n	800f120 <prvProcessTimerOrBlockTask+0x54>
 800f10e:	4b13      	ldr	r3, [pc, #76]	; (800f15c <prvProcessTimerOrBlockTask+0x90>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	bf0c      	ite	eq
 800f118:	2301      	moveq	r3, #1
 800f11a:	2300      	movne	r3, #0
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	603b      	str	r3, [r7, #0]
 800f120:	4b0f      	ldr	r3, [pc, #60]	; (800f160 <prvProcessTimerOrBlockTask+0x94>)
 800f122:	6818      	ldr	r0, [r3, #0]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	1ad3      	subs	r3, r2, r3
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	4619      	mov	r1, r3
 800f12e:	f7fe fd17 	bl	800db60 <vQueueWaitForMessageRestricted>
 800f132:	f7ff f81b 	bl	800e16c <xTaskResumeAll>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10a      	bne.n	800f152 <prvProcessTimerOrBlockTask+0x86>
 800f13c:	4b09      	ldr	r3, [pc, #36]	; (800f164 <prvProcessTimerOrBlockTask+0x98>)
 800f13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f142:	601a      	str	r2, [r3, #0]
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	e001      	b.n	800f152 <prvProcessTimerOrBlockTask+0x86>
 800f14e:	f7ff f80d 	bl	800e16c <xTaskResumeAll>
 800f152:	bf00      	nop
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	20002b68 	.word	0x20002b68
 800f160:	20002b6c 	.word	0x20002b6c
 800f164:	e000ed04 	.word	0xe000ed04

0800f168 <prvGetNextExpireTime>:
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	4b0e      	ldr	r3, [pc, #56]	; (800f1ac <prvGetNextExpireTime+0x44>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	bf0c      	ite	eq
 800f17a:	2301      	moveq	r3, #1
 800f17c:	2300      	movne	r3, #0
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	461a      	mov	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d105      	bne.n	800f19a <prvGetNextExpireTime+0x32>
 800f18e:	4b07      	ldr	r3, [pc, #28]	; (800f1ac <prvGetNextExpireTime+0x44>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	60fb      	str	r3, [r7, #12]
 800f198:	e001      	b.n	800f19e <prvGetNextExpireTime+0x36>
 800f19a:	2300      	movs	r3, #0
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3714      	adds	r7, #20
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr
 800f1ac:	20002b64 	.word	0x20002b64

0800f1b0 <prvSampleTimeNow>:
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	f7ff f874 	bl	800e2a4 <xTaskGetTickCount>
 800f1bc:	60f8      	str	r0, [r7, #12]
 800f1be:	4b0b      	ldr	r3, [pc, #44]	; (800f1ec <prvSampleTimeNow+0x3c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d205      	bcs.n	800f1d4 <prvSampleTimeNow+0x24>
 800f1c8:	f000 f8ee 	bl	800f3a8 <prvSwitchTimerLists>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	601a      	str	r2, [r3, #0]
 800f1d2:	e002      	b.n	800f1da <prvSampleTimeNow+0x2a>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	4a04      	ldr	r2, [pc, #16]	; (800f1ec <prvSampleTimeNow+0x3c>)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6013      	str	r3, [r2, #0]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20002b74 	.word	0x20002b74

0800f1f0 <prvInsertTimerInActiveList>:
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
 800f1fc:	603b      	str	r3, [r7, #0]
 800f1fe:	2300      	movs	r3, #0
 800f200:	617b      	str	r3, [r7, #20]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	68ba      	ldr	r2, [r7, #8]
 800f206:	605a      	str	r2, [r3, #4]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	611a      	str	r2, [r3, #16]
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	429a      	cmp	r2, r3
 800f214:	d812      	bhi.n	800f23c <prvInsertTimerInActiveList+0x4c>
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	1ad2      	subs	r2, r2, r3
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	429a      	cmp	r2, r3
 800f222:	d302      	bcc.n	800f22a <prvInsertTimerInActiveList+0x3a>
 800f224:	2301      	movs	r3, #1
 800f226:	617b      	str	r3, [r7, #20]
 800f228:	e01b      	b.n	800f262 <prvInsertTimerInActiveList+0x72>
 800f22a:	4b10      	ldr	r3, [pc, #64]	; (800f26c <prvInsertTimerInActiveList+0x7c>)
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	3304      	adds	r3, #4
 800f232:	4619      	mov	r1, r3
 800f234:	4610      	mov	r0, r2
 800f236:	f7fd fdd2 	bl	800cdde <vListInsert>
 800f23a:	e012      	b.n	800f262 <prvInsertTimerInActiveList+0x72>
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	d206      	bcs.n	800f252 <prvInsertTimerInActiveList+0x62>
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d302      	bcc.n	800f252 <prvInsertTimerInActiveList+0x62>
 800f24c:	2301      	movs	r3, #1
 800f24e:	617b      	str	r3, [r7, #20]
 800f250:	e007      	b.n	800f262 <prvInsertTimerInActiveList+0x72>
 800f252:	4b07      	ldr	r3, [pc, #28]	; (800f270 <prvInsertTimerInActiveList+0x80>)
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3304      	adds	r3, #4
 800f25a:	4619      	mov	r1, r3
 800f25c:	4610      	mov	r0, r2
 800f25e:	f7fd fdbe 	bl	800cdde <vListInsert>
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	20002b68 	.word	0x20002b68
 800f270:	20002b64 	.word	0x20002b64

0800f274 <prvProcessReceivedCommands>:
 800f274:	b580      	push	{r7, lr}
 800f276:	b08c      	sub	sp, #48	; 0x30
 800f278:	af02      	add	r7, sp, #8
 800f27a:	e081      	b.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	db7e      	blt.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	627b      	str	r3, [r7, #36]	; 0x24
 800f286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d004      	beq.n	800f298 <prvProcessReceivedCommands+0x24>
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	3304      	adds	r3, #4
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd fddc 	bl	800ce50 <uxListRemove>
 800f298:	1d3b      	adds	r3, r7, #4
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff ff88 	bl	800f1b0 <prvSampleTimeNow>
 800f2a0:	6238      	str	r0, [r7, #32]
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	2b09      	cmp	r3, #9
 800f2a6:	d86a      	bhi.n	800f37e <prvProcessReceivedCommands+0x10a>
 800f2a8:	a201      	add	r2, pc, #4	; (adr r2, 800f2b0 <prvProcessReceivedCommands+0x3c>)
 800f2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ae:	bf00      	nop
 800f2b0:	0800f2d9 	.word	0x0800f2d9
 800f2b4:	0800f2d9 	.word	0x0800f2d9
 800f2b8:	0800f2d9 	.word	0x0800f2d9
 800f2bc:	0800f381 	.word	0x0800f381
 800f2c0:	0800f335 	.word	0x0800f335
 800f2c4:	0800f36d 	.word	0x0800f36d
 800f2c8:	0800f2d9 	.word	0x0800f2d9
 800f2cc:	0800f2d9 	.word	0x0800f2d9
 800f2d0:	0800f381 	.word	0x0800f381
 800f2d4:	0800f335 	.word	0x0800f335
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	699b      	ldr	r3, [r3, #24]
 800f2de:	18d1      	adds	r1, r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	6a3a      	ldr	r2, [r7, #32]
 800f2e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e6:	f7ff ff83 	bl	800f1f0 <prvInsertTimerInActiveList>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d047      	beq.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2f6:	4798      	blx	r3
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d13f      	bne.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f304:	699b      	ldr	r3, [r3, #24]
 800f306:	441a      	add	r2, r3
 800f308:	2300      	movs	r3, #0
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	2300      	movs	r3, #0
 800f30e:	2100      	movs	r1, #0
 800f310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f312:	f7ff fe3b 	bl	800ef8c <xTimerGenericCommand>
 800f316:	61f8      	str	r0, [r7, #28]
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d130      	bne.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	61bb      	str	r3, [r7, #24]
 800f330:	bf00      	nop
 800f332:	e7fe      	b.n	800f332 <prvProcessReceivedCommands+0xbe>
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f338:	619a      	str	r2, [r3, #24]
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	699b      	ldr	r3, [r3, #24]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d10a      	bne.n	800f358 <prvProcessReceivedCommands+0xe4>
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	617b      	str	r3, [r7, #20]
 800f354:	bf00      	nop
 800f356:	e7fe      	b.n	800f356 <prvProcessReceivedCommands+0xe2>
 800f358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35a:	699a      	ldr	r2, [r3, #24]
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	18d1      	adds	r1, r2, r3
 800f360:	6a3b      	ldr	r3, [r7, #32]
 800f362:	6a3a      	ldr	r2, [r7, #32]
 800f364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f366:	f7ff ff43 	bl	800f1f0 <prvInsertTimerInActiveList>
 800f36a:	e009      	b.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f372:	2b00      	cmp	r3, #0
 800f374:	d104      	bne.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f378:	f000 fbca 	bl	800fb10 <vPortFree>
 800f37c:	e000      	b.n	800f380 <prvProcessReceivedCommands+0x10c>
 800f37e:	bf00      	nop
 800f380:	4b08      	ldr	r3, [pc, #32]	; (800f3a4 <prvProcessReceivedCommands+0x130>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f107 0108 	add.w	r1, r7, #8
 800f388:	2200      	movs	r2, #0
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe f8aa 	bl	800d4e4 <xQueueReceive>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	f47f af72 	bne.w	800f27c <prvProcessReceivedCommands+0x8>
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
 800f39c:	3728      	adds	r7, #40	; 0x28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	20002b6c 	.word	0x20002b6c

0800f3a8 <prvSwitchTimerLists>:
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b088      	sub	sp, #32
 800f3ac:	af02      	add	r7, sp, #8
 800f3ae:	e045      	b.n	800f43c <prvSwitchTimerLists+0x94>
 800f3b0:	4b2c      	ldr	r3, [pc, #176]	; (800f464 <prvSwitchTimerLists+0xbc>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	613b      	str	r3, [r7, #16]
 800f3ba:	4b2a      	ldr	r3, [pc, #168]	; (800f464 <prvSwitchTimerLists+0xbc>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fd fd41 	bl	800ce50 <uxListRemove>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	4798      	blx	r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	69db      	ldr	r3, [r3, #28]
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d12e      	bne.n	800f43c <prvSwitchTimerLists+0x94>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	699b      	ldr	r3, [r3, #24]
 800f3e2:	693a      	ldr	r2, [r7, #16]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	60bb      	str	r3, [r7, #8]
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d90e      	bls.n	800f40e <prvSwitchTimerLists+0x66>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	605a      	str	r2, [r3, #4]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	611a      	str	r2, [r3, #16]
 800f3fc:	4b19      	ldr	r3, [pc, #100]	; (800f464 <prvSwitchTimerLists+0xbc>)
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	3304      	adds	r3, #4
 800f404:	4619      	mov	r1, r3
 800f406:	4610      	mov	r0, r2
 800f408:	f7fd fce9 	bl	800cdde <vListInsert>
 800f40c:	e016      	b.n	800f43c <prvSwitchTimerLists+0x94>
 800f40e:	2300      	movs	r3, #0
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	2300      	movs	r3, #0
 800f414:	693a      	ldr	r2, [r7, #16]
 800f416:	2100      	movs	r1, #0
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f7ff fdb7 	bl	800ef8c <xTimerGenericCommand>
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10a      	bne.n	800f43c <prvSwitchTimerLists+0x94>
 800f426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42a:	f383 8811 	msr	BASEPRI, r3
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	603b      	str	r3, [r7, #0]
 800f438:	bf00      	nop
 800f43a:	e7fe      	b.n	800f43a <prvSwitchTimerLists+0x92>
 800f43c:	4b09      	ldr	r3, [pc, #36]	; (800f464 <prvSwitchTimerLists+0xbc>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1b4      	bne.n	800f3b0 <prvSwitchTimerLists+0x8>
 800f446:	4b07      	ldr	r3, [pc, #28]	; (800f464 <prvSwitchTimerLists+0xbc>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	617b      	str	r3, [r7, #20]
 800f44c:	4b06      	ldr	r3, [pc, #24]	; (800f468 <prvSwitchTimerLists+0xc0>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a04      	ldr	r2, [pc, #16]	; (800f464 <prvSwitchTimerLists+0xbc>)
 800f452:	6013      	str	r3, [r2, #0]
 800f454:	4a04      	ldr	r2, [pc, #16]	; (800f468 <prvSwitchTimerLists+0xc0>)
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	6013      	str	r3, [r2, #0]
 800f45a:	bf00      	nop
 800f45c:	3718      	adds	r7, #24
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	20002b64 	.word	0x20002b64
 800f468:	20002b68 	.word	0x20002b68

0800f46c <prvCheckForValidListAndQueue>:
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af02      	add	r7, sp, #8
 800f472:	f000 f967 	bl	800f744 <vPortEnterCritical>
 800f476:	4b15      	ldr	r3, [pc, #84]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d120      	bne.n	800f4c0 <prvCheckForValidListAndQueue+0x54>
 800f47e:	4814      	ldr	r0, [pc, #80]	; (800f4d0 <prvCheckForValidListAndQueue+0x64>)
 800f480:	f7fd fc5c 	bl	800cd3c <vListInitialise>
 800f484:	4813      	ldr	r0, [pc, #76]	; (800f4d4 <prvCheckForValidListAndQueue+0x68>)
 800f486:	f7fd fc59 	bl	800cd3c <vListInitialise>
 800f48a:	4b13      	ldr	r3, [pc, #76]	; (800f4d8 <prvCheckForValidListAndQueue+0x6c>)
 800f48c:	4a10      	ldr	r2, [pc, #64]	; (800f4d0 <prvCheckForValidListAndQueue+0x64>)
 800f48e:	601a      	str	r2, [r3, #0]
 800f490:	4b12      	ldr	r3, [pc, #72]	; (800f4dc <prvCheckForValidListAndQueue+0x70>)
 800f492:	4a10      	ldr	r2, [pc, #64]	; (800f4d4 <prvCheckForValidListAndQueue+0x68>)
 800f494:	601a      	str	r2, [r3, #0]
 800f496:	2300      	movs	r3, #0
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	4b11      	ldr	r3, [pc, #68]	; (800f4e0 <prvCheckForValidListAndQueue+0x74>)
 800f49c:	4a11      	ldr	r2, [pc, #68]	; (800f4e4 <prvCheckForValidListAndQueue+0x78>)
 800f49e:	210c      	movs	r1, #12
 800f4a0:	200a      	movs	r0, #10
 800f4a2:	f7fd fd67 	bl	800cf74 <xQueueGenericCreateStatic>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4a08      	ldr	r2, [pc, #32]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4aa:	6013      	str	r3, [r2, #0]
 800f4ac:	4b07      	ldr	r3, [pc, #28]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <prvCheckForValidListAndQueue+0x54>
 800f4b4:	4b05      	ldr	r3, [pc, #20]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	490b      	ldr	r1, [pc, #44]	; (800f4e8 <prvCheckForValidListAndQueue+0x7c>)
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fe fb26 	bl	800db0c <vQueueAddToRegistry>
 800f4c0:	f000 f970 	bl	800f7a4 <vPortExitCritical>
 800f4c4:	bf00      	nop
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20002b6c 	.word	0x20002b6c
 800f4d0:	20002b3c 	.word	0x20002b3c
 800f4d4:	20002b50 	.word	0x20002b50
 800f4d8:	20002b64 	.word	0x20002b64
 800f4dc:	20002b68 	.word	0x20002b68
 800f4e0:	20002bf0 	.word	0x20002bf0
 800f4e4:	20002b78 	.word	0x20002b78
 800f4e8:	080107b4 	.word	0x080107b4

0800f4ec <pxPortInitialiseStack>:
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3b04      	subs	r3, #4
 800f4fc:	60fb      	str	r3, [r7, #12]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3b04      	subs	r3, #4
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	f023 0201 	bic.w	r2, r3, #1
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	3b04      	subs	r3, #4
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	4a0c      	ldr	r2, [pc, #48]	; (800f550 <pxPortInitialiseStack+0x64>)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	601a      	str	r2, [r3, #0]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	3b14      	subs	r3, #20
 800f526:	60fb      	str	r3, [r7, #12]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	601a      	str	r2, [r3, #0]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3b04      	subs	r3, #4
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f06f 0202 	mvn.w	r2, #2
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	3b20      	subs	r3, #32
 800f540:	60fb      	str	r3, [r7, #12]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	4618      	mov	r0, r3
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr
 800f550:	0800f555 	.word	0x0800f555

0800f554 <prvTaskExitError>:
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	2300      	movs	r3, #0
 800f55c:	607b      	str	r3, [r7, #4]
 800f55e:	4b12      	ldr	r3, [pc, #72]	; (800f5a8 <prvTaskExitError+0x54>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f566:	d00a      	beq.n	800f57e <prvTaskExitError+0x2a>
 800f568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56c:	f383 8811 	msr	BASEPRI, r3
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	bf00      	nop
 800f57c:	e7fe      	b.n	800f57c <prvTaskExitError+0x28>
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	60bb      	str	r3, [r7, #8]
 800f590:	bf00      	nop
 800f592:	bf00      	nop
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d0fc      	beq.n	800f594 <prvTaskExitError+0x40>
 800f59a:	bf00      	nop
 800f59c:	bf00      	nop
 800f59e:	3714      	adds	r7, #20
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	200000bc 	.word	0x200000bc
 800f5ac:	00000000 	.word	0x00000000

0800f5b0 <SVC_Handler>:
 800f5b0:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <pxCurrentTCBConst2>)
 800f5b2:	6819      	ldr	r1, [r3, #0]
 800f5b4:	6808      	ldr	r0, [r1, #0]
 800f5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ba:	f380 8809 	msr	PSP, r0
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f04f 0000 	mov.w	r0, #0
 800f5c6:	f380 8811 	msr	BASEPRI, r0
 800f5ca:	4770      	bx	lr
 800f5cc:	f3af 8000 	nop.w

0800f5d0 <pxCurrentTCBConst2>:
 800f5d0:	20002a10 	.word	0x20002a10
 800f5d4:	bf00      	nop
 800f5d6:	bf00      	nop

0800f5d8 <prvPortStartFirstTask>:
 800f5d8:	4808      	ldr	r0, [pc, #32]	; (800f5fc <prvPortStartFirstTask+0x24>)
 800f5da:	6800      	ldr	r0, [r0, #0]
 800f5dc:	6800      	ldr	r0, [r0, #0]
 800f5de:	f380 8808 	msr	MSP, r0
 800f5e2:	f04f 0000 	mov.w	r0, #0
 800f5e6:	f380 8814 	msr	CONTROL, r0
 800f5ea:	b662      	cpsie	i
 800f5ec:	b661      	cpsie	f
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	df00      	svc	0
 800f5f8:	bf00      	nop
 800f5fa:	bf00      	nop
 800f5fc:	e000ed08 	.word	0xe000ed08

0800f600 <xPortStartScheduler>:
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	4b46      	ldr	r3, [pc, #280]	; (800f720 <xPortStartScheduler+0x120>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a46      	ldr	r2, [pc, #280]	; (800f724 <xPortStartScheduler+0x124>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d10a      	bne.n	800f626 <xPortStartScheduler+0x26>
 800f610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	613b      	str	r3, [r7, #16]
 800f622:	bf00      	nop
 800f624:	e7fe      	b.n	800f624 <xPortStartScheduler+0x24>
 800f626:	4b3e      	ldr	r3, [pc, #248]	; (800f720 <xPortStartScheduler+0x120>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a3f      	ldr	r2, [pc, #252]	; (800f728 <xPortStartScheduler+0x128>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d10a      	bne.n	800f646 <xPortStartScheduler+0x46>
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	bf00      	nop
 800f644:	e7fe      	b.n	800f644 <xPortStartScheduler+0x44>
 800f646:	4b39      	ldr	r3, [pc, #228]	; (800f72c <xPortStartScheduler+0x12c>)
 800f648:	617b      	str	r3, [r7, #20]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	607b      	str	r3, [r7, #4]
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	22ff      	movs	r2, #255	; 0xff
 800f656:	701a      	strb	r2, [r3, #0]
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	70fb      	strb	r3, [r7, #3]
 800f660:	78fb      	ldrb	r3, [r7, #3]
 800f662:	b2db      	uxtb	r3, r3
 800f664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f668:	b2da      	uxtb	r2, r3
 800f66a:	4b31      	ldr	r3, [pc, #196]	; (800f730 <xPortStartScheduler+0x130>)
 800f66c:	701a      	strb	r2, [r3, #0]
 800f66e:	4b31      	ldr	r3, [pc, #196]	; (800f734 <xPortStartScheduler+0x134>)
 800f670:	2207      	movs	r2, #7
 800f672:	601a      	str	r2, [r3, #0]
 800f674:	e009      	b.n	800f68a <xPortStartScheduler+0x8a>
 800f676:	4b2f      	ldr	r3, [pc, #188]	; (800f734 <xPortStartScheduler+0x134>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3b01      	subs	r3, #1
 800f67c:	4a2d      	ldr	r2, [pc, #180]	; (800f734 <xPortStartScheduler+0x134>)
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	78fb      	ldrb	r3, [r7, #3]
 800f682:	b2db      	uxtb	r3, r3
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	b2db      	uxtb	r3, r3
 800f688:	70fb      	strb	r3, [r7, #3]
 800f68a:	78fb      	ldrb	r3, [r7, #3]
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f692:	2b80      	cmp	r3, #128	; 0x80
 800f694:	d0ef      	beq.n	800f676 <xPortStartScheduler+0x76>
 800f696:	4b27      	ldr	r3, [pc, #156]	; (800f734 <xPortStartScheduler+0x134>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f1c3 0307 	rsb	r3, r3, #7
 800f69e:	2b04      	cmp	r3, #4
 800f6a0:	d00a      	beq.n	800f6b8 <xPortStartScheduler+0xb8>
 800f6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	60bb      	str	r3, [r7, #8]
 800f6b4:	bf00      	nop
 800f6b6:	e7fe      	b.n	800f6b6 <xPortStartScheduler+0xb6>
 800f6b8:	4b1e      	ldr	r3, [pc, #120]	; (800f734 <xPortStartScheduler+0x134>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	021b      	lsls	r3, r3, #8
 800f6be:	4a1d      	ldr	r2, [pc, #116]	; (800f734 <xPortStartScheduler+0x134>)
 800f6c0:	6013      	str	r3, [r2, #0]
 800f6c2:	4b1c      	ldr	r3, [pc, #112]	; (800f734 <xPortStartScheduler+0x134>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6ca:	4a1a      	ldr	r2, [pc, #104]	; (800f734 <xPortStartScheduler+0x134>)
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	b2da      	uxtb	r2, r3
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	4b18      	ldr	r3, [pc, #96]	; (800f738 <xPortStartScheduler+0x138>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a17      	ldr	r2, [pc, #92]	; (800f738 <xPortStartScheduler+0x138>)
 800f6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6e0:	6013      	str	r3, [r2, #0]
 800f6e2:	4b15      	ldr	r3, [pc, #84]	; (800f738 <xPortStartScheduler+0x138>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a14      	ldr	r2, [pc, #80]	; (800f738 <xPortStartScheduler+0x138>)
 800f6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6ec:	6013      	str	r3, [r2, #0]
 800f6ee:	f000 f8dd 	bl	800f8ac <vPortSetupTimerInterrupt>
 800f6f2:	4b12      	ldr	r3, [pc, #72]	; (800f73c <xPortStartScheduler+0x13c>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	601a      	str	r2, [r3, #0]
 800f6f8:	f000 f8fc 	bl	800f8f4 <vPortEnableVFP>
 800f6fc:	4b10      	ldr	r3, [pc, #64]	; (800f740 <xPortStartScheduler+0x140>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4a0f      	ldr	r2, [pc, #60]	; (800f740 <xPortStartScheduler+0x140>)
 800f702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f706:	6013      	str	r3, [r2, #0]
 800f708:	f7ff ff66 	bl	800f5d8 <prvPortStartFirstTask>
 800f70c:	f7fe feaa 	bl	800e464 <vTaskSwitchContext>
 800f710:	f7ff ff20 	bl	800f554 <prvTaskExitError>
 800f714:	2300      	movs	r3, #0
 800f716:	4618      	mov	r0, r3
 800f718:	3718      	adds	r7, #24
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	e000ed00 	.word	0xe000ed00
 800f724:	410fc271 	.word	0x410fc271
 800f728:	410fc270 	.word	0x410fc270
 800f72c:	e000e400 	.word	0xe000e400
 800f730:	20002c38 	.word	0x20002c38
 800f734:	20002c3c 	.word	0x20002c3c
 800f738:	e000ed20 	.word	0xe000ed20
 800f73c:	200000bc 	.word	0x200000bc
 800f740:	e000ef34 	.word	0xe000ef34

0800f744 <vPortEnterCritical>:
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	607b      	str	r3, [r7, #4]
 800f75c:	bf00      	nop
 800f75e:	4b0f      	ldr	r3, [pc, #60]	; (800f79c <vPortEnterCritical+0x58>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	3301      	adds	r3, #1
 800f764:	4a0d      	ldr	r2, [pc, #52]	; (800f79c <vPortEnterCritical+0x58>)
 800f766:	6013      	str	r3, [r2, #0]
 800f768:	4b0c      	ldr	r3, [pc, #48]	; (800f79c <vPortEnterCritical+0x58>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d10f      	bne.n	800f790 <vPortEnterCritical+0x4c>
 800f770:	4b0b      	ldr	r3, [pc, #44]	; (800f7a0 <vPortEnterCritical+0x5c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	b2db      	uxtb	r3, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00a      	beq.n	800f790 <vPortEnterCritical+0x4c>
 800f77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77e:	f383 8811 	msr	BASEPRI, r3
 800f782:	f3bf 8f6f 	isb	sy
 800f786:	f3bf 8f4f 	dsb	sy
 800f78a:	603b      	str	r3, [r7, #0]
 800f78c:	bf00      	nop
 800f78e:	e7fe      	b.n	800f78e <vPortEnterCritical+0x4a>
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	200000bc 	.word	0x200000bc
 800f7a0:	e000ed04 	.word	0xe000ed04

0800f7a4 <vPortExitCritical>:
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4b12      	ldr	r3, [pc, #72]	; (800f7f4 <vPortExitCritical+0x50>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d10a      	bne.n	800f7c8 <vPortExitCritical+0x24>
 800f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	607b      	str	r3, [r7, #4]
 800f7c4:	bf00      	nop
 800f7c6:	e7fe      	b.n	800f7c6 <vPortExitCritical+0x22>
 800f7c8:	4b0a      	ldr	r3, [pc, #40]	; (800f7f4 <vPortExitCritical+0x50>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	4a09      	ldr	r2, [pc, #36]	; (800f7f4 <vPortExitCritical+0x50>)
 800f7d0:	6013      	str	r3, [r2, #0]
 800f7d2:	4b08      	ldr	r3, [pc, #32]	; (800f7f4 <vPortExitCritical+0x50>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d105      	bne.n	800f7e6 <vPortExitCritical+0x42>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	603b      	str	r3, [r7, #0]
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	f383 8811 	msr	BASEPRI, r3
 800f7e4:	bf00      	nop
 800f7e6:	bf00      	nop
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
 800f7f4:	200000bc 	.word	0x200000bc
	...

0800f800 <PendSV_Handler>:
 800f800:	f3ef 8009 	mrs	r0, PSP
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	4b15      	ldr	r3, [pc, #84]	; (800f860 <pxCurrentTCBConst>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	f01e 0f10 	tst.w	lr, #16
 800f810:	bf08      	it	eq
 800f812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81a:	6010      	str	r0, [r2, #0]
 800f81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f824:	f380 8811 	msr	BASEPRI, r0
 800f828:	f3bf 8f4f 	dsb	sy
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f7fe fe18 	bl	800e464 <vTaskSwitchContext>
 800f834:	f04f 0000 	mov.w	r0, #0
 800f838:	f380 8811 	msr	BASEPRI, r0
 800f83c:	bc09      	pop	{r0, r3}
 800f83e:	6819      	ldr	r1, [r3, #0]
 800f840:	6808      	ldr	r0, [r1, #0]
 800f842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f846:	f01e 0f10 	tst.w	lr, #16
 800f84a:	bf08      	it	eq
 800f84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f850:	f380 8809 	msr	PSP, r0
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	f3af 8000 	nop.w

0800f860 <pxCurrentTCBConst>:
 800f860:	20002a10 	.word	0x20002a10
 800f864:	bf00      	nop
 800f866:	bf00      	nop

0800f868 <SysTick_Handler>:
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	607b      	str	r3, [r7, #4]
 800f880:	bf00      	nop
 800f882:	f7fe fd31 	bl	800e2e8 <xTaskIncrementTick>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d003      	beq.n	800f894 <SysTick_Handler+0x2c>
 800f88c:	4b06      	ldr	r3, [pc, #24]	; (800f8a8 <SysTick_Handler+0x40>)
 800f88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	2300      	movs	r3, #0
 800f896:	603b      	str	r3, [r7, #0]
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	bf00      	nop
 800f8a0:	bf00      	nop
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	e000ed04 	.word	0xe000ed04

0800f8ac <vPortSetupTimerInterrupt>:
 800f8ac:	b480      	push	{r7}
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	4b0b      	ldr	r3, [pc, #44]	; (800f8e0 <vPortSetupTimerInterrupt+0x34>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	601a      	str	r2, [r3, #0]
 800f8b6:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <vPortSetupTimerInterrupt+0x38>)
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	601a      	str	r2, [r3, #0]
 800f8bc:	4b0a      	ldr	r3, [pc, #40]	; (800f8e8 <vPortSetupTimerInterrupt+0x3c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a0a      	ldr	r2, [pc, #40]	; (800f8ec <vPortSetupTimerInterrupt+0x40>)
 800f8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8c6:	099b      	lsrs	r3, r3, #6
 800f8c8:	4a09      	ldr	r2, [pc, #36]	; (800f8f0 <vPortSetupTimerInterrupt+0x44>)
 800f8ca:	3b01      	subs	r3, #1
 800f8cc:	6013      	str	r3, [r2, #0]
 800f8ce:	4b04      	ldr	r3, [pc, #16]	; (800f8e0 <vPortSetupTimerInterrupt+0x34>)
 800f8d0:	2207      	movs	r2, #7
 800f8d2:	601a      	str	r2, [r3, #0]
 800f8d4:	bf00      	nop
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	e000e010 	.word	0xe000e010
 800f8e4:	e000e018 	.word	0xe000e018
 800f8e8:	20000038 	.word	0x20000038
 800f8ec:	10624dd3 	.word	0x10624dd3
 800f8f0:	e000e014 	.word	0xe000e014

0800f8f4 <vPortEnableVFP>:
 800f8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f904 <vPortEnableVFP+0x10>
 800f8f8:	6801      	ldr	r1, [r0, #0]
 800f8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8fe:	6001      	str	r1, [r0, #0]
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	e000ed88 	.word	0xe000ed88

0800f908 <vPortValidateInterruptPriority>:
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	f3ef 8305 	mrs	r3, IPSR
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b0f      	cmp	r3, #15
 800f918:	d914      	bls.n	800f944 <vPortValidateInterruptPriority+0x3c>
 800f91a:	4a17      	ldr	r2, [pc, #92]	; (800f978 <vPortValidateInterruptPriority+0x70>)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	4413      	add	r3, r2
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	72fb      	strb	r3, [r7, #11]
 800f924:	4b15      	ldr	r3, [pc, #84]	; (800f97c <vPortValidateInterruptPriority+0x74>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	7afa      	ldrb	r2, [r7, #11]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d20a      	bcs.n	800f944 <vPortValidateInterruptPriority+0x3c>
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	607b      	str	r3, [r7, #4]
 800f940:	bf00      	nop
 800f942:	e7fe      	b.n	800f942 <vPortValidateInterruptPriority+0x3a>
 800f944:	4b0e      	ldr	r3, [pc, #56]	; (800f980 <vPortValidateInterruptPriority+0x78>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f94c:	4b0d      	ldr	r3, [pc, #52]	; (800f984 <vPortValidateInterruptPriority+0x7c>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	429a      	cmp	r2, r3
 800f952:	d90a      	bls.n	800f96a <vPortValidateInterruptPriority+0x62>
 800f954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f958:	f383 8811 	msr	BASEPRI, r3
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	f3bf 8f4f 	dsb	sy
 800f964:	603b      	str	r3, [r7, #0]
 800f966:	bf00      	nop
 800f968:	e7fe      	b.n	800f968 <vPortValidateInterruptPriority+0x60>
 800f96a:	bf00      	nop
 800f96c:	3714      	adds	r7, #20
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop
 800f978:	e000e3f0 	.word	0xe000e3f0
 800f97c:	20002c38 	.word	0x20002c38
 800f980:	e000ed0c 	.word	0xe000ed0c
 800f984:	20002c3c 	.word	0x20002c3c

0800f988 <pvPortMalloc>:
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08a      	sub	sp, #40	; 0x28
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	2300      	movs	r3, #0
 800f992:	61fb      	str	r3, [r7, #28]
 800f994:	f7fe fbdc 	bl	800e150 <vTaskSuspendAll>
 800f998:	4b58      	ldr	r3, [pc, #352]	; (800fafc <pvPortMalloc+0x174>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d101      	bne.n	800f9a4 <pvPortMalloc+0x1c>
 800f9a0:	f000 f910 	bl	800fbc4 <prvHeapInit>
 800f9a4:	4b56      	ldr	r3, [pc, #344]	; (800fb00 <pvPortMalloc+0x178>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4013      	ands	r3, r2
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f040 808e 	bne.w	800face <pvPortMalloc+0x146>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d01d      	beq.n	800f9f4 <pvPortMalloc+0x6c>
 800f9b8:	2208      	movs	r2, #8
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4413      	add	r3, r2
 800f9be:	607b      	str	r3, [r7, #4]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f003 0307 	and.w	r3, r3, #7
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d014      	beq.n	800f9f4 <pvPortMalloc+0x6c>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f023 0307 	bic.w	r3, r3, #7
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	607b      	str	r3, [r7, #4]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f003 0307 	and.w	r3, r3, #7
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00a      	beq.n	800f9f4 <pvPortMalloc+0x6c>
 800f9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	617b      	str	r3, [r7, #20]
 800f9f0:	bf00      	nop
 800f9f2:	e7fe      	b.n	800f9f2 <pvPortMalloc+0x6a>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d069      	beq.n	800face <pvPortMalloc+0x146>
 800f9fa:	4b42      	ldr	r3, [pc, #264]	; (800fb04 <pvPortMalloc+0x17c>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d864      	bhi.n	800face <pvPortMalloc+0x146>
 800fa04:	4b40      	ldr	r3, [pc, #256]	; (800fb08 <pvPortMalloc+0x180>)
 800fa06:	623b      	str	r3, [r7, #32]
 800fa08:	4b3f      	ldr	r3, [pc, #252]	; (800fb08 <pvPortMalloc+0x180>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	627b      	str	r3, [r7, #36]	; 0x24
 800fa0e:	e004      	b.n	800fa1a <pvPortMalloc+0x92>
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	623b      	str	r3, [r7, #32]
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	627b      	str	r3, [r7, #36]	; 0x24
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d903      	bls.n	800fa2c <pvPortMalloc+0xa4>
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d1f1      	bne.n	800fa10 <pvPortMalloc+0x88>
 800fa2c:	4b33      	ldr	r3, [pc, #204]	; (800fafc <pvPortMalloc+0x174>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d04b      	beq.n	800face <pvPortMalloc+0x146>
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2208      	movs	r2, #8
 800fa3c:	4413      	add	r3, r2
 800fa3e:	61fb      	str	r3, [r7, #28]
 800fa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	6a3b      	ldr	r3, [r7, #32]
 800fa46:	601a      	str	r2, [r3, #0]
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	1ad2      	subs	r2, r2, r3
 800fa50:	2308      	movs	r3, #8
 800fa52:	005b      	lsls	r3, r3, #1
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d91f      	bls.n	800fa98 <pvPortMalloc+0x110>
 800fa58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	61bb      	str	r3, [r7, #24]
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	f003 0307 	and.w	r3, r3, #7
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00a      	beq.n	800fa80 <pvPortMalloc+0xf8>
 800fa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	613b      	str	r3, [r7, #16]
 800fa7c:	bf00      	nop
 800fa7e:	e7fe      	b.n	800fa7e <pvPortMalloc+0xf6>
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	685a      	ldr	r2, [r3, #4]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	1ad2      	subs	r2, r2, r3
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	605a      	str	r2, [r3, #4]
 800fa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	605a      	str	r2, [r3, #4]
 800fa92:	69b8      	ldr	r0, [r7, #24]
 800fa94:	f000 f8f8 	bl	800fc88 <prvInsertBlockIntoFreeList>
 800fa98:	4b1a      	ldr	r3, [pc, #104]	; (800fb04 <pvPortMalloc+0x17c>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	4a18      	ldr	r2, [pc, #96]	; (800fb04 <pvPortMalloc+0x17c>)
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	4b17      	ldr	r3, [pc, #92]	; (800fb04 <pvPortMalloc+0x17c>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	4b18      	ldr	r3, [pc, #96]	; (800fb0c <pvPortMalloc+0x184>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d203      	bcs.n	800faba <pvPortMalloc+0x132>
 800fab2:	4b14      	ldr	r3, [pc, #80]	; (800fb04 <pvPortMalloc+0x17c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a15      	ldr	r2, [pc, #84]	; (800fb0c <pvPortMalloc+0x184>)
 800fab8:	6013      	str	r3, [r2, #0]
 800faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabc:	685a      	ldr	r2, [r3, #4]
 800fabe:	4b10      	ldr	r3, [pc, #64]	; (800fb00 <pvPortMalloc+0x178>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	431a      	orrs	r2, r3
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	605a      	str	r2, [r3, #4]
 800fac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faca:	2200      	movs	r2, #0
 800facc:	601a      	str	r2, [r3, #0]
 800face:	f7fe fb4d 	bl	800e16c <xTaskResumeAll>
 800fad2:	69fb      	ldr	r3, [r7, #28]
 800fad4:	f003 0307 	and.w	r3, r3, #7
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00a      	beq.n	800faf2 <pvPortMalloc+0x16a>
 800fadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	60fb      	str	r3, [r7, #12]
 800faee:	bf00      	nop
 800faf0:	e7fe      	b.n	800faf0 <pvPortMalloc+0x168>
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	4618      	mov	r0, r3
 800faf6:	3728      	adds	r7, #40	; 0x28
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	20003048 	.word	0x20003048
 800fb00:	20003054 	.word	0x20003054
 800fb04:	2000304c 	.word	0x2000304c
 800fb08:	20003040 	.word	0x20003040
 800fb0c:	20003050 	.word	0x20003050

0800fb10 <vPortFree>:
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	617b      	str	r3, [r7, #20]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d048      	beq.n	800fbb4 <vPortFree+0xa4>
 800fb22:	2308      	movs	r3, #8
 800fb24:	425b      	negs	r3, r3
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	4413      	add	r3, r2
 800fb2a:	617b      	str	r3, [r7, #20]
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	613b      	str	r3, [r7, #16]
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	685a      	ldr	r2, [r3, #4]
 800fb34:	4b21      	ldr	r3, [pc, #132]	; (800fbbc <vPortFree+0xac>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	4013      	ands	r3, r2
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d10a      	bne.n	800fb54 <vPortFree+0x44>
 800fb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	60fb      	str	r3, [r7, #12]
 800fb50:	bf00      	nop
 800fb52:	e7fe      	b.n	800fb52 <vPortFree+0x42>
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00a      	beq.n	800fb72 <vPortFree+0x62>
 800fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	60bb      	str	r3, [r7, #8]
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <vPortFree+0x60>
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	685a      	ldr	r2, [r3, #4]
 800fb76:	4b11      	ldr	r3, [pc, #68]	; (800fbbc <vPortFree+0xac>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4013      	ands	r3, r2
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d019      	beq.n	800fbb4 <vPortFree+0xa4>
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d115      	bne.n	800fbb4 <vPortFree+0xa4>
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	685a      	ldr	r2, [r3, #4]
 800fb8c:	4b0b      	ldr	r3, [pc, #44]	; (800fbbc <vPortFree+0xac>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	43db      	mvns	r3, r3
 800fb92:	401a      	ands	r2, r3
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	605a      	str	r2, [r3, #4]
 800fb98:	f7fe fada 	bl	800e150 <vTaskSuspendAll>
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	685a      	ldr	r2, [r3, #4]
 800fba0:	4b07      	ldr	r3, [pc, #28]	; (800fbc0 <vPortFree+0xb0>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4413      	add	r3, r2
 800fba6:	4a06      	ldr	r2, [pc, #24]	; (800fbc0 <vPortFree+0xb0>)
 800fba8:	6013      	str	r3, [r2, #0]
 800fbaa:	6938      	ldr	r0, [r7, #16]
 800fbac:	f000 f86c 	bl	800fc88 <prvInsertBlockIntoFreeList>
 800fbb0:	f7fe fadc 	bl	800e16c <xTaskResumeAll>
 800fbb4:	bf00      	nop
 800fbb6:	3718      	adds	r7, #24
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	20003054 	.word	0x20003054
 800fbc0:	2000304c 	.word	0x2000304c

0800fbc4 <prvHeapInit>:
 800fbc4:	b480      	push	{r7}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbce:	60bb      	str	r3, [r7, #8]
 800fbd0:	4b27      	ldr	r3, [pc, #156]	; (800fc70 <prvHeapInit+0xac>)
 800fbd2:	60fb      	str	r3, [r7, #12]
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f003 0307 	and.w	r3, r3, #7
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00c      	beq.n	800fbf8 <prvHeapInit+0x34>
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	3307      	adds	r3, #7
 800fbe2:	60fb      	str	r3, [r7, #12]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f023 0307 	bic.w	r3, r3, #7
 800fbea:	60fb      	str	r3, [r7, #12]
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	4a1f      	ldr	r2, [pc, #124]	; (800fc70 <prvHeapInit+0xac>)
 800fbf4:	4413      	add	r3, r2
 800fbf6:	60bb      	str	r3, [r7, #8]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	607b      	str	r3, [r7, #4]
 800fbfc:	4a1d      	ldr	r2, [pc, #116]	; (800fc74 <prvHeapInit+0xb0>)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6013      	str	r3, [r2, #0]
 800fc02:	4b1c      	ldr	r3, [pc, #112]	; (800fc74 <prvHeapInit+0xb0>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	605a      	str	r2, [r3, #4]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	60fb      	str	r3, [r7, #12]
 800fc10:	2208      	movs	r2, #8
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	1a9b      	subs	r3, r3, r2
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f023 0307 	bic.w	r3, r3, #7
 800fc1e:	60fb      	str	r3, [r7, #12]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	4a15      	ldr	r2, [pc, #84]	; (800fc78 <prvHeapInit+0xb4>)
 800fc24:	6013      	str	r3, [r2, #0]
 800fc26:	4b14      	ldr	r3, [pc, #80]	; (800fc78 <prvHeapInit+0xb4>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	605a      	str	r2, [r3, #4]
 800fc2e:	4b12      	ldr	r3, [pc, #72]	; (800fc78 <prvHeapInit+0xb4>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	603b      	str	r3, [r7, #0]
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	1ad2      	subs	r2, r2, r3
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	605a      	str	r2, [r3, #4]
 800fc44:	4b0c      	ldr	r3, [pc, #48]	; (800fc78 <prvHeapInit+0xb4>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	601a      	str	r2, [r3, #0]
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	4a0a      	ldr	r2, [pc, #40]	; (800fc7c <prvHeapInit+0xb8>)
 800fc52:	6013      	str	r3, [r2, #0]
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	4a09      	ldr	r2, [pc, #36]	; (800fc80 <prvHeapInit+0xbc>)
 800fc5a:	6013      	str	r3, [r2, #0]
 800fc5c:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <prvHeapInit+0xc0>)
 800fc5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc62:	601a      	str	r2, [r3, #0]
 800fc64:	bf00      	nop
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	20002c40 	.word	0x20002c40
 800fc74:	20003040 	.word	0x20003040
 800fc78:	20003048 	.word	0x20003048
 800fc7c:	20003050 	.word	0x20003050
 800fc80:	2000304c 	.word	0x2000304c
 800fc84:	20003054 	.word	0x20003054

0800fc88 <prvInsertBlockIntoFreeList>:
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	4b28      	ldr	r3, [pc, #160]	; (800fd34 <prvInsertBlockIntoFreeList+0xac>)
 800fc92:	60fb      	str	r3, [r7, #12]
 800fc94:	e002      	b.n	800fc9c <prvInsertBlockIntoFreeList+0x14>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d8f7      	bhi.n	800fc96 <prvInsertBlockIntoFreeList+0xe>
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	60bb      	str	r3, [r7, #8]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d108      	bne.n	800fcca <prvInsertBlockIntoFreeList+0x42>
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	441a      	add	r2, r3
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	605a      	str	r2, [r3, #4]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	607b      	str	r3, [r7, #4]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	60bb      	str	r3, [r7, #8]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	441a      	add	r2, r3
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d118      	bne.n	800fd10 <prvInsertBlockIntoFreeList+0x88>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <prvInsertBlockIntoFreeList+0xb0>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d00d      	beq.n	800fd06 <prvInsertBlockIntoFreeList+0x7e>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	441a      	add	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	605a      	str	r2, [r3, #4]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	e008      	b.n	800fd18 <prvInsertBlockIntoFreeList+0x90>
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <prvInsertBlockIntoFreeList+0xb0>)
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	e003      	b.n	800fd18 <prvInsertBlockIntoFreeList+0x90>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	601a      	str	r2, [r3, #0]
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d002      	beq.n	800fd26 <prvInsertBlockIntoFreeList+0x9e>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	601a      	str	r2, [r3, #0]
 800fd26:	bf00      	nop
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	20003040 	.word	0x20003040
 800fd38:	20003048 	.word	0x20003048

0800fd3c <swapfunc>:
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	b510      	push	{r4, lr}
 800fd40:	d00a      	beq.n	800fd58 <swapfunc+0x1c>
 800fd42:	0892      	lsrs	r2, r2, #2
 800fd44:	3a01      	subs	r2, #1
 800fd46:	6803      	ldr	r3, [r0, #0]
 800fd48:	680c      	ldr	r4, [r1, #0]
 800fd4a:	f840 4b04 	str.w	r4, [r0], #4
 800fd4e:	2a00      	cmp	r2, #0
 800fd50:	f841 3b04 	str.w	r3, [r1], #4
 800fd54:	dcf6      	bgt.n	800fd44 <swapfunc+0x8>
 800fd56:	bd10      	pop	{r4, pc}
 800fd58:	4402      	add	r2, r0
 800fd5a:	780c      	ldrb	r4, [r1, #0]
 800fd5c:	7803      	ldrb	r3, [r0, #0]
 800fd5e:	f800 4b01 	strb.w	r4, [r0], #1
 800fd62:	f801 3b01 	strb.w	r3, [r1], #1
 800fd66:	1a13      	subs	r3, r2, r0
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	dcf6      	bgt.n	800fd5a <swapfunc+0x1e>
 800fd6c:	e7f3      	b.n	800fd56 <swapfunc+0x1a>

0800fd6e <med3.constprop.0>:
 800fd6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd70:	460c      	mov	r4, r1
 800fd72:	4615      	mov	r5, r2
 800fd74:	4607      	mov	r7, r0
 800fd76:	461e      	mov	r6, r3
 800fd78:	4798      	blx	r3
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	4629      	mov	r1, r5
 800fd7e:	4620      	mov	r0, r4
 800fd80:	da0a      	bge.n	800fd98 <med3.constprop.0+0x2a>
 800fd82:	47b0      	blx	r6
 800fd84:	2800      	cmp	r0, #0
 800fd86:	db05      	blt.n	800fd94 <med3.constprop.0+0x26>
 800fd88:	4629      	mov	r1, r5
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	47b0      	blx	r6
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	db0a      	blt.n	800fda8 <med3.constprop.0+0x3a>
 800fd92:	463c      	mov	r4, r7
 800fd94:	4620      	mov	r0, r4
 800fd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd98:	47b0      	blx	r6
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	dcfa      	bgt.n	800fd94 <med3.constprop.0+0x26>
 800fd9e:	4629      	mov	r1, r5
 800fda0:	4638      	mov	r0, r7
 800fda2:	47b0      	blx	r6
 800fda4:	2800      	cmp	r0, #0
 800fda6:	dbf4      	blt.n	800fd92 <med3.constprop.0+0x24>
 800fda8:	462c      	mov	r4, r5
 800fdaa:	e7f3      	b.n	800fd94 <med3.constprop.0+0x26>

0800fdac <qsort>:
 800fdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb0:	469a      	mov	sl, r3
 800fdb2:	ea40 0302 	orr.w	r3, r0, r2
 800fdb6:	079b      	lsls	r3, r3, #30
 800fdb8:	b097      	sub	sp, #92	; 0x5c
 800fdba:	4606      	mov	r6, r0
 800fdbc:	4614      	mov	r4, r2
 800fdbe:	d11a      	bne.n	800fdf6 <qsort+0x4a>
 800fdc0:	f1b2 0804 	subs.w	r8, r2, #4
 800fdc4:	bf18      	it	ne
 800fdc6:	f04f 0801 	movne.w	r8, #1
 800fdca:	2300      	movs	r3, #0
 800fdcc:	9302      	str	r3, [sp, #8]
 800fdce:	1933      	adds	r3, r6, r4
 800fdd0:	fb04 f701 	mul.w	r7, r4, r1
 800fdd4:	9301      	str	r3, [sp, #4]
 800fdd6:	2906      	cmp	r1, #6
 800fdd8:	eb06 0307 	add.w	r3, r6, r7
 800fddc:	9303      	str	r3, [sp, #12]
 800fdde:	d82a      	bhi.n	800fe36 <qsort+0x8a>
 800fde0:	9b01      	ldr	r3, [sp, #4]
 800fde2:	9a03      	ldr	r2, [sp, #12]
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d310      	bcc.n	800fe0a <qsort+0x5e>
 800fde8:	9b02      	ldr	r3, [sp, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f040 811e 	bne.w	801002c <qsort+0x280>
 800fdf0:	b017      	add	sp, #92	; 0x5c
 800fdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf6:	f04f 0802 	mov.w	r8, #2
 800fdfa:	e7e6      	b.n	800fdca <qsort+0x1e>
 800fdfc:	4643      	mov	r3, r8
 800fdfe:	4622      	mov	r2, r4
 800fe00:	4639      	mov	r1, r7
 800fe02:	4628      	mov	r0, r5
 800fe04:	f7ff ff9a 	bl	800fd3c <swapfunc>
 800fe08:	e00e      	b.n	800fe28 <qsort+0x7c>
 800fe0a:	9d01      	ldr	r5, [sp, #4]
 800fe0c:	e00d      	b.n	800fe2a <qsort+0x7e>
 800fe0e:	1b2f      	subs	r7, r5, r4
 800fe10:	4629      	mov	r1, r5
 800fe12:	4638      	mov	r0, r7
 800fe14:	47d0      	blx	sl
 800fe16:	2800      	cmp	r0, #0
 800fe18:	dd09      	ble.n	800fe2e <qsort+0x82>
 800fe1a:	f1b8 0f00 	cmp.w	r8, #0
 800fe1e:	d1ed      	bne.n	800fdfc <qsort+0x50>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	602a      	str	r2, [r5, #0]
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	463d      	mov	r5, r7
 800fe2a:	42ae      	cmp	r6, r5
 800fe2c:	d3ef      	bcc.n	800fe0e <qsort+0x62>
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	4423      	add	r3, r4
 800fe32:	9301      	str	r3, [sp, #4]
 800fe34:	e7d4      	b.n	800fde0 <qsort+0x34>
 800fe36:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800fe3a:	1b3f      	subs	r7, r7, r4
 800fe3c:	2907      	cmp	r1, #7
 800fe3e:	fb04 6909 	mla	r9, r4, r9, r6
 800fe42:	4437      	add	r7, r6
 800fe44:	d021      	beq.n	800fe8a <qsort+0xde>
 800fe46:	2928      	cmp	r1, #40	; 0x28
 800fe48:	d944      	bls.n	800fed4 <qsort+0x128>
 800fe4a:	08cd      	lsrs	r5, r1, #3
 800fe4c:	4365      	muls	r5, r4
 800fe4e:	4653      	mov	r3, sl
 800fe50:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800fe54:	1971      	adds	r1, r6, r5
 800fe56:	4630      	mov	r0, r6
 800fe58:	f7ff ff89 	bl	800fd6e <med3.constprop.0>
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	eb09 0205 	add.w	r2, r9, r5
 800fe62:	4653      	mov	r3, sl
 800fe64:	4683      	mov	fp, r0
 800fe66:	1b48      	subs	r0, r1, r5
 800fe68:	f7ff ff81 	bl	800fd6e <med3.constprop.0>
 800fe6c:	463a      	mov	r2, r7
 800fe6e:	4681      	mov	r9, r0
 800fe70:	4653      	mov	r3, sl
 800fe72:	1b79      	subs	r1, r7, r5
 800fe74:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800fe78:	f7ff ff79 	bl	800fd6e <med3.constprop.0>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	4649      	mov	r1, r9
 800fe80:	4653      	mov	r3, sl
 800fe82:	4658      	mov	r0, fp
 800fe84:	f7ff ff73 	bl	800fd6e <med3.constprop.0>
 800fe88:	4681      	mov	r9, r0
 800fe8a:	f1b8 0f00 	cmp.w	r8, #0
 800fe8e:	d124      	bne.n	800feda <qsort+0x12e>
 800fe90:	6833      	ldr	r3, [r6, #0]
 800fe92:	f8d9 2000 	ldr.w	r2, [r9]
 800fe96:	6032      	str	r2, [r6, #0]
 800fe98:	f8c9 3000 	str.w	r3, [r9]
 800fe9c:	eb06 0b04 	add.w	fp, r6, r4
 800fea0:	46b9      	mov	r9, r7
 800fea2:	465d      	mov	r5, fp
 800fea4:	2300      	movs	r3, #0
 800fea6:	45bb      	cmp	fp, r7
 800fea8:	d835      	bhi.n	800ff16 <qsort+0x16a>
 800feaa:	4631      	mov	r1, r6
 800feac:	4658      	mov	r0, fp
 800feae:	9304      	str	r3, [sp, #16]
 800feb0:	47d0      	blx	sl
 800feb2:	2800      	cmp	r0, #0
 800feb4:	9b04      	ldr	r3, [sp, #16]
 800feb6:	dc3e      	bgt.n	800ff36 <qsort+0x18a>
 800feb8:	d10a      	bne.n	800fed0 <qsort+0x124>
 800feba:	f1b8 0f00 	cmp.w	r8, #0
 800febe:	d113      	bne.n	800fee8 <qsort+0x13c>
 800fec0:	682b      	ldr	r3, [r5, #0]
 800fec2:	f8db 2000 	ldr.w	r2, [fp]
 800fec6:	602a      	str	r2, [r5, #0]
 800fec8:	f8cb 3000 	str.w	r3, [fp]
 800fecc:	4425      	add	r5, r4
 800fece:	2301      	movs	r3, #1
 800fed0:	44a3      	add	fp, r4
 800fed2:	e7e8      	b.n	800fea6 <qsort+0xfa>
 800fed4:	463a      	mov	r2, r7
 800fed6:	46b3      	mov	fp, r6
 800fed8:	e7d1      	b.n	800fe7e <qsort+0xd2>
 800feda:	4643      	mov	r3, r8
 800fedc:	4622      	mov	r2, r4
 800fede:	4649      	mov	r1, r9
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7ff ff2b 	bl	800fd3c <swapfunc>
 800fee6:	e7d9      	b.n	800fe9c <qsort+0xf0>
 800fee8:	4643      	mov	r3, r8
 800feea:	4622      	mov	r2, r4
 800feec:	4659      	mov	r1, fp
 800feee:	4628      	mov	r0, r5
 800fef0:	f7ff ff24 	bl	800fd3c <swapfunc>
 800fef4:	e7ea      	b.n	800fecc <qsort+0x120>
 800fef6:	d10b      	bne.n	800ff10 <qsort+0x164>
 800fef8:	f1b8 0f00 	cmp.w	r8, #0
 800fefc:	d114      	bne.n	800ff28 <qsort+0x17c>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	f8d9 2000 	ldr.w	r2, [r9]
 800ff04:	603a      	str	r2, [r7, #0]
 800ff06:	f8c9 3000 	str.w	r3, [r9]
 800ff0a:	eba9 0904 	sub.w	r9, r9, r4
 800ff0e:	2301      	movs	r3, #1
 800ff10:	9f04      	ldr	r7, [sp, #16]
 800ff12:	45bb      	cmp	fp, r7
 800ff14:	d90f      	bls.n	800ff36 <qsort+0x18a>
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d143      	bne.n	800ffa2 <qsort+0x1f6>
 800ff1a:	9b01      	ldr	r3, [sp, #4]
 800ff1c:	9a03      	ldr	r2, [sp, #12]
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	f4bf af62 	bcs.w	800fde8 <qsort+0x3c>
 800ff24:	9d01      	ldr	r5, [sp, #4]
 800ff26:	e036      	b.n	800ff96 <qsort+0x1ea>
 800ff28:	4643      	mov	r3, r8
 800ff2a:	4622      	mov	r2, r4
 800ff2c:	4649      	mov	r1, r9
 800ff2e:	4638      	mov	r0, r7
 800ff30:	f7ff ff04 	bl	800fd3c <swapfunc>
 800ff34:	e7e9      	b.n	800ff0a <qsort+0x15e>
 800ff36:	4631      	mov	r1, r6
 800ff38:	4638      	mov	r0, r7
 800ff3a:	9305      	str	r3, [sp, #20]
 800ff3c:	47d0      	blx	sl
 800ff3e:	1b3b      	subs	r3, r7, r4
 800ff40:	2800      	cmp	r0, #0
 800ff42:	9304      	str	r3, [sp, #16]
 800ff44:	9b05      	ldr	r3, [sp, #20]
 800ff46:	dad6      	bge.n	800fef6 <qsort+0x14a>
 800ff48:	f1b8 0f00 	cmp.w	r8, #0
 800ff4c:	d006      	beq.n	800ff5c <qsort+0x1b0>
 800ff4e:	4643      	mov	r3, r8
 800ff50:	4622      	mov	r2, r4
 800ff52:	4639      	mov	r1, r7
 800ff54:	4658      	mov	r0, fp
 800ff56:	f7ff fef1 	bl	800fd3c <swapfunc>
 800ff5a:	e005      	b.n	800ff68 <qsort+0x1bc>
 800ff5c:	f8db 3000 	ldr.w	r3, [fp]
 800ff60:	683a      	ldr	r2, [r7, #0]
 800ff62:	f8cb 2000 	str.w	r2, [fp]
 800ff66:	603b      	str	r3, [r7, #0]
 800ff68:	9f04      	ldr	r7, [sp, #16]
 800ff6a:	e7b0      	b.n	800fece <qsort+0x122>
 800ff6c:	4643      	mov	r3, r8
 800ff6e:	4622      	mov	r2, r4
 800ff70:	4639      	mov	r1, r7
 800ff72:	4628      	mov	r0, r5
 800ff74:	f7ff fee2 	bl	800fd3c <swapfunc>
 800ff78:	e00c      	b.n	800ff94 <qsort+0x1e8>
 800ff7a:	1b2f      	subs	r7, r5, r4
 800ff7c:	4629      	mov	r1, r5
 800ff7e:	4638      	mov	r0, r7
 800ff80:	47d0      	blx	sl
 800ff82:	2800      	cmp	r0, #0
 800ff84:	dd09      	ble.n	800ff9a <qsort+0x1ee>
 800ff86:	f1b8 0f00 	cmp.w	r8, #0
 800ff8a:	d1ef      	bne.n	800ff6c <qsort+0x1c0>
 800ff8c:	682b      	ldr	r3, [r5, #0]
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	602a      	str	r2, [r5, #0]
 800ff92:	603b      	str	r3, [r7, #0]
 800ff94:	463d      	mov	r5, r7
 800ff96:	42ae      	cmp	r6, r5
 800ff98:	d3ef      	bcc.n	800ff7a <qsort+0x1ce>
 800ff9a:	9b01      	ldr	r3, [sp, #4]
 800ff9c:	4423      	add	r3, r4
 800ff9e:	9301      	str	r3, [sp, #4]
 800ffa0:	e7bb      	b.n	800ff1a <qsort+0x16e>
 800ffa2:	ebab 0305 	sub.w	r3, fp, r5
 800ffa6:	1baa      	subs	r2, r5, r6
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	bfa8      	it	ge
 800ffac:	461a      	movge	r2, r3
 800ffae:	9301      	str	r3, [sp, #4]
 800ffb0:	b12a      	cbz	r2, 800ffbe <qsort+0x212>
 800ffb2:	4643      	mov	r3, r8
 800ffb4:	ebab 0102 	sub.w	r1, fp, r2
 800ffb8:	4630      	mov	r0, r6
 800ffba:	f7ff febf 	bl	800fd3c <swapfunc>
 800ffbe:	9b03      	ldr	r3, [sp, #12]
 800ffc0:	eba3 0209 	sub.w	r2, r3, r9
 800ffc4:	eba9 0707 	sub.w	r7, r9, r7
 800ffc8:	1b12      	subs	r2, r2, r4
 800ffca:	42ba      	cmp	r2, r7
 800ffcc:	bf28      	it	cs
 800ffce:	463a      	movcs	r2, r7
 800ffd0:	b12a      	cbz	r2, 800ffde <qsort+0x232>
 800ffd2:	9903      	ldr	r1, [sp, #12]
 800ffd4:	4643      	mov	r3, r8
 800ffd6:	1a89      	subs	r1, r1, r2
 800ffd8:	4658      	mov	r0, fp
 800ffda:	f7ff feaf 	bl	800fd3c <swapfunc>
 800ffde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ffe2:	9b03      	ldr	r3, [sp, #12]
 800ffe4:	454f      	cmp	r7, r9
 800ffe6:	eba3 0007 	sub.w	r0, r3, r7
 800ffea:	d904      	bls.n	800fff6 <qsort+0x24a>
 800ffec:	4633      	mov	r3, r6
 800ffee:	46b9      	mov	r9, r7
 800fff0:	9f01      	ldr	r7, [sp, #4]
 800fff2:	4606      	mov	r6, r0
 800fff4:	4618      	mov	r0, r3
 800fff6:	42a7      	cmp	r7, r4
 800fff8:	d921      	bls.n	801003e <qsort+0x292>
 800fffa:	fbb7 f1f4 	udiv	r1, r7, r4
 800fffe:	9b02      	ldr	r3, [sp, #8]
 8010000:	2b07      	cmp	r3, #7
 8010002:	d80d      	bhi.n	8010020 <qsort+0x274>
 8010004:	aa16      	add	r2, sp, #88	; 0x58
 8010006:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801000a:	fbb9 f2f4 	udiv	r2, r9, r4
 801000e:	f843 6c40 	str.w	r6, [r3, #-64]
 8010012:	f843 2c3c 	str.w	r2, [r3, #-60]
 8010016:	9b02      	ldr	r3, [sp, #8]
 8010018:	3301      	adds	r3, #1
 801001a:	9302      	str	r3, [sp, #8]
 801001c:	4606      	mov	r6, r0
 801001e:	e6d6      	b.n	800fdce <qsort+0x22>
 8010020:	4653      	mov	r3, sl
 8010022:	4622      	mov	r2, r4
 8010024:	f7ff fec2 	bl	800fdac <qsort>
 8010028:	45a1      	cmp	r9, r4
 801002a:	d80b      	bhi.n	8010044 <qsort+0x298>
 801002c:	9b02      	ldr	r3, [sp, #8]
 801002e:	aa16      	add	r2, sp, #88	; 0x58
 8010030:	3b01      	subs	r3, #1
 8010032:	9302      	str	r3, [sp, #8]
 8010034:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010038:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 801003c:	e7ee      	b.n	801001c <qsort+0x270>
 801003e:	45a1      	cmp	r9, r4
 8010040:	f67f aed2 	bls.w	800fde8 <qsort+0x3c>
 8010044:	fbb9 f1f4 	udiv	r1, r9, r4
 8010048:	4630      	mov	r0, r6
 801004a:	e7e7      	b.n	801001c <qsort+0x270>

0801004c <memset>:
 801004c:	4402      	add	r2, r0
 801004e:	4603      	mov	r3, r0
 8010050:	4293      	cmp	r3, r2
 8010052:	d100      	bne.n	8010056 <memset+0xa>
 8010054:	4770      	bx	lr
 8010056:	f803 1b01 	strb.w	r1, [r3], #1
 801005a:	e7f9      	b.n	8010050 <memset+0x4>

0801005c <_reclaim_reent>:
 801005c:	4b29      	ldr	r3, [pc, #164]	; (8010104 <_reclaim_reent+0xa8>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4283      	cmp	r3, r0
 8010062:	b570      	push	{r4, r5, r6, lr}
 8010064:	4604      	mov	r4, r0
 8010066:	d04b      	beq.n	8010100 <_reclaim_reent+0xa4>
 8010068:	69c3      	ldr	r3, [r0, #28]
 801006a:	b143      	cbz	r3, 801007e <_reclaim_reent+0x22>
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d144      	bne.n	80100fc <_reclaim_reent+0xa0>
 8010072:	69e3      	ldr	r3, [r4, #28]
 8010074:	6819      	ldr	r1, [r3, #0]
 8010076:	b111      	cbz	r1, 801007e <_reclaim_reent+0x22>
 8010078:	4620      	mov	r0, r4
 801007a:	f000 f87f 	bl	801017c <_free_r>
 801007e:	6961      	ldr	r1, [r4, #20]
 8010080:	b111      	cbz	r1, 8010088 <_reclaim_reent+0x2c>
 8010082:	4620      	mov	r0, r4
 8010084:	f000 f87a 	bl	801017c <_free_r>
 8010088:	69e1      	ldr	r1, [r4, #28]
 801008a:	b111      	cbz	r1, 8010092 <_reclaim_reent+0x36>
 801008c:	4620      	mov	r0, r4
 801008e:	f000 f875 	bl	801017c <_free_r>
 8010092:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010094:	b111      	cbz	r1, 801009c <_reclaim_reent+0x40>
 8010096:	4620      	mov	r0, r4
 8010098:	f000 f870 	bl	801017c <_free_r>
 801009c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801009e:	b111      	cbz	r1, 80100a6 <_reclaim_reent+0x4a>
 80100a0:	4620      	mov	r0, r4
 80100a2:	f000 f86b 	bl	801017c <_free_r>
 80100a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80100a8:	b111      	cbz	r1, 80100b0 <_reclaim_reent+0x54>
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 f866 	bl	801017c <_free_r>
 80100b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80100b2:	b111      	cbz	r1, 80100ba <_reclaim_reent+0x5e>
 80100b4:	4620      	mov	r0, r4
 80100b6:	f000 f861 	bl	801017c <_free_r>
 80100ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80100bc:	b111      	cbz	r1, 80100c4 <_reclaim_reent+0x68>
 80100be:	4620      	mov	r0, r4
 80100c0:	f000 f85c 	bl	801017c <_free_r>
 80100c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80100c6:	b111      	cbz	r1, 80100ce <_reclaim_reent+0x72>
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 f857 	bl	801017c <_free_r>
 80100ce:	6a23      	ldr	r3, [r4, #32]
 80100d0:	b1b3      	cbz	r3, 8010100 <_reclaim_reent+0xa4>
 80100d2:	4620      	mov	r0, r4
 80100d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100d8:	4718      	bx	r3
 80100da:	5949      	ldr	r1, [r1, r5]
 80100dc:	b941      	cbnz	r1, 80100f0 <_reclaim_reent+0x94>
 80100de:	3504      	adds	r5, #4
 80100e0:	69e3      	ldr	r3, [r4, #28]
 80100e2:	2d80      	cmp	r5, #128	; 0x80
 80100e4:	68d9      	ldr	r1, [r3, #12]
 80100e6:	d1f8      	bne.n	80100da <_reclaim_reent+0x7e>
 80100e8:	4620      	mov	r0, r4
 80100ea:	f000 f847 	bl	801017c <_free_r>
 80100ee:	e7c0      	b.n	8010072 <_reclaim_reent+0x16>
 80100f0:	680e      	ldr	r6, [r1, #0]
 80100f2:	4620      	mov	r0, r4
 80100f4:	f000 f842 	bl	801017c <_free_r>
 80100f8:	4631      	mov	r1, r6
 80100fa:	e7ef      	b.n	80100dc <_reclaim_reent+0x80>
 80100fc:	2500      	movs	r5, #0
 80100fe:	e7ef      	b.n	80100e0 <_reclaim_reent+0x84>
 8010100:	bd70      	pop	{r4, r5, r6, pc}
 8010102:	bf00      	nop
 8010104:	2000010c 	.word	0x2000010c

08010108 <__errno>:
 8010108:	4b01      	ldr	r3, [pc, #4]	; (8010110 <__errno+0x8>)
 801010a:	6818      	ldr	r0, [r3, #0]
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	2000010c 	.word	0x2000010c

08010114 <__libc_init_array>:
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	4d0d      	ldr	r5, [pc, #52]	; (801014c <__libc_init_array+0x38>)
 8010118:	4c0d      	ldr	r4, [pc, #52]	; (8010150 <__libc_init_array+0x3c>)
 801011a:	1b64      	subs	r4, r4, r5
 801011c:	10a4      	asrs	r4, r4, #2
 801011e:	2600      	movs	r6, #0
 8010120:	42a6      	cmp	r6, r4
 8010122:	d109      	bne.n	8010138 <__libc_init_array+0x24>
 8010124:	4d0b      	ldr	r5, [pc, #44]	; (8010154 <__libc_init_array+0x40>)
 8010126:	4c0c      	ldr	r4, [pc, #48]	; (8010158 <__libc_init_array+0x44>)
 8010128:	f000 fa88 	bl	801063c <_init>
 801012c:	1b64      	subs	r4, r4, r5
 801012e:	10a4      	asrs	r4, r4, #2
 8010130:	2600      	movs	r6, #0
 8010132:	42a6      	cmp	r6, r4
 8010134:	d105      	bne.n	8010142 <__libc_init_array+0x2e>
 8010136:	bd70      	pop	{r4, r5, r6, pc}
 8010138:	f855 3b04 	ldr.w	r3, [r5], #4
 801013c:	4798      	blx	r3
 801013e:	3601      	adds	r6, #1
 8010140:	e7ee      	b.n	8010120 <__libc_init_array+0xc>
 8010142:	f855 3b04 	ldr.w	r3, [r5], #4
 8010146:	4798      	blx	r3
 8010148:	3601      	adds	r6, #1
 801014a:	e7f2      	b.n	8010132 <__libc_init_array+0x1e>
 801014c:	08010838 	.word	0x08010838
 8010150:	08010838 	.word	0x08010838
 8010154:	08010838 	.word	0x08010838
 8010158:	0801083c 	.word	0x0801083c

0801015c <__retarget_lock_acquire_recursive>:
 801015c:	4770      	bx	lr

0801015e <__retarget_lock_release_recursive>:
 801015e:	4770      	bx	lr

08010160 <memcpy>:
 8010160:	440a      	add	r2, r1
 8010162:	4291      	cmp	r1, r2
 8010164:	f100 33ff 	add.w	r3, r0, #4294967295
 8010168:	d100      	bne.n	801016c <memcpy+0xc>
 801016a:	4770      	bx	lr
 801016c:	b510      	push	{r4, lr}
 801016e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010176:	4291      	cmp	r1, r2
 8010178:	d1f9      	bne.n	801016e <memcpy+0xe>
 801017a:	bd10      	pop	{r4, pc}

0801017c <_free_r>:
 801017c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801017e:	2900      	cmp	r1, #0
 8010180:	d044      	beq.n	801020c <_free_r+0x90>
 8010182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010186:	9001      	str	r0, [sp, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	f1a1 0404 	sub.w	r4, r1, #4
 801018e:	bfb8      	it	lt
 8010190:	18e4      	addlt	r4, r4, r3
 8010192:	f000 f83f 	bl	8010214 <__malloc_lock>
 8010196:	4a1e      	ldr	r2, [pc, #120]	; (8010210 <_free_r+0x94>)
 8010198:	9801      	ldr	r0, [sp, #4]
 801019a:	6813      	ldr	r3, [r2, #0]
 801019c:	b933      	cbnz	r3, 80101ac <_free_r+0x30>
 801019e:	6063      	str	r3, [r4, #4]
 80101a0:	6014      	str	r4, [r2, #0]
 80101a2:	b003      	add	sp, #12
 80101a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101a8:	f000 b83a 	b.w	8010220 <__malloc_unlock>
 80101ac:	42a3      	cmp	r3, r4
 80101ae:	d908      	bls.n	80101c2 <_free_r+0x46>
 80101b0:	6825      	ldr	r5, [r4, #0]
 80101b2:	1961      	adds	r1, r4, r5
 80101b4:	428b      	cmp	r3, r1
 80101b6:	bf01      	itttt	eq
 80101b8:	6819      	ldreq	r1, [r3, #0]
 80101ba:	685b      	ldreq	r3, [r3, #4]
 80101bc:	1949      	addeq	r1, r1, r5
 80101be:	6021      	streq	r1, [r4, #0]
 80101c0:	e7ed      	b.n	801019e <_free_r+0x22>
 80101c2:	461a      	mov	r2, r3
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	b10b      	cbz	r3, 80101cc <_free_r+0x50>
 80101c8:	42a3      	cmp	r3, r4
 80101ca:	d9fa      	bls.n	80101c2 <_free_r+0x46>
 80101cc:	6811      	ldr	r1, [r2, #0]
 80101ce:	1855      	adds	r5, r2, r1
 80101d0:	42a5      	cmp	r5, r4
 80101d2:	d10b      	bne.n	80101ec <_free_r+0x70>
 80101d4:	6824      	ldr	r4, [r4, #0]
 80101d6:	4421      	add	r1, r4
 80101d8:	1854      	adds	r4, r2, r1
 80101da:	42a3      	cmp	r3, r4
 80101dc:	6011      	str	r1, [r2, #0]
 80101de:	d1e0      	bne.n	80101a2 <_free_r+0x26>
 80101e0:	681c      	ldr	r4, [r3, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	6053      	str	r3, [r2, #4]
 80101e6:	440c      	add	r4, r1
 80101e8:	6014      	str	r4, [r2, #0]
 80101ea:	e7da      	b.n	80101a2 <_free_r+0x26>
 80101ec:	d902      	bls.n	80101f4 <_free_r+0x78>
 80101ee:	230c      	movs	r3, #12
 80101f0:	6003      	str	r3, [r0, #0]
 80101f2:	e7d6      	b.n	80101a2 <_free_r+0x26>
 80101f4:	6825      	ldr	r5, [r4, #0]
 80101f6:	1961      	adds	r1, r4, r5
 80101f8:	428b      	cmp	r3, r1
 80101fa:	bf04      	itt	eq
 80101fc:	6819      	ldreq	r1, [r3, #0]
 80101fe:	685b      	ldreq	r3, [r3, #4]
 8010200:	6063      	str	r3, [r4, #4]
 8010202:	bf04      	itt	eq
 8010204:	1949      	addeq	r1, r1, r5
 8010206:	6021      	streq	r1, [r4, #0]
 8010208:	6054      	str	r4, [r2, #4]
 801020a:	e7ca      	b.n	80101a2 <_free_r+0x26>
 801020c:	b003      	add	sp, #12
 801020e:	bd30      	pop	{r4, r5, pc}
 8010210:	20003194 	.word	0x20003194

08010214 <__malloc_lock>:
 8010214:	4801      	ldr	r0, [pc, #4]	; (801021c <__malloc_lock+0x8>)
 8010216:	f7ff bfa1 	b.w	801015c <__retarget_lock_acquire_recursive>
 801021a:	bf00      	nop
 801021c:	20003190 	.word	0x20003190

08010220 <__malloc_unlock>:
 8010220:	4801      	ldr	r0, [pc, #4]	; (8010228 <__malloc_unlock+0x8>)
 8010222:	f7ff bf9c 	b.w	801015e <__retarget_lock_release_recursive>
 8010226:	bf00      	nop
 8010228:	20003190 	.word	0x20003190
 801022c:	00000000 	.word	0x00000000

08010230 <exp>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	ed2d 8b02 	vpush	{d8}
 8010236:	ec55 4b10 	vmov	r4, r5, d0
 801023a:	f000 f84d 	bl	80102d8 <__ieee754_exp>
 801023e:	eeb0 8a40 	vmov.f32	s16, s0
 8010242:	eef0 8a60 	vmov.f32	s17, s1
 8010246:	ec45 4b10 	vmov	d0, r4, r5
 801024a:	f000 f839 	bl	80102c0 <finite>
 801024e:	b168      	cbz	r0, 801026c <exp+0x3c>
 8010250:	a317      	add	r3, pc, #92	; (adr r3, 80102b0 <exp+0x80>)
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	4620      	mov	r0, r4
 8010258:	4629      	mov	r1, r5
 801025a:	f7f0 fc05 	bl	8000a68 <__aeabi_dcmpgt>
 801025e:	b160      	cbz	r0, 801027a <exp+0x4a>
 8010260:	f7ff ff52 	bl	8010108 <__errno>
 8010264:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80102a0 <exp+0x70>
 8010268:	2322      	movs	r3, #34	; 0x22
 801026a:	6003      	str	r3, [r0, #0]
 801026c:	eeb0 0a48 	vmov.f32	s0, s16
 8010270:	eef0 0a68 	vmov.f32	s1, s17
 8010274:	ecbd 8b02 	vpop	{d8}
 8010278:	bd38      	pop	{r3, r4, r5, pc}
 801027a:	a30f      	add	r3, pc, #60	; (adr r3, 80102b8 <exp+0x88>)
 801027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010280:	4620      	mov	r0, r4
 8010282:	4629      	mov	r1, r5
 8010284:	f7f0 fbd2 	bl	8000a2c <__aeabi_dcmplt>
 8010288:	2800      	cmp	r0, #0
 801028a:	d0ef      	beq.n	801026c <exp+0x3c>
 801028c:	f7ff ff3c 	bl	8010108 <__errno>
 8010290:	2322      	movs	r3, #34	; 0x22
 8010292:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80102a8 <exp+0x78>
 8010296:	6003      	str	r3, [r0, #0]
 8010298:	e7e8      	b.n	801026c <exp+0x3c>
 801029a:	bf00      	nop
 801029c:	f3af 8000 	nop.w
 80102a0:	00000000 	.word	0x00000000
 80102a4:	7ff00000 	.word	0x7ff00000
	...
 80102b0:	fefa39ef 	.word	0xfefa39ef
 80102b4:	40862e42 	.word	0x40862e42
 80102b8:	d52d3051 	.word	0xd52d3051
 80102bc:	c0874910 	.word	0xc0874910

080102c0 <finite>:
 80102c0:	b082      	sub	sp, #8
 80102c2:	ed8d 0b00 	vstr	d0, [sp]
 80102c6:	9801      	ldr	r0, [sp, #4]
 80102c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80102cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80102d0:	0fc0      	lsrs	r0, r0, #31
 80102d2:	b002      	add	sp, #8
 80102d4:	4770      	bx	lr
	...

080102d8 <__ieee754_exp>:
 80102d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102dc:	ec55 4b10 	vmov	r4, r5, d0
 80102e0:	49b5      	ldr	r1, [pc, #724]	; (80105b8 <__ieee754_exp+0x2e0>)
 80102e2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80102e6:	428a      	cmp	r2, r1
 80102e8:	ed2d 8b04 	vpush	{d8-d9}
 80102ec:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80102f0:	d93b      	bls.n	801036a <__ieee754_exp+0x92>
 80102f2:	49b2      	ldr	r1, [pc, #712]	; (80105bc <__ieee754_exp+0x2e4>)
 80102f4:	428a      	cmp	r2, r1
 80102f6:	d916      	bls.n	8010326 <__ieee754_exp+0x4e>
 80102f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80102fc:	4323      	orrs	r3, r4
 80102fe:	ee10 2a10 	vmov	r2, s0
 8010302:	d007      	beq.n	8010314 <__ieee754_exp+0x3c>
 8010304:	462b      	mov	r3, r5
 8010306:	4620      	mov	r0, r4
 8010308:	4629      	mov	r1, r5
 801030a:	f7ef ff67 	bl	80001dc <__adddf3>
 801030e:	4604      	mov	r4, r0
 8010310:	460d      	mov	r5, r1
 8010312:	e002      	b.n	801031a <__ieee754_exp+0x42>
 8010314:	b10e      	cbz	r6, 801031a <__ieee754_exp+0x42>
 8010316:	2400      	movs	r4, #0
 8010318:	2500      	movs	r5, #0
 801031a:	ecbd 8b04 	vpop	{d8-d9}
 801031e:	ec45 4b10 	vmov	d0, r4, r5
 8010322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010326:	a38e      	add	r3, pc, #568	; (adr r3, 8010560 <__ieee754_exp+0x288>)
 8010328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032c:	ee10 0a10 	vmov	r0, s0
 8010330:	4629      	mov	r1, r5
 8010332:	f7f0 fb99 	bl	8000a68 <__aeabi_dcmpgt>
 8010336:	4607      	mov	r7, r0
 8010338:	b130      	cbz	r0, 8010348 <__ieee754_exp+0x70>
 801033a:	ecbd 8b04 	vpop	{d8-d9}
 801033e:	2000      	movs	r0, #0
 8010340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010344:	f000 b971 	b.w	801062a <__math_oflow>
 8010348:	a387      	add	r3, pc, #540	; (adr r3, 8010568 <__ieee754_exp+0x290>)
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	4620      	mov	r0, r4
 8010350:	4629      	mov	r1, r5
 8010352:	f7f0 fb6b 	bl	8000a2c <__aeabi_dcmplt>
 8010356:	2800      	cmp	r0, #0
 8010358:	f000 808b 	beq.w	8010472 <__ieee754_exp+0x19a>
 801035c:	ecbd 8b04 	vpop	{d8-d9}
 8010360:	4638      	mov	r0, r7
 8010362:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010366:	f000 b957 	b.w	8010618 <__math_uflow>
 801036a:	4b95      	ldr	r3, [pc, #596]	; (80105c0 <__ieee754_exp+0x2e8>)
 801036c:	429a      	cmp	r2, r3
 801036e:	f240 80ac 	bls.w	80104ca <__ieee754_exp+0x1f2>
 8010372:	4b94      	ldr	r3, [pc, #592]	; (80105c4 <__ieee754_exp+0x2ec>)
 8010374:	429a      	cmp	r2, r3
 8010376:	d87c      	bhi.n	8010472 <__ieee754_exp+0x19a>
 8010378:	4b93      	ldr	r3, [pc, #588]	; (80105c8 <__ieee754_exp+0x2f0>)
 801037a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801037e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010382:	ee10 0a10 	vmov	r0, s0
 8010386:	4629      	mov	r1, r5
 8010388:	f7ef ff26 	bl	80001d8 <__aeabi_dsub>
 801038c:	4b8f      	ldr	r3, [pc, #572]	; (80105cc <__ieee754_exp+0x2f4>)
 801038e:	00f7      	lsls	r7, r6, #3
 8010390:	443b      	add	r3, r7
 8010392:	ed93 7b00 	vldr	d7, [r3]
 8010396:	f1c6 0a01 	rsb	sl, r6, #1
 801039a:	4680      	mov	r8, r0
 801039c:	4689      	mov	r9, r1
 801039e:	ebaa 0a06 	sub.w	sl, sl, r6
 80103a2:	eeb0 8a47 	vmov.f32	s16, s14
 80103a6:	eef0 8a67 	vmov.f32	s17, s15
 80103aa:	ec53 2b18 	vmov	r2, r3, d8
 80103ae:	4640      	mov	r0, r8
 80103b0:	4649      	mov	r1, r9
 80103b2:	f7ef ff11 	bl	80001d8 <__aeabi_dsub>
 80103b6:	4604      	mov	r4, r0
 80103b8:	460d      	mov	r5, r1
 80103ba:	4622      	mov	r2, r4
 80103bc:	462b      	mov	r3, r5
 80103be:	4620      	mov	r0, r4
 80103c0:	4629      	mov	r1, r5
 80103c2:	f7f0 f8c1 	bl	8000548 <__aeabi_dmul>
 80103c6:	a36a      	add	r3, pc, #424	; (adr r3, 8010570 <__ieee754_exp+0x298>)
 80103c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103cc:	4606      	mov	r6, r0
 80103ce:	460f      	mov	r7, r1
 80103d0:	f7f0 f8ba 	bl	8000548 <__aeabi_dmul>
 80103d4:	a368      	add	r3, pc, #416	; (adr r3, 8010578 <__ieee754_exp+0x2a0>)
 80103d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103da:	f7ef fefd 	bl	80001d8 <__aeabi_dsub>
 80103de:	4632      	mov	r2, r6
 80103e0:	463b      	mov	r3, r7
 80103e2:	f7f0 f8b1 	bl	8000548 <__aeabi_dmul>
 80103e6:	a366      	add	r3, pc, #408	; (adr r3, 8010580 <__ieee754_exp+0x2a8>)
 80103e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ec:	f7ef fef6 	bl	80001dc <__adddf3>
 80103f0:	4632      	mov	r2, r6
 80103f2:	463b      	mov	r3, r7
 80103f4:	f7f0 f8a8 	bl	8000548 <__aeabi_dmul>
 80103f8:	a363      	add	r3, pc, #396	; (adr r3, 8010588 <__ieee754_exp+0x2b0>)
 80103fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fe:	f7ef feeb 	bl	80001d8 <__aeabi_dsub>
 8010402:	4632      	mov	r2, r6
 8010404:	463b      	mov	r3, r7
 8010406:	f7f0 f89f 	bl	8000548 <__aeabi_dmul>
 801040a:	a361      	add	r3, pc, #388	; (adr r3, 8010590 <__ieee754_exp+0x2b8>)
 801040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010410:	f7ef fee4 	bl	80001dc <__adddf3>
 8010414:	4632      	mov	r2, r6
 8010416:	463b      	mov	r3, r7
 8010418:	f7f0 f896 	bl	8000548 <__aeabi_dmul>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	4620      	mov	r0, r4
 8010422:	4629      	mov	r1, r5
 8010424:	f7ef fed8 	bl	80001d8 <__aeabi_dsub>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	4606      	mov	r6, r0
 801042e:	460f      	mov	r7, r1
 8010430:	4620      	mov	r0, r4
 8010432:	4629      	mov	r1, r5
 8010434:	f7f0 f888 	bl	8000548 <__aeabi_dmul>
 8010438:	ec41 0b19 	vmov	d9, r0, r1
 801043c:	f1ba 0f00 	cmp.w	sl, #0
 8010440:	d15d      	bne.n	80104fe <__ieee754_exp+0x226>
 8010442:	2200      	movs	r2, #0
 8010444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010448:	4630      	mov	r0, r6
 801044a:	4639      	mov	r1, r7
 801044c:	f7ef fec4 	bl	80001d8 <__aeabi_dsub>
 8010450:	4602      	mov	r2, r0
 8010452:	460b      	mov	r3, r1
 8010454:	ec51 0b19 	vmov	r0, r1, d9
 8010458:	f7f0 f9a0 	bl	800079c <__aeabi_ddiv>
 801045c:	4622      	mov	r2, r4
 801045e:	462b      	mov	r3, r5
 8010460:	f7ef feba 	bl	80001d8 <__aeabi_dsub>
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	2000      	movs	r0, #0
 801046a:	4959      	ldr	r1, [pc, #356]	; (80105d0 <__ieee754_exp+0x2f8>)
 801046c:	f7ef feb4 	bl	80001d8 <__aeabi_dsub>
 8010470:	e74d      	b.n	801030e <__ieee754_exp+0x36>
 8010472:	4b58      	ldr	r3, [pc, #352]	; (80105d4 <__ieee754_exp+0x2fc>)
 8010474:	4620      	mov	r0, r4
 8010476:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801047a:	4629      	mov	r1, r5
 801047c:	a346      	add	r3, pc, #280	; (adr r3, 8010598 <__ieee754_exp+0x2c0>)
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	f7f0 f861 	bl	8000548 <__aeabi_dmul>
 8010486:	e9d6 2300 	ldrd	r2, r3, [r6]
 801048a:	f7ef fea7 	bl	80001dc <__adddf3>
 801048e:	f7f0 faf5 	bl	8000a7c <__aeabi_d2iz>
 8010492:	4682      	mov	sl, r0
 8010494:	f7ef ffee 	bl	8000474 <__aeabi_i2d>
 8010498:	a341      	add	r3, pc, #260	; (adr r3, 80105a0 <__ieee754_exp+0x2c8>)
 801049a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049e:	4606      	mov	r6, r0
 80104a0:	460f      	mov	r7, r1
 80104a2:	f7f0 f851 	bl	8000548 <__aeabi_dmul>
 80104a6:	4602      	mov	r2, r0
 80104a8:	460b      	mov	r3, r1
 80104aa:	4620      	mov	r0, r4
 80104ac:	4629      	mov	r1, r5
 80104ae:	f7ef fe93 	bl	80001d8 <__aeabi_dsub>
 80104b2:	a33d      	add	r3, pc, #244	; (adr r3, 80105a8 <__ieee754_exp+0x2d0>)
 80104b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b8:	4680      	mov	r8, r0
 80104ba:	4689      	mov	r9, r1
 80104bc:	4630      	mov	r0, r6
 80104be:	4639      	mov	r1, r7
 80104c0:	f7f0 f842 	bl	8000548 <__aeabi_dmul>
 80104c4:	ec41 0b18 	vmov	d8, r0, r1
 80104c8:	e76f      	b.n	80103aa <__ieee754_exp+0xd2>
 80104ca:	4b43      	ldr	r3, [pc, #268]	; (80105d8 <__ieee754_exp+0x300>)
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d811      	bhi.n	80104f4 <__ieee754_exp+0x21c>
 80104d0:	a337      	add	r3, pc, #220	; (adr r3, 80105b0 <__ieee754_exp+0x2d8>)
 80104d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d6:	ee10 0a10 	vmov	r0, s0
 80104da:	4629      	mov	r1, r5
 80104dc:	f7ef fe7e 	bl	80001dc <__adddf3>
 80104e0:	4b3b      	ldr	r3, [pc, #236]	; (80105d0 <__ieee754_exp+0x2f8>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	f7f0 fac0 	bl	8000a68 <__aeabi_dcmpgt>
 80104e8:	b138      	cbz	r0, 80104fa <__ieee754_exp+0x222>
 80104ea:	4b39      	ldr	r3, [pc, #228]	; (80105d0 <__ieee754_exp+0x2f8>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	4620      	mov	r0, r4
 80104f0:	4629      	mov	r1, r5
 80104f2:	e70a      	b.n	801030a <__ieee754_exp+0x32>
 80104f4:	f04f 0a00 	mov.w	sl, #0
 80104f8:	e75f      	b.n	80103ba <__ieee754_exp+0xe2>
 80104fa:	4682      	mov	sl, r0
 80104fc:	e75d      	b.n	80103ba <__ieee754_exp+0xe2>
 80104fe:	4632      	mov	r2, r6
 8010500:	463b      	mov	r3, r7
 8010502:	2000      	movs	r0, #0
 8010504:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010508:	f7ef fe66 	bl	80001d8 <__aeabi_dsub>
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	ec51 0b19 	vmov	r0, r1, d9
 8010514:	f7f0 f942 	bl	800079c <__aeabi_ddiv>
 8010518:	4602      	mov	r2, r0
 801051a:	460b      	mov	r3, r1
 801051c:	ec51 0b18 	vmov	r0, r1, d8
 8010520:	f7ef fe5a 	bl	80001d8 <__aeabi_dsub>
 8010524:	4642      	mov	r2, r8
 8010526:	464b      	mov	r3, r9
 8010528:	f7ef fe56 	bl	80001d8 <__aeabi_dsub>
 801052c:	4602      	mov	r2, r0
 801052e:	460b      	mov	r3, r1
 8010530:	2000      	movs	r0, #0
 8010532:	4927      	ldr	r1, [pc, #156]	; (80105d0 <__ieee754_exp+0x2f8>)
 8010534:	f7ef fe50 	bl	80001d8 <__aeabi_dsub>
 8010538:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801053c:	4592      	cmp	sl, r2
 801053e:	db02      	blt.n	8010546 <__ieee754_exp+0x26e>
 8010540:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010544:	e6e3      	b.n	801030e <__ieee754_exp+0x36>
 8010546:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801054a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801054e:	2200      	movs	r2, #0
 8010550:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010554:	f7ef fff8 	bl	8000548 <__aeabi_dmul>
 8010558:	e6d9      	b.n	801030e <__ieee754_exp+0x36>
 801055a:	bf00      	nop
 801055c:	f3af 8000 	nop.w
 8010560:	fefa39ef 	.word	0xfefa39ef
 8010564:	40862e42 	.word	0x40862e42
 8010568:	d52d3051 	.word	0xd52d3051
 801056c:	c0874910 	.word	0xc0874910
 8010570:	72bea4d0 	.word	0x72bea4d0
 8010574:	3e663769 	.word	0x3e663769
 8010578:	c5d26bf1 	.word	0xc5d26bf1
 801057c:	3ebbbd41 	.word	0x3ebbbd41
 8010580:	af25de2c 	.word	0xaf25de2c
 8010584:	3f11566a 	.word	0x3f11566a
 8010588:	16bebd93 	.word	0x16bebd93
 801058c:	3f66c16c 	.word	0x3f66c16c
 8010590:	5555553e 	.word	0x5555553e
 8010594:	3fc55555 	.word	0x3fc55555
 8010598:	652b82fe 	.word	0x652b82fe
 801059c:	3ff71547 	.word	0x3ff71547
 80105a0:	fee00000 	.word	0xfee00000
 80105a4:	3fe62e42 	.word	0x3fe62e42
 80105a8:	35793c76 	.word	0x35793c76
 80105ac:	3dea39ef 	.word	0x3dea39ef
 80105b0:	8800759c 	.word	0x8800759c
 80105b4:	7e37e43c 	.word	0x7e37e43c
 80105b8:	40862e41 	.word	0x40862e41
 80105bc:	7fefffff 	.word	0x7fefffff
 80105c0:	3fd62e42 	.word	0x3fd62e42
 80105c4:	3ff0a2b1 	.word	0x3ff0a2b1
 80105c8:	08010810 	.word	0x08010810
 80105cc:	08010820 	.word	0x08010820
 80105d0:	3ff00000 	.word	0x3ff00000
 80105d4:	08010800 	.word	0x08010800
 80105d8:	3defffff 	.word	0x3defffff

080105dc <with_errno>:
 80105dc:	b570      	push	{r4, r5, r6, lr}
 80105de:	4604      	mov	r4, r0
 80105e0:	460d      	mov	r5, r1
 80105e2:	4616      	mov	r6, r2
 80105e4:	f7ff fd90 	bl	8010108 <__errno>
 80105e8:	4629      	mov	r1, r5
 80105ea:	6006      	str	r6, [r0, #0]
 80105ec:	4620      	mov	r0, r4
 80105ee:	bd70      	pop	{r4, r5, r6, pc}

080105f0 <xflow>:
 80105f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105f2:	4614      	mov	r4, r2
 80105f4:	461d      	mov	r5, r3
 80105f6:	b108      	cbz	r0, 80105fc <xflow+0xc>
 80105f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80105fc:	e9cd 2300 	strd	r2, r3, [sp]
 8010600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010604:	4620      	mov	r0, r4
 8010606:	4629      	mov	r1, r5
 8010608:	f7ef ff9e 	bl	8000548 <__aeabi_dmul>
 801060c:	2222      	movs	r2, #34	; 0x22
 801060e:	b003      	add	sp, #12
 8010610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010614:	f7ff bfe2 	b.w	80105dc <with_errno>

08010618 <__math_uflow>:
 8010618:	b508      	push	{r3, lr}
 801061a:	2200      	movs	r2, #0
 801061c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010620:	f7ff ffe6 	bl	80105f0 <xflow>
 8010624:	ec41 0b10 	vmov	d0, r0, r1
 8010628:	bd08      	pop	{r3, pc}

0801062a <__math_oflow>:
 801062a:	b508      	push	{r3, lr}
 801062c:	2200      	movs	r2, #0
 801062e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010632:	f7ff ffdd 	bl	80105f0 <xflow>
 8010636:	ec41 0b10 	vmov	d0, r0, r1
 801063a:	bd08      	pop	{r3, pc}

0801063c <_init>:
 801063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801063e:	bf00      	nop
 8010640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010642:	bc08      	pop	{r3}
 8010644:	469e      	mov	lr, r3
 8010646:	4770      	bx	lr

08010648 <_fini>:
 8010648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801064a:	bf00      	nop
 801064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801064e:	bc08      	pop	{r3}
 8010650:	469e      	mov	lr, r3
 8010652:	4770      	bx	lr
