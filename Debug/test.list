
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08011898  08011898  00021898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c40  08011c40  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  08011c40  08011c40  00021c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c48  08011c48  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c48  08011c48  00021c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c4c  08011c4c  00021c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08011c50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030118  2**0
                  CONTENTS
 10 .bss          00002ed0  20000118  20000118  00030118  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002fe8  20002fe8  00030118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   000252b6  00000000  00000000  000301ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a09  00000000  00000000  00055484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be8  00000000  00000000  0005ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001582  00000000  00000000  0005ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c1d  00000000  00000000  0005dffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026a7c  00000000  00000000  00080c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c45c1  00000000  00000000  000a7693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007c98  00000000  00000000  0016bc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001738ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011880 	.word	0x08011880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	08011880 	.word	0x08011880

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8a:	f000 b9f1 	b.w	8000f70 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f883 	bl	8000ca8 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f876 	bl	8000ca8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f865 	bl	8000ca8 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f857 	bl	8000ca8 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a6 	b.w	8000f70 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff fef1 	bl	8000a2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_dmul>
 8000c7a:	f000 f97b 	bl	8000f74 <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fbe8 	bl	8000454 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fc5e 	bl	8000548 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faa0 	bl	80001d8 <__aeabi_dsub>
 8000c98:	f000 f96c 	bl	8000f74 <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fe8 <fromTickToMs+0x34>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe8 <fromTickToMs+0x34>
 8000fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	447a0000 	.word	0x447a0000

08000fec <cmp>:
uint32_t MS5837_conv_start_tick = CONVERTION_TIMEOUT;

void calculate();
void init_new_convertion();

int cmp(const void *a, const void *b) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MS5837_02BA_init>:

bool MS5837_02BA_begin(I2C_HandleTypeDef * hi2c){
	return(MS5837_02BA_init(hi2c));
}

bool MS5837_02BA_init(I2C_HandleTypeDef * hi2c){
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
	MS5837_hi2c = hi2c;
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	HAL_I2C_Init(hi2c);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f005 fdf2 	bl	8006c04 <HAL_I2C_Init>
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, HAL_MAX_DELAY) != HAL_OK){
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <MS5837_02BA_init+0xa4>)
 800102e:	21ec      	movs	r1, #236	; 0xec
 8001030:	f005 fe78 	bl	8006d24 <HAL_I2C_Master_Transmit>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MS5837_02BA_init+0x32>
		return false;
 800103a:	2300      	movs	r3, #0
 800103c:	e032      	b.n	80010a4 <MS5837_02BA_init+0x98>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e029      	b.n	800109c <MS5837_02BA_init+0x90>
		uint8_t prom_buff[2];
		prom_addr += 2;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3302      	adds	r3, #2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 020e 	add.w	r2, r7, #14
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21ec      	movs	r1, #236	; 0xec
 8001062:	f005 fe5f 	bl	8006d24 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	21ec      	movs	r1, #236	; 0xec
 8001078:	f005 ff48 	bl	8006f0c <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	7b7a      	ldrb	r2, [r7, #13]
 8001082:	4313      	orrs	r3, r2
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	17d9      	asrs	r1, r3, #31
 8001088:	461c      	mov	r4, r3
 800108a:	460d      	mov	r5, r1
 800108c:	4909      	ldr	r1, [pc, #36]	; (80010b4 <MS5837_02BA_init+0xa8>)
 800108e:	00d3      	lsls	r3, r2, #3
 8001090:	440b      	add	r3, r1
 8001092:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d9d2      	bls.n	8001048 <MS5837_02BA_init+0x3c>
	}
	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bdb0      	pop	{r4, r5, r7, pc}
 80010ac:	20000134 	.word	0x20000134
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000140 	.word	0x20000140

080010b8 <MS5837_02BA_get_actual_pressure>:

int32_t MS5837_02BA_get_actual_pressure(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
 80010be:	f004 fed3 	bl	8005e68 <HAL_GetTick>
 80010c2:	6078      	str	r0, [r7, #4]
	if(MS5837_I2C_NONE == MS5837_I2C_State){
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <MS5837_02BA_get_actual_pressure+0x18>
		init_new_convertion();
 80010cc:	f000 f83e 	bl	800114c <init_new_convertion>
	}
	if(MS5837_I2C_D1_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d10f      	bne.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b13      	cmp	r3, #19
 80010e2:	d909      	bls.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
		MS5837_I2C_State = MS5837_I2C_D1_TX_ADC_COM;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010e6:	2203      	movs	r2, #3
 80010e8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	f006 f800 	bl	80070f8 <HAL_I2C_Master_Transmit_IT>
	}
	if(MS5837_I2C_D2_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d10f      	bne.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b13      	cmp	r3, #19
 800110a:	d909      	bls.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
		MS5837_I2C_State = MS5837_I2C_D2_TX_ADC_COM;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 800110e:	2207      	movs	r2, #7
 8001110:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 800111a:	21ec      	movs	r1, #236	; 0xec
 800111c:	f005 ffec 	bl	80070f8 <HAL_I2C_Master_Transmit_IT>
	}
//	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(MS5837_hi2c);
	return presure-initial_pressure;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MS5837_02BA_get_actual_pressure+0x8c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MS5837_02BA_get_actual_pressure+0x90>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000193 	.word	0x20000193
 8001138:	20000004 	.word	0x20000004
 800113c:	20000134 	.word	0x20000134
 8001140:	20000138 	.word	0x20000138
 8001144:	20000188 	.word	0x20000188
 8001148:	2000018c 	.word	0x2000018c

0800114c <init_new_convertion>:

void init_new_convertion(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	MS5837_I2C_State = MS5837_I2C_D1_TX_CONV_COM;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <init_new_convertion+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH);
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <init_new_convertion+0x20>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <init_new_convertion+0x24>)
 800115e:	21ec      	movs	r1, #236	; 0xec
 8001160:	f005 ffca 	bl	80070f8 <HAL_I2C_Master_Transmit_IT>
//	MS5837_conv_start_tick = HAL_GetTick();
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000193 	.word	0x20000193
 800116c:	20000134 	.word	0x20000134
 8001170:	20000001 	.word	0x20000001

08001174 <MS5837_I2C_MasterRxCplt>:

void MS5837_I2C_MasterRxCplt (I2C_HandleTypeDef * hi2c){
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800117c:	491f      	ldr	r1, [pc, #124]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 800117e:	6809      	ldr	r1, [r1, #0]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	4288      	cmp	r0, r1
 8001184:	d135      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
		if(MS5837_I2C_D1_RX_ADC == MS5837_I2C_State){
 8001186:	491e      	ldr	r1, [pc, #120]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001188:	7809      	ldrb	r1, [r1, #0]
 800118a:	2904      	cmp	r1, #4
 800118c:	d119      	bne.n	80011c2 <MS5837_I2C_MasterRxCplt+0x4e>
			D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800118e:	491d      	ldr	r1, [pc, #116]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001190:	7809      	ldrb	r1, [r1, #0]
 8001192:	0408      	lsls	r0, r1, #16
 8001194:	491b      	ldr	r1, [pc, #108]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001196:	7849      	ldrb	r1, [r1, #1]
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	4301      	orrs	r1, r0
 800119c:	4819      	ldr	r0, [pc, #100]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 800119e:	7880      	ldrb	r0, [r0, #2]
 80011a0:	4301      	orrs	r1, r0
 80011a2:	17c8      	asrs	r0, r1, #31
 80011a4:	460a      	mov	r2, r1
 80011a6:	4603      	mov	r3, r0
 80011a8:	4917      	ldr	r1, [pc, #92]	; (8001208 <MS5837_I2C_MasterRxCplt+0x94>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
			MS5837_I2C_State = MS5837_I2C_D2_TX_CONV_COM;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH);
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <MS5837_I2C_MasterRxCplt+0x98>)
 80011bc:	21ec      	movs	r1, #236	; 0xec
 80011be:	f005 ff9b 	bl	80070f8 <HAL_I2C_Master_Transmit_IT>
		}
		if(MS5837_I2C_D2_RX_ADC == MS5837_I2C_State){
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d113      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
			D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	041a      	lsls	r2, r3, #16
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	4313      	orrs	r3, r2
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011da:	7892      	ldrb	r2, [r2, #2]
 80011dc:	4313      	orrs	r3, r2
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	461c      	mov	r4, r3
 80011e2:	4615      	mov	r5, r2
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MS5837_I2C_MasterRxCplt+0x9c>)
 80011e6:	e9c3 4500 	strd	r4, r5, [r3]
			init_new_convertion();
 80011ea:	f7ff ffaf 	bl	800114c <init_new_convertion>
			calculate();
 80011ee:	f000 f90b 	bl	8001408 <calculate>
		}
//		MS5837_conv_start_tick = HAL_GetTick();
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000134 	.word	0x20000134
 8001200:	20000193 	.word	0x20000193
 8001204:	20000190 	.word	0x20000190
 8001208:	20000178 	.word	0x20000178
 800120c:	20000002 	.word	0x20000002
 8001210:	20000180 	.word	0x20000180

08001214 <MS5837_I2C_MasterTxCplt>:

void MS5837_I2C_MasterTxCplt (I2C_HandleTypeDef * hi2c){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d133      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
		if(MS5837_I2C_D1_TX_CONV_COM == MS5837_I2C_State){
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <MS5837_I2C_MasterTxCplt+0x2a>
			MS5837_I2C_State = MS5837_I2C_D1_CONVERTION;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001230:	2202      	movs	r2, #2
 8001232:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001234:	f004 fe18 	bl	8005e68 <HAL_GetTick>
 8001238:	4603      	mov	r3, r0
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 800123c:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D1_TX_ADC_COM == MS5837_I2C_State){
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d109      	bne.n	800125a <MS5837_I2C_MasterTxCplt+0x46>
			MS5837_I2C_State = MS5837_I2C_D1_RX_ADC;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001248:	2204      	movs	r2, #4
 800124a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2303      	movs	r3, #3
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001254:	21ec      	movs	r1, #236	; 0xec
 8001256:	f005 ffbf 	bl	80071d8 <HAL_I2C_Master_Receive_IT>
		}
		if(MS5837_I2C_D2_TX_CONV_COM == MS5837_I2C_State){
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d107      	bne.n	8001272 <MS5837_I2C_MasterTxCplt+0x5e>
			MS5837_I2C_State = MS5837_I2C_D2_CONVERTION;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001264:	2206      	movs	r2, #6
 8001266:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001268:	f004 fdfe 	bl	8005e68 <HAL_GetTick>
 800126c:	4603      	mov	r3, r0
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 8001270:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D2_TX_ADC_COM == MS5837_I2C_State){
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d109      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
			MS5837_I2C_State = MS5837_I2C_D2_RX_ADC;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800127c:	2208      	movs	r2, #8
 800127e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	2303      	movs	r3, #3
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001288:	21ec      	movs	r1, #236	; 0xec
 800128a:	f005 ffa5 	bl	80071d8 <HAL_I2C_Master_Receive_IT>
		}
	}
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000134 	.word	0x20000134
 800129c:	20000193 	.word	0x20000193
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000190 	.word	0x20000190

080012a8 <MS5837_02BA_check_pressure>:

void MS5837_I2C_MasterError (I2C_HandleTypeDef * hi2c){
	__NOP();
}

int32_t MS5837_02BA_check_pressure(){
 80012a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af02      	add	r7, sp, #8
	//initializing D1 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	4a34      	ldr	r2, [pc, #208]	; (8001390 <MS5837_02BA_check_pressure+0xe8>)
 80012be:	21ec      	movs	r1, #236	; 0xec
 80012c0:	f005 fd30 	bl	8006d24 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f004 fddb 	bl	8005e80 <HAL_Delay>
	//reading D1 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 80012d8:	21ec      	movs	r1, #236	; 0xec
 80012da:	f005 fd23 	bl	8006d24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2303      	movs	r3, #3
 80012ea:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012ec:	21ec      	movs	r1, #236	; 0xec
 80012ee:	f005 fe0d 	bl	8006f0c <HAL_I2C_Master_Receive>
	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001302:	7892      	ldrb	r2, [r2, #2]
 8001304:	4313      	orrs	r3, r2
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	4698      	mov	r8, r3
 800130a:	4691      	mov	r9, r2
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MS5837_02BA_check_pressure+0xf4>)
 800130e:	e9c3 8900 	strd	r8, r9, [r3]
	//initializing D2 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <MS5837_02BA_check_pressure+0xf8>)
 8001320:	21ec      	movs	r1, #236	; 0xec
 8001322:	f005 fcff 	bl	8006d24 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001326:	2014      	movs	r0, #20
 8001328:	f004 fdaa 	bl	8005e80 <HAL_Delay>
	//reading D2 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 800133a:	21ec      	movs	r1, #236	; 0xec
 800133c:	f005 fcf2 	bl	8006d24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2303      	movs	r3, #3
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800134e:	21ec      	movs	r1, #236	; 0xec
 8001350:	f005 fddc 	bl	8006f0c <HAL_I2C_Master_Receive>
	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4313      	orrs	r3, r2
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001364:	7892      	ldrb	r2, [r2, #2]
 8001366:	4313      	orrs	r3, r2
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	461c      	mov	r4, r3
 800136c:	4615      	mov	r5, r2
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MS5837_02BA_check_pressure+0xfc>)
 8001370:	e9c3 4500 	strd	r4, r5, [r3]
	calculate();
 8001374:	f000 f848 	bl	8001408 <calculate>
	return presure-initial_pressure;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MS5837_02BA_check_pressure+0x100>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MS5837_02BA_check_pressure+0x104>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800138a:	bf00      	nop
 800138c:	20000134 	.word	0x20000134
 8001390:	20000001 	.word	0x20000001
 8001394:	20000138 	.word	0x20000138
 8001398:	20000190 	.word	0x20000190
 800139c:	20000178 	.word	0x20000178
 80013a0:	20000002 	.word	0x20000002
 80013a4:	20000180 	.word	0x20000180
 80013a8:	20000188 	.word	0x20000188
 80013ac:	2000018c 	.word	0x2000018c

080013b0 <MS5837_02BA_reset_pressure>:

uint32_t MS5837_02BA_reset_pressure(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b09a      	sub	sp, #104	; 0x68
 80013b4:	af00      	add	r7, sp, #0
	int32_t current_pressure[25];

	for(int i =0;i<25;i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
 80013ba:	e00b      	b.n	80013d4 <MS5837_02BA_reset_pressure+0x24>
	{
		current_pressure[i]=MS5837_02BA_check_pressure();
 80013bc:	f7ff ff74 	bl	80012a8 <MS5837_02BA_check_pressure>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	3368      	adds	r3, #104	; 0x68
 80013c8:	443b      	add	r3, r7
 80013ca:	f843 2c68 	str.w	r2, [r3, #-104]
	for(int i =0;i<25;i++)
 80013ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d0:	3301      	adds	r3, #1
 80013d2:	667b      	str	r3, [r7, #100]	; 0x64
 80013d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d6:	2b18      	cmp	r3, #24
 80013d8:	ddf0      	ble.n	80013bc <MS5837_02BA_reset_pressure+0xc>
	}
	qsort(current_pressure, 25, sizeof(int32_t), cmp );
 80013da:	4638      	mov	r0, r7
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MS5837_02BA_reset_pressure+0x4c>)
 80013de:	2204      	movs	r2, #4
 80013e0:	2119      	movs	r1, #25
 80013e2:	f00e fdc3 	bl	800ff6c <qsort>
	init_new_convertion();
 80013e6:	f7ff feb1 	bl	800114c <init_new_convertion>
	return initial_pressure = current_pressure[24];
 80013ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3768      	adds	r7, #104	; 0x68
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08000fed 	.word	0x08000fed
 8001400:	2000018c 	.word	0x2000018c
 8001404:	00000000 	.word	0x00000000

08001408 <calculate>:

void calculate(){
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b0be      	sub	sp, #248	; 0xf8
 800140e:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t TEMP = 0;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	int64_t OFF = 0;
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	int64_t SENS = 0;
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	int64_t P = 0;
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	int64_t SENSi = 0;
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	int64_t OFFi = 0;
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int64_t Ti = 0;
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int64_t OFF2 = 0;
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t SENS2 = 0;
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	int64_t P2 = 0;
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP2 = 0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	//first order compensation
	dT = D2 -  C[4]*256;
 80014a0:	4be1      	ldr	r3, [pc, #900]	; (8001828 <calculate+0x420>)
 80014a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014a6:	4be1      	ldr	r3, [pc, #900]	; (800182c <calculate+0x424>)
 80014a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014ac:	f04f 0000 	mov.w	r0, #0
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	0219      	lsls	r1, r3, #8
 80014b6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80014ba:	0210      	lsls	r0, r2, #8
 80014bc:	1a23      	subs	r3, r4, r0
 80014be:	663b      	str	r3, [r7, #96]	; 0x60
 80014c0:	eb65 0301 	sbc.w	r3, r5, r1
 80014c4:	667b      	str	r3, [r7, #100]	; 0x64
 80014c6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80014ca:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	TEMP = 2000 + dT*C[4]/8388608;
 80014ce:	4bd7      	ldr	r3, [pc, #860]	; (800182c <calculate+0x424>)
 80014d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014d4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80014d8:	fb02 f501 	mul.w	r5, r2, r1
 80014dc:	fb00 f403 	mul.w	r4, r0, r3
 80014e0:	442c      	add	r4, r5
 80014e2:	fba0 8902 	umull	r8, r9, r0, r2
 80014e6:	eb04 0309 	add.w	r3, r4, r9
 80014ea:	4699      	mov	r9, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 80014f8:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 80014fc:	ea4f 53d9 	mov.w	r3, r9, lsr #23
 8001500:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 8001504:	65b9      	str	r1, [r7, #88]	; 0x58
 8001506:	f143 0300 	adc.w	r3, r3, #0
 800150a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800150c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001510:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8

//	OFF = C[1]*65536 + (C[3]*dT)/128;
//	SENS = C[0]*32768 + (C[2]*dT)/256;
//	P = ((D1 * SENS)/(2097152) - OFF)/8192;

	OFF = (C[1])*131072+(C[3]*dT)/64;
 8001514:	4bc5      	ldr	r3, [pc, #788]	; (800182c <calculate+0x424>)
 8001516:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800151a:	f04f 0800 	mov.w	r8, #0
 800151e:	f04f 0900 	mov.w	r9, #0
 8001522:	ea4f 4943 	mov.w	r9, r3, lsl #17
 8001526:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 800152a:	ea4f 4842 	mov.w	r8, r2, lsl #17
 800152e:	4bbf      	ldr	r3, [pc, #764]	; (800182c <calculate+0x424>)
 8001530:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001534:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001538:	fb02 f501 	mul.w	r5, r2, r1
 800153c:	fb00 f403 	mul.w	r4, r0, r3
 8001540:	442c      	add	r4, r5
 8001542:	fba0 ab02 	umull	sl, fp, r0, r2
 8001546:	eb04 030b 	add.w	r3, r4, fp
 800154a:	469b      	mov	fp, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	ea4f 129a 	mov.w	r2, sl, lsr #6
 8001558:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800155c:	ea4f 139b 	mov.w	r3, fp, lsr #6
 8001560:	eb18 0102 	adds.w	r1, r8, r2
 8001564:	6539      	str	r1, [r7, #80]	; 0x50
 8001566:	eb49 0303 	adc.w	r3, r9, r3
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
 800156c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001570:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	SENS = C[0]*65536+(C[2]*dT)/128;
 8001574:	4bad      	ldr	r3, [pc, #692]	; (800182c <calculate+0x424>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f04f 0800 	mov.w	r8, #0
 800157e:	f04f 0900 	mov.w	r9, #0
 8001582:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8001586:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 800158a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800158e:	4ba7      	ldr	r3, [pc, #668]	; (800182c <calculate+0x424>)
 8001590:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001594:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001598:	fb02 f501 	mul.w	r5, r2, r1
 800159c:	fb00 f403 	mul.w	r4, r0, r3
 80015a0:	442c      	add	r4, r5
 80015a2:	fba0 2302 	umull	r2, r3, r0, r2
 80015a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015aa:	4613      	mov	r3, r2
 80015ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b4:	18e3      	adds	r3, r4, r3
 80015b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80015c6:	4621      	mov	r1, r4
 80015c8:	09ca      	lsrs	r2, r1, #7
 80015ca:	4629      	mov	r1, r5
 80015cc:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80015d0:	4629      	mov	r1, r5
 80015d2:	09cb      	lsrs	r3, r1, #7
 80015d4:	eb18 0102 	adds.w	r1, r8, r2
 80015d8:	64b9      	str	r1, [r7, #72]	; 0x48
 80015da:	eb49 0303 	adc.w	r3, r9, r3
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80015e4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	P = (D1*SENS/(2097152)-OFF)/(32768);
 80015e8:	4b91      	ldr	r3, [pc, #580]	; (8001830 <calculate+0x428>)
 80015ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ee:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80015f2:	fb02 f501 	mul.w	r5, r2, r1
 80015f6:	fb00 f403 	mul.w	r4, r0, r3
 80015fa:	442c      	add	r4, r5
 80015fc:	fba0 2302 	umull	r2, r3, r0, r2
 8001600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001604:	4613      	mov	r3, r2
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800160a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160e:	18e3      	adds	r3, r4, r3
 8001610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001620:	4623      	mov	r3, r4
 8001622:	0d58      	lsrs	r0, r3, #21
 8001624:	462b      	mov	r3, r5
 8001626:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800162a:	462b      	mov	r3, r5
 800162c:	0d59      	lsrs	r1, r3, #21
 800162e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001632:	1a84      	subs	r4, r0, r2
 8001634:	643c      	str	r4, [r7, #64]	; 0x40
 8001636:	eb61 0303 	sbc.w	r3, r1, r3
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001648:	4621      	mov	r1, r4
 800164a:	0bca      	lsrs	r2, r1, #15
 800164c:	4629      	mov	r1, r5
 800164e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001652:	4629      	mov	r1, r5
 8001654:	0bcb      	lsrs	r3, r1, #15
 8001656:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 800165a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800165e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001662:	fb03 f102 	mul.w	r1, r3, r2
 8001666:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800166a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	18ca      	adds	r2, r1, r3
 8001674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001678:	fba3 1303 	umull	r1, r3, r3, r3
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800167e:	460b      	mov	r3, r1
 8001680:	67bb      	str	r3, [r7, #120]	; 0x78
 8001682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001688:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800168c:	460b      	mov	r3, r1
 800168e:	18db      	adds	r3, r3, r3
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4613      	mov	r3, r2
 8001694:	eb42 0303 	adc.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7fe ff23 	bl	80004ec <__aeabi_l2d>
 80016a6:	a35e      	add	r3, pc, #376	; (adr r3, 8001820 <calculate+0x418>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7ff f876 	bl	800079c <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fac0 	bl	8000c3c <__aeabi_d2lz>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 80016c4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016c8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80016ce:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016d8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016dc:	6339      	str	r1, [r7, #48]	; 0x30
 80016de:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80016e8:	462b      	mov	r3, r5
 80016ea:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80016ee:	4642      	mov	r2, r8
 80016f0:	fb02 f203 	mul.w	r2, r2, r3
 80016f4:	464b      	mov	r3, r9
 80016f6:	4621      	mov	r1, r4
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	4622      	mov	r2, r4
 8001700:	4641      	mov	r1, r8
 8001702:	fba2 1201 	umull	r1, r2, r2, r1
 8001706:	677a      	str	r2, [r7, #116]	; 0x74
 8001708:	460a      	mov	r2, r1
 800170a:	673a      	str	r2, [r7, #112]	; 0x70
 800170c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800170e:	4413      	add	r3, r2
 8001710:	677b      	str	r3, [r7, #116]	; 0x74
 8001712:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001716:	2900      	cmp	r1, #0
 8001718:	da07      	bge.n	800172a <calculate+0x322>
 800171a:	f110 030f 	adds.w	r3, r0, #15
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	f141 0300 	adc.w	r3, r1, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	0902      	lsrs	r2, r0, #4
 8001734:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001738:	110b      	asrs	r3, r1, #4
 800173a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	SENSi = 0;
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	//	}

	OFF2 = OFF - OFFi;
 800174a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800174e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001752:	1a84      	subs	r4, r0, r2
 8001754:	60bc      	str	r4, [r7, #8]
 8001756:	eb61 0303 	sbc.w	r3, r1, r3
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001760:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS2 = SENS - SENSi;
 8001764:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001768:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800176c:	1a84      	subs	r4, r0, r2
 800176e:	603c      	str	r4, [r7, #0]
 8001770:	eb61 0303 	sbc.w	r3, r1, r3
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e9d7 3400 	ldrd	r3, r4, [r7]
 800177a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	TEMP2 = (TEMP - Ti) / 100; //C
 800177e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001782:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001786:	1a84      	subs	r4, r0, r2
 8001788:	62bc      	str	r4, [r7, #40]	; 0x28
 800178a:	eb61 0303 	sbc.w	r3, r1, r3
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001790:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800179c:	f7ff f9e6 	bl	8000b6c <__aeabi_ldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <calculate+0x428>)
 80017aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ae:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80017b2:	fb02 f501 	mul.w	r5, r2, r1
 80017b6:	fb00 f403 	mul.w	r4, r0, r3
 80017ba:	442c      	add	r4, r5
 80017bc:	fba0 2302 	umull	r2, r3, r0, r2
 80017c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017c2:	4613      	mov	r3, r2
 80017c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80017c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c8:	18e3      	adds	r3, r4, r3
 80017ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80017d8:	4621      	mov	r1, r4
 80017da:	0d4a      	lsrs	r2, r1, #21
 80017dc:	4629      	mov	r1, r5
 80017de:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80017e2:	4629      	mov	r1, r5
 80017e4:	0d4b      	lsrs	r3, r1, #21
 80017e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80017ea:	1a14      	subs	r4, r2, r0
 80017ec:	623c      	str	r4, [r7, #32]
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
 80017f4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001800:	f7ff fa04 	bl	8000c0c <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int32_t res[2];
	res[0] = P;
 800180c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	res[1] = TEMP/100;
 8001814:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001818:	f04f 0264 	mov.w	r2, #100	; 0x64
 800181c:	e00a      	b.n	8001834 <calculate+0x42c>
 800181e:	bf00      	nop
 8001820:	fe280000 	.word	0xfe280000
 8001824:	423fffff 	.word	0x423fffff
 8001828:	20000180 	.word	0x20000180
 800182c:	20000140 	.word	0x20000140
 8001830:	20000178 	.word	0x20000178
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	f7ff f998 	bl	8000b6c <__aeabi_ldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	presure = res[0]/10;
 8001846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <calculate+0x45c>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	1092      	asrs	r2, r2, #2
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <calculate+0x460>)
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	37f8      	adds	r7, #248	; 0xf8
 800185e:	46bd      	mov	sp, r7
 8001860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001864:	66666667 	.word	0x66666667
 8001868:	20000188 	.word	0x20000188

0800186c <GetCrc16Checksumm>:
 */

#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8001878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187c:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	3b02      	subs	r3, #2
 8001882:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8001884:	e025      	b.n	80018d2 <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001896:	4053      	eors	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	737b      	strb	r3, [r7, #13]
 80018a0:	e014      	b.n	80018cc <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 80018a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da09      	bge.n	80018be <GetCrc16Checksumm+0x52>
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	e002      	b.n	80018c4 <GetCrc16Checksumm+0x58>
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 80018c6:	7b7b      	ldrb	r3, [r7, #13]
 80018c8:	3301      	adds	r3, #1
 80018ca:	737b      	strb	r3, [r7, #13]
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d9e7      	bls.n	80018a2 <GetCrc16Checksumm+0x36>
    while (len--) {
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	807a      	strh	r2, [r7, #2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1d4      	bne.n	8001886 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 80018dc:	89fb      	ldrh	r3, [r7, #14]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb6 	bl	800186c <GetCrc16Checksumm>
 8001900:	4603      	mov	r3, r0
 8001902:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	3b02      	subs	r3, #2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 8001914:	89fa      	ldrh	r2, [r7, #14]
 8001916:	8afb      	ldrh	r3, [r7, #22]
 8001918:	429a      	cmp	r2, r3
 800191a:	d101      	bne.n	8001920 <IsCrc16ChecksummCorrect+0x36>
		return true;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8001920:	2300      	movs	r3, #0
	}
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff96 	bl	800186c <GetCrc16Checksumm>
 8001940:	4603      	mov	r3, r0
 8001942:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	3b02      	subs	r3, #2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	89fa      	ldrh	r2, [r7, #14]
 8001952:	801a      	strh	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	3b01      	subs	r3, #1
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e009      	b.n	8001992 <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	4053      	eors	r3, r2
 800198a:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3301      	adds	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	3b01      	subs	r3, #1
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 800199c:	7dfa      	ldrb	r2, [r7, #23]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d101      	bne.n	80019a8 <IsChecksumm8bCorrect+0x4c>
        return 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <IsChecksumm8bCorrect+0x4e>
    else return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	e009      	b.n	80019e4 <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	4053      	eors	r3, r2
 80019dc:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e009      	b.n	8001a3c <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	4053      	eors	r3, r2
 8001a34:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf0      	blt.n	8001a28 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8001a46:	7dfa      	ldrb	r2, [r7, #23]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d101      	bne.n	8001a52 <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 8001a52:	2300      	movs	r3, #0
	}
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 8001a70:	2301      	movs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	e009      	b.n	8001a8a <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	4053      	eors	r3, r2
 8001a82:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d857      	bhi.n	8001b72 <PickBit+0xc6>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <PickBit+0x1c>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ae9 	.word	0x08001ae9
 8001acc:	08001afb 	.word	0x08001afb
 8001ad0:	08001b0d 	.word	0x08001b0d
 8001ad4:	08001b1f 	.word	0x08001b1f
 8001ad8:	08001b31 	.word	0x08001b31
 8001adc:	08001b43 	.word	0x08001b43
 8001ae0:	08001b55 	.word	0x08001b55
 8001ae4:	08001b67 	.word	0x08001b67
	case 0:
			return (bool) (input & 0b00000001);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	e03c      	b.n	8001b74 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e033      	b.n	8001b74 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	e02a      	b.n	8001b74 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e021      	b.n	8001b74 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e018      	b.n	8001b74 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	e00f      	b.n	8001b74 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	e006      	b.n	8001b74 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	09db      	lsrs	r3, r3, #7
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e000      	b.n	8001b74 <PickBit+0xc8>
	}
	return false;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <variableInit>:

uint16_t counterRx = 0;


void variableInit()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b86:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <variableInit+0x130>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <variableInit+0x134>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <variableInit+0x134>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <variableInit+0x134>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 8001ba0:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <variableInit+0x134>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <variableInit+0x134>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <variableInit+0x134>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <variableInit+0x138>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <variableInit+0x138>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <variableInit+0x138>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <variableInit+0x138>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001bd4:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <variableInit+0x138>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <variableInit+0x138>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	831a      	strh	r2, [r3, #24]

	rSensors.pressure = 0;
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <variableInit+0x138>)
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	659a      	str	r2, [r3, #88]	; 0x58
	rSensors.pressure_null = 0;
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <variableInit+0x138>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c

	rSensors.rollSpeed = 0;
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <variableInit+0x138>)
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <variableInit+0x138>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <variableInit+0x138>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <variableInit+0x138>)
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <variableInit+0x138>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <variableInit+0x138>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <variableInit+0x138>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <variableInit+0x138>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <variableInit+0x138>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <variableInit+0x138>)
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <variableInit+0x138>)
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <variableInit+0x138>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <variableInit+0x138>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <variableInit+0x13c>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <variableInit+0x13c>)
 8001c64:	2205      	movs	r2, #5
 8001c66:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <variableInit+0x13c>)
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <variableInit+0x13c>)
 8001c72:	2206      	movs	r2, #6
 8001c74:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <variableInit+0x13c>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	779a      	strb	r2, [r3, #30]

	rSensors.startIMU = true;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <variableInit+0x138>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rSensors.startPressure = true;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <variableInit+0x138>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	thrustersInit();
 8001c8c:	f003 fba2 	bl	80053d4 <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 8001c90:	463b      	mov	r3, r7
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 f9fc 	bl	8003090 <flashReadSettings>
	flashReadStructure(&config);
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fbc2 	bl	8003424 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <variableInit+0x134>)
 8001ca2:	789b      	ldrb	r3, [r3, #2]
 8001ca4:	2b00      	cmp	r3, #0
		return;
	}
}
 8001ca6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20001e3c 	.word	0x20001e3c
 8001cb4:	20001d34 	.word	0x20001d34
 8001cb8:	20001dd0 	.word	0x20001dd0
 8001cbc:	20001e70 	.word	0x20001e70

08001cc0 <uartBusesInit>:

void uartBusesInit()
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001cc6:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cc8:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <uartBusesInit+0x1e0>)
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001ccc:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cce:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <uartBusesInit+0x1e4>)
 8001cd0:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001cd2:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cd4:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <uartBusesInit+0x1e8>)
 8001cd6:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001cd8:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001ce0:	4b6e      	ldr	r3, [pc, #440]	; (8001e9c <uartBusesInit+0x1dc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cea:	2214      	movs	r2, #20
 8001cec:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 8001cee:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cf4:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001cf6:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cf8:	22c8      	movs	r2, #200	; 0xc8
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001cfc:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cfe:	22c8      	movs	r2, #200	; 0xc8
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 8001d0a:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <uartBusesInit+0x1ec>)
 8001d0e:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d16:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 8001d3a:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d3c:	2264      	movs	r2, #100	; 0x64
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001d40:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d42:	2264      	movs	r2, #100	; 0x64
 8001d44:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 8001d46:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 8001d4e:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <uartBusesInit+0x1f0>)
 8001d52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d56:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d5c:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 8001d62:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d72:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d7a:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d8c:	2264      	movs	r2, #100	; 0x64
 8001d8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 8001d9a:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <uartBusesInit+0x1f4>)
 8001d9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <uartBusesInit+0x1dc>)
 8001da4:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <uartBusesInit+0x1f8>)
 8001da6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 8001daa:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <uartBusesInit+0x1dc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 8001dda:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <uartBusesInit+0x1dc>)
 8001ddc:	2264      	movs	r2, #100	; 0x64
 8001dde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <uartBusesInit+0x1dc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e04a      	b.n	8001e86 <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	492a      	ldr	r1, [pc, #168]	; (8001e9c <uartBusesInit+0x1dc>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3308      	adds	r3, #8
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001e04:	79fa      	ldrb	r2, [r7, #7]
 8001e06:	4925      	ldr	r1, [pc, #148]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	3309      	adds	r3, #9
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	4920      	ldr	r1, [pc, #128]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	330a      	adds	r3, #10
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	4916      	ldr	r1, [pc, #88]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3310      	adds	r3, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	4911      	ldr	r1, [pc, #68]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3314      	adds	r3, #20
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	490b      	ldr	r1, [pc, #44]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3318      	adds	r3, #24
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	3301      	adds	r3, #1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d9b1      	bls.n	8001df0 <uartBusesInit+0x130>
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000194 	.word	0x20000194
 8001ea0:	20002660 	.word	0x20002660
 8001ea4:	20002270 	.word	0x20002270
 8001ea8:	200022c4 	.word	0x200022c4
 8001eac:	20002550 	.word	0x20002550
 8001eb0:	200024c8 	.word	0x200024c8
 8001eb4:	200025d8 	.word	0x200025d8
 8001eb8:	20002328 	.word	0x20002328

08001ebc <i2cBusesInit>:

void i2cBusesInit()
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	// TODO refactor i2c communication routines
	i2cBus[DEV_I2C].hi2c = &hi2c1; // Link to hi2c will be set before receiving
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <i2cBusesInit+0x14>)
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <i2cBusesInit+0x18>)
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20000274 	.word	0x20000274
 8001ed4:	200023d8 	.word	0x200023d8

08001ed8 <transmitPackage>:


bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f009 f904 	bl	800b0fc <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <transmitPackage+0x42>
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d117      	bne.n	8001f32 <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	f009 f832 	bl	800af7c <HAL_UART_Transmit_DMA>
            break;
 8001f18:	e00d      	b.n	8001f36 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f008 ff84 	bl	800ae38 <HAL_UART_Transmit_IT>
            break;
 8001f30:	e001      	b.n	8001f36 <transmitPackage+0x5e>
        default:
            return false;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e036      	b.n	8001fa4 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001f36:	f00c fa91 	bl	800e45c <xTaskGetTickCount>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f839 	bl	8000fb4 <fromTickToMs>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 8001f4c:	e01c      	b.n	8001f88 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 8001f4e:	f00c fa85 	bl	800e45c <xTaskGetTickCount>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f82d 	bl	8000fb4 <fromTickToMs>
 8001f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	dd01      	ble.n	8001f82 <transmitPackage+0xaa>
    		return false;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e010      	b.n	8001fa4 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 8001f82:	2032      	movs	r0, #50	; 0x32
 8001f84:	f00a ff40 	bl	800ce08 <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7a5b      	ldrb	r3, [r3, #9]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <transmitPackage+0xca>
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f083 0301 	eor.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1d5      	bne.n	8001f4e <transmitPackage+0x76>
    }
    return true;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 f90f 	bl	800b1ec <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 f892 	bl	800b0fc <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d018      	beq.n	8002014 <transmitAndReceive+0x68>
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d12d      	bne.n	8002042 <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f009 f83c 	bl	800b074 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	f008 ffb5 	bl	800af7c <HAL_UART_Transmit_DMA>
			break;
 8002012:	e018      	b.n	8002046 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	f008 ff65 	bl	800aef4 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	f008 fefc 	bl	800ae38 <HAL_UART_Transmit_IT>
			break;
 8002040:	e001      	b.n	8002046 <transmitAndReceive+0x9a>
		default:
			return false;
 8002042:	2300      	movs	r3, #0
 8002044:	e03d      	b.n	80020c2 <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8002046:	f00c fa09 	bl	800e45c <xTaskGetTickCount>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe ffb1 	bl	8000fb4 <fromTickToMs>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800205c:	e01c      	b.n	8002098 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800205e:	f00c f9fd 	bl	800e45c <xTaskGetTickCount>
 8002062:	4603      	mov	r3, r0
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ffa5 	bl	8000fb4 <fromTickToMs>
 800206a:	eeb0 7a40 	vmov.f32	s14, s0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	edd3 7a05 	vldr	s15, [r3, #20]
 8002074:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	dd01      	ble.n	8002092 <transmitAndReceive+0xe6>
			return false;
 800208e:	2300      	movs	r3, #0
 8002090:	e017      	b.n	80020c2 <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 8002092:	2032      	movs	r0, #50	; 0x32
 8002094:	f00a feb8 	bl	800ce08 <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7a5b      	ldrb	r3, [r3, #9]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <transmitAndReceive+0x114>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7a1b      	ldrb	r3, [r3, #8]
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <transmitAndReceive+0x114>
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ce      	bne.n	800205e <transmitAndReceive+0xb2>
	}
	return true;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d103      	bne.n	80020e6 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	725a      	strb	r2, [r3, #9]
		return;
 80020e4:	e022      	b.n	800212c <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e01a      	b.n	8002126 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	4911      	ldr	r1, [pc, #68]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3330      	adds	r3, #48	; 0x30
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d10b      	bne.n	8002120 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 8002114:	4413      	add	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	725a      	strb	r2, [r3, #9]
			break;
 800211e:	e005      	b.n	800212c <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3301      	adds	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d9e1      	bls.n	80020f0 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000194 	.word	0x20000194

0800213c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d102      	bne.n	8002154 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800214e:	f000 f84b 	bl	80021e8 <ShoreReceive>
		return;
 8002152:	e02d      	b.n	80021b0 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e025      	b.n	80021aa <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	4915      	ldr	r1, [pc, #84]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3330      	adds	r3, #48	; 0x30
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d116      	bne.n	80021a4 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002182:	4413      	add	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2201      	movs	r2, #1
 800218a:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 800218c:	f00c f966 	bl	800e45c <xTaskGetTickCount>
 8002190:	4603      	mov	r3, r0
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe ff0e 	bl	8000fb4 <fromTickToMs>
 8002198:	eef0 7a40 	vmov.f32	s15, s0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 80021a2:	e005      	b.n	80021b0 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	3301      	adds	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d9d6      	bls.n	800215e <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000194 	.word	0x20000194

080021bc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterRxCplt(hi2c);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe ffd5 	bl	8001174 <MS5837_I2C_MasterRxCplt>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterTxCplt(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff f81a 	bl	8001214 <MS5837_I2C_MasterTxCplt>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ShoreReceive>:
	MS5837_I2C_MasterError(hi2c);
}


void ShoreReceive()
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <ShoreReceive+0xe0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <ShoreReceive+0xe4>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13c      	bne.n	8002276 <ShoreReceive+0x8e>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	e035      	b.n	800226e <ShoreReceive+0x86>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <ShoreReceive+0xe8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4932      	ldr	r1, [pc, #200]	; (80022d4 <ShoreReceive+0xec>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	429a      	cmp	r2, r3
 8002210:	d11f      	bne.n	8002252 <ShoreReceive+0x6a>
				counterRx = 1;
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <ShoreReceive+0xe4>)
 8002214:	2201      	movs	r2, #1
 8002216:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = 5;//ShoreLength[i]-1;
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <ShoreReceive+0xe8>)
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <ShoreReceive+0xe8>)
 8002222:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <ShoreReceive+0xe8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <ShoreReceive+0xe8>)
 800222c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002230:	b292      	uxth	r2, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f008 fe5e 	bl	800aef4 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <ShoreReceive+0xf0>)
 800223a:	681c      	ldr	r4, [r3, #0]
 800223c:	f00c f91e 	bl	800e47c <xTaskGetTickCountFromISR>
 8002240:	4602      	mov	r2, r0
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <ShoreReceive+0xe0>)
 8002248:	2106      	movs	r1, #6
 800224a:	4620      	mov	r0, r4
 800224c:	f00c ff7a 	bl	800f144 <xTimerGenericCommand>
				break;
 8002250:	e026      	b.n	80022a0 <ShoreReceive+0xb8>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d107      	bne.n	8002268 <ShoreReceive+0x80>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <ShoreReceive+0xe8>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <ShoreReceive+0xe8>)
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f008 fe46 	bl	800aef4 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	3301      	adds	r3, #1
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d9c6      	bls.n	8002202 <ShoreReceive+0x1a>
 8002274:	e014      	b.n	80022a0 <ShoreReceive+0xb8>
			}
		}
	}
	else if(counterRx == 1) {
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <ShoreReceive+0xe4>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d110      	bne.n	80022a0 <ShoreReceive+0xb8>
		uartBus[SHORE_UART].packageReceived = true;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <ShoreReceive+0xe8>)
 8002280:	2201      	movs	r2, #1
 8002282:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 8002284:	f00c f8ea 	bl	800e45c <xTaskGetTickCount>
 8002288:	4603      	mov	r3, r0
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fe92 	bl	8000fb4 <fromTickToMs>
 8002290:	eef0 7a40 	vmov.f32	s15, s0
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <ShoreReceive+0xe8>)
 8002296:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <ShoreReceive+0xe4>)
 800229c:	2202      	movs	r2, #2
 800229e:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <ShoreReceive+0xe0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10a      	bne.n	80022be <ShoreReceive+0xd6>
		xHigherPriorityTaskWoken = pdFALSE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <ShoreReceive+0xe0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
		taskYIELD();
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <ShoreReceive+0xf4>)
 80022b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	f3bf 8f6f 	isb	sy
	}
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000280 	.word	0x20000280
 80022cc:	2000027c 	.word	0x2000027c
 80022d0:	20000194 	.word	0x20000194
 80022d4:	080119fc 	.word	0x080119fc
 80022d8:	20000288 	.word	0x20000288
 80022dc:	e000ed04 	.word	0xe000ed04

080022e0 <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 80022ec:	23aa      	movs	r3, #170	; 0xaa
 80022ee:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 80022f0:	23aa      	movs	r3, #170	; 0xaa
 80022f2:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	4916      	ldr	r1, [pc, #88]	; (8002350 <DevicesRequestUpdate+0x70>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	4911      	ldr	r1, [pc, #68]	; (8002350 <DevicesRequestUpdate+0x70>)
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	440b      	add	r3, r1
 8002314:	3301      	adds	r3, #1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	72fb      	strb	r3, [r7, #11]
    //req.velocity1 = 0;
    //req.velocity2 = rDevice[dev].force;

   // if(dev == GRAB) {
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <DevicesRequestUpdate+0x70>)
 800231c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002320:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <DevicesRequestUpdate+0x70>)
 8002324:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002328:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	461a      	mov	r2, r3
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	6010      	str	r0, [r2, #0]
 8002336:	8899      	ldrh	r1, [r3, #4]
 8002338:	799b      	ldrb	r3, [r3, #6]
 800233a:	8091      	strh	r1, [r2, #4]
 800233c:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800233e:	2107      	movs	r1, #7
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fb38 	bl	80019b6 <AddChecksumm8b>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20001e70 	.word	0x20001e70

08002354 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 8002360:	210a      	movs	r1, #10
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fafa 	bl	800195c <IsChecksumm8bCorrect>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d04a      	beq.n	8002404 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	6810      	ldr	r0, [r2, #0]
 8002376:	6851      	ldr	r1, [r2, #4]
 8002378:	c303      	stmia	r3!, {r0, r1}
 800237a:	8912      	ldrh	r2, [r2, #8]
 800237c:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8002384:	b298      	uxth	r0, r3
 8002386:	4924      	ldr	r1, [pc, #144]	; (8002418 <DevicesResponseUpdate+0xc4>)
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	3304      	adds	r3, #4
 8002394:	4602      	mov	r2, r0
 8002396:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	7cf8      	ldrb	r0, [r7, #19]
 800239c:	491e      	ldr	r1, [pc, #120]	; (8002418 <DevicesResponseUpdate+0xc4>)
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	3307      	adds	r3, #7
 80023aa:	4602      	mov	r2, r0
 80023ac:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	7d38      	ldrb	r0, [r7, #20]
 80023b2:	4919      	ldr	r1, [pc, #100]	; (8002418 <DevicesResponseUpdate+0xc4>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	3308      	adds	r3, #8
 80023c0:	4602      	mov	r2, r0
 80023c2:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <DevicesResponseUpdate+0xc4>)
 80023c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <DevicesResponseUpdate+0x88>
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d103      	bne.n	80023dc <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <DevicesResponseUpdate+0xc8>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e00a      	b.n	80023f2 <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <DevicesResponseUpdate+0xc4>)
 80023de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <DevicesResponseUpdate+0x9e>
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d102      	bne.n	80023f2 <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <DevicesResponseUpdate+0xc8>)
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <DevicesResponseUpdate+0xcc>)
 80023f4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80023f8:	3301      	adds	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <DevicesResponseUpdate+0xcc>)
 80023fe:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 8002402:	e004      	b.n	800240e <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <DevicesResponseUpdate+0xcc>)
 8002406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002408:	3301      	adds	r3, #1
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <DevicesResponseUpdate+0xcc>)
 800240c:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20001e70 	.word	0x20001e70
 800241c:	20001eac 	.word	0x20001eac
 8002420:	20000194 	.word	0x20000194

08002424 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800242a:	af00      	add	r7, sp, #0
 800242c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002430:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002434:	6018      	str	r0, [r3, #0]
	bool flag = false;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	flag = IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH);
 800243c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002440:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002444:	211f      	movs	r1, #31
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f7ff fa4f 	bl	80018ea <IsCrc16ChecksummCorrect>
 800244c:	4603      	mov	r3, r0
 800244e:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8002452:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002456:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800245a:	211f      	movs	r1, #31
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	f7ff fa44 	bl	80018ea <IsCrc16ChecksummCorrect>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8184 	beq.w	8002772 <ShoreRequest+0x34e>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 800246a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800246e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002472:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8002476:	221f      	movs	r2, #31
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	f00d ff51 	bl	8010320 <memcpy>

    	uint8_t tempCameraNum = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

        rJoySpeed.march = req.march;
 8002484:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	4bbd      	ldr	r3, [pc, #756]	; (8002788 <ShoreRequest+0x364>)
 8002492:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 8002496:	f9b7 3218 	ldrsh.w	r3, [r7, #536]	; 0x218
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a2:	4bb9      	ldr	r3, [pc, #740]	; (8002788 <ShoreRequest+0x364>)
 80024a4:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 80024a8:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b4:	4bb4      	ldr	r3, [pc, #720]	; (8002788 <ShoreRequest+0x364>)
 80024b6:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 80024ba:	f9b7 321c 	ldrsh.w	r3, [r7, #540]	; 0x21c
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c6:	4bb0      	ldr	r3, [pc, #704]	; (8002788 <ShoreRequest+0x364>)
 80024c8:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 80024cc:	f9b7 321e 	ldrsh.w	r3, [r7, #542]	; 0x21e
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d8:	4bab      	ldr	r3, [pc, #684]	; (8002788 <ShoreRequest+0x364>)
 80024da:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 80024de:	f9b7 3220 	ldrsh.w	r3, [r7, #544]	; 0x220
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ea:	4ba7      	ldr	r3, [pc, #668]	; (8002788 <ShoreRequest+0x364>)
 80024ec:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 80024f0:	f997 2223 	ldrsb.w	r2, [r7, #547]	; 0x223
 80024f4:	4ba5      	ldr	r3, [pc, #660]	; (800278c <ShoreRequest+0x368>)
 80024f6:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 80024f8:	4ba4      	ldr	r3, [pc, #656]	; (800278c <ShoreRequest+0x368>)
 80024fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80024fe:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002502:	d102      	bne.n	800250a <ShoreRequest+0xe6>
            rDevice[GRAB].force = -127;
 8002504:	4ba1      	ldr	r3, [pc, #644]	; (800278c <ShoreRequest+0x368>)
 8002506:	2281      	movs	r2, #129	; 0x81
 8002508:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 800250a:	f997 2224 	ldrsb.w	r2, [r7, #548]	; 0x224
 800250e:	4b9f      	ldr	r3, [pc, #636]	; (800278c <ShoreRequest+0x368>)
 8002510:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 8002514:	4b9d      	ldr	r3, [pc, #628]	; (800278c <ShoreRequest+0x368>)
 8002516:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800251a:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800251e:	d103      	bne.n	8002528 <ShoreRequest+0x104>
        	rDevice[TILT].force = -127;
 8002520:	4b9a      	ldr	r3, [pc, #616]	; (800278c <ShoreRequest+0x368>)
 8002522:	2281      	movs	r2, #129	; 0x81
 8002524:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 8002528:	f997 2225 	ldrsb.w	r2, [r7, #549]	; 0x225
 800252c:	4b97      	ldr	r3, [pc, #604]	; (800278c <ShoreRequest+0x368>)
 800252e:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 8002530:	4b96      	ldr	r3, [pc, #600]	; (800278c <ShoreRequest+0x368>)
 8002532:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002536:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800253a:	d102      	bne.n	8002542 <ShoreRequest+0x11e>
            rDevice[GRAB_ROTATION].force = -127;
 800253c:	4b93      	ldr	r3, [pc, #588]	; (800278c <ShoreRequest+0x368>)
 800253e:	2281      	movs	r2, #129	; 0x81
 8002540:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 8002542:	f997 2226 	ldrsb.w	r2, [r7, #550]	; 0x226
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <ShoreRequest+0x368>)
 8002548:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 800254c:	f997 2227 	ldrsb.w	r2, [r7, #551]	; 0x227
 8002550:	4b8e      	ldr	r3, [pc, #568]	; (800278c <ShoreRequest+0x368>)
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 8002556:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	4b8b      	ldr	r3, [pc, #556]	; (8002790 <ShoreRequest+0x36c>)
 8002564:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.startIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 8002568:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800256c:	2106      	movs	r1, #6
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fa9c 	bl	8001aac <PickBit>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	4b86      	ldr	r3, [pc, #536]	; (8002794 <ShoreRequest+0x370>)
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 800257e:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8002582:	2107      	movs	r1, #7
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fa91 	bl	8001aac <PickBit>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <ShoreRequest+0x180>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fdd9 	bl	800314c <flashFillStructure>
        	flashWriteSettings(&config);
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fd9a 	bl	80030d8 <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 80025a4:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 80025a8:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

        uint8_t old_reset = rComputer.reset;
 80025ac:	4b7a      	ldr	r3, [pc, #488]	; (8002798 <ShoreRequest+0x374>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
        if(old_reset != req.pc_reset) {
 80025b4:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 80025b8:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 80025bc:	429a      	cmp	r2, r3
 80025be:	d002      	beq.n	80025c6 <ShoreRequest+0x1a2>
            if(req.pc_reset == PC_ON_CODE) {
 80025c0:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 80025c4:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
 //           	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
   //         	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 80025c6:	f897 222f 	ldrb.w	r2, [r7, #559]	; 0x22f
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <ShoreRequest+0x374>)
 80025cc:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 80025ce:	4b73      	ldr	r3, [pc, #460]	; (800279c <ShoreRequest+0x378>)
 80025d0:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80025d4:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 80025d8:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80025dc:	2103      	movs	r1, #3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fa64 	bl	8001aac <PickBit>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <ShoreRequest+0x378>)
 80025ea:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 80025ee:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <ShoreRequest+0x1e8>
 80025fc:	4b67      	ldr	r3, [pc, #412]	; (800279c <ShoreRequest+0x378>)
 80025fe:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <ShoreRequest+0x1e8>
        	stabilizationStart(STAB_YAW);
 8002606:	2003      	movs	r0, #3
 8002608:	f002 fa38 	bl	8004a7c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 800260c:	4b63      	ldr	r3, [pc, #396]	; (800279c <ShoreRequest+0x378>)
 800260e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002612:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8002616:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fa45 	bl	8001aac <PickBit>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <ShoreRequest+0x378>)
 8002628:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 800262c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <ShoreRequest+0x226>
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <ShoreRequest+0x378>)
 800263c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <ShoreRequest+0x226>
        	stabilizationStart(STAB_ROLL);
 8002644:	2004      	movs	r0, #4
 8002646:	f002 fa19 	bl	8004a7c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <ShoreRequest+0x378>)
 800264c:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002650:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 8002654:	4b51      	ldr	r3, [pc, #324]	; (800279c <ShoreRequest+0x378>)
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 800265c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <ShoreRequest+0x256>
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <ShoreRequest+0x378>)
 800266c:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <ShoreRequest+0x256>
        	stabilizationStart(STAB_PITCH);
 8002674:	2005      	movs	r0, #5
 8002676:	f002 fa01 	bl	8004a7c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <ShoreRequest+0x378>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8002682:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fa0f 	bl	8001aac <PickBit>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	4b42      	ldr	r3, [pc, #264]	; (800279c <ShoreRequest+0x378>)
 8002694:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8002696:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <ShoreRequest+0x28e>
 80026a4:	4b3d      	ldr	r3, [pc, #244]	; (800279c <ShoreRequest+0x378>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <ShoreRequest+0x28e>
        	stabilizationStart(STAB_DEPTH);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f002 f9e5 	bl	8004a7c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <ShoreRequest+0x378>)
 80026b4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026b8:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 80026bc:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80026c0:	2104      	movs	r1, #4
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f9f2 	bl	8001aac <PickBit>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <ShoreRequest+0x378>)
 80026ce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 80026d2:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <ShoreRequest+0x2cc>
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <ShoreRequest+0x378>)
 80026e2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <ShoreRequest+0x2cc>
        	stabilizationStart(STAB_LAG);
 80026ea:	2002      	movs	r0, #2
 80026ec:	f002 f9c6 	bl	8004a7c <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <ShoreRequest+0x378>)
 80026f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026f6:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 80026fa:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80026fe:	2105      	movs	r1, #5
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f9d3 	bl	8001aac <PickBit>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <ShoreRequest+0x378>)
 800270c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8002710:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <ShoreRequest+0x30a>
 800271e:	4b1f      	ldr	r3, [pc, #124]	; (800279c <ShoreRequest+0x378>)
 8002720:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <ShoreRequest+0x30a>
        	stabilizationStart(STAB_MARCH);
 8002728:	2001      	movs	r0, #1
 800272a:	f002 f9a7 	bl	8004a7c <stabilizationStart>
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <ShoreRequest+0x36c>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	f897 2236 	ldrb.w	r2, [r7, #566]	; 0x236
 8002736:	429a      	cmp	r2, r3
 8002738:	d012      	beq.n	8002760 <ShoreRequest+0x33c>
        	rState.cameraNum = tempCameraNum;
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <ShoreRequest+0x36c>)
 800273c:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8002740:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <ShoreRequest+0x36c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d80a      	bhi.n	8002760 <ShoreRequest+0x33c>
 800274a:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <ShoreRequest+0x32c>)
 800274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002750:	08002761 	.word	0x08002761
 8002754:	08002761 	.word	0x08002761
 8002758:	08002761 	.word	0x08002761
 800275c:	08002761 	.word	0x08002761
        		break;
        	}
        }

        // TODO tuuuupoooo
        formThrustVectors();
 8002760:	f002 ff4a 	bl	80055f8 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <ShoreRequest+0x37c>)
 8002766:	895b      	ldrh	r3, [r3, #10]
 8002768:	3301      	adds	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <ShoreRequest+0x37c>)
 800276e:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8002770:	e004      	b.n	800277c <ShoreRequest+0x358>
    	++uartBus[SHORE_UART].brokenRxCounter;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <ShoreRequest+0x37c>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <ShoreRequest+0x37c>)
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20001e40 	.word	0x20001e40
 800278c:	20001e70 	.word	0x20001e70
 8002790:	20001d34 	.word	0x20001d34
 8002794:	20001dd0 	.word	0x20001dd0
 8002798:	20001e3c 	.word	0x20001e3c
 800279c:	20001eb0 	.word	0x20001eb0
 80027a0:	20000194 	.word	0x20000194

080027a4 <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b098      	sub	sp, #96	; 0x60
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 80027ac:	2154      	movs	r1, #84	; 0x54
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f89b 	bl	80018ea <IsCrc16ChecksummCorrect>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8158 	beq.w	8002a6c <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4611      	mov	r1, r2
 80027c4:	2254      	movs	r2, #84	; 0x54
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00d fdaa 	bl	8010320 <memcpy>

		rJoySpeed.march = req.march;
 80027cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d8:	4ba9      	ldr	r3, [pc, #676]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 80027da:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 80027de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ea:	4ba5      	ldr	r3, [pc, #660]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 80027ec:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 80027f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fc:	4ba0      	ldr	r3, [pc, #640]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 80027fe:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 8002802:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280e:	4b9c      	ldr	r3, [pc, #624]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 8002810:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 8002814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002820:	4b97      	ldr	r3, [pc, #604]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 8002822:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 8002826:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	4b93      	ldr	r3, [pc, #588]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 8002834:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 8002838:	7a7b      	ldrb	r3, [r7, #9]
 800283a:	4618      	mov	r0, r3
 800283c:	f8d7 2016 	ldr.w	r2, [r7, #22]
 8002840:	4613      	mov	r3, r2
 8002842:	461a      	mov	r2, r3
 8002844:	498f      	ldr	r1, [pc, #572]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002846:	4603      	mov	r3, r0
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4403      	add	r3, r0
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	3304      	adds	r3, #4
 8002852:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 8002854:	7a7b      	ldrb	r3, [r7, #9]
 8002856:	4618      	mov	r0, r3
 8002858:	f8d7 201a 	ldr.w	r2, [r7, #26]
 800285c:	4613      	mov	r3, r2
 800285e:	461a      	mov	r2, r3
 8002860:	4988      	ldr	r1, [pc, #544]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002862:	4603      	mov	r3, r0
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4403      	add	r3, r0
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	3308      	adds	r3, #8
 800286e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 8002870:	7a7b      	ldrb	r3, [r7, #9]
 8002872:	4618      	mov	r0, r3
 8002874:	f8d7 201e 	ldr.w	r2, [r7, #30]
 8002878:	4613      	mov	r3, r2
 800287a:	461a      	mov	r2, r3
 800287c:	4981      	ldr	r1, [pc, #516]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800287e:	4603      	mov	r3, r0
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4403      	add	r3, r0
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	330c      	adds	r3, #12
 800288a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 800288c:	7a7b      	ldrb	r3, [r7, #9]
 800288e:	4618      	mov	r0, r3
 8002890:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 8002894:	4613      	mov	r3, r2
 8002896:	461a      	mov	r2, r3
 8002898:	497a      	ldr	r1, [pc, #488]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800289a:	4603      	mov	r3, r0
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4403      	add	r3, r0
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	3310      	adds	r3, #16
 80028a6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 80028a8:	7a7b      	ldrb	r3, [r7, #9]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 80028b0:	4613      	mov	r3, r2
 80028b2:	461a      	mov	r2, r3
 80028b4:	4973      	ldr	r1, [pc, #460]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80028b6:	4603      	mov	r3, r0
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4403      	add	r3, r0
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	3314      	adds	r3, #20
 80028c2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 80028c4:	7a7b      	ldrb	r3, [r7, #9]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 80028cc:	4613      	mov	r3, r2
 80028ce:	461a      	mov	r2, r3
 80028d0:	496c      	ldr	r1, [pc, #432]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80028d2:	4603      	mov	r3, r0
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4403      	add	r3, r0
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	3318      	adds	r3, #24
 80028de:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 80028e0:	7a7b      	ldrb	r3, [r7, #9]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 80028e8:	4613      	mov	r3, r2
 80028ea:	461a      	mov	r2, r3
 80028ec:	4965      	ldr	r1, [pc, #404]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80028ee:	4603      	mov	r3, r0
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4403      	add	r3, r0
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	331c      	adds	r3, #28
 80028fa:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 80028fc:	7a7b      	ldrb	r3, [r7, #9]
 80028fe:	4618      	mov	r0, r3
 8002900:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 8002904:	4613      	mov	r3, r2
 8002906:	461a      	mov	r2, r3
 8002908:	495e      	ldr	r1, [pc, #376]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800290a:	4603      	mov	r3, r0
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4403      	add	r3, r0
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3328      	adds	r3, #40	; 0x28
 8002916:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8002918:	7a7b      	ldrb	r3, [r7, #9]
 800291a:	4618      	mov	r0, r3
 800291c:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8002920:	4613      	mov	r3, r2
 8002922:	461a      	mov	r2, r3
 8002924:	4957      	ldr	r1, [pc, #348]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002926:	4603      	mov	r3, r0
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4403      	add	r3, r0
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	332c      	adds	r3, #44	; 0x2c
 8002932:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8002934:	7a7b      	ldrb	r3, [r7, #9]
 8002936:	4618      	mov	r0, r3
 8002938:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 800293c:	4613      	mov	r3, r2
 800293e:	461a      	mov	r2, r3
 8002940:	4950      	ldr	r1, [pc, #320]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002942:	4603      	mov	r3, r0
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4403      	add	r3, r0
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	3330      	adds	r3, #48	; 0x30
 800294e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8002950:	7a7b      	ldrb	r3, [r7, #9]
 8002952:	4618      	mov	r0, r3
 8002954:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 8002958:	4613      	mov	r3, r2
 800295a:	461a      	mov	r2, r3
 800295c:	4949      	ldr	r1, [pc, #292]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800295e:	4603      	mov	r3, r0
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4403      	add	r3, r0
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	3334      	adds	r3, #52	; 0x34
 800296a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	4618      	mov	r0, r3
 8002970:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 8002974:	4613      	mov	r3, r2
 8002976:	461a      	mov	r2, r3
 8002978:	4942      	ldr	r1, [pc, #264]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800297a:	4603      	mov	r3, r0
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4403      	add	r3, r0
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3338      	adds	r3, #56	; 0x38
 8002986:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 8002988:	7a7b      	ldrb	r3, [r7, #9]
 800298a:	4618      	mov	r0, r3
 800298c:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 8002990:	4613      	mov	r3, r2
 8002992:	461a      	mov	r2, r3
 8002994:	493b      	ldr	r1, [pc, #236]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002996:	4603      	mov	r3, r0
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4403      	add	r3, r0
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	333c      	adds	r3, #60	; 0x3c
 80029a2:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 80029a4:	7a7b      	ldrb	r3, [r7, #9]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 80029ac:	4613      	mov	r3, r2
 80029ae:	461a      	mov	r2, r3
 80029b0:	4934      	ldr	r1, [pc, #208]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80029b2:	4603      	mov	r3, r0
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4403      	add	r3, r0
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	3320      	adds	r3, #32
 80029be:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 80029c0:	7a7b      	ldrb	r3, [r7, #9]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 80029c8:	4613      	mov	r3, r2
 80029ca:	461a      	mov	r2, r3
 80029cc:	492d      	ldr	r1, [pc, #180]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80029ce:	4603      	mov	r3, r0
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4403      	add	r3, r0
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	3324      	adds	r3, #36	; 0x24
 80029da:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 80029dc:	7a7b      	ldrb	r3, [r7, #9]
 80029de:	4618      	mov	r0, r3
 80029e0:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 80029e4:	4613      	mov	r3, r2
 80029e6:	461a      	mov	r2, r3
 80029e8:	4926      	ldr	r1, [pc, #152]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80029ea:	4603      	mov	r3, r0
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4403      	add	r3, r0
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3340      	adds	r3, #64	; 0x40
 80029f6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 80029f8:	7a7b      	ldrb	r3, [r7, #9]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 8002a00:	4613      	mov	r3, r2
 8002a02:	461a      	mov	r2, r3
 8002a04:	491f      	ldr	r1, [pc, #124]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002a06:	4603      	mov	r3, r0
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4403      	add	r3, r0
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3344      	adds	r3, #68	; 0x44
 8002a12:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <ShoreConfigRequest+0x2e4>)
 8002a16:	785a      	ldrb	r2, [r3, #1]
 8002a18:	7a7b      	ldrb	r3, [r7, #9]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d01d      	beq.n	8002a5a <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a24:	e00e      	b.n	8002a44 <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 8002a26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002a2a:	4916      	ldr	r1, [pc, #88]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d9ec      	bls.n	8002a26 <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 8002a4c:	7a7a      	ldrb	r2, [r7, #9]
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <ShoreConfigRequest+0x2e4>)
 8002a50:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002a52:	7a7b      	ldrb	r3, [r7, #9]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 f811 	bl	8004a7c <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 8002a5a:	f002 fdcd 	bl	80055f8 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a60:	895b      	ldrh	r3, [r3, #10]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a68:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002a6a:	e004      	b.n	8002a76 <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a74:	60d3      	str	r3, [r2, #12]
}
 8002a76:	bf00      	nop
 8002a78:	3760      	adds	r7, #96	; 0x60
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20001e40 	.word	0x20001e40
 8002a84:	20001eb0 	.word	0x20001eb0
 8002a88:	20001d34 	.word	0x20001d34
 8002a8c:	20000194 	.word	0x20000194

08002a90 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 8002a98:	2111      	movs	r1, #17
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe ff25 	bl	80018ea <IsCrc16ChecksummCorrect>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 809b 	beq.w	8002bde <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f107 040c 	add.w	r4, r7, #12
 8002aae:	461d      	mov	r5, r3
 8002ab0:	6828      	ldr	r0, [r5, #0]
 8002ab2:	6869      	ldr	r1, [r5, #4]
 8002ab4:	68aa      	ldr	r2, [r5, #8]
 8002ab6:	68eb      	ldr	r3, [r5, #12]
 8002ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aba:	7c2b      	ldrb	r3, [r5, #16]
 8002abc:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e00b      	b.n	8002adc <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 8002ac4:	7ffa      	ldrb	r2, [r7, #31]
 8002ac6:	494a      	ldr	r1, [pc, #296]	; (8002bf0 <ShoreDirectRequest+0x160>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002ad6:	7ffb      	ldrb	r3, [r7, #31]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d9f0      	bls.n	8002ac4 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	77bb      	strb	r3, [r7, #30]
 8002ae6:	e070      	b.n	8002bca <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 8002ae8:	7b7b      	ldrb	r3, [r7, #13]
 8002aea:	7fba      	ldrb	r2, [r7, #30]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d00a      	beq.n	8002b06 <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 8002af0:	7fba      	ldrb	r2, [r7, #30]
 8002af2:	4940      	ldr	r1, [pc, #256]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	3302      	adds	r3, #2
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e05e      	b.n	8002bc4 <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002b0e:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002b20:	7b7b      	ldrb	r3, [r7, #13]
 8002b22:	4619      	mov	r1, r3
 8002b24:	7bb8      	ldrb	r0, [r7, #14]
 8002b26:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b28:	460b      	mov	r3, r1
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	440b      	add	r3, r1
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	4602      	mov	r2, r0
 8002b34:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 8002b36:	7b7b      	ldrb	r3, [r7, #13]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	492c      	ldr	r1, [pc, #176]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b44:	4603      	mov	r3, r0
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4403      	add	r3, r0
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	330c      	adds	r3, #12
 8002b50:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002b52:	7b7b      	ldrb	r3, [r7, #13]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f8d7 2015 	ldr.w	r2, [r7, #21]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4925      	ldr	r1, [pc, #148]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b60:	4603      	mov	r3, r0
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4403      	add	r3, r0
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002b6e:	7b7b      	ldrb	r3, [r7, #13]
 8002b70:	4619      	mov	r1, r3
 8002b72:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b78:	460b      	mov	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	440b      	add	r3, r1
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	3314      	adds	r3, #20
 8002b84:	4602      	mov	r2, r0
 8002b86:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 8002b88:	7b7b      	ldrb	r3, [r7, #13]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f997 001a 	ldrsb.w	r0, [r7, #26]
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b92:	460b      	mov	r3, r1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3315      	adds	r3, #21
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 8002ba2:	7c3b      	ldrb	r3, [r7, #16]
 8002ba4:	7b7a      	ldrb	r2, [r7, #13]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2d8      	uxtb	r0, r3
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3316      	adds	r3, #22
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002bc4:	7fbb      	ldrb	r3, [r7, #30]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	77bb      	strb	r3, [r7, #30]
 8002bca:	7fbb      	ldrb	r3, [r7, #30]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d98b      	bls.n	8002ae8 <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002bd2:	895b      	ldrh	r3, [r3, #10]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002bda:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002bdc:	e004      	b.n	8002be8 <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf0:	20001eb0 	.word	0x20001eb0
 8002bf4:	20001d40 	.word	0x20001d40
 8002bf8:	20000194 	.word	0x20000194

08002bfc <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b094      	sub	sp, #80	; 0x50
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <ShoreResponse+0x74>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
    res.pitch = rSensors.pitch;
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <ShoreResponse+0x74>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	613b      	str	r3, [r7, #16]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <ShoreResponse+0x74>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	617b      	str	r3, [r7, #20]
    res.rollSpeed = rSensors.rollSpeed;
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <ShoreResponse+0x74>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	61bb      	str	r3, [r7, #24]
    res.pitchSpeed = rSensors.pitchSpeed;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <ShoreResponse+0x74>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	61fb      	str	r3, [r7, #28]
    res.yawSpeed = rSensors.yawSpeed;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <ShoreResponse+0x74>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	623b      	str	r3, [r7, #32]

    res.pressure = rSensors.pressure;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <ShoreResponse+0x74>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002c34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <ShoreResponse+0x78>)
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	2246      	movs	r2, #70	; 0x46
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f00d fb60 	bl	8010320 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002c60:	2146      	movs	r1, #70	; 0x46
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fe61 	bl	800192a <AddCrc16Checksumm>
}
 8002c68:	bf00      	nop
 8002c6a:	3750      	adds	r7, #80	; 0x50
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20001dd0 	.word	0x20001dd0
 8002c74:	20001e3c 	.word	0x20001e3c

08002c78 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b09c      	sub	sp, #112	; 0x70
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002c80:	2355      	movs	r3, #85	; 0x55
 8002c82:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 8002c84:	4b74      	ldr	r3, [pc, #464]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 8002c8c:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 8002c94:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 8002c9c:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002ccc:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002cce:	785b      	ldrb	r3, [r3, #1]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4a63      	ldr	r2, [pc, #396]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002cd4:	2358      	movs	r3, #88	; 0x58
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 8002ce4:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002ce6:	785b      	ldrb	r3, [r3, #1]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4a5d      	ldr	r2, [pc, #372]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002cec:	2358      	movs	r3, #88	; 0x58
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d06:	2358      	movs	r3, #88	; 0x58
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3308      	adds	r3, #8
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d20:	2358      	movs	r3, #88	; 0x58
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	331c      	adds	r3, #28
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	4619      	mov	r1, r3
 8002d36:	4a4a      	ldr	r2, [pc, #296]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d38:	2358      	movs	r3, #88	; 0x58
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3320      	adds	r3, #32
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4a44      	ldr	r2, [pc, #272]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d50:	2358      	movs	r3, #88	; 0x58
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3324      	adds	r3, #36	; 0x24
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002d60:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	4619      	mov	r1, r3
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d68:	2358      	movs	r3, #88	; 0x58
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3328      	adds	r3, #40	; 0x28
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d80:	2358      	movs	r3, #88	; 0x58
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	332c      	adds	r3, #44	; 0x2c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 8002d90:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d98:	2358      	movs	r3, #88	; 0x58
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3330      	adds	r3, #48	; 0x30
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002db0:	2358      	movs	r3, #88	; 0x58
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002dc8:	2358      	movs	r3, #88	; 0x58
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	333c      	adds	r3, #60	; 0x3c
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002dda:	785b      	ldrb	r3, [r3, #1]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002de0:	2358      	movs	r3, #88	; 0x58
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3340      	adds	r3, #64	; 0x40
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002df8:	2358      	movs	r3, #88	; 0x58
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3334      	adds	r3, #52	; 0x34
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002e10:	2358      	movs	r3, #88	; 0x58
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	334c      	adds	r3, #76	; 0x4c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002e22:	785b      	ldrb	r3, [r3, #1]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002e28:	2358      	movs	r3, #88	; 0x58
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3350      	adds	r3, #80	; 0x50
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2263      	movs	r2, #99	; 0x63
 8002e42:	4619      	mov	r1, r3
 8002e44:	f00d fa6c 	bl	8010320 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e48:	2163      	movs	r1, #99	; 0x63
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fd6d 	bl	800192a <AddCrc16Checksumm>
}
 8002e50:	bf00      	nop
 8002e52:	3770      	adds	r7, #112	; 0x70
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20001dd0 	.word	0x20001dd0
 8002e5c:	20001d34 	.word	0x20001d34
 8002e60:	20002060 	.word	0x20002060

08002e64 <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002e6c:	23ff      	movs	r3, #255	; 0xff
 8002e6e:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002e70:	23aa      	movs	r3, #170	; 0xaa
 8002e72:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 8002e74:	23bb      	movs	r3, #187	; 0xbb
 8002e76:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f107 0308 	add.w	r3, r7, #8
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6010      	str	r0, [r2, #0]
 8002e84:	889b      	ldrh	r3, [r3, #4]
 8002e86:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e88:	2106      	movs	r1, #6
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fd4d 	bl	800192a <AddCrc16Checksumm>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	// Check sync byte
	if ((ReceiveBuf[0] != 0xFA)||(ReceiveBuf[1] != 0x01)||(ReceiveBuf[2] != 0x28)||(ReceiveBuf[3] != 0x00))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2bfa      	cmp	r3, #250	; 0xfa
 8002ea6:	d10e      	bne.n	8002ec6 <ImuReceive+0x2e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d109      	bne.n	8002ec6 <ImuReceive+0x2e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b28      	cmp	r3, #40	; 0x28
 8002eba:	d104      	bne.n	8002ec6 <ImuReceive+0x2e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3303      	adds	r3, #3
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <ImuReceive+0x3e>
	{
		++uartBus[IMU_UART].brokenRxCounter;
 8002ec6:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <ImuReceive+0xf8>)
 8002ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ecc:	3301      	adds	r3, #1
 8002ece:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <ImuReceive+0xf8>)
 8002ed0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		return;
 8002ed4:	e059      	b.n	8002f8a <ImuReceive+0xf2>
	}

	rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	331c      	adds	r3, #28
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	331d      	adds	r3, #29
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <ImuReceive+0xfc>)
 8002ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	//crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
	uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	211b      	movs	r1, #27
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f84c 	bl	8002f98 <calculateCRC>
 8002f00:	4603      	mov	r3, r0
 8002f02:	81fb      	strh	r3, [r7, #14]
	if (rSensors.crc != calculated_crc)
 8002f04:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <ImuReceive+0xfc>)
 8002f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f0a:	89fa      	ldrh	r2, [r7, #14]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d007      	beq.n	8002f20 <ImuReceive+0x88>
	{
		++uartBus[IMU_UART].brokenRxCounter;
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <ImuReceive+0xf8>)
 8002f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <ImuReceive+0xf8>)
 8002f1a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		return;
 8002f1e:	e034      	b.n	8002f8a <ImuReceive+0xf2>
	}



	memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <ImuReceive+0xfc>)
 8002f2a:	609a      	str	r2, [r3, #8]
	memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <ImuReceive+0xfc>)
 8002f36:	605a      	str	r2, [r3, #4]
	memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <ImuReceive+0xfc>)
 8002f42:	601a      	str	r2, [r3, #0]

	memcpy(&rSensors.rollSpeed, ReceiveBuf + 16, sizeof(rSensors.rollSpeed));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3310      	adds	r3, #16
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <ImuReceive+0xfc>)
 8002f4e:	61da      	str	r2, [r3, #28]
	memcpy(&rSensors.pitchSpeed, ReceiveBuf + 20, sizeof(rSensors.pitchSpeed));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3314      	adds	r3, #20
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <ImuReceive+0xfc>)
 8002f5a:	621a      	str	r2, [r3, #32]
	memcpy(&rSensors.yawSpeed, ReceiveBuf + 24, sizeof(rSensors.yawSpeed));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3318      	adds	r3, #24
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <ImuReceive+0xfc>)
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.LastTick = xTaskGetTickCount();
 8002f68:	f00b fa78 	bl	800e45c <xTaskGetTickCount>
 8002f6c:	ee07 0a90 	vmov	s15, r0
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <ImuReceive+0xfc>)
 8002f76:	edc3 7a05 	vstr	s15, [r3, #20]


	++uartBus[IMU_UART].successRxCounter;
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <ImuReceive+0xf8>)
 8002f7c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002f80:	3301      	adds	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <ImuReceive+0xf8>)
 8002f86:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
}
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000194 	.word	0x20000194
 8002f94:	20001dd0 	.word	0x20001dd0

08002f98 <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e030      	b.n	800300e <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 8002fac:	897b      	ldrh	r3, [r7, #10]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	b21a      	sxth	r2, r3
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	4053      	eors	r3, r2
 8002fd0:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	4053      	eors	r3, r2
 8002fe0:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	031b      	lsls	r3, r3, #12
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fec:	4053      	eors	r3, r2
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	015b      	lsls	r3, r3, #5
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 8002ffc:	b21a      	sxth	r2, r3
 8002ffe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003002:	4053      	eors	r3, r2
 8003004:	b21b      	sxth	r3, r3
 8003006:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d3ca      	bcc.n	8002fac <calculateCRC+0x14>
    }
    return crc;
 8003016:	897b      	ldrh	r3, [r7, #10]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <MX_DMA_Init+0x68>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <MX_DMA_Init+0x68>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6153      	str	r3, [r2, #20]
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <MX_DMA_Init+0x68>)
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2105      	movs	r1, #5
 8003046:	200e      	movs	r0, #14
 8003048:	f002 fff6 	bl	8006038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800304c:	200e      	movs	r0, #14
 800304e:	f003 f80f 	bl	8006070 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2105      	movs	r1, #5
 8003056:	200f      	movs	r0, #15
 8003058:	f002 ffee 	bl	8006038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800305c:	200f      	movs	r0, #15
 800305e:	f003 f807 	bl	8006070 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2105      	movs	r1, #5
 8003066:	2010      	movs	r0, #16
 8003068:	f002 ffe6 	bl	8006038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800306c:	2010      	movs	r0, #16
 800306e:	f002 ffff 	bl	8006070 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2105      	movs	r1, #5
 8003076:	2011      	movs	r0, #17
 8003078:	f002 ffde 	bl	8006038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800307c:	2011      	movs	r0, #17
 800307e:	f002 fff7 	bl	8006070 <HAL_NVIC_EnableIRQ>

}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <flashReadSettings+0x44>)
 800309a:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030a0:	2300      	movs	r3, #0
 80030a2:	81fb      	strh	r3, [r7, #14]
 80030a4:	e00c      	b.n	80030c0 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	601a      	str	r2, [r3, #0]
		source_addr++;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3304      	adds	r3, #4
 80030b2:	617b      	str	r3, [r7, #20]
		dest_addr++;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	3304      	adds	r3, #4
 80030b8:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030ba:	89fb      	ldrh	r3, [r7, #14]
 80030bc:	3301      	adds	r3, #1
 80030be:	81fb      	strh	r3, [r7, #14]
 80030c0:	89fb      	ldrh	r3, [r7, #14]
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d9ef      	bls.n	80030a6 <flashReadSettings+0x16>
	}
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	0803f800 	.word	0x0803f800

080030d8 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 80030e0:	f003 fa7c 	bl	80065dc <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_PAGES; // erase only 1 page
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <flashWriteSettings+0x70>)
 80030ea:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 80030f0:	f107 020c 	add.w	r2, r7, #12
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fb32 	bl	8006764 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <flashWriteSettings+0x70>)
 8003106:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003108:	2300      	movs	r3, #0
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e013      	b.n	8003136 <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 800310e:	6a39      	ldr	r1, [r7, #32]
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	461c      	mov	r4, r3
 8003118:	4615      	mov	r5, r2
 800311a:	4622      	mov	r2, r4
 800311c:	462b      	mov	r3, r5
 800311e:	2002      	movs	r0, #2
 8003120:	f003 f9ec 	bl	80064fc <HAL_FLASH_Program>
		source_addr++;
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	3304      	adds	r3, #4
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	3304      	adds	r3, #4
 800312e:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003130:	7ffb      	ldrb	r3, [r7, #31]
 8003132:	3301      	adds	r3, #1
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d9e8      	bls.n	800310e <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 800313c:	f003 fa74 	bl	8006628 <HAL_FLASH_Lock>
}
 8003140:	bf00      	nop
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bdb0      	pop	{r4, r5, r7, pc}
 8003148:	0803f800 	.word	0x0803f800

0800314c <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	22aa      	movs	r2, #170	; 0xaa
 8003158:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e154      	b.n	800340a <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8003160:	7bf9      	ldrb	r1, [r7, #15]
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	48ae      	ldr	r0, [pc, #696]	; (8003420 <flashFillStructure+0x2d4>)
 8003166:	460b      	mov	r3, r1
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4403      	add	r3, r0
 8003170:	3304      	adds	r3, #4
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3301      	adds	r3, #1
 8003182:	4602      	mov	r2, r0
 8003184:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8003186:	7bf9      	ldrb	r1, [r7, #15]
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	48a5      	ldr	r0, [pc, #660]	; (8003420 <flashFillStructure+0x2d4>)
 800318c:	460b      	mov	r3, r1
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4403      	add	r3, r0
 8003196:	3308      	adds	r3, #8
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	3305      	adds	r3, #5
 80031a8:	4602      	mov	r2, r0
 80031aa:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 80031ac:	7bf9      	ldrb	r1, [r7, #15]
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	489b      	ldr	r0, [pc, #620]	; (8003420 <flashFillStructure+0x2d4>)
 80031b2:	460b      	mov	r3, r1
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4403      	add	r3, r0
 80031bc:	330c      	adds	r3, #12
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3308      	adds	r3, #8
 80031ce:	3301      	adds	r3, #1
 80031d0:	4602      	mov	r2, r0
 80031d2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 80031d4:	7bf9      	ldrb	r1, [r7, #15]
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	4891      	ldr	r0, [pc, #580]	; (8003420 <flashFillStructure+0x2d4>)
 80031da:	460b      	mov	r3, r1
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4403      	add	r3, r0
 80031e4:	3310      	adds	r3, #16
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3308      	adds	r3, #8
 80031f6:	3305      	adds	r3, #5
 80031f8:	4602      	mov	r2, r0
 80031fa:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 80031fc:	7bf9      	ldrb	r1, [r7, #15]
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	4887      	ldr	r0, [pc, #540]	; (8003420 <flashFillStructure+0x2d4>)
 8003202:	460b      	mov	r3, r1
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4403      	add	r3, r0
 800320c:	3318      	adds	r3, #24
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3310      	adds	r3, #16
 800321e:	3301      	adds	r3, #1
 8003220:	4602      	mov	r2, r0
 8003222:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 8003224:	7bf9      	ldrb	r1, [r7, #15]
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	487d      	ldr	r0, [pc, #500]	; (8003420 <flashFillStructure+0x2d4>)
 800322a:	460b      	mov	r3, r1
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4403      	add	r3, r0
 8003234:	3314      	adds	r3, #20
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3310      	adds	r3, #16
 8003246:	3305      	adds	r3, #5
 8003248:	4602      	mov	r2, r0
 800324a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 800324c:	7bf9      	ldrb	r1, [r7, #15]
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	4873      	ldr	r0, [pc, #460]	; (8003420 <flashFillStructure+0x2d4>)
 8003252:	460b      	mov	r3, r1
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4403      	add	r3, r0
 800325c:	331c      	adds	r3, #28
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	3318      	adds	r3, #24
 800326e:	3301      	adds	r3, #1
 8003270:	4602      	mov	r2, r0
 8003272:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8003274:	7bf9      	ldrb	r1, [r7, #15]
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	4869      	ldr	r0, [pc, #420]	; (8003420 <flashFillStructure+0x2d4>)
 800327a:	460b      	mov	r3, r1
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4403      	add	r3, r0
 8003284:	3328      	adds	r3, #40	; 0x28
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3318      	adds	r3, #24
 8003296:	3305      	adds	r3, #5
 8003298:	4602      	mov	r2, r0
 800329a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 800329c:	7bf9      	ldrb	r1, [r7, #15]
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	485f      	ldr	r0, [pc, #380]	; (8003420 <flashFillStructure+0x2d4>)
 80032a2:	460b      	mov	r3, r1
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4403      	add	r3, r0
 80032ac:	332c      	adds	r3, #44	; 0x2c
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3320      	adds	r3, #32
 80032be:	3301      	adds	r3, #1
 80032c0:	4602      	mov	r2, r0
 80032c2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 80032c4:	7bf9      	ldrb	r1, [r7, #15]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	4855      	ldr	r0, [pc, #340]	; (8003420 <flashFillStructure+0x2d4>)
 80032ca:	460b      	mov	r3, r1
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4403      	add	r3, r0
 80032d4:	3330      	adds	r3, #48	; 0x30
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3320      	adds	r3, #32
 80032e6:	3305      	adds	r3, #5
 80032e8:	4602      	mov	r2, r0
 80032ea:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 80032ec:	7bf9      	ldrb	r1, [r7, #15]
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	484b      	ldr	r0, [pc, #300]	; (8003420 <flashFillStructure+0x2d4>)
 80032f2:	460b      	mov	r3, r1
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4403      	add	r3, r0
 80032fc:	3334      	adds	r3, #52	; 0x34
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3328      	adds	r3, #40	; 0x28
 800330e:	3301      	adds	r3, #1
 8003310:	4602      	mov	r2, r0
 8003312:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 8003314:	7bf9      	ldrb	r1, [r7, #15]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	4841      	ldr	r0, [pc, #260]	; (8003420 <flashFillStructure+0x2d4>)
 800331a:	460b      	mov	r3, r1
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4403      	add	r3, r0
 8003324:	3338      	adds	r3, #56	; 0x38
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3328      	adds	r3, #40	; 0x28
 8003336:	3305      	adds	r3, #5
 8003338:	4602      	mov	r2, r0
 800333a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 800333c:	7bf9      	ldrb	r1, [r7, #15]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	4837      	ldr	r0, [pc, #220]	; (8003420 <flashFillStructure+0x2d4>)
 8003342:	460b      	mov	r3, r1
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4403      	add	r3, r0
 800334c:	333c      	adds	r3, #60	; 0x3c
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3330      	adds	r3, #48	; 0x30
 800335e:	3301      	adds	r3, #1
 8003360:	4602      	mov	r2, r0
 8003362:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 8003364:	7bf9      	ldrb	r1, [r7, #15]
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	482d      	ldr	r0, [pc, #180]	; (8003420 <flashFillStructure+0x2d4>)
 800336a:	460b      	mov	r3, r1
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4403      	add	r3, r0
 8003374:	3320      	adds	r3, #32
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3330      	adds	r3, #48	; 0x30
 8003386:	3305      	adds	r3, #5
 8003388:	4602      	mov	r2, r0
 800338a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 800338c:	7bf9      	ldrb	r1, [r7, #15]
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	4823      	ldr	r0, [pc, #140]	; (8003420 <flashFillStructure+0x2d4>)
 8003392:	460b      	mov	r3, r1
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4403      	add	r3, r0
 800339c:	3324      	adds	r3, #36	; 0x24
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3338      	adds	r3, #56	; 0x38
 80033ae:	3301      	adds	r3, #1
 80033b0:	4602      	mov	r2, r0
 80033b2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 80033b4:	7bf9      	ldrb	r1, [r7, #15]
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	4819      	ldr	r0, [pc, #100]	; (8003420 <flashFillStructure+0x2d4>)
 80033ba:	460b      	mov	r3, r1
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4403      	add	r3, r0
 80033c4:	3340      	adds	r3, #64	; 0x40
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3338      	adds	r3, #56	; 0x38
 80033d6:	3305      	adds	r3, #5
 80033d8:	4602      	mov	r2, r0
 80033da:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 80033dc:	7bf9      	ldrb	r1, [r7, #15]
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	480f      	ldr	r0, [pc, #60]	; (8003420 <flashFillStructure+0x2d4>)
 80033e2:	460b      	mov	r3, r1
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4403      	add	r3, r0
 80033ec:	3344      	adds	r3, #68	; 0x44
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3340      	adds	r3, #64	; 0x40
 80033fe:	3301      	adds	r3, #1
 8003400:	4602      	mov	r2, r0
 8003402:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	3301      	adds	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b05      	cmp	r3, #5
 800340e:	f67f aea7 	bls.w	8003160 <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	20001eb0 	.word	0x20001eb0

08003424 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e165      	b.n	80036fe <flashReadStructure+0x2da>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	7bf9      	ldrb	r1, [r7, #15]
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4403      	add	r3, r0
 8003442:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003446:	4613      	mov	r3, r2
 8003448:	461a      	mov	r2, r3
 800344a:	48b7      	ldr	r0, [pc, #732]	; (8003728 <flashReadStructure+0x304>)
 800344c:	460b      	mov	r3, r1
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4403      	add	r3, r0
 8003456:	3304      	adds	r3, #4
 8003458:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	7bf9      	ldrb	r1, [r7, #15]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4403      	add	r3, r0
 800346a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800346e:	4613      	mov	r3, r2
 8003470:	461a      	mov	r2, r3
 8003472:	48ad      	ldr	r0, [pc, #692]	; (8003728 <flashReadStructure+0x304>)
 8003474:	460b      	mov	r3, r1
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4403      	add	r3, r0
 800347e:	3308      	adds	r3, #8
 8003480:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	7bf9      	ldrb	r1, [r7, #15]
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4403      	add	r3, r0
 8003492:	3308      	adds	r3, #8
 8003494:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003498:	4613      	mov	r3, r2
 800349a:	461a      	mov	r2, r3
 800349c:	48a2      	ldr	r0, [pc, #648]	; (8003728 <flashReadStructure+0x304>)
 800349e:	460b      	mov	r3, r1
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4403      	add	r3, r0
 80034a8:	330c      	adds	r3, #12
 80034aa:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	7bf9      	ldrb	r1, [r7, #15]
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	3308      	adds	r3, #8
 80034be:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80034c2:	4613      	mov	r3, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4898      	ldr	r0, [pc, #608]	; (8003728 <flashReadStructure+0x304>)
 80034c8:	460b      	mov	r3, r1
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4403      	add	r3, r0
 80034d2:	3310      	adds	r3, #16
 80034d4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	7bf9      	ldrb	r1, [r7, #15]
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	3310      	adds	r3, #16
 80034e8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80034ec:	4613      	mov	r3, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	488d      	ldr	r0, [pc, #564]	; (8003728 <flashReadStructure+0x304>)
 80034f2:	460b      	mov	r3, r1
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4403      	add	r3, r0
 80034fc:	3318      	adds	r3, #24
 80034fe:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	7bf9      	ldrb	r1, [r7, #15]
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4403      	add	r3, r0
 8003510:	3310      	adds	r3, #16
 8003512:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003516:	4613      	mov	r3, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4883      	ldr	r0, [pc, #524]	; (8003728 <flashReadStructure+0x304>)
 800351c:	460b      	mov	r3, r1
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4403      	add	r3, r0
 8003526:	3314      	adds	r3, #20
 8003528:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	7bf9      	ldrb	r1, [r7, #15]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4403      	add	r3, r0
 800353a:	3318      	adds	r3, #24
 800353c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003540:	4613      	mov	r3, r2
 8003542:	461a      	mov	r2, r3
 8003544:	4878      	ldr	r0, [pc, #480]	; (8003728 <flashReadStructure+0x304>)
 8003546:	460b      	mov	r3, r1
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4403      	add	r3, r0
 8003550:	331c      	adds	r3, #28
 8003552:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	7bf9      	ldrb	r1, [r7, #15]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4403      	add	r3, r0
 8003564:	3318      	adds	r3, #24
 8003566:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800356a:	4613      	mov	r3, r2
 800356c:	461a      	mov	r2, r3
 800356e:	486e      	ldr	r0, [pc, #440]	; (8003728 <flashReadStructure+0x304>)
 8003570:	460b      	mov	r3, r1
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4403      	add	r3, r0
 800357a:	3328      	adds	r3, #40	; 0x28
 800357c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	7bf9      	ldrb	r1, [r7, #15]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4403      	add	r3, r0
 800358e:	3320      	adds	r3, #32
 8003590:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003594:	4613      	mov	r3, r2
 8003596:	461a      	mov	r2, r3
 8003598:	4863      	ldr	r0, [pc, #396]	; (8003728 <flashReadStructure+0x304>)
 800359a:	460b      	mov	r3, r1
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4403      	add	r3, r0
 80035a4:	332c      	adds	r3, #44	; 0x2c
 80035a6:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	7bf9      	ldrb	r1, [r7, #15]
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4403      	add	r3, r0
 80035b8:	3320      	adds	r3, #32
 80035ba:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80035be:	4613      	mov	r3, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4859      	ldr	r0, [pc, #356]	; (8003728 <flashReadStructure+0x304>)
 80035c4:	460b      	mov	r3, r1
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4403      	add	r3, r0
 80035ce:	3330      	adds	r3, #48	; 0x30
 80035d0:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	7bf9      	ldrb	r1, [r7, #15]
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	3328      	adds	r3, #40	; 0x28
 80035e4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80035e8:	4613      	mov	r3, r2
 80035ea:	461a      	mov	r2, r3
 80035ec:	484e      	ldr	r0, [pc, #312]	; (8003728 <flashReadStructure+0x304>)
 80035ee:	460b      	mov	r3, r1
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4403      	add	r3, r0
 80035f8:	3334      	adds	r3, #52	; 0x34
 80035fa:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	7bf9      	ldrb	r1, [r7, #15]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4403      	add	r3, r0
 800360c:	3328      	adds	r3, #40	; 0x28
 800360e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003612:	4613      	mov	r3, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4844      	ldr	r0, [pc, #272]	; (8003728 <flashReadStructure+0x304>)
 8003618:	460b      	mov	r3, r1
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4403      	add	r3, r0
 8003622:	3338      	adds	r3, #56	; 0x38
 8003624:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	7bf9      	ldrb	r1, [r7, #15]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4403      	add	r3, r0
 8003636:	3330      	adds	r3, #48	; 0x30
 8003638:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800363c:	4613      	mov	r3, r2
 800363e:	461a      	mov	r2, r3
 8003640:	4839      	ldr	r0, [pc, #228]	; (8003728 <flashReadStructure+0x304>)
 8003642:	460b      	mov	r3, r1
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4403      	add	r3, r0
 800364c:	333c      	adds	r3, #60	; 0x3c
 800364e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	7bf9      	ldrb	r1, [r7, #15]
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4403      	add	r3, r0
 8003660:	3330      	adds	r3, #48	; 0x30
 8003662:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003666:	4613      	mov	r3, r2
 8003668:	461a      	mov	r2, r3
 800366a:	482f      	ldr	r0, [pc, #188]	; (8003728 <flashReadStructure+0x304>)
 800366c:	460b      	mov	r3, r1
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4403      	add	r3, r0
 8003676:	3320      	adds	r3, #32
 8003678:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	7bf9      	ldrb	r1, [r7, #15]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4403      	add	r3, r0
 800368a:	3338      	adds	r3, #56	; 0x38
 800368c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003690:	4613      	mov	r3, r2
 8003692:	461a      	mov	r2, r3
 8003694:	4824      	ldr	r0, [pc, #144]	; (8003728 <flashReadStructure+0x304>)
 8003696:	460b      	mov	r3, r1
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4403      	add	r3, r0
 80036a0:	3324      	adds	r3, #36	; 0x24
 80036a2:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	7bf9      	ldrb	r1, [r7, #15]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4403      	add	r3, r0
 80036b4:	3338      	adds	r3, #56	; 0x38
 80036b6:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80036ba:	4613      	mov	r3, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	481a      	ldr	r0, [pc, #104]	; (8003728 <flashReadStructure+0x304>)
 80036c0:	460b      	mov	r3, r1
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4403      	add	r3, r0
 80036ca:	3340      	adds	r3, #64	; 0x40
 80036cc:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	7bf9      	ldrb	r1, [r7, #15]
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4403      	add	r3, r0
 80036de:	3340      	adds	r3, #64	; 0x40
 80036e0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80036e4:	4613      	mov	r3, r2
 80036e6:	461a      	mov	r2, r3
 80036e8:	480f      	ldr	r0, [pc, #60]	; (8003728 <flashReadStructure+0x304>)
 80036ea:	460b      	mov	r3, r1
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	440b      	add	r3, r1
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4403      	add	r3, r0
 80036f4:	3344      	adds	r3, #68	; 0x44
 80036f6:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b05      	cmp	r3, #5
 8003702:	f67f ae96 	bls.w	8003432 <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2baa      	cmp	r3, #170	; 0xaa
 800370c:	d103      	bne.n	8003716 <flashReadStructure+0x2f2>
		rState.flash = true;
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <flashReadStructure+0x308>)
 8003710:	2201      	movs	r2, #1
 8003712:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 8003714:	e002      	b.n	800371c <flashReadStructure+0x2f8>
		rState.flash = false;
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <flashReadStructure+0x308>)
 8003718:	2200      	movs	r2, #0
 800371a:	709a      	strb	r2, [r3, #2]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20001eb0 	.word	0x20001eb0
 800372c:	20001d34 	.word	0x20001d34

08003730 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <vApplicationGetIdleTaskMemory+0x2c>)
 8003740:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <vApplicationGetIdleTaskMemory+0x30>)
 8003746:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200015d4 	.word	0x200015d4
 8003760:	20001684 	.word	0x20001684

08003764 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a07      	ldr	r2, [pc, #28]	; (8003790 <vApplicationGetTimerTaskMemory+0x2c>)
 8003774:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <vApplicationGetTimerTaskMemory+0x30>)
 800377a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003782:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20001884 	.word	0x20001884
 8003794:	20001934 	.word	0x20001934

08003798 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b0bc      	sub	sp, #240	; 0xf0
 800379c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 800379e:	f7fe fa8f 	bl	8001cc0 <uartBusesInit>
    i2cBusesInit();
 80037a2:	f7fe fb8b 	bl	8001ebc <i2cBusesInit>
    variableInit();
 80037a6:	f7fe f9eb 	bl	8001b80 <variableInit>
    stabilizationInit();
 80037aa:	f000 fe59 	bl	8004460 <stabilizationInit>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 80037ae:	2300      	movs	r3, #0
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <MX_FREERTOS_Init+0x1f4>)
 80037b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 80037ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80037be:	4618      	mov	r0, r3
 80037c0:	f009 fb6a 	bl	800ce98 <osMutexCreate>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4a72      	ldr	r2, [pc, #456]	; (8003990 <MX_FREERTOS_Init+0x1f8>)
 80037c8:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 80037ca:	4b72      	ldr	r3, [pc, #456]	; (8003994 <MX_FREERTOS_Init+0x1fc>)
 80037cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 80037d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f009 fb26 	bl	800ce30 <osTimerCreate>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4a6c      	ldr	r2, [pc, #432]	; (8003998 <MX_FREERTOS_Init+0x200>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTimer */
  osTimerDef(tTechCommTimer, tTechCommTimer_callback);
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <MX_FREERTOS_Init+0x204>)
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  tTechCommTimerHandle = osTimerCreate(osTimer(tTechCommTimer), osTimerOnce, NULL);
 80037f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f009 fb16 	bl	800ce30 <osTimerCreate>
 8003804:	4603      	mov	r3, r0
 8003806:	4a66      	ldr	r2, [pc, #408]	; (80039a0 <MX_FREERTOS_Init+0x208>)
 8003808:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 800380a:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <MX_FREERTOS_Init+0x20c>)
 800380c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 8003816:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800381a:	2200      	movs	r2, #0
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f009 fb06 	bl	800ce30 <osTimerCreate>
 8003824:	4603      	mov	r3, r0
 8003826:	4a60      	ldr	r2, [pc, #384]	; (80039a8 <MX_FREERTOS_Init+0x210>)
 8003828:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 800382a:	4b5e      	ldr	r3, [pc, #376]	; (80039a4 <MX_FREERTOS_Init+0x20c>)
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2300      	movs	r3, #0
 8003830:	2200      	movs	r2, #0
 8003832:	2101      	movs	r1, #1
 8003834:	485d      	ldr	r0, [pc, #372]	; (80039ac <MX_FREERTOS_Init+0x214>)
 8003836:	f00b fbf5 	bl	800f024 <xTimerCreate>
 800383a:	4603      	mov	r3, r0
 800383c:	4a5c      	ldr	r2, [pc, #368]	; (80039b0 <MX_FREERTOS_Init+0x218>)
 800383e:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 8003840:	4b54      	ldr	r3, [pc, #336]	; (8003994 <MX_FREERTOS_Init+0x1fc>)
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	2200      	movs	r2, #0
 8003848:	211e      	movs	r1, #30
 800384a:	485a      	ldr	r0, [pc, #360]	; (80039b4 <MX_FREERTOS_Init+0x21c>)
 800384c:	f00b fbea 	bl	800f024 <xTimerCreate>
 8003850:	4603      	mov	r3, r0
 8003852:	4a59      	ldr	r2, [pc, #356]	; (80039b8 <MX_FREERTOS_Init+0x220>)
 8003854:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 8003856:	4b56      	ldr	r3, [pc, #344]	; (80039b0 <MX_FREERTOS_Init+0x218>)
 8003858:	681c      	ldr	r4, [r3, #0]
 800385a:	f00a fdff 	bl	800e45c <xTaskGetTickCount>
 800385e:	4602      	mov	r2, r0
 8003860:	230a      	movs	r3, #10
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	2101      	movs	r1, #1
 8003868:	4620      	mov	r0, r4
 800386a:	f00b fc6b 	bl	800f144 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 800386e:	4b53      	ldr	r3, [pc, #332]	; (80039bc <MX_FREERTOS_Init+0x224>)
 8003870:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003874:	461d      	mov	r5, r3
 8003876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800387a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800387e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 8003882:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f009 fa71 	bl	800cd70 <osThreadCreate>
 800388e:	4603      	mov	r3, r0
 8003890:	4a4b      	ldr	r2, [pc, #300]	; (80039c0 <MX_FREERTOS_Init+0x228>)
 8003892:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <MX_FREERTOS_Init+0x22c>)
 8003896:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800389a:	461d      	mov	r5, r3
 800389c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800389e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 80038a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f009 fa5e 	bl	800cd70 <osThreadCreate>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a44      	ldr	r2, [pc, #272]	; (80039c8 <MX_FREERTOS_Init+0x230>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 80038ba:	4b44      	ldr	r3, [pc, #272]	; (80039cc <MX_FREERTOS_Init+0x234>)
 80038bc:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80038c0:	461d      	mov	r5, r3
 80038c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 80038ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f009 fa4b 	bl	800cd70 <osThreadCreate>
 80038da:	4603      	mov	r3, r0
 80038dc:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <MX_FREERTOS_Init+0x238>)
 80038de:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityIdle, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 80038e0:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <MX_FREERTOS_Init+0x23c>)
 80038e2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80038e6:	461d      	mov	r5, r3
 80038e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 80038f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f009 fa38 	bl	800cd70 <osThreadCreate>
 8003900:	4603      	mov	r3, r0
 8003902:	4a35      	ldr	r2, [pc, #212]	; (80039d8 <MX_FREERTOS_Init+0x240>)
 8003904:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityIdle, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 8003906:	4b35      	ldr	r3, [pc, #212]	; (80039dc <MX_FREERTOS_Init+0x244>)
 8003908:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800390c:	461d      	mov	r5, r3
 800390e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 800391a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f009 fa25 	bl	800cd70 <osThreadCreate>
 8003926:	4603      	mov	r3, r0
 8003928:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <MX_FREERTOS_Init+0x248>)
 800392a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <MX_FREERTOS_Init+0x24c>)
 800392e:	f107 0420 	add.w	r4, r7, #32
 8003932:	461d      	mov	r5, r3
 8003934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003938:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800393c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 8003940:	f107 0320 	add.w	r3, r7, #32
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f009 fa12 	bl	800cd70 <osThreadCreate>
 800394c:	4603      	mov	r3, r0
 800394e:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <MX_FREERTOS_Init+0x250>)
 8003950:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityHigh, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <MX_FREERTOS_Init+0x254>)
 8003954:	1d3c      	adds	r4, r7, #4
 8003956:	461d      	mov	r5, r3
 8003958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800395a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800395c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f009 fa01 	bl	800cd70 <osThreadCreate>
 800396e:	4603      	mov	r3, r0
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <MX_FREERTOS_Init+0x258>)
 8003972:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <MX_FREERTOS_Init+0x25c>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <MX_FREERTOS_Init+0x25c>)
 800397a:	6811      	ldr	r1, [r2, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f007 fab8 	bl	800aef4 <HAL_UART_Receive_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003984:	bf00      	nop
 8003986:	37e8      	adds	r7, #232	; 0xe8
 8003988:	46bd      	mov	sp, r7
 800398a:	bdb0      	pop	{r4, r5, r7, pc}
 800398c:	2000158c 	.word	0x2000158c
 8003990:	20001588 	.word	0x20001588
 8003994:	08003e19 	.word	0x08003e19
 8003998:	2000157c 	.word	0x2000157c
 800399c:	08003f25 	.word	0x08003f25
 80039a0:	20001580 	.word	0x20001580
 80039a4:	08003f39 	.word	0x08003f39
 80039a8:	20001584 	.word	0x20001584
 80039ac:	08011898 	.word	0x08011898
 80039b0:	2000028c 	.word	0x2000028c
 80039b4:	080118a0 	.word	0x080118a0
 80039b8:	20000288 	.word	0x20000288
 80039bc:	080118bc 	.word	0x080118bc
 80039c0:	20000290 	.word	0x20000290
 80039c4:	080118e8 	.word	0x080118e8
 80039c8:	20000544 	.word	0x20000544
 80039cc:	08011914 	.word	0x08011914
 80039d0:	200007f8 	.word	0x200007f8
 80039d4:	08011944 	.word	0x08011944
 80039d8:	20000aac 	.word	0x20000aac
 80039dc:	08011970 	.word	0x08011970
 80039e0:	20000d60 	.word	0x20000d60
 80039e4:	0801199c 	.word	0x0801199c
 80039e8:	20001014 	.word	0x20001014
 80039ec:	080119c4 	.word	0x080119c4
 80039f0:	200012c8 	.word	0x200012c8
 80039f4:	20000194 	.word	0x20000194

080039f8 <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 8003a00:	f009 f9a6 	bl	800cd50 <osKernelSysTick>
 8003a04:	4603      	mov	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  toggle_counter++;
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <func_tLedBlinkingTask+0x60>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <func_tLedBlinkingTask+0x60>)
 8003a10:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8003a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a16:	4811      	ldr	r0, [pc, #68]	; (8003a5c <func_tLedBlinkingTask+0x64>)
 8003a18:	f003 f8da 	bl	8006bd0 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	2164      	movs	r1, #100	; 0x64
 8003a22:	4618      	mov	r0, r3
 8003a24:	f009 fa50 	bl	800cec8 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8003a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a2c:	480b      	ldr	r0, [pc, #44]	; (8003a5c <func_tLedBlinkingTask+0x64>)
 8003a2e:	f003 f8cf 	bl	8006bd0 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a32:	f107 030c 	add.w	r3, r7, #12
 8003a36:	2164      	movs	r1, #100	; 0x64
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f009 fa45 	bl	800cec8 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 8003a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a42:	4806      	ldr	r0, [pc, #24]	; (8003a5c <func_tLedBlinkingTask+0x64>)
 8003a44:	f003 f8c4 	bl	8006bd0 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a48:	f107 030c 	add.w	r3, r7, #12
 8003a4c:	2164      	movs	r1, #100	; 0x64
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f009 fa3a 	bl	800cec8 <osDelayUntil>
	  toggle_counter++;
 8003a54:	e7d8      	b.n	8003a08 <func_tLedBlinkingTask+0x10>
 8003a56:	bf00      	nop
 8003a58:	20000284 	.word	0x20000284
 8003a5c:	48000400 	.word	0x48000400

08003a60 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003a68:	f009 f972 	bl	800cd50 <osKernelSysTick>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 8003a74:	2201      	movs	r2, #1
 8003a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a7e:	f003 f88f 	bl	8006ba0 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <func_tVmaCommTask+0xdc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2114      	movs	r1, #20
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f009 fee7 	bl	800d85c <xQueueSemaphoreTake>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10b      	bne.n	8003aac <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	4619      	mov	r1, r3
 8003a98:	4829      	ldr	r0, [pc, #164]	; (8003b40 <func_tVmaCommTask+0xe0>)
 8003a9a:	f001 fcfb 	bl	8005494 <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 8003a9e:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <func_tVmaCommTask+0xdc>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	f009 fc62 	bl	800d370 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <func_tVmaCommTask+0xe4>)
 8003aae:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <func_tVmaCommTask+0xe0>)
 8003ab0:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <func_tVmaCommTask+0xe4>)
 8003ab4:	220b      	movs	r2, #11
 8003ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <func_tVmaCommTask+0xe8>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <func_tVmaCommTask+0xe4>)
 8003ac8:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <func_tVmaCommTask+0xe4>)
 8003acc:	2209      	movs	r2, #9
 8003ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	481d      	ldr	r0, [pc, #116]	; (8003b4c <func_tVmaCommTask+0xec>)
 8003ad6:	f7fe fa69 	bl	8001fac <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <func_tVmaCommTask+0xdc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2114      	movs	r1, #20
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f009 febb 	bl	800d85c <xQueueSemaphoreTake>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d111      	bne.n	8003b10 <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4413      	add	r3, r2
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <func_tVmaCommTask+0xe8>)
 8003af6:	4413      	add	r3, r2
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fd3f 	bl	8005580 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <func_tVmaCommTask+0xdc>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	f009 fc30 	bl	800d370 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <func_tVmaCommTask+0xf0>)
 8003b16:	fb83 3102 	smull	r3, r1, r3, r2
 8003b1a:	17d3      	asrs	r3, r2, #31
 8003b1c:	1ac9      	subs	r1, r1, r3
 8003b1e:	460b      	mov	r3, r1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	440b      	add	r3, r1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	1ad1      	subs	r1, r2, r3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	2114      	movs	r1, #20
 8003b32:	4618      	mov	r0, r3
 8003b34:	f009 f9c8 	bl	800cec8 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003b38:	e7a3      	b.n	8003a82 <func_tVmaCommTask+0x22>
 8003b3a:	bf00      	nop
 8003b3c:	20001588 	.word	0x20001588
 8003b40:	20002348 	.word	0x20002348
 8003b44:	20000194 	.word	0x20000194
 8003b48:	20002354 	.word	0x20002354
 8003b4c:	200001cc 	.word	0x200001cc
 8003b50:	2aaaaaab 	.word	0x2aaaaaab

08003b54 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003b5c:	f009 f8f8 	bl	800cd50 <osKernelSysTick>
 8003b60:	4603      	mov	r3, r0
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.startIMU) {
 8003b64:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <func_tImuCommTask+0xc8>)
 8003b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003b70:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <func_tImuCommTask+0xd0>)
 8003b72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 8003b76:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003b78:	2214      	movs	r2, #20
 8003b7a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4829      	ldr	r0, [pc, #164]	; (8003c28 <func_tImuCommTask+0xd4>)
 8003b82:	f7fe f9a9 	bl	8001ed8 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <func_tImuCommTask+0xd8>)
 8003b8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003b90:	221b      	movs	r2, #27
 8003b92:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003b96:	2100      	movs	r1, #0
 8003b98:	4823      	ldr	r0, [pc, #140]	; (8003c28 <func_tImuCommTask+0xd4>)
 8003b9a:	f7fe f99d 	bl	8001ed8 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <func_tImuCommTask+0xc8>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <func_tImuCommTask+0xc8>)
 8003ba4:	65d3      	str	r3, [r2, #92]	; 0x5c
	  		rSensors.startIMU = false;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <func_tImuCommTask+0xc8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003bae:	e02d      	b.n	8003c0c <func_tImuCommTask+0xb8>
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003bb2:	4a1f      	ldr	r2, [pc, #124]	; (8003c30 <func_tImuCommTask+0xdc>)
 8003bb4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003bba:	221e      	movs	r2, #30
 8003bbc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003bc8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003bcc:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <func_tImuCommTask+0xcc>)
 8003bce:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f007 f98d 	bl	800aef4 <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	2101      	movs	r1, #1
 8003be0:	4618      	mov	r0, r3
 8003be2:	f009 f971 	bl	800cec8 <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <func_tImuCommTask+0xe0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f009 fe35 	bl	800d85c <xQueueSemaphoreTake>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d109      	bne.n	8003c0c <func_tImuCommTask+0xb8>
	  			ImuReceive(ImuResponseBuffer);
 8003bf8:	480d      	ldr	r0, [pc, #52]	; (8003c30 <func_tImuCommTask+0xdc>)
 8003bfa:	f7ff f94d 	bl	8002e98 <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <func_tImuCommTask+0xe0>)
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	2200      	movs	r2, #0
 8003c06:	2100      	movs	r1, #0
 8003c08:	f009 fbb2 	bl	800d370 <xQueueGenericSend>
	  		}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	2101      	movs	r1, #1
 8003c12:	4618      	mov	r0, r3
 8003c14:	f009 f958 	bl	800cec8 <osDelayUntil>
	  	if(rSensors.startIMU) {
 8003c18:	e7a4      	b.n	8003b64 <func_tImuCommTask+0x10>
 8003c1a:	bf00      	nop
 8003c1c:	20001dd0 	.word	0x20001dd0
 8003c20:	20000194 	.word	0x20000194
 8003c24:	20000024 	.word	0x20000024
 8003c28:	2000023c 	.word	0x2000023c
 8003c2c:	20000008 	.word	0x20000008
 8003c30:	20002328 	.word	0x20002328
 8003c34:	20001588 	.word	0x20001588

08003c38 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003c40:	f009 f886 	bl	800cd50 <osKernelSysTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <func_tStabilizationTask+0x70>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	210a      	movs	r1, #10
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f009 fe04 	bl	800d85c <xQueueSemaphoreTake>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d11f      	bne.n	8003c9a <func_tStabilizationTask+0x62>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e010      	b.n	8003c82 <func_tStabilizationTask+0x4a>
				if (rStabConstants[i].enable) {
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	4912      	ldr	r1, [pc, #72]	; (8003cac <func_tStabilizationTask+0x74>)
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <func_tStabilizationTask+0x44>
					stabilizationUpdate(i);
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 ffee 	bl	8004c58 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d9eb      	bls.n	8003c60 <func_tStabilizationTask+0x28>
				}
			}
			formThrustVectors();
 8003c88:	f001 fcb6 	bl	80055f8 <formThrustVectors>
			xSemaphoreGive(mutDataHandle);
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <func_tStabilizationTask+0x70>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	2300      	movs	r3, #0
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	f009 fb6b 	bl	800d370 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	210a      	movs	r1, #10
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f009 f911 	bl	800cec8 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003ca6:	e7cf      	b.n	8003c48 <func_tStabilizationTask+0x10>
 8003ca8:	20001588 	.word	0x20001588
 8003cac:	20001eb0 	.word	0x20001eb0

08003cb0 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003cb8:	f009 f84a 	bl	800cd50 <osKernelSysTick>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003cc4:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f009 fdc5 	bl	800d85c <xQueueSemaphoreTake>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10b      	bne.n	8003cf0 <func_tDevCommTask+0x40>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	482b      	ldr	r0, [pc, #172]	; (8003d8c <func_tDevCommTask+0xdc>)
 8003cde:	f7fe faff 	bl	80022e0 <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003ce2:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2100      	movs	r1, #0
 8003cec:	f009 fb40 	bl	800d370 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <func_tDevCommTask+0xe0>)
 8003cf2:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <func_tDevCommTask+0xdc>)
 8003cf4:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <func_tDevCommTask+0xe0>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4a22      	ldr	r2, [pc, #136]	; (8003d94 <func_tDevCommTask+0xe4>)
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a20      	ldr	r2, [pc, #128]	; (8003d90 <func_tDevCommTask+0xe0>)
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <func_tDevCommTask+0xe0>)
 8003d12:	220a      	movs	r2, #10
 8003d14:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8003d18:	2100      	movs	r1, #0
 8003d1a:	481f      	ldr	r0, [pc, #124]	; (8003d98 <func_tDevCommTask+0xe8>)
 8003d1c:	f7fe f946 	bl	8001fac <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003d20:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f009 fd97 	bl	800d85c <xQueueSemaphoreTake>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d112      	bne.n	8003d5a <func_tDevCommTask+0xaa>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <func_tDevCommTask+0xe4>)
 8003d40:	4413      	add	r3, r2
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fb04 	bl	8002354 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	2300      	movs	r3, #0
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	f009 fb0b 	bl	800d370 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <func_tDevCommTask+0xec>)
 8003d60:	fb83 3102 	smull	r3, r1, r3, r2
 8003d64:	17d3      	asrs	r3, r2, #31
 8003d66:	1ac9      	subs	r1, r1, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	440b      	add	r3, r1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	1ad1      	subs	r1, r2, r3
 8003d72:	460b      	mov	r3, r1
 8003d74:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f009 f8a2 	bl	800cec8 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003d84:	e79e      	b.n	8003cc4 <func_tDevCommTask+0x14>
 8003d86:	bf00      	nop
 8003d88:	20001588 	.word	0x20001588
 8003d8c:	2000238c 	.word	0x2000238c
 8003d90:	20000194 	.word	0x20000194
 8003d94:	20002394 	.word	0x20002394
 8003d98:	20000204 	.word	0x20000204
 8003d9c:	2aaaaaab 	.word	0x2aaaaaab

08003da0 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003da8:	f008 ffd2 	bl	800cd50 <osKernelSysTick>
 8003dac:	4603      	mov	r3, r0
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <func_tSensCommTask+0x50>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2164      	movs	r1, #100	; 0x64
 8003db6:	4618      	mov	r0, r3
 8003db8:	f009 fd50 	bl	800d85c <xQueueSemaphoreTake>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10f      	bne.n	8003de2 <func_tSensCommTask+0x42>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
      rSensors.pressure = MS5837_02BA_get_actual_pressure();
 8003dc2:	f7fd f979 	bl	80010b8 <MS5837_02BA_get_actual_pressure>
 8003dc6:	ee07 0a90 	vmov	s15, r0
 8003dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <func_tSensCommTask+0x54>)
 8003dd0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      xSemaphoreGive(mutDataHandle);
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <func_tSensCommTask+0x50>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f009 fac7 	bl	800d370 <xQueueGenericSend>
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // �?справленная задержка
 8003de2:	f107 030c 	add.w	r3, r7, #12
 8003de6:	2164      	movs	r1, #100	; 0x64
 8003de8:	4618      	mov	r0, r3
 8003dea:	f009 f86d 	bl	800cec8 <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003dee:	e7df      	b.n	8003db0 <func_tSensCommTask+0x10>
 8003df0:	20001588 	.word	0x20001588
 8003df4:	20001dd0 	.word	0x20001dd0

08003df8 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003e00:	f008 ffa6 	bl	800cd50 <osKernelSysTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	210a      	movs	r1, #10
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f009 f85a 	bl	800cec8 <osDelayUntil>
 8003e14:	e7f8      	b.n	8003e08 <func_tPcCommTask+0x10>
	...

08003e18 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003e20:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <func_tUartTimer+0x100>)
 8003e22:	7a1b      	ldrb	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d05a      	beq.n	8003ede <func_tUartTimer+0xc6>
		bool package = true;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <func_tUartTimer+0x104>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2105      	movs	r1, #5
 8003e32:	4618      	mov	r0, r3
 8003e34:	f009 fd12 	bl	800d85c <xQueueSemaphoreTake>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d140      	bne.n	8003ec0 <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <func_tUartTimer+0x100>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2baa      	cmp	r3, #170	; 0xaa
 8003e46:	d023      	beq.n	8003e90 <func_tUartTimer+0x78>
 8003e48:	2baa      	cmp	r3, #170	; 0xaa
 8003e4a:	dc30      	bgt.n	8003eae <func_tUartTimer+0x96>
 8003e4c:	2b55      	cmp	r3, #85	; 0x55
 8003e4e:	d010      	beq.n	8003e72 <func_tUartTimer+0x5a>
 8003e50:	2ba5      	cmp	r3, #165	; 0xa5
 8003e52:	d12c      	bne.n	8003eae <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <func_tUartTimer+0x100>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fae3 	bl	8002424 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <func_tUartTimer+0x100>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe feca 	bl	8002bfc <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <func_tUartTimer+0x100>)
 8003e6a:	2246      	movs	r2, #70	; 0x46
 8003e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e70:	e01f      	b.n	8003eb2 <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003e72:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <func_tUartTimer+0x100>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fc94 	bl	80027a4 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <func_tUartTimer+0x100>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fef9 	bl	8002c78 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <func_tUartTimer+0x100>)
 8003e88:	2263      	movs	r2, #99	; 0x63
 8003e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e8e:	e010      	b.n	8003eb2 <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003e90:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <func_tUartTimer+0x100>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe fdfb 	bl	8002a90 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003e9a:	4b1f      	ldr	r3, [pc, #124]	; (8003f18 <func_tUartTimer+0x100>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe ffe0 	bl	8002e64 <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <func_tUartTimer+0x100>)
 8003ea6:	2206      	movs	r2, #6
 8003ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003eac:	e001      	b.n	8003eb2 <func_tUartTimer+0x9a>
				default:
					package = false;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <func_tUartTimer+0x104>)
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f009 fa58 	bl	800d370 <xQueueGenericSend>
		}
		if(package) {
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <func_tUartTimer+0x100>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <func_tUartTimer+0x100>)
 8003ecc:	6851      	ldr	r1, [r2, #4]
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <func_tUartTimer+0x100>)
 8003ed0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003ed4:	b292      	uxth	r2, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f006 ffae 	bl	800ae38 <HAL_UART_Transmit_IT>
 8003edc:	e004      	b.n	8003ee8 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <func_tUartTimer+0x100>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <func_tUartTimer+0x100>)
 8003ee6:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <func_tUartTimer+0x108>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <func_tUartTimer+0x100>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <func_tUartTimer+0x100>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f007 f977 	bl	800b1ec <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <func_tUartTimer+0x100>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <func_tUartTimer+0x100>)
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	2201      	movs	r2, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f006 fff3 	bl	800aef4 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000194 	.word	0x20000194
 8003f1c:	20001588 	.word	0x20001588
 8003f20:	2000027c 	.word	0x2000027c

08003f24 <tTechCommTimer_callback>:

/* tTechCommTimer_callback function */
void tTechCommTimer_callback(void const * argument)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTimer_callback */

  /* USER CODE END tTechCommTimer_callback */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 8003f38:	b5b0      	push	{r4, r5, r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	input_value = alpha*sin(sin_counter * omega/1000.0);
 8003f40:	4b5a      	ldr	r3, [pc, #360]	; (80040ac <tSilence_func+0x174>)
 8003f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc fa94 	bl	8000474 <__aeabi_i2d>
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	4b57      	ldr	r3, [pc, #348]	; (80040b0 <tSilence_func+0x178>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	ee07 3a90 	vmov	s15, r3
 8003f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f5c:	4b55      	ldr	r3, [pc, #340]	; (80040b4 <tSilence_func+0x17c>)
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	ee17 0a90 	vmov	r0, s15
 8003f6a:	f7fc fa95 	bl	8000498 <__aeabi_f2d>
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	4b51      	ldr	r3, [pc, #324]	; (80040b8 <tSilence_func+0x180>)
 8003f74:	f7fc fc12 	bl	800079c <__aeabi_ddiv>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	ec43 2b17 	vmov	d7, r2, r3
 8003f80:	eeb0 0a47 	vmov.f32	s0, s14
 8003f84:	eef0 0a67 	vmov.f32	s1, s15
 8003f88:	f00c fa7a 	bl	8010480 <sin>
 8003f8c:	ec53 2b10 	vmov	r2, r3, d0
 8003f90:	4620      	mov	r0, r4
 8003f92:	4629      	mov	r1, r5
 8003f94:	f7fc fad8 	bl	8000548 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f7fc fd6c 	bl	8000a7c <__aeabi_d2iz>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	b21a      	sxth	r2, r3
 8003fa8:	4b44      	ldr	r3, [pc, #272]	; (80040bc <tSilence_func+0x184>)
 8003faa:	801a      	strh	r2, [r3, #0]
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8003fac:	f00a fa56 	bl	800e45c <xTaskGetTickCount>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fffe 	bl	8000fb4 <fromTickToMs>
 8003fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8003fbc:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <tSilence_func+0x188>)
 8003fbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80040c4 <tSilence_func+0x18c>
 8003fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd2:	dd56      	ble.n	8004082 <tSilence_func+0x14a>
 8003fd4:	4b3c      	ldr	r3, [pc, #240]	; (80040c8 <tSilence_func+0x190>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d152      	bne.n	8004082 <tSilence_func+0x14a>
		input_value = alpha*sin(sin_counter * omega/1000.0);
 8003fdc:	4b33      	ldr	r3, [pc, #204]	; (80040ac <tSilence_func+0x174>)
 8003fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fa46 	bl	8000474 <__aeabi_i2d>
 8003fe8:	4604      	mov	r4, r0
 8003fea:	460d      	mov	r5, r1
 8003fec:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <tSilence_func+0x178>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <tSilence_func+0x17c>)
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	ee17 0a90 	vmov	r0, s15
 8004006:	f7fc fa47 	bl	8000498 <__aeabi_f2d>
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <tSilence_func+0x180>)
 8004010:	f7fc fbc4 	bl	800079c <__aeabi_ddiv>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	ec43 2b17 	vmov	d7, r2, r3
 800401c:	eeb0 0a47 	vmov.f32	s0, s14
 8004020:	eef0 0a67 	vmov.f32	s1, s15
 8004024:	f00c fa2c 	bl	8010480 <sin>
 8004028:	ec53 2b10 	vmov	r2, r3, d0
 800402c:	4620      	mov	r0, r4
 800402e:	4629      	mov	r1, r5
 8004030:	f7fc fa8a 	bl	8000548 <__aeabi_dmul>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fd1e 	bl	8000a7c <__aeabi_d2iz>
 8004040:	4603      	mov	r3, r0
 8004042:	b21a      	sxth	r2, r3
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <tSilence_func+0x184>)
 8004046:	801a      	strh	r2, [r3, #0]
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8004048:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <tSilence_func+0x188>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4618      	mov	r0, r3
 800404e:	f007 f8cd 	bl	800b1ec <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <tSilence_func+0x188>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <tSilence_func+0x188>)
 8004058:	6811      	ldr	r1, [r2, #0]
 800405a:	2201      	movs	r2, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f006 ff49 	bl	800aef4 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <tSilence_func+0x194>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2105      	movs	r1, #5
 8004068:	4618      	mov	r0, r3
 800406a:	f009 fbf7 	bl	800d85c <xQueueSemaphoreTake>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <tSilence_func+0x14a>
//			resetThrusters();
//			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
//				rStabConstants[i].enable = false;
//			}

			xSemaphoreGive(mutDataHandle);
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <tSilence_func+0x194>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	f009 f977 	bl	800d370 <xQueueGenericSend>
//			break;
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
	sin_counter++;
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <tSilence_func+0x178>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <tSilence_func+0x178>)
 800408a:	6013      	str	r3, [r2, #0]
	xTimerStart(SilenceTimer, 50);
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <tSilence_func+0x198>)
 800408e:	681c      	ldr	r4, [r3, #0]
 8004090:	f00a f9e4 	bl	800e45c <xTaskGetTickCount>
 8004094:	4602      	mov	r2, r0
 8004096:	2332      	movs	r3, #50	; 0x32
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2300      	movs	r3, #0
 800409c:	2101      	movs	r1, #1
 800409e:	4620      	mov	r0, r4
 80040a0:	f00b f850 	bl	800f144 <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bdb0      	pop	{r4, r5, r7, pc}
 80040ac:	20000038 	.word	0x20000038
 80040b0:	200023d4 	.word	0x200023d4
 80040b4:	2000003c 	.word	0x2000003c
 80040b8:	408f4000 	.word	0x408f4000
 80040bc:	200023d0 	.word	0x200023d0
 80040c0:	20000194 	.word	0x20000194
 80040c4:	447a0000 	.word	0x447a0000
 80040c8:	2000027c 	.word	0x2000027c
 80040cc:	20001588 	.word	0x20001588
 80040d0:	2000028c 	.word	0x2000028c

080040d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
 80040e4:	609a      	str	r2, [r3, #8]
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040ea:	4b40      	ldr	r3, [pc, #256]	; (80041ec <MX_GPIO_Init+0x118>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	4a3f      	ldr	r2, [pc, #252]	; (80041ec <MX_GPIO_Init+0x118>)
 80040f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040f4:	6153      	str	r3, [r2, #20]
 80040f6:	4b3d      	ldr	r3, [pc, #244]	; (80041ec <MX_GPIO_Init+0x118>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <MX_GPIO_Init+0x118>)
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	4a39      	ldr	r2, [pc, #228]	; (80041ec <MX_GPIO_Init+0x118>)
 8004108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410c:	6153      	str	r3, [r2, #20]
 800410e:	4b37      	ldr	r3, [pc, #220]	; (80041ec <MX_GPIO_Init+0x118>)
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <MX_GPIO_Init+0x118>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4a33      	ldr	r2, [pc, #204]	; (80041ec <MX_GPIO_Init+0x118>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004124:	6153      	str	r3, [r2, #20]
 8004126:	4b31      	ldr	r3, [pc, #196]	; (80041ec <MX_GPIO_Init+0x118>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <MX_GPIO_Init+0x118>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <MX_GPIO_Init+0x118>)
 8004138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413c:	6153      	str	r3, [r2, #20]
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <MX_GPIO_Init+0x118>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <MX_GPIO_Init+0x118>)
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	4a27      	ldr	r2, [pc, #156]	; (80041ec <MX_GPIO_Init+0x118>)
 8004150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004154:	6153      	str	r3, [r2, #20]
 8004156:	4b25      	ldr	r3, [pc, #148]	; (80041ec <MX_GPIO_Init+0x118>)
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 8004162:	2200      	movs	r2, #0
 8004164:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004168:	4821      	ldr	r0, [pc, #132]	; (80041f0 <MX_GPIO_Init+0x11c>)
 800416a:	f002 fd19 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004174:	481f      	ldr	r0, [pc, #124]	; (80041f4 <MX_GPIO_Init+0x120>)
 8004176:	f002 fd13 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004184:	f002 fd0c 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 8004188:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800418c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418e:	2301      	movs	r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004196:	2300      	movs	r3, #0
 8004198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419a:	f107 0314 	add.w	r3, r7, #20
 800419e:	4619      	mov	r1, r3
 80041a0:	4813      	ldr	r0, [pc, #76]	; (80041f0 <MX_GPIO_Init+0x11c>)
 80041a2:	f002 fb83 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 80041a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ac:	2301      	movs	r3, #1
 80041ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b4:	2300      	movs	r3, #0
 80041b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4619      	mov	r1, r3
 80041be:	480d      	ldr	r0, [pc, #52]	; (80041f4 <MX_GPIO_Init+0x120>)
 80041c0:	f002 fb74 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 80041c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d2:	2300      	movs	r3, #0
 80041d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 80041d6:	f107 0314 	add.w	r3, r7, #20
 80041da:	4619      	mov	r1, r3
 80041dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e0:	f002 fb64 	bl	80068ac <HAL_GPIO_Init>

}
 80041e4:	bf00      	nop
 80041e6:	3728      	adds	r7, #40	; 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	48000400 	.word	0x48000400
 80041f4:	48000c00 	.word	0x48000c00

080041f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <MX_I2C1_Init+0x74>)
 80041fe:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <MX_I2C1_Init+0x78>)
 8004200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <MX_I2C1_Init+0x74>)
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <MX_I2C1_Init+0x7c>)
 8004206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <MX_I2C1_Init+0x74>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <MX_I2C1_Init+0x74>)
 8004210:	2201      	movs	r2, #1
 8004212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <MX_I2C1_Init+0x74>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <MX_I2C1_Init+0x74>)
 800421c:	2200      	movs	r2, #0
 800421e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <MX_I2C1_Init+0x74>)
 8004222:	2200      	movs	r2, #0
 8004224:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <MX_I2C1_Init+0x74>)
 8004228:	2200      	movs	r2, #0
 800422a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <MX_I2C1_Init+0x74>)
 800422e:	2200      	movs	r2, #0
 8004230:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004232:	480e      	ldr	r0, [pc, #56]	; (800426c <MX_I2C1_Init+0x74>)
 8004234:	f002 fce6 	bl	8006c04 <HAL_I2C_Init>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800423e:	f000 f909 	bl	8004454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004242:	2100      	movs	r1, #0
 8004244:	4809      	ldr	r0, [pc, #36]	; (800426c <MX_I2C1_Init+0x74>)
 8004246:	f004 fd81 	bl	8008d4c <HAL_I2CEx_ConfigAnalogFilter>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004250:	f000 f900 	bl	8004454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004254:	2100      	movs	r1, #0
 8004256:	4805      	ldr	r0, [pc, #20]	; (800426c <MX_I2C1_Init+0x74>)
 8004258:	f004 fdc3 	bl	8008de2 <HAL_I2CEx_ConfigDigitalFilter>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004262:	f000 f8f7 	bl	8004454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200023d8 	.word	0x200023d8
 8004270:	40005400 	.word	0x40005400
 8004274:	2000090e 	.word	0x2000090e

08004278 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_I2C_MspInit+0x8c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d12f      	bne.n	80042fa <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_I2C_MspInit+0x90>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_I2C_MspInit+0x90>)
 80042a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a4:	6153      	str	r3, [r2, #20]
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_I2C_MspInit+0x90>)
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042b2:	23c0      	movs	r3, #192	; 0xc0
 80042b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042b6:	2312      	movs	r3, #18
 80042b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042be:	2303      	movs	r3, #3
 80042c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042c2:	2304      	movs	r3, #4
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	4619      	mov	r1, r3
 80042cc:	480f      	ldr	r0, [pc, #60]	; (800430c <HAL_I2C_MspInit+0x94>)
 80042ce:	f002 faed 	bl	80068ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_I2C_MspInit+0x90>)
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <HAL_I2C_MspInit+0x90>)
 80042d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042dc:	61d3      	str	r3, [r2, #28]
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_I2C_MspInit+0x90>)
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2105      	movs	r1, #5
 80042ee:	201f      	movs	r0, #31
 80042f0:	f001 fea2 	bl	8006038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80042f4:	201f      	movs	r0, #31
 80042f6:	f001 febb 	bl	8006070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80042fa:	bf00      	nop
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40005400 	.word	0x40005400
 8004308:	40021000 	.word	0x40021000
 800430c:	48000400 	.word	0x48000400

08004310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004316:	f001 fd7d 	bl	8005e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800431a:	f000 f82b 	bl	8004374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800431e:	f7ff fed9 	bl	80040d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004322:	f7fe fe7f 	bl	8003024 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004326:	f001 fb0d 	bl	8005944 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800432a:	f7ff ff65 	bl	80041f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800432e:	f001 fb39 	bl	80059a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004332:	f001 fb6b 	bl	8005a0c <MX_USART3_UART_Init>
  MX_UART4_Init();
 8004336:	f001 fad5 	bl	80058e4 <MX_UART4_Init>
  MX_TIM7_Init();
 800433a:	f001 fa7d 	bl	8005838 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(30e3); //30 seconds delay to start PC
  MS5837_02BA_init(&hi2c1);
 800433e:	480c      	ldr	r0, [pc, #48]	; (8004370 <main+0x60>)
 8004340:	f7fc fe64 	bl	800100c <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 8004344:	f7fd f834 	bl	80013b0 <MS5837_02BA_reset_pressure>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004348:	f7ff fa26 	bl	8003798 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800434c:	f008 fcf9 	bl	800cd42 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 uint8_t buffer[30]={0};
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	611a      	str	r2, [r3, #16]
 8004364:	615a      	str	r2, [r3, #20]
 8004366:	831a      	strh	r2, [r3, #24]
 uint8_t buffer1[1]={0xAA};
 8004368:	23aa      	movs	r3, #170	; 0xaa
 800436a:	713b      	strb	r3, [r7, #4]

  while (1)
 800436c:	e7fe      	b.n	800436c <main+0x5c>
 800436e:	bf00      	nop
 8004370:	200023d8 	.word	0x200023d8

08004374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b09e      	sub	sp, #120	; 0x78
 8004378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800437a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800437e:	2228      	movs	r2, #40	; 0x28
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f00b ff42 	bl	801020c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004388:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004398:	463b      	mov	r3, r7
 800439a:	223c      	movs	r2, #60	; 0x3c
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f00b ff34 	bl	801020c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043a4:	2302      	movs	r3, #2
 80043a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043a8:	2301      	movs	r3, #1
 80043aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043ac:	2310      	movs	r3, #16
 80043ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043b0:	2302      	movs	r3, #2
 80043b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043b4:	2300      	movs	r3, #0
 80043b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80043b8:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80043bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043c2:	4618      	mov	r0, r3
 80043c4:	f004 fd5a 	bl	8008e7c <HAL_RCC_OscConfig>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80043ce:	f000 f841 	bl	8004454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043d2:	230f      	movs	r3, #15
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043d6:	2302      	movs	r3, #2
 80043d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043da:	2300      	movs	r3, #0
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80043de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043e4:	2300      	movs	r3, #0
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80043e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043ec:	2101      	movs	r1, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f005 fd82 	bl	8009ef8 <HAL_RCC_ClockConfig>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80043fa:	f000 f82b 	bl	8004454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80043fe:	232f      	movs	r3, #47	; 0x2f
 8004400:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004416:	463b      	mov	r3, r7
 8004418:	4618      	mov	r0, r3
 800441a:	f005 ffd7 	bl	800a3cc <HAL_RCCEx_PeriphCLKConfig>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004424:	f000 f816 	bl	8004454 <Error_Handler>
  }
}
 8004428:	bf00      	nop
 800442a:	3778      	adds	r7, #120	; 0x78
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004442:	f001 fcfd 	bl	8005e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00

08004454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004458:	b672      	cpsid	i
}
 800445a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800445c:	e7fe      	b.n	800445c <Error_Handler+0x8>
	...

08004460 <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8004466:	2300      	movs	r3, #0
 8004468:	71fb      	strb	r3, [r7, #7]
 800446a:	e16d      	b.n	8004748 <stabilizationInit+0x2e8>
		rStabConstants[i].enable = false;
 800446c:	79fa      	ldrb	r2, [r7, #7]
 800446e:	49c2      	ldr	r1, [pc, #776]	; (8004778 <stabilizationInit+0x318>)
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	4abe      	ldr	r2, [pc, #760]	; (800477c <stabilizationInit+0x31c>)
 8004482:	2158      	movs	r1, #88	; 0x58
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	330c      	adds	r3, #12
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	4ab9      	ldr	r2, [pc, #740]	; (800477c <stabilizationInit+0x31c>)
 8004496:	2158      	movs	r1, #88	; 0x58
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	3310      	adds	r3, #16
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	4ab4      	ldr	r2, [pc, #720]	; (800477c <stabilizationInit+0x31c>)
 80044aa:	2158      	movs	r1, #88	; 0x58
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	3314      	adds	r3, #20
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	4aaf      	ldr	r2, [pc, #700]	; (800477c <stabilizationInit+0x31c>)
 80044be:	2158      	movs	r1, #88	; 0x58
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	3318      	adds	r3, #24
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	4aaa      	ldr	r2, [pc, #680]	; (800477c <stabilizationInit+0x31c>)
 80044d2:	2158      	movs	r1, #88	; 0x58
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	331c      	adds	r3, #28
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	4aa5      	ldr	r2, [pc, #660]	; (800477c <stabilizationInit+0x31c>)
 80044e6:	2158      	movs	r1, #88	; 0x58
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	3320      	adds	r3, #32
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	4aa0      	ldr	r2, [pc, #640]	; (800477c <stabilizationInit+0x31c>)
 80044fa:	2158      	movs	r1, #88	; 0x58
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	3324      	adds	r3, #36	; 0x24
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	4a9b      	ldr	r2, [pc, #620]	; (800477c <stabilizationInit+0x31c>)
 800450e:	2158      	movs	r1, #88	; 0x58
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	3328      	adds	r3, #40	; 0x28
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4a96      	ldr	r2, [pc, #600]	; (800477c <stabilizationInit+0x31c>)
 8004522:	2158      	movs	r1, #88	; 0x58
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	332c      	adds	r3, #44	; 0x2c
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	4a91      	ldr	r2, [pc, #580]	; (800477c <stabilizationInit+0x31c>)
 8004536:	2158      	movs	r1, #88	; 0x58
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	4413      	add	r3, r2
 800453e:	3330      	adds	r3, #48	; 0x30
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	4a8c      	ldr	r2, [pc, #560]	; (800477c <stabilizationInit+0x31c>)
 800454a:	2158      	movs	r1, #88	; 0x58
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	3334      	adds	r3, #52	; 0x34
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	4a87      	ldr	r2, [pc, #540]	; (800477c <stabilizationInit+0x31c>)
 800455e:	2158      	movs	r1, #88	; 0x58
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	4413      	add	r3, r2
 8004566:	3338      	adds	r3, #56	; 0x38
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	4a82      	ldr	r2, [pc, #520]	; (800477c <stabilizationInit+0x31c>)
 8004572:	2158      	movs	r1, #88	; 0x58
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	333c      	adds	r3, #60	; 0x3c
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	4a7d      	ldr	r2, [pc, #500]	; (800477c <stabilizationInit+0x31c>)
 8004586:	2158      	movs	r1, #88	; 0x58
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3340      	adds	r3, #64	; 0x40
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	4a78      	ldr	r2, [pc, #480]	; (800477c <stabilizationInit+0x31c>)
 800459a:	2158      	movs	r1, #88	; 0x58
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3344      	adds	r3, #68	; 0x44
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	4a73      	ldr	r2, [pc, #460]	; (800477c <stabilizationInit+0x31c>)
 80045ae:	2158      	movs	r1, #88	; 0x58
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3348      	adds	r3, #72	; 0x48
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	4a6e      	ldr	r2, [pc, #440]	; (800477c <stabilizationInit+0x31c>)
 80045c2:	2158      	movs	r1, #88	; 0x58
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	334c      	adds	r3, #76	; 0x4c
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4a69      	ldr	r2, [pc, #420]	; (800477c <stabilizationInit+0x31c>)
 80045d6:	2158      	movs	r1, #88	; 0x58
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	3350      	adds	r3, #80	; 0x50
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	4a64      	ldr	r2, [pc, #400]	; (800477c <stabilizationInit+0x31c>)
 80045ea:	2158      	movs	r1, #88	; 0x58
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3354      	adds	r3, #84	; 0x54
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 80045fa:	4b61      	ldr	r3, [pc, #388]	; (8004780 <stabilizationInit+0x320>)
 80045fc:	789b      	ldrb	r3, [r3, #2]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 809f 	bne.w	8004742 <stabilizationInit+0x2e2>
			rStabConstants[i].pJoyUnitCast = 1;
 8004604:	79fa      	ldrb	r2, [r7, #7]
 8004606:	495c      	ldr	r1, [pc, #368]	; (8004778 <stabilizationInit+0x318>)
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	440b      	add	r3, r1
 8004612:	3304      	adds	r3, #4
 8004614:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004618:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 800461a:	79fa      	ldrb	r2, [r7, #7]
 800461c:	4956      	ldr	r1, [pc, #344]	; (8004778 <stabilizationInit+0x318>)
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	440b      	add	r3, r1
 8004628:	3308      	adds	r3, #8
 800462a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800462e:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 8004630:	79fa      	ldrb	r2, [r7, #7]
 8004632:	4951      	ldr	r1, [pc, #324]	; (8004778 <stabilizationInit+0x318>)
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	440b      	add	r3, r1
 800463e:	330c      	adds	r3, #12
 8004640:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004644:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 8004646:	79fa      	ldrb	r2, [r7, #7]
 8004648:	494b      	ldr	r1, [pc, #300]	; (8004778 <stabilizationInit+0x318>)
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	3318      	adds	r3, #24
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 800465c:	79fa      	ldrb	r2, [r7, #7]
 800465e:	4946      	ldr	r1, [pc, #280]	; (8004778 <stabilizationInit+0x318>)
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	440b      	add	r3, r1
 800466a:	331c      	adds	r3, #28
 800466c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004670:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 8004672:	79fa      	ldrb	r2, [r7, #7]
 8004674:	4940      	ldr	r1, [pc, #256]	; (8004778 <stabilizationInit+0x318>)
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	440b      	add	r3, r1
 8004680:	3310      	adds	r3, #16
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 8004688:	79fa      	ldrb	r2, [r7, #7]
 800468a:	493b      	ldr	r1, [pc, #236]	; (8004778 <stabilizationInit+0x318>)
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	3314      	adds	r3, #20
 8004698:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800469c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 800469e:	79fa      	ldrb	r2, [r7, #7]
 80046a0:	4935      	ldr	r1, [pc, #212]	; (8004778 <stabilizationInit+0x318>)
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	3328      	adds	r3, #40	; 0x28
 80046ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046b2:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 80046b4:	79fa      	ldrb	r2, [r7, #7]
 80046b6:	4930      	ldr	r1, [pc, #192]	; (8004778 <stabilizationInit+0x318>)
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	440b      	add	r3, r1
 80046c2:	332c      	adds	r3, #44	; 0x2c
 80046c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046c8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 80046ca:	79fa      	ldrb	r2, [r7, #7]
 80046cc:	492a      	ldr	r1, [pc, #168]	; (8004778 <stabilizationInit+0x318>)
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	440b      	add	r3, r1
 80046d8:	3330      	adds	r3, #48	; 0x30
 80046da:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <stabilizationInit+0x324>)
 80046dc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 80046de:	79fa      	ldrb	r2, [r7, #7]
 80046e0:	4925      	ldr	r1, [pc, #148]	; (8004778 <stabilizationInit+0x318>)
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	3334      	adds	r3, #52	; 0x34
 80046ee:	4a26      	ldr	r2, [pc, #152]	; (8004788 <stabilizationInit+0x328>)
 80046f0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 80046f2:	79fa      	ldrb	r2, [r7, #7]
 80046f4:	4920      	ldr	r1, [pc, #128]	; (8004778 <stabilizationInit+0x318>)
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	440b      	add	r3, r1
 8004700:	333c      	adds	r3, #60	; 0x3c
 8004702:	4a22      	ldr	r2, [pc, #136]	; (800478c <stabilizationInit+0x32c>)
 8004704:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8004706:	79fa      	ldrb	r2, [r7, #7]
 8004708:	491b      	ldr	r1, [pc, #108]	; (8004778 <stabilizationInit+0x318>)
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	440b      	add	r3, r1
 8004714:	3338      	adds	r3, #56	; 0x38
 8004716:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <stabilizationInit+0x330>)
 8004718:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 800471a:	79fa      	ldrb	r2, [r7, #7]
 800471c:	4916      	ldr	r1, [pc, #88]	; (8004778 <stabilizationInit+0x318>)
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	440b      	add	r3, r1
 8004728:	3340      	adds	r3, #64	; 0x40
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <stabilizationInit+0x334>)
 800472c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 800472e:	79fa      	ldrb	r2, [r7, #7]
 8004730:	4911      	ldr	r1, [pc, #68]	; (8004778 <stabilizationInit+0x318>)
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	440b      	add	r3, r1
 800473c:	3344      	adds	r3, #68	; 0x44
 800473e:	4a16      	ldr	r2, [pc, #88]	; (8004798 <stabilizationInit+0x338>)
 8004740:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	3301      	adds	r3, #1
 8004746:	71fb      	strb	r3, [r7, #7]
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	2b05      	cmp	r3, #5
 800474c:	f67f ae8e 	bls.w	800446c <stabilizationInit+0xc>
		}
	}

	/////////DEBUG!!!!////////////////////////////////////////////
	rStabConstants[STAB_YAW].enable = false;
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <stabilizationInit+0x318>)
 8004752:	2200      	movs	r2, #0
 8004754:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	rStabConstants[STAB_DEPTH].enable = false;
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <stabilizationInit+0x318>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
	rStabConstants[STAB_LAG].enable = false;
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <stabilizationInit+0x318>)
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	rStabConstants[STAB_MARCH].enable = false;
 8004766:	4b04      	ldr	r3, [pc, #16]	; (8004778 <stabilizationInit+0x318>)
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rStabConstants[STAB_PITCH].enable = false;
 800476e:	4b02      	ldr	r3, [pc, #8]	; (8004778 <stabilizationInit+0x318>)
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8004776:	e011      	b.n	800479c <stabilizationInit+0x33c>
 8004778:	20001eb0 	.word	0x20001eb0
 800477c:	20002060 	.word	0x20002060
 8004780:	20001d34 	.word	0x20001d34
 8004784:	c47a0000 	.word	0xc47a0000
 8004788:	447a0000 	.word	0x447a0000
 800478c:	459c4000 	.word	0x459c4000
 8004790:	c59c4000 	.word	0xc59c4000
 8004794:	46fa0000 	.word	0x46fa0000
 8004798:	c6fa0000 	.word	0xc6fa0000
	rStabConstants[STAB_ROLL].enable = false;
 800479c:	4b91      	ldr	r3, [pc, #580]	; (80049e4 <stabilizationInit+0x584>)
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	//////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rMonitorInput.roll;
 80047a4:	4b90      	ldr	r3, [pc, #576]	; (80049e8 <stabilizationInit+0x588>)
 80047a6:	4a91      	ldr	r2, [pc, #580]	; (80049ec <stabilizationInit+0x58c>)
 80047a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 80047ac:	4b8e      	ldr	r3, [pc, #568]	; (80049e8 <stabilizationInit+0x588>)
 80047ae:	4a90      	ldr	r2, [pc, #576]	; (80049f0 <stabilizationInit+0x590>)
 80047b0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 80047b4:	4b8c      	ldr	r3, [pc, #560]	; (80049e8 <stabilizationInit+0x588>)
 80047b6:	4a8f      	ldr	r2, [pc, #572]	; (80049f4 <stabilizationInit+0x594>)
 80047b8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 80047bc:	4b89      	ldr	r3, [pc, #548]	; (80049e4 <stabilizationInit+0x584>)
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rMonitorInput.pitch;
 80047c4:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <stabilizationInit+0x588>)
 80047c6:	4a8c      	ldr	r2, [pc, #560]	; (80049f8 <stabilizationInit+0x598>)
 80047c8:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 80047cc:	4b86      	ldr	r3, [pc, #536]	; (80049e8 <stabilizationInit+0x588>)
 80047ce:	4a8b      	ldr	r2, [pc, #556]	; (80049fc <stabilizationInit+0x59c>)
 80047d0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 80047d4:	4b84      	ldr	r3, [pc, #528]	; (80049e8 <stabilizationInit+0x588>)
 80047d6:	4a8a      	ldr	r2, [pc, #552]	; (8004a00 <stabilizationInit+0x5a0>)
 80047d8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 80047dc:	4b81      	ldr	r3, [pc, #516]	; (80049e4 <stabilizationInit+0x584>)
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rMonitorInput.yaw;
 80047e4:	4b80      	ldr	r3, [pc, #512]	; (80049e8 <stabilizationInit+0x588>)
 80047e6:	4a87      	ldr	r2, [pc, #540]	; (8004a04 <stabilizationInit+0x5a4>)
 80047e8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 80047ec:	4b7e      	ldr	r3, [pc, #504]	; (80049e8 <stabilizationInit+0x588>)
 80047ee:	4a86      	ldr	r2, [pc, #536]	; (8004a08 <stabilizationInit+0x5a8>)
 80047f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 80047f4:	4b7c      	ldr	r3, [pc, #496]	; (80049e8 <stabilizationInit+0x588>)
 80047f6:	4a85      	ldr	r2, [pc, #532]	; (8004a0c <stabilizationInit+0x5ac>)
 80047f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 80047fc:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <stabilizationInit+0x584>)
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rMonitorInput.depth;
 8004804:	4b78      	ldr	r3, [pc, #480]	; (80049e8 <stabilizationInit+0x588>)
 8004806:	4a82      	ldr	r2, [pc, #520]	; (8004a10 <stabilizationInit+0x5b0>)
 8004808:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 800480a:	4b77      	ldr	r3, [pc, #476]	; (80049e8 <stabilizationInit+0x588>)
 800480c:	4a81      	ldr	r2, [pc, #516]	; (8004a14 <stabilizationInit+0x5b4>)
 800480e:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8004810:	4b75      	ldr	r3, [pc, #468]	; (80049e8 <stabilizationInit+0x588>)
 8004812:	4a81      	ldr	r2, [pc, #516]	; (8004a18 <stabilizationInit+0x5b8>)
 8004814:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8004816:	4b73      	ldr	r3, [pc, #460]	; (80049e4 <stabilizationInit+0x584>)
 8004818:	2200      	movs	r2, #0
 800481a:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rMonitorInput.lag;
 800481c:	4b72      	ldr	r3, [pc, #456]	; (80049e8 <stabilizationInit+0x588>)
 800481e:	4a7f      	ldr	r2, [pc, #508]	; (8004a1c <stabilizationInit+0x5bc>)
 8004820:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8004824:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <stabilizationInit+0x588>)
 8004826:	4a7e      	ldr	r2, [pc, #504]	; (8004a20 <stabilizationInit+0x5c0>)
 8004828:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 800482c:	4b6e      	ldr	r3, [pc, #440]	; (80049e8 <stabilizationInit+0x588>)
 800482e:	4a7d      	ldr	r2, [pc, #500]	; (8004a24 <stabilizationInit+0x5c4>)
 8004830:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8004834:	4b6b      	ldr	r3, [pc, #428]	; (80049e4 <stabilizationInit+0x584>)
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rMonitorInput.march;
 800483c:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <stabilizationInit+0x588>)
 800483e:	4a7a      	ldr	r2, [pc, #488]	; (8004a28 <stabilizationInit+0x5c8>)
 8004840:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8004842:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <stabilizationInit+0x588>)
 8004844:	4a79      	ldr	r2, [pc, #484]	; (8004a2c <stabilizationInit+0x5cc>)
 8004846:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 8004848:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <stabilizationInit+0x588>)
 800484a:	4a79      	ldr	r2, [pc, #484]	; (8004a30 <stabilizationInit+0x5d0>)
 800484c:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <stabilizationInit+0x584>)
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49


    //upload coef

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <stabilizationInit+0x584>)
 8004858:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800485c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 8004860:	4b60      	ldr	r3, [pc, #384]	; (80049e4 <stabilizationInit+0x584>)
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	rStabConstants[STAB_YAW].pErrGain = 1;
 800486a:	4b5e      	ldr	r3, [pc, #376]	; (80049e4 <stabilizationInit+0x584>)
 800486c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004870:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 8004874:	4b5b      	ldr	r3, [pc, #364]	; (80049e4 <stabilizationInit+0x584>)
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 1;
 800487e:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <stabilizationInit+0x584>)
 8004880:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004884:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 8004888:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <stabilizationInit+0x584>)
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 8004892:	4b54      	ldr	r3, [pc, #336]	; (80049e4 <stabilizationInit+0x584>)
 8004894:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004898:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pid.pGain = 25;
 800489c:	4b51      	ldr	r3, [pc, #324]	; (80049e4 <stabilizationInit+0x584>)
 800489e:	4a65      	ldr	r2, [pc, #404]	; (8004a34 <stabilizationInit+0x5d4>)
 80048a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].pid.iGain = 0;
 80048a4:	4b4f      	ldr	r3, [pc, #316]	; (80049e4 <stabilizationInit+0x584>)
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rStabConstants[STAB_YAW].pid.iMax = 3000;
 80048ae:	4b4d      	ldr	r3, [pc, #308]	; (80049e4 <stabilizationInit+0x584>)
 80048b0:	4a61      	ldr	r2, [pc, #388]	; (8004a38 <stabilizationInit+0x5d8>)
 80048b2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	rStabConstants[STAB_YAW].pid.iMin = -3000;
 80048b6:	4b4b      	ldr	r3, [pc, #300]	; (80049e4 <stabilizationInit+0x584>)
 80048b8:	4a60      	ldr	r2, [pc, #384]	; (8004a3c <stabilizationInit+0x5dc>)
 80048ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pThrustersMax = 20000;
 80048be:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <stabilizationInit+0x584>)
 80048c0:	4a5f      	ldr	r2, [pc, #380]	; (8004a40 <stabilizationInit+0x5e0>)
 80048c2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pThrustersMin = -20000;
 80048c6:	4b47      	ldr	r3, [pc, #284]	; (80049e4 <stabilizationInit+0x584>)
 80048c8:	4a5e      	ldr	r2, [pc, #376]	; (8004a44 <stabilizationInit+0x5e4>)
 80048ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 80048ce:	4b45      	ldr	r3, [pc, #276]	; (80049e4 <stabilizationInit+0x584>)
 80048d0:	4a5d      	ldr	r2, [pc, #372]	; (8004a48 <stabilizationInit+0x5e8>)
 80048d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 80048d6:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <stabilizationInit+0x584>)
 80048d8:	4a5c      	ldr	r2, [pc, #368]	; (8004a4c <stabilizationInit+0x5ec>)
 80048da:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    rStabConstants[STAB_YAW].joyIntegration = false;
 80048de:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <stabilizationInit+0x584>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

	//rStabConstants[STAB_DEPTH].enable = true;

	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 80048e6:	4b3f      	ldr	r3, [pc, #252]	; (80049e4 <stabilizationInit+0x584>)
 80048e8:	4a59      	ldr	r2, [pc, #356]	; (8004a50 <stabilizationInit+0x5f0>)
 80048ea:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 80048ec:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <stabilizationInit+0x584>)
 80048ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048f2:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <stabilizationInit+0x584>)
 80048f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048fa:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 80;
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <stabilizationInit+0x584>)
 80048fe:	4a55      	ldr	r2, [pc, #340]	; (8004a54 <stabilizationInit+0x5f4>)
 8004900:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = -15;
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <stabilizationInit+0x584>)
 8004904:	4a54      	ldr	r2, [pc, #336]	; (8004a58 <stabilizationInit+0x5f8>)
 8004906:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <stabilizationInit+0x584>)
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = -1;
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <stabilizationInit+0x584>)
 8004912:	4a4f      	ldr	r2, [pc, #316]	; (8004a50 <stabilizationInit+0x5f0>)
 8004914:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 30;
 8004916:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <stabilizationInit+0x584>)
 8004918:	4a50      	ldr	r2, [pc, #320]	; (8004a5c <stabilizationInit+0x5fc>)
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 5;
 800491c:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <stabilizationInit+0x584>)
 800491e:	4a50      	ldr	r2, [pc, #320]	; (8004a60 <stabilizationInit+0x600>)
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 40;
 8004922:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <stabilizationInit+0x584>)
 8004924:	4a4f      	ldr	r2, [pc, #316]	; (8004a64 <stabilizationInit+0x604>)
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -40;
 8004928:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <stabilizationInit+0x584>)
 800492a:	4a4f      	ldr	r2, [pc, #316]	; (8004a68 <stabilizationInit+0x608>)
 800492c:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersMax = 32000;
 800492e:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <stabilizationInit+0x584>)
 8004930:	4a45      	ldr	r2, [pc, #276]	; (8004a48 <stabilizationInit+0x5e8>)
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -32000;
 8004934:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <stabilizationInit+0x584>)
 8004936:	4a45      	ldr	r2, [pc, #276]	; (8004a4c <stabilizationInit+0x5ec>)
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <stabilizationInit+0x584>)
 800493c:	4a42      	ldr	r2, [pc, #264]	; (8004a48 <stabilizationInit+0x5e8>)
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 8004940:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <stabilizationInit+0x584>)
 8004942:	4a42      	ldr	r2, [pc, #264]	; (8004a4c <stabilizationInit+0x5ec>)
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8004946:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <stabilizationInit+0x584>)
 8004948:	2200      	movs	r2, #0
 800494a:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_PITCH].pJoyUnitCast = -1;
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <stabilizationInit+0x584>)
 800494e:	4a40      	ldr	r2, [pc, #256]	; (8004a50 <stabilizationInit+0x5f0>)
 8004950:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_PITCH].pSpeedDyn = 0;
 8004954:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <stabilizationInit+0x584>)
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_PITCH].pErrGain = 1;
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <stabilizationInit+0x584>)
 8004960:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004964:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].T = 0;
 8004968:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <stabilizationInit+0x584>)
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].K = 1;
 8004972:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <stabilizationInit+0x584>)
 8004974:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004978:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].T = 0;
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <stabilizationInit+0x584>)
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].K = -100;
 8004986:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <stabilizationInit+0x584>)
 8004988:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <stabilizationInit+0x60c>)
 800498a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	rStabConstants[STAB_PITCH].pid.pGain = 25;
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <stabilizationInit+0x584>)
 8004990:	4a28      	ldr	r2, [pc, #160]	; (8004a34 <stabilizationInit+0x5d4>)
 8004992:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	rStabConstants[STAB_PITCH].pid.iGain = 60;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <stabilizationInit+0x584>)
 8004998:	4a35      	ldr	r2, [pc, #212]	; (8004a70 <stabilizationInit+0x610>)
 800499a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	rStabConstants[STAB_PITCH].pid.iMax = 50;
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <stabilizationInit+0x584>)
 80049a0:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <stabilizationInit+0x614>)
 80049a2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	rStabConstants[STAB_PITCH].pid.iMin = -50;
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <stabilizationInit+0x584>)
 80049a8:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <stabilizationInit+0x618>)
 80049aa:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	rStabConstants[STAB_PITCH].pThrustersMax = 32000;
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <stabilizationInit+0x584>)
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <stabilizationInit+0x5e8>)
 80049b2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	rStabConstants[STAB_PITCH].pThrustersMin = -32000;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <stabilizationInit+0x584>)
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <stabilizationInit+0x5ec>)
 80049ba:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	rStabConstants[STAB_PITCH].sOutSummatorMax = 32000;
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <stabilizationInit+0x584>)
 80049c0:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <stabilizationInit+0x5e8>)
 80049c2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	rStabConstants[STAB_PITCH].sOutSummatorMin = -32000;
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <stabilizationInit+0x584>)
 80049c8:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <stabilizationInit+0x5ec>)
 80049ca:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    rStabConstants[STAB_PITCH].joyIntegration = false;
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <stabilizationInit+0x584>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169


}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20001eb0 	.word	0x20001eb0
 80049e8:	20002060 	.word	0x20002060
 80049ec:	20001e64 	.word	0x20001e64
 80049f0:	20001dec 	.word	0x20001dec
 80049f4:	20001dd0 	.word	0x20001dd0
 80049f8:	20001e68 	.word	0x20001e68
 80049fc:	20001df0 	.word	0x20001df0
 8004a00:	20001dd4 	.word	0x20001dd4
 8004a04:	20001e6c 	.word	0x20001e6c
 8004a08:	20001df4 	.word	0x20001df4
 8004a0c:	20001dd8 	.word	0x20001dd8
 8004a10:	20001e60 	.word	0x20001e60
 8004a14:	20001e30 	.word	0x20001e30
 8004a18:	20001e28 	.word	0x20001e28
 8004a1c:	20001e5c 	.word	0x20001e5c
 8004a20:	20002120 	.word	0x20002120
 8004a24:	20001d3c 	.word	0x20001d3c
 8004a28:	20001e58 	.word	0x20001e58
 8004a2c:	200020c8 	.word	0x200020c8
 8004a30:	20001e40 	.word	0x20001e40
 8004a34:	41c80000 	.word	0x41c80000
 8004a38:	453b8000 	.word	0x453b8000
 8004a3c:	c53b8000 	.word	0xc53b8000
 8004a40:	469c4000 	.word	0x469c4000
 8004a44:	c69c4000 	.word	0xc69c4000
 8004a48:	46fa0000 	.word	0x46fa0000
 8004a4c:	c6fa0000 	.word	0xc6fa0000
 8004a50:	bf800000 	.word	0xbf800000
 8004a54:	42a00000 	.word	0x42a00000
 8004a58:	c1700000 	.word	0xc1700000
 8004a5c:	41f00000 	.word	0x41f00000
 8004a60:	40a00000 	.word	0x40a00000
 8004a64:	42200000 	.word	0x42200000
 8004a68:	c2200000 	.word	0xc2200000
 8004a6c:	c2c80000 	.word	0xc2c80000
 8004a70:	42700000 	.word	0x42700000
 8004a74:	42480000 	.word	0x42480000
 8004a78:	c2480000 	.word	0xc2480000

08004a7c <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 8004a86:	79fa      	ldrb	r2, [r7, #7]
 8004a88:	4970      	ldr	r1, [pc, #448]	; (8004c4c <stabilizationStart+0x1d0>)
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	440b      	add	r3, r1
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	4a6d      	ldr	r2, [pc, #436]	; (8004c50 <stabilizationStart+0x1d4>)
 8004a9c:	2158      	movs	r1, #88	; 0x58
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	4968      	ldr	r1, [pc, #416]	; (8004c50 <stabilizationStart+0x1d4>)
 8004aae:	2058      	movs	r0, #88	; 0x58
 8004ab0:	fb00 f303 	mul.w	r3, r0, r3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	4a64      	ldr	r2, [pc, #400]	; (8004c50 <stabilizationStart+0x1d4>)
 8004abe:	2158      	movs	r1, #88	; 0x58
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	4960      	ldr	r1, [pc, #384]	; (8004c50 <stabilizationStart+0x1d4>)
 8004ad0:	2058      	movs	r0, #88	; 0x58
 8004ad2:	fb00 f303 	mul.w	r3, r0, r3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3318      	adds	r3, #24
 8004ada:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <stabilizationStart+0x1d4>)
 8004ae0:	2158      	movs	r1, #88	; 0x58
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3310      	adds	r3, #16
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d103      	bne.n	8004afe <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 8004af6:	4b57      	ldr	r3, [pc, #348]	; (8004c54 <stabilizationStart+0x1d8>)
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	4a53      	ldr	r2, [pc, #332]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b02:	2158      	movs	r1, #88	; 0x58
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	331c      	adds	r3, #28
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	4a4e      	ldr	r2, [pc, #312]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b16:	2158      	movs	r1, #88	; 0x58
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3308      	adds	r3, #8
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	494a      	ldr	r1, [pc, #296]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b28:	2058      	movs	r0, #88	; 0x58
 8004b2a:	fb00 f303 	mul.w	r3, r0, r3
 8004b2e:	440b      	add	r3, r1
 8004b30:	3320      	adds	r3, #32
 8004b32:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	4a46      	ldr	r2, [pc, #280]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b38:	2158      	movs	r1, #88	; 0x58
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	3324      	adds	r3, #36	; 0x24
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	4a41      	ldr	r2, [pc, #260]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b4c:	2158      	movs	r1, #88	; 0x58
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	3328      	adds	r3, #40	; 0x28
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	4a3c      	ldr	r2, [pc, #240]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b60:	2158      	movs	r1, #88	; 0x58
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	332c      	adds	r3, #44	; 0x2c
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	4a37      	ldr	r2, [pc, #220]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b74:	2158      	movs	r1, #88	; 0x58
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3330      	adds	r3, #48	; 0x30
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	4a32      	ldr	r2, [pc, #200]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b88:	2158      	movs	r1, #88	; 0x58
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3334      	adds	r3, #52	; 0x34
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	4a2d      	ldr	r2, [pc, #180]	; (8004c50 <stabilizationStart+0x1d4>)
 8004b9c:	2158      	movs	r1, #88	; 0x58
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3338      	adds	r3, #56	; 0x38
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <stabilizationStart+0x1d4>)
 8004bb0:	2158      	movs	r1, #88	; 0x58
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	333c      	adds	r3, #60	; 0x3c
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <stabilizationStart+0x1d4>)
 8004bc4:	2158      	movs	r1, #88	; 0x58
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	3340      	adds	r3, #64	; 0x40
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <stabilizationStart+0x1d4>)
 8004bd8:	2158      	movs	r1, #88	; 0x58
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	3344      	adds	r3, #68	; 0x44
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <stabilizationStart+0x1d4>)
 8004bec:	2158      	movs	r1, #88	; 0x58
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3348      	adds	r3, #72	; 0x48
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	4a14      	ldr	r2, [pc, #80]	; (8004c50 <stabilizationStart+0x1d4>)
 8004c00:	2158      	movs	r1, #88	; 0x58
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	334c      	adds	r3, #76	; 0x4c
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <stabilizationStart+0x1d4>)
 8004c14:	2158      	movs	r1, #88	; 0x58
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3350      	adds	r3, #80	; 0x50
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8004c24:	f009 fc1a 	bl	800e45c <xTaskGetTickCount>
 8004c28:	ee07 0a90 	vmov	s15, r0
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <stabilizationStart+0x1d4>)
 8004c34:	2158      	movs	r1, #88	; 0x58
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3354      	adds	r3, #84	; 0x54
 8004c3e:	edc3 7a00 	vstr	s15, [r3]
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20001eb0 	.word	0x20001eb0
 8004c50:	20002060 	.word	0x20002060
 8004c54:	20001dd0 	.word	0x20001dd0

08004c58 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8004c58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c5c:	b086      	sub	sp, #24
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	4603      	mov	r3, r0
 8004c62:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8004c64:	79fa      	ldrb	r2, [r7, #7]
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4ac8      	ldr	r2, [pc, #800]	; (8004f90 <stabilizationUpdate+0x338>)
 8004c70:	4413      	add	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	2258      	movs	r2, #88	; 0x58
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
 8004c7c:	4ac5      	ldr	r2, [pc, #788]	; (8004f94 <stabilizationUpdate+0x33c>)
 8004c7e:	4413      	add	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004c82:	f009 fbeb 	bl	800e45c <xTaskGetTickCount>
 8004c86:	ee07 0a90 	vmov	s15, r0
 8004c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9c:	ee17 0a90 	vmov	r0, s15
 8004ca0:	f7fc f988 	bl	8000fb4 <fromTickToMs>
 8004ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8004ca8:	eddf 6abb 	vldr	s13, [pc, #748]	; 8004f98 <stabilizationUpdate+0x340>
 8004cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cb0:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004cb4:	f009 fbd2 	bl	800e45c <xTaskGetTickCount>
 8004cb8:	ee07 0a90 	vmov	s15, r0
 8004cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	3318      	adds	r3, #24
 8004cca:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	edd3 7a00 	vldr	s15, [r3]
 8004cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	d02b      	beq.n	8004d34 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	edd3 6a00 	vldr	s13, [r3]
 8004ce8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004cec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004cf0:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004fa8 <stabilizationUpdate+0x350>
 8004cf4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	ed93 6a00 	vldr	s12, [r3]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d12:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 8004f9c <stabilizationUpdate+0x344>
 8004d16:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004d32:	e01f      	b.n	8004d74 <stabilizationUpdate+0x11c>
	}
	else {
		if(contour==STAB_PITCH)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d110      	bne.n	8004d5c <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	ed93 7a00 	vldr	s14, [r3]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004fa0 <stabilizationUpdate+0x348>
 8004d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004d5a:	e00b      	b.n	8004d74 <stabilizationUpdate+0x11c>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K;//*10;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	ed93 7a00 	vldr	s14, [r3]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3310      	adds	r3, #16
 8004d80:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	edd3 7a00 	vldr	s15, [r3]
 8004d88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d061      	beq.n	8004e56 <stabilizationUpdate+0x1fe>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb fb7e 	bl	8000498 <__aeabi_f2d>
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	460d      	mov	r5, r1
 8004da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da4:	eeb1 7a67 	vneg.f32	s14, s15
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	edd3 7a00 	vldr	s15, [r3]
 8004dae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004db2:	ee16 0a90 	vmov	r0, s13
 8004db6:	f7fb fb6f 	bl	8000498 <__aeabi_f2d>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	ec43 2b10 	vmov	d0, r2, r3
 8004dc2:	f00b fb15 	bl	80103f0 <exp>
 8004dc6:	ec53 2b10 	vmov	r2, r3, d0
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fb fbbb 	bl	8000548 <__aeabi_dmul>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4690      	mov	r8, r2
 8004dd8:	4699      	mov	r9, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	ed93 7a06 	vldr	s14, [r3, #24]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	ee17 0a90 	vmov	r0, s15
 8004dee:	f7fb fb53 	bl	8000498 <__aeabi_f2d>
 8004df2:	4604      	mov	r4, r0
 8004df4:	460d      	mov	r5, r1
 8004df6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dfa:	eeb1 7a67 	vneg.f32	s14, s15
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	edd3 7a00 	vldr	s15, [r3]
 8004e04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e08:	ee16 0a90 	vmov	r0, s13
 8004e0c:	f7fb fb44 	bl	8000498 <__aeabi_f2d>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	ec43 2b10 	vmov	d0, r2, r3
 8004e18:	f00b faea 	bl	80103f0 <exp>
 8004e1c:	ec53 2b10 	vmov	r2, r3, d0
 8004e20:	f04f 0000 	mov.w	r0, #0
 8004e24:	495f      	ldr	r1, [pc, #380]	; (8004fa4 <stabilizationUpdate+0x34c>)
 8004e26:	f7fb f9d7 	bl	80001d8 <__aeabi_dsub>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fb89 	bl	8000548 <__aeabi_dmul>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	f7fb f9cd 	bl	80001dc <__adddf3>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fb fe3f 	bl	8000acc <__aeabi_d2f>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
 8004e54:	e00b      	b.n	8004e6e <stabilizationUpdate+0x216>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	ed93 7a00 	vldr	s14, [r3]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	edd3 6a00 	vldr	s13, [r3]
 8004e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004ea4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004ea8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	edd3 7a00 	vldr	s15, [r3]
 8004ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00f      	beq.n	8004efe <stabilizationUpdate+0x2a6>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	ed93 7a08 	vldr	s14, [r3, #32]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	edd3 6a07 	vldr	s13, [r3, #28]
 8004eea:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	edc3 7a08 	vstr	s15, [r3, #32]
 8004efc:	e003      	b.n	8004f06 <stabilizationUpdate+0x2ae>
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004f3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004f66:	eddf 6a10 	vldr	s13, [pc, #64]	; 8004fa8 <stabilizationUpdate+0x350>
 8004f6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f76:	dd19      	ble.n	8004fac <stabilizationUpdate+0x354>
    	state->pid_iValue = constants->pid.iMax*100;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004f7e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004fa8 <stabilizationUpdate+0x350>
 8004f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004f8c:	e027      	b.n	8004fde <stabilizationUpdate+0x386>
 8004f8e:	bf00      	nop
 8004f90:	20001eb0 	.word	0x20001eb0
 8004f94:	20002060 	.word	0x20002060
 8004f98:	447a0000 	.word	0x447a0000
 8004f9c:	428c0000 	.word	0x428c0000
 8004fa0:	437a0000 	.word	0x437a0000
 8004fa4:	3ff00000 	.word	0x3ff00000
 8004fa8:	42c80000 	.word	0x42c80000
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004fb8:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8004fa8 <stabilizationUpdate+0x350>
 8004fbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc8:	d509      	bpl.n	8004fde <stabilizationUpdate+0x386>
    	state->pid_iValue = constants->pid.iMin*100;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004fd0:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8004fa8 <stabilizationUpdate+0x350>
 8004fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	edd3 6a00 	vldr	s13, [r3]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800502c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	3320      	adds	r3, #32
 800503a:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	edd3 7a00 	vldr	s15, [r3]
 8005042:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504a:	d061      	beq.n	8005110 <stabilizationUpdate+0x4b8>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fa21 	bl	8000498 <__aeabi_f2d>
 8005056:	4604      	mov	r4, r0
 8005058:	460d      	mov	r5, r1
 800505a:	edd7 7a03 	vldr	s15, [r7, #12]
 800505e:	eeb1 7a67 	vneg.f32	s14, s15
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	edd3 7a00 	vldr	s15, [r3]
 8005068:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800506c:	ee16 0a90 	vmov	r0, s13
 8005070:	f7fb fa12 	bl	8000498 <__aeabi_f2d>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	ec43 2b10 	vmov	d0, r2, r3
 800507c:	f00b f9b8 	bl	80103f0 <exp>
 8005080:	ec53 2b10 	vmov	r2, r3, d0
 8005084:	4620      	mov	r0, r4
 8005086:	4629      	mov	r1, r5
 8005088:	f7fb fa5e 	bl	8000548 <__aeabi_dmul>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4690      	mov	r8, r2
 8005092:	4699      	mov	r9, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	edd3 7a01 	vldr	s15, [r3, #4]
 80050a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a4:	ee17 0a90 	vmov	r0, s15
 80050a8:	f7fb f9f6 	bl	8000498 <__aeabi_f2d>
 80050ac:	4604      	mov	r4, r0
 80050ae:	460d      	mov	r5, r1
 80050b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80050b4:	eeb1 7a67 	vneg.f32	s14, s15
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	edd3 7a00 	vldr	s15, [r3]
 80050be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050c2:	ee16 0a90 	vmov	r0, s13
 80050c6:	f7fb f9e7 	bl	8000498 <__aeabi_f2d>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	ec43 2b10 	vmov	d0, r2, r3
 80050d2:	f00b f98d 	bl	80103f0 <exp>
 80050d6:	ec53 2b10 	vmov	r2, r3, d0
 80050da:	f04f 0000 	mov.w	r0, #0
 80050de:	492a      	ldr	r1, [pc, #168]	; (8005188 <stabilizationUpdate+0x530>)
 80050e0:	f7fb f87a 	bl	80001d8 <__aeabi_dsub>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4620      	mov	r0, r4
 80050ea:	4629      	mov	r1, r5
 80050ec:	f7fb fa2c 	bl	8000548 <__aeabi_dmul>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4640      	mov	r0, r8
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb f870 	bl	80001dc <__adddf3>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	f7fb fce2 	bl	8000acc <__aeabi_d2f>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	64da      	str	r2, [r3, #76]	; 0x4c
 800510e:	e00a      	b.n	8005126 <stabilizationUpdate+0x4ce>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	edd3 7a01 	vldr	s15, [r3, #4]
 800511c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800513a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	dd04      	ble.n	800514e <stabilizationUpdate+0x4f6>
    	state->thrustersFiltered = constants->pThrustersMax;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	64da      	str	r2, [r3, #76]	; 0x4c
 800514c:	e00e      	b.n	800516c <stabilizationUpdate+0x514>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800515a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	d503      	bpl.n	800516c <stabilizationUpdate+0x514>
    	state->thrustersFiltered = constants->pThrustersMin;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005172:	eef1 7a67 	vneg.f32	s15, s15
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 800517c:	bf00      	nop
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005186:	bf00      	nop
 8005188:	3ff00000 	.word	0x3ff00000

0800518c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_MspInit+0x4c>)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <HAL_MspInit+0x4c>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6193      	str	r3, [r2, #24]
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <HAL_MspInit+0x4c>)
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_MspInit+0x4c>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <HAL_MspInit+0x4c>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b4:	61d3      	str	r3, [r2, #28]
 80051b6:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <HAL_MspInit+0x4c>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80051c2:	2200      	movs	r2, #0
 80051c4:	210f      	movs	r1, #15
 80051c6:	f06f 0001 	mvn.w	r0, #1
 80051ca:	f000 ff35 	bl	8006038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000

080051dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08c      	sub	sp, #48	; 0x30
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80051ec:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <HAL_InitTick+0xcc>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	4a2d      	ldr	r2, [pc, #180]	; (80052a8 <HAL_InitTick+0xcc>)
 80051f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051f6:	6193      	str	r3, [r2, #24]
 80051f8:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_InitTick+0xcc>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005204:	f107 020c 	add.w	r2, r7, #12
 8005208:	f107 0310 	add.w	r3, r7, #16
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f005 f8aa 	bl	800a368 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005214:	f005 f886 	bl	800a324 <HAL_RCC_GetPCLK2Freq>
 8005218:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	4a23      	ldr	r2, [pc, #140]	; (80052ac <HAL_InitTick+0xd0>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0c9b      	lsrs	r3, r3, #18
 8005224:	3b01      	subs	r3, #1
 8005226:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_InitTick+0xd4>)
 800522a:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <HAL_InitTick+0xd8>)
 800522c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800522e:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <HAL_InitTick+0xd4>)
 8005230:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005234:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_InitTick+0xd4>)
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800523c:	4b1c      	ldr	r3, [pc, #112]	; (80052b0 <HAL_InitTick+0xd4>)
 800523e:	2200      	movs	r2, #0
 8005240:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <HAL_InitTick+0xd4>)
 8005244:	2200      	movs	r2, #0
 8005246:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_InitTick+0xd4>)
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800524e:	4818      	ldr	r0, [pc, #96]	; (80052b0 <HAL_InitTick+0xd4>)
 8005250:	f005 fa6c 	bl	800a72c <HAL_TIM_Base_Init>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800525a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11b      	bne.n	800529a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005262:	4813      	ldr	r0, [pc, #76]	; (80052b0 <HAL_InitTick+0xd4>)
 8005264:	f005 faba 	bl	800a7dc <HAL_TIM_Base_Start_IT>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800526e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005272:	2b00      	cmp	r3, #0
 8005274:	d111      	bne.n	800529a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005276:	2019      	movs	r0, #25
 8005278:	f000 fefa 	bl	8006070 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b0f      	cmp	r3, #15
 8005280:	d808      	bhi.n	8005294 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005282:	2200      	movs	r2, #0
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	2019      	movs	r0, #25
 8005288:	f000 fed6 	bl	8006038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_InitTick+0xdc>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e002      	b.n	800529a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800529a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3730      	adds	r7, #48	; 0x30
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	431bde83 	.word	0x431bde83
 80052b0:	2000242c 	.word	0x2000242c
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	200000bc 	.word	0x200000bc

080052bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052c0:	e7fe      	b.n	80052c0 <NMI_Handler+0x4>

080052c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052c6:	e7fe      	b.n	80052c6 <HardFault_Handler+0x4>

080052c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052cc:	e7fe      	b.n	80052cc <MemManage_Handler+0x4>

080052ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052d2:	e7fe      	b.n	80052d2 <BusFault_Handler+0x4>

080052d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052d8:	e7fe      	b.n	80052d8 <UsageFault_Handler+0x4>

080052da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80052ec:	4802      	ldr	r0, [pc, #8]	; (80052f8 <DMA1_Channel4_IRQHandler+0x10>)
 80052ee:	f000 ffea 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80052f2:	bf00      	nop
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	200026e8 	.word	0x200026e8

080052fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005300:	4802      	ldr	r0, [pc, #8]	; (800530c <DMA1_Channel5_IRQHandler+0x10>)
 8005302:	f000 ffe0 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005306:	bf00      	nop
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	2000272c 	.word	0x2000272c

08005310 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005314:	4802      	ldr	r0, [pc, #8]	; (8005320 <DMA1_Channel6_IRQHandler+0x10>)
 8005316:	f000 ffd6 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20002770 	.word	0x20002770

08005324 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005328:	4802      	ldr	r0, [pc, #8]	; (8005334 <DMA1_Channel7_IRQHandler+0x10>)
 800532a:	f000 ffcc 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200027b4 	.word	0x200027b4

08005338 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800533c:	4802      	ldr	r0, [pc, #8]	; (8005348 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800533e:	f005 fab7 	bl	800a8b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005342:	bf00      	nop
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	2000242c 	.word	0x2000242c

0800534c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005350:	4802      	ldr	r0, [pc, #8]	; (800535c <I2C1_EV_IRQHandler+0x10>)
 8005352:	f001 ffb1 	bl	80072b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	200023d8 	.word	0x200023d8

08005360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <USART1_IRQHandler+0x10>)
 8005366:	f006 f809 	bl	800b37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20002550 	.word	0x20002550

08005374 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005378:	4802      	ldr	r0, [pc, #8]	; (8005384 <USART2_IRQHandler+0x10>)
 800537a:	f005 ffff 	bl	800b37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	200025d8 	.word	0x200025d8

08005388 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <USART3_IRQHandler+0x10>)
 800538e:	f005 fff5 	bl	800b37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20002660 	.word	0x20002660

0800539c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80053a0:	4802      	ldr	r0, [pc, #8]	; (80053ac <UART4_IRQHandler+0x10>)
 80053a2:	f005 ffeb 	bl	800b37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	200024c8 	.word	0x200024c8

080053b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <SystemInit+0x20>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	4a05      	ldr	r2, [pc, #20]	; (80053d0 <SystemInit+0x20>)
 80053bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <thrustersInit>:
    {0.0, 0.0, 1.0, 0.0, -1.0},
    {-1.0, -1.0, 0.0, 1.0, 0.0}
};

void thrustersInit()
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
  rThrusters[FDR].address = 1; //Forward Left
 80053da:	4b2c      	ldr	r3, [pc, #176]	; (800548c <thrustersInit+0xb8>)
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 80053e0:	4b2a      	ldr	r3, [pc, #168]	; (800548c <thrustersInit+0xb8>)
 80053e2:	2202      	movs	r2, #2
 80053e4:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 80053e6:	4b29      	ldr	r3, [pc, #164]	; (800548c <thrustersInit+0xb8>)
 80053e8:	2203      	movs	r2, #3
 80053ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 80053ee:	4b27      	ldr	r3, [pc, #156]	; (800548c <thrustersInit+0xb8>)
 80053f0:	2204      	movs	r2, #4
 80053f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 80053f6:	4b25      	ldr	r3, [pc, #148]	; (800548c <thrustersInit+0xb8>)
 80053f8:	2205      	movs	r2, #5
 80053fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 80053fe:	4b23      	ldr	r3, [pc, #140]	; (800548c <thrustersInit+0xb8>)
 8005400:	2206      	movs	r2, #6
 8005402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
//  rThrusters[BUR].address = 7; //Back Up Right
//  rThrusters[BUL].address = 8; //Back Up Left

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005406:	2300      	movs	r3, #0
 8005408:	71fb      	strb	r3, [r7, #7]
 800540a:	e034      	b.n	8005476 <thrustersInit+0xa2>
    rThrusters[i].desiredSpeed = 0;
 800540c:	79fa      	ldrb	r2, [r7, #7]
 800540e:	491f      	ldr	r1, [pc, #124]	; (800548c <thrustersInit+0xb8>)
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	440b      	add	r3, r1
 800541a:	3302      	adds	r3, #2
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 8005420:	79fa      	ldrb	r2, [r7, #7]
 8005422:	491a      	ldr	r1, [pc, #104]	; (800548c <thrustersInit+0xb8>)
 8005424:	4613      	mov	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	330c      	adds	r3, #12
 8005430:	4a17      	ldr	r2, [pc, #92]	; (8005490 <thrustersInit+0xbc>)
 8005432:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 8005434:	79fa      	ldrb	r2, [r7, #7]
 8005436:	4915      	ldr	r1, [pc, #84]	; (800548c <thrustersInit+0xb8>)
 8005438:	4613      	mov	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	440b      	add	r3, r1
 8005442:	3310      	adds	r3, #16
 8005444:	4a12      	ldr	r2, [pc, #72]	; (8005490 <thrustersInit+0xbc>)
 8005446:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 8005448:	79fa      	ldrb	r2, [r7, #7]
 800544a:	4910      	ldr	r1, [pc, #64]	; (800548c <thrustersInit+0xb8>)
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	440b      	add	r3, r1
 8005456:	3314      	adds	r3, #20
 8005458:	227f      	movs	r2, #127	; 0x7f
 800545a:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 800545c:	79fa      	ldrb	r2, [r7, #7]
 800545e:	490b      	ldr	r1, [pc, #44]	; (800548c <thrustersInit+0xb8>)
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	440b      	add	r3, r1
 800546a:	3315      	adds	r3, #21
 800546c:	227f      	movs	r2, #127	; 0x7f
 800546e:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	3301      	adds	r3, #1
 8005474:	71fb      	strb	r3, [r7, #7]
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	2b05      	cmp	r3, #5
 800547a:	d9c7      	bls.n	800540c <thrustersInit+0x38>
  }

}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20001d40 	.word	0x20001d40
 8005490:	3f333333 	.word	0x3f333333

08005494 <fillThrustersRequest>:
  }

}

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 80054a0:	23aa      	movs	r3, #170	; 0xaa
 80054a2:	733b      	strb	r3, [r7, #12]
    res.type = 0x01;
 80054a4:	2301      	movs	r3, #1
 80054a6:	737b      	strb	r3, [r7, #13]
    res.address = 0xAF;
 80054a8:	23af      	movs	r3, #175	; 0xaf
 80054aa:	73bb      	strb	r3, [r7, #14]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 80054ac:	2300      	movs	r3, #0
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	e04c      	b.n	800554c <fillThrustersRequest+0xb8>
    	int16_t velocity = rThrusters[i].desiredSpeed;
 80054b2:	4931      	ldr	r1, [pc, #196]	; (8005578 <fillThrustersRequest+0xe4>)
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	440b      	add	r3, r1
 80054c0:	3302      	adds	r3, #2
 80054c2:	f993 3000 	ldrsb.w	r3, [r3]
 80054c6:	837b      	strh	r3, [r7, #26]
    	if(rThrusters[i].inverse) {
//    		velocity *= -1;
    	}

    	// Multiplier constants
    	if(velocity > 0) {
 80054c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dd17      	ble.n	8005500 <fillThrustersRequest+0x6c>
    		velocity = (int16_t) ( (float) (velocity) * rThrusters[i].kForward);
 80054d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054dc:	4926      	ldr	r1, [pc, #152]	; (8005578 <fillThrustersRequest+0xe4>)
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	440b      	add	r3, r1
 80054ea:	330c      	adds	r3, #12
 80054ec:	edd3 7a00 	vldr	s15, [r3]
 80054f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f8:	ee17 3a90 	vmov	r3, s15
 80054fc:	837b      	strh	r3, [r7, #26]
 80054fe:	e01a      	b.n	8005536 <fillThrustersRequest+0xa2>
    	}
    	else if(velocity < 0) {
 8005500:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005504:	2b00      	cmp	r3, #0
 8005506:	da16      	bge.n	8005536 <fillThrustersRequest+0xa2>
    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
 8005508:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005514:	4918      	ldr	r1, [pc, #96]	; (8005578 <fillThrustersRequest+0xe4>)
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	4613      	mov	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4413      	add	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	440b      	add	r3, r1
 8005522:	3310      	adds	r3, #16
 8005524:	edd3 7a00 	vldr	s15, [r3]
 8005528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005530:	ee17 3a90 	vmov	r3, s15
 8005534:	837b      	strh	r3, [r7, #26]
    	}

    	res.velocity[i] = velocity;
 8005536:	8b7b      	ldrh	r3, [r7, #26]
 8005538:	b259      	sxtb	r1, r3
 800553a:	f107 020f 	add.w	r2, r7, #15
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	460a      	mov	r2, r1
 8005544:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3301      	adds	r3, #1
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b05      	cmp	r3, #5
 8005550:	ddaf      	ble.n	80054b2 <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <fillThrustersRequest+0xe8>)
 8005554:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8005558:	75fb      	strb	r3, [r7, #23]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 800555a:	f107 030c 	add.w	r3, r7, #12
 800555e:	220b      	movs	r2, #11
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f00a fedc 	bl	8010320 <memcpy>
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 8005568:	210b      	movs	r1, #11
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc fa78 	bl	8001a60 <AddChecksumm8bVma>
}
 8005570:	bf00      	nop
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20001d40 	.word	0x20001d40
 800557c:	20001e70 	.word	0x20001e70

08005580 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 800558c:	2109      	movs	r1, #9
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc fa39 	bl	8001a06 <IsChecksumm8bCorrectVma>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01f      	beq.n	80055da <fillThrustersResponse+0x5a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01b      	beq.n	80055da <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	f107 030c 	add.w	r3, r7, #12
 80055a8:	6810      	ldr	r0, [r2, #0]
 80055aa:	6851      	ldr	r1, [r2, #4]
 80055ac:	c303      	stmia	r3!, {r0, r1}
 80055ae:	7a12      	ldrb	r2, [r2, #8]
 80055b0:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	8a38      	ldrh	r0, [r7, #16]
 80055b6:	490e      	ldr	r1, [pc, #56]	; (80055f0 <fillThrustersResponse+0x70>)
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	3304      	adds	r3, #4
 80055c4:	4602      	mov	r2, r0
 80055c6:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <fillThrustersResponse+0x74>)
 80055ca:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80055ce:	3301      	adds	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <fillThrustersResponse+0x74>)
 80055d4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 80055d8:	e005      	b.n	80055e6 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <fillThrustersResponse+0x74>)
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	3301      	adds	r3, #1
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <fillThrustersResponse+0x74>)
 80055e2:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20001d40 	.word	0x20001d40
 80055f4:	20000194 	.word	0x20000194

080055f8 <formThrustVectors>:

void formThrustVectors()
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b08f      	sub	sp, #60	; 0x3c
 80055fc:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005604:	e00d      	b.n	8005622 <formThrustVectors+0x2a>
    velocity[i] = 0;
 8005606:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	3338      	adds	r3, #56	; 0x38
 800560e:	443b      	add	r3, r7
 8005610:	3b1c      	subs	r3, #28
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800561c:	3301      	adds	r3, #1
 800561e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005626:	2b05      	cmp	r3, #5
 8005628:	d9ed      	bls.n	8005606 <formThrustVectors+0xe>
//  Uz = rStabState[STAB_DEPTH].outputSignal;
//  Upsi = rStabState[STAB_YAW].outputSignal;
//  Ugamma = rStabState[STAB_ROLL].outputSignal;
//  Uteta = rJoySpeed.pitch;

  U[STAB_MARCH] = rJoySpeed.march;
 800562a:	4b6b      	ldr	r3, [pc, #428]	; (80057d8 <formThrustVectors+0x1e0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60bb      	str	r3, [r7, #8]
  U[STAB_LAG] = rJoySpeed.lag;
 8005630:	4b69      	ldr	r3, [pc, #420]	; (80057d8 <formThrustVectors+0x1e0>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	60fb      	str	r3, [r7, #12]
//  U[STAB_DEPTH] = rJoySpeed.depth;
  U[STAB_DEPTH] = input_value;
 8005636:	4b69      	ldr	r3, [pc, #420]	; (80057dc <formThrustVectors+0x1e4>)
 8005638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005644:	edc7 7a01 	vstr	s15, [r7, #4]
  U[STAB_YAW] = rJoySpeed.yaw;
 8005648:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <formThrustVectors+0x1e0>)
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	613b      	str	r3, [r7, #16]
  U[STAB_ROLL] = rJoySpeed.roll;
 800564e:	4b62      	ldr	r3, [pc, #392]	; (80057d8 <formThrustVectors+0x1e0>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	617b      	str	r3, [r7, #20]
  U[STAB_PITCH] = rJoySpeed.pitch;
 8005654:	4b60      	ldr	r3, [pc, #384]	; (80057d8 <formThrustVectors+0x1e0>)
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	61bb      	str	r3, [r7, #24]

  for(uint8_t i = 0; i < 6; i++)
 800565a:	2300      	movs	r3, #0
 800565c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005660:	e01f      	b.n	80056a2 <formThrustVectors+0xaa>
  {
	if(rStabConstants[i].enable)
 8005662:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005666:	495e      	ldr	r1, [pc, #376]	; (80057e0 <formThrustVectors+0x1e8>)
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	440b      	add	r3, r1
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00f      	beq.n	8005698 <formThrustVectors+0xa0>
		U[i] = rStabState[i].outputSignal;
 8005678:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800567c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005680:	4958      	ldr	r1, [pc, #352]	; (80057e4 <formThrustVectors+0x1ec>)
 8005682:	2058      	movs	r0, #88	; 0x58
 8005684:	fb00 f202 	mul.w	r2, r0, r2
 8005688:	440a      	add	r2, r1
 800568a:	3250      	adds	r2, #80	; 0x50
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	3338      	adds	r3, #56	; 0x38
 8005692:	443b      	add	r3, r7
 8005694:	3b34      	subs	r3, #52	; 0x34
 8005696:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < 6; i++)
 8005698:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800569c:	3301      	adds	r3, #1
 800569e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80056a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d9db      	bls.n	8005662 <formThrustVectors+0x6a>
  }

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 80056aa:	2300      	movs	r3, #0
 80056ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80056b0:	e087      	b.n	80057c2 <formThrustVectors+0x1ca>
  {
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 80056b2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80056b6:	494c      	ldr	r1, [pc, #304]	; (80057e8 <formThrustVectors+0x1f0>)
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	ed93 7a00 	vldr	s14, [r3]
 80056c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80056ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056ce:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80056d2:	4945      	ldr	r1, [pc, #276]	; (80057e8 <formThrustVectors+0x1f0>)
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3304      	adds	r3, #4
 80056e0:	edd3 6a00 	vldr	s13, [r3]
 80056e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80056e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80056f4:	493c      	ldr	r1, [pc, #240]	; (80057e8 <formThrustVectors+0x1f0>)
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	3308      	adds	r3, #8
 8005702:	edd3 6a00 	vldr	s13, [r3]
 8005706:	edd7 7a01 	vldr	s15, [r7, #4]
 800570a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800570e:	ee37 7a27 	vadd.f32	s14, s14, s15
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 8005712:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005716:	4934      	ldr	r1, [pc, #208]	; (80057e8 <formThrustVectors+0x1f0>)
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	330c      	adds	r3, #12
 8005724:	edd3 6a00 	vldr	s13, [r3]
 8005728:	edd7 7a04 	vldr	s15, [r7, #16]
 800572c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005734:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005738:	492b      	ldr	r1, [pc, #172]	; (80057e8 <formThrustVectors+0x1f0>)
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	3310      	adds	r3, #16
 8005746:	edd3 6a00 	vldr	s13, [r3]
 800574a:	edd7 7a05 	vldr	s15, [r7, #20]
 800574e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 8005752:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 8005756:	ee77 7a27 	vadd.f32	s15, s14, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	3338      	adds	r3, #56	; 0x38
 800575e:	443b      	add	r3, r7
 8005760:	3b1c      	subs	r3, #28
 8005762:	edc3 7a00 	vstr	s15, [r3]
//    if(velocity[i]<=12 && velocity[i]>=-12) //Thrusters dead zone asymmetric, +3 ... -11~-12
//    	velocity[i] = 0;
    if(!thruster_init)
 8005766:	4b21      	ldr	r3, [pc, #132]	; (80057ec <formThrustVectors+0x1f4>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d119      	bne.n	80057a2 <formThrustVectors+0x1aa>
    {
    	rThrusters[i].desiredSpeed = resizeFloatToInt8(velocity[i]);
 800576e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	3338      	adds	r3, #56	; 0x38
 8005776:	443b      	add	r3, r7
 8005778:	3b1c      	subs	r3, #28
 800577a:	edd3 7a00 	vldr	s15, [r3]
 800577e:	f897 4035 	ldrb.w	r4, [r7, #53]	; 0x35
 8005782:	eeb0 0a67 	vmov.f32	s0, s15
 8005786:	f000 f835 	bl	80057f4 <resizeFloatToInt8>
 800578a:	4603      	mov	r3, r0
 800578c:	4619      	mov	r1, r3
 800578e:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <formThrustVectors+0x1f8>)
 8005790:	4623      	mov	r3, r4
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4423      	add	r3, r4
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	3302      	adds	r3, #2
 800579c:	460a      	mov	r2, r1
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e00a      	b.n	80057b8 <formThrustVectors+0x1c0>
    }
    else
    	rThrusters[i].desiredSpeed = 0;
 80057a2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80057a6:	4912      	ldr	r1, [pc, #72]	; (80057f0 <formThrustVectors+0x1f8>)
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	440b      	add	r3, r1
 80057b2:	3302      	adds	r3, #2
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 80057b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80057bc:	3301      	adds	r3, #1
 80057be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80057c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	f67f af73 	bls.w	80056b2 <formThrustVectors+0xba>
  	}

}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	373c      	adds	r7, #60	; 0x3c
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20001e40 	.word	0x20001e40
 80057dc:	200023d0 	.word	0x200023d0
 80057e0:	20001eb0 	.word	0x20001eb0
 80057e4:	20002060 	.word	0x20002060
 80057e8:	20000044 	.word	0x20000044
 80057ec:	20002478 	.word	0x20002478
 80057f0:	20001d40 	.word	0x20001d40

080057f4 <resizeFloatToInt8>:

int8_t resizeFloatToInt8(float input)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 80057fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005806:	ee17 3a90 	vmov	r3, s15
 800580a:	60fb      	str	r3, [r7, #12]
//  cast = cast / 0xFF;
  if (cast > 127) {
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b7f      	cmp	r3, #127	; 0x7f
 8005810:	dd02      	ble.n	8005818 <resizeFloatToInt8+0x24>
    cast = 127;
 8005812:	237f      	movs	r3, #127	; 0x7f
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e006      	b.n	8005826 <resizeFloatToInt8+0x32>
  }
  else if(cast < -127) {
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800581e:	da02      	bge.n	8005826 <resizeFloatToInt8+0x32>
    cast = -127;
 8005820:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8005824:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	b25b      	sxtb	r3, r3
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800583e:	1d3b      	adds	r3, r7, #4
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005848:	4b14      	ldr	r3, [pc, #80]	; (800589c <MX_TIM7_Init+0x64>)
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <MX_TIM7_Init+0x68>)
 800584c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <MX_TIM7_Init+0x64>)
 8005850:	2200      	movs	r2, #0
 8005852:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <MX_TIM7_Init+0x64>)
 8005856:	2200      	movs	r2, #0
 8005858:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <MX_TIM7_Init+0x64>)
 800585c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005860:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005862:	4b0e      	ldr	r3, [pc, #56]	; (800589c <MX_TIM7_Init+0x64>)
 8005864:	2200      	movs	r2, #0
 8005866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005868:	480c      	ldr	r0, [pc, #48]	; (800589c <MX_TIM7_Init+0x64>)
 800586a:	f004 ff5f 	bl	800a72c <HAL_TIM_Base_Init>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005874:	f7fe fdee 	bl	8004454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005878:	2300      	movs	r3, #0
 800587a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4805      	ldr	r0, [pc, #20]	; (800589c <MX_TIM7_Init+0x64>)
 8005886:	f005 f9eb 	bl	800ac60 <HAL_TIMEx_MasterConfigSynchronization>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005890:	f7fe fde0 	bl	8004454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	2000247c 	.word	0x2000247c
 80058a0:	40001400 	.word	0x40001400

080058a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <HAL_TIM_Base_MspInit+0x38>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10b      	bne.n	80058ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <HAL_TIM_Base_MspInit+0x3c>)
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <HAL_TIM_Base_MspInit+0x3c>)
 80058bc:	f043 0320 	orr.w	r3, r3, #32
 80058c0:	61d3      	str	r3, [r2, #28]
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <HAL_TIM_Base_MspInit+0x3c>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40001400 	.word	0x40001400
 80058e0:	40021000 	.word	0x40021000

080058e4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <MX_UART4_Init+0x58>)
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <MX_UART4_Init+0x5c>)
 80058ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <MX_UART4_Init+0x58>)
 80058f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80058f6:	4b11      	ldr	r3, [pc, #68]	; (800593c <MX_UART4_Init+0x58>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <MX_UART4_Init+0x58>)
 80058fe:	2200      	movs	r2, #0
 8005900:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005902:	4b0e      	ldr	r3, [pc, #56]	; (800593c <MX_UART4_Init+0x58>)
 8005904:	2200      	movs	r2, #0
 8005906:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <MX_UART4_Init+0x58>)
 800590a:	220c      	movs	r2, #12
 800590c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <MX_UART4_Init+0x58>)
 8005910:	2200      	movs	r2, #0
 8005912:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <MX_UART4_Init+0x58>)
 8005916:	2200      	movs	r2, #0
 8005918:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <MX_UART4_Init+0x58>)
 800591c:	2200      	movs	r2, #0
 800591e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <MX_UART4_Init+0x58>)
 8005922:	2200      	movs	r2, #0
 8005924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005926:	4805      	ldr	r0, [pc, #20]	; (800593c <MX_UART4_Init+0x58>)
 8005928:	f005 fa38 	bl	800ad9c <HAL_UART_Init>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005932:	f7fe fd8f 	bl	8004454 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200024c8 	.word	0x200024c8
 8005940:	40004c00 	.word	0x40004c00

08005944 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005948:	4b14      	ldr	r3, [pc, #80]	; (800599c <MX_USART1_UART_Init+0x58>)
 800594a:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <MX_USART1_UART_Init+0x5c>)
 800594c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800594e:	4b13      	ldr	r3, [pc, #76]	; (800599c <MX_USART1_UART_Init+0x58>)
 8005950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005956:	4b11      	ldr	r3, [pc, #68]	; (800599c <MX_USART1_UART_Init+0x58>)
 8005958:	2200      	movs	r2, #0
 800595a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <MX_USART1_UART_Init+0x58>)
 800595e:	2200      	movs	r2, #0
 8005960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005962:	4b0e      	ldr	r3, [pc, #56]	; (800599c <MX_USART1_UART_Init+0x58>)
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <MX_USART1_UART_Init+0x58>)
 800596a:	220c      	movs	r2, #12
 800596c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800596e:	4b0b      	ldr	r3, [pc, #44]	; (800599c <MX_USART1_UART_Init+0x58>)
 8005970:	2200      	movs	r2, #0
 8005972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <MX_USART1_UART_Init+0x58>)
 8005976:	2200      	movs	r2, #0
 8005978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <MX_USART1_UART_Init+0x58>)
 800597c:	2200      	movs	r2, #0
 800597e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <MX_USART1_UART_Init+0x58>)
 8005982:	2200      	movs	r2, #0
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005986:	4805      	ldr	r0, [pc, #20]	; (800599c <MX_USART1_UART_Init+0x58>)
 8005988:	f005 fa08 	bl	800ad9c <HAL_UART_Init>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005992:	f7fe fd5f 	bl	8004454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20002550 	.word	0x20002550
 80059a0:	40013800 	.word	0x40013800

080059a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80059a8:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <MX_USART2_UART_Init+0x64>)
 80059ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059bc:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059be:	2200      	movs	r2, #0
 80059c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059c8:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059ca:	220c      	movs	r2, #12
 80059cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059da:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059dc:	2200      	movs	r2, #0
 80059de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80059e0:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059e2:	2220      	movs	r2, #32
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059ec:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059ee:	4805      	ldr	r0, [pc, #20]	; (8005a04 <MX_USART2_UART_Init+0x60>)
 80059f0:	f005 f9d4 	bl	800ad9c <HAL_UART_Init>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80059fa:	f7fe fd2b 	bl	8004454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200025d8 	.word	0x200025d8
 8005a08:	40004400 	.word	0x40004400

08005a0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a10:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <MX_USART3_UART_Init+0x5c>)
 8005a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a16:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a24:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a2a:	4b0e      	ldr	r3, [pc, #56]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a32:	220c      	movs	r2, #12
 8005a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a3c:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a4e:	4805      	ldr	r0, [pc, #20]	; (8005a64 <MX_USART3_UART_Init+0x58>)
 8005a50:	f005 f9a4 	bl	800ad9c <HAL_UART_Init>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005a5a:	f7fe fcfb 	bl	8004454 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a5e:	bf00      	nop
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20002660 	.word	0x20002660
 8005a68:	40004800 	.word	0x40004800

08005a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b090      	sub	sp, #64	; 0x40
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4aa0      	ldr	r2, [pc, #640]	; (8005d0c <HAL_UART_MspInit+0x2a0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d131      	bne.n	8005af2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005a8e:	4ba0      	ldr	r3, [pc, #640]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4a9f      	ldr	r2, [pc, #636]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a98:	61d3      	str	r3, [r2, #28]
 8005a9a:	4b9d      	ldr	r3, [pc, #628]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aa6:	4b9a      	ldr	r3, [pc, #616]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	4a99      	ldr	r2, [pc, #612]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab0:	6153      	str	r3, [r2, #20]
 8005ab2:	4b97      	ldr	r3, [pc, #604]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005abe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005acc:	2303      	movs	r3, #3
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005ad0:	2305      	movs	r3, #5
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ad8:	4619      	mov	r1, r3
 8005ada:	488e      	ldr	r0, [pc, #568]	; (8005d14 <HAL_UART_MspInit+0x2a8>)
 8005adc:	f000 fee6 	bl	80068ac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2105      	movs	r1, #5
 8005ae4:	2034      	movs	r0, #52	; 0x34
 8005ae6:	f000 faa7 	bl	8006038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005aea:	2034      	movs	r0, #52	; 0x34
 8005aec:	f000 fac0 	bl	8006070 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005af0:	e15c      	b.n	8005dac <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a88      	ldr	r2, [pc, #544]	; (8005d18 <HAL_UART_MspInit+0x2ac>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	f040 8081 	bne.w	8005c00 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005afe:	4b84      	ldr	r3, [pc, #528]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	4a83      	ldr	r2, [pc, #524]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b08:	6193      	str	r3, [r2, #24]
 8005b0a:	4b81      	ldr	r3, [pc, #516]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b16:	4b7e      	ldr	r3, [pc, #504]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	4a7d      	ldr	r2, [pc, #500]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b20:	6153      	str	r3, [r2, #20]
 8005b22:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b34:	2302      	movs	r3, #2
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b40:	2307      	movs	r3, #7
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b4e:	f000 fead 	bl	80068ac <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005b52:	4b72      	ldr	r3, [pc, #456]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b54:	4a72      	ldr	r2, [pc, #456]	; (8005d20 <HAL_UART_MspInit+0x2b4>)
 8005b56:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b58:	4b70      	ldr	r3, [pc, #448]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b5e:	4b6f      	ldr	r3, [pc, #444]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b64:	4b6d      	ldr	r3, [pc, #436]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b66:	2280      	movs	r2, #128	; 0x80
 8005b68:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b6a:	4b6c      	ldr	r3, [pc, #432]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b70:	4b6a      	ldr	r3, [pc, #424]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005b76:	4b69      	ldr	r3, [pc, #420]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005b7c:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b7e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005b82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005b84:	4865      	ldr	r0, [pc, #404]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b86:	f000 fa81 	bl	800608c <HAL_DMA_Init>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005b90:	f7fe fc60 	bl	8004454 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a61      	ldr	r2, [pc, #388]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b98:	671a      	str	r2, [r3, #112]	; 0x70
 8005b9a:	4a60      	ldr	r2, [pc, #384]	; (8005d1c <HAL_UART_MspInit+0x2b0>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005ba0:	4b60      	ldr	r3, [pc, #384]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005ba2:	4a61      	ldr	r2, [pc, #388]	; (8005d28 <HAL_UART_MspInit+0x2bc>)
 8005ba4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ba6:	4b5f      	ldr	r3, [pc, #380]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bac:	4b5d      	ldr	r3, [pc, #372]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bb2:	4b5c      	ldr	r3, [pc, #368]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bb8:	4b5a      	ldr	r3, [pc, #360]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bbe:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005bc4:	4b57      	ldr	r3, [pc, #348]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005bca:	4b56      	ldr	r3, [pc, #344]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bcc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005bd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005bd2:	4854      	ldr	r0, [pc, #336]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bd4:	f000 fa5a 	bl	800608c <HAL_DMA_Init>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8005bde:	f7fe fc39 	bl	8004454 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a4f      	ldr	r2, [pc, #316]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005be6:	675a      	str	r2, [r3, #116]	; 0x74
 8005be8:	4a4e      	ldr	r2, [pc, #312]	; (8005d24 <HAL_UART_MspInit+0x2b8>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2105      	movs	r1, #5
 8005bf2:	2025      	movs	r0, #37	; 0x25
 8005bf4:	f000 fa20 	bl	8006038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005bf8:	2025      	movs	r0, #37	; 0x25
 8005bfa:	f000 fa39 	bl	8006070 <HAL_NVIC_EnableIRQ>
}
 8005bfe:	e0d5      	b.n	8005dac <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a49      	ldr	r2, [pc, #292]	; (8005d2c <HAL_UART_MspInit+0x2c0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	f040 809a 	bne.w	8005d40 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c0c:	4b40      	ldr	r3, [pc, #256]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	4a3f      	ldr	r2, [pc, #252]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c16:	61d3      	str	r3, [r2, #28]
 8005c18:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c24:	4b3a      	ldr	r3, [pc, #232]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	4a39      	ldr	r2, [pc, #228]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2e:	6153      	str	r3, [r2, #20]
 8005c30:	4b37      	ldr	r3, [pc, #220]	; (8005d10 <HAL_UART_MspInit+0x2a4>)
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c40:	2302      	movs	r3, #2
 8005c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c4c:	2307      	movs	r3, #7
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c54:	4619      	mov	r1, r3
 8005c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c5a:	f000 fe27 	bl	80068ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005c5e:	4b34      	ldr	r3, [pc, #208]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c60:	4a34      	ldr	r2, [pc, #208]	; (8005d34 <HAL_UART_MspInit+0x2c8>)
 8005c62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c64:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c6a:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c70:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c72:	2280      	movs	r2, #128	; 0x80
 8005c74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c76:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c7c:	4b2c      	ldr	r3, [pc, #176]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005c82:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005c88:	4b29      	ldr	r3, [pc, #164]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c8a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005c8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005c90:	4827      	ldr	r0, [pc, #156]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005c92:	f000 f9fb 	bl	800608c <HAL_DMA_Init>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8005c9c:	f7fe fbda 	bl	8004454 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005ca4:	675a      	str	r2, [r3, #116]	; 0x74
 8005ca6:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <HAL_UART_MspInit+0x2c4>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005cac:	4b22      	ldr	r3, [pc, #136]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cae:	4a23      	ldr	r2, [pc, #140]	; (8005d3c <HAL_UART_MspInit+0x2d0>)
 8005cb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cb2:	4b21      	ldr	r3, [pc, #132]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cb8:	4b1f      	ldr	r3, [pc, #124]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cc4:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cca:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005cd6:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005cde:	4816      	ldr	r0, [pc, #88]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005ce0:	f000 f9d4 	bl	800608c <HAL_DMA_Init>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_UART_MspInit+0x282>
      Error_Handler();
 8005cea:	f7fe fbb3 	bl	8004454 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cf2:	671a      	str	r2, [r3, #112]	; 0x70
 8005cf4:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <HAL_UART_MspInit+0x2cc>)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2105      	movs	r1, #5
 8005cfe:	2026      	movs	r0, #38	; 0x26
 8005d00:	f000 f99a 	bl	8006038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d04:	2026      	movs	r0, #38	; 0x26
 8005d06:	f000 f9b3 	bl	8006070 <HAL_NVIC_EnableIRQ>
}
 8005d0a:	e04f      	b.n	8005dac <HAL_UART_MspInit+0x340>
 8005d0c:	40004c00 	.word	0x40004c00
 8005d10:	40021000 	.word	0x40021000
 8005d14:	48000800 	.word	0x48000800
 8005d18:	40013800 	.word	0x40013800
 8005d1c:	200026e8 	.word	0x200026e8
 8005d20:	40020044 	.word	0x40020044
 8005d24:	2000272c 	.word	0x2000272c
 8005d28:	40020058 	.word	0x40020058
 8005d2c:	40004400 	.word	0x40004400
 8005d30:	20002770 	.word	0x20002770
 8005d34:	4002006c 	.word	0x4002006c
 8005d38:	200027b4 	.word	0x200027b4
 8005d3c:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_UART_MspInit+0x348>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d130      	bne.n	8005dac <HAL_UART_MspInit+0x340>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <HAL_UART_MspInit+0x34c>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_UART_MspInit+0x34c>)
 8005d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d54:	61d3      	str	r3, [r2, #28]
 8005d56:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <HAL_UART_MspInit+0x34c>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <HAL_UART_MspInit+0x34c>)
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_UART_MspInit+0x34c>)
 8005d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d6c:	6153      	str	r3, [r2, #20]
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_UART_MspInit+0x34c>)
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005d7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d80:	2302      	movs	r3, #2
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d8c:	2307      	movs	r3, #7
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d94:	4619      	mov	r1, r3
 8005d96:	4809      	ldr	r0, [pc, #36]	; (8005dbc <HAL_UART_MspInit+0x350>)
 8005d98:	f000 fd88 	bl	80068ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2105      	movs	r1, #5
 8005da0:	2027      	movs	r0, #39	; 0x27
 8005da2:	f000 f949 	bl	8006038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005da6:	2027      	movs	r0, #39	; 0x27
 8005da8:	f000 f962 	bl	8006070 <HAL_NVIC_EnableIRQ>
}
 8005dac:	bf00      	nop
 8005dae:	3740      	adds	r7, #64	; 0x40
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40004800 	.word	0x40004800
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	48000400 	.word	0x48000400

08005dc0 <Reset_Handler>:
 8005dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005df8 <LoopForever+0x2>
 8005dc4:	f7ff faf4 	bl	80053b0 <SystemInit>
 8005dc8:	480c      	ldr	r0, [pc, #48]	; (8005dfc <LoopForever+0x6>)
 8005dca:	490d      	ldr	r1, [pc, #52]	; (8005e00 <LoopForever+0xa>)
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <LoopForever+0xe>)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e002      	b.n	8005dd8 <LoopCopyDataInit>

08005dd2 <CopyDataInit>:
 8005dd2:	58d4      	ldr	r4, [r2, r3]
 8005dd4:	50c4      	str	r4, [r0, r3]
 8005dd6:	3304      	adds	r3, #4

08005dd8 <LoopCopyDataInit>:
 8005dd8:	18c4      	adds	r4, r0, r3
 8005dda:	428c      	cmp	r4, r1
 8005ddc:	d3f9      	bcc.n	8005dd2 <CopyDataInit>
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <LoopForever+0x12>)
 8005de0:	4c0a      	ldr	r4, [pc, #40]	; (8005e0c <LoopForever+0x16>)
 8005de2:	2300      	movs	r3, #0
 8005de4:	e001      	b.n	8005dea <LoopFillZerobss>

08005de6 <FillZerobss>:
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	3204      	adds	r2, #4

08005dea <LoopFillZerobss>:
 8005dea:	42a2      	cmp	r2, r4
 8005dec:	d3fb      	bcc.n	8005de6 <FillZerobss>
 8005dee:	f00a fa71 	bl	80102d4 <__libc_init_array>
 8005df2:	f7fe fa8d 	bl	8004310 <main>

08005df6 <LoopForever>:
 8005df6:	e7fe      	b.n	8005df6 <LoopForever>
 8005df8:	2000a000 	.word	0x2000a000
 8005dfc:	20000000 	.word	0x20000000
 8005e00:	20000118 	.word	0x20000118
 8005e04:	08011c50 	.word	0x08011c50
 8005e08:	20000118 	.word	0x20000118
 8005e0c:	20002fe8 	.word	0x20002fe8

08005e10 <ADC1_2_IRQHandler>:
 8005e10:	e7fe      	b.n	8005e10 <ADC1_2_IRQHandler>
	...

08005e14 <HAL_Init>:
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <HAL_Init+0x28>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a07      	ldr	r2, [pc, #28]	; (8005e3c <HAL_Init+0x28>)
 8005e1e:	f043 0310 	orr.w	r3, r3, #16
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	2003      	movs	r0, #3
 8005e26:	f000 f8fc 	bl	8006022 <HAL_NVIC_SetPriorityGrouping>
 8005e2a:	200f      	movs	r0, #15
 8005e2c:	f7ff f9d6 	bl	80051dc <HAL_InitTick>
 8005e30:	f7ff f9ac 	bl	800518c <HAL_MspInit>
 8005e34:	2300      	movs	r3, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40022000 	.word	0x40022000

08005e40 <HAL_IncTick>:
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_IncTick+0x20>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <HAL_IncTick+0x24>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4413      	add	r3, r2
 8005e50:	4a04      	ldr	r2, [pc, #16]	; (8005e64 <HAL_IncTick+0x24>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	200000c0 	.word	0x200000c0
 8005e64:	200027f8 	.word	0x200027f8

08005e68 <HAL_GetTick>:
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	4b03      	ldr	r3, [pc, #12]	; (8005e7c <HAL_GetTick+0x14>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	200027f8 	.word	0x200027f8

08005e80 <HAL_Delay>:
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	f7ff ffee 	bl	8005e68 <HAL_GetTick>
 8005e8c:	60b8      	str	r0, [r7, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d005      	beq.n	8005ea6 <HAL_Delay+0x26>
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <HAL_Delay+0x44>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	bf00      	nop
 8005ea8:	f7ff ffde 	bl	8005e68 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d8f7      	bhi.n	8005ea8 <HAL_Delay+0x28>
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200000c0 	.word	0x200000c0

08005ec8 <__NVIC_SetPriorityGrouping>:
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <__NVIC_SetPriorityGrouping+0x44>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <__NVIC_SetPriorityGrouping+0x44>)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	60d3      	str	r3, [r2, #12]
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	e000ed00 	.word	0xe000ed00

08005f10 <__NVIC_GetPriorityGrouping>:
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <__NVIC_GetPriorityGrouping+0x18>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	4618      	mov	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <__NVIC_EnableIRQ>:
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
 8005f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	db0b      	blt.n	8005f56 <__NVIC_EnableIRQ+0x2a>
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	f003 021f 	and.w	r2, r3, #31
 8005f44:	4907      	ldr	r1, [pc, #28]	; (8005f64 <__NVIC_EnableIRQ+0x38>)
 8005f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	e000e100 	.word	0xe000e100

08005f68 <__NVIC_SetPriority>:
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	71fb      	strb	r3, [r7, #7]
 8005f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db0a      	blt.n	8005f92 <__NVIC_SetPriority+0x2a>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	490c      	ldr	r1, [pc, #48]	; (8005fb4 <__NVIC_SetPriority+0x4c>)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005f90:	e00a      	b.n	8005fa8 <__NVIC_SetPriority+0x40>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	4908      	ldr	r1, [pc, #32]	; (8005fb8 <__NVIC_SetPriority+0x50>)
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	0112      	lsls	r2, r2, #4
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	761a      	strb	r2, [r3, #24]
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	e000e100 	.word	0xe000e100
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <NVIC_EncodePriority>:
 8005fbc:	b480      	push	{r7}
 8005fbe:	b089      	sub	sp, #36	; 0x24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f1c3 0307 	rsb	r3, r3, #7
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	bf28      	it	cs
 8005fda:	2304      	movcs	r3, #4
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	2b06      	cmp	r3, #6
 8005fe4:	d902      	bls.n	8005fec <NVIC_EncodePriority+0x30>
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3b03      	subs	r3, #3
 8005fea:	e000      	b.n	8005fee <NVIC_EncodePriority+0x32>
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	401a      	ands	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	409a      	lsls	r2, r3
 8006004:	f04f 31ff 	mov.w	r1, #4294967295
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	43d9      	mvns	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	400b      	ands	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	4618      	mov	r0, r3
 8006018:	3724      	adds	r7, #36	; 0x24
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_NVIC_SetPriorityGrouping>:
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ff4c 	bl	8005ec8 <__NVIC_SetPriorityGrouping>
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_NVIC_SetPriority>:
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	73fb      	strb	r3, [r7, #15]
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	f7ff ff61 	bl	8005f10 <__NVIC_GetPriorityGrouping>
 800604e:	6178      	str	r0, [r7, #20]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	6978      	ldr	r0, [r7, #20]
 8006056:	f7ff ffb1 	bl	8005fbc <NVIC_EncodePriority>
 800605a:	4602      	mov	r2, r0
 800605c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006060:	4611      	mov	r1, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff ff80 	bl	8005f68 <__NVIC_SetPriority>
 8006068:	bf00      	nop
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_NVIC_EnableIRQ>:
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
 800607a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff ff54 	bl	8005f2c <__NVIC_EnableIRQ>
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_DMA_Init>:
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_DMA_Init+0x16>
 800609e:	2301      	movs	r3, #1
 80060a0:	e037      	b.n	8006112 <HAL_DMA_Init+0x86>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f9c5 	bl	8006484 <DMA_CalcBaseAndBitshift>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2020 	strb.w	r2, [r3, #32]
 8006110:	2300      	movs	r3, #0
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_DMA_Start_IT>:
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	2300      	movs	r3, #0
 800612a:	75fb      	strb	r3, [r7, #23]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_DMA_Start_IT+0x20>
 8006136:	2302      	movs	r3, #2
 8006138:	e04a      	b.n	80061d0 <HAL_DMA_Start_IT+0xb6>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2020 	strb.w	r2, [r3, #32]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006148:	2b01      	cmp	r3, #1
 800614a:	d13a      	bne.n	80061c2 <HAL_DMA_Start_IT+0xa8>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f958 	bl	8006426 <DMA_SetConfig>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_DMA_Start_IT+0x76>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 020e 	orr.w	r2, r2, #14
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e00f      	b.n	80061b0 <HAL_DMA_Start_IT+0x96>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 020a 	orr.w	r2, r2, #10
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e005      	b.n	80061ce <HAL_DMA_Start_IT+0xb4>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2020 	strb.w	r2, [r3, #32]
 80061ca:	2302      	movs	r3, #2
 80061cc:	75fb      	strb	r3, [r7, #23]
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_DMA_Abort>:
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d008      	beq.n	80061fc <HAL_DMA_Abort+0x24>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2204      	movs	r2, #4
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2020 	strb.w	r2, [r3, #32]
 80061f8:	2301      	movs	r3, #1
 80061fa:	e020      	b.n	800623e <HAL_DMA_Abort+0x66>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 020e 	bic.w	r2, r2, #14
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	2101      	movs	r1, #1
 8006226:	fa01 f202 	lsl.w	r2, r1, r2
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2020 	strb.w	r2, [r3, #32]
 800623c:	2300      	movs	r3, #0
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_DMA_Abort_IT>:
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800625c:	2b02      	cmp	r3, #2
 800625e:	d005      	beq.n	800626c <HAL_DMA_Abort_IT+0x22>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2204      	movs	r2, #4
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
 800626a:	e027      	b.n	80062bc <HAL_DMA_Abort_IT+0x72>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 020e 	bic.w	r2, r2, #14
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0201 	bic.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006294:	2101      	movs	r1, #1
 8006296:	fa01 f202 	lsl.w	r2, r1, r2
 800629a:	605a      	str	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2020 	strb.w	r2, [r3, #32]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_DMA_Abort_IT+0x72>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_DMA_IRQHandler>:
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	2204      	movs	r2, #4
 80062e4:	409a      	lsls	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d024      	beq.n	8006338 <HAL_DMA_IRQHandler+0x72>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01f      	beq.n	8006338 <HAL_DMA_IRQHandler+0x72>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d107      	bne.n	8006316 <HAL_DMA_IRQHandler+0x50>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0204 	bic.w	r2, r2, #4
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	2104      	movs	r1, #4
 8006320:	fa01 f202 	lsl.w	r2, r1, r2
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d06a      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
 8006336:	e065      	b.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	2202      	movs	r2, #2
 800633e:	409a      	lsls	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4013      	ands	r3, r2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d02c      	beq.n	80063a2 <HAL_DMA_IRQHandler+0xdc>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d027      	beq.n	80063a2 <HAL_DMA_IRQHandler+0xdc>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_DMA_IRQHandler+0xb2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 020a 	bic.w	r2, r2, #10
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006380:	2102      	movs	r1, #2
 8006382:	fa01 f202 	lsl.w	r2, r1, r2
 8006386:	605a      	str	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2020 	strb.w	r2, [r3, #32]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006394:	2b00      	cmp	r3, #0
 8006396:	d035      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
 80063a0:	e030      	b.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2208      	movs	r2, #8
 80063a8:	409a      	lsls	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d028      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d023      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 020e 	bic.w	r2, r2, #14
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f202 	lsl.w	r2, r1, r2
 80063da:	605a      	str	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2020 	strb.w	r2, [r3, #32]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
 8006402:	e7ff      	b.n	8006404 <HAL_DMA_IRQHandler+0x13e>
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_DMA_GetState>:
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <DMA_SetConfig>:
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643c:	2101      	movs	r1, #1
 800643e:	fa01 f202 	lsl.w	r2, r1, r2
 8006442:	605a      	str	r2, [r3, #4]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b10      	cmp	r3, #16
 8006452:	d108      	bne.n	8006466 <DMA_SetConfig+0x40>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	60da      	str	r2, [r3, #12]
 8006464:	e007      	b.n	8006476 <DMA_SetConfig+0x50>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	609a      	str	r2, [r3, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	60da      	str	r2, [r3, #12]
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <DMA_CalcBaseAndBitshift>:
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <DMA_CalcBaseAndBitshift+0x60>)
 8006494:	429a      	cmp	r2, r3
 8006496:	d80f      	bhi.n	80064b8 <DMA_CalcBaseAndBitshift+0x34>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <DMA_CalcBaseAndBitshift+0x64>)
 80064a0:	4413      	add	r3, r2
 80064a2:	4a12      	ldr	r2, [pc, #72]	; (80064ec <DMA_CalcBaseAndBitshift+0x68>)
 80064a4:	fba2 2303 	umull	r2, r3, r2, r3
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	009a      	lsls	r2, r3, #2
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a0f      	ldr	r2, [pc, #60]	; (80064f0 <DMA_CalcBaseAndBitshift+0x6c>)
 80064b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80064b6:	e00e      	b.n	80064d6 <DMA_CalcBaseAndBitshift+0x52>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <DMA_CalcBaseAndBitshift+0x70>)
 80064c0:	4413      	add	r3, r2
 80064c2:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <DMA_CalcBaseAndBitshift+0x68>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a09      	ldr	r2, [pc, #36]	; (80064f8 <DMA_CalcBaseAndBitshift+0x74>)
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40020407 	.word	0x40020407
 80064e8:	bffdfff8 	.word	0xbffdfff8
 80064ec:	cccccccd 	.word	0xcccccccd
 80064f0:	40020000 	.word	0x40020000
 80064f4:	bffdfbf8 	.word	0xbffdfbf8
 80064f8:	40020400 	.word	0x40020400

080064fc <HAL_FLASH_Program>:
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	e9c7 2300 	strd	r2, r3, [r7]
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
 800650e:	2300      	movs	r3, #0
 8006510:	75bb      	strb	r3, [r7, #22]
 8006512:	2300      	movs	r3, #0
 8006514:	757b      	strb	r3, [r7, #21]
 8006516:	4b2f      	ldr	r3, [pc, #188]	; (80065d4 <HAL_FLASH_Program+0xd8>)
 8006518:	7e1b      	ldrb	r3, [r3, #24]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_FLASH_Program+0x26>
 800651e:	2302      	movs	r3, #2
 8006520:	e054      	b.n	80065cc <HAL_FLASH_Program+0xd0>
 8006522:	4b2c      	ldr	r3, [pc, #176]	; (80065d4 <HAL_FLASH_Program+0xd8>)
 8006524:	2201      	movs	r2, #1
 8006526:	761a      	strb	r2, [r3, #24]
 8006528:	f24c 3050 	movw	r0, #50000	; 0xc350
 800652c:	f000 f8a8 	bl	8006680 <FLASH_WaitForLastOperation>
 8006530:	4603      	mov	r3, r0
 8006532:	75fb      	strb	r3, [r7, #23]
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d144      	bne.n	80065c4 <HAL_FLASH_Program+0xc8>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d102      	bne.n	8006546 <HAL_FLASH_Program+0x4a>
 8006540:	2301      	movs	r3, #1
 8006542:	757b      	strb	r3, [r7, #21]
 8006544:	e007      	b.n	8006556 <HAL_FLASH_Program+0x5a>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d102      	bne.n	8006552 <HAL_FLASH_Program+0x56>
 800654c:	2302      	movs	r3, #2
 800654e:	757b      	strb	r3, [r7, #21]
 8006550:	e001      	b.n	8006556 <HAL_FLASH_Program+0x5a>
 8006552:	2304      	movs	r3, #4
 8006554:	757b      	strb	r3, [r7, #21]
 8006556:	2300      	movs	r3, #0
 8006558:	75bb      	strb	r3, [r7, #22]
 800655a:	e02d      	b.n	80065b8 <HAL_FLASH_Program+0xbc>
 800655c:	7dbb      	ldrb	r3, [r7, #22]
 800655e:	005a      	lsls	r2, r3, #1
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	eb02 0c03 	add.w	ip, r2, r3
 8006566:	7dbb      	ldrb	r3, [r7, #22]
 8006568:	0119      	lsls	r1, r3, #4
 800656a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656e:	f1c1 0620 	rsb	r6, r1, #32
 8006572:	f1a1 0020 	sub.w	r0, r1, #32
 8006576:	fa22 f401 	lsr.w	r4, r2, r1
 800657a:	fa03 f606 	lsl.w	r6, r3, r6
 800657e:	4334      	orrs	r4, r6
 8006580:	fa23 f000 	lsr.w	r0, r3, r0
 8006584:	4304      	orrs	r4, r0
 8006586:	fa23 f501 	lsr.w	r5, r3, r1
 800658a:	b2a3      	uxth	r3, r4
 800658c:	4619      	mov	r1, r3
 800658e:	4660      	mov	r0, ip
 8006590:	f000 f85a 	bl	8006648 <FLASH_Program_HalfWord>
 8006594:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006598:	f000 f872 	bl	8006680 <FLASH_WaitForLastOperation>
 800659c:	4603      	mov	r3, r0
 800659e:	75fb      	strb	r3, [r7, #23]
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <HAL_FLASH_Program+0xdc>)
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	4a0c      	ldr	r2, [pc, #48]	; (80065d8 <HAL_FLASH_Program+0xdc>)
 80065a6:	f023 0301 	bic.w	r3, r3, #1
 80065aa:	6113      	str	r3, [r2, #16]
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <HAL_FLASH_Program+0xc6>
 80065b2:	7dbb      	ldrb	r3, [r7, #22]
 80065b4:	3301      	adds	r3, #1
 80065b6:	75bb      	strb	r3, [r7, #22]
 80065b8:	7dba      	ldrb	r2, [r7, #22]
 80065ba:	7d7b      	ldrb	r3, [r7, #21]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d3cd      	bcc.n	800655c <HAL_FLASH_Program+0x60>
 80065c0:	e000      	b.n	80065c4 <HAL_FLASH_Program+0xc8>
 80065c2:	bf00      	nop
 80065c4:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <HAL_FLASH_Program+0xd8>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	761a      	strb	r2, [r3, #24]
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	4618      	mov	r0, r3
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d4:	20002800 	.word	0x20002800
 80065d8:	40022000 	.word	0x40022000

080065dc <HAL_FLASH_Unlock>:
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	71fb      	strb	r3, [r7, #7]
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <HAL_FLASH_Unlock+0x40>)
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <HAL_FLASH_Unlock+0x32>
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_FLASH_Unlock+0x40>)
 80065f4:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <HAL_FLASH_Unlock+0x44>)
 80065f6:	605a      	str	r2, [r3, #4]
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <HAL_FLASH_Unlock+0x40>)
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <HAL_FLASH_Unlock+0x48>)
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	4b07      	ldr	r3, [pc, #28]	; (800661c <HAL_FLASH_Unlock+0x40>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_FLASH_Unlock+0x32>
 800660a:	2301      	movs	r3, #1
 800660c:	71fb      	strb	r3, [r7, #7]
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40022000 	.word	0x40022000
 8006620:	45670123 	.word	0x45670123
 8006624:	cdef89ab 	.word	0xcdef89ab

08006628 <HAL_FLASH_Lock>:
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_FLASH_Lock+0x1c>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	4a04      	ldr	r2, [pc, #16]	; (8006644 <HAL_FLASH_Lock+0x1c>)
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	6113      	str	r3, [r2, #16]
 8006638:	2300      	movs	r3, #0
 800663a:	4618      	mov	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40022000 	.word	0x40022000

08006648 <FLASH_Program_HalfWord>:
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	807b      	strh	r3, [r7, #2]
 8006654:	4b08      	ldr	r3, [pc, #32]	; (8006678 <FLASH_Program_HalfWord+0x30>)
 8006656:	2200      	movs	r2, #0
 8006658:	61da      	str	r2, [r3, #28]
 800665a:	4b08      	ldr	r3, [pc, #32]	; (800667c <FLASH_Program_HalfWord+0x34>)
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	4a07      	ldr	r2, [pc, #28]	; (800667c <FLASH_Program_HalfWord+0x34>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6113      	str	r3, [r2, #16]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	887a      	ldrh	r2, [r7, #2]
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20002800 	.word	0x20002800
 800667c:	40022000 	.word	0x40022000

08006680 <FLASH_WaitForLastOperation>:
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	f7ff fbee 	bl	8005e68 <HAL_GetTick>
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	e010      	b.n	80066b2 <FLASH_WaitForLastOperation+0x32>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d00c      	beq.n	80066b2 <FLASH_WaitForLastOperation+0x32>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <FLASH_WaitForLastOperation+0x2e>
 800669e:	f7ff fbe3 	bl	8005e68 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d201      	bcs.n	80066b2 <FLASH_WaitForLastOperation+0x32>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e01f      	b.n	80066f2 <FLASH_WaitForLastOperation+0x72>
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <FLASH_WaitForLastOperation+0x7c>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d0e8      	beq.n	8006690 <FLASH_WaitForLastOperation+0x10>
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <FLASH_WaitForLastOperation+0x7c>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d102      	bne.n	80066d0 <FLASH_WaitForLastOperation+0x50>
 80066ca:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <FLASH_WaitForLastOperation+0x7c>)
 80066cc:	2220      	movs	r2, #32
 80066ce:	60da      	str	r2, [r3, #12]
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <FLASH_WaitForLastOperation+0x7c>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d005      	beq.n	80066e8 <FLASH_WaitForLastOperation+0x68>
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <FLASH_WaitForLastOperation+0x7c>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d103      	bne.n	80066f0 <FLASH_WaitForLastOperation+0x70>
 80066e8:	f000 f80a 	bl	8006700 <FLASH_SetErrorCode>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <FLASH_WaitForLastOperation+0x72>
 80066f0:	2300      	movs	r3, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40022000 	.word	0x40022000

08006700 <FLASH_SetErrorCode>:
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	2300      	movs	r3, #0
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <FLASH_SetErrorCode+0x5c>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d109      	bne.n	800672a <FLASH_SetErrorCode+0x2a>
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <FLASH_SetErrorCode+0x60>)
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f043 0302 	orr.w	r3, r3, #2
 800671e:	4a10      	ldr	r2, [pc, #64]	; (8006760 <FLASH_SetErrorCode+0x60>)
 8006720:	61d3      	str	r3, [r2, #28]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f043 0310 	orr.w	r3, r3, #16
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <FLASH_SetErrorCode+0x5c>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	2b04      	cmp	r3, #4
 8006734:	d109      	bne.n	800674a <FLASH_SetErrorCode+0x4a>
 8006736:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <FLASH_SetErrorCode+0x60>)
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	4a08      	ldr	r2, [pc, #32]	; (8006760 <FLASH_SetErrorCode+0x60>)
 8006740:	61d3      	str	r3, [r2, #28]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f043 0304 	orr.w	r3, r3, #4
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	4a04      	ldr	r2, [pc, #16]	; (800675c <FLASH_SetErrorCode+0x5c>)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60d3      	str	r3, [r2, #12]
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40022000 	.word	0x40022000
 8006760:	20002800 	.word	0x20002800

08006764 <HAL_FLASHEx_Erase>:
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
 800676e:	2301      	movs	r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <HAL_FLASHEx_Erase+0xcc>)
 8006778:	7e1b      	ldrb	r3, [r3, #24]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_FLASHEx_Erase+0x1e>
 800677e:	2302      	movs	r3, #2
 8006780:	e052      	b.n	8006828 <HAL_FLASHEx_Erase+0xc4>
 8006782:	4b2b      	ldr	r3, [pc, #172]	; (8006830 <HAL_FLASHEx_Erase+0xcc>)
 8006784:	2201      	movs	r2, #1
 8006786:	761a      	strb	r2, [r3, #24]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d115      	bne.n	80067bc <HAL_FLASHEx_Erase+0x58>
 8006790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006794:	f7ff ff74 	bl	8006680 <FLASH_WaitForLastOperation>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d140      	bne.n	8006820 <HAL_FLASHEx_Erase+0xbc>
 800679e:	f000 f84b 	bl	8006838 <FLASH_MassErase>
 80067a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067a6:	f7ff ff6b 	bl	8006680 <FLASH_WaitForLastOperation>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
 80067ae:	4b21      	ldr	r3, [pc, #132]	; (8006834 <HAL_FLASHEx_Erase+0xd0>)
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	4a20      	ldr	r2, [pc, #128]	; (8006834 <HAL_FLASHEx_Erase+0xd0>)
 80067b4:	f023 0304 	bic.w	r3, r3, #4
 80067b8:	6113      	str	r3, [r2, #16]
 80067ba:	e031      	b.n	8006820 <HAL_FLASHEx_Erase+0xbc>
 80067bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067c0:	f7ff ff5e 	bl	8006680 <FLASH_WaitForLastOperation>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d12a      	bne.n	8006820 <HAL_FLASHEx_Erase+0xbc>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f04f 32ff 	mov.w	r2, #4294967295
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	60bb      	str	r3, [r7, #8]
 80067d8:	e019      	b.n	800680e <HAL_FLASHEx_Erase+0xaa>
 80067da:	68b8      	ldr	r0, [r7, #8]
 80067dc:	f000 f846 	bl	800686c <FLASH_PageErase>
 80067e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067e4:	f7ff ff4c 	bl	8006680 <FLASH_WaitForLastOperation>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_FLASHEx_Erase+0xd0>)
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	4a10      	ldr	r2, [pc, #64]	; (8006834 <HAL_FLASHEx_Erase+0xd0>)
 80067f2:	f023 0302 	bic.w	r3, r3, #2
 80067f6:	6113      	str	r3, [r2, #16]
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_FLASHEx_Erase+0xa2>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e00c      	b.n	8006820 <HAL_FLASHEx_Erase+0xbc>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	02da      	lsls	r2, r3, #11
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4413      	add	r3, r2
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	429a      	cmp	r2, r3
 800681e:	d3dc      	bcc.n	80067da <HAL_FLASHEx_Erase+0x76>
 8006820:	4b03      	ldr	r3, [pc, #12]	; (8006830 <HAL_FLASHEx_Erase+0xcc>)
 8006822:	2200      	movs	r2, #0
 8006824:	761a      	strb	r2, [r3, #24]
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20002800 	.word	0x20002800
 8006834:	40022000 	.word	0x40022000

08006838 <FLASH_MassErase>:
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <FLASH_MassErase+0x2c>)
 800683e:	2200      	movs	r2, #0
 8006840:	61da      	str	r2, [r3, #28]
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <FLASH_MassErase+0x30>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	4a08      	ldr	r2, [pc, #32]	; (8006868 <FLASH_MassErase+0x30>)
 8006848:	f043 0304 	orr.w	r3, r3, #4
 800684c:	6113      	str	r3, [r2, #16]
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <FLASH_MassErase+0x30>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4a05      	ldr	r2, [pc, #20]	; (8006868 <FLASH_MassErase+0x30>)
 8006854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006858:	6113      	str	r3, [r2, #16]
 800685a:	bf00      	nop
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	20002800 	.word	0x20002800
 8006868:	40022000 	.word	0x40022000

0800686c <FLASH_PageErase>:
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <FLASH_PageErase+0x38>)
 8006876:	2200      	movs	r2, #0
 8006878:	61da      	str	r2, [r3, #28]
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <FLASH_PageErase+0x3c>)
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <FLASH_PageErase+0x3c>)
 8006880:	f043 0302 	orr.w	r3, r3, #2
 8006884:	6113      	str	r3, [r2, #16]
 8006886:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <FLASH_PageErase+0x3c>)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6153      	str	r3, [r2, #20]
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <FLASH_PageErase+0x3c>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	4a05      	ldr	r2, [pc, #20]	; (80068a8 <FLASH_PageErase+0x3c>)
 8006892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006896:	6113      	str	r3, [r2, #16]
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	20002800 	.word	0x20002800
 80068a8:	40022000 	.word	0x40022000

080068ac <HAL_GPIO_Init>:
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	e154      	b.n	8006b66 <HAL_GPIO_Init+0x2ba>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	2101      	movs	r1, #1
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	4013      	ands	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8146 	beq.w	8006b60 <HAL_GPIO_Init+0x2b4>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d005      	beq.n	80068ec <HAL_GPIO_Init+0x40>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d130      	bne.n	800694e <HAL_GPIO_Init+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	2203      	movs	r2, #3
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4013      	ands	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	609a      	str	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	2201      	movs	r2, #1
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43db      	mvns	r3, r3
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 0201 	and.w	r2, r3, #1
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d017      	beq.n	800698a <HAL_GPIO_Init+0xde>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	2203      	movs	r2, #3
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4013      	ands	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d123      	bne.n	80069de <HAL_GPIO_Init+0x132>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	08da      	lsrs	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3208      	adds	r2, #8
 800699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	220f      	movs	r2, #15
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	08da      	lsrs	r2, r3, #3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3208      	adds	r2, #8
 80069d8:	6939      	ldr	r1, [r7, #16]
 80069da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	2203      	movs	r2, #3
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	43db      	mvns	r3, r3
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4013      	ands	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 0203 	and.w	r2, r3, #3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80a0 	beq.w	8006b60 <HAL_GPIO_Init+0x2b4>
 8006a20:	4b58      	ldr	r3, [pc, #352]	; (8006b84 <HAL_GPIO_Init+0x2d8>)
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	4a57      	ldr	r2, [pc, #348]	; (8006b84 <HAL_GPIO_Init+0x2d8>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	6193      	str	r3, [r2, #24]
 8006a2c:	4b55      	ldr	r3, [pc, #340]	; (8006b84 <HAL_GPIO_Init+0x2d8>)
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4a53      	ldr	r2, [pc, #332]	; (8006b88 <HAL_GPIO_Init+0x2dc>)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	089b      	lsrs	r3, r3, #2
 8006a3e:	3302      	adds	r3, #2
 8006a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	220f      	movs	r2, #15
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a62:	d019      	beq.n	8006a98 <HAL_GPIO_Init+0x1ec>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a49      	ldr	r2, [pc, #292]	; (8006b8c <HAL_GPIO_Init+0x2e0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <HAL_GPIO_Init+0x1e8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a48      	ldr	r2, [pc, #288]	; (8006b90 <HAL_GPIO_Init+0x2e4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00d      	beq.n	8006a90 <HAL_GPIO_Init+0x1e4>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a47      	ldr	r2, [pc, #284]	; (8006b94 <HAL_GPIO_Init+0x2e8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <HAL_GPIO_Init+0x1e0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a46      	ldr	r2, [pc, #280]	; (8006b98 <HAL_GPIO_Init+0x2ec>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d101      	bne.n	8006a88 <HAL_GPIO_Init+0x1dc>
 8006a84:	2304      	movs	r3, #4
 8006a86:	e008      	b.n	8006a9a <HAL_GPIO_Init+0x1ee>
 8006a88:	2305      	movs	r3, #5
 8006a8a:	e006      	b.n	8006a9a <HAL_GPIO_Init+0x1ee>
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e004      	b.n	8006a9a <HAL_GPIO_Init+0x1ee>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e002      	b.n	8006a9a <HAL_GPIO_Init+0x1ee>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <HAL_GPIO_Init+0x1ee>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	f002 0203 	and.w	r2, r2, #3
 8006aa0:	0092      	lsls	r2, r2, #2
 8006aa2:	4093      	lsls	r3, r2
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	4937      	ldr	r1, [pc, #220]	; (8006b88 <HAL_GPIO_Init+0x2dc>)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	089b      	lsrs	r3, r3, #2
 8006ab0:	3302      	adds	r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006ab8:	4b38      	ldr	r3, [pc, #224]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_GPIO_Init+0x230>
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	4a2f      	ldr	r2, [pc, #188]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6093      	str	r3, [r2, #8]
 8006ae2:	4b2e      	ldr	r3, [pc, #184]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	43db      	mvns	r3, r3
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4013      	ands	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_GPIO_Init+0x25a>
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	4a25      	ldr	r2, [pc, #148]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	60d3      	str	r3, [r2, #12]
 8006b0c:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	43db      	mvns	r3, r3
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <HAL_GPIO_Init+0x284>
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	4a1a      	ldr	r2, [pc, #104]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6053      	str	r3, [r2, #4]
 8006b36:	4b19      	ldr	r3, [pc, #100]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4013      	ands	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_GPIO_Init+0x2ae>
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3301      	adds	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f47f aea3 	bne.w	80068bc <HAL_GPIO_Init+0x10>
 8006b76:	bf00      	nop
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40010000 	.word	0x40010000
 8006b8c:	48000400 	.word	0x48000400
 8006b90:	48000800 	.word	0x48000800
 8006b94:	48000c00 	.word	0x48000c00
 8006b98:	48001000 	.word	0x48001000
 8006b9c:	40010400 	.word	0x40010400

08006ba0 <HAL_GPIO_WritePin>:
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	807b      	strh	r3, [r7, #2]
 8006bac:	4613      	mov	r3, r2
 8006bae:	707b      	strb	r3, [r7, #1]
 8006bb0:	787b      	ldrb	r3, [r7, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_GPIO_WritePin+0x1e>
 8006bb6:	887a      	ldrh	r2, [r7, #2]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	619a      	str	r2, [r3, #24]
 8006bbc:	e002      	b.n	8006bc4 <HAL_GPIO_WritePin+0x24>
 8006bbe:	887a      	ldrh	r2, [r7, #2]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_GPIO_TogglePin>:
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	807b      	strh	r3, [r7, #2]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	887a      	ldrh	r2, [r7, #2]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4013      	ands	r3, r2
 8006be8:	041a      	lsls	r2, r3, #16
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	43d9      	mvns	r1, r3
 8006bee:	887b      	ldrh	r3, [r7, #2]
 8006bf0:	400b      	ands	r3, r1
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	619a      	str	r2, [r3, #24]
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_I2C_Init>:
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_I2C_Init+0x12>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e081      	b.n	8006d1a <HAL_I2C_Init+0x116>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_I2C_Init+0x2c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fd fb24 	bl	8004278 <HAL_I2C_MspInit>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	; 0x24
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0201 	bic.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c54:	611a      	str	r2, [r3, #16]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c64:	609a      	str	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d107      	bne.n	8006c7e <HAL_I2C_Init+0x7a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c7a:	609a      	str	r2, [r3, #8]
 8006c7c:	e006      	b.n	8006c8c <HAL_I2C_Init+0x88>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d104      	bne.n	8006c9e <HAL_I2C_Init+0x9a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb0:	6053      	str	r3, [r2, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	ea42 0103 	orr.w	r1, r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	021a      	lsls	r2, r3, #8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69d9      	ldr	r1, [r3, #28]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	645a      	str	r2, [r3, #68]	; 0x44
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <HAL_I2C_Master_Transmit>:
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	460b      	mov	r3, r1
 8006d32:	817b      	strh	r3, [r7, #10]
 8006d34:	4613      	mov	r3, r2
 8006d36:	813b      	strh	r3, [r7, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	f040 80da 	bne.w	8006efa <HAL_I2C_Master_Transmit+0x1d6>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_I2C_Master_Transmit+0x30>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e0d3      	b.n	8006efc <HAL_I2C_Master_Transmit+0x1d8>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d5c:	f7ff f884 	bl	8005e68 <HAL_GetTick>
 8006d60:	6178      	str	r0, [r7, #20]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	2319      	movs	r3, #25
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f001 fc99 	bl	80086a6 <I2C_WaitOnFlagUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_I2C_Master_Transmit+0x5a>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e0be      	b.n	8006efc <HAL_I2C_Master_Transmit+0x1d8>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2221      	movs	r2, #33	; 0x21
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2210      	movs	r2, #16
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	645a      	str	r2, [r3, #68]	; 0x44
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	893a      	ldrh	r2, [r7, #8]
 8006d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	635a      	str	r2, [r3, #52]	; 0x34
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2bff      	cmp	r3, #255	; 0xff
 8006dae:	d90e      	bls.n	8006dce <HAL_I2C_Master_Transmit+0xaa>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	22ff      	movs	r2, #255	; 0xff
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	8979      	ldrh	r1, [r7, #10]
 8006dbe:	4b51      	ldr	r3, [pc, #324]	; (8006f04 <HAL_I2C_Master_Transmit+0x1e0>)
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f001 fea8 	bl	8008b1c <I2C_TransferConfig>
 8006dcc:	e06c      	b.n	8006ea8 <HAL_I2C_Master_Transmit+0x184>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	8979      	ldrh	r1, [r7, #10]
 8006de0:	4b48      	ldr	r3, [pc, #288]	; (8006f04 <HAL_I2C_Master_Transmit+0x1e0>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 fe97 	bl	8008b1c <I2C_TransferConfig>
 8006dee:	e05b      	b.n	8006ea8 <HAL_I2C_Master_Transmit+0x184>
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	6a39      	ldr	r1, [r7, #32]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f001 fca5 	bl	8008744 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_I2C_Master_Transmit+0xe0>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e07b      	b.n	8006efc <HAL_I2C_Master_Transmit+0x1d8>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d034      	beq.n	8006ea8 <HAL_I2C_Master_Transmit+0x184>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d130      	bne.n	8006ea8 <HAL_I2C_Master_Transmit+0x184>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f001 fc28 	bl	80086a6 <I2C_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_I2C_Master_Transmit+0x13c>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e04d      	b.n	8006efc <HAL_I2C_Master_Transmit+0x1d8>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2bff      	cmp	r3, #255	; 0xff
 8006e68:	d90e      	bls.n	8006e88 <HAL_I2C_Master_Transmit+0x164>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	22ff      	movs	r2, #255	; 0xff
 8006e6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	8979      	ldrh	r1, [r7, #10]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f001 fe4b 	bl	8008b1c <I2C_TransferConfig>
 8006e86:	e00f      	b.n	8006ea8 <HAL_I2C_Master_Transmit+0x184>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	8979      	ldrh	r1, [r7, #10]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f001 fe3a 	bl	8008b1c <I2C_TransferConfig>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d19e      	bne.n	8006df0 <HAL_I2C_Master_Transmit+0xcc>
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	6a39      	ldr	r1, [r7, #32]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f001 fc8b 	bl	80087d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_I2C_Master_Transmit+0x1a2>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e01a      	b.n	8006efc <HAL_I2C_Master_Transmit+0x1d8>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	61da      	str	r2, [r3, #28]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_I2C_Master_Transmit+0x1e4>)
 8006eda:	400b      	ands	r3, r1
 8006edc:	6053      	str	r3, [r2, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e000      	b.n	8006efc <HAL_I2C_Master_Transmit+0x1d8>
 8006efa:	2302      	movs	r3, #2
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	80002000 	.word	0x80002000
 8006f08:	fe00e800 	.word	0xfe00e800

08006f0c <HAL_I2C_Master_Receive>:
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	461a      	mov	r2, r3
 8006f18:	460b      	mov	r3, r1
 8006f1a:	817b      	strh	r3, [r7, #10]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	813b      	strh	r3, [r7, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	f040 80db 	bne.w	80070e4 <HAL_I2C_Master_Receive+0x1d8>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_I2C_Master_Receive+0x30>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e0d4      	b.n	80070e6 <HAL_I2C_Master_Receive+0x1da>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f44:	f7fe ff90 	bl	8005e68 <HAL_GetTick>
 8006f48:	6178      	str	r0, [r7, #20]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	2319      	movs	r3, #25
 8006f50:	2201      	movs	r2, #1
 8006f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f001 fba5 	bl	80086a6 <I2C_WaitOnFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <HAL_I2C_Master_Receive+0x5a>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e0bf      	b.n	80070e6 <HAL_I2C_Master_Receive+0x1da>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2222      	movs	r2, #34	; 0x22
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2210      	movs	r2, #16
 8006f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	625a      	str	r2, [r3, #36]	; 0x24
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	893a      	ldrh	r2, [r7, #8]
 8006f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2bff      	cmp	r3, #255	; 0xff
 8006f96:	d90e      	bls.n	8006fb6 <HAL_I2C_Master_Receive+0xaa>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	22ff      	movs	r2, #255	; 0xff
 8006f9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	8979      	ldrh	r1, [r7, #10]
 8006fa6:	4b52      	ldr	r3, [pc, #328]	; (80070f0 <HAL_I2C_Master_Receive+0x1e4>)
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f001 fdb4 	bl	8008b1c <I2C_TransferConfig>
 8006fb4:	e06d      	b.n	8007092 <HAL_I2C_Master_Receive+0x186>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	851a      	strh	r2, [r3, #40]	; 0x28
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	8979      	ldrh	r1, [r7, #10]
 8006fc8:	4b49      	ldr	r3, [pc, #292]	; (80070f0 <HAL_I2C_Master_Receive+0x1e4>)
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f001 fda3 	bl	8008b1c <I2C_TransferConfig>
 8006fd6:	e05c      	b.n	8007092 <HAL_I2C_Master_Receive+0x186>
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	6a39      	ldr	r1, [r7, #32]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 fc3b 	bl	8008858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_I2C_Master_Receive+0xe0>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e07c      	b.n	80070e6 <HAL_I2C_Master_Receive+0x1da>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	625a      	str	r2, [r3, #36]	; 0x24
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d034      	beq.n	8007092 <HAL_I2C_Master_Receive+0x186>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702c:	2b00      	cmp	r3, #0
 800702e:	d130      	bne.n	8007092 <HAL_I2C_Master_Receive+0x186>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2200      	movs	r2, #0
 8007038:	2180      	movs	r1, #128	; 0x80
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f001 fb33 	bl	80086a6 <I2C_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_I2C_Master_Receive+0x13e>
 8007046:	2301      	movs	r3, #1
 8007048:	e04d      	b.n	80070e6 <HAL_I2C_Master_Receive+0x1da>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800704e:	b29b      	uxth	r3, r3
 8007050:	2bff      	cmp	r3, #255	; 0xff
 8007052:	d90e      	bls.n	8007072 <HAL_I2C_Master_Receive+0x166>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	22ff      	movs	r2, #255	; 0xff
 8007058:	851a      	strh	r2, [r3, #40]	; 0x28
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705e:	b2da      	uxtb	r2, r3
 8007060:	8979      	ldrh	r1, [r7, #10]
 8007062:	2300      	movs	r3, #0
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f001 fd56 	bl	8008b1c <I2C_TransferConfig>
 8007070:	e00f      	b.n	8007092 <HAL_I2C_Master_Receive+0x186>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	; 0x28
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007080:	b2da      	uxtb	r2, r3
 8007082:	8979      	ldrh	r1, [r7, #10]
 8007084:	2300      	movs	r3, #0
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f001 fd45 	bl	8008b1c <I2C_TransferConfig>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d19d      	bne.n	8006fd8 <HAL_I2C_Master_Receive+0xcc>
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	6a39      	ldr	r1, [r7, #32]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f001 fb96 	bl	80087d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_I2C_Master_Receive+0x1a4>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e01a      	b.n	80070e6 <HAL_I2C_Master_Receive+0x1da>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2220      	movs	r2, #32
 80070b6:	61da      	str	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6859      	ldr	r1, [r3, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <HAL_I2C_Master_Receive+0x1e8>)
 80070c4:	400b      	ands	r3, r1
 80070c6:	6053      	str	r3, [r2, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070e0:	2300      	movs	r3, #0
 80070e2:	e000      	b.n	80070e6 <HAL_I2C_Master_Receive+0x1da>
 80070e4:	2302      	movs	r3, #2
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	80002400 	.word	0x80002400
 80070f4:	fe00e800 	.word	0xfe00e800

080070f8 <HAL_I2C_Master_Transmit_IT>:
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	461a      	mov	r2, r3
 8007104:	460b      	mov	r3, r1
 8007106:	817b      	strh	r3, [r7, #10]
 8007108:	4613      	mov	r3, r2
 800710a:	813b      	strh	r3, [r7, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b20      	cmp	r3, #32
 8007116:	d153      	bne.n	80071c0 <HAL_I2C_Master_Transmit_IT+0xc8>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007126:	d101      	bne.n	800712c <HAL_I2C_Master_Transmit_IT+0x34>
 8007128:	2302      	movs	r3, #2
 800712a:	e04a      	b.n	80071c2 <HAL_I2C_Master_Transmit_IT+0xca>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_I2C_Master_Transmit_IT+0x42>
 8007136:	2302      	movs	r3, #2
 8007138:	e043      	b.n	80071c2 <HAL_I2C_Master_Transmit_IT+0xca>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2221      	movs	r2, #33	; 0x21
 8007146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2210      	movs	r2, #16
 800714e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	645a      	str	r2, [r3, #68]	; 0x44
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	625a      	str	r2, [r3, #36]	; 0x24
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	893a      	ldrh	r2, [r7, #8]
 8007162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a19      	ldr	r2, [pc, #100]	; (80071cc <HAL_I2C_Master_Transmit_IT+0xd4>)
 8007168:	62da      	str	r2, [r3, #44]	; 0x2c
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4a18      	ldr	r2, [pc, #96]	; (80071d0 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800716e:	635a      	str	r2, [r3, #52]	; 0x34
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	2bff      	cmp	r3, #255	; 0xff
 8007178:	d906      	bls.n	8007188 <HAL_I2C_Master_Transmit_IT+0x90>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	22ff      	movs	r2, #255	; 0xff
 800717e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e007      	b.n	8007198 <HAL_I2C_Master_Transmit_IT+0xa0>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	851a      	strh	r2, [r3, #40]	; 0x28
 8007192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719c:	b2da      	uxtb	r2, r3
 800719e:	8979      	ldrh	r1, [r7, #10]
 80071a0:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f001 fcb8 	bl	8008b1c <I2C_TransferConfig>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071b4:	2101      	movs	r1, #1
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f001 fce2 	bl	8008b80 <I2C_Enable_IRQ>
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <HAL_I2C_Master_Transmit_IT+0xca>
 80071c0:	2302      	movs	r3, #2
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	ffff0000 	.word	0xffff0000
 80071d0:	08007395 	.word	0x08007395
 80071d4:	80002000 	.word	0x80002000

080071d8 <HAL_I2C_Master_Receive_IT>:
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	461a      	mov	r2, r3
 80071e4:	460b      	mov	r3, r1
 80071e6:	817b      	strh	r3, [r7, #10]
 80071e8:	4613      	mov	r3, r2
 80071ea:	813b      	strh	r3, [r7, #8]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d153      	bne.n	80072a0 <HAL_I2C_Master_Receive_IT+0xc8>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007206:	d101      	bne.n	800720c <HAL_I2C_Master_Receive_IT+0x34>
 8007208:	2302      	movs	r3, #2
 800720a:	e04a      	b.n	80072a2 <HAL_I2C_Master_Receive_IT+0xca>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007212:	2b01      	cmp	r3, #1
 8007214:	d101      	bne.n	800721a <HAL_I2C_Master_Receive_IT+0x42>
 8007216:	2302      	movs	r3, #2
 8007218:	e043      	b.n	80072a2 <HAL_I2C_Master_Receive_IT+0xca>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2222      	movs	r2, #34	; 0x22
 8007226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2210      	movs	r2, #16
 800722e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	645a      	str	r2, [r3, #68]	; 0x44
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	893a      	ldrh	r2, [r7, #8]
 8007242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a19      	ldr	r2, [pc, #100]	; (80072ac <HAL_I2C_Master_Receive_IT+0xd4>)
 8007248:	62da      	str	r2, [r3, #44]	; 0x2c
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <HAL_I2C_Master_Receive_IT+0xd8>)
 800724e:	635a      	str	r2, [r3, #52]	; 0x34
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007254:	b29b      	uxth	r3, r3
 8007256:	2bff      	cmp	r3, #255	; 0xff
 8007258:	d906      	bls.n	8007268 <HAL_I2C_Master_Receive_IT+0x90>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22ff      	movs	r2, #255	; 0xff
 800725e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e007      	b.n	8007278 <HAL_I2C_Master_Receive_IT+0xa0>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	851a      	strh	r2, [r3, #40]	; 0x28
 8007272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727c:	b2da      	uxtb	r2, r3
 800727e:	8979      	ldrh	r1, [r7, #10]
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <HAL_I2C_Master_Receive_IT+0xdc>)
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f001 fc48 	bl	8008b1c <I2C_TransferConfig>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007294:	2102      	movs	r1, #2
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f001 fc72 	bl	8008b80 <I2C_Enable_IRQ>
 800729c:	2300      	movs	r3, #0
 800729e:	e000      	b.n	80072a2 <HAL_I2C_Master_Receive_IT+0xca>
 80072a0:	2302      	movs	r3, #2
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	ffff0000 	.word	0xffff0000
 80072b0:	08007395 	.word	0x08007395
 80072b4:	80002400 	.word	0x80002400

080072b8 <HAL_I2C_EV_IRQHandler>:
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60bb      	str	r3, [r7, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <HAL_I2C_EV_IRQHandler+0x2c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_I2C_SlaveTxCpltCallback>:
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_I2C_SlaveRxCpltCallback>:
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_I2C_AddrCallback>:
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
 8007320:	4613      	mov	r3, r2
 8007322:	803b      	strh	r3, [r7, #0]
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_I2C_ListenCpltCallback>:
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_I2C_MemTxCpltCallback>:
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_I2C_MemRxCpltCallback>:
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_I2C_ErrorCallback>:
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_I2C_AbortCpltCallback>:
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <I2C_Master_ISR_IT>:
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <I2C_Master_ISR_IT+0x1e>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e108      	b.n	80075c4 <I2C_Master_ISR_IT+0x230>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d012      	beq.n	80073ea <I2C_Master_ISR_IT+0x56>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <I2C_Master_ISR_IT+0x56>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2210      	movs	r2, #16
 80073d4:	61da      	str	r2, [r3, #28]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	f043 0204 	orr.w	r2, r3, #4
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	645a      	str	r2, [r3, #68]	; 0x44
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f001 f91d 	bl	8008622 <I2C_Flush_TXDR>
 80073e8:	e0d9      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d022      	beq.n	800743a <I2C_Master_ISR_IT+0xa6>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01d      	beq.n	800743a <I2C_Master_ISR_IT+0xa6>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f023 0304 	bic.w	r3, r3, #4
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	625a      	str	r2, [r3, #36]	; 0x24
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	851a      	strh	r2, [r3, #40]	; 0x28
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007438:	e0b1      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01d      	beq.n	8007480 <I2C_Master_ISR_IT+0xec>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <I2C_Master_ISR_IT+0xec>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	629a      	str	r2, [r3, #40]	; 0x28
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	625a      	str	r2, [r3, #36]	; 0x24
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800747e:	e08e      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d05c      	beq.n	8007544 <I2C_Master_ISR_IT+0x1b0>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d057      	beq.n	8007544 <I2C_Master_ISR_IT+0x1b0>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d040      	beq.n	8007520 <I2C_Master_ISR_IT+0x18c>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d13c      	bne.n	8007520 <I2C_Master_ISR_IT+0x18c>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074b2:	827b      	strh	r3, [r7, #18]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2bff      	cmp	r3, #255	; 0xff
 80074bc:	d90e      	bls.n	80074dc <I2C_Master_ISR_IT+0x148>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	22ff      	movs	r2, #255	; 0xff
 80074c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	8a79      	ldrh	r1, [r7, #18]
 80074cc:	2300      	movs	r3, #0
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f001 fb21 	bl	8008b1c <I2C_TransferConfig>
 80074da:	e032      	b.n	8007542 <I2C_Master_ISR_IT+0x1ae>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	851a      	strh	r2, [r3, #40]	; 0x28
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074ee:	d00b      	beq.n	8007508 <I2C_Master_ISR_IT+0x174>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	8a79      	ldrh	r1, [r7, #18]
 80074fc:	2000      	movs	r0, #0
 80074fe:	9000      	str	r0, [sp, #0]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f001 fb0b 	bl	8008b1c <I2C_TransferConfig>
 8007506:	e01c      	b.n	8007542 <I2C_Master_ISR_IT+0x1ae>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750c:	b2da      	uxtb	r2, r3
 800750e:	8a79      	ldrh	r1, [r7, #18]
 8007510:	2300      	movs	r3, #0
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f001 faff 	bl	8008b1c <I2C_TransferConfig>
 800751e:	e010      	b.n	8007542 <I2C_Master_ISR_IT+0x1ae>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800752e:	d003      	beq.n	8007538 <I2C_Master_ISR_IT+0x1a4>
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fca3 	bl	8007e7c <I2C_ITMasterSeqCplt>
 8007536:	e032      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 8007538:	2140      	movs	r1, #64	; 0x40
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 ff5a 	bl	80083f4 <I2C_ITError>
 8007540:	e02d      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 8007542:	e02c      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d027      	beq.n	800759e <I2C_Master_ISR_IT+0x20a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d022      	beq.n	800759e <I2C_Master_ISR_IT+0x20a>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d119      	bne.n	8007596 <I2C_Master_ISR_IT+0x202>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007570:	d015      	beq.n	800759e <I2C_Master_ISR_IT+0x20a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800757a:	d108      	bne.n	800758e <I2C_Master_ISR_IT+0x1fa>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800758a:	605a      	str	r2, [r3, #4]
 800758c:	e007      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fc74 	bl	8007e7c <I2C_ITMasterSeqCplt>
 8007594:	e003      	b.n	800759e <I2C_Master_ISR_IT+0x20a>
 8007596:	2140      	movs	r1, #64	; 0x40
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 ff2b 	bl	80083f4 <I2C_ITError>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d008      	beq.n	80075ba <I2C_Master_ISR_IT+0x226>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <I2C_Master_ISR_IT+0x226>
 80075b2:	6979      	ldr	r1, [r7, #20]
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fcfb 	bl	8007fb0 <I2C_ITMasterCplt>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c2:	2300      	movs	r3, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <I2C_Slave_ISR_IT>:
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <I2C_Slave_ISR_IT+0x24>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e0e1      	b.n	80077b4 <I2C_Slave_ISR_IT+0x1e8>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d008      	beq.n	8007614 <I2C_Slave_ISR_IT+0x48>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <I2C_Slave_ISR_IT+0x48>
 800760c:	6939      	ldr	r1, [r7, #16]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fd96 	bl	8008140 <I2C_ITSlaveCplt>
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b00      	cmp	r3, #0
 800761c:	d04b      	beq.n	80076b6 <I2C_Slave_ISR_IT+0xea>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d046      	beq.n	80076b6 <I2C_Slave_ISR_IT+0xea>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d128      	bne.n	8007684 <I2C_Slave_ISR_IT+0xb8>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b28      	cmp	r3, #40	; 0x28
 800763c:	d108      	bne.n	8007650 <I2C_Slave_ISR_IT+0x84>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007644:	d104      	bne.n	8007650 <I2C_Slave_ISR_IT+0x84>
 8007646:	6939      	ldr	r1, [r7, #16]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fe7f 	bl	800834c <I2C_ITListenCplt>
 800764e:	e031      	b.n	80076b4 <I2C_Slave_ISR_IT+0xe8>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b29      	cmp	r3, #41	; 0x29
 800765a:	d10e      	bne.n	800767a <I2C_Slave_ISR_IT+0xae>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007662:	d00a      	beq.n	800767a <I2C_Slave_ISR_IT+0xae>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2210      	movs	r2, #16
 800766a:	61da      	str	r2, [r3, #28]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 ffd8 	bl	8008622 <I2C_Flush_TXDR>
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fc3f 	bl	8007ef6 <I2C_ITSlaveSeqCplt>
 8007678:	e01c      	b.n	80076b4 <I2C_Slave_ISR_IT+0xe8>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2210      	movs	r2, #16
 8007680:	61da      	str	r2, [r3, #28]
 8007682:	e08f      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1d8>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2210      	movs	r2, #16
 800768a:	61da      	str	r2, [r3, #28]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007690:	f043 0204 	orr.w	r2, r3, #4
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	645a      	str	r2, [r3, #68]	; 0x44
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <I2C_Slave_ISR_IT+0xda>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076a4:	d17e      	bne.n	80077a4 <I2C_Slave_ISR_IT+0x1d8>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076aa:	4619      	mov	r1, r3
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fea1 	bl	80083f4 <I2C_ITError>
 80076b2:	e077      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1d8>
 80076b4:	e076      	b.n	80077a4 <I2C_Slave_ISR_IT+0x1d8>
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d02f      	beq.n	8007720 <I2C_Slave_ISR_IT+0x154>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d02a      	beq.n	8007720 <I2C_Slave_ISR_IT+0x154>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d018      	beq.n	8007706 <I2C_Slave_ISR_IT+0x13a>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	851a      	strh	r2, [r3, #40]	; 0x28
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d14b      	bne.n	80077a8 <I2C_Slave_ISR_IT+0x1dc>
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007716:	d047      	beq.n	80077a8 <I2C_Slave_ISR_IT+0x1dc>
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fbec 	bl	8007ef6 <I2C_ITSlaveSeqCplt>
 800771e:	e043      	b.n	80077a8 <I2C_Slave_ISR_IT+0x1dc>
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <I2C_Slave_ISR_IT+0x172>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <I2C_Slave_ISR_IT+0x172>
 8007734:	6939      	ldr	r1, [r7, #16]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fb1c 	bl	8007d74 <I2C_ITAddrCplt>
 800773c:	e035      	b.n	80077aa <I2C_Slave_ISR_IT+0x1de>
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d030      	beq.n	80077aa <I2C_Slave_ISR_IT+0x1de>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d02b      	beq.n	80077aa <I2C_Slave_ISR_IT+0x1de>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007756:	b29b      	uxth	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d018      	beq.n	800778e <I2C_Slave_ISR_IT+0x1c2>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	625a      	str	r2, [r3, #36]	; 0x24
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	851a      	strh	r2, [r3, #40]	; 0x28
 800778c:	e00d      	b.n	80077aa <I2C_Slave_ISR_IT+0x1de>
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007794:	d002      	beq.n	800779c <I2C_Slave_ISR_IT+0x1d0>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <I2C_Slave_ISR_IT+0x1de>
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fbaa 	bl	8007ef6 <I2C_ITSlaveSeqCplt>
 80077a2:	e002      	b.n	80077aa <I2C_Slave_ISR_IT+0x1de>
 80077a4:	bf00      	nop
 80077a6:	e000      	b.n	80077aa <I2C_Slave_ISR_IT+0x1de>
 80077a8:	bf00      	nop
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077b2:	2300      	movs	r3, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <I2C_Master_ISR_DMA>:
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <I2C_Master_ISR_DMA+0x1a>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e0d9      	b.n	800798a <I2C_Master_ISR_DMA+0x1ce>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d016      	beq.n	8007816 <I2C_Master_ISR_DMA+0x5a>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d011      	beq.n	8007816 <I2C_Master_ISR_DMA+0x5a>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2210      	movs	r2, #16
 80077f8:	61da      	str	r2, [r3, #28]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	f043 0204 	orr.w	r2, r3, #4
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	645a      	str	r2, [r3, #68]	; 0x44
 8007806:	2120      	movs	r1, #32
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f001 f9b9 	bl	8008b80 <I2C_Enable_IRQ>
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 ff07 	bl	8008622 <I2C_Flush_TXDR>
 8007814:	e0b4      	b.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d071      	beq.n	8007904 <I2C_Master_ISR_DMA+0x148>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d06c      	beq.n	8007904 <I2C_Master_ISR_DMA+0x148>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d04e      	beq.n	80078e2 <I2C_Master_ISR_DMA+0x126>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007850:	827b      	strh	r3, [r7, #18]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007856:	b29b      	uxth	r3, r3
 8007858:	2bff      	cmp	r3, #255	; 0xff
 800785a:	d906      	bls.n	800786a <I2C_Master_ISR_DMA+0xae>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	22ff      	movs	r2, #255	; 0xff
 8007860:	851a      	strh	r2, [r3, #40]	; 0x28
 8007862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e010      	b.n	800788c <I2C_Master_ISR_DMA+0xd0>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	851a      	strh	r2, [r3, #40]	; 0x28
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800787c:	d003      	beq.n	8007886 <I2C_Master_ISR_DMA+0xca>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	e002      	b.n	800788c <I2C_Master_ISR_DMA+0xd0>
 8007886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007890:	b2da      	uxtb	r2, r3
 8007892:	8a79      	ldrh	r1, [r7, #18]
 8007894:	2300      	movs	r3, #0
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f001 f93e 	bl	8008b1c <I2C_TransferConfig>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b22      	cmp	r3, #34	; 0x22
 80078bc:	d108      	bne.n	80078d0 <I2C_Master_ISR_DMA+0x114>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e057      	b.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e04e      	b.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078f0:	d003      	beq.n	80078fa <I2C_Master_ISR_DMA+0x13e>
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 fac2 	bl	8007e7c <I2C_ITMasterSeqCplt>
 80078f8:	e042      	b.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 80078fa:	2140      	movs	r1, #64	; 0x40
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fd79 	bl	80083f4 <I2C_ITError>
 8007902:	e03d      	b.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b00      	cmp	r3, #0
 800790c:	d028      	beq.n	8007960 <I2C_Master_ISR_DMA+0x1a4>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d023      	beq.n	8007960 <I2C_Master_ISR_DMA+0x1a4>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d119      	bne.n	8007956 <I2C_Master_ISR_DMA+0x19a>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007930:	d025      	beq.n	800797e <I2C_Master_ISR_DMA+0x1c2>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800793a:	d108      	bne.n	800794e <I2C_Master_ISR_DMA+0x192>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800794a:	605a      	str	r2, [r3, #4]
 800794c:	e017      	b.n	800797e <I2C_Master_ISR_DMA+0x1c2>
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fa94 	bl	8007e7c <I2C_ITMasterSeqCplt>
 8007954:	e013      	b.n	800797e <I2C_Master_ISR_DMA+0x1c2>
 8007956:	2140      	movs	r1, #64	; 0x40
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fd4b 	bl	80083f4 <I2C_ITError>
 800795e:	e00e      	b.n	800797e <I2C_Master_ISR_DMA+0x1c2>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fb1a 	bl	8007fb0 <I2C_ITMasterCplt>
 800797c:	e000      	b.n	8007980 <I2C_Master_ISR_DMA+0x1c4>
 800797e:	bf00      	nop
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007988:	2300      	movs	r3, #0
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <I2C_Mem_ISR_DMA>:
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	4b87      	ldr	r3, [pc, #540]	; (8007bc0 <I2C_Mem_ISR_DMA+0x22c>)
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <I2C_Mem_ISR_DMA+0x1e>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e102      	b.n	8007bb8 <I2C_Mem_ISR_DMA+0x224>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d016      	beq.n	80079f2 <I2C_Mem_ISR_DMA+0x5e>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d011      	beq.n	80079f2 <I2C_Mem_ISR_DMA+0x5e>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2210      	movs	r2, #16
 80079d4:	61da      	str	r2, [r3, #28]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079da:	f043 0204 	orr.w	r2, r3, #4
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	645a      	str	r2, [r3, #68]	; 0x44
 80079e2:	2120      	movs	r1, #32
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f001 f8cb 	bl	8008b80 <I2C_Enable_IRQ>
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 fe19 	bl	8008622 <I2C_Flush_TXDR>
 80079f0:	e0dd      	b.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <I2C_Mem_ISR_DMA+0x86>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <I2C_Mem_ISR_DMA+0x86>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	651a      	str	r2, [r3, #80]	; 0x50
 8007a18:	e0c9      	b.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d05b      	beq.n	8007adc <I2C_Mem_ISR_DMA+0x148>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d056      	beq.n	8007adc <I2C_Mem_ISR_DMA+0x148>
 8007a2e:	2110      	movs	r1, #16
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f001 f8a5 	bl	8008b80 <I2C_Enable_IRQ>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d048      	beq.n	8007ad2 <I2C_Mem_ISR_DMA+0x13e>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2bff      	cmp	r3, #255	; 0xff
 8007a48:	d910      	bls.n	8007a6c <I2C_Mem_ISR_DMA+0xd8>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	22ff      	movs	r2, #255	; 0xff
 8007a4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a54:	b299      	uxth	r1, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f001 f859 	bl	8008b1c <I2C_TransferConfig>
 8007a6a:	e011      	b.n	8007a90 <I2C_Mem_ISR_DMA+0xfc>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7a:	b299      	uxth	r1, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	2300      	movs	r3, #0
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f001 f846 	bl	8008b1c <I2C_TransferConfig>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b22      	cmp	r3, #34	; 0x22
 8007aac:	d108      	bne.n	8007ac0 <I2C_Mem_ISR_DMA+0x12c>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e076      	b.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e06d      	b.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007ad2:	2140      	movs	r1, #64	; 0x40
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fc8d 	bl	80083f4 <I2C_ITError>
 8007ada:	e068      	b.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d055      	beq.n	8007b92 <I2C_Mem_ISR_DMA+0x1fe>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d050      	beq.n	8007b92 <I2C_Mem_ISR_DMA+0x1fe>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b22      	cmp	r3, #34	; 0x22
 8007afa:	d101      	bne.n	8007b00 <I2C_Mem_ISR_DMA+0x16c>
 8007afc:	4b31      	ldr	r3, [pc, #196]	; (8007bc4 <I2C_Mem_ISR_DMA+0x230>)
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2bff      	cmp	r3, #255	; 0xff
 8007b08:	d910      	bls.n	8007b2c <I2C_Mem_ISR_DMA+0x198>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	22ff      	movs	r2, #255	; 0xff
 8007b0e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b14:	b299      	uxth	r1, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fff9 	bl	8008b1c <I2C_TransferConfig>
 8007b2a:	e011      	b.n	8007b50 <I2C_Mem_ISR_DMA+0x1bc>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	851a      	strh	r2, [r3, #40]	; 0x28
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3a:	b299      	uxth	r1, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 ffe6 	bl	8008b1c <I2C_TransferConfig>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b22      	cmp	r3, #34	; 0x22
 8007b6c:	d108      	bne.n	8007b80 <I2C_Mem_ISR_DMA+0x1ec>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e016      	b.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e00d      	b.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f003 0320 	and.w	r3, r3, #32
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <I2C_Mem_ISR_DMA+0x21a>
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fa01 	bl	8007fb0 <I2C_ITMasterCplt>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	80002000 	.word	0x80002000
 8007bc4:	80002400 	.word	0x80002400

08007bc8 <I2C_Slave_ISR_DMA>:
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <I2C_Slave_ISR_DMA+0x24>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e0bf      	b.n	8007d6c <I2C_Slave_ISR_DMA+0x1a4>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <I2C_Slave_ISR_DMA+0x48>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <I2C_Slave_ISR_DMA+0x48>
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fa98 	bl	8008140 <I2C_ITSlaveCplt>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8095 	beq.w	8007d46 <I2C_Slave_ISR_DMA+0x17e>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 808f 	beq.w	8007d46 <I2C_Slave_ISR_DMA+0x17e>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <I2C_Slave_ISR_DMA+0x74>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d07d      	beq.n	8007d38 <I2C_Slave_ISR_DMA+0x170>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00c      	beq.n	8007c5e <I2C_Slave_ISR_DMA+0x96>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <I2C_Slave_ISR_DMA+0x96>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <I2C_Slave_ISR_DMA+0x96>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00c      	beq.n	8007c80 <I2C_Slave_ISR_DMA+0xb8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <I2C_Slave_ISR_DMA+0xb8>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <I2C_Slave_ISR_DMA+0xb8>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d128      	bne.n	8007cd8 <I2C_Slave_ISR_DMA+0x110>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b28      	cmp	r3, #40	; 0x28
 8007c90:	d108      	bne.n	8007ca4 <I2C_Slave_ISR_DMA+0xdc>
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c98:	d104      	bne.n	8007ca4 <I2C_Slave_ISR_DMA+0xdc>
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fb55 	bl	800834c <I2C_ITListenCplt>
 8007ca2:	e048      	b.n	8007d36 <I2C_Slave_ISR_DMA+0x16e>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b29      	cmp	r3, #41	; 0x29
 8007cae:	d10e      	bne.n	8007cce <I2C_Slave_ISR_DMA+0x106>
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cb6:	d00a      	beq.n	8007cce <I2C_Slave_ISR_DMA+0x106>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2210      	movs	r2, #16
 8007cbe:	61da      	str	r2, [r3, #28]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fcae 	bl	8008622 <I2C_Flush_TXDR>
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f915 	bl	8007ef6 <I2C_ITSlaveSeqCplt>
 8007ccc:	e033      	b.n	8007d36 <I2C_Slave_ISR_DMA+0x16e>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2210      	movs	r2, #16
 8007cd4:	61da      	str	r2, [r3, #28]
 8007cd6:	e034      	b.n	8007d42 <I2C_Slave_ISR_DMA+0x17a>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2210      	movs	r2, #16
 8007cde:	61da      	str	r2, [r3, #28]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce4:	f043 0204 	orr.w	r2, r3, #4
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	645a      	str	r2, [r3, #68]	; 0x44
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf2:	75fb      	strb	r3, [r7, #23]
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <I2C_Slave_ISR_DMA+0x13a>
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d00:	d11f      	bne.n	8007d42 <I2C_Slave_ISR_DMA+0x17a>
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	2b21      	cmp	r3, #33	; 0x21
 8007d06:	d002      	beq.n	8007d0e <I2C_Slave_ISR_DMA+0x146>
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b29      	cmp	r3, #41	; 0x29
 8007d0c:	d103      	bne.n	8007d16 <I2C_Slave_ISR_DMA+0x14e>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2221      	movs	r2, #33	; 0x21
 8007d12:	631a      	str	r2, [r3, #48]	; 0x30
 8007d14:	e008      	b.n	8007d28 <I2C_Slave_ISR_DMA+0x160>
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	2b22      	cmp	r3, #34	; 0x22
 8007d1a:	d002      	beq.n	8007d22 <I2C_Slave_ISR_DMA+0x15a>
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d20:	d102      	bne.n	8007d28 <I2C_Slave_ISR_DMA+0x160>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2222      	movs	r2, #34	; 0x22
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fb60 	bl	80083f4 <I2C_ITError>
 8007d34:	e005      	b.n	8007d42 <I2C_Slave_ISR_DMA+0x17a>
 8007d36:	e004      	b.n	8007d42 <I2C_Slave_ISR_DMA+0x17a>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	61da      	str	r2, [r3, #28]
 8007d40:	e00f      	b.n	8007d62 <I2C_Slave_ISR_DMA+0x19a>
 8007d42:	bf00      	nop
 8007d44:	e00d      	b.n	8007d62 <I2C_Slave_ISR_DMA+0x19a>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <I2C_Slave_ISR_DMA+0x19a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <I2C_Slave_ISR_DMA+0x19a>
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f809 	bl	8007d74 <I2C_ITAddrCplt>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3720      	adds	r7, #32
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <I2C_ITAddrCplt>:
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d8a:	2b28      	cmp	r3, #40	; 0x28
 8007d8c:	d16a      	bne.n	8007e64 <I2C_ITAddrCplt+0xf0>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	73fb      	strb	r3, [r7, #15]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	0c1b      	lsrs	r3, r3, #16
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007dac:	81bb      	strh	r3, [r7, #12]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dba:	817b      	strh	r3, [r7, #10]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007dc8:	813b      	strh	r3, [r7, #8]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d138      	bne.n	8007e44 <I2C_ITAddrCplt+0xd0>
 8007dd2:	897b      	ldrh	r3, [r7, #10]
 8007dd4:	09db      	lsrs	r3, r3, #7
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	89bb      	ldrh	r3, [r7, #12]
 8007dda:	4053      	eors	r3, r2
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f003 0306 	and.w	r3, r3, #6
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d11c      	bne.n	8007e20 <I2C_ITAddrCplt+0xac>
 8007de6:	897b      	ldrh	r3, [r7, #10]
 8007de8:	81bb      	strh	r3, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	649a      	str	r2, [r3, #72]	; 0x48
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d13b      	bne.n	8007e74 <I2C_ITAddrCplt+0x100>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	649a      	str	r2, [r3, #72]	; 0x48
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2208      	movs	r2, #8
 8007e08:	61da      	str	r2, [r3, #28]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e12:	89ba      	ldrh	r2, [r7, #12]
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fa7b 	bl	8007314 <HAL_I2C_AddrCallback>
 8007e1e:	e029      	b.n	8007e74 <I2C_ITAddrCplt+0x100>
 8007e20:	893b      	ldrh	r3, [r7, #8]
 8007e22:	81bb      	strh	r3, [r7, #12]
 8007e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 ff31 	bl	8008c90 <I2C_Disable_IRQ>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e36:	89ba      	ldrh	r2, [r7, #12]
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff fa69 	bl	8007314 <HAL_I2C_AddrCallback>
 8007e42:	e017      	b.n	8007e74 <I2C_ITAddrCplt+0x100>
 8007e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 ff21 	bl	8008c90 <I2C_Disable_IRQ>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e56:	89ba      	ldrh	r2, [r7, #12]
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff fa59 	bl	8007314 <HAL_I2C_AddrCallback>
 8007e62:	e007      	b.n	8007e74 <I2C_ITAddrCplt+0x100>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2208      	movs	r2, #8
 8007e6a:	61da      	str	r2, [r3, #28]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <I2C_ITMasterSeqCplt>:
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b21      	cmp	r3, #33	; 0x21
 8007e96:	d115      	bne.n	8007ec4 <I2C_ITMasterSeqCplt+0x48>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2211      	movs	r2, #17
 8007ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	635a      	str	r2, [r3, #52]	; 0x34
 8007eac:	2101      	movs	r1, #1
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 feee 	bl	8008c90 <I2C_Disable_IRQ>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fa f988 	bl	80021d2 <HAL_I2C_MasterTxCpltCallback>
 8007ec2:	e014      	b.n	8007eee <I2C_ITMasterSeqCplt+0x72>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2212      	movs	r2, #18
 8007ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8007ed8:	2102      	movs	r1, #2
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fed8 	bl	8008c90 <I2C_Disable_IRQ>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7fa f967 	bl	80021bc <HAL_I2C_MasterRxCpltCallback>
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <I2C_ITSlaveSeqCplt>:
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d008      	beq.n	8007f2a <I2C_ITSlaveSeqCplt+0x34>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e00c      	b.n	8007f44 <I2C_ITSlaveSeqCplt+0x4e>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d007      	beq.n	8007f44 <I2C_ITSlaveSeqCplt+0x4e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b29      	cmp	r3, #41	; 0x29
 8007f4e:	d112      	bne.n	8007f76 <I2C_ITSlaveSeqCplt+0x80>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2228      	movs	r2, #40	; 0x28
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2221      	movs	r2, #33	; 0x21
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f5e:	2101      	movs	r1, #1
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fe95 	bl	8008c90 <I2C_Disable_IRQ>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff f9bc 	bl	80072ec <HAL_I2C_SlaveTxCpltCallback>
 8007f74:	e017      	b.n	8007fa6 <I2C_ITSlaveSeqCplt+0xb0>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f80:	d111      	bne.n	8007fa6 <I2C_ITSlaveSeqCplt+0xb0>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2228      	movs	r2, #40	; 0x28
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2222      	movs	r2, #34	; 0x22
 8007f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f90:	2102      	movs	r1, #2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fe7c 	bl	8008c90 <I2C_Disable_IRQ>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff f9ad 	bl	8007300 <HAL_I2C_SlaveRxCpltCallback>
 8007fa6:	bf00      	nop
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <I2C_ITMasterCplt>:
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	61da      	str	r2, [r3, #28]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b21      	cmp	r3, #33	; 0x21
 8007fd0:	d107      	bne.n	8007fe2 <I2C_ITMasterCplt+0x32>
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fe5b 	bl	8008c90 <I2C_Disable_IRQ>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2211      	movs	r2, #17
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
 8007fe0:	e00c      	b.n	8007ffc <I2C_ITMasterCplt+0x4c>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b22      	cmp	r3, #34	; 0x22
 8007fec:	d106      	bne.n	8007ffc <I2C_ITMasterCplt+0x4c>
 8007fee:	2102      	movs	r1, #2
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fe4d 	bl	8008c90 <I2C_Disable_IRQ>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2212      	movs	r2, #18
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6859      	ldr	r1, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	4b4c      	ldr	r3, [pc, #304]	; (8008138 <I2C_ITMasterCplt+0x188>)
 8008008:	400b      	ands	r3, r1
 800800a:	6053      	str	r3, [r2, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	635a      	str	r2, [r3, #52]	; 0x34
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a49      	ldr	r2, [pc, #292]	; (800813c <I2C_ITMasterCplt+0x18c>)
 8008016:	62da      	str	r2, [r3, #44]	; 0x2c
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <I2C_ITMasterCplt+0x86>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2210      	movs	r2, #16
 8008028:	61da      	str	r2, [r3, #28]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	f043 0204 	orr.w	r2, r3, #4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b60      	cmp	r3, #96	; 0x60
 8008040:	d10a      	bne.n	8008058 <I2C_ITMasterCplt+0xa8>
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <I2C_ITMasterCplt+0xa8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	b2db      	uxtb	r3, r3
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fae2 	bl	8008622 <I2C_Flush_TXDR>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008062:	613b      	str	r3, [r7, #16]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b60      	cmp	r3, #96	; 0x60
 800806e:	d002      	beq.n	8008076 <I2C_ITMasterCplt+0xc6>
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d006      	beq.n	8008084 <I2C_ITMasterCplt+0xd4>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f9b9 	bl	80083f4 <I2C_ITError>
 8008082:	e054      	b.n	800812e <I2C_ITMasterCplt+0x17e>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b21      	cmp	r3, #33	; 0x21
 800808e:	d124      	bne.n	80080da <I2C_ITMasterCplt+0x12a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	631a      	str	r2, [r3, #48]	; 0x30
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d10b      	bne.n	80080c2 <I2C_ITMasterCplt+0x112>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff f942 	bl	8007344 <HAL_I2C_MemTxCpltCallback>
 80080c0:	e035      	b.n	800812e <I2C_ITMasterCplt+0x17e>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fa f87d 	bl	80021d2 <HAL_I2C_MasterTxCpltCallback>
 80080d8:	e029      	b.n	800812e <I2C_ITMasterCplt+0x17e>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b22      	cmp	r3, #34	; 0x22
 80080e4:	d123      	bne.n	800812e <I2C_ITMasterCplt+0x17e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	631a      	str	r2, [r3, #48]	; 0x30
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b40      	cmp	r3, #64	; 0x40
 80080fe:	d10b      	bne.n	8008118 <I2C_ITMasterCplt+0x168>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff f921 	bl	8007358 <HAL_I2C_MemRxCpltCallback>
 8008116:	e00a      	b.n	800812e <I2C_ITMasterCplt+0x17e>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7fa f847 	bl	80021bc <HAL_I2C_MasterRxCpltCallback>
 800812e:	bf00      	nop
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	fe00e800 	.word	0xfe00e800
 800813c:	ffff0000 	.word	0xffff0000

08008140 <I2C_ITSlaveCplt>:
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800815c:	73fb      	strb	r3, [r7, #15]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2220      	movs	r2, #32
 8008164:	61da      	str	r2, [r3, #28]
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b21      	cmp	r3, #33	; 0x21
 800816a:	d002      	beq.n	8008172 <I2C_ITSlaveCplt+0x32>
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	2b29      	cmp	r3, #41	; 0x29
 8008170:	d108      	bne.n	8008184 <I2C_ITSlaveCplt+0x44>
 8008172:	f248 0101 	movw	r1, #32769	; 0x8001
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fd8a 	bl	8008c90 <I2C_Disable_IRQ>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2221      	movs	r2, #33	; 0x21
 8008180:	631a      	str	r2, [r3, #48]	; 0x30
 8008182:	e00d      	b.n	80081a0 <I2C_ITSlaveCplt+0x60>
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b22      	cmp	r3, #34	; 0x22
 8008188:	d002      	beq.n	8008190 <I2C_ITSlaveCplt+0x50>
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b2a      	cmp	r3, #42	; 0x2a
 800818e:	d107      	bne.n	80081a0 <I2C_ITSlaveCplt+0x60>
 8008190:	f248 0102 	movw	r1, #32770	; 0x8002
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fd7b 	bl	8008c90 <I2C_Disable_IRQ>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2222      	movs	r2, #34	; 0x22
 800819e:	631a      	str	r2, [r3, #48]	; 0x30
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ae:	605a      	str	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6859      	ldr	r1, [r3, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4b62      	ldr	r3, [pc, #392]	; (8008344 <I2C_ITSlaveCplt+0x204>)
 80081bc:	400b      	ands	r3, r1
 80081be:	6053      	str	r3, [r2, #4]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fa2e 	bl	8008622 <I2C_Flush_TXDR>
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d013      	beq.n	80081f8 <I2C_ITSlaveCplt+0xb8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01f      	beq.n	8008228 <I2C_ITSlaveCplt+0xe8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081f6:	e017      	b.n	8008228 <I2C_ITSlaveCplt+0xe8>
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d012      	beq.n	8008228 <I2C_ITSlaveCplt+0xe8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d006      	beq.n	8008228 <I2C_ITSlaveCplt+0xe8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	d020      	beq.n	8008274 <I2C_ITSlaveCplt+0x134>
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f023 0304 	bic.w	r3, r3, #4
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	625a      	str	r2, [r3, #36]	; 0x24
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <I2C_ITSlaveCplt+0x134>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	851a      	strh	r2, [r3, #40]	; 0x28
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <I2C_ITSlaveCplt+0x14a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008282:	f043 0204 	orr.w	r2, r3, #4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	645a      	str	r2, [r3, #68]	; 0x44
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	635a      	str	r2, [r3, #52]	; 0x34
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829c:	2b00      	cmp	r3, #0
 800829e:	d010      	beq.n	80082c2 <I2C_ITSlaveCplt+0x182>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8a4 	bl	80083f4 <I2C_ITError>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b28      	cmp	r3, #40	; 0x28
 80082b6:	d141      	bne.n	800833c <I2C_ITSlaveCplt+0x1fc>
 80082b8:	6979      	ldr	r1, [r7, #20]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f846 	bl	800834c <I2C_ITListenCplt>
 80082c0:	e03c      	b.n	800833c <I2C_ITSlaveCplt+0x1fc>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082ca:	d014      	beq.n	80082f6 <I2C_ITSlaveCplt+0x1b6>
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff fe12 	bl	8007ef6 <I2C_ITSlaveSeqCplt>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a1c      	ldr	r2, [pc, #112]	; (8008348 <I2C_ITSlaveCplt+0x208>)
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff f81e 	bl	8007330 <HAL_I2C_ListenCpltCallback>
 80082f4:	e022      	b.n	800833c <I2C_ITSlaveCplt+0x1fc>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b22      	cmp	r3, #34	; 0x22
 8008300:	d10e      	bne.n	8008320 <I2C_ITSlaveCplt+0x1e0>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7fe fff1 	bl	8007300 <HAL_I2C_SlaveRxCpltCallback>
 800831e:	e00d      	b.n	800833c <I2C_ITSlaveCplt+0x1fc>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	631a      	str	r2, [r3, #48]	; 0x30
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fe ffd8 	bl	80072ec <HAL_I2C_SlaveTxCpltCallback>
 800833c:	bf00      	nop
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	fe00e800 	.word	0xfe00e800
 8008348:	ffff0000 	.word	0xffff0000

0800834c <I2C_ITListenCplt>:
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a25      	ldr	r2, [pc, #148]	; (80083f0 <I2C_ITListenCplt+0xa4>)
 800835a:	62da      	str	r2, [r3, #44]	; 0x2c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	631a      	str	r2, [r3, #48]	; 0x30
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	635a      	str	r2, [r3, #52]	; 0x34
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d022      	beq.n	80083c8 <I2C_ITListenCplt+0x7c>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	625a      	str	r2, [r3, #36]	; 0x24
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d012      	beq.n	80083c8 <I2C_ITListenCplt+0x7c>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c0:	f043 0204 	orr.w	r2, r3, #4
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	645a      	str	r2, [r3, #68]	; 0x44
 80083c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fc5f 	bl	8008c90 <I2C_Disable_IRQ>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2210      	movs	r2, #16
 80083d8:	61da      	str	r2, [r3, #28]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fe ffa4 	bl	8007330 <HAL_I2C_ListenCpltCallback>
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	ffff0000 	.word	0xffff0000

080083f4 <I2C_ITError>:
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008404:	73fb      	strb	r3, [r7, #15]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a6d      	ldr	r2, [pc, #436]	; (80085c8 <I2C_ITError+0x1d4>)
 8008412:	62da      	str	r2, [r3, #44]	; 0x2c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	855a      	strh	r2, [r3, #42]	; 0x2a
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	645a      	str	r2, [r3, #68]	; 0x44
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	2b28      	cmp	r3, #40	; 0x28
 800842a:	d005      	beq.n	8008438 <I2C_ITError+0x44>
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b29      	cmp	r3, #41	; 0x29
 8008430:	d002      	beq.n	8008438 <I2C_ITError+0x44>
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	2b2a      	cmp	r3, #42	; 0x2a
 8008436:	d10b      	bne.n	8008450 <I2C_ITError+0x5c>
 8008438:	2103      	movs	r1, #3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fc28 	bl	8008c90 <I2C_Disable_IRQ>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2228      	movs	r2, #40	; 0x28
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a60      	ldr	r2, [pc, #384]	; (80085cc <I2C_ITError+0x1d8>)
 800844c:	635a      	str	r2, [r3, #52]	; 0x34
 800844e:	e030      	b.n	80084b2 <I2C_ITError+0xbe>
 8008450:	f248 0103 	movw	r1, #32771	; 0x8003
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fc1b 	bl	8008c90 <I2C_Disable_IRQ>
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f8e1 	bl	8008622 <I2C_Flush_TXDR>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b60      	cmp	r3, #96	; 0x60
 800846a:	d01f      	beq.n	80084ac <I2C_ITError+0xb8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b20      	cmp	r3, #32
 8008480:	d114      	bne.n	80084ac <I2C_ITError+0xb8>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b10      	cmp	r3, #16
 800848e:	d109      	bne.n	80084a4 <I2C_ITError+0xb0>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2210      	movs	r2, #16
 8008496:	61da      	str	r2, [r3, #28]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849c:	f043 0204 	orr.w	r2, r3, #4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	645a      	str	r2, [r3, #68]	; 0x44
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2220      	movs	r2, #32
 80084aa:	61da      	str	r2, [r3, #28]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	635a      	str	r2, [r3, #52]	; 0x34
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	60bb      	str	r3, [r7, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d039      	beq.n	8008534 <I2C_ITError+0x140>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b11      	cmp	r3, #17
 80084c4:	d002      	beq.n	80084cc <I2C_ITError+0xd8>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b21      	cmp	r3, #33	; 0x21
 80084ca:	d133      	bne.n	8008534 <I2C_ITError+0x140>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084da:	d107      	bne.n	80084ec <I2C_ITError+0xf8>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fd ff8b 	bl	800640c <HAL_DMA_GetState>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d017      	beq.n	800852c <I2C_ITError+0x138>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	4a33      	ldr	r2, [pc, #204]	; (80085d0 <I2C_ITError+0x1dc>)
 8008502:	635a      	str	r2, [r3, #52]	; 0x34
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	4618      	mov	r0, r3
 8008512:	f7fd fe9a 	bl	800624a <HAL_DMA_Abort_IT>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d04d      	beq.n	80085b8 <I2C_ITError+0x1c4>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008526:	4610      	mov	r0, r2
 8008528:	4798      	blx	r3
 800852a:	e045      	b.n	80085b8 <I2C_ITError+0x1c4>
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f851 	bl	80085d4 <I2C_TreatErrorCallback>
 8008532:	e041      	b.n	80085b8 <I2C_ITError+0x1c4>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d039      	beq.n	80085b0 <I2C_ITError+0x1bc>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b12      	cmp	r3, #18
 8008540:	d002      	beq.n	8008548 <I2C_ITError+0x154>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b22      	cmp	r3, #34	; 0x22
 8008546:	d133      	bne.n	80085b0 <I2C_ITError+0x1bc>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008556:	d107      	bne.n	8008568 <I2C_ITError+0x174>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856c:	4618      	mov	r0, r3
 800856e:	f7fd ff4d 	bl	800640c <HAL_DMA_GetState>
 8008572:	4603      	mov	r3, r0
 8008574:	2b01      	cmp	r3, #1
 8008576:	d017      	beq.n	80085a8 <I2C_ITError+0x1b4>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857c:	4a14      	ldr	r2, [pc, #80]	; (80085d0 <I2C_ITError+0x1dc>)
 800857e:	635a      	str	r2, [r3, #52]	; 0x34
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd fe5c 	bl	800624a <HAL_DMA_Abort_IT>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d011      	beq.n	80085bc <I2C_ITError+0x1c8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085a2:	4610      	mov	r0, r2
 80085a4:	4798      	blx	r3
 80085a6:	e009      	b.n	80085bc <I2C_ITError+0x1c8>
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f813 	bl	80085d4 <I2C_TreatErrorCallback>
 80085ae:	e005      	b.n	80085bc <I2C_ITError+0x1c8>
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f80f 	bl	80085d4 <I2C_TreatErrorCallback>
 80085b6:	e002      	b.n	80085be <I2C_ITError+0x1ca>
 80085b8:	bf00      	nop
 80085ba:	e000      	b.n	80085be <I2C_ITError+0x1ca>
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	ffff0000 	.word	0xffff0000
 80085cc:	080075cd 	.word	0x080075cd
 80085d0:	0800866b 	.word	0x0800866b

080085d4 <I2C_TreatErrorCallback>:
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b60      	cmp	r3, #96	; 0x60
 80085e6:	d10e      	bne.n	8008606 <I2C_TreatErrorCallback+0x32>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fe febe 	bl	8007380 <HAL_I2C_AbortCpltCallback>
 8008604:	e009      	b.n	800861a <I2C_TreatErrorCallback+0x46>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	; 0x30
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7fe fea9 	bl	800736c <HAL_I2C_ErrorCallback>
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <I2C_Flush_TXDR>:
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b02      	cmp	r3, #2
 8008636:	d103      	bne.n	8008640 <I2C_Flush_TXDR+0x1e>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2200      	movs	r2, #0
 800863e:	629a      	str	r2, [r3, #40]	; 0x28
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b01      	cmp	r3, #1
 800864c:	d007      	beq.n	800865e <I2C_Flush_TXDR+0x3c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f042 0201 	orr.w	r2, r2, #1
 800865c:	619a      	str	r2, [r3, #24]
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <I2C_DMAAbort>:
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <I2C_DMAAbort+0x1e>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	2200      	movs	r2, #0
 8008686:	635a      	str	r2, [r3, #52]	; 0x34
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <I2C_DMAAbort+0x2e>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008694:	2200      	movs	r2, #0
 8008696:	635a      	str	r2, [r3, #52]	; 0x34
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff ff9b 	bl	80085d4 <I2C_TreatErrorCallback>
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <I2C_WaitOnFlagUntilTimeout>:
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	603b      	str	r3, [r7, #0]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]
 80086b6:	e031      	b.n	800871c <I2C_WaitOnFlagUntilTimeout+0x76>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d02d      	beq.n	800871c <I2C_WaitOnFlagUntilTimeout+0x76>
 80086c0:	f7fd fbd2 	bl	8005e68 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d302      	bcc.n	80086d6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d122      	bne.n	800871c <I2C_WaitOnFlagUntilTimeout+0x76>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4013      	ands	r3, r2
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	bf0c      	ite	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	2300      	movne	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d113      	bne.n	800871c <I2C_WaitOnFlagUntilTimeout+0x76>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f8:	f043 0220 	orr.w	r2, r3, #32
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	645a      	str	r2, [r3, #68]	; 0x44
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008718:	2301      	movs	r3, #1
 800871a:	e00f      	b.n	800873c <I2C_WaitOnFlagUntilTimeout+0x96>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4013      	ands	r3, r2
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	429a      	cmp	r2, r3
 800872a:	bf0c      	ite	eq
 800872c:	2301      	moveq	r3, #1
 800872e:	2300      	movne	r3, #0
 8008730:	b2db      	uxtb	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	429a      	cmp	r2, r3
 8008738:	d0be      	beq.n	80086b8 <I2C_WaitOnFlagUntilTimeout+0x12>
 800873a:	2300      	movs	r3, #0
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <I2C_WaitOnTXISFlagUntilTimeout>:
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	e033      	b.n	80087ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f900 	bl	800895c <I2C_IsErrorOccurred>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8008762:	2301      	movs	r3, #1
 8008764:	e031      	b.n	80087ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d025      	beq.n	80087ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800876e:	f7fd fb7b 	bl	8005e68 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	429a      	cmp	r2, r3
 800877c:	d302      	bcc.n	8008784 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11a      	bne.n	80087ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b02      	cmp	r3, #2
 8008790:	d013      	beq.n	80087ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008796:	f043 0220 	orr.w	r2, r3, #32
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	645a      	str	r2, [r3, #68]	; 0x44
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087b6:	2301      	movs	r3, #1
 80087b8:	e007      	b.n	80087ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d1c4      	bne.n	8008752 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 80087c8:	2300      	movs	r3, #0
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	e02f      	b.n	8008840 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f8b9 	bl	800895c <I2C_IsErrorOccurred>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e02d      	b.n	8008850 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 80087f4:	f7fd fb38 	bl	8005e68 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	429a      	cmp	r2, r3
 8008802:	d302      	bcc.n	800880a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d11a      	bne.n	8008840 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	f003 0320 	and.w	r3, r3, #32
 8008814:	2b20      	cmp	r3, #32
 8008816:	d013      	beq.n	8008840 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881c:	f043 0220 	orr.w	r2, r3, #32
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	645a      	str	r2, [r3, #68]	; 0x44
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800883c:	2301      	movs	r3, #1
 800883e:	e007      	b.n	8008850 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b20      	cmp	r3, #32
 800884c:	d1c8      	bne.n	80087e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 800884e:	2300      	movs	r3, #0
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	e06b      	b.n	800893e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f876 	bl	800895c <I2C_IsErrorOccurred>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
 8008876:	2301      	movs	r3, #1
 8008878:	e069      	b.n	800894e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b20      	cmp	r3, #32
 8008886:	d138      	bne.n	80088fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b04      	cmp	r3, #4
 8008894:	d105      	bne.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800889e:	2300      	movs	r3, #0
 80088a0:	e055      	b.n	800894e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	2b10      	cmp	r3, #16
 80088ae:	d107      	bne.n	80088c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2210      	movs	r2, #16
 80088b6:	61da      	str	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2204      	movs	r2, #4
 80088bc:	645a      	str	r2, [r3, #68]	; 0x44
 80088be:	e002      	b.n	80088c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	645a      	str	r2, [r3, #68]	; 0x44
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2220      	movs	r2, #32
 80088cc:	61da      	str	r2, [r3, #28]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6859      	ldr	r1, [r3, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80088da:	400b      	ands	r3, r1
 80088dc:	6053      	str	r3, [r2, #4]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088f6:	2301      	movs	r3, #1
 80088f8:	e029      	b.n	800894e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80088fa:	f7fd fab5 	bl	8005e68 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	429a      	cmp	r2, r3
 8008908:	d302      	bcc.n	8008910 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d116      	bne.n	800893e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0304 	and.w	r3, r3, #4
 800891a:	2b04      	cmp	r3, #4
 800891c:	d00f      	beq.n	800893e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	f043 0220 	orr.w	r2, r3, #32
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	645a      	str	r2, [r3, #68]	; 0x44
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2220      	movs	r2, #32
 800892e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800893a:	2301      	movs	r3, #1
 800893c:	e007      	b.n	800894e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b04      	cmp	r3, #4
 800894a:	d18c      	bne.n	8008866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 800894c:	2300      	movs	r3, #0
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	fe00e800 	.word	0xfe00e800

0800895c <I2C_IsErrorOccurred>:
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	2300      	movs	r3, #0
 800896a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	61bb      	str	r3, [r7, #24]
 8008976:	2300      	movs	r3, #0
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b00      	cmp	r3, #0
 8008986:	d068      	beq.n	8008a5a <I2C_IsErrorOccurred+0xfe>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2210      	movs	r2, #16
 800898e:	61da      	str	r2, [r3, #28]
 8008990:	e049      	b.n	8008a26 <I2C_IsErrorOccurred+0xca>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d045      	beq.n	8008a26 <I2C_IsErrorOccurred+0xca>
 800899a:	f7fd fa65 	bl	8005e68 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <I2C_IsErrorOccurred+0x54>
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d13a      	bne.n	8008a26 <I2C_IsErrorOccurred+0xca>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089c2:	74fb      	strb	r3, [r7, #19]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d2:	d121      	bne.n	8008a18 <I2C_IsErrorOccurred+0xbc>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089da:	d01d      	beq.n	8008a18 <I2C_IsErrorOccurred+0xbc>
 80089dc:	7cfb      	ldrb	r3, [r7, #19]
 80089de:	2b20      	cmp	r3, #32
 80089e0:	d01a      	beq.n	8008a18 <I2C_IsErrorOccurred+0xbc>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	f7fd fa39 	bl	8005e68 <HAL_GetTick>
 80089f6:	61f8      	str	r0, [r7, #28]
 80089f8:	e00e      	b.n	8008a18 <I2C_IsErrorOccurred+0xbc>
 80089fa:	f7fd fa35 	bl	8005e68 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b19      	cmp	r3, #25
 8008a06:	d907      	bls.n	8008a18 <I2C_IsErrorOccurred+0xbc>
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	f043 0320 	orr.w	r3, r3, #32
 8008a0e:	623b      	str	r3, [r7, #32]
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a16:	e006      	b.n	8008a26 <I2C_IsErrorOccurred+0xca>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d1e9      	bne.n	80089fa <I2C_IsErrorOccurred+0x9e>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d003      	beq.n	8008a3c <I2C_IsErrorOccurred+0xe0>
 8008a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0aa      	beq.n	8008992 <I2C_IsErrorOccurred+0x36>
 8008a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d103      	bne.n	8008a4c <I2C_IsErrorOccurred+0xf0>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	61da      	str	r2, [r3, #28]
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	f043 0304 	orr.w	r3, r3, #4
 8008a52:	623b      	str	r3, [r7, #32]
 8008a54:	2301      	movs	r3, #1
 8008a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <I2C_IsErrorOccurred+0x128>
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
 8008a72:	623b      	str	r3, [r7, #32]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a7c:	61da      	str	r2, [r3, #28]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <I2C_IsErrorOccurred+0x14a>
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	f043 0308 	orr.w	r3, r3, #8
 8008a94:	623b      	str	r3, [r7, #32]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a9e:	61da      	str	r2, [r3, #28]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <I2C_IsErrorOccurred+0x16c>
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	f043 0302 	orr.w	r3, r3, #2
 8008ab6:	623b      	str	r3, [r7, #32]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ac0:	61da      	str	r2, [r3, #28]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01c      	beq.n	8008b0a <I2C_IsErrorOccurred+0x1ae>
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fda6 	bl	8008622 <I2C_Flush_TXDR>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6859      	ldr	r1, [r3, #4]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <I2C_IsErrorOccurred+0x1bc>)
 8008ae2:	400b      	ands	r3, r1
 8008ae4:	6053      	str	r3, [r2, #4]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	645a      	str	r2, [r3, #68]	; 0x44
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2220      	movs	r2, #32
 8008af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3728      	adds	r7, #40	; 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	fe00e800 	.word	0xfe00e800

08008b1c <I2C_TransferConfig>:
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	817b      	strh	r3, [r7, #10]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	727b      	strb	r3, [r7, #9]
 8008b2e:	897b      	ldrh	r3, [r7, #10]
 8008b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008b34:	7a7b      	ldrb	r3, [r7, #9]
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b4a:	617b      	str	r3, [r7, #20]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	0d5b      	lsrs	r3, r3, #21
 8008b56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008b5a:	4b08      	ldr	r3, [pc, #32]	; (8008b7c <I2C_TransferConfig+0x60>)
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	43db      	mvns	r3, r3
 8008b60:	ea02 0103 	and.w	r1, r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	03ff63ff 	.word	0x03ff63ff

08008b80 <I2C_Enable_IRQ>:
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b94:	4a3b      	ldr	r2, [pc, #236]	; (8008c84 <I2C_Enable_IRQ+0x104>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d032      	beq.n	8008c00 <I2C_Enable_IRQ+0x80>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9e:	4a3a      	ldr	r2, [pc, #232]	; (8008c88 <I2C_Enable_IRQ+0x108>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d02d      	beq.n	8008c00 <I2C_Enable_IRQ+0x80>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	4a38      	ldr	r2, [pc, #224]	; (8008c8c <I2C_Enable_IRQ+0x10c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d028      	beq.n	8008c00 <I2C_Enable_IRQ+0x80>
 8008bae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da03      	bge.n	8008bbe <I2C_Enable_IRQ+0x3e>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	887b      	ldrh	r3, [r7, #2]
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <I2C_Enable_IRQ+0x50>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	887b      	ldrh	r3, [r7, #2]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <I2C_Enable_IRQ+0x62>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	887b      	ldrh	r3, [r7, #2]
 8008be4:	2b10      	cmp	r3, #16
 8008be6:	d103      	bne.n	8008bf0 <I2C_Enable_IRQ+0x70>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	887b      	ldrh	r3, [r7, #2]
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d138      	bne.n	8008c68 <I2C_Enable_IRQ+0xe8>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f043 0320 	orr.w	r3, r3, #32
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e033      	b.n	8008c68 <I2C_Enable_IRQ+0xe8>
 8008c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da03      	bge.n	8008c10 <I2C_Enable_IRQ+0x90>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	887b      	ldrh	r3, [r7, #2]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <I2C_Enable_IRQ+0xa2>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	887b      	ldrh	r3, [r7, #2]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <I2C_Enable_IRQ+0xb4>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	887b      	ldrh	r3, [r7, #2]
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d103      	bne.n	8008c42 <I2C_Enable_IRQ+0xc2>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	887b      	ldrh	r3, [r7, #2]
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d103      	bne.n	8008c50 <I2C_Enable_IRQ+0xd0>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c54:	4a0d      	ldr	r2, [pc, #52]	; (8008c8c <I2C_Enable_IRQ+0x10c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d006      	beq.n	8008c68 <I2C_Enable_IRQ+0xe8>
 8008c5a:	887b      	ldrh	r3, [r7, #2]
 8008c5c:	2b40      	cmp	r3, #64	; 0x40
 8008c5e:	d103      	bne.n	8008c68 <I2C_Enable_IRQ+0xe8>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6819      	ldr	r1, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	bf00      	nop
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	080077bd 	.word	0x080077bd
 8008c88:	08007bc9 	.word	0x08007bc9
 8008c8c:	08007995 	.word	0x08007995

08008c90 <I2C_Disable_IRQ>:
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	807b      	strh	r3, [r7, #2]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	887b      	ldrh	r3, [r7, #2]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00f      	beq.n	8008cca <I2C_Disable_IRQ+0x3a>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008cbe:	2b28      	cmp	r3, #40	; 0x28
 8008cc0:	d003      	beq.n	8008cca <I2C_Disable_IRQ+0x3a>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	887b      	ldrh	r3, [r7, #2]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00f      	beq.n	8008cf4 <I2C_Disable_IRQ+0x64>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ce8:	2b28      	cmp	r3, #40	; 0x28
 8008cea:	d003      	beq.n	8008cf4 <I2C_Disable_IRQ+0x64>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da03      	bge.n	8008d04 <I2C_Disable_IRQ+0x74>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	887b      	ldrh	r3, [r7, #2]
 8008d06:	2b10      	cmp	r3, #16
 8008d08:	d103      	bne.n	8008d12 <I2C_Disable_IRQ+0x82>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	887b      	ldrh	r3, [r7, #2]
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	d103      	bne.n	8008d20 <I2C_Disable_IRQ+0x90>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f043 0320 	orr.w	r3, r3, #32
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	887b      	ldrh	r3, [r7, #2]
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d103      	bne.n	8008d2e <I2C_Disable_IRQ+0x9e>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2c:	60fb      	str	r3, [r7, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	43da      	mvns	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	400a      	ands	r2, r1
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_I2CEx_ConfigAnalogFilter>:
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	d138      	bne.n	8008dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e032      	b.n	8008dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2224      	movs	r2, #36	; 0x24
 8008d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0201 	bic.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6819      	ldr	r1, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f042 0201 	orr.w	r2, r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e000      	b.n	8008dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_I2CEx_ConfigDigitalFilter>:
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d139      	bne.n	8008e6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e02:	2302      	movs	r3, #2
 8008e04:	e033      	b.n	8008e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2224      	movs	r2, #36	; 0x24
 8008e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0201 	bic.w	r2, r2, #1
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e000      	b.n	8008e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <HAL_RCC_OscConfig>:
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e8c:	6018      	str	r0, [r3, #0]
 8008e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d102      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x26>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f001 b823 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8008ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 817d 	beq.w	80091b2 <HAL_RCC_OscConfig+0x336>
 8008eb8:	4bbc      	ldr	r3, [pc, #752]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f003 030c 	and.w	r3, r3, #12
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	d00c      	beq.n	8008ede <HAL_RCC_OscConfig+0x62>
 8008ec4:	4bb9      	ldr	r3, [pc, #740]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f003 030c 	and.w	r3, r3, #12
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d15c      	bne.n	8008f8a <HAL_RCC_OscConfig+0x10e>
 8008ed0:	4bb6      	ldr	r3, [pc, #728]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008edc:	d155      	bne.n	8008f8a <HAL_RCC_OscConfig+0x10e>
 8008ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ee2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8008ee6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008eea:	fa93 f3a3 	rbit	r3, r3
 8008eee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8008ef2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008ef6:	fab3 f383 	clz	r3, r3
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	f043 0301 	orr.w	r3, r3, #1
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d102      	bne.n	8008f10 <HAL_RCC_OscConfig+0x94>
 8008f0a:	4ba8      	ldr	r3, [pc, #672]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	e015      	b.n	8008f3c <HAL_RCC_OscConfig+0xc0>
 8008f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008f18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008f1c:	fa93 f3a3 	rbit	r3, r3
 8008f20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008f2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008f30:	fa93 f3a3 	rbit	r3, r3
 8008f34:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008f38:	4b9c      	ldr	r3, [pc, #624]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008f44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008f48:	fa92 f2a2 	rbit	r2, r2
 8008f4c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8008f50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008f54:	fab2 f282 	clz	r2, r2
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	f042 0220 	orr.w	r2, r2, #32
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	f002 021f 	and.w	r2, r2, #31
 8008f64:	2101      	movs	r1, #1
 8008f66:	fa01 f202 	lsl.w	r2, r1, r2
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 811f 	beq.w	80091b0 <HAL_RCC_OscConfig+0x334>
 8008f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f040 8116 	bne.w	80091b0 <HAL_RCC_OscConfig+0x334>
 8008f84:	2301      	movs	r3, #1
 8008f86:	f000 bfaf 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8008f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9a:	d106      	bne.n	8008faa <HAL_RCC_OscConfig+0x12e>
 8008f9c:	4b83      	ldr	r3, [pc, #524]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a82      	ldr	r2, [pc, #520]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	e036      	b.n	8009018 <HAL_RCC_OscConfig+0x19c>
 8008faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10c      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x158>
 8008fba:	4b7c      	ldr	r3, [pc, #496]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a7b      	ldr	r2, [pc, #492]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	4b79      	ldr	r3, [pc, #484]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a78      	ldr	r2, [pc, #480]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	e021      	b.n	8009018 <HAL_RCC_OscConfig+0x19c>
 8008fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fe4:	d10c      	bne.n	8009000 <HAL_RCC_OscConfig+0x184>
 8008fe6:	4b71      	ldr	r3, [pc, #452]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a70      	ldr	r2, [pc, #448]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	4b6e      	ldr	r3, [pc, #440]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a6d      	ldr	r2, [pc, #436]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8008ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	e00b      	b.n	8009018 <HAL_RCC_OscConfig+0x19c>
 8009000:	4b6a      	ldr	r3, [pc, #424]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a69      	ldr	r2, [pc, #420]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8009006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	4b67      	ldr	r3, [pc, #412]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a66      	ldr	r2, [pc, #408]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8009012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	4b64      	ldr	r3, [pc, #400]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	f023 020f 	bic.w	r2, r3, #15
 8009020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	495f      	ldr	r1, [pc, #380]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 800902e:	4313      	orrs	r3, r2
 8009030:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d059      	beq.n	80090f6 <HAL_RCC_OscConfig+0x27a>
 8009042:	f7fc ff11 	bl	8005e68 <HAL_GetTick>
 8009046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800904a:	e00a      	b.n	8009062 <HAL_RCC_OscConfig+0x1e6>
 800904c:	f7fc ff0c 	bl	8005e68 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b64      	cmp	r3, #100	; 0x64
 800905a:	d902      	bls.n	8009062 <HAL_RCC_OscConfig+0x1e6>
 800905c:	2303      	movs	r3, #3
 800905e:	f000 bf43 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009066:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800906a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800906e:	fa93 f3a3 	rbit	r3, r3
 8009072:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8009076:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800907a:	fab3 f383 	clz	r3, r3
 800907e:	b2db      	uxtb	r3, r3
 8009080:	095b      	lsrs	r3, r3, #5
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f043 0301 	orr.w	r3, r3, #1
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b01      	cmp	r3, #1
 800908c:	d102      	bne.n	8009094 <HAL_RCC_OscConfig+0x218>
 800908e:	4b47      	ldr	r3, [pc, #284]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	e015      	b.n	80090c0 <HAL_RCC_OscConfig+0x244>
 8009094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009098:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800909c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80090a0:	fa93 f3a3 	rbit	r3, r3
 80090a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80090a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80090b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80090b4:	fa93 f3a3 	rbit	r3, r3
 80090b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80090bc:	4b3b      	ldr	r3, [pc, #236]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80090c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80090c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80090cc:	fa92 f2a2 	rbit	r2, r2
 80090d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80090d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80090d8:	fab2 f282 	clz	r2, r2
 80090dc:	b2d2      	uxtb	r2, r2
 80090de:	f042 0220 	orr.w	r2, r2, #32
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	f002 021f 	and.w	r2, r2, #31
 80090e8:	2101      	movs	r1, #1
 80090ea:	fa01 f202 	lsl.w	r2, r1, r2
 80090ee:	4013      	ands	r3, r2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0ab      	beq.n	800904c <HAL_RCC_OscConfig+0x1d0>
 80090f4:	e05d      	b.n	80091b2 <HAL_RCC_OscConfig+0x336>
 80090f6:	f7fc feb7 	bl	8005e68 <HAL_GetTick>
 80090fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80090fe:	e00a      	b.n	8009116 <HAL_RCC_OscConfig+0x29a>
 8009100:	f7fc feb2 	bl	8005e68 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b64      	cmp	r3, #100	; 0x64
 800910e:	d902      	bls.n	8009116 <HAL_RCC_OscConfig+0x29a>
 8009110:	2303      	movs	r3, #3
 8009112:	f000 bee9 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800911a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800911e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8009122:	fa93 f3a3 	rbit	r3, r3
 8009126:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800912a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800912e:	fab3 f383 	clz	r3, r3
 8009132:	b2db      	uxtb	r3, r3
 8009134:	095b      	lsrs	r3, r3, #5
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b01      	cmp	r3, #1
 8009140:	d102      	bne.n	8009148 <HAL_RCC_OscConfig+0x2cc>
 8009142:	4b1a      	ldr	r3, [pc, #104]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	e015      	b.n	8009174 <HAL_RCC_OscConfig+0x2f8>
 8009148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800914c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8009150:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009154:	fa93 f3a3 	rbit	r3, r3
 8009158:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800915c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009160:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009164:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009168:	fa93 f3a3 	rbit	r3, r3
 800916c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009170:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <HAL_RCC_OscConfig+0x330>)
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009178:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800917c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009180:	fa92 f2a2 	rbit	r2, r2
 8009184:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8009188:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800918c:	fab2 f282 	clz	r2, r2
 8009190:	b2d2      	uxtb	r2, r2
 8009192:	f042 0220 	orr.w	r2, r2, #32
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	f002 021f 	and.w	r2, r2, #31
 800919c:	2101      	movs	r1, #1
 800919e:	fa01 f202 	lsl.w	r2, r1, r2
 80091a2:	4013      	ands	r3, r2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1ab      	bne.n	8009100 <HAL_RCC_OscConfig+0x284>
 80091a8:	e003      	b.n	80091b2 <HAL_RCC_OscConfig+0x336>
 80091aa:	bf00      	nop
 80091ac:	40021000 	.word	0x40021000
 80091b0:	bf00      	nop
 80091b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80091b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 817d 	beq.w	80094c2 <HAL_RCC_OscConfig+0x646>
 80091c8:	4ba6      	ldr	r3, [pc, #664]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f003 030c 	and.w	r3, r3, #12
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <HAL_RCC_OscConfig+0x370>
 80091d4:	4ba3      	ldr	r3, [pc, #652]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f003 030c 	and.w	r3, r3, #12
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d172      	bne.n	80092c6 <HAL_RCC_OscConfig+0x44a>
 80091e0:	4ba0      	ldr	r3, [pc, #640]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d16c      	bne.n	80092c6 <HAL_RCC_OscConfig+0x44a>
 80091ec:	2302      	movs	r3, #2
 80091ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80091f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091f6:	fa93 f3a3 	rbit	r3, r3
 80091fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80091fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009202:	fab3 f383 	clz	r3, r3
 8009206:	b2db      	uxtb	r3, r3
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f043 0301 	orr.w	r3, r3, #1
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b01      	cmp	r3, #1
 8009214:	d102      	bne.n	800921c <HAL_RCC_OscConfig+0x3a0>
 8009216:	4b93      	ldr	r3, [pc, #588]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	e013      	b.n	8009244 <HAL_RCC_OscConfig+0x3c8>
 800921c:	2302      	movs	r3, #2
 800921e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8009222:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8009226:	fa93 f3a3 	rbit	r3, r3
 800922a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800922e:	2302      	movs	r3, #2
 8009230:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009234:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009238:	fa93 f3a3 	rbit	r3, r3
 800923c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009240:	4b88      	ldr	r3, [pc, #544]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	2202      	movs	r2, #2
 8009246:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800924a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800924e:	fa92 f2a2 	rbit	r2, r2
 8009252:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8009256:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800925a:	fab2 f282 	clz	r2, r2
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	f042 0220 	orr.w	r2, r2, #32
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	f002 021f 	and.w	r2, r2, #31
 800926a:	2101      	movs	r1, #1
 800926c:	fa01 f202 	lsl.w	r2, r1, r2
 8009270:	4013      	ands	r3, r2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <HAL_RCC_OscConfig+0x410>
 8009276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800927a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d002      	beq.n	800928c <HAL_RCC_OscConfig+0x410>
 8009286:	2301      	movs	r3, #1
 8009288:	f000 be2e 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 800928c:	4b75      	ldr	r3, [pc, #468]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	21f8      	movs	r1, #248	; 0xf8
 80092a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 80092a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80092aa:	fa91 f1a1 	rbit	r1, r1
 80092ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 80092b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80092b6:	fab1 f181 	clz	r1, r1
 80092ba:	b2c9      	uxtb	r1, r1
 80092bc:	408b      	lsls	r3, r1
 80092be:	4969      	ldr	r1, [pc, #420]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	600b      	str	r3, [r1, #0]
 80092c4:	e0fd      	b.n	80094c2 <HAL_RCC_OscConfig+0x646>
 80092c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 8088 	beq.w	80093e8 <HAL_RCC_OscConfig+0x56c>
 80092d8:	2301      	movs	r3, #1
 80092da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80092de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80092e2:	fa93 f3a3 	rbit	r3, r3
 80092e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80092ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80092ee:	fab3 f383 	clz	r3, r3
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80092f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	461a      	mov	r2, r3
 8009300:	2301      	movs	r3, #1
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	f7fc fdb0 	bl	8005e68 <HAL_GetTick>
 8009308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800930c:	e00a      	b.n	8009324 <HAL_RCC_OscConfig+0x4a8>
 800930e:	f7fc fdab 	bl	8005e68 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b02      	cmp	r3, #2
 800931c:	d902      	bls.n	8009324 <HAL_RCC_OscConfig+0x4a8>
 800931e:	2303      	movs	r3, #3
 8009320:	f000 bde2 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009324:	2302      	movs	r3, #2
 8009326:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800932a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800932e:	fa93 f3a3 	rbit	r3, r3
 8009332:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8009336:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800933a:	fab3 f383 	clz	r3, r3
 800933e:	b2db      	uxtb	r3, r3
 8009340:	095b      	lsrs	r3, r3, #5
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f043 0301 	orr.w	r3, r3, #1
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b01      	cmp	r3, #1
 800934c:	d102      	bne.n	8009354 <HAL_RCC_OscConfig+0x4d8>
 800934e:	4b45      	ldr	r3, [pc, #276]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	e013      	b.n	800937c <HAL_RCC_OscConfig+0x500>
 8009354:	2302      	movs	r3, #2
 8009356:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800935a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800935e:	fa93 f3a3 	rbit	r3, r3
 8009362:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009366:	2302      	movs	r3, #2
 8009368:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800936c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009370:	fa93 f3a3 	rbit	r3, r3
 8009374:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009378:	4b3a      	ldr	r3, [pc, #232]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	2202      	movs	r2, #2
 800937e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8009382:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009386:	fa92 f2a2 	rbit	r2, r2
 800938a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800938e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009392:	fab2 f282 	clz	r2, r2
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	f042 0220 	orr.w	r2, r2, #32
 800939c:	b2d2      	uxtb	r2, r2
 800939e:	f002 021f 	and.w	r2, r2, #31
 80093a2:	2101      	movs	r1, #1
 80093a4:	fa01 f202 	lsl.w	r2, r1, r2
 80093a8:	4013      	ands	r3, r2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0af      	beq.n	800930e <HAL_RCC_OscConfig+0x492>
 80093ae:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	21f8      	movs	r1, #248	; 0xf8
 80093c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80093c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80093cc:	fa91 f1a1 	rbit	r1, r1
 80093d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 80093d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80093d8:	fab1 f181 	clz	r1, r1
 80093dc:	b2c9      	uxtb	r1, r1
 80093de:	408b      	lsls	r3, r1
 80093e0:	4920      	ldr	r1, [pc, #128]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	600b      	str	r3, [r1, #0]
 80093e6:	e06c      	b.n	80094c2 <HAL_RCC_OscConfig+0x646>
 80093e8:	2301      	movs	r3, #1
 80093ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80093ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80093f2:	fa93 f3a3 	rbit	r3, r3
 80093f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80093fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093fe:	fab3 f383 	clz	r3, r3
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	461a      	mov	r2, r3
 8009410:	2300      	movs	r3, #0
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	f7fc fd28 	bl	8005e68 <HAL_GetTick>
 8009418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800941c:	e00a      	b.n	8009434 <HAL_RCC_OscConfig+0x5b8>
 800941e:	f7fc fd23 	bl	8005e68 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d902      	bls.n	8009434 <HAL_RCC_OscConfig+0x5b8>
 800942e:	2303      	movs	r3, #3
 8009430:	f000 bd5a 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009434:	2302      	movs	r3, #2
 8009436:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800943a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800943e:	fa93 f3a3 	rbit	r3, r3
 8009442:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944a:	fab3 f383 	clz	r3, r3
 800944e:	b2db      	uxtb	r3, r3
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f043 0301 	orr.w	r3, r3, #1
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b01      	cmp	r3, #1
 800945c:	d104      	bne.n	8009468 <HAL_RCC_OscConfig+0x5ec>
 800945e:	4b01      	ldr	r3, [pc, #4]	; (8009464 <HAL_RCC_OscConfig+0x5e8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	e015      	b.n	8009490 <HAL_RCC_OscConfig+0x614>
 8009464:	40021000 	.word	0x40021000
 8009468:	2302      	movs	r3, #2
 800946a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800946e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009472:	fa93 f3a3 	rbit	r3, r3
 8009476:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800947a:	2302      	movs	r3, #2
 800947c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009480:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009484:	fa93 f3a3 	rbit	r3, r3
 8009488:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800948c:	4bc8      	ldr	r3, [pc, #800]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2202      	movs	r2, #2
 8009492:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8009496:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800949a:	fa92 f2a2 	rbit	r2, r2
 800949e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80094a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80094a6:	fab2 f282 	clz	r2, r2
 80094aa:	b2d2      	uxtb	r2, r2
 80094ac:	f042 0220 	orr.w	r2, r2, #32
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	f002 021f 	and.w	r2, r2, #31
 80094b6:	2101      	movs	r1, #1
 80094b8:	fa01 f202 	lsl.w	r2, r1, r2
 80094bc:	4013      	ands	r3, r2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1ad      	bne.n	800941e <HAL_RCC_OscConfig+0x5a2>
 80094c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 8110 	beq.w	80096f8 <HAL_RCC_OscConfig+0x87c>
 80094d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d079      	beq.n	80095dc <HAL_RCC_OscConfig+0x760>
 80094e8:	2301      	movs	r3, #1
 80094ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80094ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80094f2:	fa93 f3a3 	rbit	r3, r3
 80094f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094fe:	fab3 f383 	clz	r3, r3
 8009502:	b2db      	uxtb	r3, r3
 8009504:	461a      	mov	r2, r3
 8009506:	4bab      	ldr	r3, [pc, #684]	; (80097b4 <HAL_RCC_OscConfig+0x938>)
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	461a      	mov	r2, r3
 800950e:	2301      	movs	r3, #1
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	f7fc fca9 	bl	8005e68 <HAL_GetTick>
 8009516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800951a:	e00a      	b.n	8009532 <HAL_RCC_OscConfig+0x6b6>
 800951c:	f7fc fca4 	bl	8005e68 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d902      	bls.n	8009532 <HAL_RCC_OscConfig+0x6b6>
 800952c:	2303      	movs	r3, #3
 800952e:	f000 bcdb 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009532:	2302      	movs	r3, #2
 8009534:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800953c:	fa93 f3a3 	rbit	r3, r3
 8009540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009548:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800954c:	2202      	movs	r2, #2
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009554:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	fa93 f2a3 	rbit	r2, r3
 800955e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800956c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009570:	2202      	movs	r2, #2
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	fa93 f2a3 	rbit	r2, r3
 8009582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	4b88      	ldr	r3, [pc, #544]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 800958e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009594:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009598:	2102      	movs	r1, #2
 800959a:	6019      	str	r1, [r3, #0]
 800959c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	fa93 f1a3 	rbit	r1, r3
 80095aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80095b2:	6019      	str	r1, [r3, #0]
 80095b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	fab3 f383 	clz	r3, r3
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	2101      	movs	r1, #1
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	4013      	ands	r3, r2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0a0      	beq.n	800951c <HAL_RCC_OscConfig+0x6a0>
 80095da:	e08d      	b.n	80096f8 <HAL_RCC_OscConfig+0x87c>
 80095dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80095e4:	2201      	movs	r2, #1
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	fa93 f2a3 	rbit	r2, r3
 80095f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009604:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	fab3 f383 	clz	r3, r3
 800960e:	b2db      	uxtb	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	4b68      	ldr	r3, [pc, #416]	; (80097b4 <HAL_RCC_OscConfig+0x938>)
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	461a      	mov	r2, r3
 800961a:	2300      	movs	r3, #0
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	f7fc fc23 	bl	8005e68 <HAL_GetTick>
 8009622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009626:	e00a      	b.n	800963e <HAL_RCC_OscConfig+0x7c2>
 8009628:	f7fc fc1e 	bl	8005e68 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b02      	cmp	r3, #2
 8009636:	d902      	bls.n	800963e <HAL_RCC_OscConfig+0x7c2>
 8009638:	2303      	movs	r3, #3
 800963a:	f000 bc55 	b.w	8009ee8 <HAL_RCC_OscConfig+0x106c>
 800963e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009642:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009646:	2202      	movs	r2, #2
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800964e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	fa93 f2a3 	rbit	r2, r3
 8009658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800965c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009666:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800966a:	2202      	movs	r2, #2
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009672:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	fa93 f2a3 	rbit	r2, r3
 800967c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800968a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800968e:	2202      	movs	r2, #2
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	fa93 f2a3 	rbit	r2, r3
 80096a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	4b41      	ldr	r3, [pc, #260]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 80096ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80096b6:	2102      	movs	r1, #2
 80096b8:	6019      	str	r1, [r3, #0]
 80096ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	fa93 f1a3 	rbit	r1, r3
 80096c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096d0:	6019      	str	r1, [r3, #0]
 80096d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	fab3 f383 	clz	r3, r3
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 031f 	and.w	r3, r3, #31
 80096ec:	2101      	movs	r1, #1
 80096ee:	fa01 f303 	lsl.w	r3, r1, r3
 80096f2:	4013      	ands	r3, r2
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d197      	bne.n	8009628 <HAL_RCC_OscConfig+0x7ac>
 80096f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 81a1 	beq.w	8009a50 <HAL_RCC_OscConfig+0xbd4>
 800970e:	2300      	movs	r3, #0
 8009710:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8009714:	4b26      	ldr	r3, [pc, #152]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d116      	bne.n	800974e <HAL_RCC_OscConfig+0x8d2>
 8009720:	4b23      	ldr	r3, [pc, #140]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	4a22      	ldr	r2, [pc, #136]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 8009726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800972a:	61d3      	str	r3, [r2, #28]
 800972c:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009738:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009742:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2301      	movs	r3, #1
 800974a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 800974e:	4b1a      	ldr	r3, [pc, #104]	; (80097b8 <HAL_RCC_OscConfig+0x93c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009756:	2b00      	cmp	r3, #0
 8009758:	d11a      	bne.n	8009790 <HAL_RCC_OscConfig+0x914>
 800975a:	4b17      	ldr	r3, [pc, #92]	; (80097b8 <HAL_RCC_OscConfig+0x93c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a16      	ldr	r2, [pc, #88]	; (80097b8 <HAL_RCC_OscConfig+0x93c>)
 8009760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	f7fc fb7f 	bl	8005e68 <HAL_GetTick>
 800976a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800976e:	e009      	b.n	8009784 <HAL_RCC_OscConfig+0x908>
 8009770:	f7fc fb7a 	bl	8005e68 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	2b64      	cmp	r3, #100	; 0x64
 800977e:	d901      	bls.n	8009784 <HAL_RCC_OscConfig+0x908>
 8009780:	2303      	movs	r3, #3
 8009782:	e3b1      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009784:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <HAL_RCC_OscConfig+0x93c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0ef      	beq.n	8009770 <HAL_RCC_OscConfig+0x8f4>
 8009790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d10d      	bne.n	80097bc <HAL_RCC_OscConfig+0x940>
 80097a0:	4b03      	ldr	r3, [pc, #12]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	4a02      	ldr	r2, [pc, #8]	; (80097b0 <HAL_RCC_OscConfig+0x934>)
 80097a6:	f043 0301 	orr.w	r3, r3, #1
 80097aa:	6213      	str	r3, [r2, #32]
 80097ac:	e03c      	b.n	8009828 <HAL_RCC_OscConfig+0x9ac>
 80097ae:	bf00      	nop
 80097b0:	40021000 	.word	0x40021000
 80097b4:	10908120 	.word	0x10908120
 80097b8:	40007000 	.word	0x40007000
 80097bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10c      	bne.n	80097e6 <HAL_RCC_OscConfig+0x96a>
 80097cc:	4bc1      	ldr	r3, [pc, #772]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	4ac0      	ldr	r2, [pc, #768]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80097d2:	f023 0301 	bic.w	r3, r3, #1
 80097d6:	6213      	str	r3, [r2, #32]
 80097d8:	4bbe      	ldr	r3, [pc, #760]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	4abd      	ldr	r2, [pc, #756]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80097de:	f023 0304 	bic.w	r3, r3, #4
 80097e2:	6213      	str	r3, [r2, #32]
 80097e4:	e020      	b.n	8009828 <HAL_RCC_OscConfig+0x9ac>
 80097e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d10c      	bne.n	8009810 <HAL_RCC_OscConfig+0x994>
 80097f6:	4bb7      	ldr	r3, [pc, #732]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	4ab6      	ldr	r2, [pc, #728]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80097fc:	f043 0304 	orr.w	r3, r3, #4
 8009800:	6213      	str	r3, [r2, #32]
 8009802:	4bb4      	ldr	r3, [pc, #720]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	4ab3      	ldr	r2, [pc, #716]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009808:	f043 0301 	orr.w	r3, r3, #1
 800980c:	6213      	str	r3, [r2, #32]
 800980e:	e00b      	b.n	8009828 <HAL_RCC_OscConfig+0x9ac>
 8009810:	4bb0      	ldr	r3, [pc, #704]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	4aaf      	ldr	r2, [pc, #700]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009816:	f023 0301 	bic.w	r3, r3, #1
 800981a:	6213      	str	r3, [r2, #32]
 800981c:	4bad      	ldr	r3, [pc, #692]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	4aac      	ldr	r2, [pc, #688]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009822:	f023 0304 	bic.w	r3, r3, #4
 8009826:	6213      	str	r3, [r2, #32]
 8009828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800982c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 8081 	beq.w	800993c <HAL_RCC_OscConfig+0xac0>
 800983a:	f7fc fb15 	bl	8005e68 <HAL_GetTick>
 800983e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009842:	e00b      	b.n	800985c <HAL_RCC_OscConfig+0x9e0>
 8009844:	f7fc fb10 	bl	8005e68 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	f241 3288 	movw	r2, #5000	; 0x1388
 8009854:	4293      	cmp	r3, r2
 8009856:	d901      	bls.n	800985c <HAL_RCC_OscConfig+0x9e0>
 8009858:	2303      	movs	r3, #3
 800985a:	e345      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 800985c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009860:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009864:	2202      	movs	r2, #2
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800986c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	fa93 f2a3 	rbit	r2, r3
 8009876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800987a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009884:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009888:	2202      	movs	r2, #2
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009890:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	fa93 f2a3 	rbit	r2, r3
 800989a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800989e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	fab3 f383 	clz	r3, r3
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	095b      	lsrs	r3, r3, #5
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f043 0302 	orr.w	r3, r3, #2
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d102      	bne.n	80098c8 <HAL_RCC_OscConfig+0xa4c>
 80098c2:	4b84      	ldr	r3, [pc, #528]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	e013      	b.n	80098f0 <HAL_RCC_OscConfig+0xa74>
 80098c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80098d0:	2202      	movs	r2, #2
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	fa93 f2a3 	rbit	r2, r3
 80098e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	4b79      	ldr	r3, [pc, #484]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80098f8:	2102      	movs	r1, #2
 80098fa:	6011      	str	r1, [r2, #0]
 80098fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009900:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	fa92 f1a2 	rbit	r1, r2
 800990a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800990e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009912:	6011      	str	r1, [r2, #0]
 8009914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009918:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800991c:	6812      	ldr	r2, [r2, #0]
 800991e:	fab2 f282 	clz	r2, r2
 8009922:	b2d2      	uxtb	r2, r2
 8009924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009928:	b2d2      	uxtb	r2, r2
 800992a:	f002 021f 	and.w	r2, r2, #31
 800992e:	2101      	movs	r1, #1
 8009930:	fa01 f202 	lsl.w	r2, r1, r2
 8009934:	4013      	ands	r3, r2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d084      	beq.n	8009844 <HAL_RCC_OscConfig+0x9c8>
 800993a:	e07f      	b.n	8009a3c <HAL_RCC_OscConfig+0xbc0>
 800993c:	f7fc fa94 	bl	8005e68 <HAL_GetTick>
 8009940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009944:	e00b      	b.n	800995e <HAL_RCC_OscConfig+0xae2>
 8009946:	f7fc fa8f 	bl	8005e68 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	f241 3288 	movw	r2, #5000	; 0x1388
 8009956:	4293      	cmp	r3, r2
 8009958:	d901      	bls.n	800995e <HAL_RCC_OscConfig+0xae2>
 800995a:	2303      	movs	r3, #3
 800995c:	e2c4      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 800995e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009962:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009966:	2202      	movs	r2, #2
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800996e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	fa93 f2a3 	rbit	r2, r3
 8009978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800997c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009986:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800998a:	2202      	movs	r2, #2
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009992:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	fa93 f2a3 	rbit	r2, r3
 800999c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	fab3 f383 	clz	r3, r3
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	095b      	lsrs	r3, r3, #5
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	f043 0302 	orr.w	r3, r3, #2
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d102      	bne.n	80099ca <HAL_RCC_OscConfig+0xb4e>
 80099c4:	4b43      	ldr	r3, [pc, #268]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	e013      	b.n	80099f2 <HAL_RCC_OscConfig+0xb76>
 80099ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80099d2:	2202      	movs	r2, #2
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	fa93 f2a3 	rbit	r2, r3
 80099e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	4b39      	ldr	r3, [pc, #228]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 80099f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80099fa:	2102      	movs	r1, #2
 80099fc:	6011      	str	r1, [r2, #0]
 80099fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009a06:	6812      	ldr	r2, [r2, #0]
 8009a08:	fa92 f1a2 	rbit	r1, r2
 8009a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009a14:	6011      	str	r1, [r2, #0]
 8009a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a1a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009a1e:	6812      	ldr	r2, [r2, #0]
 8009a20:	fab2 f282 	clz	r2, r2
 8009a24:	b2d2      	uxtb	r2, r2
 8009a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a2a:	b2d2      	uxtb	r2, r2
 8009a2c:	f002 021f 	and.w	r2, r2, #31
 8009a30:	2101      	movs	r1, #1
 8009a32:	fa01 f202 	lsl.w	r2, r1, r2
 8009a36:	4013      	ands	r3, r2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d184      	bne.n	8009946 <HAL_RCC_OscConfig+0xaca>
 8009a3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d105      	bne.n	8009a50 <HAL_RCC_OscConfig+0xbd4>
 8009a44:	4b23      	ldr	r3, [pc, #140]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	4a22      	ldr	r2, [pc, #136]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a4e:	61d3      	str	r3, [r2, #28]
 8009a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 8242 	beq.w	8009ee6 <HAL_RCC_OscConfig+0x106a>
 8009a62:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <HAL_RCC_OscConfig+0xc58>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f003 030c 	and.w	r3, r3, #12
 8009a6a:	2b08      	cmp	r3, #8
 8009a6c:	f000 8213 	beq.w	8009e96 <HAL_RCC_OscConfig+0x101a>
 8009a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	f040 8162 	bne.w	8009d46 <HAL_RCC_OscConfig+0xeca>
 8009a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	fa93 f2a3 	rbit	r2, r3
 8009a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aa2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	fab3 f383 	clz	r3, r3
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	f7fc f9ce 	bl	8005e68 <HAL_GetTick>
 8009acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009ad0:	e00c      	b.n	8009aec <HAL_RCC_OscConfig+0xc70>
 8009ad2:	bf00      	nop
 8009ad4:	40021000 	.word	0x40021000
 8009ad8:	f7fc f9c6 	bl	8005e68 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d901      	bls.n	8009aec <HAL_RCC_OscConfig+0xc70>
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e1fd      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009af0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009afe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	fa93 f2a3 	rbit	r2, r3
 8009b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	fab3 f383 	clz	r3, r3
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	095b      	lsrs	r3, r3, #5
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d102      	bne.n	8009b36 <HAL_RCC_OscConfig+0xcba>
 8009b30:	4bb0      	ldr	r3, [pc, #704]	; (8009df4 <HAL_RCC_OscConfig+0xf78>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	e027      	b.n	8009b86 <HAL_RCC_OscConfig+0xd0a>
 8009b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	fa93 f2a3 	rbit	r2, r3
 8009b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	fa93 f2a3 	rbit	r2, r3
 8009b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	4b9c      	ldr	r3, [pc, #624]	; (8009df4 <HAL_RCC_OscConfig+0xf78>)
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b8a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009b8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009b92:	6011      	str	r1, [r2, #0]
 8009b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b98:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009b9c:	6812      	ldr	r2, [r2, #0]
 8009b9e:	fa92 f1a2 	rbit	r1, r2
 8009ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ba6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009baa:	6011      	str	r1, [r2, #0]
 8009bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bb0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	fab2 f282 	clz	r2, r2
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	f042 0220 	orr.w	r2, r2, #32
 8009bc0:	b2d2      	uxtb	r2, r2
 8009bc2:	f002 021f 	and.w	r2, r2, #31
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8009bcc:	4013      	ands	r3, r2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d182      	bne.n	8009ad8 <HAL_RCC_OscConfig+0xc5c>
 8009bd2:	4b88      	ldr	r3, [pc, #544]	; (8009df4 <HAL_RCC_OscConfig+0xf78>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	430b      	orrs	r3, r1
 8009bf4:	497f      	ldr	r1, [pc, #508]	; (8009df4 <HAL_RCC_OscConfig+0xf78>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	604b      	str	r3, [r1, #4]
 8009bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bfe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009c02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	fa93 f2a3 	rbit	r2, r3
 8009c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	fab3 f383 	clz	r3, r3
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009c34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	f7fc f912 	bl	8005e68 <HAL_GetTick>
 8009c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009c48:	e009      	b.n	8009c5e <HAL_RCC_OscConfig+0xde2>
 8009c4a:	f7fc f90d 	bl	8005e68 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d901      	bls.n	8009c5e <HAL_RCC_OscConfig+0xde2>
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e144      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	fa93 f2a3 	rbit	r2, r3
 8009c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	fab3 f383 	clz	r3, r3
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	095b      	lsrs	r3, r3, #5
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f043 0301 	orr.w	r3, r3, #1
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d102      	bne.n	8009ca8 <HAL_RCC_OscConfig+0xe2c>
 8009ca2:	4b54      	ldr	r3, [pc, #336]	; (8009df4 <HAL_RCC_OscConfig+0xf78>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	e027      	b.n	8009cf8 <HAL_RCC_OscConfig+0xe7c>
 8009ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	fa93 f2a3 	rbit	r2, r3
 8009cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cd2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	fa93 f2a3 	rbit	r2, r3
 8009cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <HAL_RCC_OscConfig+0xf78>)
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cfc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009d00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009d04:	6011      	str	r1, [r2, #0]
 8009d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009d0e:	6812      	ldr	r2, [r2, #0]
 8009d10:	fa92 f1a2 	rbit	r1, r2
 8009d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009d1c:	6011      	str	r1, [r2, #0]
 8009d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009d26:	6812      	ldr	r2, [r2, #0]
 8009d28:	fab2 f282 	clz	r2, r2
 8009d2c:	b2d2      	uxtb	r2, r2
 8009d2e:	f042 0220 	orr.w	r2, r2, #32
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	f002 021f 	and.w	r2, r2, #31
 8009d38:	2101      	movs	r1, #1
 8009d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d082      	beq.n	8009c4a <HAL_RCC_OscConfig+0xdce>
 8009d44:	e0cf      	b.n	8009ee6 <HAL_RCC_OscConfig+0x106a>
 8009d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	fa93 f2a3 	rbit	r2, r3
 8009d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	fab3 f383 	clz	r3, r3
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	461a      	mov	r2, r3
 8009d88:	2300      	movs	r3, #0
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	f7fc f86c 	bl	8005e68 <HAL_GetTick>
 8009d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8009d94:	e009      	b.n	8009daa <HAL_RCC_OscConfig+0xf2e>
 8009d96:	f7fc f867 	bl	8005e68 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d901      	bls.n	8009daa <HAL_RCC_OscConfig+0xf2e>
 8009da6:	2303      	movs	r3, #3
 8009da8:	e09e      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	fa93 f2a3 	rbit	r2, r3
 8009dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	fab3 f383 	clz	r3, r3
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	095b      	lsrs	r3, r3, #5
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f043 0301 	orr.w	r3, r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d104      	bne.n	8009df8 <HAL_RCC_OscConfig+0xf7c>
 8009dee:	4b01      	ldr	r3, [pc, #4]	; (8009df4 <HAL_RCC_OscConfig+0xf78>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	e029      	b.n	8009e48 <HAL_RCC_OscConfig+0xfcc>
 8009df4:	40021000 	.word	0x40021000
 8009df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dfc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	fa93 f2a3 	rbit	r2, r3
 8009e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	fa93 f2a3 	rbit	r2, r3
 8009e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	4b2b      	ldr	r3, [pc, #172]	; (8009ef4 <HAL_RCC_OscConfig+0x1078>)
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009e54:	6011      	str	r1, [r2, #0]
 8009e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	fa92 f1a2 	rbit	r1, r2
 8009e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e6c:	6011      	str	r1, [r2, #0]
 8009e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e76:	6812      	ldr	r2, [r2, #0]
 8009e78:	fab2 f282 	clz	r2, r2
 8009e7c:	b2d2      	uxtb	r2, r2
 8009e7e:	f042 0220 	orr.w	r2, r2, #32
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	f002 021f 	and.w	r2, r2, #31
 8009e88:	2101      	movs	r1, #1
 8009e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8009e8e:	4013      	ands	r3, r2
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d180      	bne.n	8009d96 <HAL_RCC_OscConfig+0xf1a>
 8009e94:	e027      	b.n	8009ee6 <HAL_RCC_OscConfig+0x106a>
 8009e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <HAL_RCC_OscConfig+0x102e>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e01e      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009eaa:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <HAL_RCC_OscConfig+0x1078>)
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8009eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009eb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d10b      	bne.n	8009ee2 <HAL_RCC_OscConfig+0x1066>
 8009eca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d001      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x106a>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e000      	b.n	8009ee8 <HAL_RCC_OscConfig+0x106c>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	40021000 	.word	0x40021000

08009ef8 <HAL_RCC_ClockConfig>:
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b09e      	sub	sp, #120	; 0x78
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	2300      	movs	r3, #0
 8009f04:	677b      	str	r3, [r7, #116]	; 0x74
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <HAL_RCC_ClockConfig+0x18>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e162      	b.n	800a1d6 <HAL_RCC_ClockConfig+0x2de>
 8009f10:	4b90      	ldr	r3, [pc, #576]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d910      	bls.n	8009f40 <HAL_RCC_ClockConfig+0x48>
 8009f1e:	4b8d      	ldr	r3, [pc, #564]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f023 0207 	bic.w	r2, r3, #7
 8009f26:	498b      	ldr	r1, [pc, #556]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	600b      	str	r3, [r1, #0]
 8009f2e:	4b89      	ldr	r3, [pc, #548]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d001      	beq.n	8009f40 <HAL_RCC_ClockConfig+0x48>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e14a      	b.n	800a1d6 <HAL_RCC_ClockConfig+0x2de>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0302 	and.w	r3, r3, #2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d008      	beq.n	8009f5e <HAL_RCC_ClockConfig+0x66>
 8009f4c:	4b82      	ldr	r3, [pc, #520]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	497f      	ldr	r1, [pc, #508]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	604b      	str	r3, [r1, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 80dc 	beq.w	800a124 <HAL_RCC_ClockConfig+0x22c>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d13c      	bne.n	8009fee <HAL_RCC_ClockConfig+0xf6>
 8009f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f78:	673b      	str	r3, [r7, #112]	; 0x70
 8009f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f7c:	fa93 f3a3 	rbit	r3, r3
 8009f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f84:	fab3 f383 	clz	r3, r3
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	095b      	lsrs	r3, r3, #5
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	f043 0301 	orr.w	r3, r3, #1
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d102      	bne.n	8009f9e <HAL_RCC_ClockConfig+0xa6>
 8009f98:	4b6f      	ldr	r3, [pc, #444]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	e00f      	b.n	8009fbe <HAL_RCC_ClockConfig+0xc6>
 8009f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fa6:	fa93 f3a3 	rbit	r3, r3
 8009faa:	667b      	str	r3, [r7, #100]	; 0x64
 8009fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8009fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fb4:	fa93 f3a3 	rbit	r3, r3
 8009fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fba:	4b67      	ldr	r3, [pc, #412]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009fc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8009fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fc6:	fa92 f2a2 	rbit	r2, r2
 8009fca:	657a      	str	r2, [r7, #84]	; 0x54
 8009fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fce:	fab2 f282 	clz	r2, r2
 8009fd2:	b2d2      	uxtb	r2, r2
 8009fd4:	f042 0220 	orr.w	r2, r2, #32
 8009fd8:	b2d2      	uxtb	r2, r2
 8009fda:	f002 021f 	and.w	r2, r2, #31
 8009fde:	2101      	movs	r1, #1
 8009fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d17b      	bne.n	800a0e2 <HAL_RCC_ClockConfig+0x1ea>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e0f3      	b.n	800a1d6 <HAL_RCC_ClockConfig+0x2de>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d13c      	bne.n	800a070 <HAL_RCC_ClockConfig+0x178>
 8009ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8009ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ffe:	fa93 f3a3 	rbit	r3, r3
 800a002:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a006:	fab3 f383 	clz	r3, r3
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	095b      	lsrs	r3, r3, #5
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b01      	cmp	r3, #1
 800a018:	d102      	bne.n	800a020 <HAL_RCC_ClockConfig+0x128>
 800a01a:	4b4f      	ldr	r3, [pc, #316]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	e00f      	b.n	800a040 <HAL_RCC_ClockConfig+0x148>
 800a020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a024:	64bb      	str	r3, [r7, #72]	; 0x48
 800a026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a028:	fa93 f3a3 	rbit	r3, r3
 800a02c:	647b      	str	r3, [r7, #68]	; 0x44
 800a02e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a032:	643b      	str	r3, [r7, #64]	; 0x40
 800a034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a036:	fa93 f3a3 	rbit	r3, r3
 800a03a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a03c:	4b46      	ldr	r3, [pc, #280]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a044:	63ba      	str	r2, [r7, #56]	; 0x38
 800a046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a048:	fa92 f2a2 	rbit	r2, r2
 800a04c:	637a      	str	r2, [r7, #52]	; 0x34
 800a04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a050:	fab2 f282 	clz	r2, r2
 800a054:	b2d2      	uxtb	r2, r2
 800a056:	f042 0220 	orr.w	r2, r2, #32
 800a05a:	b2d2      	uxtb	r2, r2
 800a05c:	f002 021f 	and.w	r2, r2, #31
 800a060:	2101      	movs	r1, #1
 800a062:	fa01 f202 	lsl.w	r2, r1, r2
 800a066:	4013      	ands	r3, r2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d13a      	bne.n	800a0e2 <HAL_RCC_ClockConfig+0x1ea>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e0b2      	b.n	800a1d6 <HAL_RCC_ClockConfig+0x2de>
 800a070:	2302      	movs	r3, #2
 800a072:	633b      	str	r3, [r7, #48]	; 0x30
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	fa93 f3a3 	rbit	r3, r3
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	fab3 f383 	clz	r3, r3
 800a082:	b2db      	uxtb	r3, r3
 800a084:	095b      	lsrs	r3, r3, #5
 800a086:	b2db      	uxtb	r3, r3
 800a088:	f043 0301 	orr.w	r3, r3, #1
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d102      	bne.n	800a098 <HAL_RCC_ClockConfig+0x1a0>
 800a092:	4b31      	ldr	r3, [pc, #196]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	e00d      	b.n	800a0b4 <HAL_RCC_ClockConfig+0x1bc>
 800a098:	2302      	movs	r3, #2
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	fa93 f3a3 	rbit	r3, r3
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	623b      	str	r3, [r7, #32]
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	fa93 f3a3 	rbit	r3, r3
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	4b29      	ldr	r3, [pc, #164]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	61ba      	str	r2, [r7, #24]
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	fa92 f2a2 	rbit	r2, r2
 800a0be:	617a      	str	r2, [r7, #20]
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	fab2 f282 	clz	r2, r2
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	f042 0220 	orr.w	r2, r2, #32
 800a0cc:	b2d2      	uxtb	r2, r2
 800a0ce:	f002 021f 	and.w	r2, r2, #31
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	fa01 f202 	lsl.w	r2, r1, r2
 800a0d8:	4013      	ands	r3, r2
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_RCC_ClockConfig+0x1ea>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e079      	b.n	800a1d6 <HAL_RCC_ClockConfig+0x2de>
 800a0e2:	4b1d      	ldr	r3, [pc, #116]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f023 0203 	bic.w	r2, r3, #3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	491a      	ldr	r1, [pc, #104]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	604b      	str	r3, [r1, #4]
 800a0f4:	f7fb feb8 	bl	8005e68 <HAL_GetTick>
 800a0f8:	6778      	str	r0, [r7, #116]	; 0x74
 800a0fa:	e00a      	b.n	800a112 <HAL_RCC_ClockConfig+0x21a>
 800a0fc:	f7fb feb4 	bl	8005e68 <HAL_GetTick>
 800a100:	4602      	mov	r2, r0
 800a102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	f241 3288 	movw	r2, #5000	; 0x1388
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d901      	bls.n	800a112 <HAL_RCC_ClockConfig+0x21a>
 800a10e:	2303      	movs	r3, #3
 800a110:	e061      	b.n	800a1d6 <HAL_RCC_ClockConfig+0x2de>
 800a112:	4b11      	ldr	r3, [pc, #68]	; (800a158 <HAL_RCC_ClockConfig+0x260>)
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f003 020c 	and.w	r2, r3, #12
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	429a      	cmp	r2, r3
 800a122:	d1eb      	bne.n	800a0fc <HAL_RCC_ClockConfig+0x204>
 800a124:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0307 	and.w	r3, r3, #7
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d214      	bcs.n	800a15c <HAL_RCC_ClockConfig+0x264>
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f023 0207 	bic.w	r2, r3, #7
 800a13a:	4906      	ldr	r1, [pc, #24]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	4313      	orrs	r3, r2
 800a140:	600b      	str	r3, [r1, #0]
 800a142:	4b04      	ldr	r3, [pc, #16]	; (800a154 <HAL_RCC_ClockConfig+0x25c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d005      	beq.n	800a15c <HAL_RCC_ClockConfig+0x264>
 800a150:	2301      	movs	r3, #1
 800a152:	e040      	b.n	800a1d6 <HAL_RCC_ClockConfig+0x2de>
 800a154:	40022000 	.word	0x40022000
 800a158:	40021000 	.word	0x40021000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d008      	beq.n	800a17a <HAL_RCC_ClockConfig+0x282>
 800a168:	4b1d      	ldr	r3, [pc, #116]	; (800a1e0 <HAL_RCC_ClockConfig+0x2e8>)
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	491a      	ldr	r1, [pc, #104]	; (800a1e0 <HAL_RCC_ClockConfig+0x2e8>)
 800a176:	4313      	orrs	r3, r2
 800a178:	604b      	str	r3, [r1, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0308 	and.w	r3, r3, #8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d009      	beq.n	800a19a <HAL_RCC_ClockConfig+0x2a2>
 800a186:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <HAL_RCC_ClockConfig+0x2e8>)
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	00db      	lsls	r3, r3, #3
 800a194:	4912      	ldr	r1, [pc, #72]	; (800a1e0 <HAL_RCC_ClockConfig+0x2e8>)
 800a196:	4313      	orrs	r3, r2
 800a198:	604b      	str	r3, [r1, #4]
 800a19a:	f000 f829 	bl	800a1f0 <HAL_RCC_GetSysClockFreq>
 800a19e:	4601      	mov	r1, r0
 800a1a0:	4b0f      	ldr	r3, [pc, #60]	; (800a1e0 <HAL_RCC_ClockConfig+0x2e8>)
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1a8:	22f0      	movs	r2, #240	; 0xf0
 800a1aa:	613a      	str	r2, [r7, #16]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	fa92 f2a2 	rbit	r2, r2
 800a1b2:	60fa      	str	r2, [r7, #12]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	fab2 f282 	clz	r2, r2
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	40d3      	lsrs	r3, r2
 800a1be:	4a09      	ldr	r2, [pc, #36]	; (800a1e4 <HAL_RCC_ClockConfig+0x2ec>)
 800a1c0:	5cd3      	ldrb	r3, [r2, r3]
 800a1c2:	fa21 f303 	lsr.w	r3, r1, r3
 800a1c6:	4a08      	ldr	r2, [pc, #32]	; (800a1e8 <HAL_RCC_ClockConfig+0x2f0>)
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <HAL_RCC_ClockConfig+0x2f4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fb f804 	bl	80051dc <HAL_InitTick>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3778      	adds	r7, #120	; 0x78
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	40021000 	.word	0x40021000
 800a1e4:	08011a00 	.word	0x08011a00
 800a1e8:	20000040 	.word	0x20000040
 800a1ec:	200000bc 	.word	0x200000bc

0800a1f0 <HAL_RCC_GetSysClockFreq>:
 800a1f0:	b480      	push	{r7}
 800a1f2:	b08b      	sub	sp, #44	; 0x2c
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61fb      	str	r3, [r7, #28]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	2300      	movs	r3, #0
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
 800a202:	2300      	movs	r3, #0
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	2300      	movs	r3, #0
 800a208:	623b      	str	r3, [r7, #32]
 800a20a:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	61fb      	str	r3, [r7, #28]
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	f003 030c 	and.w	r3, r3, #12
 800a216:	2b04      	cmp	r3, #4
 800a218:	d002      	beq.n	800a220 <HAL_RCC_GetSysClockFreq+0x30>
 800a21a:	2b08      	cmp	r3, #8
 800a21c:	d003      	beq.n	800a226 <HAL_RCC_GetSysClockFreq+0x36>
 800a21e:	e03c      	b.n	800a29a <HAL_RCC_GetSysClockFreq+0xaa>
 800a220:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a222:	623b      	str	r3, [r7, #32]
 800a224:	e03c      	b.n	800a2a0 <HAL_RCC_GetSysClockFreq+0xb0>
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a22c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a230:	60ba      	str	r2, [r7, #8]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	fa92 f2a2 	rbit	r2, r2
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	fab2 f282 	clz	r2, r2
 800a240:	b2d2      	uxtb	r2, r2
 800a242:	40d3      	lsrs	r3, r2
 800a244:	4a1c      	ldr	r2, [pc, #112]	; (800a2b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a246:	5cd3      	ldrb	r3, [r2, r3]
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	220f      	movs	r2, #15
 800a254:	613a      	str	r2, [r7, #16]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	fa92 f2a2 	rbit	r2, r2
 800a25c:	60fa      	str	r2, [r7, #12]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	fab2 f282 	clz	r2, r2
 800a264:	b2d2      	uxtb	r2, r2
 800a266:	40d3      	lsrs	r3, r2
 800a268:	4a14      	ldr	r2, [pc, #80]	; (800a2bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800a26a:	5cd3      	ldrb	r3, [r2, r3]
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d008      	beq.n	800a28a <HAL_RCC_GetSysClockFreq+0x9a>
 800a278:	4a0e      	ldr	r2, [pc, #56]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	fb02 f303 	mul.w	r3, r2, r3
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
 800a288:	e004      	b.n	800a294 <HAL_RCC_GetSysClockFreq+0xa4>
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	4a0c      	ldr	r2, [pc, #48]	; (800a2c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a28e:	fb02 f303 	mul.w	r3, r2, r3
 800a292:	627b      	str	r3, [r7, #36]	; 0x24
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	623b      	str	r3, [r7, #32]
 800a298:	e002      	b.n	800a2a0 <HAL_RCC_GetSysClockFreq+0xb0>
 800a29a:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a29c:	623b      	str	r3, [r7, #32]
 800a29e:	bf00      	nop
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	372c      	adds	r7, #44	; 0x2c
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	40021000 	.word	0x40021000
 800a2b4:	016e3600 	.word	0x016e3600
 800a2b8:	08011a18 	.word	0x08011a18
 800a2bc:	08011a28 	.word	0x08011a28
 800a2c0:	003d0900 	.word	0x003d0900
 800a2c4:	007a1200 	.word	0x007a1200

0800a2c8 <HAL_RCC_GetHCLKFreq>:
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	4b03      	ldr	r3, [pc, #12]	; (800a2dc <HAL_RCC_GetHCLKFreq+0x14>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000040 	.word	0x20000040

0800a2e0 <HAL_RCC_GetPCLK1Freq>:
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	f7ff ffef 	bl	800a2c8 <HAL_RCC_GetHCLKFreq>
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	fa92 f2a2 	rbit	r2, r2
 800a300:	603a      	str	r2, [r7, #0]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	fab2 f282 	clz	r2, r2
 800a308:	b2d2      	uxtb	r2, r2
 800a30a:	40d3      	lsrs	r3, r2
 800a30c:	4a04      	ldr	r2, [pc, #16]	; (800a320 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a30e:	5cd3      	ldrb	r3, [r2, r3]
 800a310:	fa21 f303 	lsr.w	r3, r1, r3
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	40021000 	.word	0x40021000
 800a320:	08011a10 	.word	0x08011a10

0800a324 <HAL_RCC_GetPCLK2Freq>:
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	f7ff ffcd 	bl	800a2c8 <HAL_RCC_GetHCLKFreq>
 800a32e:	4601      	mov	r1, r0
 800a330:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a338:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	fa92 f2a2 	rbit	r2, r2
 800a344:	603a      	str	r2, [r7, #0]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	fab2 f282 	clz	r2, r2
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	40d3      	lsrs	r3, r2
 800a350:	4a04      	ldr	r2, [pc, #16]	; (800a364 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a352:	5cd3      	ldrb	r3, [r2, r3]
 800a354:	fa21 f303 	lsr.w	r3, r1, r3
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	40021000 	.word	0x40021000
 800a364:	08011a10 	.word	0x08011a10

0800a368 <HAL_RCC_GetClockConfig>:
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220f      	movs	r2, #15
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f003 0203 	and.w	r2, r3, #3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	605a      	str	r2, [r3, #4]
 800a384:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	609a      	str	r2, [r3, #8]
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	08db      	lsrs	r3, r3, #3
 800a3a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	611a      	str	r2, [r3, #16]
 800a3aa:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <HAL_RCC_GetClockConfig+0x60>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0207 	and.w	r2, r3, #7
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	bf00      	nop
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	40021000 	.word	0x40021000
 800a3c8:	40022000 	.word	0x40022000

0800a3cc <HAL_RCCEx_PeriphCLKConfig>:
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b092      	sub	sp, #72	; 0x48
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d8:	2300      	movs	r3, #0
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 80d4 	beq.w	800a598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a3f0:	4b4e      	ldr	r3, [pc, #312]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10e      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a3fc:	4b4b      	ldr	r3, [pc, #300]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	4a4a      	ldr	r2, [pc, #296]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a406:	61d3      	str	r3, [r2, #28]
 800a408:	4b48      	ldr	r3, [pc, #288]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a410:	60bb      	str	r3, [r7, #8]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2301      	movs	r3, #1
 800a416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a41a:	4b45      	ldr	r3, [pc, #276]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a422:	2b00      	cmp	r3, #0
 800a424:	d118      	bne.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800a426:	4b42      	ldr	r3, [pc, #264]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a41      	ldr	r2, [pc, #260]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a42c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	f7fb fd19 	bl	8005e68 <HAL_GetTick>
 800a436:	6438      	str	r0, [r7, #64]	; 0x40
 800a438:	e008      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a43a:	f7fb fd15 	bl	8005e68 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b64      	cmp	r3, #100	; 0x64
 800a446:	d901      	bls.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a448:	2303      	movs	r3, #3
 800a44a:	e169      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a44c:	4b38      	ldr	r3, [pc, #224]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0f0      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a458:	4b34      	ldr	r3, [pc, #208]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8084 	beq.w	800a572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a474:	429a      	cmp	r2, r3
 800a476:	d07c      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a478:	4b2c      	ldr	r3, [pc, #176]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a486:	633b      	str	r3, [r7, #48]	; 0x30
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	fa93 f3a3 	rbit	r3, r3
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	fab3 f383 	clz	r3, r3
 800a496:	b2db      	uxtb	r3, r3
 800a498:	461a      	mov	r2, r3
 800a49a:	4b26      	ldr	r3, [pc, #152]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a49c:	4413      	add	r3, r2
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a4aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	fa93 f3a3 	rbit	r3, r3
 800a4b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b6:	fab3 f383 	clz	r3, r3
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4b1d      	ldr	r3, [pc, #116]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	4a18      	ldr	r2, [pc, #96]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ce:	6213      	str	r3, [r2, #32]
 800a4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d04b      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a4da:	f7fb fcc5 	bl	8005e68 <HAL_GetTick>
 800a4de:	6438      	str	r0, [r7, #64]	; 0x40
 800a4e0:	e00a      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800a4e2:	f7fb fcc1 	bl	8005e68 <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d901      	bls.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e113      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	fa93 f3a3 	rbit	r3, r3
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
 800a504:	2302      	movs	r3, #2
 800a506:	623b      	str	r3, [r7, #32]
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	fa93 f3a3 	rbit	r3, r3
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	fab3 f383 	clz	r3, r3
 800a516:	b2db      	uxtb	r3, r3
 800a518:	095b      	lsrs	r3, r3, #5
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	f043 0302 	orr.w	r3, r3, #2
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b02      	cmp	r3, #2
 800a524:	d108      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a526:	4b01      	ldr	r3, [pc, #4]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	e00d      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a52c:	40021000 	.word	0x40021000
 800a530:	40007000 	.word	0x40007000
 800a534:	10908100 	.word	0x10908100
 800a538:	2302      	movs	r3, #2
 800a53a:	61bb      	str	r3, [r7, #24]
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	fa93 f3a3 	rbit	r3, r3
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	4b78      	ldr	r3, [pc, #480]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	2202      	movs	r2, #2
 800a54a:	613a      	str	r2, [r7, #16]
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	fa92 f2a2 	rbit	r2, r2
 800a552:	60fa      	str	r2, [r7, #12]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	fab2 f282 	clz	r2, r2
 800a55a:	b2d2      	uxtb	r2, r2
 800a55c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a560:	b2d2      	uxtb	r2, r2
 800a562:	f002 021f 	and.w	r2, r2, #31
 800a566:	2101      	movs	r1, #1
 800a568:	fa01 f202 	lsl.w	r2, r1, r2
 800a56c:	4013      	ands	r3, r2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0b7      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a572:	4b6d      	ldr	r3, [pc, #436]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	496a      	ldr	r1, [pc, #424]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a580:	4313      	orrs	r3, r2
 800a582:	620b      	str	r3, [r1, #32]
 800a584:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d105      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a58c:	4b66      	ldr	r3, [pc, #408]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a58e:	69db      	ldr	r3, [r3, #28]
 800a590:	4a65      	ldr	r2, [pc, #404]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a596:	61d3      	str	r3, [r2, #28]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d008      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a5a4:	4b60      	ldr	r3, [pc, #384]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a8:	f023 0203 	bic.w	r2, r3, #3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	495d      	ldr	r1, [pc, #372]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	630b      	str	r3, [r1, #48]	; 0x30
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d008      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800a5c2:	4b59      	ldr	r3, [pc, #356]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	4956      	ldr	r1, [pc, #344]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	630b      	str	r3, [r1, #48]	; 0x30
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d008      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
 800a5e0:	4b51      	ldr	r3, [pc, #324]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	494e      	ldr	r1, [pc, #312]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	630b      	str	r3, [r1, #48]	; 0x30
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0320 	and.w	r3, r3, #32
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d008      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a5fe:	4b4a      	ldr	r3, [pc, #296]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a602:	f023 0210 	bic.w	r2, r3, #16
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	4947      	ldr	r1, [pc, #284]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	630b      	str	r3, [r1, #48]	; 0x30
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a61c:	4b42      	ldr	r3, [pc, #264]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	493f      	ldr	r1, [pc, #252]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	604b      	str	r3, [r1, #4]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d008      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800a63a:	4b3b      	ldr	r3, [pc, #236]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63e:	f023 0220 	bic.w	r2, r3, #32
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	4938      	ldr	r1, [pc, #224]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	630b      	str	r3, [r1, #48]	; 0x30
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d008      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800a658:	4b33      	ldr	r3, [pc, #204]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	4930      	ldr	r1, [pc, #192]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a666:	4313      	orrs	r3, r2
 800a668:	630b      	str	r3, [r1, #48]	; 0x30
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0310 	and.w	r3, r3, #16
 800a672:	2b00      	cmp	r3, #0
 800a674:	d008      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a676:	4b2c      	ldr	r3, [pc, #176]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	4929      	ldr	r1, [pc, #164]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a684:	4313      	orrs	r3, r2
 800a686:	630b      	str	r3, [r1, #48]	; 0x30
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a690:	2b00      	cmp	r3, #0
 800a692:	d008      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a694:	4b24      	ldr	r3, [pc, #144]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	4921      	ldr	r1, [pc, #132]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	604b      	str	r3, [r1, #4]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d008      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a6b2:	4b1d      	ldr	r3, [pc, #116]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	491a      	ldr	r1, [pc, #104]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d008      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800a6d0:	4b15      	ldr	r3, [pc, #84]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	4912      	ldr	r1, [pc, #72]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d008      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800a6ee:	4b0e      	ldr	r3, [pc, #56]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fa:	490b      	ldr	r1, [pc, #44]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	630b      	str	r3, [r1, #48]	; 0x30
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d008      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x352>
 800a70c:	4b06      	ldr	r3, [pc, #24]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a710:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a718:	4903      	ldr	r1, [pc, #12]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a71a:	4313      	orrs	r3, r2
 800a71c:	630b      	str	r3, [r1, #48]	; 0x30
 800a71e:	2300      	movs	r3, #0
 800a720:	4618      	mov	r0, r3
 800a722:	3748      	adds	r7, #72	; 0x48
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	40021000 	.word	0x40021000

0800a72c <HAL_TIM_Base_Init>:
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_TIM_Base_Init+0x12>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e049      	b.n	800a7d2 <HAL_TIM_Base_Init+0xa6>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b00      	cmp	r3, #0
 800a748:	d106      	bne.n	800a758 <HAL_TIM_Base_Init+0x2c>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7fb f8a6 	bl	80058a4 <HAL_TIM_Base_MspInit>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2202      	movs	r2, #2
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3304      	adds	r3, #4
 800a768:	4619      	mov	r1, r3
 800a76a:	4610      	mov	r0, r2
 800a76c:	f000 f9e8 	bl	800ab40 <TIM_Base_SetConfig>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <HAL_TIM_Base_Start_IT>:
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d001      	beq.n	800a7f4 <HAL_TIM_Base_Start_IT+0x18>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e04a      	b.n	800a88a <HAL_TIM_Base_Start_IT+0xae>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68da      	ldr	r2, [r3, #12]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	60da      	str	r2, [r3, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a21      	ldr	r2, [pc, #132]	; (800a898 <HAL_TIM_Base_Start_IT+0xbc>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d018      	beq.n	800a848 <HAL_TIM_Base_Start_IT+0x6c>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81e:	d013      	beq.n	800a848 <HAL_TIM_Base_Start_IT+0x6c>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1d      	ldr	r2, [pc, #116]	; (800a89c <HAL_TIM_Base_Start_IT+0xc0>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00e      	beq.n	800a848 <HAL_TIM_Base_Start_IT+0x6c>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a1c      	ldr	r2, [pc, #112]	; (800a8a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d009      	beq.n	800a848 <HAL_TIM_Base_Start_IT+0x6c>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a1a      	ldr	r2, [pc, #104]	; (800a8a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d004      	beq.n	800a848 <HAL_TIM_Base_Start_IT+0x6c>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a19      	ldr	r2, [pc, #100]	; (800a8a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d115      	bne.n	800a874 <HAL_TIM_Base_Start_IT+0x98>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	4b17      	ldr	r3, [pc, #92]	; (800a8ac <HAL_TIM_Base_Start_IT+0xd0>)
 800a850:	4013      	ands	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b06      	cmp	r3, #6
 800a858:	d015      	beq.n	800a886 <HAL_TIM_Base_Start_IT+0xaa>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a860:	d011      	beq.n	800a886 <HAL_TIM_Base_Start_IT+0xaa>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f042 0201 	orr.w	r2, r2, #1
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	e008      	b.n	800a886 <HAL_TIM_Base_Start_IT+0xaa>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	e000      	b.n	800a888 <HAL_TIM_Base_Start_IT+0xac>
 800a886:	bf00      	nop
 800a888:	2300      	movs	r3, #0
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	40012c00 	.word	0x40012c00
 800a89c:	40000400 	.word	0x40000400
 800a8a0:	40000800 	.word	0x40000800
 800a8a4:	40013400 	.word	0x40013400
 800a8a8:	40014000 	.word	0x40014000
 800a8ac:	00010007 	.word	0x00010007

0800a8b0 <HAL_TIM_IRQHandler>:
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d122      	bne.n	800a90c <HAL_TIM_IRQHandler+0x5c>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d11b      	bne.n	800a90c <HAL_TIM_IRQHandler+0x5c>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f06f 0202 	mvn.w	r2, #2
 800a8dc:	611a      	str	r2, [r3, #16]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	771a      	strb	r2, [r3, #28]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	f003 0303 	and.w	r3, r3, #3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_TIM_IRQHandler+0x4a>
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f905 	bl	800ab02 <HAL_TIM_IC_CaptureCallback>
 800a8f8:	e005      	b.n	800a906 <HAL_TIM_IRQHandler+0x56>
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f8f7 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f908 	bl	800ab16 <HAL_TIM_PWM_PulseFinishedCallback>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	771a      	strb	r2, [r3, #28]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d122      	bne.n	800a960 <HAL_TIM_IRQHandler+0xb0>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b04      	cmp	r3, #4
 800a926:	d11b      	bne.n	800a960 <HAL_TIM_IRQHandler+0xb0>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0204 	mvn.w	r2, #4
 800a930:	611a      	str	r2, [r3, #16]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2202      	movs	r2, #2
 800a936:	771a      	strb	r2, [r3, #28]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_TIM_IRQHandler+0x9e>
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f8db 	bl	800ab02 <HAL_TIM_IC_CaptureCallback>
 800a94c:	e005      	b.n	800a95a <HAL_TIM_IRQHandler+0xaa>
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f8cd 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f8de 	bl	800ab16 <HAL_TIM_PWM_PulseFinishedCallback>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	771a      	strb	r2, [r3, #28]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f003 0308 	and.w	r3, r3, #8
 800a96a:	2b08      	cmp	r3, #8
 800a96c:	d122      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x104>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f003 0308 	and.w	r3, r3, #8
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d11b      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x104>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f06f 0208 	mvn.w	r2, #8
 800a984:	611a      	str	r2, [r3, #16]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2204      	movs	r2, #4
 800a98a:	771a      	strb	r2, [r3, #28]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0xf2>
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f8b1 	bl	800ab02 <HAL_TIM_IC_CaptureCallback>
 800a9a0:	e005      	b.n	800a9ae <HAL_TIM_IRQHandler+0xfe>
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8a3 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f8b4 	bl	800ab16 <HAL_TIM_PWM_PulseFinishedCallback>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	771a      	strb	r2, [r3, #28]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d122      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x158>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b10      	cmp	r3, #16
 800a9ce:	d11b      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x158>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0210 	mvn.w	r2, #16
 800a9d8:	611a      	str	r2, [r3, #16]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2208      	movs	r2, #8
 800a9de:	771a      	strb	r2, [r3, #28]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_TIM_IRQHandler+0x146>
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f887 	bl	800ab02 <HAL_TIM_IC_CaptureCallback>
 800a9f4:	e005      	b.n	800aa02 <HAL_TIM_IRQHandler+0x152>
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f879 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f88a 	bl	800ab16 <HAL_TIM_PWM_PulseFinishedCallback>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	771a      	strb	r2, [r3, #28]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d10e      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x184>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d107      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x184>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f06f 0201 	mvn.w	r2, #1
 800aa2c:	611a      	str	r2, [r3, #16]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7f9 fcfe 	bl	8004430 <HAL_TIM_PeriodElapsedCallback>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3e:	2b80      	cmp	r3, #128	; 0x80
 800aa40:	d10e      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1b0>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4c:	2b80      	cmp	r3, #128	; 0x80
 800aa4e:	d107      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1b0>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa58:	611a      	str	r2, [r3, #16]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f98a 	bl	800ad74 <HAL_TIMEx_BreakCallback>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6e:	d10e      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x1de>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7a:	2b80      	cmp	r3, #128	; 0x80
 800aa7c:	d107      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x1de>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa86:	611a      	str	r2, [r3, #16]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f97d 	bl	800ad88 <HAL_TIMEx_Break2Callback>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa98:	2b40      	cmp	r3, #64	; 0x40
 800aa9a:	d10e      	bne.n	800aaba <HAL_TIM_IRQHandler+0x20a>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa6:	2b40      	cmp	r3, #64	; 0x40
 800aaa8:	d107      	bne.n	800aaba <HAL_TIM_IRQHandler+0x20a>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aab2:	611a      	str	r2, [r3, #16]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f838 	bl	800ab2a <HAL_TIM_TriggerCallback>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f003 0320 	and.w	r3, r3, #32
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	d10e      	bne.n	800aae6 <HAL_TIM_IRQHandler+0x236>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f003 0320 	and.w	r3, r3, #32
 800aad2:	2b20      	cmp	r3, #32
 800aad4:	d107      	bne.n	800aae6 <HAL_TIM_IRQHandler+0x236>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f06f 0220 	mvn.w	r2, #32
 800aade:	611a      	str	r2, [r3, #16]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f93d 	bl	800ad60 <HAL_TIMEx_CommutCallback>
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <HAL_TIM_OC_DelayElapsedCallback>:
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <HAL_TIM_IC_CaptureCallback>:
 800ab02:	b480      	push	{r7}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <HAL_TIM_PWM_PulseFinishedCallback>:
 800ab16:	b480      	push	{r7}
 800ab18:	b083      	sub	sp, #12
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <HAL_TIM_TriggerCallback>:
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
	...

0800ab40 <TIM_Base_SetConfig>:
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a3c      	ldr	r2, [pc, #240]	; (800ac44 <TIM_Base_SetConfig+0x104>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d00f      	beq.n	800ab78 <TIM_Base_SetConfig+0x38>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab5e:	d00b      	beq.n	800ab78 <TIM_Base_SetConfig+0x38>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a39      	ldr	r2, [pc, #228]	; (800ac48 <TIM_Base_SetConfig+0x108>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d007      	beq.n	800ab78 <TIM_Base_SetConfig+0x38>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a38      	ldr	r2, [pc, #224]	; (800ac4c <TIM_Base_SetConfig+0x10c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d003      	beq.n	800ab78 <TIM_Base_SetConfig+0x38>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a37      	ldr	r2, [pc, #220]	; (800ac50 <TIM_Base_SetConfig+0x110>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d108      	bne.n	800ab8a <TIM_Base_SetConfig+0x4a>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a2d      	ldr	r2, [pc, #180]	; (800ac44 <TIM_Base_SetConfig+0x104>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d01b      	beq.n	800abca <TIM_Base_SetConfig+0x8a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab98:	d017      	beq.n	800abca <TIM_Base_SetConfig+0x8a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a2a      	ldr	r2, [pc, #168]	; (800ac48 <TIM_Base_SetConfig+0x108>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d013      	beq.n	800abca <TIM_Base_SetConfig+0x8a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a29      	ldr	r2, [pc, #164]	; (800ac4c <TIM_Base_SetConfig+0x10c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00f      	beq.n	800abca <TIM_Base_SetConfig+0x8a>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a28      	ldr	r2, [pc, #160]	; (800ac50 <TIM_Base_SetConfig+0x110>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d00b      	beq.n	800abca <TIM_Base_SetConfig+0x8a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a27      	ldr	r2, [pc, #156]	; (800ac54 <TIM_Base_SetConfig+0x114>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d007      	beq.n	800abca <TIM_Base_SetConfig+0x8a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a26      	ldr	r2, [pc, #152]	; (800ac58 <TIM_Base_SetConfig+0x118>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d003      	beq.n	800abca <TIM_Base_SetConfig+0x8a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a25      	ldr	r2, [pc, #148]	; (800ac5c <TIM_Base_SetConfig+0x11c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d108      	bne.n	800abdc <TIM_Base_SetConfig+0x9c>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	62da      	str	r2, [r3, #44]	; 0x2c
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	629a      	str	r2, [r3, #40]	; 0x28
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a10      	ldr	r2, [pc, #64]	; (800ac44 <TIM_Base_SetConfig+0x104>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d00f      	beq.n	800ac28 <TIM_Base_SetConfig+0xe8>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a11      	ldr	r2, [pc, #68]	; (800ac50 <TIM_Base_SetConfig+0x110>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d00b      	beq.n	800ac28 <TIM_Base_SetConfig+0xe8>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a10      	ldr	r2, [pc, #64]	; (800ac54 <TIM_Base_SetConfig+0x114>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d007      	beq.n	800ac28 <TIM_Base_SetConfig+0xe8>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a0f      	ldr	r2, [pc, #60]	; (800ac58 <TIM_Base_SetConfig+0x118>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d003      	beq.n	800ac28 <TIM_Base_SetConfig+0xe8>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a0e      	ldr	r2, [pc, #56]	; (800ac5c <TIM_Base_SetConfig+0x11c>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d103      	bne.n	800ac30 <TIM_Base_SetConfig+0xf0>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	691a      	ldr	r2, [r3, #16]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	615a      	str	r2, [r3, #20]
 800ac36:	bf00      	nop
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	40012c00 	.word	0x40012c00
 800ac48:	40000400 	.word	0x40000400
 800ac4c:	40000800 	.word	0x40000800
 800ac50:	40013400 	.word	0x40013400
 800ac54:	40014000 	.word	0x40014000
 800ac58:	40014400 	.word	0x40014400
 800ac5c:	40014800 	.word	0x40014800

0800ac60 <HAL_TIMEx_MasterConfigSynchronization>:
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d101      	bne.n	800ac78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac74:	2302      	movs	r3, #2
 800ac76:	e063      	b.n	800ad40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	60bb      	str	r3, [r7, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a2b      	ldr	r2, [pc, #172]	; (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a2a      	ldr	r2, [pc, #168]	; (800ad50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d108      	bne.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4313      	orrs	r3, r2
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	605a      	str	r2, [r3, #4]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a1b      	ldr	r2, [pc, #108]	; (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d018      	beq.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acea:	d013      	beq.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a18      	ldr	r2, [pc, #96]	; (800ad54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d00e      	beq.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a17      	ldr	r2, [pc, #92]	; (800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d009      	beq.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a12      	ldr	r2, [pc, #72]	; (800ad50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d004      	beq.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a13      	ldr	r2, [pc, #76]	; (800ad5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d10c      	bne.n	800ad2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad1a:	60bb      	str	r3, [r7, #8]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60bb      	str	r3, [r7, #8]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	609a      	str	r2, [r3, #8]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ad3e:	2300      	movs	r3, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	40012c00 	.word	0x40012c00
 800ad50:	40013400 	.word	0x40013400
 800ad54:	40000400 	.word	0x40000400
 800ad58:	40000800 	.word	0x40000800
 800ad5c:	40014000 	.word	0x40014000

0800ad60 <HAL_TIMEx_CommutCallback>:
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_TIMEx_BreakCallback>:
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_TIMEx_Break2Callback>:
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_UART_Init>:
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <HAL_UART_Init+0x12>
 800adaa:	2301      	movs	r3, #1
 800adac:	e040      	b.n	800ae30 <HAL_UART_Init+0x94>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d106      	bne.n	800adc4 <HAL_UART_Init+0x28>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7fa fe54 	bl	8005a6c <HAL_UART_MspInit>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2224      	movs	r2, #36	; 0x24
 800adc8:	67da      	str	r2, [r3, #124]	; 0x7c
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 0201 	bic.w	r2, r2, #1
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fdf2 	bl	800b9c4 <UART_SetConfig>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d101      	bne.n	800adea <HAL_UART_Init+0x4e>
 800ade6:	2301      	movs	r3, #1
 800ade8:	e022      	b.n	800ae30 <HAL_UART_Init+0x94>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <HAL_UART_Init+0x5c>
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 ffba 	bl	800bd6c <UART_AdvFeatureConfig>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae06:	605a      	str	r2, [r3, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689a      	ldr	r2, [r3, #8]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae16:	609a      	str	r2, [r3, #8]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f042 0201 	orr.w	r2, r2, #1
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f001 f841 	bl	800beb0 <UART_CheckIdleState>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <HAL_UART_Transmit_IT>:
 800ae38:	b480      	push	{r7}
 800ae3a:	b08b      	sub	sp, #44	; 0x2c
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	4613      	mov	r3, r2
 800ae44:	80fb      	strh	r3, [r7, #6]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	d147      	bne.n	800aede <HAL_UART_Transmit_IT+0xa6>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <HAL_UART_Transmit_IT+0x22>
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <HAL_UART_Transmit_IT+0x26>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e040      	b.n	800aee0 <HAL_UART_Transmit_IT+0xa8>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	64da      	str	r2, [r3, #76]	; 0x4c
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	88fa      	ldrh	r2, [r7, #6]
 800ae68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	88fa      	ldrh	r2, [r7, #6]
 800ae70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	66da      	str	r2, [r3, #108]	; 0x6c
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2221      	movs	r2, #33	; 0x21
 800ae86:	67da      	str	r2, [r3, #124]	; 0x7c
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae90:	d107      	bne.n	800aea2 <HAL_UART_Transmit_IT+0x6a>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <HAL_UART_Transmit_IT+0x6a>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	4a13      	ldr	r2, [pc, #76]	; (800aeec <HAL_UART_Transmit_IT+0xb4>)
 800ae9e:	66da      	str	r2, [r3, #108]	; 0x6c
 800aea0:	e002      	b.n	800aea8 <HAL_UART_Transmit_IT+0x70>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4a12      	ldr	r2, [pc, #72]	; (800aef0 <HAL_UART_Transmit_IT+0xb8>)
 800aea6:	66da      	str	r2, [r3, #108]	; 0x6c
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	613b      	str	r3, [r7, #16]
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	623b      	str	r3, [r7, #32]
 800aec8:	61fa      	str	r2, [r7, #28]
 800aeca:	69f9      	ldr	r1, [r7, #28]
 800aecc:	6a3a      	ldr	r2, [r7, #32]
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	61bb      	str	r3, [r7, #24]
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1e6      	bne.n	800aea8 <HAL_UART_Transmit_IT+0x70>
 800aeda:	2300      	movs	r3, #0
 800aedc:	e000      	b.n	800aee0 <HAL_UART_Transmit_IT+0xa8>
 800aede:	2302      	movs	r3, #2
 800aee0:	4618      	mov	r0, r3
 800aee2:	372c      	adds	r7, #44	; 0x2c
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	0800c877 	.word	0x0800c877
 800aef0:	0800c7bf 	.word	0x0800c7bf

0800aef4 <HAL_UART_Receive_IT>:
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08a      	sub	sp, #40	; 0x28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	4613      	mov	r3, r2
 800af00:	80fb      	strh	r3, [r7, #6]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d132      	bne.n	800af72 <HAL_UART_Receive_IT+0x7e>
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d002      	beq.n	800af18 <HAL_UART_Receive_IT+0x24>
 800af12:	88fb      	ldrh	r3, [r7, #6]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <HAL_UART_Receive_IT+0x28>
 800af18:	2301      	movs	r3, #1
 800af1a:	e02b      	b.n	800af74 <HAL_UART_Receive_IT+0x80>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	661a      	str	r2, [r3, #96]	; 0x60
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d018      	beq.n	800af62 <HAL_UART_Receive_IT+0x6e>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	617b      	str	r3, [r7, #20]
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	e853 3f00 	ldrex	r3, [r3]
 800af3c:	613b      	str	r3, [r7, #16]
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	623b      	str	r3, [r7, #32]
 800af50:	61fa      	str	r2, [r7, #28]
 800af52:	69f9      	ldr	r1, [r7, #28]
 800af54:	6a3a      	ldr	r2, [r7, #32]
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	61bb      	str	r3, [r7, #24]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e6      	bne.n	800af30 <HAL_UART_Receive_IT+0x3c>
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	461a      	mov	r2, r3
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f001 f8b1 	bl	800c0d0 <UART_Start_Receive_IT>
 800af6e:	4603      	mov	r3, r0
 800af70:	e000      	b.n	800af74 <HAL_UART_Receive_IT+0x80>
 800af72:	2302      	movs	r3, #2
 800af74:	4618      	mov	r0, r3
 800af76:	3728      	adds	r7, #40	; 0x28
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_UART_Transmit_DMA>:
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08a      	sub	sp, #40	; 0x28
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	4613      	mov	r3, r2
 800af88:	80fb      	strh	r3, [r7, #6]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af8e:	2b20      	cmp	r3, #32
 800af90:	d165      	bne.n	800b05e <HAL_UART_Transmit_DMA+0xe2>
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d002      	beq.n	800af9e <HAL_UART_Transmit_DMA+0x22>
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <HAL_UART_Transmit_DMA+0x26>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e05e      	b.n	800b060 <HAL_UART_Transmit_DMA+0xe4>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	64da      	str	r2, [r3, #76]	; 0x4c
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	88fa      	ldrh	r2, [r7, #6]
 800afac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	88fa      	ldrh	r2, [r7, #6]
 800afb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2221      	movs	r2, #33	; 0x21
 800afc4:	67da      	str	r2, [r3, #124]	; 0x7c
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d027      	beq.n	800b01e <HAL_UART_Transmit_DMA+0xa2>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd2:	4a25      	ldr	r2, [pc, #148]	; (800b068 <HAL_UART_Transmit_DMA+0xec>)
 800afd4:	629a      	str	r2, [r3, #40]	; 0x28
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afda:	4a24      	ldr	r2, [pc, #144]	; (800b06c <HAL_UART_Transmit_DMA+0xf0>)
 800afdc:	62da      	str	r2, [r3, #44]	; 0x2c
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe2:	4a23      	ldr	r2, [pc, #140]	; (800b070 <HAL_UART_Transmit_DMA+0xf4>)
 800afe4:	631a      	str	r2, [r3, #48]	; 0x30
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afea:	2200      	movs	r2, #0
 800afec:	635a      	str	r2, [r3, #52]	; 0x34
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aff6:	4619      	mov	r1, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3328      	adds	r3, #40	; 0x28
 800affe:	461a      	mov	r2, r3
 800b000:	88fb      	ldrh	r3, [r7, #6]
 800b002:	f7fb f88a 	bl	800611a <HAL_DMA_Start_IT>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d008      	beq.n	800b01e <HAL_UART_Transmit_DMA+0xa2>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2210      	movs	r2, #16
 800b010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2220      	movs	r2, #32
 800b018:	67da      	str	r2, [r3, #124]	; 0x7c
 800b01a:	2301      	movs	r3, #1
 800b01c:	e020      	b.n	800b060 <HAL_UART_Transmit_DMA+0xe4>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2240      	movs	r2, #64	; 0x40
 800b024:	621a      	str	r2, [r3, #32]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3308      	adds	r3, #8
 800b02c:	617b      	str	r3, [r7, #20]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	e853 3f00 	ldrex	r3, [r3]
 800b034:	613b      	str	r3, [r7, #16]
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03c:	627b      	str	r3, [r7, #36]	; 0x24
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b046:	623a      	str	r2, [r7, #32]
 800b048:	61fb      	str	r3, [r7, #28]
 800b04a:	69f9      	ldr	r1, [r7, #28]
 800b04c:	6a3a      	ldr	r2, [r7, #32]
 800b04e:	e841 2300 	strex	r3, r2, [r1]
 800b052:	61bb      	str	r3, [r7, #24]
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1e5      	bne.n	800b026 <HAL_UART_Transmit_DMA+0xaa>
 800b05a:	2300      	movs	r3, #0
 800b05c:	e000      	b.n	800b060 <HAL_UART_Transmit_DMA+0xe4>
 800b05e:	2302      	movs	r3, #2
 800b060:	4618      	mov	r0, r3
 800b062:	3728      	adds	r7, #40	; 0x28
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	0800c48d 	.word	0x0800c48d
 800b06c:	0800c521 	.word	0x0800c521
 800b070:	0800c6a1 	.word	0x0800c6a1

0800b074 <HAL_UART_Receive_DMA>:
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	80fb      	strh	r3, [r7, #6]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b088:	2b20      	cmp	r3, #32
 800b08a:	d132      	bne.n	800b0f2 <HAL_UART_Receive_DMA+0x7e>
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <HAL_UART_Receive_DMA+0x24>
 800b092:	88fb      	ldrh	r3, [r7, #6]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <HAL_UART_Receive_DMA+0x28>
 800b098:	2301      	movs	r3, #1
 800b09a:	e02b      	b.n	800b0f4 <HAL_UART_Receive_DMA+0x80>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	661a      	str	r2, [r3, #96]	; 0x60
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d018      	beq.n	800b0e2 <HAL_UART_Receive_DMA+0x6e>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	613b      	str	r3, [r7, #16]
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	623b      	str	r3, [r7, #32]
 800b0d0:	61fa      	str	r2, [r7, #28]
 800b0d2:	69f9      	ldr	r1, [r7, #28]
 800b0d4:	6a3a      	ldr	r2, [r7, #32]
 800b0d6:	e841 2300 	strex	r3, r2, [r1]
 800b0da:	61bb      	str	r3, [r7, #24]
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1e6      	bne.n	800b0b0 <HAL_UART_Receive_DMA+0x3c>
 800b0e2:	88fb      	ldrh	r3, [r7, #6]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	68b9      	ldr	r1, [r7, #8]
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f001 f8a5 	bl	800c238 <UART_Start_Receive_DMA>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	e000      	b.n	800b0f4 <HAL_UART_Receive_DMA+0x80>
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3728      	adds	r7, #40	; 0x28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_UART_AbortTransmit_IT>:
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08e      	sub	sp, #56	; 0x38
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	623b      	str	r3, [r7, #32]
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	61fb      	str	r3, [r7, #28]
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b118:	637b      	str	r3, [r7, #52]	; 0x34
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b124:	62ba      	str	r2, [r7, #40]	; 0x28
 800b126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e6      	bne.n	800b104 <HAL_UART_AbortTransmit_IT+0x8>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b140:	2b80      	cmp	r3, #128	; 0x80
 800b142:	d13f      	bne.n	800b1c4 <HAL_UART_AbortTransmit_IT+0xc8>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3308      	adds	r3, #8
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	e853 3f00 	ldrex	r3, [r3]
 800b152:	60bb      	str	r3, [r7, #8]
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b15a:	633b      	str	r3, [r7, #48]	; 0x30
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3308      	adds	r3, #8
 800b162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b164:	61ba      	str	r2, [r7, #24]
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	6979      	ldr	r1, [r7, #20]
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	613b      	str	r3, [r7, #16]
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e5      	bne.n	800b144 <HAL_UART_AbortTransmit_IT+0x48>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d013      	beq.n	800b1a8 <HAL_UART_AbortTransmit_IT+0xac>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b184:	4a18      	ldr	r2, [pc, #96]	; (800b1e8 <HAL_UART_AbortTransmit_IT+0xec>)
 800b186:	635a      	str	r2, [r3, #52]	; 0x34
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fb f85c 	bl	800624a <HAL_DMA_Abort_IT>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d022      	beq.n	800b1de <HAL_UART_AbortTransmit_IT+0xe2>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	4798      	blx	r3
 800b1a6:	e01a      	b.n	800b1de <HAL_UART_AbortTransmit_IT+0xe2>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	66da      	str	r2, [r3, #108]	; 0x6c
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	67da      	str	r2, [r3, #124]	; 0x7c
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fbe1 	bl	800b984 <HAL_UART_AbortTransmitCpltCallback>
 800b1c2:	e00c      	b.n	800b1de <HAL_UART_AbortTransmit_IT+0xe2>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	67da      	str	r2, [r3, #124]	; 0x7c
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fbd3 	bl	800b984 <HAL_UART_AbortTransmitCpltCallback>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3738      	adds	r7, #56	; 0x38
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	0800c74b 	.word	0x0800c74b

0800b1ec <HAL_UART_AbortReceive_IT>:
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b09a      	sub	sp, #104	; 0x68
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1fc:	e853 3f00 	ldrex	r3, [r3]
 800b200:	647b      	str	r3, [r7, #68]	; 0x44
 800b202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b208:	667b      	str	r3, [r7, #100]	; 0x64
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	461a      	mov	r2, r3
 800b210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b212:	657b      	str	r3, [r7, #84]	; 0x54
 800b214:	653a      	str	r2, [r7, #80]	; 0x50
 800b216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b21a:	e841 2300 	strex	r3, r2, [r1]
 800b21e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1e6      	bne.n	800b1f4 <HAL_UART_AbortReceive_IT+0x8>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3308      	adds	r3, #8
 800b22c:	637b      	str	r3, [r7, #52]	; 0x34
 800b22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b230:	e853 3f00 	ldrex	r3, [r3]
 800b234:	633b      	str	r3, [r7, #48]	; 0x30
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	f023 0301 	bic.w	r3, r3, #1
 800b23c:	663b      	str	r3, [r7, #96]	; 0x60
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3308      	adds	r3, #8
 800b244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b246:	643a      	str	r2, [r7, #64]	; 0x40
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b24a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b24c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b24e:	e841 2300 	strex	r3, r2, [r1]
 800b252:	63bb      	str	r3, [r7, #56]	; 0x38
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1e5      	bne.n	800b226 <HAL_UART_AbortReceive_IT+0x3a>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d118      	bne.n	800b294 <HAL_UART_AbortReceive_IT+0xa8>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	623b      	str	r3, [r7, #32]
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	e853 3f00 	ldrex	r3, [r3]
 800b26e:	61fb      	str	r3, [r7, #28]
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	f023 0310 	bic.w	r3, r3, #16
 800b276:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b280:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b282:	62ba      	str	r2, [r7, #40]	; 0x28
 800b284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e6      	bne.n	800b262 <HAL_UART_AbortReceive_IT+0x76>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29e:	2b40      	cmp	r3, #64	; 0x40
 800b2a0:	d14f      	bne.n	800b342 <HAL_UART_AbortReceive_IT+0x156>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	60fb      	str	r3, [r7, #12]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	60bb      	str	r3, [r7, #8]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2c2:	61ba      	str	r2, [r7, #24]
 800b2c4:	617b      	str	r3, [r7, #20]
 800b2c6:	6979      	ldr	r1, [r7, #20]
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	613b      	str	r3, [r7, #16]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e5      	bne.n	800b2a2 <HAL_UART_AbortReceive_IT+0xb6>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d013      	beq.n	800b306 <HAL_UART_AbortReceive_IT+0x11a>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2e2:	4a25      	ldr	r2, [pc, #148]	; (800b378 <HAL_UART_AbortReceive_IT+0x18c>)
 800b2e4:	635a      	str	r2, [r3, #52]	; 0x34
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fa ffad 	bl	800624a <HAL_DMA_Abort_IT>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d03a      	beq.n	800b36c <HAL_UART_AbortReceive_IT+0x180>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b300:	4610      	mov	r0, r2
 800b302:	4798      	blx	r3
 800b304:	e032      	b.n	800b36c <HAL_UART_AbortReceive_IT+0x180>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	655a      	str	r2, [r3, #84]	; 0x54
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	220f      	movs	r2, #15
 800b31a:	621a      	str	r2, [r3, #32]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699a      	ldr	r2, [r3, #24]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f042 0208 	orr.w	r2, r2, #8
 800b32a:	619a      	str	r2, [r3, #24]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2220      	movs	r2, #32
 800b330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	661a      	str	r2, [r3, #96]	; 0x60
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fb2c 	bl	800b998 <HAL_UART_AbortReceiveCpltCallback>
 800b340:	e014      	b.n	800b36c <HAL_UART_AbortReceive_IT+0x180>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	655a      	str	r2, [r3, #84]	; 0x54
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	220f      	movs	r2, #15
 800b356:	621a      	str	r2, [r3, #32]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2220      	movs	r2, #32
 800b35c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	661a      	str	r2, [r3, #96]	; 0x60
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fb16 	bl	800b998 <HAL_UART_AbortReceiveCpltCallback>
 800b36c:	2300      	movs	r3, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	3768      	adds	r7, #104	; 0x68
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	0800c775 	.word	0x0800c775

0800b37c <HAL_UART_IRQHandler>:
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b0ba      	sub	sp, #232	; 0xe8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b3a6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b3b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d115      	bne.n	800b3e4 <HAL_UART_IRQHandler+0x68>
 800b3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3bc:	f003 0320 	and.w	r3, r3, #32
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00f      	beq.n	800b3e4 <HAL_UART_IRQHandler+0x68>
 800b3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3c8:	f003 0320 	and.w	r3, r3, #32
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d009      	beq.n	800b3e4 <HAL_UART_IRQHandler+0x68>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 82ab 	beq.w	800b930 <HAL_UART_IRQHandler+0x5b4>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	4798      	blx	r3
 800b3e2:	e2a5      	b.n	800b930 <HAL_UART_IRQHandler+0x5b4>
 800b3e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 8117 	beq.w	800b61c <HAL_UART_IRQHandler+0x2a0>
 800b3ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <HAL_UART_IRQHandler+0x8c>
 800b3fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b3fe:	4b85      	ldr	r3, [pc, #532]	; (800b614 <HAL_UART_IRQHandler+0x298>)
 800b400:	4013      	ands	r3, r2
 800b402:	2b00      	cmp	r3, #0
 800b404:	f000 810a 	beq.w	800b61c <HAL_UART_IRQHandler+0x2a0>
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d011      	beq.n	800b438 <HAL_UART_IRQHandler+0xbc>
 800b414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <HAL_UART_IRQHandler+0xbc>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2201      	movs	r2, #1
 800b426:	621a      	str	r2, [r3, #32]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b42e:	f043 0201 	orr.w	r2, r3, #1
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d011      	beq.n	800b468 <HAL_UART_IRQHandler+0xec>
 800b444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <HAL_UART_IRQHandler+0xec>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2202      	movs	r2, #2
 800b456:	621a      	str	r2, [r3, #32]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b45e:	f043 0204 	orr.w	r2, r3, #4
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d011      	beq.n	800b498 <HAL_UART_IRQHandler+0x11c>
 800b474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <HAL_UART_IRQHandler+0x11c>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2204      	movs	r2, #4
 800b486:	621a      	str	r2, [r3, #32]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b48e:	f043 0202 	orr.w	r2, r3, #2
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b49c:	f003 0308 	and.w	r3, r3, #8
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d017      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x158>
 800b4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d105      	bne.n	800b4bc <HAL_UART_IRQHandler+0x140>
 800b4b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4b4:	f003 0301 	and.w	r3, r3, #1
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00b      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x158>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	621a      	str	r2, [r3, #32]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ca:	f043 0208 	orr.w	r2, r3, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d012      	beq.n	800b506 <HAL_UART_IRQHandler+0x18a>
 800b4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00c      	beq.n	800b506 <HAL_UART_IRQHandler+0x18a>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4f4:	621a      	str	r2, [r3, #32]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4fc:	f043 0220 	orr.w	r2, r3, #32
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8211 	beq.w	800b934 <HAL_UART_IRQHandler+0x5b8>
 800b512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b516:	f003 0320 	and.w	r3, r3, #32
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00d      	beq.n	800b53a <HAL_UART_IRQHandler+0x1be>
 800b51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b522:	f003 0320 	and.w	r3, r3, #32
 800b526:	2b00      	cmp	r3, #0
 800b528:	d007      	beq.n	800b53a <HAL_UART_IRQHandler+0x1be>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <HAL_UART_IRQHandler+0x1be>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	4798      	blx	r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54e:	2b40      	cmp	r3, #64	; 0x40
 800b550:	d005      	beq.n	800b55e <HAL_UART_IRQHandler+0x1e2>
 800b552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b556:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d04f      	beq.n	800b5fe <HAL_UART_IRQHandler+0x282>
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 ff30 	bl	800c3c4 <UART_EndRxTransfer>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56e:	2b40      	cmp	r3, #64	; 0x40
 800b570:	d141      	bne.n	800b5f6 <HAL_UART_IRQHandler+0x27a>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3308      	adds	r3, #8
 800b578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b57c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b580:	e853 3f00 	ldrex	r3, [r3]
 800b584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b58c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3308      	adds	r3, #8
 800b59a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b59e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b5a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b5aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b5ae:	e841 2300 	strex	r3, r2, [r1]
 800b5b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1d9      	bne.n	800b572 <HAL_UART_IRQHandler+0x1f6>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d013      	beq.n	800b5ee <HAL_UART_IRQHandler+0x272>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ca:	4a13      	ldr	r2, [pc, #76]	; (800b618 <HAL_UART_IRQHandler+0x29c>)
 800b5cc:	635a      	str	r2, [r3, #52]	; 0x34
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fa fe39 	bl	800624a <HAL_DMA_Abort_IT>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d017      	beq.n	800b60e <HAL_UART_IRQHandler+0x292>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	4798      	blx	r3
 800b5ec:	e00f      	b.n	800b60e <HAL_UART_IRQHandler+0x292>
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f9be 	bl	800b970 <HAL_UART_ErrorCallback>
 800b5f4:	e00b      	b.n	800b60e <HAL_UART_IRQHandler+0x292>
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f9ba 	bl	800b970 <HAL_UART_ErrorCallback>
 800b5fc:	e007      	b.n	800b60e <HAL_UART_IRQHandler+0x292>
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f9b6 	bl	800b970 <HAL_UART_ErrorCallback>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b60c:	e192      	b.n	800b934 <HAL_UART_IRQHandler+0x5b8>
 800b60e:	bf00      	nop
 800b610:	e190      	b.n	800b934 <HAL_UART_IRQHandler+0x5b8>
 800b612:	bf00      	nop
 800b614:	04000120 	.word	0x04000120
 800b618:	0800c71f 	.word	0x0800c71f
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b620:	2b01      	cmp	r3, #1
 800b622:	f040 814b 	bne.w	800b8bc <HAL_UART_IRQHandler+0x540>
 800b626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b62a:	f003 0310 	and.w	r3, r3, #16
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f000 8144 	beq.w	800b8bc <HAL_UART_IRQHandler+0x540>
 800b634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b638:	f003 0310 	and.w	r3, r3, #16
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f000 813d 	beq.w	800b8bc <HAL_UART_IRQHandler+0x540>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2210      	movs	r2, #16
 800b648:	621a      	str	r2, [r3, #32]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b654:	2b40      	cmp	r3, #64	; 0x40
 800b656:	f040 80b5 	bne.w	800b7c4 <HAL_UART_IRQHandler+0x448>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800b666:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 8164 	beq.w	800b938 <HAL_UART_IRQHandler+0x5bc>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b67a:	429a      	cmp	r2, r3
 800b67c:	f080 815c 	bcs.w	800b938 <HAL_UART_IRQHandler+0x5bc>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	2b20      	cmp	r3, #32
 800b692:	f000 8086 	beq.w	800b7a2 <HAL_UART_IRQHandler+0x426>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b69e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b6c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b6c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b6cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b6d0:	e841 2300 	strex	r3, r2, [r1]
 800b6d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1da      	bne.n	800b696 <HAL_UART_IRQHandler+0x31a>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	677b      	str	r3, [r7, #116]	; 0x74
 800b6e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6ea:	e853 3f00 	ldrex	r3, [r3]
 800b6ee:	673b      	str	r3, [r7, #112]	; 0x70
 800b6f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6f2:	f023 0301 	bic.w	r3, r3, #1
 800b6f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3308      	adds	r3, #8
 800b700:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b704:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b708:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b70a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b70c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b710:	e841 2300 	strex	r3, r2, [r1]
 800b714:	67bb      	str	r3, [r7, #120]	; 0x78
 800b716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e1      	bne.n	800b6e0 <HAL_UART_IRQHandler+0x364>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3308      	adds	r3, #8
 800b722:	663b      	str	r3, [r7, #96]	; 0x60
 800b724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b726:	e853 3f00 	ldrex	r3, [r3]
 800b72a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b72c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3308      	adds	r3, #8
 800b73c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b740:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b742:	66bb      	str	r3, [r7, #104]	; 0x68
 800b744:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b746:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	667b      	str	r3, [r7, #100]	; 0x64
 800b74e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e3      	bne.n	800b71c <HAL_UART_IRQHandler+0x3a0>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2220      	movs	r2, #32
 800b758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	661a      	str	r2, [r3, #96]	; 0x60
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b772:	f023 0310 	bic.w	r3, r3, #16
 800b776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b784:	65bb      	str	r3, [r7, #88]	; 0x58
 800b786:	657a      	str	r2, [r7, #84]	; 0x54
 800b788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b78a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	653b      	str	r3, [r7, #80]	; 0x50
 800b792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e4      	bne.n	800b762 <HAL_UART_IRQHandler+0x3e6>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fa fd1b 	bl	80061d8 <HAL_DMA_Abort>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	665a      	str	r2, [r3, #100]	; 0x64
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f8f5 	bl	800b9ac <HAL_UARTEx_RxEventCallback>
 800b7c2:	e0b9      	b.n	800b938 <HAL_UART_IRQHandler+0x5bc>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 80ab 	beq.w	800b93c <HAL_UART_IRQHandler+0x5c0>
 800b7e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 80a6 	beq.w	800b93c <HAL_UART_IRQHandler+0x5c0>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	e853 3f00 	ldrex	r3, [r3]
 800b7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	461a      	mov	r2, r3
 800b80e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b812:	647b      	str	r3, [r7, #68]	; 0x44
 800b814:	643a      	str	r2, [r7, #64]	; 0x40
 800b816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b81a:	e841 2300 	strex	r3, r2, [r1]
 800b81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e4      	bne.n	800b7f0 <HAL_UART_IRQHandler+0x474>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3308      	adds	r3, #8
 800b82c:	627b      	str	r3, [r7, #36]	; 0x24
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	623b      	str	r3, [r7, #32]
 800b836:	6a3b      	ldr	r3, [r7, #32]
 800b838:	f023 0301 	bic.w	r3, r3, #1
 800b83c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3308      	adds	r3, #8
 800b846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b84a:	633a      	str	r2, [r7, #48]	; 0x30
 800b84c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b84e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b852:	e841 2300 	strex	r3, r2, [r1]
 800b856:	62bb      	str	r3, [r7, #40]	; 0x28
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e3      	bne.n	800b826 <HAL_UART_IRQHandler+0x4aa>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	661a      	str	r2, [r3, #96]	; 0x60
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	669a      	str	r2, [r3, #104]	; 0x68
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	e853 3f00 	ldrex	r3, [r3]
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0310 	bic.w	r3, r3, #16
 800b886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b894:	61fb      	str	r3, [r7, #28]
 800b896:	61ba      	str	r2, [r7, #24]
 800b898:	69b9      	ldr	r1, [r7, #24]
 800b89a:	69fa      	ldr	r2, [r7, #28]
 800b89c:	e841 2300 	strex	r3, r2, [r1]
 800b8a0:	617b      	str	r3, [r7, #20]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1e4      	bne.n	800b872 <HAL_UART_IRQHandler+0x4f6>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	665a      	str	r2, [r3, #100]	; 0x64
 800b8ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f879 	bl	800b9ac <HAL_UARTEx_RxEventCallback>
 800b8ba:	e03f      	b.n	800b93c <HAL_UART_IRQHandler+0x5c0>
 800b8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x56a>
 800b8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d008      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x56a>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b8dc:	621a      	str	r2, [r3, #32]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f001 f9fb 	bl	800ccda <HAL_UARTEx_WakeupCallback>
 800b8e4:	e02d      	b.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00e      	beq.n	800b910 <HAL_UART_IRQHandler+0x594>
 800b8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d008      	beq.n	800b910 <HAL_UART_IRQHandler+0x594>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b902:	2b00      	cmp	r3, #0
 800b904:	d01c      	beq.n	800b940 <HAL_UART_IRQHandler+0x5c4>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	4798      	blx	r3
 800b90e:	e017      	b.n	800b940 <HAL_UART_IRQHandler+0x5c4>
 800b910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d012      	beq.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00c      	beq.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f001 f804 	bl	800c936 <UART_EndTransmit_IT>
 800b92e:	e008      	b.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b930:	bf00      	nop
 800b932:	e006      	b.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b934:	bf00      	nop
 800b936:	e004      	b.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b938:	bf00      	nop
 800b93a:	e002      	b.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b93c:	bf00      	nop
 800b93e:	e000      	b.n	800b942 <HAL_UART_IRQHandler+0x5c6>
 800b940:	bf00      	nop
 800b942:	37e8      	adds	r7, #232	; 0xe8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_UART_TxHalfCpltCallback>:
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_UART_RxHalfCpltCallback>:
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <HAL_UART_ErrorCallback>:
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_UART_AbortTransmitCpltCallback>:
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_UART_AbortReceiveCpltCallback>:
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_UARTEx_RxEventCallback>:
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	807b      	strh	r3, [r7, #2]
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <UART_SetConfig>:
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	77bb      	strb	r3, [r7, #30]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b9f2:	f023 030c 	bic.w	r3, r3, #12
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	6812      	ldr	r2, [r2, #0]
 800b9fa:	6979      	ldr	r1, [r7, #20]
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	430a      	orrs	r2, r1
 800ba14:	605a      	str	r2, [r3, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a1b      	ldr	r3, [r3, #32]
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	430a      	orrs	r2, r1
 800ba38:	609a      	str	r2, [r3, #8]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4aa7      	ldr	r2, [pc, #668]	; (800bcdc <UART_SetConfig+0x318>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d120      	bne.n	800ba86 <UART_SetConfig+0xc2>
 800ba44:	4ba6      	ldr	r3, [pc, #664]	; (800bce0 <UART_SetConfig+0x31c>)
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	f003 0303 	and.w	r3, r3, #3
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d817      	bhi.n	800ba80 <UART_SetConfig+0xbc>
 800ba50:	a201      	add	r2, pc, #4	; (adr r2, 800ba58 <UART_SetConfig+0x94>)
 800ba52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba56:	bf00      	nop
 800ba58:	0800ba69 	.word	0x0800ba69
 800ba5c:	0800ba75 	.word	0x0800ba75
 800ba60:	0800ba7b 	.word	0x0800ba7b
 800ba64:	0800ba6f 	.word	0x0800ba6f
 800ba68:	2301      	movs	r3, #1
 800ba6a:	77fb      	strb	r3, [r7, #31]
 800ba6c:	e0b5      	b.n	800bbda <UART_SetConfig+0x216>
 800ba6e:	2302      	movs	r3, #2
 800ba70:	77fb      	strb	r3, [r7, #31]
 800ba72:	e0b2      	b.n	800bbda <UART_SetConfig+0x216>
 800ba74:	2304      	movs	r3, #4
 800ba76:	77fb      	strb	r3, [r7, #31]
 800ba78:	e0af      	b.n	800bbda <UART_SetConfig+0x216>
 800ba7a:	2308      	movs	r3, #8
 800ba7c:	77fb      	strb	r3, [r7, #31]
 800ba7e:	e0ac      	b.n	800bbda <UART_SetConfig+0x216>
 800ba80:	2310      	movs	r3, #16
 800ba82:	77fb      	strb	r3, [r7, #31]
 800ba84:	e0a9      	b.n	800bbda <UART_SetConfig+0x216>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a96      	ldr	r2, [pc, #600]	; (800bce4 <UART_SetConfig+0x320>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d124      	bne.n	800bada <UART_SetConfig+0x116>
 800ba90:	4b93      	ldr	r3, [pc, #588]	; (800bce0 <UART_SetConfig+0x31c>)
 800ba92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba9c:	d011      	beq.n	800bac2 <UART_SetConfig+0xfe>
 800ba9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800baa2:	d817      	bhi.n	800bad4 <UART_SetConfig+0x110>
 800baa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baa8:	d011      	beq.n	800bace <UART_SetConfig+0x10a>
 800baaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baae:	d811      	bhi.n	800bad4 <UART_SetConfig+0x110>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <UART_SetConfig+0xf8>
 800bab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab8:	d006      	beq.n	800bac8 <UART_SetConfig+0x104>
 800baba:	e00b      	b.n	800bad4 <UART_SetConfig+0x110>
 800babc:	2300      	movs	r3, #0
 800babe:	77fb      	strb	r3, [r7, #31]
 800bac0:	e08b      	b.n	800bbda <UART_SetConfig+0x216>
 800bac2:	2302      	movs	r3, #2
 800bac4:	77fb      	strb	r3, [r7, #31]
 800bac6:	e088      	b.n	800bbda <UART_SetConfig+0x216>
 800bac8:	2304      	movs	r3, #4
 800baca:	77fb      	strb	r3, [r7, #31]
 800bacc:	e085      	b.n	800bbda <UART_SetConfig+0x216>
 800bace:	2308      	movs	r3, #8
 800bad0:	77fb      	strb	r3, [r7, #31]
 800bad2:	e082      	b.n	800bbda <UART_SetConfig+0x216>
 800bad4:	2310      	movs	r3, #16
 800bad6:	77fb      	strb	r3, [r7, #31]
 800bad8:	e07f      	b.n	800bbda <UART_SetConfig+0x216>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a82      	ldr	r2, [pc, #520]	; (800bce8 <UART_SetConfig+0x324>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d124      	bne.n	800bb2e <UART_SetConfig+0x16a>
 800bae4:	4b7e      	ldr	r3, [pc, #504]	; (800bce0 <UART_SetConfig+0x31c>)
 800bae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800baec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800baf0:	d011      	beq.n	800bb16 <UART_SetConfig+0x152>
 800baf2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800baf6:	d817      	bhi.n	800bb28 <UART_SetConfig+0x164>
 800baf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bafc:	d011      	beq.n	800bb22 <UART_SetConfig+0x15e>
 800bafe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb02:	d811      	bhi.n	800bb28 <UART_SetConfig+0x164>
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <UART_SetConfig+0x14c>
 800bb08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb0c:	d006      	beq.n	800bb1c <UART_SetConfig+0x158>
 800bb0e:	e00b      	b.n	800bb28 <UART_SetConfig+0x164>
 800bb10:	2300      	movs	r3, #0
 800bb12:	77fb      	strb	r3, [r7, #31]
 800bb14:	e061      	b.n	800bbda <UART_SetConfig+0x216>
 800bb16:	2302      	movs	r3, #2
 800bb18:	77fb      	strb	r3, [r7, #31]
 800bb1a:	e05e      	b.n	800bbda <UART_SetConfig+0x216>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	77fb      	strb	r3, [r7, #31]
 800bb20:	e05b      	b.n	800bbda <UART_SetConfig+0x216>
 800bb22:	2308      	movs	r3, #8
 800bb24:	77fb      	strb	r3, [r7, #31]
 800bb26:	e058      	b.n	800bbda <UART_SetConfig+0x216>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	77fb      	strb	r3, [r7, #31]
 800bb2c:	e055      	b.n	800bbda <UART_SetConfig+0x216>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a6e      	ldr	r2, [pc, #440]	; (800bcec <UART_SetConfig+0x328>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d124      	bne.n	800bb82 <UART_SetConfig+0x1be>
 800bb38:	4b69      	ldr	r3, [pc, #420]	; (800bce0 <UART_SetConfig+0x31c>)
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bb40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb44:	d011      	beq.n	800bb6a <UART_SetConfig+0x1a6>
 800bb46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb4a:	d817      	bhi.n	800bb7c <UART_SetConfig+0x1b8>
 800bb4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb50:	d011      	beq.n	800bb76 <UART_SetConfig+0x1b2>
 800bb52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb56:	d811      	bhi.n	800bb7c <UART_SetConfig+0x1b8>
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <UART_SetConfig+0x1a0>
 800bb5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb60:	d006      	beq.n	800bb70 <UART_SetConfig+0x1ac>
 800bb62:	e00b      	b.n	800bb7c <UART_SetConfig+0x1b8>
 800bb64:	2300      	movs	r3, #0
 800bb66:	77fb      	strb	r3, [r7, #31]
 800bb68:	e037      	b.n	800bbda <UART_SetConfig+0x216>
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	77fb      	strb	r3, [r7, #31]
 800bb6e:	e034      	b.n	800bbda <UART_SetConfig+0x216>
 800bb70:	2304      	movs	r3, #4
 800bb72:	77fb      	strb	r3, [r7, #31]
 800bb74:	e031      	b.n	800bbda <UART_SetConfig+0x216>
 800bb76:	2308      	movs	r3, #8
 800bb78:	77fb      	strb	r3, [r7, #31]
 800bb7a:	e02e      	b.n	800bbda <UART_SetConfig+0x216>
 800bb7c:	2310      	movs	r3, #16
 800bb7e:	77fb      	strb	r3, [r7, #31]
 800bb80:	e02b      	b.n	800bbda <UART_SetConfig+0x216>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a5a      	ldr	r2, [pc, #360]	; (800bcf0 <UART_SetConfig+0x32c>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d124      	bne.n	800bbd6 <UART_SetConfig+0x212>
 800bb8c:	4b54      	ldr	r3, [pc, #336]	; (800bce0 <UART_SetConfig+0x31c>)
 800bb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bb94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bb98:	d011      	beq.n	800bbbe <UART_SetConfig+0x1fa>
 800bb9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bb9e:	d817      	bhi.n	800bbd0 <UART_SetConfig+0x20c>
 800bba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bba4:	d011      	beq.n	800bbca <UART_SetConfig+0x206>
 800bba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbaa:	d811      	bhi.n	800bbd0 <UART_SetConfig+0x20c>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d003      	beq.n	800bbb8 <UART_SetConfig+0x1f4>
 800bbb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbb4:	d006      	beq.n	800bbc4 <UART_SetConfig+0x200>
 800bbb6:	e00b      	b.n	800bbd0 <UART_SetConfig+0x20c>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	77fb      	strb	r3, [r7, #31]
 800bbbc:	e00d      	b.n	800bbda <UART_SetConfig+0x216>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	77fb      	strb	r3, [r7, #31]
 800bbc2:	e00a      	b.n	800bbda <UART_SetConfig+0x216>
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	77fb      	strb	r3, [r7, #31]
 800bbc8:	e007      	b.n	800bbda <UART_SetConfig+0x216>
 800bbca:	2308      	movs	r3, #8
 800bbcc:	77fb      	strb	r3, [r7, #31]
 800bbce:	e004      	b.n	800bbda <UART_SetConfig+0x216>
 800bbd0:	2310      	movs	r3, #16
 800bbd2:	77fb      	strb	r3, [r7, #31]
 800bbd4:	e001      	b.n	800bbda <UART_SetConfig+0x216>
 800bbd6:	2310      	movs	r3, #16
 800bbd8:	77fb      	strb	r3, [r7, #31]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbe2:	d15b      	bne.n	800bc9c <UART_SetConfig+0x2d8>
 800bbe4:	7ffb      	ldrb	r3, [r7, #31]
 800bbe6:	2b08      	cmp	r3, #8
 800bbe8:	d827      	bhi.n	800bc3a <UART_SetConfig+0x276>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <UART_SetConfig+0x22c>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc15 	.word	0x0800bc15
 800bbf4:	0800bc1d 	.word	0x0800bc1d
 800bbf8:	0800bc25 	.word	0x0800bc25
 800bbfc:	0800bc3b 	.word	0x0800bc3b
 800bc00:	0800bc2b 	.word	0x0800bc2b
 800bc04:	0800bc3b 	.word	0x0800bc3b
 800bc08:	0800bc3b 	.word	0x0800bc3b
 800bc0c:	0800bc3b 	.word	0x0800bc3b
 800bc10:	0800bc33 	.word	0x0800bc33
 800bc14:	f7fe fb64 	bl	800a2e0 <HAL_RCC_GetPCLK1Freq>
 800bc18:	61b8      	str	r0, [r7, #24]
 800bc1a:	e013      	b.n	800bc44 <UART_SetConfig+0x280>
 800bc1c:	f7fe fb82 	bl	800a324 <HAL_RCC_GetPCLK2Freq>
 800bc20:	61b8      	str	r0, [r7, #24]
 800bc22:	e00f      	b.n	800bc44 <UART_SetConfig+0x280>
 800bc24:	4b33      	ldr	r3, [pc, #204]	; (800bcf4 <UART_SetConfig+0x330>)
 800bc26:	61bb      	str	r3, [r7, #24]
 800bc28:	e00c      	b.n	800bc44 <UART_SetConfig+0x280>
 800bc2a:	f7fe fae1 	bl	800a1f0 <HAL_RCC_GetSysClockFreq>
 800bc2e:	61b8      	str	r0, [r7, #24]
 800bc30:	e008      	b.n	800bc44 <UART_SetConfig+0x280>
 800bc32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc36:	61bb      	str	r3, [r7, #24]
 800bc38:	e004      	b.n	800bc44 <UART_SetConfig+0x280>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61bb      	str	r3, [r7, #24]
 800bc3e:	2301      	movs	r3, #1
 800bc40:	77bb      	strb	r3, [r7, #30]
 800bc42:	bf00      	nop
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 8082 	beq.w	800bd50 <UART_SetConfig+0x38c>
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	005a      	lsls	r2, r3, #1
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	085b      	lsrs	r3, r3, #1
 800bc56:	441a      	add	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc60:	613b      	str	r3, [r7, #16]
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2b0f      	cmp	r3, #15
 800bc66:	d916      	bls.n	800bc96 <UART_SetConfig+0x2d2>
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc6e:	d212      	bcs.n	800bc96 <UART_SetConfig+0x2d2>
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f023 030f 	bic.w	r3, r3, #15
 800bc78:	81fb      	strh	r3, [r7, #14]
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	085b      	lsrs	r3, r3, #1
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f003 0307 	and.w	r3, r3, #7
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	89fb      	ldrh	r3, [r7, #14]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	81fb      	strh	r3, [r7, #14]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	89fa      	ldrh	r2, [r7, #14]
 800bc92:	60da      	str	r2, [r3, #12]
 800bc94:	e05c      	b.n	800bd50 <UART_SetConfig+0x38c>
 800bc96:	2301      	movs	r3, #1
 800bc98:	77bb      	strb	r3, [r7, #30]
 800bc9a:	e059      	b.n	800bd50 <UART_SetConfig+0x38c>
 800bc9c:	7ffb      	ldrb	r3, [r7, #31]
 800bc9e:	2b08      	cmp	r3, #8
 800bca0:	d835      	bhi.n	800bd0e <UART_SetConfig+0x34a>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <UART_SetConfig+0x2e4>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bccd 	.word	0x0800bccd
 800bcac:	0800bcd5 	.word	0x0800bcd5
 800bcb0:	0800bcf9 	.word	0x0800bcf9
 800bcb4:	0800bd0f 	.word	0x0800bd0f
 800bcb8:	0800bcff 	.word	0x0800bcff
 800bcbc:	0800bd0f 	.word	0x0800bd0f
 800bcc0:	0800bd0f 	.word	0x0800bd0f
 800bcc4:	0800bd0f 	.word	0x0800bd0f
 800bcc8:	0800bd07 	.word	0x0800bd07
 800bccc:	f7fe fb08 	bl	800a2e0 <HAL_RCC_GetPCLK1Freq>
 800bcd0:	61b8      	str	r0, [r7, #24]
 800bcd2:	e021      	b.n	800bd18 <UART_SetConfig+0x354>
 800bcd4:	f7fe fb26 	bl	800a324 <HAL_RCC_GetPCLK2Freq>
 800bcd8:	61b8      	str	r0, [r7, #24]
 800bcda:	e01d      	b.n	800bd18 <UART_SetConfig+0x354>
 800bcdc:	40013800 	.word	0x40013800
 800bce0:	40021000 	.word	0x40021000
 800bce4:	40004400 	.word	0x40004400
 800bce8:	40004800 	.word	0x40004800
 800bcec:	40004c00 	.word	0x40004c00
 800bcf0:	40005000 	.word	0x40005000
 800bcf4:	007a1200 	.word	0x007a1200
 800bcf8:	4b1b      	ldr	r3, [pc, #108]	; (800bd68 <UART_SetConfig+0x3a4>)
 800bcfa:	61bb      	str	r3, [r7, #24]
 800bcfc:	e00c      	b.n	800bd18 <UART_SetConfig+0x354>
 800bcfe:	f7fe fa77 	bl	800a1f0 <HAL_RCC_GetSysClockFreq>
 800bd02:	61b8      	str	r0, [r7, #24]
 800bd04:	e008      	b.n	800bd18 <UART_SetConfig+0x354>
 800bd06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd0a:	61bb      	str	r3, [r7, #24]
 800bd0c:	e004      	b.n	800bd18 <UART_SetConfig+0x354>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61bb      	str	r3, [r7, #24]
 800bd12:	2301      	movs	r3, #1
 800bd14:	77bb      	strb	r3, [r7, #30]
 800bd16:	bf00      	nop
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d018      	beq.n	800bd50 <UART_SetConfig+0x38c>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	085a      	lsrs	r2, r3, #1
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	441a      	add	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd30:	613b      	str	r3, [r7, #16]
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2b0f      	cmp	r3, #15
 800bd36:	d909      	bls.n	800bd4c <UART_SetConfig+0x388>
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd3e:	d205      	bcs.n	800bd4c <UART_SetConfig+0x388>
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	60da      	str	r2, [r3, #12]
 800bd4a:	e001      	b.n	800bd50 <UART_SetConfig+0x38c>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	77bb      	strb	r3, [r7, #30]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	669a      	str	r2, [r3, #104]	; 0x68
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	66da      	str	r2, [r3, #108]	; 0x6c
 800bd5c:	7fbb      	ldrb	r3, [r7, #30]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3720      	adds	r7, #32
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	007a1200 	.word	0x007a1200

0800bd6c <UART_AdvFeatureConfig>:
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00a      	beq.n	800bd96 <UART_AdvFeatureConfig+0x2a>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	430a      	orrs	r2, r1
 800bd94:	605a      	str	r2, [r3, #4]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	f003 0302 	and.w	r3, r3, #2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <UART_AdvFeatureConfig+0x4c>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	605a      	str	r2, [r3, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00a      	beq.n	800bdda <UART_AdvFeatureConfig+0x6e>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	605a      	str	r2, [r3, #4]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	f003 0308 	and.w	r3, r3, #8
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <UART_AdvFeatureConfig+0x90>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	605a      	str	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	f003 0310 	and.w	r3, r3, #16
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00a      	beq.n	800be1e <UART_AdvFeatureConfig+0xb2>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	609a      	str	r2, [r3, #8]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be22:	f003 0320 	and.w	r3, r3, #32
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00a      	beq.n	800be40 <UART_AdvFeatureConfig+0xd4>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	430a      	orrs	r2, r1
 800be3e:	609a      	str	r2, [r3, #8]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d01a      	beq.n	800be82 <UART_AdvFeatureConfig+0x116>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	605a      	str	r2, [r3, #4]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be6a:	d10a      	bne.n	800be82 <UART_AdvFeatureConfig+0x116>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <UART_AdvFeatureConfig+0x138>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	605a      	str	r2, [r3, #4]
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <UART_CheckIdleState>:
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b098      	sub	sp, #96	; 0x60
 800beb4:	af02      	add	r7, sp, #8
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bec0:	f7f9 ffd2 	bl	8005e68 <HAL_GetTick>
 800bec4:	6578      	str	r0, [r7, #84]	; 0x54
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0308 	and.w	r3, r3, #8
 800bed0:	2b08      	cmp	r3, #8
 800bed2:	d12e      	bne.n	800bf32 <UART_CheckIdleState+0x82>
 800bed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bedc:	2200      	movs	r2, #0
 800bede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f88c 	bl	800c000 <UART_WaitOnFlagUntilTimeout>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d021      	beq.n	800bf32 <UART_CheckIdleState+0x82>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	e853 3f00 	ldrex	r3, [r3]
 800befa:	637b      	str	r3, [r7, #52]	; 0x34
 800befc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf02:	653b      	str	r3, [r7, #80]	; 0x50
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf0c:	647b      	str	r3, [r7, #68]	; 0x44
 800bf0e:	643a      	str	r2, [r7, #64]	; 0x40
 800bf10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf14:	e841 2300 	strex	r3, r2, [r1]
 800bf18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1e6      	bne.n	800beee <UART_CheckIdleState+0x3e>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2220      	movs	r2, #32
 800bf24:	67da      	str	r2, [r3, #124]	; 0x7c
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e062      	b.n	800bff8 <UART_CheckIdleState+0x148>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b04      	cmp	r3, #4
 800bf3e:	d149      	bne.n	800bfd4 <UART_CheckIdleState+0x124>
 800bf40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f856 	bl	800c000 <UART_WaitOnFlagUntilTimeout>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d03c      	beq.n	800bfd4 <UART_CheckIdleState+0x124>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	e853 3f00 	ldrex	r3, [r3]
 800bf66:	623b      	str	r3, [r7, #32]
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	461a      	mov	r2, r3
 800bf76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf78:	633b      	str	r3, [r7, #48]	; 0x30
 800bf7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf80:	e841 2300 	strex	r3, r2, [r1]
 800bf84:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e6      	bne.n	800bf5a <UART_CheckIdleState+0xaa>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3308      	adds	r3, #8
 800bf92:	613b      	str	r3, [r7, #16]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f023 0301 	bic.w	r3, r3, #1
 800bfa2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3308      	adds	r3, #8
 800bfaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfac:	61fa      	str	r2, [r7, #28]
 800bfae:	61bb      	str	r3, [r7, #24]
 800bfb0:	69b9      	ldr	r1, [r7, #24]
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	e841 2300 	strex	r3, r2, [r1]
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e5      	bne.n	800bf8c <UART_CheckIdleState+0xdc>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2220      	movs	r2, #32
 800bfc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	e011      	b.n	800bff8 <UART_CheckIdleState+0x148>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	67da      	str	r2, [r3, #124]	; 0x7c
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2220      	movs	r2, #32
 800bfde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	661a      	str	r2, [r3, #96]	; 0x60
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	665a      	str	r2, [r3, #100]	; 0x64
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800bff6:	2300      	movs	r3, #0
 800bff8:	4618      	mov	r0, r3
 800bffa:	3758      	adds	r7, #88	; 0x58
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <UART_WaitOnFlagUntilTimeout>:
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	603b      	str	r3, [r7, #0]
 800c00c:	4613      	mov	r3, r2
 800c00e:	71fb      	strb	r3, [r7, #7]
 800c010:	e049      	b.n	800c0a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c018:	d045      	beq.n	800c0a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 800c01a:	f7f9 ff25 	bl	8005e68 <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	429a      	cmp	r2, r3
 800c028:	d302      	bcc.n	800c030 <UART_WaitOnFlagUntilTimeout+0x30>
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <UART_WaitOnFlagUntilTimeout+0x34>
 800c030:	2303      	movs	r3, #3
 800c032:	e048      	b.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0xc6>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0304 	and.w	r3, r3, #4
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d031      	beq.n	800c0a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	69db      	ldr	r3, [r3, #28]
 800c048:	f003 0308 	and.w	r3, r3, #8
 800c04c:	2b08      	cmp	r3, #8
 800c04e:	d110      	bne.n	800c072 <UART_WaitOnFlagUntilTimeout+0x72>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2208      	movs	r2, #8
 800c056:	621a      	str	r2, [r3, #32]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 f9b3 	bl	800c3c4 <UART_EndRxTransfer>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2208      	movs	r2, #8
 800c062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c06e:	2301      	movs	r3, #1
 800c070:	e029      	b.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0xc6>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c07c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c080:	d111      	bne.n	800c0a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c08a:	621a      	str	r2, [r3, #32]
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f000 f999 	bl	800c3c4 <UART_EndRxTransfer>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2220      	movs	r2, #32
 800c096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e00f      	b.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0xc6>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69da      	ldr	r2, [r3, #28]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	bf0c      	ite	eq
 800c0b6:	2301      	moveq	r3, #1
 800c0b8:	2300      	movne	r3, #0
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	461a      	mov	r2, r3
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d0a6      	beq.n	800c012 <UART_WaitOnFlagUntilTimeout+0x12>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
	...

0800c0d0 <UART_Start_Receive_IT>:
 800c0d0:	b480      	push	{r7}
 800c0d2:	b097      	sub	sp, #92	; 0x5c
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	80fb      	strh	r3, [r7, #6]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	655a      	str	r2, [r3, #84]	; 0x54
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	88fa      	ldrh	r2, [r7, #6]
 800c0e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	88fa      	ldrh	r2, [r7, #6]
 800c0f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	669a      	str	r2, [r3, #104]	; 0x68
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c102:	d10e      	bne.n	800c122 <UART_Start_Receive_IT+0x52>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d105      	bne.n	800c118 <UART_Start_Receive_IT+0x48>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c112:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c116:	e01a      	b.n	800c14e <UART_Start_Receive_IT+0x7e>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	22ff      	movs	r2, #255	; 0xff
 800c11c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c120:	e015      	b.n	800c14e <UART_Start_Receive_IT+0x7e>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10d      	bne.n	800c146 <UART_Start_Receive_IT+0x76>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d104      	bne.n	800c13c <UART_Start_Receive_IT+0x6c>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	22ff      	movs	r2, #255	; 0xff
 800c136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c13a:	e008      	b.n	800c14e <UART_Start_Receive_IT+0x7e>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	227f      	movs	r2, #127	; 0x7f
 800c140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c144:	e003      	b.n	800c14e <UART_Start_Receive_IT+0x7e>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2222      	movs	r2, #34	; 0x22
 800c15a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	f043 0301 	orr.w	r3, r3, #1
 800c174:	657b      	str	r3, [r7, #84]	; 0x54
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c17e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c180:	647b      	str	r3, [r7, #68]	; 0x44
 800c182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c186:	e841 2300 	strex	r3, r2, [r1]
 800c18a:	643b      	str	r3, [r7, #64]	; 0x40
 800c18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1e5      	bne.n	800c15e <UART_Start_Receive_IT+0x8e>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c19a:	d107      	bne.n	800c1ac <UART_Start_Receive_IT+0xdc>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d103      	bne.n	800c1ac <UART_Start_Receive_IT+0xdc>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4a22      	ldr	r2, [pc, #136]	; (800c230 <UART_Start_Receive_IT+0x160>)
 800c1a8:	669a      	str	r2, [r3, #104]	; 0x68
 800c1aa:	e002      	b.n	800c1b2 <UART_Start_Receive_IT+0xe2>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4a21      	ldr	r2, [pc, #132]	; (800c234 <UART_Start_Receive_IT+0x164>)
 800c1b0:	669a      	str	r2, [r3, #104]	; 0x68
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d019      	beq.n	800c1ee <UART_Start_Receive_IT+0x11e>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	e853 3f00 	ldrex	r3, [r3]
 800c1c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1da:	633a      	str	r2, [r7, #48]	; 0x30
 800c1dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1e0:	e841 2300 	strex	r3, r2, [r1]
 800c1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1e6      	bne.n	800c1ba <UART_Start_Receive_IT+0xea>
 800c1ec:	e018      	b.n	800c220 <UART_Start_Receive_IT+0x150>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	617b      	str	r3, [r7, #20]
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	e853 3f00 	ldrex	r3, [r3]
 800c1fa:	613b      	str	r3, [r7, #16]
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f043 0320 	orr.w	r3, r3, #32
 800c202:	653b      	str	r3, [r7, #80]	; 0x50
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	461a      	mov	r2, r3
 800c20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20c:	623b      	str	r3, [r7, #32]
 800c20e:	61fa      	str	r2, [r7, #28]
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	6a3a      	ldr	r2, [r7, #32]
 800c214:	e841 2300 	strex	r3, r2, [r1]
 800c218:	61bb      	str	r3, [r7, #24]
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e6      	bne.n	800c1ee <UART_Start_Receive_IT+0x11e>
 800c220:	2300      	movs	r3, #0
 800c222:	4618      	mov	r0, r3
 800c224:	375c      	adds	r7, #92	; 0x5c
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	0800cb33 	.word	0x0800cb33
 800c234:	0800c98b 	.word	0x0800c98b

0800c238 <UART_Start_Receive_DMA>:
 800c238:	b580      	push	{r7, lr}
 800c23a:	b096      	sub	sp, #88	; 0x58
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	80fb      	strh	r3, [r7, #6]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	655a      	str	r2, [r3, #84]	; 0x54
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	88fa      	ldrh	r2, [r7, #6]
 800c250:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2222      	movs	r2, #34	; 0x22
 800c260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d028      	beq.n	800c2be <UART_Start_Receive_DMA+0x86>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c270:	4a3e      	ldr	r2, [pc, #248]	; (800c36c <UART_Start_Receive_DMA+0x134>)
 800c272:	629a      	str	r2, [r3, #40]	; 0x28
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c278:	4a3d      	ldr	r2, [pc, #244]	; (800c370 <UART_Start_Receive_DMA+0x138>)
 800c27a:	62da      	str	r2, [r3, #44]	; 0x2c
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c280:	4a3c      	ldr	r2, [pc, #240]	; (800c374 <UART_Start_Receive_DMA+0x13c>)
 800c282:	631a      	str	r2, [r3, #48]	; 0x30
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c288:	2200      	movs	r2, #0
 800c28a:	635a      	str	r2, [r3, #52]	; 0x34
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3324      	adds	r3, #36	; 0x24
 800c296:	4619      	mov	r1, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29c:	461a      	mov	r2, r3
 800c29e:	88fb      	ldrh	r3, [r7, #6]
 800c2a0:	f7f9 ff3b 	bl	800611a <HAL_DMA_Start_IT>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d009      	beq.n	800c2be <UART_Start_Receive_DMA+0x86>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2210      	movs	r2, #16
 800c2ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2220      	movs	r2, #32
 800c2b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e051      	b.n	800c362 <UART_Start_Receive_DMA+0x12a>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d018      	beq.n	800c2f8 <UART_Start_Receive_DMA+0xc0>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ce:	e853 3f00 	ldrex	r3, [r3]
 800c2d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2da:	657b      	str	r3, [r7, #84]	; 0x54
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2e6:	647a      	str	r2, [r7, #68]	; 0x44
 800c2e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2ec:	e841 2300 	strex	r3, r2, [r1]
 800c2f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1e6      	bne.n	800c2c6 <UART_Start_Receive_DMA+0x8e>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	627b      	str	r3, [r7, #36]	; 0x24
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	f043 0301 	orr.w	r3, r3, #1
 800c30e:	653b      	str	r3, [r7, #80]	; 0x50
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3308      	adds	r3, #8
 800c316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c318:	637a      	str	r2, [r7, #52]	; 0x34
 800c31a:	633b      	str	r3, [r7, #48]	; 0x30
 800c31c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c320:	e841 2300 	strex	r3, r2, [r1]
 800c324:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e5      	bne.n	800c2f8 <UART_Start_Receive_DMA+0xc0>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3308      	adds	r3, #8
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	e853 3f00 	ldrex	r3, [r3]
 800c33a:	613b      	str	r3, [r7, #16]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c342:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3308      	adds	r3, #8
 800c34a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c34c:	623a      	str	r2, [r7, #32]
 800c34e:	61fb      	str	r3, [r7, #28]
 800c350:	69f9      	ldr	r1, [r7, #28]
 800c352:	6a3a      	ldr	r2, [r7, #32]
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e5      	bne.n	800c32c <UART_Start_Receive_DMA+0xf4>
 800c360:	2300      	movs	r3, #0
 800c362:	4618      	mov	r0, r3
 800c364:	3758      	adds	r7, #88	; 0x58
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	0800c53d 	.word	0x0800c53d
 800c370:	0800c663 	.word	0x0800c663
 800c374:	0800c6a1 	.word	0x0800c6a1

0800c378 <UART_EndTxTransfer>:
 800c378:	b480      	push	{r7}
 800c37a:	b089      	sub	sp, #36	; 0x24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	e853 3f00 	ldrex	r3, [r3]
 800c38c:	60bb      	str	r3, [r7, #8]
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c394:	61fb      	str	r3, [r7, #28]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	61bb      	str	r3, [r7, #24]
 800c3a0:	617a      	str	r2, [r7, #20]
 800c3a2:	6979      	ldr	r1, [r7, #20]
 800c3a4:	69ba      	ldr	r2, [r7, #24]
 800c3a6:	e841 2300 	strex	r3, r2, [r1]
 800c3aa:	613b      	str	r3, [r7, #16]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1e6      	bne.n	800c380 <UART_EndTxTransfer+0x8>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2220      	movs	r2, #32
 800c3b6:	67da      	str	r2, [r3, #124]	; 0x7c
 800c3b8:	bf00      	nop
 800c3ba:	3724      	adds	r7, #36	; 0x24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <UART_EndRxTransfer>:
 800c3c4:	b480      	push	{r7}
 800c3c6:	b095      	sub	sp, #84	; 0x54
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	633b      	str	r3, [r7, #48]	; 0x30
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c3ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c3ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e6      	bne.n	800c3cc <UART_EndRxTransfer+0x8>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3308      	adds	r3, #8
 800c404:	623b      	str	r3, [r7, #32]
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	e853 3f00 	ldrex	r3, [r3]
 800c40c:	61fb      	str	r3, [r7, #28]
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	f023 0301 	bic.w	r3, r3, #1
 800c414:	64bb      	str	r3, [r7, #72]	; 0x48
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3308      	adds	r3, #8
 800c41c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c41e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c420:	62bb      	str	r3, [r7, #40]	; 0x28
 800c422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c426:	e841 2300 	strex	r3, r2, [r1]
 800c42a:	627b      	str	r3, [r7, #36]	; 0x24
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1e5      	bne.n	800c3fe <UART_EndRxTransfer+0x3a>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c436:	2b01      	cmp	r3, #1
 800c438:	d118      	bne.n	800c46c <UART_EndRxTransfer+0xa8>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	e853 3f00 	ldrex	r3, [r3]
 800c446:	60bb      	str	r3, [r7, #8]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	f023 0310 	bic.w	r3, r3, #16
 800c44e:	647b      	str	r3, [r7, #68]	; 0x44
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	461a      	mov	r2, r3
 800c456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c458:	61bb      	str	r3, [r7, #24]
 800c45a:	617a      	str	r2, [r7, #20]
 800c45c:	6979      	ldr	r1, [r7, #20]
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	e841 2300 	strex	r3, r2, [r1]
 800c464:	613b      	str	r3, [r7, #16]
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1e6      	bne.n	800c43a <UART_EndRxTransfer+0x76>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2220      	movs	r2, #32
 800c470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	661a      	str	r2, [r3, #96]	; 0x60
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	669a      	str	r2, [r3, #104]	; 0x68
 800c480:	bf00      	nop
 800c482:	3754      	adds	r7, #84	; 0x54
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <UART_DMATransmitCplt>:
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b090      	sub	sp, #64	; 0x40
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	2b20      	cmp	r3, #32
 800c4a0:	d037      	beq.n	800c512 <UART_DMATransmitCplt+0x86>
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	623b      	str	r3, [r7, #32]
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ca:	633a      	str	r2, [r7, #48]	; 0x30
 800c4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4d2:	e841 2300 	strex	r3, r2, [r1]
 800c4d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1e5      	bne.n	800c4aa <UART_DMATransmitCplt+0x1e>
 800c4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	613b      	str	r3, [r7, #16]
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	e853 3f00 	ldrex	r3, [r3]
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fc:	61fb      	str	r3, [r7, #28]
 800c4fe:	61ba      	str	r2, [r7, #24]
 800c500:	69b9      	ldr	r1, [r7, #24]
 800c502:	69fa      	ldr	r2, [r7, #28]
 800c504:	e841 2300 	strex	r3, r2, [r1]
 800c508:	617b      	str	r3, [r7, #20]
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1e6      	bne.n	800c4de <UART_DMATransmitCplt+0x52>
 800c510:	e002      	b.n	800c518 <UART_DMATransmitCplt+0x8c>
 800c512:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c514:	f7f5 fdda 	bl	80020cc <HAL_UART_TxCpltCallback>
 800c518:	bf00      	nop
 800c51a:	3740      	adds	r7, #64	; 0x40
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <UART_DMATxHalfCplt>:
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	60fb      	str	r3, [r7, #12]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f7ff fa0a 	bl	800b948 <HAL_UART_TxHalfCpltCallback>
 800c534:	bf00      	nop
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <UART_DMAReceiveCplt>:
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b09c      	sub	sp, #112	; 0x70
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	2b20      	cmp	r3, #32
 800c550:	d071      	beq.n	800c636 <UART_DMAReceiveCplt+0xfa>
 800c552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c554:	2200      	movs	r2, #0
 800c556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c562:	e853 3f00 	ldrex	r3, [r3]
 800c566:	64bb      	str	r3, [r7, #72]	; 0x48
 800c568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c56a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c56e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	461a      	mov	r2, r3
 800c576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c578:	65bb      	str	r3, [r7, #88]	; 0x58
 800c57a:	657a      	str	r2, [r7, #84]	; 0x54
 800c57c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c57e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c580:	e841 2300 	strex	r3, r2, [r1]
 800c584:	653b      	str	r3, [r7, #80]	; 0x50
 800c586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1e6      	bne.n	800c55a <UART_DMAReceiveCplt+0x1e>
 800c58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3308      	adds	r3, #8
 800c592:	63bb      	str	r3, [r7, #56]	; 0x38
 800c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c596:	e853 3f00 	ldrex	r3, [r3]
 800c59a:	637b      	str	r3, [r7, #52]	; 0x34
 800c59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c59e:	f023 0301 	bic.w	r3, r3, #1
 800c5a2:	667b      	str	r3, [r7, #100]	; 0x64
 800c5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3308      	adds	r3, #8
 800c5aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5ac:	647a      	str	r2, [r7, #68]	; 0x44
 800c5ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c5b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e5      	bne.n	800c58c <UART_DMAReceiveCplt+0x50>
 800c5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	e853 3f00 	ldrex	r3, [r3]
 800c5ce:	623b      	str	r3, [r7, #32]
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5d6:	663b      	str	r3, [r7, #96]	; 0x60
 800c5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3308      	adds	r3, #8
 800c5de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5e0:	633a      	str	r2, [r7, #48]	; 0x30
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e5      	bne.n	800c5c0 <UART_DMAReceiveCplt+0x84>
 800c5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c600:	2b01      	cmp	r3, #1
 800c602:	d118      	bne.n	800c636 <UART_DMAReceiveCplt+0xfa>
 800c604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	613b      	str	r3, [r7, #16]
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	e853 3f00 	ldrex	r3, [r3]
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f023 0310 	bic.w	r3, r3, #16
 800c618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c622:	61fb      	str	r3, [r7, #28]
 800c624:	61ba      	str	r2, [r7, #24]
 800c626:	69b9      	ldr	r1, [r7, #24]
 800c628:	69fa      	ldr	r2, [r7, #28]
 800c62a:	e841 2300 	strex	r3, r2, [r1]
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1e6      	bne.n	800c604 <UART_DMAReceiveCplt+0xc8>
 800c636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c638:	2200      	movs	r2, #0
 800c63a:	665a      	str	r2, [r3, #100]	; 0x64
 800c63c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c63e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c640:	2b01      	cmp	r3, #1
 800c642:	d107      	bne.n	800c654 <UART_DMAReceiveCplt+0x118>
 800c644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c646:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c64a:	4619      	mov	r1, r3
 800c64c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c64e:	f7ff f9ad 	bl	800b9ac <HAL_UARTEx_RxEventCallback>
 800c652:	e002      	b.n	800c65a <UART_DMAReceiveCplt+0x11e>
 800c654:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c656:	f7f5 fd71 	bl	800213c <HAL_UART_RxCpltCallback>
 800c65a:	bf00      	nop
 800c65c:	3770      	adds	r7, #112	; 0x70
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <UART_DMARxHalfCplt>:
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66e:	60fb      	str	r3, [r7, #12]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2201      	movs	r2, #1
 800c674:	665a      	str	r2, [r3, #100]	; 0x64
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d109      	bne.n	800c692 <UART_DMARxHalfCplt+0x30>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c684:	085b      	lsrs	r3, r3, #1
 800c686:	b29b      	uxth	r3, r3
 800c688:	4619      	mov	r1, r3
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff f98e 	bl	800b9ac <HAL_UARTEx_RxEventCallback>
 800c690:	e002      	b.n	800c698 <UART_DMARxHalfCplt+0x36>
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7ff f962 	bl	800b95c <HAL_UART_RxHalfCpltCallback>
 800c698:	bf00      	nop
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <UART_DMAError>:
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ac:	617b      	str	r3, [r7, #20]
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6b2:	613b      	str	r3, [r7, #16]
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6c6:	2b80      	cmp	r3, #128	; 0x80
 800c6c8:	d109      	bne.n	800c6de <UART_DMAError+0x3e>
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	2b21      	cmp	r3, #33	; 0x21
 800c6ce:	d106      	bne.n	800c6de <UART_DMAError+0x3e>
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c6d8:	6978      	ldr	r0, [r7, #20]
 800c6da:	f7ff fe4d 	bl	800c378 <UART_EndTxTransfer>
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e8:	2b40      	cmp	r3, #64	; 0x40
 800c6ea:	d109      	bne.n	800c700 <UART_DMAError+0x60>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2b22      	cmp	r3, #34	; 0x22
 800c6f0:	d106      	bne.n	800c700 <UART_DMAError+0x60>
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c6fa:	6978      	ldr	r0, [r7, #20]
 800c6fc:	f7ff fe62 	bl	800c3c4 <UART_EndRxTransfer>
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c706:	f043 0210 	orr.w	r2, r3, #16
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c710:	6978      	ldr	r0, [r7, #20]
 800c712:	f7ff f92d 	bl	800b970 <HAL_UART_ErrorCallback>
 800c716:	bf00      	nop
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <UART_DMAAbortOnError>:
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7ff f917 	bl	800b970 <HAL_UART_ErrorCallback>
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <UART_DMATxOnlyAbortCallback>:
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2220      	movs	r2, #32
 800c764:	67da      	str	r2, [r3, #124]	; 0x7c
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7ff f90c 	bl	800b984 <HAL_UART_AbortTransmitCpltCallback>
 800c76c:	bf00      	nop
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <UART_DMARxOnlyAbortCallback>:
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	60fb      	str	r3, [r7, #12]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	220f      	movs	r2, #15
 800c790:	621a      	str	r2, [r3, #32]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	699a      	ldr	r2, [r3, #24]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f042 0208 	orr.w	r2, r2, #8
 800c7a0:	619a      	str	r2, [r3, #24]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	661a      	str	r2, [r3, #96]	; 0x60
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f7ff f8f1 	bl	800b998 <HAL_UART_AbortReceiveCpltCallback>
 800c7b6:	bf00      	nop
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <UART_TxISR_8BIT>:
 800c7be:	b480      	push	{r7}
 800c7c0:	b08f      	sub	sp, #60	; 0x3c
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ca:	2b21      	cmp	r3, #33	; 0x21
 800c7cc:	d14d      	bne.n	800c86a <UART_TxISR_8BIT+0xac>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d132      	bne.n	800c840 <UART_TxISR_8BIT+0x82>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	623b      	str	r3, [r7, #32]
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	61fb      	str	r3, [r7, #28]
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7fa:	62ba      	str	r2, [r7, #40]	; 0x28
 800c7fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c800:	e841 2300 	strex	r3, r2, [r1]
 800c804:	627b      	str	r3, [r7, #36]	; 0x24
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e6      	bne.n	800c7da <UART_TxISR_8BIT+0x1c>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	60bb      	str	r3, [r7, #8]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c820:	633b      	str	r3, [r7, #48]	; 0x30
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	61bb      	str	r3, [r7, #24]
 800c82c:	617a      	str	r2, [r7, #20]
 800c82e:	6979      	ldr	r1, [r7, #20]
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	613b      	str	r3, [r7, #16]
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1e6      	bne.n	800c80c <UART_TxISR_8BIT+0x4e>
 800c83e:	e014      	b.n	800c86a <UART_TxISR_8BIT+0xac>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c844:	781a      	ldrb	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	b292      	uxth	r2, r2
 800c84c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	64da      	str	r2, [r3, #76]	; 0x4c
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c85e:	b29b      	uxth	r3, r3
 800c860:	3b01      	subs	r3, #1
 800c862:	b29a      	uxth	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c86a:	bf00      	nop
 800c86c:	373c      	adds	r7, #60	; 0x3c
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <UART_TxISR_16BIT>:
 800c876:	b480      	push	{r7}
 800c878:	b091      	sub	sp, #68	; 0x44
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c882:	2b21      	cmp	r3, #33	; 0x21
 800c884:	d151      	bne.n	800c92a <UART_TxISR_16BIT+0xb4>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d132      	bne.n	800c8f8 <UART_TxISR_16BIT+0x82>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	627b      	str	r3, [r7, #36]	; 0x24
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	e853 3f00 	ldrex	r3, [r3]
 800c89e:	623b      	str	r3, [r7, #32]
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	633b      	str	r3, [r7, #48]	; 0x30
 800c8b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8b8:	e841 2300 	strex	r3, r2, [r1]
 800c8bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1e6      	bne.n	800c892 <UART_TxISR_16BIT+0x1c>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	613b      	str	r3, [r7, #16]
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	e853 3f00 	ldrex	r3, [r3]
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d8:	637b      	str	r3, [r7, #52]	; 0x34
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e2:	61fb      	str	r3, [r7, #28]
 800c8e4:	61ba      	str	r2, [r7, #24]
 800c8e6:	69b9      	ldr	r1, [r7, #24]
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	e841 2300 	strex	r3, r2, [r1]
 800c8ee:	617b      	str	r3, [r7, #20]
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e6      	bne.n	800c8c4 <UART_TxISR_16BIT+0x4e>
 800c8f6:	e018      	b.n	800c92a <UART_TxISR_16BIT+0xb4>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c900:	881a      	ldrh	r2, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c90a:	b292      	uxth	r2, r2
 800c90c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c912:	1c9a      	adds	r2, r3, #2
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	64da      	str	r2, [r3, #76]	; 0x4c
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c91e:	b29b      	uxth	r3, r3
 800c920:	3b01      	subs	r3, #1
 800c922:	b29a      	uxth	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c92a:	bf00      	nop
 800c92c:	3744      	adds	r7, #68	; 0x44
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <UART_EndTransmit_IT>:
 800c936:	b580      	push	{r7, lr}
 800c938:	b088      	sub	sp, #32
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	e853 3f00 	ldrex	r3, [r3]
 800c94a:	60bb      	str	r3, [r7, #8]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c952:	61fb      	str	r3, [r7, #28]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	461a      	mov	r2, r3
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	61bb      	str	r3, [r7, #24]
 800c95e:	617a      	str	r2, [r7, #20]
 800c960:	6979      	ldr	r1, [r7, #20]
 800c962:	69ba      	ldr	r2, [r7, #24]
 800c964:	e841 2300 	strex	r3, r2, [r1]
 800c968:	613b      	str	r3, [r7, #16]
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1e6      	bne.n	800c93e <UART_EndTransmit_IT+0x8>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2220      	movs	r2, #32
 800c974:	67da      	str	r2, [r3, #124]	; 0x7c
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7f5 fba5 	bl	80020cc <HAL_UART_TxCpltCallback>
 800c982:	bf00      	nop
 800c984:	3720      	adds	r7, #32
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <UART_RxISR_8BIT>:
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b09c      	sub	sp, #112	; 0x70
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c998:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9a2:	2b22      	cmp	r3, #34	; 0x22
 800c9a4:	f040 80b9 	bne.w	800cb1a <UART_RxISR_8BIT+0x190>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c9ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c9b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c9b6:	b2d9      	uxtb	r1, r3
 800c9b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9c2:	400a      	ands	r2, r1
 800c9c4:	b2d2      	uxtb	r2, r2
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	655a      	str	r2, [r3, #84]	; 0x54
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f040 809c 	bne.w	800cb2a <UART_RxISR_8BIT+0x1a0>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9fa:	e853 3f00 	ldrex	r3, [r3]
 800c9fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca06:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca10:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca12:	657a      	str	r2, [r7, #84]	; 0x54
 800ca14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca18:	e841 2300 	strex	r3, r2, [r1]
 800ca1c:	653b      	str	r3, [r7, #80]	; 0x50
 800ca1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1e6      	bne.n	800c9f2 <UART_RxISR_8BIT+0x68>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	e853 3f00 	ldrex	r3, [r3]
 800ca32:	637b      	str	r3, [r7, #52]	; 0x34
 800ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca36:	f023 0301 	bic.w	r3, r3, #1
 800ca3a:	667b      	str	r3, [r7, #100]	; 0x64
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3308      	adds	r3, #8
 800ca42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ca44:	647a      	str	r2, [r7, #68]	; 0x44
 800ca46:	643b      	str	r3, [r7, #64]	; 0x40
 800ca48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca4c:	e841 2300 	strex	r3, r2, [r1]
 800ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1e5      	bne.n	800ca24 <UART_RxISR_8BIT+0x9a>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2220      	movs	r2, #32
 800ca5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	669a      	str	r2, [r3, #104]	; 0x68
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	665a      	str	r2, [r3, #100]	; 0x64
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d018      	beq.n	800caac <UART_RxISR_8BIT+0x122>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	e853 3f00 	ldrex	r3, [r3]
 800ca86:	623b      	str	r3, [r7, #32]
 800ca88:	6a3b      	ldr	r3, [r7, #32]
 800ca8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca8e:	663b      	str	r3, [r7, #96]	; 0x60
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	461a      	mov	r2, r3
 800ca96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca98:	633b      	str	r3, [r7, #48]	; 0x30
 800ca9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caa0:	e841 2300 	strex	r3, r2, [r1]
 800caa4:	62bb      	str	r3, [r7, #40]	; 0x28
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1e6      	bne.n	800ca7a <UART_RxISR_8BIT+0xf0>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d12e      	bne.n	800cb12 <UART_RxISR_8BIT+0x188>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	661a      	str	r2, [r3, #96]	; 0x60
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	e853 3f00 	ldrex	r3, [r3]
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f023 0310 	bic.w	r3, r3, #16
 800cace:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	461a      	mov	r2, r3
 800cad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	61ba      	str	r2, [r7, #24]
 800cadc:	69b9      	ldr	r1, [r7, #24]
 800cade:	69fa      	ldr	r2, [r7, #28]
 800cae0:	e841 2300 	strex	r3, r2, [r1]
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1e6      	bne.n	800caba <UART_RxISR_8BIT+0x130>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	f003 0310 	and.w	r3, r3, #16
 800caf6:	2b10      	cmp	r3, #16
 800caf8:	d103      	bne.n	800cb02 <UART_RxISR_8BIT+0x178>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2210      	movs	r2, #16
 800cb00:	621a      	str	r2, [r3, #32]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7fe ff4e 	bl	800b9ac <HAL_UARTEx_RxEventCallback>
 800cb10:	e00b      	b.n	800cb2a <UART_RxISR_8BIT+0x1a0>
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7f5 fb12 	bl	800213c <HAL_UART_RxCpltCallback>
 800cb18:	e007      	b.n	800cb2a <UART_RxISR_8BIT+0x1a0>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f042 0208 	orr.w	r2, r2, #8
 800cb28:	619a      	str	r2, [r3, #24]
 800cb2a:	bf00      	nop
 800cb2c:	3770      	adds	r7, #112	; 0x70
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <UART_RxISR_16BIT>:
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b09c      	sub	sp, #112	; 0x70
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb40:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb4a:	2b22      	cmp	r3, #34	; 0x22
 800cb4c:	f040 80b9 	bne.w	800ccc2 <UART_RxISR_16BIT+0x190>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb60:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800cb64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cb68:	4013      	ands	r3, r2
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb6e:	801a      	strh	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb74:	1c9a      	adds	r2, r3, #2
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	655a      	str	r2, [r3, #84]	; 0x54
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	3b01      	subs	r3, #1
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f040 809c 	bne.w	800ccd2 <UART_RxISR_16BIT+0x1a0>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba2:	e853 3f00 	ldrex	r3, [r3]
 800cba6:	647b      	str	r3, [r7, #68]	; 0x44
 800cba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbae:	667b      	str	r3, [r7, #100]	; 0x64
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbb8:	657b      	str	r3, [r7, #84]	; 0x54
 800cbba:	653a      	str	r2, [r7, #80]	; 0x50
 800cbbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cbc0:	e841 2300 	strex	r3, r2, [r1]
 800cbc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e6      	bne.n	800cb9a <UART_RxISR_16BIT+0x68>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34
 800cbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd6:	e853 3f00 	ldrex	r3, [r3]
 800cbda:	633b      	str	r3, [r7, #48]	; 0x30
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbde:	f023 0301 	bic.w	r3, r3, #1
 800cbe2:	663b      	str	r3, [r7, #96]	; 0x60
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3308      	adds	r3, #8
 800cbea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbec:	643a      	str	r2, [r7, #64]	; 0x40
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbf4:	e841 2300 	strex	r3, r2, [r1]
 800cbf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1e5      	bne.n	800cbcc <UART_RxISR_16BIT+0x9a>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2220      	movs	r2, #32
 800cc04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	669a      	str	r2, [r3, #104]	; 0x68
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	665a      	str	r2, [r3, #100]	; 0x64
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d018      	beq.n	800cc54 <UART_RxISR_16BIT+0x122>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	623b      	str	r3, [r7, #32]
 800cc28:	6a3b      	ldr	r3, [r7, #32]
 800cc2a:	e853 3f00 	ldrex	r3, [r3]
 800cc2e:	61fb      	str	r3, [r7, #28]
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc42:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc48:	e841 2300 	strex	r3, r2, [r1]
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1e6      	bne.n	800cc22 <UART_RxISR_16BIT+0xf0>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d12e      	bne.n	800ccba <UART_RxISR_16BIT+0x188>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	661a      	str	r2, [r3, #96]	; 0x60
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	e853 3f00 	ldrex	r3, [r3]
 800cc6e:	60bb      	str	r3, [r7, #8]
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	f023 0310 	bic.w	r3, r3, #16
 800cc76:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	617a      	str	r2, [r7, #20]
 800cc84:	6979      	ldr	r1, [r7, #20]
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	613b      	str	r3, [r7, #16]
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e6      	bne.n	800cc62 <UART_RxISR_16BIT+0x130>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	69db      	ldr	r3, [r3, #28]
 800cc9a:	f003 0310 	and.w	r3, r3, #16
 800cc9e:	2b10      	cmp	r3, #16
 800cca0:	d103      	bne.n	800ccaa <UART_RxISR_16BIT+0x178>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2210      	movs	r2, #16
 800cca8:	621a      	str	r2, [r3, #32]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7fe fe7a 	bl	800b9ac <HAL_UARTEx_RxEventCallback>
 800ccb8:	e00b      	b.n	800ccd2 <UART_RxISR_16BIT+0x1a0>
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7f5 fa3e 	bl	800213c <HAL_UART_RxCpltCallback>
 800ccc0:	e007      	b.n	800ccd2 <UART_RxISR_16BIT+0x1a0>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	699a      	ldr	r2, [r3, #24]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f042 0208 	orr.w	r2, r2, #8
 800ccd0:	619a      	str	r2, [r3, #24]
 800ccd2:	bf00      	nop
 800ccd4:	3770      	adds	r7, #112	; 0x70
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <HAL_UARTEx_WakeupCallback>:
 800ccda:	b480      	push	{r7}
 800ccdc:	b083      	sub	sp, #12
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	bf00      	nop
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <makeFreeRtosPriority>:
 800ccee:	b480      	push	{r7}
 800ccf0:	b085      	sub	sp, #20
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	80fb      	strh	r3, [r7, #6]
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd00:	2b84      	cmp	r3, #132	; 0x84
 800cd02:	d005      	beq.n	800cd10 <makeFreeRtosPriority+0x22>
 800cd04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	3303      	adds	r3, #3
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4618      	mov	r0, r3
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <inHandlerMode>:
 800cd1e:	b480      	push	{r7}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	f3ef 8305 	mrs	r3, IPSR
 800cd28:	607b      	str	r3, [r7, #4]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	bf14      	ite	ne
 800cd30:	2301      	movne	r3, #1
 800cd32:	2300      	moveq	r3, #0
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <osKernelStart>:
 800cd42:	b580      	push	{r7, lr}
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	f001 fa6f 	bl	800e228 <vTaskStartScheduler>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <osKernelSysTick>:
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	f7ff ffe3 	bl	800cd1e <inHandlerMode>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <osKernelSysTick+0x16>
 800cd5e:	f001 fb8d 	bl	800e47c <xTaskGetTickCountFromISR>
 800cd62:	4603      	mov	r3, r0
 800cd64:	e002      	b.n	800cd6c <osKernelSysTick+0x1c>
 800cd66:	f001 fb79 	bl	800e45c <xTaskGetTickCount>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <osThreadCreate>:
 800cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd72:	b089      	sub	sp, #36	; 0x24
 800cd74:	af04      	add	r7, sp, #16
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d020      	beq.n	800cdc4 <osThreadCreate+0x54>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	699b      	ldr	r3, [r3, #24]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01c      	beq.n	800cdc4 <osThreadCreate+0x54>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685c      	ldr	r4, [r3, #4]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681d      	ldr	r5, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	691e      	ldr	r6, [r3, #16]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff ffa6 	bl	800ccee <makeFreeRtosPriority>
 800cda2:	4601      	mov	r1, r0
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	6992      	ldr	r2, [r2, #24]
 800cdac:	9202      	str	r2, [sp, #8]
 800cdae:	9301      	str	r3, [sp, #4]
 800cdb0:	9100      	str	r1, [sp, #0]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 ffe1 	bl	800dd80 <xTaskCreateStatic>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	e01c      	b.n	800cdfe <osThreadCreate+0x8e>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685c      	ldr	r4, [r3, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681d      	ldr	r5, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	b29e      	uxth	r6, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff ff88 	bl	800ccee <makeFreeRtosPriority>
 800cdde:	4602      	mov	r2, r0
 800cde0:	f107 030c 	add.w	r3, r7, #12
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	9200      	str	r2, [sp, #0]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	4632      	mov	r2, r6
 800cdec:	4629      	mov	r1, r5
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f001 f822 	bl	800de38 <xTaskCreate>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d001      	beq.n	800cdfe <osThreadCreate+0x8e>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	e000      	b.n	800ce00 <osThreadCreate+0x90>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	4618      	mov	r0, r3
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce08 <osDelay>:
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <osDelay+0x16>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	e000      	b.n	800ce20 <osDelay+0x18>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	4618      	mov	r0, r3
 800ce22:	f001 f9cd 	bl	800e1c0 <vTaskDelay>
 800ce26:	2300      	movs	r3, #0
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <osTimerCreate>:
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af02      	add	r7, sp, #8
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	72fb      	strb	r3, [r7, #11]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d013      	beq.n	800ce6e <osTimerCreate+0x3e>
 800ce46:	7afb      	ldrb	r3, [r7, #11]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <osTimerCreate+0x20>
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	e000      	b.n	800ce52 <osTimerCreate+0x22>
 800ce50:	2100      	movs	r1, #0
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	6852      	ldr	r2, [r2, #4]
 800ce5a:	9201      	str	r2, [sp, #4]
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	460a      	mov	r2, r1
 800ce62:	2101      	movs	r1, #1
 800ce64:	480b      	ldr	r0, [pc, #44]	; (800ce94 <osTimerCreate+0x64>)
 800ce66:	f002 f8fe 	bl	800f066 <xTimerCreateStatic>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	e00e      	b.n	800ce8c <osTimerCreate+0x5c>
 800ce6e:	7afb      	ldrb	r3, [r7, #11]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d101      	bne.n	800ce78 <osTimerCreate+0x48>
 800ce74:	2201      	movs	r2, #1
 800ce76:	e000      	b.n	800ce7a <osTimerCreate+0x4a>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2101      	movs	r1, #1
 800ce84:	4803      	ldr	r0, [pc, #12]	; (800ce94 <osTimerCreate+0x64>)
 800ce86:	f002 f8cd 	bl	800f024 <xTimerCreate>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	080119e0 	.word	0x080119e0

0800ce98 <osMutexCreate>:
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d007      	beq.n	800ceb8 <osMutexCreate+0x20>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	4619      	mov	r1, r3
 800ceae:	2001      	movs	r0, #1
 800ceb0:	f000 fa42 	bl	800d338 <xQueueCreateMutexStatic>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	e003      	b.n	800cec0 <osMutexCreate+0x28>
 800ceb8:	2001      	movs	r0, #1
 800ceba:	f000 fa25 	bl	800d308 <xQueueCreateMutex>
 800cebe:	4603      	mov	r3, r0
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <osDelayUntil>:
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	60fb      	str	r3, [r7, #12]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <osDelayUntil+0x18>
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	e000      	b.n	800cee2 <osDelayUntil+0x1a>
 800cee0:	2301      	movs	r3, #1
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f001 f8ed 	bl	800e0c4 <vTaskDelayUntil>
 800ceea:	2300      	movs	r3, #0
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <vListInitialise>:
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f103 0208 	add.w	r2, r3, #8
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	605a      	str	r2, [r3, #4]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f04f 32ff 	mov.w	r2, #4294967295
 800cf0c:	609a      	str	r2, [r3, #8]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f103 0208 	add.w	r2, r3, #8
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	60da      	str	r2, [r3, #12]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f103 0208 	add.w	r2, r3, #8
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	611a      	str	r2, [r3, #16]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]
 800cf28:	bf00      	nop
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <vListInitialiseItem>:
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	611a      	str	r2, [r3, #16]
 800cf42:	bf00      	nop
 800cf44:	370c      	adds	r7, #12
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <vListInsertEnd>:
 800cf4e:	b480      	push	{r7}
 800cf50:	b085      	sub	sp, #20
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	60fb      	str	r3, [r7, #12]
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	605a      	str	r2, [r3, #4]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	689a      	ldr	r2, [r3, #8]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	609a      	str	r2, [r3, #8]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	605a      	str	r2, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	683a      	ldr	r2, [r7, #0]
 800cf78:	609a      	str	r2, [r3, #8]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	611a      	str	r2, [r3, #16]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	1c5a      	adds	r2, r3, #1
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	bf00      	nop
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr

0800cf96 <vListInsert>:
 800cf96:	b480      	push	{r7}
 800cf98:	b085      	sub	sp, #20
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	6039      	str	r1, [r7, #0]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60bb      	str	r3, [r7, #8]
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfac:	d103      	bne.n	800cfb6 <vListInsert+0x20>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	e00c      	b.n	800cfd0 <vListInsert+0x3a>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3308      	adds	r3, #8
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	e002      	b.n	800cfc4 <vListInsert+0x2e>
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d2f6      	bcs.n	800cfbe <vListInsert+0x28>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	685a      	ldr	r2, [r3, #4]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	605a      	str	r2, [r3, #4]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	609a      	str	r2, [r3, #8]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	609a      	str	r2, [r3, #8]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	605a      	str	r2, [r3, #4]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	611a      	str	r2, [r3, #16]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	1c5a      	adds	r2, r3, #1
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	bf00      	nop
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <uxListRemove>:
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	6892      	ldr	r2, [r2, #8]
 800d01e:	609a      	str	r2, [r3, #8]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	6852      	ldr	r2, [r2, #4]
 800d028:	605a      	str	r2, [r3, #4]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	429a      	cmp	r2, r3
 800d032:	d103      	bne.n	800d03c <uxListRemove+0x34>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689a      	ldr	r2, [r3, #8]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	605a      	str	r2, [r3, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	611a      	str	r2, [r3, #16]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	1e5a      	subs	r2, r3, #1
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4618      	mov	r0, r3
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <xQueueGenericReset>:
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10a      	bne.n	800d086 <xQueueGenericReset+0x2a>
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	60bb      	str	r3, [r7, #8]
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <xQueueGenericReset+0x28>
 800d086:	f002 fc3d 	bl	800f904 <vPortEnterCritical>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d092:	68f9      	ldr	r1, [r7, #12]
 800d094:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d096:	fb01 f303 	mul.w	r3, r1, r3
 800d09a:	441a      	add	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	605a      	str	r2, [r3, #4]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	639a      	str	r2, [r3, #56]	; 0x38
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	609a      	str	r2, [r3, #8]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	68f9      	ldr	r1, [r7, #12]
 800d0ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0bc:	fb01 f303 	mul.w	r3, r1, r3
 800d0c0:	441a      	add	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	60da      	str	r2, [r3, #12]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	22ff      	movs	r2, #255	; 0xff
 800d0ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	22ff      	movs	r2, #255	; 0xff
 800d0d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d114      	bne.n	800d106 <xQueueGenericReset+0xaa>
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d01a      	beq.n	800d11a <xQueueGenericReset+0xbe>
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	3310      	adds	r3, #16
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f001 fb49 	bl	800e780 <xTaskRemoveFromEventList>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d012      	beq.n	800d11a <xQueueGenericReset+0xbe>
 800d0f4:	4b0c      	ldr	r3, [pc, #48]	; (800d128 <xQueueGenericReset+0xcc>)
 800d0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	e009      	b.n	800d11a <xQueueGenericReset+0xbe>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3310      	adds	r3, #16
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7ff fef2 	bl	800cef4 <vListInitialise>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3324      	adds	r3, #36	; 0x24
 800d114:	4618      	mov	r0, r3
 800d116:	f7ff feed 	bl	800cef4 <vListInitialise>
 800d11a:	f002 fc23 	bl	800f964 <vPortExitCritical>
 800d11e:	2301      	movs	r3, #1
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	e000ed04 	.word	0xe000ed04

0800d12c <xQueueGenericCreateStatic>:
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b08e      	sub	sp, #56	; 0x38
 800d130:	af02      	add	r7, sp, #8
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
 800d138:	603b      	str	r3, [r7, #0]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d10a      	bne.n	800d156 <xQueueGenericCreateStatic+0x2a>
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	62bb      	str	r3, [r7, #40]	; 0x28
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <xQueueGenericCreateStatic+0x28>
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10a      	bne.n	800d172 <xQueueGenericCreateStatic+0x46>
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	627b      	str	r3, [r7, #36]	; 0x24
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <xQueueGenericCreateStatic+0x44>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <xQueueGenericCreateStatic+0x52>
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <xQueueGenericCreateStatic+0x56>
 800d17e:	2301      	movs	r3, #1
 800d180:	e000      	b.n	800d184 <xQueueGenericCreateStatic+0x58>
 800d182:	2300      	movs	r3, #0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <xQueueGenericCreateStatic+0x72>
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	623b      	str	r3, [r7, #32]
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <xQueueGenericCreateStatic+0x70>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <xQueueGenericCreateStatic+0x7e>
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <xQueueGenericCreateStatic+0x82>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e000      	b.n	800d1b0 <xQueueGenericCreateStatic+0x84>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10a      	bne.n	800d1ca <xQueueGenericCreateStatic+0x9e>
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	61fb      	str	r3, [r7, #28]
 800d1c6:	bf00      	nop
 800d1c8:	e7fe      	b.n	800d1c8 <xQueueGenericCreateStatic+0x9c>
 800d1ca:	2348      	movs	r3, #72	; 0x48
 800d1cc:	617b      	str	r3, [r7, #20]
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	2b48      	cmp	r3, #72	; 0x48
 800d1d2:	d00a      	beq.n	800d1ea <xQueueGenericCreateStatic+0xbe>
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	61bb      	str	r3, [r7, #24]
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <xQueueGenericCreateStatic+0xbc>
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00d      	beq.n	800d210 <xQueueGenericCreateStatic+0xe4>
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	4613      	mov	r3, r2
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	68b9      	ldr	r1, [r7, #8]
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 f843 	bl	800d296 <prvInitialiseNewQueue>
 800d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d212:	4618      	mov	r0, r3
 800d214:	3730      	adds	r7, #48	; 0x30
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <xQueueGenericCreate>:
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b08a      	sub	sp, #40	; 0x28
 800d21e:	af02      	add	r7, sp, #8
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	60b9      	str	r1, [r7, #8]
 800d224:	4613      	mov	r3, r2
 800d226:	71fb      	strb	r3, [r7, #7]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10a      	bne.n	800d244 <xQueueGenericCreate+0x2a>
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	613b      	str	r3, [r7, #16]
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <xQueueGenericCreate+0x28>
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d102      	bne.n	800d250 <xQueueGenericCreate+0x36>
 800d24a:	2300      	movs	r3, #0
 800d24c:	61fb      	str	r3, [r7, #28]
 800d24e:	e004      	b.n	800d25a <xQueueGenericCreate+0x40>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	fb02 f303 	mul.w	r3, r2, r3
 800d258:	61fb      	str	r3, [r7, #28]
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	3348      	adds	r3, #72	; 0x48
 800d25e:	4618      	mov	r0, r3
 800d260:	f002 fc72 	bl	800fb48 <pvPortMalloc>
 800d264:	61b8      	str	r0, [r7, #24]
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00f      	beq.n	800d28c <xQueueGenericCreate+0x72>
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	3348      	adds	r3, #72	; 0x48
 800d270:	617b      	str	r3, [r7, #20]
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	2200      	movs	r2, #0
 800d276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d27a:	79fa      	ldrb	r2, [r7, #7]
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	4613      	mov	r3, r2
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	68b9      	ldr	r1, [r7, #8]
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 f805 	bl	800d296 <prvInitialiseNewQueue>
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	4618      	mov	r0, r3
 800d290:	3720      	adds	r7, #32
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <prvInitialiseNewQueue>:
 800d296:	b580      	push	{r7, lr}
 800d298:	b084      	sub	sp, #16
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	60f8      	str	r0, [r7, #12]
 800d29e:	60b9      	str	r1, [r7, #8]
 800d2a0:	607a      	str	r2, [r7, #4]
 800d2a2:	70fb      	strb	r3, [r7, #3]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d103      	bne.n	800d2b2 <prvInitialiseNewQueue+0x1c>
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	69ba      	ldr	r2, [r7, #24]
 800d2ae:	601a      	str	r2, [r3, #0]
 800d2b0:	e002      	b.n	800d2b8 <prvInitialiseNewQueue+0x22>
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	63da      	str	r2, [r3, #60]	; 0x3c
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	641a      	str	r2, [r3, #64]	; 0x40
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	69b8      	ldr	r0, [r7, #24]
 800d2c8:	f7ff fec8 	bl	800d05c <xQueueGenericReset>
 800d2cc:	bf00      	nop
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <prvInitialiseMutex>:
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00e      	beq.n	800d300 <prvInitialiseMutex+0x2c>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	605a      	str	r2, [r3, #4]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	60da      	str	r2, [r3, #12]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f838 	bl	800d370 <xQueueGenericSend>
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <xQueueCreateMutex>:
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	4603      	mov	r3, r0
 800d310:	71fb      	strb	r3, [r7, #7]
 800d312:	2301      	movs	r3, #1
 800d314:	617b      	str	r3, [r7, #20]
 800d316:	2300      	movs	r3, #0
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	461a      	mov	r2, r3
 800d31e:	6939      	ldr	r1, [r7, #16]
 800d320:	6978      	ldr	r0, [r7, #20]
 800d322:	f7ff ff7a 	bl	800d21a <xQueueGenericCreate>
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f7ff ffd3 	bl	800d2d4 <prvInitialiseMutex>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	4618      	mov	r0, r3
 800d332:	3718      	adds	r7, #24
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <xQueueCreateMutexStatic>:
 800d338:	b580      	push	{r7, lr}
 800d33a:	b088      	sub	sp, #32
 800d33c:	af02      	add	r7, sp, #8
 800d33e:	4603      	mov	r3, r0
 800d340:	6039      	str	r1, [r7, #0]
 800d342:	71fb      	strb	r3, [r7, #7]
 800d344:	2301      	movs	r3, #1
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	2300      	movs	r3, #0
 800d34a:	613b      	str	r3, [r7, #16]
 800d34c:	79fb      	ldrb	r3, [r7, #7]
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2200      	movs	r2, #0
 800d354:	6939      	ldr	r1, [r7, #16]
 800d356:	6978      	ldr	r0, [r7, #20]
 800d358:	f7ff fee8 	bl	800d12c <xQueueGenericCreateStatic>
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f7ff ffb8 	bl	800d2d4 <prvInitialiseMutex>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <xQueueGenericSend>:
 800d370:	b580      	push	{r7, lr}
 800d372:	b08e      	sub	sp, #56	; 0x38
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
 800d37c:	603b      	str	r3, [r7, #0]
 800d37e:	2300      	movs	r3, #0
 800d380:	637b      	str	r3, [r7, #52]	; 0x34
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	633b      	str	r3, [r7, #48]	; 0x30
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10a      	bne.n	800d3a2 <xQueueGenericSend+0x32>
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <xQueueGenericSend+0x30>
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d103      	bne.n	800d3b0 <xQueueGenericSend+0x40>
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <xQueueGenericSend+0x44>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e000      	b.n	800d3b6 <xQueueGenericSend+0x46>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10a      	bne.n	800d3d0 <xQueueGenericSend+0x60>
 800d3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3be:	f383 8811 	msr	BASEPRI, r3
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d3cc:	bf00      	nop
 800d3ce:	e7fe      	b.n	800d3ce <xQueueGenericSend+0x5e>
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d103      	bne.n	800d3de <xQueueGenericSend+0x6e>
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d101      	bne.n	800d3e2 <xQueueGenericSend+0x72>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e000      	b.n	800d3e4 <xQueueGenericSend+0x74>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10a      	bne.n	800d3fe <xQueueGenericSend+0x8e>
 800d3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ec:	f383 8811 	msr	BASEPRI, r3
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	623b      	str	r3, [r7, #32]
 800d3fa:	bf00      	nop
 800d3fc:	e7fe      	b.n	800d3fc <xQueueGenericSend+0x8c>
 800d3fe:	f001 fb85 	bl	800eb0c <xTaskGetSchedulerState>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d102      	bne.n	800d40e <xQueueGenericSend+0x9e>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <xQueueGenericSend+0xa2>
 800d40e:	2301      	movs	r3, #1
 800d410:	e000      	b.n	800d414 <xQueueGenericSend+0xa4>
 800d412:	2300      	movs	r3, #0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d10a      	bne.n	800d42e <xQueueGenericSend+0xbe>
 800d418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41c:	f383 8811 	msr	BASEPRI, r3
 800d420:	f3bf 8f6f 	isb	sy
 800d424:	f3bf 8f4f 	dsb	sy
 800d428:	61fb      	str	r3, [r7, #28]
 800d42a:	bf00      	nop
 800d42c:	e7fe      	b.n	800d42c <xQueueGenericSend+0xbc>
 800d42e:	f002 fa69 	bl	800f904 <vPortEnterCritical>
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d302      	bcc.n	800d444 <xQueueGenericSend+0xd4>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b02      	cmp	r3, #2
 800d442:	d129      	bne.n	800d498 <xQueueGenericSend+0x128>
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	68b9      	ldr	r1, [r7, #8]
 800d448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d44a:	f000 fb2b 	bl	800daa4 <prvCopyDataToQueue>
 800d44e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d454:	2b00      	cmp	r3, #0
 800d456:	d010      	beq.n	800d47a <xQueueGenericSend+0x10a>
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	3324      	adds	r3, #36	; 0x24
 800d45c:	4618      	mov	r0, r3
 800d45e:	f001 f98f 	bl	800e780 <xTaskRemoveFromEventList>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d013      	beq.n	800d490 <xQueueGenericSend+0x120>
 800d468:	4b3f      	ldr	r3, [pc, #252]	; (800d568 <xQueueGenericSend+0x1f8>)
 800d46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46e:	601a      	str	r2, [r3, #0]
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	e00a      	b.n	800d490 <xQueueGenericSend+0x120>
 800d47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d007      	beq.n	800d490 <xQueueGenericSend+0x120>
 800d480:	4b39      	ldr	r3, [pc, #228]	; (800d568 <xQueueGenericSend+0x1f8>)
 800d482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d486:	601a      	str	r2, [r3, #0]
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f002 fa68 	bl	800f964 <vPortExitCritical>
 800d494:	2301      	movs	r3, #1
 800d496:	e063      	b.n	800d560 <xQueueGenericSend+0x1f0>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d103      	bne.n	800d4a6 <xQueueGenericSend+0x136>
 800d49e:	f002 fa61 	bl	800f964 <vPortExitCritical>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e05c      	b.n	800d560 <xQueueGenericSend+0x1f0>
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <xQueueGenericSend+0x14a>
 800d4ac:	f107 0314 	add.w	r3, r7, #20
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f001 f9c7 	bl	800e844 <vTaskInternalSetTimeOutState>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ba:	f002 fa53 	bl	800f964 <vPortExitCritical>
 800d4be:	f000 ff23 	bl	800e308 <vTaskSuspendAll>
 800d4c2:	f002 fa1f 	bl	800f904 <vPortEnterCritical>
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4cc:	b25b      	sxtb	r3, r3
 800d4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d2:	d103      	bne.n	800d4dc <xQueueGenericSend+0x16c>
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4e2:	b25b      	sxtb	r3, r3
 800d4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e8:	d103      	bne.n	800d4f2 <xQueueGenericSend+0x182>
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4f2:	f002 fa37 	bl	800f964 <vPortExitCritical>
 800d4f6:	1d3a      	adds	r2, r7, #4
 800d4f8:	f107 0314 	add.w	r3, r7, #20
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f001 f9b6 	bl	800e870 <xTaskCheckForTimeOut>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d124      	bne.n	800d554 <xQueueGenericSend+0x1e4>
 800d50a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d50c:	f000 fbc2 	bl	800dc94 <prvIsQueueFull>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d018      	beq.n	800d548 <xQueueGenericSend+0x1d8>
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	3310      	adds	r3, #16
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	4611      	mov	r1, r2
 800d51e:	4618      	mov	r0, r3
 800d520:	f001 f8de 	bl	800e6e0 <vTaskPlaceOnEventList>
 800d524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d526:	f000 fb4d 	bl	800dbc4 <prvUnlockQueue>
 800d52a:	f000 fefb 	bl	800e324 <xTaskResumeAll>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	f47f af7c 	bne.w	800d42e <xQueueGenericSend+0xbe>
 800d536:	4b0c      	ldr	r3, [pc, #48]	; (800d568 <xQueueGenericSend+0x1f8>)
 800d538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	e772      	b.n	800d42e <xQueueGenericSend+0xbe>
 800d548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d54a:	f000 fb3b 	bl	800dbc4 <prvUnlockQueue>
 800d54e:	f000 fee9 	bl	800e324 <xTaskResumeAll>
 800d552:	e76c      	b.n	800d42e <xQueueGenericSend+0xbe>
 800d554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d556:	f000 fb35 	bl	800dbc4 <prvUnlockQueue>
 800d55a:	f000 fee3 	bl	800e324 <xTaskResumeAll>
 800d55e:	2300      	movs	r3, #0
 800d560:	4618      	mov	r0, r3
 800d562:	3738      	adds	r7, #56	; 0x38
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	e000ed04 	.word	0xe000ed04

0800d56c <xQueueGenericSendFromISR>:
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b08e      	sub	sp, #56	; 0x38
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	603b      	str	r3, [r7, #0]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	633b      	str	r3, [r7, #48]	; 0x30
 800d57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10a      	bne.n	800d59a <xQueueGenericSendFromISR+0x2e>
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	627b      	str	r3, [r7, #36]	; 0x24
 800d596:	bf00      	nop
 800d598:	e7fe      	b.n	800d598 <xQueueGenericSendFromISR+0x2c>
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d103      	bne.n	800d5a8 <xQueueGenericSendFromISR+0x3c>
 800d5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <xQueueGenericSendFromISR+0x40>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e000      	b.n	800d5ae <xQueueGenericSendFromISR+0x42>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10a      	bne.n	800d5c8 <xQueueGenericSendFromISR+0x5c>
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	623b      	str	r3, [r7, #32]
 800d5c4:	bf00      	nop
 800d5c6:	e7fe      	b.n	800d5c6 <xQueueGenericSendFromISR+0x5a>
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d103      	bne.n	800d5d6 <xQueueGenericSendFromISR+0x6a>
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d101      	bne.n	800d5da <xQueueGenericSendFromISR+0x6e>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e000      	b.n	800d5dc <xQueueGenericSendFromISR+0x70>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10a      	bne.n	800d5f6 <xQueueGenericSendFromISR+0x8a>
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	61fb      	str	r3, [r7, #28]
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xQueueGenericSendFromISR+0x88>
 800d5f6:	f002 fa67 	bl	800fac8 <vPortValidateInterruptPriority>
 800d5fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	f383 8811 	msr	BASEPRI, r3
 800d606:	f3bf 8f6f 	isb	sy
 800d60a:	f3bf 8f4f 	dsb	sy
 800d60e:	61ba      	str	r2, [r7, #24]
 800d610:	617b      	str	r3, [r7, #20]
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d61e:	429a      	cmp	r2, r3
 800d620:	d302      	bcc.n	800d628 <xQueueGenericSendFromISR+0xbc>
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d12c      	bne.n	800d682 <xQueueGenericSendFromISR+0x116>
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	68b9      	ldr	r1, [r7, #8]
 800d636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d638:	f000 fa34 	bl	800daa4 <prvCopyDataToQueue>
 800d63c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d644:	d112      	bne.n	800d66c <xQueueGenericSendFromISR+0x100>
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d016      	beq.n	800d67c <xQueueGenericSendFromISR+0x110>
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	3324      	adds	r3, #36	; 0x24
 800d652:	4618      	mov	r0, r3
 800d654:	f001 f894 	bl	800e780 <xTaskRemoveFromEventList>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00e      	beq.n	800d67c <xQueueGenericSendFromISR+0x110>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00b      	beq.n	800d67c <xQueueGenericSendFromISR+0x110>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	601a      	str	r2, [r3, #0]
 800d66a:	e007      	b.n	800d67c <xQueueGenericSendFromISR+0x110>
 800d66c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d670:	3301      	adds	r3, #1
 800d672:	b2db      	uxtb	r3, r3
 800d674:	b25a      	sxtb	r2, r3
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d67c:	2301      	movs	r3, #1
 800d67e:	637b      	str	r3, [r7, #52]	; 0x34
 800d680:	e001      	b.n	800d686 <xQueueGenericSendFromISR+0x11a>
 800d682:	2300      	movs	r3, #0
 800d684:	637b      	str	r3, [r7, #52]	; 0x34
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	613b      	str	r3, [r7, #16]
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	bf00      	nop
 800d692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d694:	4618      	mov	r0, r3
 800d696:	3738      	adds	r7, #56	; 0x38
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <xQueueReceive>:
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b08c      	sub	sp, #48	; 0x30
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d10a      	bne.n	800d6cc <xQueueReceive+0x30>
 800d6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	623b      	str	r3, [r7, #32]
 800d6c8:	bf00      	nop
 800d6ca:	e7fe      	b.n	800d6ca <xQueueReceive+0x2e>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d103      	bne.n	800d6da <xQueueReceive+0x3e>
 800d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <xQueueReceive+0x42>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e000      	b.n	800d6e0 <xQueueReceive+0x44>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10a      	bne.n	800d6fa <xQueueReceive+0x5e>
 800d6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	bf00      	nop
 800d6f8:	e7fe      	b.n	800d6f8 <xQueueReceive+0x5c>
 800d6fa:	f001 fa07 	bl	800eb0c <xTaskGetSchedulerState>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d102      	bne.n	800d70a <xQueueReceive+0x6e>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <xQueueReceive+0x72>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e000      	b.n	800d710 <xQueueReceive+0x74>
 800d70e:	2300      	movs	r3, #0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10a      	bne.n	800d72a <xQueueReceive+0x8e>
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	61bb      	str	r3, [r7, #24]
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <xQueueReceive+0x8c>
 800d72a:	f002 f8eb 	bl	800f904 <vPortEnterCritical>
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d732:	627b      	str	r3, [r7, #36]	; 0x24
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	2b00      	cmp	r3, #0
 800d738:	d01f      	beq.n	800d77a <xQueueReceive+0xde>
 800d73a:	68b9      	ldr	r1, [r7, #8]
 800d73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d73e:	f000 fa1b 	bl	800db78 <prvCopyDataFromQueue>
 800d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d744:	1e5a      	subs	r2, r3, #1
 800d746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d748:	639a      	str	r2, [r3, #56]	; 0x38
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00f      	beq.n	800d772 <xQueueReceive+0xd6>
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	3310      	adds	r3, #16
 800d756:	4618      	mov	r0, r3
 800d758:	f001 f812 	bl	800e780 <xTaskRemoveFromEventList>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d007      	beq.n	800d772 <xQueueReceive+0xd6>
 800d762:	4b3d      	ldr	r3, [pc, #244]	; (800d858 <xQueueReceive+0x1bc>)
 800d764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f002 f8f7 	bl	800f964 <vPortExitCritical>
 800d776:	2301      	movs	r3, #1
 800d778:	e069      	b.n	800d84e <xQueueReceive+0x1b2>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d103      	bne.n	800d788 <xQueueReceive+0xec>
 800d780:	f002 f8f0 	bl	800f964 <vPortExitCritical>
 800d784:	2300      	movs	r3, #0
 800d786:	e062      	b.n	800d84e <xQueueReceive+0x1b2>
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d106      	bne.n	800d79c <xQueueReceive+0x100>
 800d78e:	f107 0310 	add.w	r3, r7, #16
 800d792:	4618      	mov	r0, r3
 800d794:	f001 f856 	bl	800e844 <vTaskInternalSetTimeOutState>
 800d798:	2301      	movs	r3, #1
 800d79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d79c:	f002 f8e2 	bl	800f964 <vPortExitCritical>
 800d7a0:	f000 fdb2 	bl	800e308 <vTaskSuspendAll>
 800d7a4:	f002 f8ae 	bl	800f904 <vPortEnterCritical>
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ae:	b25b      	sxtb	r3, r3
 800d7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b4:	d103      	bne.n	800d7be <xQueueReceive+0x122>
 800d7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7c4:	b25b      	sxtb	r3, r3
 800d7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ca:	d103      	bne.n	800d7d4 <xQueueReceive+0x138>
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7d4:	f002 f8c6 	bl	800f964 <vPortExitCritical>
 800d7d8:	1d3a      	adds	r2, r7, #4
 800d7da:	f107 0310 	add.w	r3, r7, #16
 800d7de:	4611      	mov	r1, r2
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f001 f845 	bl	800e870 <xTaskCheckForTimeOut>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d123      	bne.n	800d834 <xQueueReceive+0x198>
 800d7ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ee:	f000 fa3b 	bl	800dc68 <prvIsQueueEmpty>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d017      	beq.n	800d828 <xQueueReceive+0x18c>
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	3324      	adds	r3, #36	; 0x24
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	4611      	mov	r1, r2
 800d800:	4618      	mov	r0, r3
 800d802:	f000 ff6d 	bl	800e6e0 <vTaskPlaceOnEventList>
 800d806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d808:	f000 f9dc 	bl	800dbc4 <prvUnlockQueue>
 800d80c:	f000 fd8a 	bl	800e324 <xTaskResumeAll>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d189      	bne.n	800d72a <xQueueReceive+0x8e>
 800d816:	4b10      	ldr	r3, [pc, #64]	; (800d858 <xQueueReceive+0x1bc>)
 800d818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	e780      	b.n	800d72a <xQueueReceive+0x8e>
 800d828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d82a:	f000 f9cb 	bl	800dbc4 <prvUnlockQueue>
 800d82e:	f000 fd79 	bl	800e324 <xTaskResumeAll>
 800d832:	e77a      	b.n	800d72a <xQueueReceive+0x8e>
 800d834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d836:	f000 f9c5 	bl	800dbc4 <prvUnlockQueue>
 800d83a:	f000 fd73 	bl	800e324 <xTaskResumeAll>
 800d83e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d840:	f000 fa12 	bl	800dc68 <prvIsQueueEmpty>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	f43f af6f 	beq.w	800d72a <xQueueReceive+0x8e>
 800d84c:	2300      	movs	r3, #0
 800d84e:	4618      	mov	r0, r3
 800d850:	3730      	adds	r7, #48	; 0x30
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <xQueueSemaphoreTake>:
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08e      	sub	sp, #56	; 0x38
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
 800d866:	2300      	movs	r3, #0
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d86e:	2300      	movs	r3, #0
 800d870:	633b      	str	r3, [r7, #48]	; 0x30
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10a      	bne.n	800d88e <xQueueSemaphoreTake+0x32>
 800d878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	623b      	str	r3, [r7, #32]
 800d88a:	bf00      	nop
 800d88c:	e7fe      	b.n	800d88c <xQueueSemaphoreTake+0x30>
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00a      	beq.n	800d8ac <xQueueSemaphoreTake+0x50>
 800d896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89a:	f383 8811 	msr	BASEPRI, r3
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	61fb      	str	r3, [r7, #28]
 800d8a8:	bf00      	nop
 800d8aa:	e7fe      	b.n	800d8aa <xQueueSemaphoreTake+0x4e>
 800d8ac:	f001 f92e 	bl	800eb0c <xTaskGetSchedulerState>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <xQueueSemaphoreTake+0x60>
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <xQueueSemaphoreTake+0x64>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e000      	b.n	800d8c2 <xQueueSemaphoreTake+0x66>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10a      	bne.n	800d8dc <xQueueSemaphoreTake+0x80>
 800d8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	61bb      	str	r3, [r7, #24]
 800d8d8:	bf00      	nop
 800d8da:	e7fe      	b.n	800d8da <xQueueSemaphoreTake+0x7e>
 800d8dc:	f002 f812 	bl	800f904 <vPortEnterCritical>
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d024      	beq.n	800d936 <xQueueSemaphoreTake+0xda>
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ee:	1e5a      	subs	r2, r3, #1
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	639a      	str	r2, [r3, #56]	; 0x38
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d104      	bne.n	800d906 <xQueueSemaphoreTake+0xaa>
 800d8fc:	f001 fad0 	bl	800eea0 <pvTaskIncrementMutexHeldCount>
 800d900:	4602      	mov	r2, r0
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	605a      	str	r2, [r3, #4]
 800d906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00f      	beq.n	800d92e <xQueueSemaphoreTake+0xd2>
 800d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d910:	3310      	adds	r3, #16
 800d912:	4618      	mov	r0, r3
 800d914:	f000 ff34 	bl	800e780 <xTaskRemoveFromEventList>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d007      	beq.n	800d92e <xQueueSemaphoreTake+0xd2>
 800d91e:	4b54      	ldr	r3, [pc, #336]	; (800da70 <xQueueSemaphoreTake+0x214>)
 800d920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f002 f819 	bl	800f964 <vPortExitCritical>
 800d932:	2301      	movs	r3, #1
 800d934:	e097      	b.n	800da66 <xQueueSemaphoreTake+0x20a>
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d111      	bne.n	800d960 <xQueueSemaphoreTake+0x104>
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <xQueueSemaphoreTake+0xfc>
 800d942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d946:	f383 8811 	msr	BASEPRI, r3
 800d94a:	f3bf 8f6f 	isb	sy
 800d94e:	f3bf 8f4f 	dsb	sy
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	bf00      	nop
 800d956:	e7fe      	b.n	800d956 <xQueueSemaphoreTake+0xfa>
 800d958:	f002 f804 	bl	800f964 <vPortExitCritical>
 800d95c:	2300      	movs	r3, #0
 800d95e:	e082      	b.n	800da66 <xQueueSemaphoreTake+0x20a>
 800d960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d962:	2b00      	cmp	r3, #0
 800d964:	d106      	bne.n	800d974 <xQueueSemaphoreTake+0x118>
 800d966:	f107 030c 	add.w	r3, r7, #12
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 ff6a 	bl	800e844 <vTaskInternalSetTimeOutState>
 800d970:	2301      	movs	r3, #1
 800d972:	637b      	str	r3, [r7, #52]	; 0x34
 800d974:	f001 fff6 	bl	800f964 <vPortExitCritical>
 800d978:	f000 fcc6 	bl	800e308 <vTaskSuspendAll>
 800d97c:	f001 ffc2 	bl	800f904 <vPortEnterCritical>
 800d980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d986:	b25b      	sxtb	r3, r3
 800d988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98c:	d103      	bne.n	800d996 <xQueueSemaphoreTake+0x13a>
 800d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d99c:	b25b      	sxtb	r3, r3
 800d99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a2:	d103      	bne.n	800d9ac <xQueueSemaphoreTake+0x150>
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9ac:	f001 ffda 	bl	800f964 <vPortExitCritical>
 800d9b0:	463a      	mov	r2, r7
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 ff59 	bl	800e870 <xTaskCheckForTimeOut>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d132      	bne.n	800da2a <xQueueSemaphoreTake+0x1ce>
 800d9c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9c6:	f000 f94f 	bl	800dc68 <prvIsQueueEmpty>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d026      	beq.n	800da1e <xQueueSemaphoreTake+0x1c2>
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d109      	bne.n	800d9ec <xQueueSemaphoreTake+0x190>
 800d9d8:	f001 ff94 	bl	800f904 <vPortEnterCritical>
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f001 f8b1 	bl	800eb48 <xTaskPriorityInherit>
 800d9e6:	6338      	str	r0, [r7, #48]	; 0x30
 800d9e8:	f001 ffbc 	bl	800f964 <vPortExitCritical>
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	3324      	adds	r3, #36	; 0x24
 800d9f0:	683a      	ldr	r2, [r7, #0]
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 fe73 	bl	800e6e0 <vTaskPlaceOnEventList>
 800d9fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9fc:	f000 f8e2 	bl	800dbc4 <prvUnlockQueue>
 800da00:	f000 fc90 	bl	800e324 <xTaskResumeAll>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	f47f af68 	bne.w	800d8dc <xQueueSemaphoreTake+0x80>
 800da0c:	4b18      	ldr	r3, [pc, #96]	; (800da70 <xQueueSemaphoreTake+0x214>)
 800da0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da12:	601a      	str	r2, [r3, #0]
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	e75e      	b.n	800d8dc <xQueueSemaphoreTake+0x80>
 800da1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da20:	f000 f8d0 	bl	800dbc4 <prvUnlockQueue>
 800da24:	f000 fc7e 	bl	800e324 <xTaskResumeAll>
 800da28:	e758      	b.n	800d8dc <xQueueSemaphoreTake+0x80>
 800da2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da2c:	f000 f8ca 	bl	800dbc4 <prvUnlockQueue>
 800da30:	f000 fc78 	bl	800e324 <xTaskResumeAll>
 800da34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da36:	f000 f917 	bl	800dc68 <prvIsQueueEmpty>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f43f af4d 	beq.w	800d8dc <xQueueSemaphoreTake+0x80>
 800da42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00d      	beq.n	800da64 <xQueueSemaphoreTake+0x208>
 800da48:	f001 ff5c 	bl	800f904 <vPortEnterCritical>
 800da4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da4e:	f000 f811 	bl	800da74 <prvGetDisinheritPriorityAfterTimeout>
 800da52:	6278      	str	r0, [r7, #36]	; 0x24
 800da54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da5a:	4618      	mov	r0, r3
 800da5c:	f001 f980 	bl	800ed60 <vTaskPriorityDisinheritAfterTimeout>
 800da60:	f001 ff80 	bl	800f964 <vPortExitCritical>
 800da64:	2300      	movs	r3, #0
 800da66:	4618      	mov	r0, r3
 800da68:	3738      	adds	r7, #56	; 0x38
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	e000ed04 	.word	0xe000ed04

0800da74 <prvGetDisinheritPriorityAfterTimeout>:
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da80:	2b00      	cmp	r3, #0
 800da82:	d006      	beq.n	800da92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f1c3 0307 	rsb	r3, r3, #7
 800da8e:	60fb      	str	r3, [r7, #12]
 800da90:	e001      	b.n	800da96 <prvGetDisinheritPriorityAfterTimeout+0x22>
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	4618      	mov	r0, r3
 800da9a:	3714      	adds	r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <prvCopyDataToQueue>:
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	2300      	movs	r3, #0
 800dab2:	617b      	str	r3, [r7, #20]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab8:	613b      	str	r3, [r7, #16]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10d      	bne.n	800dade <prvCopyDataToQueue+0x3a>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d14d      	bne.n	800db66 <prvCopyDataToQueue+0xc2>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	4618      	mov	r0, r3
 800dad0:	f001 f8c0 	bl	800ec54 <xTaskPriorityDisinherit>
 800dad4:	6178      	str	r0, [r7, #20]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2200      	movs	r2, #0
 800dada:	605a      	str	r2, [r3, #4]
 800dadc:	e043      	b.n	800db66 <prvCopyDataToQueue+0xc2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d119      	bne.n	800db18 <prvCopyDataToQueue+0x74>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6898      	ldr	r0, [r3, #8]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daec:	461a      	mov	r2, r3
 800daee:	68b9      	ldr	r1, [r7, #8]
 800daf0:	f002 fc16 	bl	8010320 <memcpy>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	689a      	ldr	r2, [r3, #8]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafc:	441a      	add	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	609a      	str	r2, [r3, #8]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	689a      	ldr	r2, [r3, #8]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d32b      	bcc.n	800db66 <prvCopyDataToQueue+0xc2>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	609a      	str	r2, [r3, #8]
 800db16:	e026      	b.n	800db66 <prvCopyDataToQueue+0xc2>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	68d8      	ldr	r0, [r3, #12]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db20:	461a      	mov	r2, r3
 800db22:	68b9      	ldr	r1, [r7, #8]
 800db24:	f002 fbfc 	bl	8010320 <memcpy>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68da      	ldr	r2, [r3, #12]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db30:	425b      	negs	r3, r3
 800db32:	441a      	add	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	60da      	str	r2, [r3, #12]
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	68da      	ldr	r2, [r3, #12]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	429a      	cmp	r2, r3
 800db42:	d207      	bcs.n	800db54 <prvCopyDataToQueue+0xb0>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db4c:	425b      	negs	r3, r3
 800db4e:	441a      	add	r2, r3
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	60da      	str	r2, [r3, #12]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b02      	cmp	r3, #2
 800db58:	d105      	bne.n	800db66 <prvCopyDataToQueue+0xc2>
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <prvCopyDataToQueue+0xc2>
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	3b01      	subs	r3, #1
 800db64:	613b      	str	r3, [r7, #16]
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	1c5a      	adds	r2, r3, #1
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	639a      	str	r2, [r3, #56]	; 0x38
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	4618      	mov	r0, r3
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <prvCopyDataFromQueue>:
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	2b00      	cmp	r3, #0
 800db88:	d018      	beq.n	800dbbc <prvCopyDataFromQueue+0x44>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68da      	ldr	r2, [r3, #12]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db92:	441a      	add	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	60da      	str	r2, [r3, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68da      	ldr	r2, [r3, #12]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d303      	bcc.n	800dbac <prvCopyDataFromQueue+0x34>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	60da      	str	r2, [r3, #12]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68d9      	ldr	r1, [r3, #12]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	6838      	ldr	r0, [r7, #0]
 800dbb8:	f002 fbb2 	bl	8010320 <memcpy>
 800dbbc:	bf00      	nop
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <prvUnlockQueue>:
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	f001 fe9a 	bl	800f904 <vPortEnterCritical>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbd6:	73fb      	strb	r3, [r7, #15]
 800dbd8:	e011      	b.n	800dbfe <prvUnlockQueue+0x3a>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d012      	beq.n	800dc08 <prvUnlockQueue+0x44>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3324      	adds	r3, #36	; 0x24
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 fdca 	bl	800e780 <xTaskRemoveFromEventList>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <prvUnlockQueue+0x32>
 800dbf2:	f000 fe9f 	bl	800e934 <vTaskMissedYield>
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	73fb      	strb	r3, [r7, #15]
 800dbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	dce9      	bgt.n	800dbda <prvUnlockQueue+0x16>
 800dc06:	e000      	b.n	800dc0a <prvUnlockQueue+0x46>
 800dc08:	bf00      	nop
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	22ff      	movs	r2, #255	; 0xff
 800dc0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc12:	f001 fea7 	bl	800f964 <vPortExitCritical>
 800dc16:	f001 fe75 	bl	800f904 <vPortEnterCritical>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc20:	73bb      	strb	r3, [r7, #14]
 800dc22:	e011      	b.n	800dc48 <prvUnlockQueue+0x84>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d012      	beq.n	800dc52 <prvUnlockQueue+0x8e>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	3310      	adds	r3, #16
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 fda5 	bl	800e780 <xTaskRemoveFromEventList>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <prvUnlockQueue+0x7c>
 800dc3c:	f000 fe7a 	bl	800e934 <vTaskMissedYield>
 800dc40:	7bbb      	ldrb	r3, [r7, #14]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	73bb      	strb	r3, [r7, #14]
 800dc48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	dce9      	bgt.n	800dc24 <prvUnlockQueue+0x60>
 800dc50:	e000      	b.n	800dc54 <prvUnlockQueue+0x90>
 800dc52:	bf00      	nop
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	22ff      	movs	r2, #255	; 0xff
 800dc58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc5c:	f001 fe82 	bl	800f964 <vPortExitCritical>
 800dc60:	bf00      	nop
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <prvIsQueueEmpty>:
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	f001 fe48 	bl	800f904 <vPortEnterCritical>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d102      	bne.n	800dc82 <prvIsQueueEmpty+0x1a>
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	60fb      	str	r3, [r7, #12]
 800dc80:	e001      	b.n	800dc86 <prvIsQueueEmpty+0x1e>
 800dc82:	2300      	movs	r3, #0
 800dc84:	60fb      	str	r3, [r7, #12]
 800dc86:	f001 fe6d 	bl	800f964 <vPortExitCritical>
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <prvIsQueueFull>:
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	f001 fe32 	bl	800f904 <vPortEnterCritical>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d102      	bne.n	800dcb2 <prvIsQueueFull+0x1e>
 800dcac:	2301      	movs	r3, #1
 800dcae:	60fb      	str	r3, [r7, #12]
 800dcb0:	e001      	b.n	800dcb6 <prvIsQueueFull+0x22>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	60fb      	str	r3, [r7, #12]
 800dcb6:	f001 fe55 	bl	800f964 <vPortExitCritical>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <vQueueAddToRegistry>:
 800dcc4:	b480      	push	{r7}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60fb      	str	r3, [r7, #12]
 800dcd2:	e014      	b.n	800dcfe <vQueueAddToRegistry+0x3a>
 800dcd4:	4a0f      	ldr	r2, [pc, #60]	; (800dd14 <vQueueAddToRegistry+0x50>)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10b      	bne.n	800dcf8 <vQueueAddToRegistry+0x34>
 800dce0:	490c      	ldr	r1, [pc, #48]	; (800dd14 <vQueueAddToRegistry+0x50>)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800dcea:	4a0a      	ldr	r2, [pc, #40]	; (800dd14 <vQueueAddToRegistry+0x50>)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	4413      	add	r3, r2
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	605a      	str	r2, [r3, #4]
 800dcf6:	e006      	b.n	800dd06 <vQueueAddToRegistry+0x42>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2b07      	cmp	r3, #7
 800dd02:	d9e7      	bls.n	800dcd4 <vQueueAddToRegistry+0x10>
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	20002820 	.word	0x20002820

0800dd18 <vQueueWaitForMessageRestricted>:
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	617b      	str	r3, [r7, #20]
 800dd28:	f001 fdec 	bl	800f904 <vPortEnterCritical>
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd32:	b25b      	sxtb	r3, r3
 800dd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd38:	d103      	bne.n	800dd42 <vQueueWaitForMessageRestricted+0x2a>
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd48:	b25b      	sxtb	r3, r3
 800dd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4e:	d103      	bne.n	800dd58 <vQueueWaitForMessageRestricted+0x40>
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd58:	f001 fe04 	bl	800f964 <vPortExitCritical>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d106      	bne.n	800dd72 <vQueueWaitForMessageRestricted+0x5a>
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	3324      	adds	r3, #36	; 0x24
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 fcdb 	bl	800e728 <vTaskPlaceOnEventListRestricted>
 800dd72:	6978      	ldr	r0, [r7, #20]
 800dd74:	f7ff ff26 	bl	800dbc4 <prvUnlockQueue>
 800dd78:	bf00      	nop
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <xTaskCreateStatic>:
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b08e      	sub	sp, #56	; 0x38
 800dd84:	af04      	add	r7, sp, #16
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	603b      	str	r3, [r7, #0]
 800dd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d10a      	bne.n	800ddaa <xTaskCreateStatic+0x2a>
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	623b      	str	r3, [r7, #32]
 800dda6:	bf00      	nop
 800dda8:	e7fe      	b.n	800dda8 <xTaskCreateStatic+0x28>
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10a      	bne.n	800ddc6 <xTaskCreateStatic+0x46>
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	61fb      	str	r3, [r7, #28]
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xTaskCreateStatic+0x44>
 800ddc6:	23b0      	movs	r3, #176	; 0xb0
 800ddc8:	613b      	str	r3, [r7, #16]
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	2bb0      	cmp	r3, #176	; 0xb0
 800ddce:	d00a      	beq.n	800dde6 <xTaskCreateStatic+0x66>
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	61bb      	str	r3, [r7, #24]
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xTaskCreateStatic+0x64>
 800dde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d01e      	beq.n	800de2a <xTaskCreateStatic+0xaa>
 800ddec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d01b      	beq.n	800de2a <xTaskCreateStatic+0xaa>
 800ddf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddfa:	631a      	str	r2, [r3, #48]	; 0x30
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	2202      	movs	r2, #2
 800de00:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800de04:	2300      	movs	r3, #0
 800de06:	9303      	str	r3, [sp, #12]
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	9302      	str	r3, [sp, #8]
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	68b9      	ldr	r1, [r7, #8]
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f000 f851 	bl	800dec4 <prvInitialiseNewTask>
 800de22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de24:	f000 f8e4 	bl	800dff0 <prvAddNewTaskToReadyList>
 800de28:	e001      	b.n	800de2e <xTaskCreateStatic+0xae>
 800de2a:	2300      	movs	r3, #0
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	4618      	mov	r0, r3
 800de32:	3728      	adds	r7, #40	; 0x28
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <xTaskCreate>:
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08c      	sub	sp, #48	; 0x30
 800de3c:	af04      	add	r7, sp, #16
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	4613      	mov	r3, r2
 800de46:	80fb      	strh	r3, [r7, #6]
 800de48:	88fb      	ldrh	r3, [r7, #6]
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4618      	mov	r0, r3
 800de4e:	f001 fe7b 	bl	800fb48 <pvPortMalloc>
 800de52:	6178      	str	r0, [r7, #20]
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00e      	beq.n	800de78 <xTaskCreate+0x40>
 800de5a:	20b0      	movs	r0, #176	; 0xb0
 800de5c:	f001 fe74 	bl	800fb48 <pvPortMalloc>
 800de60:	61f8      	str	r0, [r7, #28]
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d003      	beq.n	800de70 <xTaskCreate+0x38>
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	631a      	str	r2, [r3, #48]	; 0x30
 800de6e:	e005      	b.n	800de7c <xTaskCreate+0x44>
 800de70:	6978      	ldr	r0, [r7, #20]
 800de72:	f001 ff2d 	bl	800fcd0 <vPortFree>
 800de76:	e001      	b.n	800de7c <xTaskCreate+0x44>
 800de78:	2300      	movs	r3, #0
 800de7a:	61fb      	str	r3, [r7, #28]
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d017      	beq.n	800deb2 <xTaskCreate+0x7a>
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2200      	movs	r2, #0
 800de86:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800de8a:	88fa      	ldrh	r2, [r7, #6]
 800de8c:	2300      	movs	r3, #0
 800de8e:	9303      	str	r3, [sp, #12]
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	9302      	str	r3, [sp, #8]
 800de94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	68b9      	ldr	r1, [r7, #8]
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f80f 	bl	800dec4 <prvInitialiseNewTask>
 800dea6:	69f8      	ldr	r0, [r7, #28]
 800dea8:	f000 f8a2 	bl	800dff0 <prvAddNewTaskToReadyList>
 800deac:	2301      	movs	r3, #1
 800deae:	61bb      	str	r3, [r7, #24]
 800deb0:	e002      	b.n	800deb8 <xTaskCreate+0x80>
 800deb2:	f04f 33ff 	mov.w	r3, #4294967295
 800deb6:	61bb      	str	r3, [r7, #24]
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	4618      	mov	r0, r3
 800debc:	3720      	adds	r7, #32
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
	...

0800dec4 <prvInitialiseNewTask>:
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b088      	sub	sp, #32
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
 800ded2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dedc:	3b01      	subs	r3, #1
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	61bb      	str	r3, [r7, #24]
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	f023 0307 	bic.w	r3, r3, #7
 800deea:	61bb      	str	r3, [r7, #24]
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00a      	beq.n	800df0c <prvInitialiseNewTask+0x48>
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	617b      	str	r3, [r7, #20]
 800df08:	bf00      	nop
 800df0a:	e7fe      	b.n	800df0a <prvInitialiseNewTask+0x46>
 800df0c:	2300      	movs	r3, #0
 800df0e:	61fb      	str	r3, [r7, #28]
 800df10:	e012      	b.n	800df38 <prvInitialiseNewTask+0x74>
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	4413      	add	r3, r2
 800df18:	7819      	ldrb	r1, [r3, #0]
 800df1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	4413      	add	r3, r2
 800df20:	3334      	adds	r3, #52	; 0x34
 800df22:	460a      	mov	r2, r1
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	4413      	add	r3, r2
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d006      	beq.n	800df40 <prvInitialiseNewTask+0x7c>
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	3301      	adds	r3, #1
 800df36:	61fb      	str	r3, [r7, #28]
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	2b1f      	cmp	r3, #31
 800df3c:	d9e9      	bls.n	800df12 <prvInitialiseNewTask+0x4e>
 800df3e:	e000      	b.n	800df42 <prvInitialiseNewTask+0x7e>
 800df40:	bf00      	nop
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800df4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4c:	2b06      	cmp	r3, #6
 800df4e:	d901      	bls.n	800df54 <prvInitialiseNewTask+0x90>
 800df50:	2306      	movs	r3, #6
 800df52:	62bb      	str	r3, [r7, #40]	; 0x28
 800df54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df58:	62da      	str	r2, [r3, #44]	; 0x2c
 800df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df5e:	655a      	str	r2, [r3, #84]	; 0x54
 800df60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df62:	2200      	movs	r2, #0
 800df64:	659a      	str	r2, [r3, #88]	; 0x58
 800df66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df68:	3304      	adds	r3, #4
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe ffe2 	bl	800cf34 <vListInitialiseItem>
 800df70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df72:	3318      	adds	r3, #24
 800df74:	4618      	mov	r0, r3
 800df76:	f7fe ffdd 	bl	800cf34 <vListInitialiseItem>
 800df7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df7e:	611a      	str	r2, [r3, #16]
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	f1c3 0207 	rsb	r2, r3, #7
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	619a      	str	r2, [r3, #24]
 800df8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df8e:	625a      	str	r2, [r3, #36]	; 0x24
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	2200      	movs	r2, #0
 800df94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800df98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800dfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa2:	335c      	adds	r3, #92	; 0x5c
 800dfa4:	224c      	movs	r2, #76	; 0x4c
 800dfa6:	2100      	movs	r1, #0
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f002 f92f 	bl	801020c <memset>
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	4a0c      	ldr	r2, [pc, #48]	; (800dfe4 <prvInitialiseNewTask+0x120>)
 800dfb2:	661a      	str	r2, [r3, #96]	; 0x60
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb6:	4a0c      	ldr	r2, [pc, #48]	; (800dfe8 <prvInitialiseNewTask+0x124>)
 800dfb8:	665a      	str	r2, [r3, #100]	; 0x64
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	4a0b      	ldr	r2, [pc, #44]	; (800dfec <prvInitialiseNewTask+0x128>)
 800dfbe:	669a      	str	r2, [r3, #104]	; 0x68
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	68f9      	ldr	r1, [r7, #12]
 800dfc4:	69b8      	ldr	r0, [r7, #24]
 800dfc6:	f001 fb6d 	bl	800f6a4 <pxPortInitialiseStack>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	601a      	str	r2, [r3, #0]
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d002      	beq.n	800dfdc <prvInitialiseNewTask+0x118>
 800dfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfda:	601a      	str	r2, [r3, #0]
 800dfdc:	bf00      	nop
 800dfde:	3720      	adds	r7, #32
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	20002ea8 	.word	0x20002ea8
 800dfe8:	20002f10 	.word	0x20002f10
 800dfec:	20002f78 	.word	0x20002f78

0800dff0 <prvAddNewTaskToReadyList>:
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	f001 fc84 	bl	800f904 <vPortEnterCritical>
 800dffc:	4b2a      	ldr	r3, [pc, #168]	; (800e0a8 <prvAddNewTaskToReadyList+0xb8>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	3301      	adds	r3, #1
 800e002:	4a29      	ldr	r2, [pc, #164]	; (800e0a8 <prvAddNewTaskToReadyList+0xb8>)
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	4b29      	ldr	r3, [pc, #164]	; (800e0ac <prvAddNewTaskToReadyList+0xbc>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d109      	bne.n	800e022 <prvAddNewTaskToReadyList+0x32>
 800e00e:	4a27      	ldr	r2, [pc, #156]	; (800e0ac <prvAddNewTaskToReadyList+0xbc>)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	4b24      	ldr	r3, [pc, #144]	; (800e0a8 <prvAddNewTaskToReadyList+0xb8>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d110      	bne.n	800e03e <prvAddNewTaskToReadyList+0x4e>
 800e01c:	f000 fcae 	bl	800e97c <prvInitialiseTaskLists>
 800e020:	e00d      	b.n	800e03e <prvAddNewTaskToReadyList+0x4e>
 800e022:	4b23      	ldr	r3, [pc, #140]	; (800e0b0 <prvAddNewTaskToReadyList+0xc0>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d109      	bne.n	800e03e <prvAddNewTaskToReadyList+0x4e>
 800e02a:	4b20      	ldr	r3, [pc, #128]	; (800e0ac <prvAddNewTaskToReadyList+0xbc>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	429a      	cmp	r2, r3
 800e036:	d802      	bhi.n	800e03e <prvAddNewTaskToReadyList+0x4e>
 800e038:	4a1c      	ldr	r2, [pc, #112]	; (800e0ac <prvAddNewTaskToReadyList+0xbc>)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	4b1d      	ldr	r3, [pc, #116]	; (800e0b4 <prvAddNewTaskToReadyList+0xc4>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	4a1b      	ldr	r2, [pc, #108]	; (800e0b4 <prvAddNewTaskToReadyList+0xc4>)
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04c:	2201      	movs	r2, #1
 800e04e:	409a      	lsls	r2, r3
 800e050:	4b19      	ldr	r3, [pc, #100]	; (800e0b8 <prvAddNewTaskToReadyList+0xc8>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4313      	orrs	r3, r2
 800e056:	4a18      	ldr	r2, [pc, #96]	; (800e0b8 <prvAddNewTaskToReadyList+0xc8>)
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05e:	4613      	mov	r3, r2
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4a15      	ldr	r2, [pc, #84]	; (800e0bc <prvAddNewTaskToReadyList+0xcc>)
 800e068:	441a      	add	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4619      	mov	r1, r3
 800e070:	4610      	mov	r0, r2
 800e072:	f7fe ff6c 	bl	800cf4e <vListInsertEnd>
 800e076:	f001 fc75 	bl	800f964 <vPortExitCritical>
 800e07a:	4b0d      	ldr	r3, [pc, #52]	; (800e0b0 <prvAddNewTaskToReadyList+0xc0>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00e      	beq.n	800e0a0 <prvAddNewTaskToReadyList+0xb0>
 800e082:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <prvAddNewTaskToReadyList+0xbc>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d207      	bcs.n	800e0a0 <prvAddNewTaskToReadyList+0xb0>
 800e090:	4b0b      	ldr	r3, [pc, #44]	; (800e0c0 <prvAddNewTaskToReadyList+0xd0>)
 800e092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	bf00      	nop
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	20002960 	.word	0x20002960
 800e0ac:	20002860 	.word	0x20002860
 800e0b0:	2000296c 	.word	0x2000296c
 800e0b4:	2000297c 	.word	0x2000297c
 800e0b8:	20002968 	.word	0x20002968
 800e0bc:	20002864 	.word	0x20002864
 800e0c0:	e000ed04 	.word	0xe000ed04

0800e0c4 <vTaskDelayUntil>:
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b08a      	sub	sp, #40	; 0x28
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10a      	bne.n	800e0ee <vTaskDelayUntil+0x2a>
 800e0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0dc:	f383 8811 	msr	BASEPRI, r3
 800e0e0:	f3bf 8f6f 	isb	sy
 800e0e4:	f3bf 8f4f 	dsb	sy
 800e0e8:	617b      	str	r3, [r7, #20]
 800e0ea:	bf00      	nop
 800e0ec:	e7fe      	b.n	800e0ec <vTaskDelayUntil+0x28>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10a      	bne.n	800e10a <vTaskDelayUntil+0x46>
 800e0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f8:	f383 8811 	msr	BASEPRI, r3
 800e0fc:	f3bf 8f6f 	isb	sy
 800e100:	f3bf 8f4f 	dsb	sy
 800e104:	613b      	str	r3, [r7, #16]
 800e106:	bf00      	nop
 800e108:	e7fe      	b.n	800e108 <vTaskDelayUntil+0x44>
 800e10a:	4b2a      	ldr	r3, [pc, #168]	; (800e1b4 <vTaskDelayUntil+0xf0>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00a      	beq.n	800e128 <vTaskDelayUntil+0x64>
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	bf00      	nop
 800e126:	e7fe      	b.n	800e126 <vTaskDelayUntil+0x62>
 800e128:	f000 f8ee 	bl	800e308 <vTaskSuspendAll>
 800e12c:	4b22      	ldr	r3, [pc, #136]	; (800e1b8 <vTaskDelayUntil+0xf4>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	623b      	str	r3, [r7, #32]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4413      	add	r3, r2
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6a3a      	ldr	r2, [r7, #32]
 800e142:	429a      	cmp	r2, r3
 800e144:	d20b      	bcs.n	800e15e <vTaskDelayUntil+0x9a>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	69fa      	ldr	r2, [r7, #28]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d211      	bcs.n	800e174 <vTaskDelayUntil+0xb0>
 800e150:	69fa      	ldr	r2, [r7, #28]
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	429a      	cmp	r2, r3
 800e156:	d90d      	bls.n	800e174 <vTaskDelayUntil+0xb0>
 800e158:	2301      	movs	r3, #1
 800e15a:	627b      	str	r3, [r7, #36]	; 0x24
 800e15c:	e00a      	b.n	800e174 <vTaskDelayUntil+0xb0>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	69fa      	ldr	r2, [r7, #28]
 800e164:	429a      	cmp	r2, r3
 800e166:	d303      	bcc.n	800e170 <vTaskDelayUntil+0xac>
 800e168:	69fa      	ldr	r2, [r7, #28]
 800e16a:	6a3b      	ldr	r3, [r7, #32]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d901      	bls.n	800e174 <vTaskDelayUntil+0xb0>
 800e170:	2301      	movs	r3, #1
 800e172:	627b      	str	r3, [r7, #36]	; 0x24
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	69fa      	ldr	r2, [r7, #28]
 800e178:	601a      	str	r2, [r3, #0]
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d006      	beq.n	800e18e <vTaskDelayUntil+0xca>
 800e180:	69fa      	ldr	r2, [r7, #28]
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	2100      	movs	r1, #0
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 fe9d 	bl	800eec8 <prvAddCurrentTaskToDelayedList>
 800e18e:	f000 f8c9 	bl	800e324 <xTaskResumeAll>
 800e192:	61b8      	str	r0, [r7, #24]
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d107      	bne.n	800e1aa <vTaskDelayUntil+0xe6>
 800e19a:	4b08      	ldr	r3, [pc, #32]	; (800e1bc <vTaskDelayUntil+0xf8>)
 800e19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	bf00      	nop
 800e1ac:	3728      	adds	r7, #40	; 0x28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20002988 	.word	0x20002988
 800e1b8:	20002964 	.word	0x20002964
 800e1bc:	e000ed04 	.word	0xe000ed04

0800e1c0 <vTaskDelay>:
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	60fb      	str	r3, [r7, #12]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d017      	beq.n	800e202 <vTaskDelay+0x42>
 800e1d2:	4b13      	ldr	r3, [pc, #76]	; (800e220 <vTaskDelay+0x60>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00a      	beq.n	800e1f0 <vTaskDelay+0x30>
 800e1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	60bb      	str	r3, [r7, #8]
 800e1ec:	bf00      	nop
 800e1ee:	e7fe      	b.n	800e1ee <vTaskDelay+0x2e>
 800e1f0:	f000 f88a 	bl	800e308 <vTaskSuspendAll>
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fe66 	bl	800eec8 <prvAddCurrentTaskToDelayedList>
 800e1fc:	f000 f892 	bl	800e324 <xTaskResumeAll>
 800e200:	60f8      	str	r0, [r7, #12]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d107      	bne.n	800e218 <vTaskDelay+0x58>
 800e208:	4b06      	ldr	r3, [pc, #24]	; (800e224 <vTaskDelay+0x64>)
 800e20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	bf00      	nop
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	20002988 	.word	0x20002988
 800e224:	e000ed04 	.word	0xe000ed04

0800e228 <vTaskStartScheduler>:
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08a      	sub	sp, #40	; 0x28
 800e22c:	af04      	add	r7, sp, #16
 800e22e:	2300      	movs	r3, #0
 800e230:	60bb      	str	r3, [r7, #8]
 800e232:	2300      	movs	r3, #0
 800e234:	607b      	str	r3, [r7, #4]
 800e236:	463a      	mov	r2, r7
 800e238:	1d39      	adds	r1, r7, #4
 800e23a:	f107 0308 	add.w	r3, r7, #8
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f5 fa76 	bl	8003730 <vApplicationGetIdleTaskMemory>
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	9202      	str	r2, [sp, #8]
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	2300      	movs	r3, #0
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	2300      	movs	r3, #0
 800e254:	460a      	mov	r2, r1
 800e256:	4924      	ldr	r1, [pc, #144]	; (800e2e8 <vTaskStartScheduler+0xc0>)
 800e258:	4824      	ldr	r0, [pc, #144]	; (800e2ec <vTaskStartScheduler+0xc4>)
 800e25a:	f7ff fd91 	bl	800dd80 <xTaskCreateStatic>
 800e25e:	4603      	mov	r3, r0
 800e260:	4a23      	ldr	r2, [pc, #140]	; (800e2f0 <vTaskStartScheduler+0xc8>)
 800e262:	6013      	str	r3, [r2, #0]
 800e264:	4b22      	ldr	r3, [pc, #136]	; (800e2f0 <vTaskStartScheduler+0xc8>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <vTaskStartScheduler+0x4a>
 800e26c:	2301      	movs	r3, #1
 800e26e:	617b      	str	r3, [r7, #20]
 800e270:	e001      	b.n	800e276 <vTaskStartScheduler+0x4e>
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d102      	bne.n	800e282 <vTaskStartScheduler+0x5a>
 800e27c:	f000 fe8a 	bl	800ef94 <xTimerCreateTimerTask>
 800e280:	6178      	str	r0, [r7, #20]
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d11b      	bne.n	800e2c0 <vTaskStartScheduler+0x98>
 800e288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28c:	f383 8811 	msr	BASEPRI, r3
 800e290:	f3bf 8f6f 	isb	sy
 800e294:	f3bf 8f4f 	dsb	sy
 800e298:	613b      	str	r3, [r7, #16]
 800e29a:	bf00      	nop
 800e29c:	4b15      	ldr	r3, [pc, #84]	; (800e2f4 <vTaskStartScheduler+0xcc>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	335c      	adds	r3, #92	; 0x5c
 800e2a2:	4a15      	ldr	r2, [pc, #84]	; (800e2f8 <vTaskStartScheduler+0xd0>)
 800e2a4:	6013      	str	r3, [r2, #0]
 800e2a6:	4b15      	ldr	r3, [pc, #84]	; (800e2fc <vTaskStartScheduler+0xd4>)
 800e2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ac:	601a      	str	r2, [r3, #0]
 800e2ae:	4b14      	ldr	r3, [pc, #80]	; (800e300 <vTaskStartScheduler+0xd8>)
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	4b13      	ldr	r3, [pc, #76]	; (800e304 <vTaskStartScheduler+0xdc>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	f001 fa81 	bl	800f7c0 <xPortStartScheduler>
 800e2be:	e00e      	b.n	800e2de <vTaskStartScheduler+0xb6>
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c6:	d10a      	bne.n	800e2de <vTaskStartScheduler+0xb6>
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	60fb      	str	r3, [r7, #12]
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <vTaskStartScheduler+0xb4>
 800e2de:	bf00      	nop
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	080119e4 	.word	0x080119e4
 800e2ec:	0800e94d 	.word	0x0800e94d
 800e2f0:	20002984 	.word	0x20002984
 800e2f4:	20002860 	.word	0x20002860
 800e2f8:	20000114 	.word	0x20000114
 800e2fc:	20002980 	.word	0x20002980
 800e300:	2000296c 	.word	0x2000296c
 800e304:	20002964 	.word	0x20002964

0800e308 <vTaskSuspendAll>:
 800e308:	b480      	push	{r7}
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	4b04      	ldr	r3, [pc, #16]	; (800e320 <vTaskSuspendAll+0x18>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3301      	adds	r3, #1
 800e312:	4a03      	ldr	r2, [pc, #12]	; (800e320 <vTaskSuspendAll+0x18>)
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	bf00      	nop
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	20002988 	.word	0x20002988

0800e324 <xTaskResumeAll>:
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	2300      	movs	r3, #0
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	2300      	movs	r3, #0
 800e330:	60bb      	str	r3, [r7, #8]
 800e332:	4b41      	ldr	r3, [pc, #260]	; (800e438 <xTaskResumeAll+0x114>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10a      	bne.n	800e350 <xTaskResumeAll+0x2c>
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	603b      	str	r3, [r7, #0]
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <xTaskResumeAll+0x2a>
 800e350:	f001 fad8 	bl	800f904 <vPortEnterCritical>
 800e354:	4b38      	ldr	r3, [pc, #224]	; (800e438 <xTaskResumeAll+0x114>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	3b01      	subs	r3, #1
 800e35a:	4a37      	ldr	r2, [pc, #220]	; (800e438 <xTaskResumeAll+0x114>)
 800e35c:	6013      	str	r3, [r2, #0]
 800e35e:	4b36      	ldr	r3, [pc, #216]	; (800e438 <xTaskResumeAll+0x114>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d161      	bne.n	800e42a <xTaskResumeAll+0x106>
 800e366:	4b35      	ldr	r3, [pc, #212]	; (800e43c <xTaskResumeAll+0x118>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d05d      	beq.n	800e42a <xTaskResumeAll+0x106>
 800e36e:	e02e      	b.n	800e3ce <xTaskResumeAll+0xaa>
 800e370:	4b33      	ldr	r3, [pc, #204]	; (800e440 <xTaskResumeAll+0x11c>)
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3318      	adds	r3, #24
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fe fe43 	bl	800d008 <uxListRemove>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	3304      	adds	r3, #4
 800e386:	4618      	mov	r0, r3
 800e388:	f7fe fe3e 	bl	800d008 <uxListRemove>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e390:	2201      	movs	r2, #1
 800e392:	409a      	lsls	r2, r3
 800e394:	4b2b      	ldr	r3, [pc, #172]	; (800e444 <xTaskResumeAll+0x120>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4313      	orrs	r3, r2
 800e39a:	4a2a      	ldr	r2, [pc, #168]	; (800e444 <xTaskResumeAll+0x120>)
 800e39c:	6013      	str	r3, [r2, #0]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	4413      	add	r3, r2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	4a27      	ldr	r2, [pc, #156]	; (800e448 <xTaskResumeAll+0x124>)
 800e3ac:	441a      	add	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	f7fe fdca 	bl	800cf4e <vListInsertEnd>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3be:	4b23      	ldr	r3, [pc, #140]	; (800e44c <xTaskResumeAll+0x128>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d302      	bcc.n	800e3ce <xTaskResumeAll+0xaa>
 800e3c8:	4b21      	ldr	r3, [pc, #132]	; (800e450 <xTaskResumeAll+0x12c>)
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	4b1c      	ldr	r3, [pc, #112]	; (800e440 <xTaskResumeAll+0x11c>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1cc      	bne.n	800e370 <xTaskResumeAll+0x4c>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <xTaskResumeAll+0xbc>
 800e3dc:	f000 fb70 	bl	800eac0 <prvResetNextTaskUnblockTime>
 800e3e0:	4b1c      	ldr	r3, [pc, #112]	; (800e454 <xTaskResumeAll+0x130>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	607b      	str	r3, [r7, #4]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d010      	beq.n	800e40e <xTaskResumeAll+0xea>
 800e3ec:	f000 f858 	bl	800e4a0 <xTaskIncrementTick>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <xTaskResumeAll+0xd8>
 800e3f6:	4b16      	ldr	r3, [pc, #88]	; (800e450 <xTaskResumeAll+0x12c>)
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	607b      	str	r3, [r7, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1f1      	bne.n	800e3ec <xTaskResumeAll+0xc8>
 800e408:	4b12      	ldr	r3, [pc, #72]	; (800e454 <xTaskResumeAll+0x130>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	601a      	str	r2, [r3, #0]
 800e40e:	4b10      	ldr	r3, [pc, #64]	; (800e450 <xTaskResumeAll+0x12c>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d009      	beq.n	800e42a <xTaskResumeAll+0x106>
 800e416:	2301      	movs	r3, #1
 800e418:	60bb      	str	r3, [r7, #8]
 800e41a:	4b0f      	ldr	r3, [pc, #60]	; (800e458 <xTaskResumeAll+0x134>)
 800e41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e420:	601a      	str	r2, [r3, #0]
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f001 fa9b 	bl	800f964 <vPortExitCritical>
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	4618      	mov	r0, r3
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	20002988 	.word	0x20002988
 800e43c:	20002960 	.word	0x20002960
 800e440:	20002920 	.word	0x20002920
 800e444:	20002968 	.word	0x20002968
 800e448:	20002864 	.word	0x20002864
 800e44c:	20002860 	.word	0x20002860
 800e450:	20002974 	.word	0x20002974
 800e454:	20002970 	.word	0x20002970
 800e458:	e000ed04 	.word	0xe000ed04

0800e45c <xTaskGetTickCount>:
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	4b05      	ldr	r3, [pc, #20]	; (800e478 <xTaskGetTickCount+0x1c>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	607b      	str	r3, [r7, #4]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4618      	mov	r0, r3
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	20002964 	.word	0x20002964

0800e47c <xTaskGetTickCountFromISR>:
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	f001 fb21 	bl	800fac8 <vPortValidateInterruptPriority>
 800e486:	2300      	movs	r3, #0
 800e488:	607b      	str	r3, [r7, #4]
 800e48a:	4b04      	ldr	r3, [pc, #16]	; (800e49c <xTaskGetTickCountFromISR+0x20>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	603b      	str	r3, [r7, #0]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	4618      	mov	r0, r3
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	20002964 	.word	0x20002964

0800e4a0 <xTaskIncrementTick>:
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	617b      	str	r3, [r7, #20]
 800e4aa:	4b51      	ldr	r3, [pc, #324]	; (800e5f0 <xTaskIncrementTick+0x150>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f040 808d 	bne.w	800e5ce <xTaskIncrementTick+0x12e>
 800e4b4:	4b4f      	ldr	r3, [pc, #316]	; (800e5f4 <xTaskIncrementTick+0x154>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	613b      	str	r3, [r7, #16]
 800e4bc:	4a4d      	ldr	r2, [pc, #308]	; (800e5f4 <xTaskIncrementTick+0x154>)
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d120      	bne.n	800e50a <xTaskIncrementTick+0x6a>
 800e4c8:	4b4b      	ldr	r3, [pc, #300]	; (800e5f8 <xTaskIncrementTick+0x158>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00a      	beq.n	800e4e8 <xTaskIncrementTick+0x48>
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	603b      	str	r3, [r7, #0]
 800e4e4:	bf00      	nop
 800e4e6:	e7fe      	b.n	800e4e6 <xTaskIncrementTick+0x46>
 800e4e8:	4b43      	ldr	r3, [pc, #268]	; (800e5f8 <xTaskIncrementTick+0x158>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	4b43      	ldr	r3, [pc, #268]	; (800e5fc <xTaskIncrementTick+0x15c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a41      	ldr	r2, [pc, #260]	; (800e5f8 <xTaskIncrementTick+0x158>)
 800e4f4:	6013      	str	r3, [r2, #0]
 800e4f6:	4a41      	ldr	r2, [pc, #260]	; (800e5fc <xTaskIncrementTick+0x15c>)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6013      	str	r3, [r2, #0]
 800e4fc:	4b40      	ldr	r3, [pc, #256]	; (800e600 <xTaskIncrementTick+0x160>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	3301      	adds	r3, #1
 800e502:	4a3f      	ldr	r2, [pc, #252]	; (800e600 <xTaskIncrementTick+0x160>)
 800e504:	6013      	str	r3, [r2, #0]
 800e506:	f000 fadb 	bl	800eac0 <prvResetNextTaskUnblockTime>
 800e50a:	4b3e      	ldr	r3, [pc, #248]	; (800e604 <xTaskIncrementTick+0x164>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	429a      	cmp	r2, r3
 800e512:	d34d      	bcc.n	800e5b0 <xTaskIncrementTick+0x110>
 800e514:	4b38      	ldr	r3, [pc, #224]	; (800e5f8 <xTaskIncrementTick+0x158>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d101      	bne.n	800e522 <xTaskIncrementTick+0x82>
 800e51e:	2301      	movs	r3, #1
 800e520:	e000      	b.n	800e524 <xTaskIncrementTick+0x84>
 800e522:	2300      	movs	r3, #0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d004      	beq.n	800e532 <xTaskIncrementTick+0x92>
 800e528:	4b36      	ldr	r3, [pc, #216]	; (800e604 <xTaskIncrementTick+0x164>)
 800e52a:	f04f 32ff 	mov.w	r2, #4294967295
 800e52e:	601a      	str	r2, [r3, #0]
 800e530:	e03e      	b.n	800e5b0 <xTaskIncrementTick+0x110>
 800e532:	4b31      	ldr	r3, [pc, #196]	; (800e5f8 <xTaskIncrementTick+0x158>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	60bb      	str	r3, [r7, #8]
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	607b      	str	r3, [r7, #4]
 800e542:	693a      	ldr	r2, [r7, #16]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	429a      	cmp	r2, r3
 800e548:	d203      	bcs.n	800e552 <xTaskIncrementTick+0xb2>
 800e54a:	4a2e      	ldr	r2, [pc, #184]	; (800e604 <xTaskIncrementTick+0x164>)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6013      	str	r3, [r2, #0]
 800e550:	e02e      	b.n	800e5b0 <xTaskIncrementTick+0x110>
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	3304      	adds	r3, #4
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe fd56 	bl	800d008 <uxListRemove>
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e560:	2b00      	cmp	r3, #0
 800e562:	d004      	beq.n	800e56e <xTaskIncrementTick+0xce>
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	3318      	adds	r3, #24
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe fd4d 	bl	800d008 <uxListRemove>
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e572:	2201      	movs	r2, #1
 800e574:	409a      	lsls	r2, r3
 800e576:	4b24      	ldr	r3, [pc, #144]	; (800e608 <xTaskIncrementTick+0x168>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	4a22      	ldr	r2, [pc, #136]	; (800e608 <xTaskIncrementTick+0x168>)
 800e57e:	6013      	str	r3, [r2, #0]
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e584:	4613      	mov	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4413      	add	r3, r2
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	4a1f      	ldr	r2, [pc, #124]	; (800e60c <xTaskIncrementTick+0x16c>)
 800e58e:	441a      	add	r2, r3
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	3304      	adds	r3, #4
 800e594:	4619      	mov	r1, r3
 800e596:	4610      	mov	r0, r2
 800e598:	f7fe fcd9 	bl	800cf4e <vListInsertEnd>
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a0:	4b1b      	ldr	r3, [pc, #108]	; (800e610 <xTaskIncrementTick+0x170>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d3b4      	bcc.n	800e514 <xTaskIncrementTick+0x74>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	617b      	str	r3, [r7, #20]
 800e5ae:	e7b1      	b.n	800e514 <xTaskIncrementTick+0x74>
 800e5b0:	4b17      	ldr	r3, [pc, #92]	; (800e610 <xTaskIncrementTick+0x170>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b6:	4915      	ldr	r1, [pc, #84]	; (800e60c <xTaskIncrementTick+0x16c>)
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	4413      	add	r3, r2
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	440b      	add	r3, r1
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d907      	bls.n	800e5d8 <xTaskIncrementTick+0x138>
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	617b      	str	r3, [r7, #20]
 800e5cc:	e004      	b.n	800e5d8 <xTaskIncrementTick+0x138>
 800e5ce:	4b11      	ldr	r3, [pc, #68]	; (800e614 <xTaskIncrementTick+0x174>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	4a0f      	ldr	r2, [pc, #60]	; (800e614 <xTaskIncrementTick+0x174>)
 800e5d6:	6013      	str	r3, [r2, #0]
 800e5d8:	4b0f      	ldr	r3, [pc, #60]	; (800e618 <xTaskIncrementTick+0x178>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d001      	beq.n	800e5e4 <xTaskIncrementTick+0x144>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	617b      	str	r3, [r7, #20]
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3718      	adds	r7, #24
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20002988 	.word	0x20002988
 800e5f4:	20002964 	.word	0x20002964
 800e5f8:	20002918 	.word	0x20002918
 800e5fc:	2000291c 	.word	0x2000291c
 800e600:	20002978 	.word	0x20002978
 800e604:	20002980 	.word	0x20002980
 800e608:	20002968 	.word	0x20002968
 800e60c:	20002864 	.word	0x20002864
 800e610:	20002860 	.word	0x20002860
 800e614:	20002970 	.word	0x20002970
 800e618:	20002974 	.word	0x20002974

0800e61c <vTaskSwitchContext>:
 800e61c:	b480      	push	{r7}
 800e61e:	b087      	sub	sp, #28
 800e620:	af00      	add	r7, sp, #0
 800e622:	4b29      	ldr	r3, [pc, #164]	; (800e6c8 <vTaskSwitchContext+0xac>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d003      	beq.n	800e632 <vTaskSwitchContext+0x16>
 800e62a:	4b28      	ldr	r3, [pc, #160]	; (800e6cc <vTaskSwitchContext+0xb0>)
 800e62c:	2201      	movs	r2, #1
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	e044      	b.n	800e6bc <vTaskSwitchContext+0xa0>
 800e632:	4b26      	ldr	r3, [pc, #152]	; (800e6cc <vTaskSwitchContext+0xb0>)
 800e634:	2200      	movs	r2, #0
 800e636:	601a      	str	r2, [r3, #0]
 800e638:	4b25      	ldr	r3, [pc, #148]	; (800e6d0 <vTaskSwitchContext+0xb4>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	60fb      	str	r3, [r7, #12]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	fab3 f383 	clz	r3, r3
 800e644:	72fb      	strb	r3, [r7, #11]
 800e646:	7afb      	ldrb	r3, [r7, #11]
 800e648:	f1c3 031f 	rsb	r3, r3, #31
 800e64c:	617b      	str	r3, [r7, #20]
 800e64e:	4921      	ldr	r1, [pc, #132]	; (800e6d4 <vTaskSwitchContext+0xb8>)
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	4613      	mov	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	440b      	add	r3, r1
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10a      	bne.n	800e678 <vTaskSwitchContext+0x5c>
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	607b      	str	r3, [r7, #4]
 800e674:	bf00      	nop
 800e676:	e7fe      	b.n	800e676 <vTaskSwitchContext+0x5a>
 800e678:	697a      	ldr	r2, [r7, #20]
 800e67a:	4613      	mov	r3, r2
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4413      	add	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4a14      	ldr	r2, [pc, #80]	; (800e6d4 <vTaskSwitchContext+0xb8>)
 800e684:	4413      	add	r3, r2
 800e686:	613b      	str	r3, [r7, #16]
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	685a      	ldr	r2, [r3, #4]
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	605a      	str	r2, [r3, #4]
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	685a      	ldr	r2, [r3, #4]
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	3308      	adds	r3, #8
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d104      	bne.n	800e6a8 <vTaskSwitchContext+0x8c>
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	685a      	ldr	r2, [r3, #4]
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	605a      	str	r2, [r3, #4]
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	4a0a      	ldr	r2, [pc, #40]	; (800e6d8 <vTaskSwitchContext+0xbc>)
 800e6b0:	6013      	str	r3, [r2, #0]
 800e6b2:	4b09      	ldr	r3, [pc, #36]	; (800e6d8 <vTaskSwitchContext+0xbc>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	335c      	adds	r3, #92	; 0x5c
 800e6b8:	4a08      	ldr	r2, [pc, #32]	; (800e6dc <vTaskSwitchContext+0xc0>)
 800e6ba:	6013      	str	r3, [r2, #0]
 800e6bc:	bf00      	nop
 800e6be:	371c      	adds	r7, #28
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	20002988 	.word	0x20002988
 800e6cc:	20002974 	.word	0x20002974
 800e6d0:	20002968 	.word	0x20002968
 800e6d4:	20002864 	.word	0x20002864
 800e6d8:	20002860 	.word	0x20002860
 800e6dc:	20000114 	.word	0x20000114

0800e6e0 <vTaskPlaceOnEventList>:
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d10a      	bne.n	800e706 <vTaskPlaceOnEventList+0x26>
 800e6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	60fb      	str	r3, [r7, #12]
 800e702:	bf00      	nop
 800e704:	e7fe      	b.n	800e704 <vTaskPlaceOnEventList+0x24>
 800e706:	4b07      	ldr	r3, [pc, #28]	; (800e724 <vTaskPlaceOnEventList+0x44>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3318      	adds	r3, #24
 800e70c:	4619      	mov	r1, r3
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7fe fc41 	bl	800cf96 <vListInsert>
 800e714:	2101      	movs	r1, #1
 800e716:	6838      	ldr	r0, [r7, #0]
 800e718:	f000 fbd6 	bl	800eec8 <prvAddCurrentTaskToDelayedList>
 800e71c:	bf00      	nop
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	20002860 	.word	0x20002860

0800e728 <vTaskPlaceOnEventListRestricted>:
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10a      	bne.n	800e750 <vTaskPlaceOnEventListRestricted+0x28>
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	617b      	str	r3, [r7, #20]
 800e74c:	bf00      	nop
 800e74e:	e7fe      	b.n	800e74e <vTaskPlaceOnEventListRestricted+0x26>
 800e750:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <vTaskPlaceOnEventListRestricted+0x54>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	3318      	adds	r3, #24
 800e756:	4619      	mov	r1, r3
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f7fe fbf8 	bl	800cf4e <vListInsertEnd>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <vTaskPlaceOnEventListRestricted+0x42>
 800e764:	f04f 33ff 	mov.w	r3, #4294967295
 800e768:	60bb      	str	r3, [r7, #8]
 800e76a:	6879      	ldr	r1, [r7, #4]
 800e76c:	68b8      	ldr	r0, [r7, #8]
 800e76e:	f000 fbab 	bl	800eec8 <prvAddCurrentTaskToDelayedList>
 800e772:	bf00      	nop
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	20002860 	.word	0x20002860

0800e780 <xTaskRemoveFromEventList>:
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	613b      	str	r3, [r7, #16]
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10a      	bne.n	800e7ac <xTaskRemoveFromEventList+0x2c>
 800e796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	60fb      	str	r3, [r7, #12]
 800e7a8:	bf00      	nop
 800e7aa:	e7fe      	b.n	800e7aa <xTaskRemoveFromEventList+0x2a>
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	3318      	adds	r3, #24
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe fc29 	bl	800d008 <uxListRemove>
 800e7b6:	4b1d      	ldr	r3, [pc, #116]	; (800e82c <xTaskRemoveFromEventList+0xac>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d11c      	bne.n	800e7f8 <xTaskRemoveFromEventList+0x78>
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe fc20 	bl	800d008 <uxListRemove>
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	409a      	lsls	r2, r3
 800e7d0:	4b17      	ldr	r3, [pc, #92]	; (800e830 <xTaskRemoveFromEventList+0xb0>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	4a16      	ldr	r2, [pc, #88]	; (800e830 <xTaskRemoveFromEventList+0xb0>)
 800e7d8:	6013      	str	r3, [r2, #0]
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7de:	4613      	mov	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4a13      	ldr	r2, [pc, #76]	; (800e834 <xTaskRemoveFromEventList+0xb4>)
 800e7e8:	441a      	add	r2, r3
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	f7fe fbac 	bl	800cf4e <vListInsertEnd>
 800e7f6:	e005      	b.n	800e804 <xTaskRemoveFromEventList+0x84>
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	3318      	adds	r3, #24
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	480e      	ldr	r0, [pc, #56]	; (800e838 <xTaskRemoveFromEventList+0xb8>)
 800e800:	f7fe fba5 	bl	800cf4e <vListInsertEnd>
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e808:	4b0c      	ldr	r3, [pc, #48]	; (800e83c <xTaskRemoveFromEventList+0xbc>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80e:	429a      	cmp	r2, r3
 800e810:	d905      	bls.n	800e81e <xTaskRemoveFromEventList+0x9e>
 800e812:	2301      	movs	r3, #1
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	4b0a      	ldr	r3, [pc, #40]	; (800e840 <xTaskRemoveFromEventList+0xc0>)
 800e818:	2201      	movs	r2, #1
 800e81a:	601a      	str	r2, [r3, #0]
 800e81c:	e001      	b.n	800e822 <xTaskRemoveFromEventList+0xa2>
 800e81e:	2300      	movs	r3, #0
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	4618      	mov	r0, r3
 800e826:	3718      	adds	r7, #24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	20002988 	.word	0x20002988
 800e830:	20002968 	.word	0x20002968
 800e834:	20002864 	.word	0x20002864
 800e838:	20002920 	.word	0x20002920
 800e83c:	20002860 	.word	0x20002860
 800e840:	20002974 	.word	0x20002974

0800e844 <vTaskInternalSetTimeOutState>:
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	4b06      	ldr	r3, [pc, #24]	; (800e868 <vTaskInternalSetTimeOutState+0x24>)
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	4b05      	ldr	r3, [pc, #20]	; (800e86c <vTaskInternalSetTimeOutState+0x28>)
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	605a      	str	r2, [r3, #4]
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr
 800e868:	20002978 	.word	0x20002978
 800e86c:	20002964 	.word	0x20002964

0800e870 <xTaskCheckForTimeOut>:
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10a      	bne.n	800e896 <xTaskCheckForTimeOut+0x26>
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	613b      	str	r3, [r7, #16]
 800e892:	bf00      	nop
 800e894:	e7fe      	b.n	800e894 <xTaskCheckForTimeOut+0x24>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d10a      	bne.n	800e8b2 <xTaskCheckForTimeOut+0x42>
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <xTaskCheckForTimeOut+0x40>
 800e8b2:	f001 f827 	bl	800f904 <vPortEnterCritical>
 800e8b6:	4b1d      	ldr	r3, [pc, #116]	; (800e92c <xTaskCheckForTimeOut+0xbc>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	61bb      	str	r3, [r7, #24]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	617b      	str	r3, [r7, #20]
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ce:	d102      	bne.n	800e8d6 <xTaskCheckForTimeOut+0x66>
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	61fb      	str	r3, [r7, #28]
 800e8d4:	e023      	b.n	800e91e <xTaskCheckForTimeOut+0xae>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	4b15      	ldr	r3, [pc, #84]	; (800e930 <xTaskCheckForTimeOut+0xc0>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d007      	beq.n	800e8f2 <xTaskCheckForTimeOut+0x82>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d302      	bcc.n	800e8f2 <xTaskCheckForTimeOut+0x82>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	61fb      	str	r3, [r7, #28]
 800e8f0:	e015      	b.n	800e91e <xTaskCheckForTimeOut+0xae>
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d20b      	bcs.n	800e914 <xTaskCheckForTimeOut+0xa4>
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	1ad2      	subs	r2, r2, r3
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	601a      	str	r2, [r3, #0]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff ff9b 	bl	800e844 <vTaskInternalSetTimeOutState>
 800e90e:	2300      	movs	r3, #0
 800e910:	61fb      	str	r3, [r7, #28]
 800e912:	e004      	b.n	800e91e <xTaskCheckForTimeOut+0xae>
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2200      	movs	r2, #0
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	2301      	movs	r3, #1
 800e91c:	61fb      	str	r3, [r7, #28]
 800e91e:	f001 f821 	bl	800f964 <vPortExitCritical>
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	4618      	mov	r0, r3
 800e926:	3720      	adds	r7, #32
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20002964 	.word	0x20002964
 800e930:	20002978 	.word	0x20002978

0800e934 <vTaskMissedYield>:
 800e934:	b480      	push	{r7}
 800e936:	af00      	add	r7, sp, #0
 800e938:	4b03      	ldr	r3, [pc, #12]	; (800e948 <vTaskMissedYield+0x14>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	bf00      	nop
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	20002974 	.word	0x20002974

0800e94c <prvIdleTask>:
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	f000 f852 	bl	800e9fc <prvCheckTasksWaitingTermination>
 800e958:	4b06      	ldr	r3, [pc, #24]	; (800e974 <prvIdleTask+0x28>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d9f9      	bls.n	800e954 <prvIdleTask+0x8>
 800e960:	4b05      	ldr	r3, [pc, #20]	; (800e978 <prvIdleTask+0x2c>)
 800e962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	e7f0      	b.n	800e954 <prvIdleTask+0x8>
 800e972:	bf00      	nop
 800e974:	20002864 	.word	0x20002864
 800e978:	e000ed04 	.word	0xe000ed04

0800e97c <prvInitialiseTaskLists>:
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	2300      	movs	r3, #0
 800e984:	607b      	str	r3, [r7, #4]
 800e986:	e00c      	b.n	800e9a2 <prvInitialiseTaskLists+0x26>
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	4613      	mov	r3, r2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	4a12      	ldr	r2, [pc, #72]	; (800e9dc <prvInitialiseTaskLists+0x60>)
 800e994:	4413      	add	r3, r2
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe faac 	bl	800cef4 <vListInitialise>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	607b      	str	r3, [r7, #4]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b06      	cmp	r3, #6
 800e9a6:	d9ef      	bls.n	800e988 <prvInitialiseTaskLists+0xc>
 800e9a8:	480d      	ldr	r0, [pc, #52]	; (800e9e0 <prvInitialiseTaskLists+0x64>)
 800e9aa:	f7fe faa3 	bl	800cef4 <vListInitialise>
 800e9ae:	480d      	ldr	r0, [pc, #52]	; (800e9e4 <prvInitialiseTaskLists+0x68>)
 800e9b0:	f7fe faa0 	bl	800cef4 <vListInitialise>
 800e9b4:	480c      	ldr	r0, [pc, #48]	; (800e9e8 <prvInitialiseTaskLists+0x6c>)
 800e9b6:	f7fe fa9d 	bl	800cef4 <vListInitialise>
 800e9ba:	480c      	ldr	r0, [pc, #48]	; (800e9ec <prvInitialiseTaskLists+0x70>)
 800e9bc:	f7fe fa9a 	bl	800cef4 <vListInitialise>
 800e9c0:	480b      	ldr	r0, [pc, #44]	; (800e9f0 <prvInitialiseTaskLists+0x74>)
 800e9c2:	f7fe fa97 	bl	800cef4 <vListInitialise>
 800e9c6:	4b0b      	ldr	r3, [pc, #44]	; (800e9f4 <prvInitialiseTaskLists+0x78>)
 800e9c8:	4a05      	ldr	r2, [pc, #20]	; (800e9e0 <prvInitialiseTaskLists+0x64>)
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	4b0a      	ldr	r3, [pc, #40]	; (800e9f8 <prvInitialiseTaskLists+0x7c>)
 800e9ce:	4a05      	ldr	r2, [pc, #20]	; (800e9e4 <prvInitialiseTaskLists+0x68>)
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	bf00      	nop
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	20002864 	.word	0x20002864
 800e9e0:	200028f0 	.word	0x200028f0
 800e9e4:	20002904 	.word	0x20002904
 800e9e8:	20002920 	.word	0x20002920
 800e9ec:	20002934 	.word	0x20002934
 800e9f0:	2000294c 	.word	0x2000294c
 800e9f4:	20002918 	.word	0x20002918
 800e9f8:	2000291c 	.word	0x2000291c

0800e9fc <prvCheckTasksWaitingTermination>:
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	e019      	b.n	800ea38 <prvCheckTasksWaitingTermination+0x3c>
 800ea04:	f000 ff7e 	bl	800f904 <vPortEnterCritical>
 800ea08:	4b10      	ldr	r3, [pc, #64]	; (800ea4c <prvCheckTasksWaitingTermination+0x50>)
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	607b      	str	r3, [r7, #4]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	3304      	adds	r3, #4
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe faf7 	bl	800d008 <uxListRemove>
 800ea1a:	4b0d      	ldr	r3, [pc, #52]	; (800ea50 <prvCheckTasksWaitingTermination+0x54>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	4a0b      	ldr	r2, [pc, #44]	; (800ea50 <prvCheckTasksWaitingTermination+0x54>)
 800ea22:	6013      	str	r3, [r2, #0]
 800ea24:	4b0b      	ldr	r3, [pc, #44]	; (800ea54 <prvCheckTasksWaitingTermination+0x58>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	4a0a      	ldr	r2, [pc, #40]	; (800ea54 <prvCheckTasksWaitingTermination+0x58>)
 800ea2c:	6013      	str	r3, [r2, #0]
 800ea2e:	f000 ff99 	bl	800f964 <vPortExitCritical>
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f810 	bl	800ea58 <prvDeleteTCB>
 800ea38:	4b06      	ldr	r3, [pc, #24]	; (800ea54 <prvCheckTasksWaitingTermination+0x58>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1e1      	bne.n	800ea04 <prvCheckTasksWaitingTermination+0x8>
 800ea40:	bf00      	nop
 800ea42:	bf00      	nop
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20002934 	.word	0x20002934
 800ea50:	20002960 	.word	0x20002960
 800ea54:	20002948 	.word	0x20002948

0800ea58 <prvDeleteTCB>:
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	335c      	adds	r3, #92	; 0x5c
 800ea64:	4618      	mov	r0, r3
 800ea66:	f001 fbd9 	bl	801021c <_reclaim_reent>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d108      	bne.n	800ea86 <prvDeleteTCB+0x2e>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f001 f929 	bl	800fcd0 <vPortFree>
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f001 f926 	bl	800fcd0 <vPortFree>
 800ea84:	e018      	b.n	800eab8 <prvDeleteTCB+0x60>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d103      	bne.n	800ea98 <prvDeleteTCB+0x40>
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f001 f91d 	bl	800fcd0 <vPortFree>
 800ea96:	e00f      	b.n	800eab8 <prvDeleteTCB+0x60>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d00a      	beq.n	800eab8 <prvDeleteTCB+0x60>
 800eaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa6:	f383 8811 	msr	BASEPRI, r3
 800eaaa:	f3bf 8f6f 	isb	sy
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	bf00      	nop
 800eab6:	e7fe      	b.n	800eab6 <prvDeleteTCB+0x5e>
 800eab8:	bf00      	nop
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <prvResetNextTaskUnblockTime>:
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	4b0f      	ldr	r3, [pc, #60]	; (800eb04 <prvResetNextTaskUnblockTime+0x44>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <prvResetNextTaskUnblockTime+0x14>
 800ead0:	2301      	movs	r3, #1
 800ead2:	e000      	b.n	800ead6 <prvResetNextTaskUnblockTime+0x16>
 800ead4:	2300      	movs	r3, #0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d004      	beq.n	800eae4 <prvResetNextTaskUnblockTime+0x24>
 800eada:	4b0b      	ldr	r3, [pc, #44]	; (800eb08 <prvResetNextTaskUnblockTime+0x48>)
 800eadc:	f04f 32ff 	mov.w	r2, #4294967295
 800eae0:	601a      	str	r2, [r3, #0]
 800eae2:	e008      	b.n	800eaf6 <prvResetNextTaskUnblockTime+0x36>
 800eae4:	4b07      	ldr	r3, [pc, #28]	; (800eb04 <prvResetNextTaskUnblockTime+0x44>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	607b      	str	r3, [r7, #4]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	4a05      	ldr	r2, [pc, #20]	; (800eb08 <prvResetNextTaskUnblockTime+0x48>)
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	bf00      	nop
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	20002918 	.word	0x20002918
 800eb08:	20002980 	.word	0x20002980

0800eb0c <xTaskGetSchedulerState>:
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <xTaskGetSchedulerState+0x34>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d102      	bne.n	800eb20 <xTaskGetSchedulerState+0x14>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	607b      	str	r3, [r7, #4]
 800eb1e:	e008      	b.n	800eb32 <xTaskGetSchedulerState+0x26>
 800eb20:	4b08      	ldr	r3, [pc, #32]	; (800eb44 <xTaskGetSchedulerState+0x38>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <xTaskGetSchedulerState+0x22>
 800eb28:	2302      	movs	r3, #2
 800eb2a:	607b      	str	r3, [r7, #4]
 800eb2c:	e001      	b.n	800eb32 <xTaskGetSchedulerState+0x26>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	607b      	str	r3, [r7, #4]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	2000296c 	.word	0x2000296c
 800eb44:	20002988 	.word	0x20002988

0800eb48 <xTaskPriorityInherit>:
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	60bb      	str	r3, [r7, #8]
 800eb54:	2300      	movs	r3, #0
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d06e      	beq.n	800ec3c <xTaskPriorityInherit+0xf4>
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb62:	4b39      	ldr	r3, [pc, #228]	; (800ec48 <xTaskPriorityInherit+0x100>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d25e      	bcs.n	800ec2a <xTaskPriorityInherit+0xe2>
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	db06      	blt.n	800eb82 <xTaskPriorityInherit+0x3a>
 800eb74:	4b34      	ldr	r3, [pc, #208]	; (800ec48 <xTaskPriorityInherit+0x100>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	f1c3 0207 	rsb	r2, r3, #7
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	619a      	str	r2, [r3, #24]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	6959      	ldr	r1, [r3, #20]
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	4413      	add	r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	4a2e      	ldr	r2, [pc, #184]	; (800ec4c <xTaskPriorityInherit+0x104>)
 800eb94:	4413      	add	r3, r2
 800eb96:	4299      	cmp	r1, r3
 800eb98:	d101      	bne.n	800eb9e <xTaskPriorityInherit+0x56>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e000      	b.n	800eba0 <xTaskPriorityInherit+0x58>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d03a      	beq.n	800ec1a <xTaskPriorityInherit+0xd2>
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	3304      	adds	r3, #4
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fe fa2d 	bl	800d008 <uxListRemove>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d115      	bne.n	800ebe0 <xTaskPriorityInherit+0x98>
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb8:	4924      	ldr	r1, [pc, #144]	; (800ec4c <xTaskPriorityInherit+0x104>)
 800ebba:	4613      	mov	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	4413      	add	r3, r2
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	440b      	add	r3, r1
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10a      	bne.n	800ebe0 <xTaskPriorityInherit+0x98>
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebce:	2201      	movs	r2, #1
 800ebd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebd4:	43da      	mvns	r2, r3
 800ebd6:	4b1e      	ldr	r3, [pc, #120]	; (800ec50 <xTaskPriorityInherit+0x108>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4013      	ands	r3, r2
 800ebdc:	4a1c      	ldr	r2, [pc, #112]	; (800ec50 <xTaskPriorityInherit+0x108>)
 800ebde:	6013      	str	r3, [r2, #0]
 800ebe0:	4b19      	ldr	r3, [pc, #100]	; (800ec48 <xTaskPriorityInherit+0x100>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	62da      	str	r2, [r3, #44]	; 0x2c
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebee:	2201      	movs	r2, #1
 800ebf0:	409a      	lsls	r2, r3
 800ebf2:	4b17      	ldr	r3, [pc, #92]	; (800ec50 <xTaskPriorityInherit+0x108>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	4a15      	ldr	r2, [pc, #84]	; (800ec50 <xTaskPriorityInherit+0x108>)
 800ebfa:	6013      	str	r3, [r2, #0]
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec00:	4613      	mov	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4413      	add	r3, r2
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	4a10      	ldr	r2, [pc, #64]	; (800ec4c <xTaskPriorityInherit+0x104>)
 800ec0a:	441a      	add	r2, r3
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4619      	mov	r1, r3
 800ec12:	4610      	mov	r0, r2
 800ec14:	f7fe f99b 	bl	800cf4e <vListInsertEnd>
 800ec18:	e004      	b.n	800ec24 <xTaskPriorityInherit+0xdc>
 800ec1a:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <xTaskPriorityInherit+0x100>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec24:	2301      	movs	r3, #1
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	e008      	b.n	800ec3c <xTaskPriorityInherit+0xf4>
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec2e:	4b06      	ldr	r3, [pc, #24]	; (800ec48 <xTaskPriorityInherit+0x100>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d201      	bcs.n	800ec3c <xTaskPriorityInherit+0xf4>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	60fb      	str	r3, [r7, #12]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20002860 	.word	0x20002860
 800ec4c:	20002864 	.word	0x20002864
 800ec50:	20002968 	.word	0x20002968

0800ec54 <xTaskPriorityDisinherit>:
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	613b      	str	r3, [r7, #16]
 800ec60:	2300      	movs	r3, #0
 800ec62:	617b      	str	r3, [r7, #20]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d06e      	beq.n	800ed48 <xTaskPriorityDisinherit+0xf4>
 800ec6a:	4b3a      	ldr	r3, [pc, #232]	; (800ed54 <xTaskPriorityDisinherit+0x100>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d00a      	beq.n	800ec8a <xTaskPriorityDisinherit+0x36>
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <xTaskPriorityDisinherit+0x34>
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10a      	bne.n	800eca8 <xTaskPriorityDisinherit+0x54>
 800ec92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	60bb      	str	r3, [r7, #8]
 800eca4:	bf00      	nop
 800eca6:	e7fe      	b.n	800eca6 <xTaskPriorityDisinherit+0x52>
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecac:	1e5a      	subs	r2, r3, #1
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	659a      	str	r2, [r3, #88]	; 0x58
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d044      	beq.n	800ed48 <xTaskPriorityDisinherit+0xf4>
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d140      	bne.n	800ed48 <xTaskPriorityDisinherit+0xf4>
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	3304      	adds	r3, #4
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe f99c 	bl	800d008 <uxListRemove>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d115      	bne.n	800ed02 <xTaskPriorityDisinherit+0xae>
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecda:	491f      	ldr	r1, [pc, #124]	; (800ed58 <xTaskPriorityDisinherit+0x104>)
 800ecdc:	4613      	mov	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	4413      	add	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	440b      	add	r3, r1
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10a      	bne.n	800ed02 <xTaskPriorityDisinherit+0xae>
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ecf6:	43da      	mvns	r2, r3
 800ecf8:	4b18      	ldr	r3, [pc, #96]	; (800ed5c <xTaskPriorityDisinherit+0x108>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	4a17      	ldr	r2, [pc, #92]	; (800ed5c <xTaskPriorityDisinherit+0x108>)
 800ed00:	6013      	str	r3, [r2, #0]
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	62da      	str	r2, [r3, #44]	; 0x2c
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0e:	f1c3 0207 	rsb	r2, r3, #7
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	619a      	str	r2, [r3, #24]
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	409a      	lsls	r2, r3
 800ed1e:	4b0f      	ldr	r3, [pc, #60]	; (800ed5c <xTaskPriorityDisinherit+0x108>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	4a0d      	ldr	r2, [pc, #52]	; (800ed5c <xTaskPriorityDisinherit+0x108>)
 800ed26:	6013      	str	r3, [r2, #0]
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4413      	add	r3, r2
 800ed32:	009b      	lsls	r3, r3, #2
 800ed34:	4a08      	ldr	r2, [pc, #32]	; (800ed58 <xTaskPriorityDisinherit+0x104>)
 800ed36:	441a      	add	r2, r3
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	3304      	adds	r3, #4
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	4610      	mov	r0, r2
 800ed40:	f7fe f905 	bl	800cf4e <vListInsertEnd>
 800ed44:	2301      	movs	r3, #1
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3718      	adds	r7, #24
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20002860 	.word	0x20002860
 800ed58:	20002864 	.word	0x20002864
 800ed5c:	20002968 	.word	0x20002968

0800ed60 <vTaskPriorityDisinheritAfterTimeout>:
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	61bb      	str	r3, [r7, #24]
 800ed6e:	2301      	movs	r3, #1
 800ed70:	617b      	str	r3, [r7, #20]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f000 8088 	beq.w	800ee8a <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d10a      	bne.n	800ed98 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800ed82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed86:	f383 8811 	msr	BASEPRI, r3
 800ed8a:	f3bf 8f6f 	isb	sy
 800ed8e:	f3bf 8f4f 	dsb	sy
 800ed92:	60fb      	str	r3, [r7, #12]
 800ed94:	bf00      	nop
 800ed96:	e7fe      	b.n	800ed96 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d902      	bls.n	800eda8 <vTaskPriorityDisinheritAfterTimeout+0x48>
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	61fb      	str	r3, [r7, #28]
 800eda6:	e002      	b.n	800edae <vTaskPriorityDisinheritAfterTimeout+0x4e>
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edac:	61fb      	str	r3, [r7, #28]
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb2:	69fa      	ldr	r2, [r7, #28]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d068      	beq.n	800ee8a <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edbc:	697a      	ldr	r2, [r7, #20]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d163      	bne.n	800ee8a <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800edc2:	4b34      	ldr	r3, [pc, #208]	; (800ee94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	69ba      	ldr	r2, [r7, #24]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d10a      	bne.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800edcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	60bb      	str	r3, [r7, #8]
 800edde:	bf00      	nop
 800ede0:	e7fe      	b.n	800ede0 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede6:	613b      	str	r3, [r7, #16]
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	69fa      	ldr	r2, [r7, #28]
 800edec:	62da      	str	r2, [r3, #44]	; 0x2c
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	699b      	ldr	r3, [r3, #24]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	db04      	blt.n	800ee00 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	f1c3 0207 	rsb	r2, r3, #7
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	619a      	str	r2, [r3, #24]
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	6959      	ldr	r1, [r3, #20]
 800ee04:	693a      	ldr	r2, [r7, #16]
 800ee06:	4613      	mov	r3, r2
 800ee08:	009b      	lsls	r3, r3, #2
 800ee0a:	4413      	add	r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	4a22      	ldr	r2, [pc, #136]	; (800ee98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee10:	4413      	add	r3, r2
 800ee12:	4299      	cmp	r1, r3
 800ee14:	d101      	bne.n	800ee1a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ee16:	2301      	movs	r3, #1
 800ee18:	e000      	b.n	800ee1c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d034      	beq.n	800ee8a <vTaskPriorityDisinheritAfterTimeout+0x12a>
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	3304      	adds	r3, #4
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe f8ef 	bl	800d008 <uxListRemove>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d115      	bne.n	800ee5c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee34:	4918      	ldr	r1, [pc, #96]	; (800ee98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee36:	4613      	mov	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	4413      	add	r3, r2
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	440b      	add	r3, r1
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10a      	bne.n	800ee5c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee50:	43da      	mvns	r2, r3
 800ee52:	4b12      	ldr	r3, [pc, #72]	; (800ee9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4013      	ands	r3, r2
 800ee58:	4a10      	ldr	r2, [pc, #64]	; (800ee9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee5a:	6013      	str	r3, [r2, #0]
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee60:	2201      	movs	r2, #1
 800ee62:	409a      	lsls	r2, r3
 800ee64:	4b0d      	ldr	r3, [pc, #52]	; (800ee9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	4a0c      	ldr	r2, [pc, #48]	; (800ee9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee6c:	6013      	str	r3, [r2, #0]
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee72:	4613      	mov	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	4413      	add	r3, r2
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	4a07      	ldr	r2, [pc, #28]	; (800ee98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee7c:	441a      	add	r2, r3
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	3304      	adds	r3, #4
 800ee82:	4619      	mov	r1, r3
 800ee84:	4610      	mov	r0, r2
 800ee86:	f7fe f862 	bl	800cf4e <vListInsertEnd>
 800ee8a:	bf00      	nop
 800ee8c:	3720      	adds	r7, #32
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20002860 	.word	0x20002860
 800ee98:	20002864 	.word	0x20002864
 800ee9c:	20002968 	.word	0x20002968

0800eea0 <pvTaskIncrementMutexHeldCount>:
 800eea0:	b480      	push	{r7}
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	4b07      	ldr	r3, [pc, #28]	; (800eec4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d004      	beq.n	800eeb6 <pvTaskIncrementMutexHeldCount+0x16>
 800eeac:	4b05      	ldr	r3, [pc, #20]	; (800eec4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eeb2:	3201      	adds	r2, #1
 800eeb4:	659a      	str	r2, [r3, #88]	; 0x58
 800eeb6:	4b03      	ldr	r3, [pc, #12]	; (800eec4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4618      	mov	r0, r3
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	20002860 	.word	0x20002860

0800eec8 <prvAddCurrentTaskToDelayedList>:
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
 800eed2:	4b29      	ldr	r3, [pc, #164]	; (800ef78 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	4b28      	ldr	r3, [pc, #160]	; (800ef7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3304      	adds	r3, #4
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fe f892 	bl	800d008 <uxListRemove>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d10b      	bne.n	800ef02 <prvAddCurrentTaskToDelayedList+0x3a>
 800eeea:	4b24      	ldr	r3, [pc, #144]	; (800ef7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef0:	2201      	movs	r2, #1
 800eef2:	fa02 f303 	lsl.w	r3, r2, r3
 800eef6:	43da      	mvns	r2, r3
 800eef8:	4b21      	ldr	r3, [pc, #132]	; (800ef80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4013      	ands	r3, r2
 800eefe:	4a20      	ldr	r2, [pc, #128]	; (800ef80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef00:	6013      	str	r3, [r2, #0]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef08:	d10a      	bne.n	800ef20 <prvAddCurrentTaskToDelayedList+0x58>
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d007      	beq.n	800ef20 <prvAddCurrentTaskToDelayedList+0x58>
 800ef10:	4b1a      	ldr	r3, [pc, #104]	; (800ef7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3304      	adds	r3, #4
 800ef16:	4619      	mov	r1, r3
 800ef18:	481a      	ldr	r0, [pc, #104]	; (800ef84 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef1a:	f7fe f818 	bl	800cf4e <vListInsertEnd>
 800ef1e:	e026      	b.n	800ef6e <prvAddCurrentTaskToDelayedList+0xa6>
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4413      	add	r3, r2
 800ef26:	60bb      	str	r3, [r7, #8]
 800ef28:	4b14      	ldr	r3, [pc, #80]	; (800ef7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	605a      	str	r2, [r3, #4]
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d209      	bcs.n	800ef4c <prvAddCurrentTaskToDelayedList+0x84>
 800ef38:	4b13      	ldr	r3, [pc, #76]	; (800ef88 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	4b0f      	ldr	r3, [pc, #60]	; (800ef7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	3304      	adds	r3, #4
 800ef42:	4619      	mov	r1, r3
 800ef44:	4610      	mov	r0, r2
 800ef46:	f7fe f826 	bl	800cf96 <vListInsert>
 800ef4a:	e010      	b.n	800ef6e <prvAddCurrentTaskToDelayedList+0xa6>
 800ef4c:	4b0f      	ldr	r3, [pc, #60]	; (800ef8c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	4b0a      	ldr	r3, [pc, #40]	; (800ef7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3304      	adds	r3, #4
 800ef56:	4619      	mov	r1, r3
 800ef58:	4610      	mov	r0, r2
 800ef5a:	f7fe f81c 	bl	800cf96 <vListInsert>
 800ef5e:	4b0c      	ldr	r3, [pc, #48]	; (800ef90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d202      	bcs.n	800ef6e <prvAddCurrentTaskToDelayedList+0xa6>
 800ef68:	4a09      	ldr	r2, [pc, #36]	; (800ef90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	bf00      	nop
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	20002964 	.word	0x20002964
 800ef7c:	20002860 	.word	0x20002860
 800ef80:	20002968 	.word	0x20002968
 800ef84:	2000294c 	.word	0x2000294c
 800ef88:	2000291c 	.word	0x2000291c
 800ef8c:	20002918 	.word	0x20002918
 800ef90:	20002980 	.word	0x20002980

0800ef94 <xTimerCreateTimerTask>:
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b08a      	sub	sp, #40	; 0x28
 800ef98:	af04      	add	r7, sp, #16
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	617b      	str	r3, [r7, #20]
 800ef9e:	f000 fb41 	bl	800f624 <prvCheckForValidListAndQueue>
 800efa2:	4b1c      	ldr	r3, [pc, #112]	; (800f014 <xTimerCreateTimerTask+0x80>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d021      	beq.n	800efee <xTimerCreateTimerTask+0x5a>
 800efaa:	2300      	movs	r3, #0
 800efac:	60fb      	str	r3, [r7, #12]
 800efae:	2300      	movs	r3, #0
 800efb0:	60bb      	str	r3, [r7, #8]
 800efb2:	1d3a      	adds	r2, r7, #4
 800efb4:	f107 0108 	add.w	r1, r7, #8
 800efb8:	f107 030c 	add.w	r3, r7, #12
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7f4 fbd1 	bl	8003764 <vApplicationGetTimerTaskMemory>
 800efc2:	6879      	ldr	r1, [r7, #4]
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	9202      	str	r2, [sp, #8]
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	2302      	movs	r3, #2
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	2300      	movs	r3, #0
 800efd2:	460a      	mov	r2, r1
 800efd4:	4910      	ldr	r1, [pc, #64]	; (800f018 <xTimerCreateTimerTask+0x84>)
 800efd6:	4811      	ldr	r0, [pc, #68]	; (800f01c <xTimerCreateTimerTask+0x88>)
 800efd8:	f7fe fed2 	bl	800dd80 <xTaskCreateStatic>
 800efdc:	4603      	mov	r3, r0
 800efde:	4a10      	ldr	r2, [pc, #64]	; (800f020 <xTimerCreateTimerTask+0x8c>)
 800efe0:	6013      	str	r3, [r2, #0]
 800efe2:	4b0f      	ldr	r3, [pc, #60]	; (800f020 <xTimerCreateTimerTask+0x8c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <xTimerCreateTimerTask+0x5a>
 800efea:	2301      	movs	r3, #1
 800efec:	617b      	str	r3, [r7, #20]
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10a      	bne.n	800f00a <xTimerCreateTimerTask+0x76>
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	613b      	str	r3, [r7, #16]
 800f006:	bf00      	nop
 800f008:	e7fe      	b.n	800f008 <xTimerCreateTimerTask+0x74>
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	4618      	mov	r0, r3
 800f00e:	3718      	adds	r7, #24
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	200029bc 	.word	0x200029bc
 800f018:	080119ec 	.word	0x080119ec
 800f01c:	0800f261 	.word	0x0800f261
 800f020:	200029c0 	.word	0x200029c0

0800f024 <xTimerCreate>:
 800f024:	b580      	push	{r7, lr}
 800f026:	b088      	sub	sp, #32
 800f028:	af02      	add	r7, sp, #8
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	603b      	str	r3, [r7, #0]
 800f032:	202c      	movs	r0, #44	; 0x2c
 800f034:	f000 fd88 	bl	800fb48 <pvPortMalloc>
 800f038:	6178      	str	r0, [r7, #20]
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00d      	beq.n	800f05c <xTimerCreate+0x38>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	6a3b      	ldr	r3, [r7, #32]
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	68b9      	ldr	r1, [r7, #8]
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f000 f846 	bl	800f0e0 <prvInitialiseNewTimer>
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	2200      	movs	r2, #0
 800f058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	4618      	mov	r0, r3
 800f060:	3718      	adds	r7, #24
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <xTimerCreateStatic>:
 800f066:	b580      	push	{r7, lr}
 800f068:	b08a      	sub	sp, #40	; 0x28
 800f06a:	af02      	add	r7, sp, #8
 800f06c:	60f8      	str	r0, [r7, #12]
 800f06e:	60b9      	str	r1, [r7, #8]
 800f070:	607a      	str	r2, [r7, #4]
 800f072:	603b      	str	r3, [r7, #0]
 800f074:	232c      	movs	r3, #44	; 0x2c
 800f076:	613b      	str	r3, [r7, #16]
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	2b2c      	cmp	r3, #44	; 0x2c
 800f07c:	d00a      	beq.n	800f094 <xTimerCreateStatic+0x2e>
 800f07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	61bb      	str	r3, [r7, #24]
 800f090:	bf00      	nop
 800f092:	e7fe      	b.n	800f092 <xTimerCreateStatic+0x2c>
 800f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10a      	bne.n	800f0b0 <xTimerCreateStatic+0x4a>
 800f09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	617b      	str	r3, [r7, #20]
 800f0ac:	bf00      	nop
 800f0ae:	e7fe      	b.n	800f0ae <xTimerCreateStatic+0x48>
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	61fb      	str	r3, [r7, #28]
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00d      	beq.n	800f0d6 <xTimerCreateStatic+0x70>
 800f0ba:	69fb      	ldr	r3, [r7, #28]
 800f0bc:	9301      	str	r3, [sp, #4]
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	9300      	str	r3, [sp, #0]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	68b9      	ldr	r1, [r7, #8]
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f000 f809 	bl	800f0e0 <prvInitialiseNewTimer>
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3720      	adds	r7, #32
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <prvInitialiseNewTimer>:
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b086      	sub	sp, #24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	603b      	str	r3, [r7, #0]
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d10a      	bne.n	800f10a <prvInitialiseNewTimer+0x2a>
 800f0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f8:	f383 8811 	msr	BASEPRI, r3
 800f0fc:	f3bf 8f6f 	isb	sy
 800f100:	f3bf 8f4f 	dsb	sy
 800f104:	617b      	str	r3, [r7, #20]
 800f106:	bf00      	nop
 800f108:	e7fe      	b.n	800f108 <prvInitialiseNewTimer+0x28>
 800f10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d015      	beq.n	800f13c <prvInitialiseNewTimer+0x5c>
 800f110:	f000 fa88 	bl	800f624 <prvCheckForValidListAndQueue>
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	68fa      	ldr	r2, [r7, #12]
 800f118:	601a      	str	r2, [r3, #0]
 800f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	619a      	str	r2, [r3, #24]
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	61da      	str	r2, [r3, #28]
 800f126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	621a      	str	r2, [r3, #32]
 800f12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12e:	6a3a      	ldr	r2, [r7, #32]
 800f130:	625a      	str	r2, [r3, #36]	; 0x24
 800f132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f134:	3304      	adds	r3, #4
 800f136:	4618      	mov	r0, r3
 800f138:	f7fd fefc 	bl	800cf34 <vListInitialiseItem>
 800f13c:	bf00      	nop
 800f13e:	3718      	adds	r7, #24
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <xTimerGenericCommand>:
 800f144:	b580      	push	{r7, lr}
 800f146:	b08a      	sub	sp, #40	; 0x28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
 800f150:	603b      	str	r3, [r7, #0]
 800f152:	2300      	movs	r3, #0
 800f154:	627b      	str	r3, [r7, #36]	; 0x24
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d10a      	bne.n	800f172 <xTimerGenericCommand+0x2e>
 800f15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f160:	f383 8811 	msr	BASEPRI, r3
 800f164:	f3bf 8f6f 	isb	sy
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	623b      	str	r3, [r7, #32]
 800f16e:	bf00      	nop
 800f170:	e7fe      	b.n	800f170 <xTimerGenericCommand+0x2c>
 800f172:	4b1a      	ldr	r3, [pc, #104]	; (800f1dc <xTimerGenericCommand+0x98>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d02a      	beq.n	800f1d0 <xTimerGenericCommand+0x8c>
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	617b      	str	r3, [r7, #20]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	61bb      	str	r3, [r7, #24]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	61fb      	str	r3, [r7, #28]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b05      	cmp	r3, #5
 800f18a:	dc18      	bgt.n	800f1be <xTimerGenericCommand+0x7a>
 800f18c:	f7ff fcbe 	bl	800eb0c <xTaskGetSchedulerState>
 800f190:	4603      	mov	r3, r0
 800f192:	2b02      	cmp	r3, #2
 800f194:	d109      	bne.n	800f1aa <xTimerGenericCommand+0x66>
 800f196:	4b11      	ldr	r3, [pc, #68]	; (800f1dc <xTimerGenericCommand+0x98>)
 800f198:	6818      	ldr	r0, [r3, #0]
 800f19a:	f107 0114 	add.w	r1, r7, #20
 800f19e:	2300      	movs	r3, #0
 800f1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1a2:	f7fe f8e5 	bl	800d370 <xQueueGenericSend>
 800f1a6:	6278      	str	r0, [r7, #36]	; 0x24
 800f1a8:	e012      	b.n	800f1d0 <xTimerGenericCommand+0x8c>
 800f1aa:	4b0c      	ldr	r3, [pc, #48]	; (800f1dc <xTimerGenericCommand+0x98>)
 800f1ac:	6818      	ldr	r0, [r3, #0]
 800f1ae:	f107 0114 	add.w	r1, r7, #20
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f7fe f8db 	bl	800d370 <xQueueGenericSend>
 800f1ba:	6278      	str	r0, [r7, #36]	; 0x24
 800f1bc:	e008      	b.n	800f1d0 <xTimerGenericCommand+0x8c>
 800f1be:	4b07      	ldr	r3, [pc, #28]	; (800f1dc <xTimerGenericCommand+0x98>)
 800f1c0:	6818      	ldr	r0, [r3, #0]
 800f1c2:	f107 0114 	add.w	r1, r7, #20
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	f7fe f9cf 	bl	800d56c <xQueueGenericSendFromISR>
 800f1ce:	6278      	str	r0, [r7, #36]	; 0x24
 800f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3728      	adds	r7, #40	; 0x28
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	200029bc 	.word	0x200029bc

0800f1e0 <prvProcessExpiredTimer>:
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b088      	sub	sp, #32
 800f1e4:	af02      	add	r7, sp, #8
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
 800f1ea:	4b1c      	ldr	r3, [pc, #112]	; (800f25c <prvProcessExpiredTimer+0x7c>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	617b      	str	r3, [r7, #20]
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	3304      	adds	r3, #4
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fd ff05 	bl	800d008 <uxListRemove>
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	69db      	ldr	r3, [r3, #28]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d122      	bne.n	800f24c <prvProcessExpiredTimer+0x6c>
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	699a      	ldr	r2, [r3, #24]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	18d1      	adds	r1, r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	683a      	ldr	r2, [r7, #0]
 800f212:	6978      	ldr	r0, [r7, #20]
 800f214:	f000 f8c8 	bl	800f3a8 <prvInsertTimerInActiveList>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d016      	beq.n	800f24c <prvProcessExpiredTimer+0x6c>
 800f21e:	2300      	movs	r3, #0
 800f220:	9300      	str	r3, [sp, #0]
 800f222:	2300      	movs	r3, #0
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	2100      	movs	r1, #0
 800f228:	6978      	ldr	r0, [r7, #20]
 800f22a:	f7ff ff8b 	bl	800f144 <xTimerGenericCommand>
 800f22e:	6138      	str	r0, [r7, #16]
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d10a      	bne.n	800f24c <prvProcessExpiredTimer+0x6c>
 800f236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23a:	f383 8811 	msr	BASEPRI, r3
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	f3bf 8f4f 	dsb	sy
 800f246:	60fb      	str	r3, [r7, #12]
 800f248:	bf00      	nop
 800f24a:	e7fe      	b.n	800f24a <prvProcessExpiredTimer+0x6a>
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f250:	6978      	ldr	r0, [r7, #20]
 800f252:	4798      	blx	r3
 800f254:	bf00      	nop
 800f256:	3718      	adds	r7, #24
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	200029b4 	.word	0x200029b4

0800f260 <prvTimerTask>:
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	f107 0308 	add.w	r3, r7, #8
 800f26c:	4618      	mov	r0, r3
 800f26e:	f000 f857 	bl	800f320 <prvGetNextExpireTime>
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	4619      	mov	r1, r3
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f000 f803 	bl	800f284 <prvProcessTimerOrBlockTask>
 800f27e:	f000 f8d5 	bl	800f42c <prvProcessReceivedCommands>
 800f282:	e7f1      	b.n	800f268 <prvTimerTask+0x8>

0800f284 <prvProcessTimerOrBlockTask>:
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]
 800f28e:	f7ff f83b 	bl	800e308 <vTaskSuspendAll>
 800f292:	f107 0308 	add.w	r3, r7, #8
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f866 	bl	800f368 <prvSampleTimeNow>
 800f29c:	60f8      	str	r0, [r7, #12]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d130      	bne.n	800f306 <prvProcessTimerOrBlockTask+0x82>
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10a      	bne.n	800f2c0 <prvProcessTimerOrBlockTask+0x3c>
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d806      	bhi.n	800f2c0 <prvProcessTimerOrBlockTask+0x3c>
 800f2b2:	f7ff f837 	bl	800e324 <xTaskResumeAll>
 800f2b6:	68f9      	ldr	r1, [r7, #12]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff ff91 	bl	800f1e0 <prvProcessExpiredTimer>
 800f2be:	e024      	b.n	800f30a <prvProcessTimerOrBlockTask+0x86>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d008      	beq.n	800f2d8 <prvProcessTimerOrBlockTask+0x54>
 800f2c6:	4b13      	ldr	r3, [pc, #76]	; (800f314 <prvProcessTimerOrBlockTask+0x90>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	bf0c      	ite	eq
 800f2d0:	2301      	moveq	r3, #1
 800f2d2:	2300      	movne	r3, #0
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	603b      	str	r3, [r7, #0]
 800f2d8:	4b0f      	ldr	r3, [pc, #60]	; (800f318 <prvProcessTimerOrBlockTask+0x94>)
 800f2da:	6818      	ldr	r0, [r3, #0]
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	683a      	ldr	r2, [r7, #0]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	f7fe fd17 	bl	800dd18 <vQueueWaitForMessageRestricted>
 800f2ea:	f7ff f81b 	bl	800e324 <xTaskResumeAll>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10a      	bne.n	800f30a <prvProcessTimerOrBlockTask+0x86>
 800f2f4:	4b09      	ldr	r3, [pc, #36]	; (800f31c <prvProcessTimerOrBlockTask+0x98>)
 800f2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2fa:	601a      	str	r2, [r3, #0]
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	e001      	b.n	800f30a <prvProcessTimerOrBlockTask+0x86>
 800f306:	f7ff f80d 	bl	800e324 <xTaskResumeAll>
 800f30a:	bf00      	nop
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	200029b8 	.word	0x200029b8
 800f318:	200029bc 	.word	0x200029bc
 800f31c:	e000ed04 	.word	0xe000ed04

0800f320 <prvGetNextExpireTime>:
 800f320:	b480      	push	{r7}
 800f322:	b085      	sub	sp, #20
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	4b0e      	ldr	r3, [pc, #56]	; (800f364 <prvGetNextExpireTime+0x44>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	bf0c      	ite	eq
 800f332:	2301      	moveq	r3, #1
 800f334:	2300      	movne	r3, #0
 800f336:	b2db      	uxtb	r3, r3
 800f338:	461a      	mov	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d105      	bne.n	800f352 <prvGetNextExpireTime+0x32>
 800f346:	4b07      	ldr	r3, [pc, #28]	; (800f364 <prvGetNextExpireTime+0x44>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	60fb      	str	r3, [r7, #12]
 800f350:	e001      	b.n	800f356 <prvGetNextExpireTime+0x36>
 800f352:	2300      	movs	r3, #0
 800f354:	60fb      	str	r3, [r7, #12]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	4618      	mov	r0, r3
 800f35a:	3714      	adds	r7, #20
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	200029b4 	.word	0x200029b4

0800f368 <prvSampleTimeNow>:
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	f7ff f874 	bl	800e45c <xTaskGetTickCount>
 800f374:	60f8      	str	r0, [r7, #12]
 800f376:	4b0b      	ldr	r3, [pc, #44]	; (800f3a4 <prvSampleTimeNow+0x3c>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	68fa      	ldr	r2, [r7, #12]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d205      	bcs.n	800f38c <prvSampleTimeNow+0x24>
 800f380:	f000 f8ee 	bl	800f560 <prvSwitchTimerLists>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2201      	movs	r2, #1
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	e002      	b.n	800f392 <prvSampleTimeNow+0x2a>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	601a      	str	r2, [r3, #0]
 800f392:	4a04      	ldr	r2, [pc, #16]	; (800f3a4 <prvSampleTimeNow+0x3c>)
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6013      	str	r3, [r2, #0]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	200029c4 	.word	0x200029c4

0800f3a8 <prvInsertTimerInActiveList>:
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b086      	sub	sp, #24
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
 800f3b4:	603b      	str	r3, [r7, #0]
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	617b      	str	r3, [r7, #20]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	605a      	str	r2, [r3, #4]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	68fa      	ldr	r2, [r7, #12]
 800f3c4:	611a      	str	r2, [r3, #16]
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d812      	bhi.n	800f3f4 <prvInsertTimerInActiveList+0x4c>
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	1ad2      	subs	r2, r2, r3
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	699b      	ldr	r3, [r3, #24]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d302      	bcc.n	800f3e2 <prvInsertTimerInActiveList+0x3a>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	e01b      	b.n	800f41a <prvInsertTimerInActiveList+0x72>
 800f3e2:	4b10      	ldr	r3, [pc, #64]	; (800f424 <prvInsertTimerInActiveList+0x7c>)
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	f7fd fdd2 	bl	800cf96 <vListInsert>
 800f3f2:	e012      	b.n	800f41a <prvInsertTimerInActiveList+0x72>
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d206      	bcs.n	800f40a <prvInsertTimerInActiveList+0x62>
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	429a      	cmp	r2, r3
 800f402:	d302      	bcc.n	800f40a <prvInsertTimerInActiveList+0x62>
 800f404:	2301      	movs	r3, #1
 800f406:	617b      	str	r3, [r7, #20]
 800f408:	e007      	b.n	800f41a <prvInsertTimerInActiveList+0x72>
 800f40a:	4b07      	ldr	r3, [pc, #28]	; (800f428 <prvInsertTimerInActiveList+0x80>)
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	3304      	adds	r3, #4
 800f412:	4619      	mov	r1, r3
 800f414:	4610      	mov	r0, r2
 800f416:	f7fd fdbe 	bl	800cf96 <vListInsert>
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	4618      	mov	r0, r3
 800f41e:	3718      	adds	r7, #24
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	200029b8 	.word	0x200029b8
 800f428:	200029b4 	.word	0x200029b4

0800f42c <prvProcessReceivedCommands>:
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b08c      	sub	sp, #48	; 0x30
 800f430:	af02      	add	r7, sp, #8
 800f432:	e081      	b.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	2b00      	cmp	r3, #0
 800f438:	db7e      	blt.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	627b      	str	r3, [r7, #36]	; 0x24
 800f43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f440:	695b      	ldr	r3, [r3, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d004      	beq.n	800f450 <prvProcessReceivedCommands+0x24>
 800f446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f448:	3304      	adds	r3, #4
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fd fddc 	bl	800d008 <uxListRemove>
 800f450:	1d3b      	adds	r3, r7, #4
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff ff88 	bl	800f368 <prvSampleTimeNow>
 800f458:	6238      	str	r0, [r7, #32]
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	2b09      	cmp	r3, #9
 800f45e:	d86a      	bhi.n	800f536 <prvProcessReceivedCommands+0x10a>
 800f460:	a201      	add	r2, pc, #4	; (adr r2, 800f468 <prvProcessReceivedCommands+0x3c>)
 800f462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f466:	bf00      	nop
 800f468:	0800f491 	.word	0x0800f491
 800f46c:	0800f491 	.word	0x0800f491
 800f470:	0800f491 	.word	0x0800f491
 800f474:	0800f539 	.word	0x0800f539
 800f478:	0800f4ed 	.word	0x0800f4ed
 800f47c:	0800f525 	.word	0x0800f525
 800f480:	0800f491 	.word	0x0800f491
 800f484:	0800f491 	.word	0x0800f491
 800f488:	0800f539 	.word	0x0800f539
 800f48c:	0800f4ed 	.word	0x0800f4ed
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f494:	699b      	ldr	r3, [r3, #24]
 800f496:	18d1      	adds	r1, r2, r3
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6a3a      	ldr	r2, [r7, #32]
 800f49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f49e:	f7ff ff83 	bl	800f3a8 <prvInsertTimerInActiveList>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d047      	beq.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ae:	4798      	blx	r3
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	69db      	ldr	r3, [r3, #28]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d13f      	bne.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	699b      	ldr	r3, [r3, #24]
 800f4be:	441a      	add	r2, r3
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ca:	f7ff fe3b 	bl	800f144 <xTimerGenericCommand>
 800f4ce:	61f8      	str	r0, [r7, #28]
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d130      	bne.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4da:	f383 8811 	msr	BASEPRI, r3
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	f3bf 8f4f 	dsb	sy
 800f4e6:	61bb      	str	r3, [r7, #24]
 800f4e8:	bf00      	nop
 800f4ea:	e7fe      	b.n	800f4ea <prvProcessReceivedCommands+0xbe>
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	619a      	str	r2, [r3, #24]
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	699b      	ldr	r3, [r3, #24]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d10a      	bne.n	800f510 <prvProcessReceivedCommands+0xe4>
 800f4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	617b      	str	r3, [r7, #20]
 800f50c:	bf00      	nop
 800f50e:	e7fe      	b.n	800f50e <prvProcessReceivedCommands+0xe2>
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	699a      	ldr	r2, [r3, #24]
 800f514:	6a3b      	ldr	r3, [r7, #32]
 800f516:	18d1      	adds	r1, r2, r3
 800f518:	6a3b      	ldr	r3, [r7, #32]
 800f51a:	6a3a      	ldr	r2, [r7, #32]
 800f51c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f51e:	f7ff ff43 	bl	800f3a8 <prvInsertTimerInActiveList>
 800f522:	e009      	b.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d104      	bne.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f52e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f530:	f000 fbce 	bl	800fcd0 <vPortFree>
 800f534:	e000      	b.n	800f538 <prvProcessReceivedCommands+0x10c>
 800f536:	bf00      	nop
 800f538:	4b08      	ldr	r3, [pc, #32]	; (800f55c <prvProcessReceivedCommands+0x130>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f107 0108 	add.w	r1, r7, #8
 800f540:	2200      	movs	r2, #0
 800f542:	4618      	mov	r0, r3
 800f544:	f7fe f8aa 	bl	800d69c <xQueueReceive>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f47f af72 	bne.w	800f434 <prvProcessReceivedCommands+0x8>
 800f550:	bf00      	nop
 800f552:	bf00      	nop
 800f554:	3728      	adds	r7, #40	; 0x28
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	200029bc 	.word	0x200029bc

0800f560 <prvSwitchTimerLists>:
 800f560:	b580      	push	{r7, lr}
 800f562:	b088      	sub	sp, #32
 800f564:	af02      	add	r7, sp, #8
 800f566:	e045      	b.n	800f5f4 <prvSwitchTimerLists+0x94>
 800f568:	4b2c      	ldr	r3, [pc, #176]	; (800f61c <prvSwitchTimerLists+0xbc>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	613b      	str	r3, [r7, #16]
 800f572:	4b2a      	ldr	r3, [pc, #168]	; (800f61c <prvSwitchTimerLists+0xbc>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	3304      	adds	r3, #4
 800f580:	4618      	mov	r0, r3
 800f582:	f7fd fd41 	bl	800d008 <uxListRemove>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	4798      	blx	r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	69db      	ldr	r3, [r3, #28]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d12e      	bne.n	800f5f4 <prvSwitchTimerLists+0x94>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	693a      	ldr	r2, [r7, #16]
 800f59c:	4413      	add	r3, r2
 800f59e:	60bb      	str	r3, [r7, #8]
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d90e      	bls.n	800f5c6 <prvSwitchTimerLists+0x66>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	605a      	str	r2, [r3, #4]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	611a      	str	r2, [r3, #16]
 800f5b4:	4b19      	ldr	r3, [pc, #100]	; (800f61c <prvSwitchTimerLists+0xbc>)
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3304      	adds	r3, #4
 800f5bc:	4619      	mov	r1, r3
 800f5be:	4610      	mov	r0, r2
 800f5c0:	f7fd fce9 	bl	800cf96 <vListInsert>
 800f5c4:	e016      	b.n	800f5f4 <prvSwitchTimerLists+0x94>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	9300      	str	r3, [sp, #0]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f7ff fdb7 	bl	800f144 <xTimerGenericCommand>
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10a      	bne.n	800f5f4 <prvSwitchTimerLists+0x94>
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	603b      	str	r3, [r7, #0]
 800f5f0:	bf00      	nop
 800f5f2:	e7fe      	b.n	800f5f2 <prvSwitchTimerLists+0x92>
 800f5f4:	4b09      	ldr	r3, [pc, #36]	; (800f61c <prvSwitchTimerLists+0xbc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1b4      	bne.n	800f568 <prvSwitchTimerLists+0x8>
 800f5fe:	4b07      	ldr	r3, [pc, #28]	; (800f61c <prvSwitchTimerLists+0xbc>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	617b      	str	r3, [r7, #20]
 800f604:	4b06      	ldr	r3, [pc, #24]	; (800f620 <prvSwitchTimerLists+0xc0>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a04      	ldr	r2, [pc, #16]	; (800f61c <prvSwitchTimerLists+0xbc>)
 800f60a:	6013      	str	r3, [r2, #0]
 800f60c:	4a04      	ldr	r2, [pc, #16]	; (800f620 <prvSwitchTimerLists+0xc0>)
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	bf00      	nop
 800f614:	3718      	adds	r7, #24
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	200029b4 	.word	0x200029b4
 800f620:	200029b8 	.word	0x200029b8

0800f624 <prvCheckForValidListAndQueue>:
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af02      	add	r7, sp, #8
 800f62a:	f000 f96b 	bl	800f904 <vPortEnterCritical>
 800f62e:	4b15      	ldr	r3, [pc, #84]	; (800f684 <prvCheckForValidListAndQueue+0x60>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d120      	bne.n	800f678 <prvCheckForValidListAndQueue+0x54>
 800f636:	4814      	ldr	r0, [pc, #80]	; (800f688 <prvCheckForValidListAndQueue+0x64>)
 800f638:	f7fd fc5c 	bl	800cef4 <vListInitialise>
 800f63c:	4813      	ldr	r0, [pc, #76]	; (800f68c <prvCheckForValidListAndQueue+0x68>)
 800f63e:	f7fd fc59 	bl	800cef4 <vListInitialise>
 800f642:	4b13      	ldr	r3, [pc, #76]	; (800f690 <prvCheckForValidListAndQueue+0x6c>)
 800f644:	4a10      	ldr	r2, [pc, #64]	; (800f688 <prvCheckForValidListAndQueue+0x64>)
 800f646:	601a      	str	r2, [r3, #0]
 800f648:	4b12      	ldr	r3, [pc, #72]	; (800f694 <prvCheckForValidListAndQueue+0x70>)
 800f64a:	4a10      	ldr	r2, [pc, #64]	; (800f68c <prvCheckForValidListAndQueue+0x68>)
 800f64c:	601a      	str	r2, [r3, #0]
 800f64e:	2300      	movs	r3, #0
 800f650:	9300      	str	r3, [sp, #0]
 800f652:	4b11      	ldr	r3, [pc, #68]	; (800f698 <prvCheckForValidListAndQueue+0x74>)
 800f654:	4a11      	ldr	r2, [pc, #68]	; (800f69c <prvCheckForValidListAndQueue+0x78>)
 800f656:	210c      	movs	r1, #12
 800f658:	200a      	movs	r0, #10
 800f65a:	f7fd fd67 	bl	800d12c <xQueueGenericCreateStatic>
 800f65e:	4603      	mov	r3, r0
 800f660:	4a08      	ldr	r2, [pc, #32]	; (800f684 <prvCheckForValidListAndQueue+0x60>)
 800f662:	6013      	str	r3, [r2, #0]
 800f664:	4b07      	ldr	r3, [pc, #28]	; (800f684 <prvCheckForValidListAndQueue+0x60>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d005      	beq.n	800f678 <prvCheckForValidListAndQueue+0x54>
 800f66c:	4b05      	ldr	r3, [pc, #20]	; (800f684 <prvCheckForValidListAndQueue+0x60>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	490b      	ldr	r1, [pc, #44]	; (800f6a0 <prvCheckForValidListAndQueue+0x7c>)
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe fb26 	bl	800dcc4 <vQueueAddToRegistry>
 800f678:	f000 f974 	bl	800f964 <vPortExitCritical>
 800f67c:	bf00      	nop
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	200029bc 	.word	0x200029bc
 800f688:	2000298c 	.word	0x2000298c
 800f68c:	200029a0 	.word	0x200029a0
 800f690:	200029b4 	.word	0x200029b4
 800f694:	200029b8 	.word	0x200029b8
 800f698:	20002a40 	.word	0x20002a40
 800f69c:	200029c8 	.word	0x200029c8
 800f6a0:	080119f4 	.word	0x080119f4

0800f6a4 <pxPortInitialiseStack>:
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3b04      	subs	r3, #4
 800f6b4:	60fb      	str	r3, [r7, #12]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f6bc:	601a      	str	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3b04      	subs	r3, #4
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	f023 0201 	bic.w	r2, r3, #1
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3b04      	subs	r3, #4
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	4a0c      	ldr	r2, [pc, #48]	; (800f708 <pxPortInitialiseStack+0x64>)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	3b14      	subs	r3, #20
 800f6de:	60fb      	str	r3, [r7, #12]
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3b04      	subs	r3, #4
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f06f 0202 	mvn.w	r2, #2
 800f6f2:	601a      	str	r2, [r3, #0]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	3b20      	subs	r3, #32
 800f6f8:	60fb      	str	r3, [r7, #12]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	0800f70d 	.word	0x0800f70d

0800f70c <prvTaskExitError>:
 800f70c:	b480      	push	{r7}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	2300      	movs	r3, #0
 800f714:	607b      	str	r3, [r7, #4]
 800f716:	4b12      	ldr	r3, [pc, #72]	; (800f760 <prvTaskExitError+0x54>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f71e:	d00a      	beq.n	800f736 <prvTaskExitError+0x2a>
 800f720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f724:	f383 8811 	msr	BASEPRI, r3
 800f728:	f3bf 8f6f 	isb	sy
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	60fb      	str	r3, [r7, #12]
 800f732:	bf00      	nop
 800f734:	e7fe      	b.n	800f734 <prvTaskExitError+0x28>
 800f736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73a:	f383 8811 	msr	BASEPRI, r3
 800f73e:	f3bf 8f6f 	isb	sy
 800f742:	f3bf 8f4f 	dsb	sy
 800f746:	60bb      	str	r3, [r7, #8]
 800f748:	bf00      	nop
 800f74a:	bf00      	nop
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d0fc      	beq.n	800f74c <prvTaskExitError+0x40>
 800f752:	bf00      	nop
 800f754:	bf00      	nop
 800f756:	3714      	adds	r7, #20
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr
 800f760:	200000c4 	.word	0x200000c4
	...

0800f770 <SVC_Handler>:
 800f770:	4b07      	ldr	r3, [pc, #28]	; (800f790 <pxCurrentTCBConst2>)
 800f772:	6819      	ldr	r1, [r3, #0]
 800f774:	6808      	ldr	r0, [r1, #0]
 800f776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77a:	f380 8809 	msr	PSP, r0
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f04f 0000 	mov.w	r0, #0
 800f786:	f380 8811 	msr	BASEPRI, r0
 800f78a:	4770      	bx	lr
 800f78c:	f3af 8000 	nop.w

0800f790 <pxCurrentTCBConst2>:
 800f790:	20002860 	.word	0x20002860
 800f794:	bf00      	nop
 800f796:	bf00      	nop

0800f798 <prvPortStartFirstTask>:
 800f798:	4808      	ldr	r0, [pc, #32]	; (800f7bc <prvPortStartFirstTask+0x24>)
 800f79a:	6800      	ldr	r0, [r0, #0]
 800f79c:	6800      	ldr	r0, [r0, #0]
 800f79e:	f380 8808 	msr	MSP, r0
 800f7a2:	f04f 0000 	mov.w	r0, #0
 800f7a6:	f380 8814 	msr	CONTROL, r0
 800f7aa:	b662      	cpsie	i
 800f7ac:	b661      	cpsie	f
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	df00      	svc	0
 800f7b8:	bf00      	nop
 800f7ba:	bf00      	nop
 800f7bc:	e000ed08 	.word	0xe000ed08

0800f7c0 <xPortStartScheduler>:
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	4b46      	ldr	r3, [pc, #280]	; (800f8e0 <xPortStartScheduler+0x120>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a46      	ldr	r2, [pc, #280]	; (800f8e4 <xPortStartScheduler+0x124>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d10a      	bne.n	800f7e6 <xPortStartScheduler+0x26>
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	613b      	str	r3, [r7, #16]
 800f7e2:	bf00      	nop
 800f7e4:	e7fe      	b.n	800f7e4 <xPortStartScheduler+0x24>
 800f7e6:	4b3e      	ldr	r3, [pc, #248]	; (800f8e0 <xPortStartScheduler+0x120>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a3f      	ldr	r2, [pc, #252]	; (800f8e8 <xPortStartScheduler+0x128>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d10a      	bne.n	800f806 <xPortStartScheduler+0x46>
 800f7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f4:	f383 8811 	msr	BASEPRI, r3
 800f7f8:	f3bf 8f6f 	isb	sy
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	60fb      	str	r3, [r7, #12]
 800f802:	bf00      	nop
 800f804:	e7fe      	b.n	800f804 <xPortStartScheduler+0x44>
 800f806:	4b39      	ldr	r3, [pc, #228]	; (800f8ec <xPortStartScheduler+0x12c>)
 800f808:	617b      	str	r3, [r7, #20]
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	607b      	str	r3, [r7, #4]
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	22ff      	movs	r2, #255	; 0xff
 800f816:	701a      	strb	r2, [r3, #0]
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	70fb      	strb	r3, [r7, #3]
 800f820:	78fb      	ldrb	r3, [r7, #3]
 800f822:	b2db      	uxtb	r3, r3
 800f824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	4b31      	ldr	r3, [pc, #196]	; (800f8f0 <xPortStartScheduler+0x130>)
 800f82c:	701a      	strb	r2, [r3, #0]
 800f82e:	4b31      	ldr	r3, [pc, #196]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f830:	2207      	movs	r2, #7
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	e009      	b.n	800f84a <xPortStartScheduler+0x8a>
 800f836:	4b2f      	ldr	r3, [pc, #188]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	3b01      	subs	r3, #1
 800f83c:	4a2d      	ldr	r2, [pc, #180]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f83e:	6013      	str	r3, [r2, #0]
 800f840:	78fb      	ldrb	r3, [r7, #3]
 800f842:	b2db      	uxtb	r3, r3
 800f844:	005b      	lsls	r3, r3, #1
 800f846:	b2db      	uxtb	r3, r3
 800f848:	70fb      	strb	r3, [r7, #3]
 800f84a:	78fb      	ldrb	r3, [r7, #3]
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f852:	2b80      	cmp	r3, #128	; 0x80
 800f854:	d0ef      	beq.n	800f836 <xPortStartScheduler+0x76>
 800f856:	4b27      	ldr	r3, [pc, #156]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f1c3 0307 	rsb	r3, r3, #7
 800f85e:	2b04      	cmp	r3, #4
 800f860:	d00a      	beq.n	800f878 <xPortStartScheduler+0xb8>
 800f862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	60bb      	str	r3, [r7, #8]
 800f874:	bf00      	nop
 800f876:	e7fe      	b.n	800f876 <xPortStartScheduler+0xb6>
 800f878:	4b1e      	ldr	r3, [pc, #120]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	021b      	lsls	r3, r3, #8
 800f87e:	4a1d      	ldr	r2, [pc, #116]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f880:	6013      	str	r3, [r2, #0]
 800f882:	4b1c      	ldr	r3, [pc, #112]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f88a:	4a1a      	ldr	r2, [pc, #104]	; (800f8f4 <xPortStartScheduler+0x134>)
 800f88c:	6013      	str	r3, [r2, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	b2da      	uxtb	r2, r3
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	701a      	strb	r2, [r3, #0]
 800f896:	4b18      	ldr	r3, [pc, #96]	; (800f8f8 <xPortStartScheduler+0x138>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a17      	ldr	r2, [pc, #92]	; (800f8f8 <xPortStartScheduler+0x138>)
 800f89c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f8a0:	6013      	str	r3, [r2, #0]
 800f8a2:	4b15      	ldr	r3, [pc, #84]	; (800f8f8 <xPortStartScheduler+0x138>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4a14      	ldr	r2, [pc, #80]	; (800f8f8 <xPortStartScheduler+0x138>)
 800f8a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f8ac:	6013      	str	r3, [r2, #0]
 800f8ae:	f000 f8dd 	bl	800fa6c <vPortSetupTimerInterrupt>
 800f8b2:	4b12      	ldr	r3, [pc, #72]	; (800f8fc <xPortStartScheduler+0x13c>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	f000 f8fc 	bl	800fab4 <vPortEnableVFP>
 800f8bc:	4b10      	ldr	r3, [pc, #64]	; (800f900 <xPortStartScheduler+0x140>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a0f      	ldr	r2, [pc, #60]	; (800f900 <xPortStartScheduler+0x140>)
 800f8c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	f7ff ff66 	bl	800f798 <prvPortStartFirstTask>
 800f8cc:	f7fe fea6 	bl	800e61c <vTaskSwitchContext>
 800f8d0:	f7ff ff1c 	bl	800f70c <prvTaskExitError>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3718      	adds	r7, #24
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	e000ed00 	.word	0xe000ed00
 800f8e4:	410fc271 	.word	0x410fc271
 800f8e8:	410fc270 	.word	0x410fc270
 800f8ec:	e000e400 	.word	0xe000e400
 800f8f0:	20002a88 	.word	0x20002a88
 800f8f4:	20002a8c 	.word	0x20002a8c
 800f8f8:	e000ed20 	.word	0xe000ed20
 800f8fc:	200000c4 	.word	0x200000c4
 800f900:	e000ef34 	.word	0xe000ef34

0800f904 <vPortEnterCritical>:
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90e:	f383 8811 	msr	BASEPRI, r3
 800f912:	f3bf 8f6f 	isb	sy
 800f916:	f3bf 8f4f 	dsb	sy
 800f91a:	607b      	str	r3, [r7, #4]
 800f91c:	bf00      	nop
 800f91e:	4b0f      	ldr	r3, [pc, #60]	; (800f95c <vPortEnterCritical+0x58>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	3301      	adds	r3, #1
 800f924:	4a0d      	ldr	r2, [pc, #52]	; (800f95c <vPortEnterCritical+0x58>)
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	4b0c      	ldr	r3, [pc, #48]	; (800f95c <vPortEnterCritical+0x58>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d10f      	bne.n	800f950 <vPortEnterCritical+0x4c>
 800f930:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <vPortEnterCritical+0x5c>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00a      	beq.n	800f950 <vPortEnterCritical+0x4c>
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	603b      	str	r3, [r7, #0]
 800f94c:	bf00      	nop
 800f94e:	e7fe      	b.n	800f94e <vPortEnterCritical+0x4a>
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	200000c4 	.word	0x200000c4
 800f960:	e000ed04 	.word	0xe000ed04

0800f964 <vPortExitCritical>:
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4b12      	ldr	r3, [pc, #72]	; (800f9b4 <vPortExitCritical+0x50>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10a      	bne.n	800f988 <vPortExitCritical+0x24>
 800f972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f976:	f383 8811 	msr	BASEPRI, r3
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	607b      	str	r3, [r7, #4]
 800f984:	bf00      	nop
 800f986:	e7fe      	b.n	800f986 <vPortExitCritical+0x22>
 800f988:	4b0a      	ldr	r3, [pc, #40]	; (800f9b4 <vPortExitCritical+0x50>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	3b01      	subs	r3, #1
 800f98e:	4a09      	ldr	r2, [pc, #36]	; (800f9b4 <vPortExitCritical+0x50>)
 800f990:	6013      	str	r3, [r2, #0]
 800f992:	4b08      	ldr	r3, [pc, #32]	; (800f9b4 <vPortExitCritical+0x50>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d105      	bne.n	800f9a6 <vPortExitCritical+0x42>
 800f99a:	2300      	movs	r3, #0
 800f99c:	603b      	str	r3, [r7, #0]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	f383 8811 	msr	BASEPRI, r3
 800f9a4:	bf00      	nop
 800f9a6:	bf00      	nop
 800f9a8:	370c      	adds	r7, #12
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	200000c4 	.word	0x200000c4
	...

0800f9c0 <PendSV_Handler>:
 800f9c0:	f3ef 8009 	mrs	r0, PSP
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	4b15      	ldr	r3, [pc, #84]	; (800fa20 <pxCurrentTCBConst>)
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	f01e 0f10 	tst.w	lr, #16
 800f9d0:	bf08      	it	eq
 800f9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9da:	6010      	str	r0, [r2, #0]
 800f9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f9e4:	f380 8811 	msr	BASEPRI, r0
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	f7fe fe14 	bl	800e61c <vTaskSwitchContext>
 800f9f4:	f04f 0000 	mov.w	r0, #0
 800f9f8:	f380 8811 	msr	BASEPRI, r0
 800f9fc:	bc09      	pop	{r0, r3}
 800f9fe:	6819      	ldr	r1, [r3, #0]
 800fa00:	6808      	ldr	r0, [r1, #0]
 800fa02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa06:	f01e 0f10 	tst.w	lr, #16
 800fa0a:	bf08      	it	eq
 800fa0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa10:	f380 8809 	msr	PSP, r0
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	f3af 8000 	nop.w

0800fa20 <pxCurrentTCBConst>:
 800fa20:	20002860 	.word	0x20002860
 800fa24:	bf00      	nop
 800fa26:	bf00      	nop

0800fa28 <SysTick_Handler>:
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	607b      	str	r3, [r7, #4]
 800fa40:	bf00      	nop
 800fa42:	f7fe fd2d 	bl	800e4a0 <xTaskIncrementTick>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d003      	beq.n	800fa54 <SysTick_Handler+0x2c>
 800fa4c:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <SysTick_Handler+0x40>)
 800fa4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa52:	601a      	str	r2, [r3, #0]
 800fa54:	2300      	movs	r3, #0
 800fa56:	603b      	str	r3, [r7, #0]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	f383 8811 	msr	BASEPRI, r3
 800fa5e:	bf00      	nop
 800fa60:	bf00      	nop
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	e000ed04 	.word	0xe000ed04

0800fa6c <vPortSetupTimerInterrupt>:
 800fa6c:	b480      	push	{r7}
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	4b0b      	ldr	r3, [pc, #44]	; (800faa0 <vPortSetupTimerInterrupt+0x34>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	601a      	str	r2, [r3, #0]
 800fa76:	4b0b      	ldr	r3, [pc, #44]	; (800faa4 <vPortSetupTimerInterrupt+0x38>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
 800fa7c:	4b0a      	ldr	r3, [pc, #40]	; (800faa8 <vPortSetupTimerInterrupt+0x3c>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a0a      	ldr	r2, [pc, #40]	; (800faac <vPortSetupTimerInterrupt+0x40>)
 800fa82:	fba2 2303 	umull	r2, r3, r2, r3
 800fa86:	099b      	lsrs	r3, r3, #6
 800fa88:	4a09      	ldr	r2, [pc, #36]	; (800fab0 <vPortSetupTimerInterrupt+0x44>)
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	6013      	str	r3, [r2, #0]
 800fa8e:	4b04      	ldr	r3, [pc, #16]	; (800faa0 <vPortSetupTimerInterrupt+0x34>)
 800fa90:	2207      	movs	r2, #7
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	bf00      	nop
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	e000e010 	.word	0xe000e010
 800faa4:	e000e018 	.word	0xe000e018
 800faa8:	20000040 	.word	0x20000040
 800faac:	10624dd3 	.word	0x10624dd3
 800fab0:	e000e014 	.word	0xe000e014

0800fab4 <vPortEnableVFP>:
 800fab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fac4 <vPortEnableVFP+0x10>
 800fab8:	6801      	ldr	r1, [r0, #0]
 800faba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fabe:	6001      	str	r1, [r0, #0]
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	e000ed88 	.word	0xe000ed88

0800fac8 <vPortValidateInterruptPriority>:
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	f3ef 8305 	mrs	r3, IPSR
 800fad2:	60fb      	str	r3, [r7, #12]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2b0f      	cmp	r3, #15
 800fad8:	d914      	bls.n	800fb04 <vPortValidateInterruptPriority+0x3c>
 800fada:	4a17      	ldr	r2, [pc, #92]	; (800fb38 <vPortValidateInterruptPriority+0x70>)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	4413      	add	r3, r2
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	72fb      	strb	r3, [r7, #11]
 800fae4:	4b15      	ldr	r3, [pc, #84]	; (800fb3c <vPortValidateInterruptPriority+0x74>)
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	7afa      	ldrb	r2, [r7, #11]
 800faea:	429a      	cmp	r2, r3
 800faec:	d20a      	bcs.n	800fb04 <vPortValidateInterruptPriority+0x3c>
 800faee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	607b      	str	r3, [r7, #4]
 800fb00:	bf00      	nop
 800fb02:	e7fe      	b.n	800fb02 <vPortValidateInterruptPriority+0x3a>
 800fb04:	4b0e      	ldr	r3, [pc, #56]	; (800fb40 <vPortValidateInterruptPriority+0x78>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb0c:	4b0d      	ldr	r3, [pc, #52]	; (800fb44 <vPortValidateInterruptPriority+0x7c>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d90a      	bls.n	800fb2a <vPortValidateInterruptPriority+0x62>
 800fb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb18:	f383 8811 	msr	BASEPRI, r3
 800fb1c:	f3bf 8f6f 	isb	sy
 800fb20:	f3bf 8f4f 	dsb	sy
 800fb24:	603b      	str	r3, [r7, #0]
 800fb26:	bf00      	nop
 800fb28:	e7fe      	b.n	800fb28 <vPortValidateInterruptPriority+0x60>
 800fb2a:	bf00      	nop
 800fb2c:	3714      	adds	r7, #20
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	e000e3f0 	.word	0xe000e3f0
 800fb3c:	20002a88 	.word	0x20002a88
 800fb40:	e000ed0c 	.word	0xe000ed0c
 800fb44:	20002a8c 	.word	0x20002a8c

0800fb48 <pvPortMalloc>:
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b08a      	sub	sp, #40	; 0x28
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	2300      	movs	r3, #0
 800fb52:	61fb      	str	r3, [r7, #28]
 800fb54:	f7fe fbd8 	bl	800e308 <vTaskSuspendAll>
 800fb58:	4b58      	ldr	r3, [pc, #352]	; (800fcbc <pvPortMalloc+0x174>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <pvPortMalloc+0x1c>
 800fb60:	f000 f910 	bl	800fd84 <prvHeapInit>
 800fb64:	4b56      	ldr	r3, [pc, #344]	; (800fcc0 <pvPortMalloc+0x178>)
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4013      	ands	r3, r2
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f040 808e 	bne.w	800fc8e <pvPortMalloc+0x146>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d01d      	beq.n	800fbb4 <pvPortMalloc+0x6c>
 800fb78:	2208      	movs	r2, #8
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	607b      	str	r3, [r7, #4]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f003 0307 	and.w	r3, r3, #7
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d014      	beq.n	800fbb4 <pvPortMalloc+0x6c>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f023 0307 	bic.w	r3, r3, #7
 800fb90:	3308      	adds	r3, #8
 800fb92:	607b      	str	r3, [r7, #4]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f003 0307 	and.w	r3, r3, #7
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00a      	beq.n	800fbb4 <pvPortMalloc+0x6c>
 800fb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba2:	f383 8811 	msr	BASEPRI, r3
 800fba6:	f3bf 8f6f 	isb	sy
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	617b      	str	r3, [r7, #20]
 800fbb0:	bf00      	nop
 800fbb2:	e7fe      	b.n	800fbb2 <pvPortMalloc+0x6a>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d069      	beq.n	800fc8e <pvPortMalloc+0x146>
 800fbba:	4b42      	ldr	r3, [pc, #264]	; (800fcc4 <pvPortMalloc+0x17c>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d864      	bhi.n	800fc8e <pvPortMalloc+0x146>
 800fbc4:	4b40      	ldr	r3, [pc, #256]	; (800fcc8 <pvPortMalloc+0x180>)
 800fbc6:	623b      	str	r3, [r7, #32]
 800fbc8:	4b3f      	ldr	r3, [pc, #252]	; (800fcc8 <pvPortMalloc+0x180>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	627b      	str	r3, [r7, #36]	; 0x24
 800fbce:	e004      	b.n	800fbda <pvPortMalloc+0x92>
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd2:	623b      	str	r3, [r7, #32]
 800fbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	627b      	str	r3, [r7, #36]	; 0x24
 800fbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d903      	bls.n	800fbec <pvPortMalloc+0xa4>
 800fbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d1f1      	bne.n	800fbd0 <pvPortMalloc+0x88>
 800fbec:	4b33      	ldr	r3, [pc, #204]	; (800fcbc <pvPortMalloc+0x174>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d04b      	beq.n	800fc8e <pvPortMalloc+0x146>
 800fbf6:	6a3b      	ldr	r3, [r7, #32]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2208      	movs	r2, #8
 800fbfc:	4413      	add	r3, r2
 800fbfe:	61fb      	str	r3, [r7, #28]
 800fc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	6a3b      	ldr	r3, [r7, #32]
 800fc06:	601a      	str	r2, [r3, #0]
 800fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0a:	685a      	ldr	r2, [r3, #4]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	1ad2      	subs	r2, r2, r3
 800fc10:	2308      	movs	r3, #8
 800fc12:	005b      	lsls	r3, r3, #1
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d91f      	bls.n	800fc58 <pvPortMalloc+0x110>
 800fc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	61bb      	str	r3, [r7, #24]
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	f003 0307 	and.w	r3, r3, #7
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d00a      	beq.n	800fc40 <pvPortMalloc+0xf8>
 800fc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2e:	f383 8811 	msr	BASEPRI, r3
 800fc32:	f3bf 8f6f 	isb	sy
 800fc36:	f3bf 8f4f 	dsb	sy
 800fc3a:	613b      	str	r3, [r7, #16]
 800fc3c:	bf00      	nop
 800fc3e:	e7fe      	b.n	800fc3e <pvPortMalloc+0xf6>
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	685a      	ldr	r2, [r3, #4]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	1ad2      	subs	r2, r2, r3
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	605a      	str	r2, [r3, #4]
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	605a      	str	r2, [r3, #4]
 800fc52:	69b8      	ldr	r0, [r7, #24]
 800fc54:	f000 f8f8 	bl	800fe48 <prvInsertBlockIntoFreeList>
 800fc58:	4b1a      	ldr	r3, [pc, #104]	; (800fcc4 <pvPortMalloc+0x17c>)
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	4a18      	ldr	r2, [pc, #96]	; (800fcc4 <pvPortMalloc+0x17c>)
 800fc64:	6013      	str	r3, [r2, #0]
 800fc66:	4b17      	ldr	r3, [pc, #92]	; (800fcc4 <pvPortMalloc+0x17c>)
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	4b18      	ldr	r3, [pc, #96]	; (800fccc <pvPortMalloc+0x184>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d203      	bcs.n	800fc7a <pvPortMalloc+0x132>
 800fc72:	4b14      	ldr	r3, [pc, #80]	; (800fcc4 <pvPortMalloc+0x17c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a15      	ldr	r2, [pc, #84]	; (800fccc <pvPortMalloc+0x184>)
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7c:	685a      	ldr	r2, [r3, #4]
 800fc7e:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <pvPortMalloc+0x178>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	431a      	orrs	r2, r3
 800fc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc86:	605a      	str	r2, [r3, #4]
 800fc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	f7fe fb49 	bl	800e324 <xTaskResumeAll>
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	f003 0307 	and.w	r3, r3, #7
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00a      	beq.n	800fcb2 <pvPortMalloc+0x16a>
 800fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca0:	f383 8811 	msr	BASEPRI, r3
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	60fb      	str	r3, [r7, #12]
 800fcae:	bf00      	nop
 800fcb0:	e7fe      	b.n	800fcb0 <pvPortMalloc+0x168>
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3728      	adds	r7, #40	; 0x28
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	20002e98 	.word	0x20002e98
 800fcc0:	20002ea4 	.word	0x20002ea4
 800fcc4:	20002e9c 	.word	0x20002e9c
 800fcc8:	20002e90 	.word	0x20002e90
 800fccc:	20002ea0 	.word	0x20002ea0

0800fcd0 <vPortFree>:
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	617b      	str	r3, [r7, #20]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d048      	beq.n	800fd74 <vPortFree+0xa4>
 800fce2:	2308      	movs	r3, #8
 800fce4:	425b      	negs	r3, r3
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	4413      	add	r3, r2
 800fcea:	617b      	str	r3, [r7, #20]
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	613b      	str	r3, [r7, #16]
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	685a      	ldr	r2, [r3, #4]
 800fcf4:	4b21      	ldr	r3, [pc, #132]	; (800fd7c <vPortFree+0xac>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4013      	ands	r3, r2
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10a      	bne.n	800fd14 <vPortFree+0x44>
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	bf00      	nop
 800fd12:	e7fe      	b.n	800fd12 <vPortFree+0x42>
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00a      	beq.n	800fd32 <vPortFree+0x62>
 800fd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd20:	f383 8811 	msr	BASEPRI, r3
 800fd24:	f3bf 8f6f 	isb	sy
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	60bb      	str	r3, [r7, #8]
 800fd2e:	bf00      	nop
 800fd30:	e7fe      	b.n	800fd30 <vPortFree+0x60>
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	685a      	ldr	r2, [r3, #4]
 800fd36:	4b11      	ldr	r3, [pc, #68]	; (800fd7c <vPortFree+0xac>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d019      	beq.n	800fd74 <vPortFree+0xa4>
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d115      	bne.n	800fd74 <vPortFree+0xa4>
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <vPortFree+0xac>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	43db      	mvns	r3, r3
 800fd52:	401a      	ands	r2, r3
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	605a      	str	r2, [r3, #4]
 800fd58:	f7fe fad6 	bl	800e308 <vTaskSuspendAll>
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	685a      	ldr	r2, [r3, #4]
 800fd60:	4b07      	ldr	r3, [pc, #28]	; (800fd80 <vPortFree+0xb0>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4413      	add	r3, r2
 800fd66:	4a06      	ldr	r2, [pc, #24]	; (800fd80 <vPortFree+0xb0>)
 800fd68:	6013      	str	r3, [r2, #0]
 800fd6a:	6938      	ldr	r0, [r7, #16]
 800fd6c:	f000 f86c 	bl	800fe48 <prvInsertBlockIntoFreeList>
 800fd70:	f7fe fad8 	bl	800e324 <xTaskResumeAll>
 800fd74:	bf00      	nop
 800fd76:	3718      	adds	r7, #24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20002ea4 	.word	0x20002ea4
 800fd80:	20002e9c 	.word	0x20002e9c

0800fd84 <prvHeapInit>:
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd8e:	60bb      	str	r3, [r7, #8]
 800fd90:	4b27      	ldr	r3, [pc, #156]	; (800fe30 <prvHeapInit+0xac>)
 800fd92:	60fb      	str	r3, [r7, #12]
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f003 0307 	and.w	r3, r3, #7
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00c      	beq.n	800fdb8 <prvHeapInit+0x34>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	3307      	adds	r3, #7
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f023 0307 	bic.w	r3, r3, #7
 800fdaa:	60fb      	str	r3, [r7, #12]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	4a1f      	ldr	r2, [pc, #124]	; (800fe30 <prvHeapInit+0xac>)
 800fdb4:	4413      	add	r3, r2
 800fdb6:	60bb      	str	r3, [r7, #8]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	607b      	str	r3, [r7, #4]
 800fdbc:	4a1d      	ldr	r2, [pc, #116]	; (800fe34 <prvHeapInit+0xb0>)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6013      	str	r3, [r2, #0]
 800fdc2:	4b1c      	ldr	r3, [pc, #112]	; (800fe34 <prvHeapInit+0xb0>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	605a      	str	r2, [r3, #4]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	4413      	add	r3, r2
 800fdce:	60fb      	str	r3, [r7, #12]
 800fdd0:	2208      	movs	r2, #8
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	1a9b      	subs	r3, r3, r2
 800fdd6:	60fb      	str	r3, [r7, #12]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f023 0307 	bic.w	r3, r3, #7
 800fdde:	60fb      	str	r3, [r7, #12]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4a15      	ldr	r2, [pc, #84]	; (800fe38 <prvHeapInit+0xb4>)
 800fde4:	6013      	str	r3, [r2, #0]
 800fde6:	4b14      	ldr	r3, [pc, #80]	; (800fe38 <prvHeapInit+0xb4>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2200      	movs	r2, #0
 800fdec:	605a      	str	r2, [r3, #4]
 800fdee:	4b12      	ldr	r3, [pc, #72]	; (800fe38 <prvHeapInit+0xb4>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	601a      	str	r2, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	603b      	str	r3, [r7, #0]
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	1ad2      	subs	r2, r2, r3
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	605a      	str	r2, [r3, #4]
 800fe04:	4b0c      	ldr	r3, [pc, #48]	; (800fe38 <prvHeapInit+0xb4>)
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	601a      	str	r2, [r3, #0]
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	4a0a      	ldr	r2, [pc, #40]	; (800fe3c <prvHeapInit+0xb8>)
 800fe12:	6013      	str	r3, [r2, #0]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	4a09      	ldr	r2, [pc, #36]	; (800fe40 <prvHeapInit+0xbc>)
 800fe1a:	6013      	str	r3, [r2, #0]
 800fe1c:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <prvHeapInit+0xc0>)
 800fe1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	bf00      	nop
 800fe26:	3714      	adds	r7, #20
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	20002a90 	.word	0x20002a90
 800fe34:	20002e90 	.word	0x20002e90
 800fe38:	20002e98 	.word	0x20002e98
 800fe3c:	20002ea0 	.word	0x20002ea0
 800fe40:	20002e9c 	.word	0x20002e9c
 800fe44:	20002ea4 	.word	0x20002ea4

0800fe48 <prvInsertBlockIntoFreeList>:
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	4b28      	ldr	r3, [pc, #160]	; (800fef4 <prvInsertBlockIntoFreeList+0xac>)
 800fe52:	60fb      	str	r3, [r7, #12]
 800fe54:	e002      	b.n	800fe5c <prvInsertBlockIntoFreeList+0x14>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	60fb      	str	r3, [r7, #12]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d8f7      	bhi.n	800fe56 <prvInsertBlockIntoFreeList+0xe>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	60bb      	str	r3, [r7, #8]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	4413      	add	r3, r2
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d108      	bne.n	800fe8a <prvInsertBlockIntoFreeList+0x42>
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	441a      	add	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	605a      	str	r2, [r3, #4]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	607b      	str	r3, [r7, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	60bb      	str	r3, [r7, #8]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	441a      	add	r2, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d118      	bne.n	800fed0 <prvInsertBlockIntoFreeList+0x88>
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	4b15      	ldr	r3, [pc, #84]	; (800fef8 <prvInsertBlockIntoFreeList+0xb0>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d00d      	beq.n	800fec6 <prvInsertBlockIntoFreeList+0x7e>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	441a      	add	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	605a      	str	r2, [r3, #4]
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	e008      	b.n	800fed8 <prvInsertBlockIntoFreeList+0x90>
 800fec6:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <prvInsertBlockIntoFreeList+0xb0>)
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	601a      	str	r2, [r3, #0]
 800fece:	e003      	b.n	800fed8 <prvInsertBlockIntoFreeList+0x90>
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d002      	beq.n	800fee6 <prvInsertBlockIntoFreeList+0x9e>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	601a      	str	r2, [r3, #0]
 800fee6:	bf00      	nop
 800fee8:	3714      	adds	r7, #20
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	20002e90 	.word	0x20002e90
 800fef8:	20002e98 	.word	0x20002e98

0800fefc <swapfunc>:
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	b510      	push	{r4, lr}
 800ff00:	d00a      	beq.n	800ff18 <swapfunc+0x1c>
 800ff02:	0892      	lsrs	r2, r2, #2
 800ff04:	3a01      	subs	r2, #1
 800ff06:	6803      	ldr	r3, [r0, #0]
 800ff08:	680c      	ldr	r4, [r1, #0]
 800ff0a:	f840 4b04 	str.w	r4, [r0], #4
 800ff0e:	2a00      	cmp	r2, #0
 800ff10:	f841 3b04 	str.w	r3, [r1], #4
 800ff14:	dcf6      	bgt.n	800ff04 <swapfunc+0x8>
 800ff16:	bd10      	pop	{r4, pc}
 800ff18:	4402      	add	r2, r0
 800ff1a:	780c      	ldrb	r4, [r1, #0]
 800ff1c:	7803      	ldrb	r3, [r0, #0]
 800ff1e:	f800 4b01 	strb.w	r4, [r0], #1
 800ff22:	f801 3b01 	strb.w	r3, [r1], #1
 800ff26:	1a13      	subs	r3, r2, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	dcf6      	bgt.n	800ff1a <swapfunc+0x1e>
 800ff2c:	e7f3      	b.n	800ff16 <swapfunc+0x1a>

0800ff2e <med3.constprop.0>:
 800ff2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff30:	460c      	mov	r4, r1
 800ff32:	4615      	mov	r5, r2
 800ff34:	4607      	mov	r7, r0
 800ff36:	461e      	mov	r6, r3
 800ff38:	4798      	blx	r3
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4620      	mov	r0, r4
 800ff40:	da0a      	bge.n	800ff58 <med3.constprop.0+0x2a>
 800ff42:	47b0      	blx	r6
 800ff44:	2800      	cmp	r0, #0
 800ff46:	db05      	blt.n	800ff54 <med3.constprop.0+0x26>
 800ff48:	4629      	mov	r1, r5
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	47b0      	blx	r6
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	db0a      	blt.n	800ff68 <med3.constprop.0+0x3a>
 800ff52:	463c      	mov	r4, r7
 800ff54:	4620      	mov	r0, r4
 800ff56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff58:	47b0      	blx	r6
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	dcfa      	bgt.n	800ff54 <med3.constprop.0+0x26>
 800ff5e:	4629      	mov	r1, r5
 800ff60:	4638      	mov	r0, r7
 800ff62:	47b0      	blx	r6
 800ff64:	2800      	cmp	r0, #0
 800ff66:	dbf4      	blt.n	800ff52 <med3.constprop.0+0x24>
 800ff68:	462c      	mov	r4, r5
 800ff6a:	e7f3      	b.n	800ff54 <med3.constprop.0+0x26>

0800ff6c <qsort>:
 800ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff70:	469a      	mov	sl, r3
 800ff72:	ea40 0302 	orr.w	r3, r0, r2
 800ff76:	079b      	lsls	r3, r3, #30
 800ff78:	b097      	sub	sp, #92	; 0x5c
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	4614      	mov	r4, r2
 800ff7e:	d11a      	bne.n	800ffb6 <qsort+0x4a>
 800ff80:	f1b2 0804 	subs.w	r8, r2, #4
 800ff84:	bf18      	it	ne
 800ff86:	f04f 0801 	movne.w	r8, #1
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	9302      	str	r3, [sp, #8]
 800ff8e:	1933      	adds	r3, r6, r4
 800ff90:	fb04 f701 	mul.w	r7, r4, r1
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	2906      	cmp	r1, #6
 800ff98:	eb06 0307 	add.w	r3, r6, r7
 800ff9c:	9303      	str	r3, [sp, #12]
 800ff9e:	d82a      	bhi.n	800fff6 <qsort+0x8a>
 800ffa0:	9b01      	ldr	r3, [sp, #4]
 800ffa2:	9a03      	ldr	r2, [sp, #12]
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d310      	bcc.n	800ffca <qsort+0x5e>
 800ffa8:	9b02      	ldr	r3, [sp, #8]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f040 811e 	bne.w	80101ec <qsort+0x280>
 800ffb0:	b017      	add	sp, #92	; 0x5c
 800ffb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb6:	f04f 0802 	mov.w	r8, #2
 800ffba:	e7e6      	b.n	800ff8a <qsort+0x1e>
 800ffbc:	4643      	mov	r3, r8
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	f7ff ff9a 	bl	800fefc <swapfunc>
 800ffc8:	e00e      	b.n	800ffe8 <qsort+0x7c>
 800ffca:	9d01      	ldr	r5, [sp, #4]
 800ffcc:	e00d      	b.n	800ffea <qsort+0x7e>
 800ffce:	1b2f      	subs	r7, r5, r4
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	47d0      	blx	sl
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	dd09      	ble.n	800ffee <qsort+0x82>
 800ffda:	f1b8 0f00 	cmp.w	r8, #0
 800ffde:	d1ed      	bne.n	800ffbc <qsort+0x50>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	683a      	ldr	r2, [r7, #0]
 800ffe4:	602a      	str	r2, [r5, #0]
 800ffe6:	603b      	str	r3, [r7, #0]
 800ffe8:	463d      	mov	r5, r7
 800ffea:	42ae      	cmp	r6, r5
 800ffec:	d3ef      	bcc.n	800ffce <qsort+0x62>
 800ffee:	9b01      	ldr	r3, [sp, #4]
 800fff0:	4423      	add	r3, r4
 800fff2:	9301      	str	r3, [sp, #4]
 800fff4:	e7d4      	b.n	800ffa0 <qsort+0x34>
 800fff6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800fffa:	1b3f      	subs	r7, r7, r4
 800fffc:	2907      	cmp	r1, #7
 800fffe:	fb04 6909 	mla	r9, r4, r9, r6
 8010002:	4437      	add	r7, r6
 8010004:	d021      	beq.n	801004a <qsort+0xde>
 8010006:	2928      	cmp	r1, #40	; 0x28
 8010008:	d944      	bls.n	8010094 <qsort+0x128>
 801000a:	08cd      	lsrs	r5, r1, #3
 801000c:	4365      	muls	r5, r4
 801000e:	4653      	mov	r3, sl
 8010010:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8010014:	1971      	adds	r1, r6, r5
 8010016:	4630      	mov	r0, r6
 8010018:	f7ff ff89 	bl	800ff2e <med3.constprop.0>
 801001c:	4649      	mov	r1, r9
 801001e:	eb09 0205 	add.w	r2, r9, r5
 8010022:	4653      	mov	r3, sl
 8010024:	4683      	mov	fp, r0
 8010026:	1b48      	subs	r0, r1, r5
 8010028:	f7ff ff81 	bl	800ff2e <med3.constprop.0>
 801002c:	463a      	mov	r2, r7
 801002e:	4681      	mov	r9, r0
 8010030:	4653      	mov	r3, sl
 8010032:	1b79      	subs	r1, r7, r5
 8010034:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8010038:	f7ff ff79 	bl	800ff2e <med3.constprop.0>
 801003c:	4602      	mov	r2, r0
 801003e:	4649      	mov	r1, r9
 8010040:	4653      	mov	r3, sl
 8010042:	4658      	mov	r0, fp
 8010044:	f7ff ff73 	bl	800ff2e <med3.constprop.0>
 8010048:	4681      	mov	r9, r0
 801004a:	f1b8 0f00 	cmp.w	r8, #0
 801004e:	d124      	bne.n	801009a <qsort+0x12e>
 8010050:	6833      	ldr	r3, [r6, #0]
 8010052:	f8d9 2000 	ldr.w	r2, [r9]
 8010056:	6032      	str	r2, [r6, #0]
 8010058:	f8c9 3000 	str.w	r3, [r9]
 801005c:	eb06 0b04 	add.w	fp, r6, r4
 8010060:	46b9      	mov	r9, r7
 8010062:	465d      	mov	r5, fp
 8010064:	2300      	movs	r3, #0
 8010066:	45bb      	cmp	fp, r7
 8010068:	d835      	bhi.n	80100d6 <qsort+0x16a>
 801006a:	4631      	mov	r1, r6
 801006c:	4658      	mov	r0, fp
 801006e:	9304      	str	r3, [sp, #16]
 8010070:	47d0      	blx	sl
 8010072:	2800      	cmp	r0, #0
 8010074:	9b04      	ldr	r3, [sp, #16]
 8010076:	dc3e      	bgt.n	80100f6 <qsort+0x18a>
 8010078:	d10a      	bne.n	8010090 <qsort+0x124>
 801007a:	f1b8 0f00 	cmp.w	r8, #0
 801007e:	d113      	bne.n	80100a8 <qsort+0x13c>
 8010080:	682b      	ldr	r3, [r5, #0]
 8010082:	f8db 2000 	ldr.w	r2, [fp]
 8010086:	602a      	str	r2, [r5, #0]
 8010088:	f8cb 3000 	str.w	r3, [fp]
 801008c:	4425      	add	r5, r4
 801008e:	2301      	movs	r3, #1
 8010090:	44a3      	add	fp, r4
 8010092:	e7e8      	b.n	8010066 <qsort+0xfa>
 8010094:	463a      	mov	r2, r7
 8010096:	46b3      	mov	fp, r6
 8010098:	e7d1      	b.n	801003e <qsort+0xd2>
 801009a:	4643      	mov	r3, r8
 801009c:	4622      	mov	r2, r4
 801009e:	4649      	mov	r1, r9
 80100a0:	4630      	mov	r0, r6
 80100a2:	f7ff ff2b 	bl	800fefc <swapfunc>
 80100a6:	e7d9      	b.n	801005c <qsort+0xf0>
 80100a8:	4643      	mov	r3, r8
 80100aa:	4622      	mov	r2, r4
 80100ac:	4659      	mov	r1, fp
 80100ae:	4628      	mov	r0, r5
 80100b0:	f7ff ff24 	bl	800fefc <swapfunc>
 80100b4:	e7ea      	b.n	801008c <qsort+0x120>
 80100b6:	d10b      	bne.n	80100d0 <qsort+0x164>
 80100b8:	f1b8 0f00 	cmp.w	r8, #0
 80100bc:	d114      	bne.n	80100e8 <qsort+0x17c>
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	f8d9 2000 	ldr.w	r2, [r9]
 80100c4:	603a      	str	r2, [r7, #0]
 80100c6:	f8c9 3000 	str.w	r3, [r9]
 80100ca:	eba9 0904 	sub.w	r9, r9, r4
 80100ce:	2301      	movs	r3, #1
 80100d0:	9f04      	ldr	r7, [sp, #16]
 80100d2:	45bb      	cmp	fp, r7
 80100d4:	d90f      	bls.n	80100f6 <qsort+0x18a>
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d143      	bne.n	8010162 <qsort+0x1f6>
 80100da:	9b01      	ldr	r3, [sp, #4]
 80100dc:	9a03      	ldr	r2, [sp, #12]
 80100de:	4293      	cmp	r3, r2
 80100e0:	f4bf af62 	bcs.w	800ffa8 <qsort+0x3c>
 80100e4:	9d01      	ldr	r5, [sp, #4]
 80100e6:	e036      	b.n	8010156 <qsort+0x1ea>
 80100e8:	4643      	mov	r3, r8
 80100ea:	4622      	mov	r2, r4
 80100ec:	4649      	mov	r1, r9
 80100ee:	4638      	mov	r0, r7
 80100f0:	f7ff ff04 	bl	800fefc <swapfunc>
 80100f4:	e7e9      	b.n	80100ca <qsort+0x15e>
 80100f6:	4631      	mov	r1, r6
 80100f8:	4638      	mov	r0, r7
 80100fa:	9305      	str	r3, [sp, #20]
 80100fc:	47d0      	blx	sl
 80100fe:	1b3b      	subs	r3, r7, r4
 8010100:	2800      	cmp	r0, #0
 8010102:	9304      	str	r3, [sp, #16]
 8010104:	9b05      	ldr	r3, [sp, #20]
 8010106:	dad6      	bge.n	80100b6 <qsort+0x14a>
 8010108:	f1b8 0f00 	cmp.w	r8, #0
 801010c:	d006      	beq.n	801011c <qsort+0x1b0>
 801010e:	4643      	mov	r3, r8
 8010110:	4622      	mov	r2, r4
 8010112:	4639      	mov	r1, r7
 8010114:	4658      	mov	r0, fp
 8010116:	f7ff fef1 	bl	800fefc <swapfunc>
 801011a:	e005      	b.n	8010128 <qsort+0x1bc>
 801011c:	f8db 3000 	ldr.w	r3, [fp]
 8010120:	683a      	ldr	r2, [r7, #0]
 8010122:	f8cb 2000 	str.w	r2, [fp]
 8010126:	603b      	str	r3, [r7, #0]
 8010128:	9f04      	ldr	r7, [sp, #16]
 801012a:	e7b0      	b.n	801008e <qsort+0x122>
 801012c:	4643      	mov	r3, r8
 801012e:	4622      	mov	r2, r4
 8010130:	4639      	mov	r1, r7
 8010132:	4628      	mov	r0, r5
 8010134:	f7ff fee2 	bl	800fefc <swapfunc>
 8010138:	e00c      	b.n	8010154 <qsort+0x1e8>
 801013a:	1b2f      	subs	r7, r5, r4
 801013c:	4629      	mov	r1, r5
 801013e:	4638      	mov	r0, r7
 8010140:	47d0      	blx	sl
 8010142:	2800      	cmp	r0, #0
 8010144:	dd09      	ble.n	801015a <qsort+0x1ee>
 8010146:	f1b8 0f00 	cmp.w	r8, #0
 801014a:	d1ef      	bne.n	801012c <qsort+0x1c0>
 801014c:	682b      	ldr	r3, [r5, #0]
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	602a      	str	r2, [r5, #0]
 8010152:	603b      	str	r3, [r7, #0]
 8010154:	463d      	mov	r5, r7
 8010156:	42ae      	cmp	r6, r5
 8010158:	d3ef      	bcc.n	801013a <qsort+0x1ce>
 801015a:	9b01      	ldr	r3, [sp, #4]
 801015c:	4423      	add	r3, r4
 801015e:	9301      	str	r3, [sp, #4]
 8010160:	e7bb      	b.n	80100da <qsort+0x16e>
 8010162:	ebab 0305 	sub.w	r3, fp, r5
 8010166:	1baa      	subs	r2, r5, r6
 8010168:	429a      	cmp	r2, r3
 801016a:	bfa8      	it	ge
 801016c:	461a      	movge	r2, r3
 801016e:	9301      	str	r3, [sp, #4]
 8010170:	b12a      	cbz	r2, 801017e <qsort+0x212>
 8010172:	4643      	mov	r3, r8
 8010174:	ebab 0102 	sub.w	r1, fp, r2
 8010178:	4630      	mov	r0, r6
 801017a:	f7ff febf 	bl	800fefc <swapfunc>
 801017e:	9b03      	ldr	r3, [sp, #12]
 8010180:	eba3 0209 	sub.w	r2, r3, r9
 8010184:	eba9 0707 	sub.w	r7, r9, r7
 8010188:	1b12      	subs	r2, r2, r4
 801018a:	42ba      	cmp	r2, r7
 801018c:	bf28      	it	cs
 801018e:	463a      	movcs	r2, r7
 8010190:	b12a      	cbz	r2, 801019e <qsort+0x232>
 8010192:	9903      	ldr	r1, [sp, #12]
 8010194:	4643      	mov	r3, r8
 8010196:	1a89      	subs	r1, r1, r2
 8010198:	4658      	mov	r0, fp
 801019a:	f7ff feaf 	bl	800fefc <swapfunc>
 801019e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80101a2:	9b03      	ldr	r3, [sp, #12]
 80101a4:	454f      	cmp	r7, r9
 80101a6:	eba3 0007 	sub.w	r0, r3, r7
 80101aa:	d904      	bls.n	80101b6 <qsort+0x24a>
 80101ac:	4633      	mov	r3, r6
 80101ae:	46b9      	mov	r9, r7
 80101b0:	9f01      	ldr	r7, [sp, #4]
 80101b2:	4606      	mov	r6, r0
 80101b4:	4618      	mov	r0, r3
 80101b6:	42a7      	cmp	r7, r4
 80101b8:	d921      	bls.n	80101fe <qsort+0x292>
 80101ba:	fbb7 f1f4 	udiv	r1, r7, r4
 80101be:	9b02      	ldr	r3, [sp, #8]
 80101c0:	2b07      	cmp	r3, #7
 80101c2:	d80d      	bhi.n	80101e0 <qsort+0x274>
 80101c4:	aa16      	add	r2, sp, #88	; 0x58
 80101c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101ca:	fbb9 f2f4 	udiv	r2, r9, r4
 80101ce:	f843 6c40 	str.w	r6, [r3, #-64]
 80101d2:	f843 2c3c 	str.w	r2, [r3, #-60]
 80101d6:	9b02      	ldr	r3, [sp, #8]
 80101d8:	3301      	adds	r3, #1
 80101da:	9302      	str	r3, [sp, #8]
 80101dc:	4606      	mov	r6, r0
 80101de:	e6d6      	b.n	800ff8e <qsort+0x22>
 80101e0:	4653      	mov	r3, sl
 80101e2:	4622      	mov	r2, r4
 80101e4:	f7ff fec2 	bl	800ff6c <qsort>
 80101e8:	45a1      	cmp	r9, r4
 80101ea:	d80b      	bhi.n	8010204 <qsort+0x298>
 80101ec:	9b02      	ldr	r3, [sp, #8]
 80101ee:	aa16      	add	r2, sp, #88	; 0x58
 80101f0:	3b01      	subs	r3, #1
 80101f2:	9302      	str	r3, [sp, #8]
 80101f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101f8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 80101fc:	e7ee      	b.n	80101dc <qsort+0x270>
 80101fe:	45a1      	cmp	r9, r4
 8010200:	f67f aed2 	bls.w	800ffa8 <qsort+0x3c>
 8010204:	fbb9 f1f4 	udiv	r1, r9, r4
 8010208:	4630      	mov	r0, r6
 801020a:	e7e7      	b.n	80101dc <qsort+0x270>

0801020c <memset>:
 801020c:	4402      	add	r2, r0
 801020e:	4603      	mov	r3, r0
 8010210:	4293      	cmp	r3, r2
 8010212:	d100      	bne.n	8010216 <memset+0xa>
 8010214:	4770      	bx	lr
 8010216:	f803 1b01 	strb.w	r1, [r3], #1
 801021a:	e7f9      	b.n	8010210 <memset+0x4>

0801021c <_reclaim_reent>:
 801021c:	4b29      	ldr	r3, [pc, #164]	; (80102c4 <_reclaim_reent+0xa8>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4283      	cmp	r3, r0
 8010222:	b570      	push	{r4, r5, r6, lr}
 8010224:	4604      	mov	r4, r0
 8010226:	d04b      	beq.n	80102c0 <_reclaim_reent+0xa4>
 8010228:	69c3      	ldr	r3, [r0, #28]
 801022a:	b143      	cbz	r3, 801023e <_reclaim_reent+0x22>
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d144      	bne.n	80102bc <_reclaim_reent+0xa0>
 8010232:	69e3      	ldr	r3, [r4, #28]
 8010234:	6819      	ldr	r1, [r3, #0]
 8010236:	b111      	cbz	r1, 801023e <_reclaim_reent+0x22>
 8010238:	4620      	mov	r0, r4
 801023a:	f000 f87f 	bl	801033c <_free_r>
 801023e:	6961      	ldr	r1, [r4, #20]
 8010240:	b111      	cbz	r1, 8010248 <_reclaim_reent+0x2c>
 8010242:	4620      	mov	r0, r4
 8010244:	f000 f87a 	bl	801033c <_free_r>
 8010248:	69e1      	ldr	r1, [r4, #28]
 801024a:	b111      	cbz	r1, 8010252 <_reclaim_reent+0x36>
 801024c:	4620      	mov	r0, r4
 801024e:	f000 f875 	bl	801033c <_free_r>
 8010252:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010254:	b111      	cbz	r1, 801025c <_reclaim_reent+0x40>
 8010256:	4620      	mov	r0, r4
 8010258:	f000 f870 	bl	801033c <_free_r>
 801025c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801025e:	b111      	cbz	r1, 8010266 <_reclaim_reent+0x4a>
 8010260:	4620      	mov	r0, r4
 8010262:	f000 f86b 	bl	801033c <_free_r>
 8010266:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010268:	b111      	cbz	r1, 8010270 <_reclaim_reent+0x54>
 801026a:	4620      	mov	r0, r4
 801026c:	f000 f866 	bl	801033c <_free_r>
 8010270:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010272:	b111      	cbz	r1, 801027a <_reclaim_reent+0x5e>
 8010274:	4620      	mov	r0, r4
 8010276:	f000 f861 	bl	801033c <_free_r>
 801027a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801027c:	b111      	cbz	r1, 8010284 <_reclaim_reent+0x68>
 801027e:	4620      	mov	r0, r4
 8010280:	f000 f85c 	bl	801033c <_free_r>
 8010284:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010286:	b111      	cbz	r1, 801028e <_reclaim_reent+0x72>
 8010288:	4620      	mov	r0, r4
 801028a:	f000 f857 	bl	801033c <_free_r>
 801028e:	6a23      	ldr	r3, [r4, #32]
 8010290:	b1b3      	cbz	r3, 80102c0 <_reclaim_reent+0xa4>
 8010292:	4620      	mov	r0, r4
 8010294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010298:	4718      	bx	r3
 801029a:	5949      	ldr	r1, [r1, r5]
 801029c:	b941      	cbnz	r1, 80102b0 <_reclaim_reent+0x94>
 801029e:	3504      	adds	r5, #4
 80102a0:	69e3      	ldr	r3, [r4, #28]
 80102a2:	2d80      	cmp	r5, #128	; 0x80
 80102a4:	68d9      	ldr	r1, [r3, #12]
 80102a6:	d1f8      	bne.n	801029a <_reclaim_reent+0x7e>
 80102a8:	4620      	mov	r0, r4
 80102aa:	f000 f847 	bl	801033c <_free_r>
 80102ae:	e7c0      	b.n	8010232 <_reclaim_reent+0x16>
 80102b0:	680e      	ldr	r6, [r1, #0]
 80102b2:	4620      	mov	r0, r4
 80102b4:	f000 f842 	bl	801033c <_free_r>
 80102b8:	4631      	mov	r1, r6
 80102ba:	e7ef      	b.n	801029c <_reclaim_reent+0x80>
 80102bc:	2500      	movs	r5, #0
 80102be:	e7ef      	b.n	80102a0 <_reclaim_reent+0x84>
 80102c0:	bd70      	pop	{r4, r5, r6, pc}
 80102c2:	bf00      	nop
 80102c4:	20000114 	.word	0x20000114

080102c8 <__errno>:
 80102c8:	4b01      	ldr	r3, [pc, #4]	; (80102d0 <__errno+0x8>)
 80102ca:	6818      	ldr	r0, [r3, #0]
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	20000114 	.word	0x20000114

080102d4 <__libc_init_array>:
 80102d4:	b570      	push	{r4, r5, r6, lr}
 80102d6:	4d0d      	ldr	r5, [pc, #52]	; (801030c <__libc_init_array+0x38>)
 80102d8:	4c0d      	ldr	r4, [pc, #52]	; (8010310 <__libc_init_array+0x3c>)
 80102da:	1b64      	subs	r4, r4, r5
 80102dc:	10a4      	asrs	r4, r4, #2
 80102de:	2600      	movs	r6, #0
 80102e0:	42a6      	cmp	r6, r4
 80102e2:	d109      	bne.n	80102f8 <__libc_init_array+0x24>
 80102e4:	4d0b      	ldr	r5, [pc, #44]	; (8010314 <__libc_init_array+0x40>)
 80102e6:	4c0c      	ldr	r4, [pc, #48]	; (8010318 <__libc_init_array+0x44>)
 80102e8:	f001 faca 	bl	8011880 <_init>
 80102ec:	1b64      	subs	r4, r4, r5
 80102ee:	10a4      	asrs	r4, r4, #2
 80102f0:	2600      	movs	r6, #0
 80102f2:	42a6      	cmp	r6, r4
 80102f4:	d105      	bne.n	8010302 <__libc_init_array+0x2e>
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
 80102f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80102fc:	4798      	blx	r3
 80102fe:	3601      	adds	r6, #1
 8010300:	e7ee      	b.n	80102e0 <__libc_init_array+0xc>
 8010302:	f855 3b04 	ldr.w	r3, [r5], #4
 8010306:	4798      	blx	r3
 8010308:	3601      	adds	r6, #1
 801030a:	e7f2      	b.n	80102f2 <__libc_init_array+0x1e>
 801030c:	08011c48 	.word	0x08011c48
 8010310:	08011c48 	.word	0x08011c48
 8010314:	08011c48 	.word	0x08011c48
 8010318:	08011c4c 	.word	0x08011c4c

0801031c <__retarget_lock_acquire_recursive>:
 801031c:	4770      	bx	lr

0801031e <__retarget_lock_release_recursive>:
 801031e:	4770      	bx	lr

08010320 <memcpy>:
 8010320:	440a      	add	r2, r1
 8010322:	4291      	cmp	r1, r2
 8010324:	f100 33ff 	add.w	r3, r0, #4294967295
 8010328:	d100      	bne.n	801032c <memcpy+0xc>
 801032a:	4770      	bx	lr
 801032c:	b510      	push	{r4, lr}
 801032e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010336:	4291      	cmp	r1, r2
 8010338:	d1f9      	bne.n	801032e <memcpy+0xe>
 801033a:	bd10      	pop	{r4, pc}

0801033c <_free_r>:
 801033c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801033e:	2900      	cmp	r1, #0
 8010340:	d044      	beq.n	80103cc <_free_r+0x90>
 8010342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010346:	9001      	str	r0, [sp, #4]
 8010348:	2b00      	cmp	r3, #0
 801034a:	f1a1 0404 	sub.w	r4, r1, #4
 801034e:	bfb8      	it	lt
 8010350:	18e4      	addlt	r4, r4, r3
 8010352:	f000 f83f 	bl	80103d4 <__malloc_lock>
 8010356:	4a1e      	ldr	r2, [pc, #120]	; (80103d0 <_free_r+0x94>)
 8010358:	9801      	ldr	r0, [sp, #4]
 801035a:	6813      	ldr	r3, [r2, #0]
 801035c:	b933      	cbnz	r3, 801036c <_free_r+0x30>
 801035e:	6063      	str	r3, [r4, #4]
 8010360:	6014      	str	r4, [r2, #0]
 8010362:	b003      	add	sp, #12
 8010364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010368:	f000 b83a 	b.w	80103e0 <__malloc_unlock>
 801036c:	42a3      	cmp	r3, r4
 801036e:	d908      	bls.n	8010382 <_free_r+0x46>
 8010370:	6825      	ldr	r5, [r4, #0]
 8010372:	1961      	adds	r1, r4, r5
 8010374:	428b      	cmp	r3, r1
 8010376:	bf01      	itttt	eq
 8010378:	6819      	ldreq	r1, [r3, #0]
 801037a:	685b      	ldreq	r3, [r3, #4]
 801037c:	1949      	addeq	r1, r1, r5
 801037e:	6021      	streq	r1, [r4, #0]
 8010380:	e7ed      	b.n	801035e <_free_r+0x22>
 8010382:	461a      	mov	r2, r3
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	b10b      	cbz	r3, 801038c <_free_r+0x50>
 8010388:	42a3      	cmp	r3, r4
 801038a:	d9fa      	bls.n	8010382 <_free_r+0x46>
 801038c:	6811      	ldr	r1, [r2, #0]
 801038e:	1855      	adds	r5, r2, r1
 8010390:	42a5      	cmp	r5, r4
 8010392:	d10b      	bne.n	80103ac <_free_r+0x70>
 8010394:	6824      	ldr	r4, [r4, #0]
 8010396:	4421      	add	r1, r4
 8010398:	1854      	adds	r4, r2, r1
 801039a:	42a3      	cmp	r3, r4
 801039c:	6011      	str	r1, [r2, #0]
 801039e:	d1e0      	bne.n	8010362 <_free_r+0x26>
 80103a0:	681c      	ldr	r4, [r3, #0]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	6053      	str	r3, [r2, #4]
 80103a6:	440c      	add	r4, r1
 80103a8:	6014      	str	r4, [r2, #0]
 80103aa:	e7da      	b.n	8010362 <_free_r+0x26>
 80103ac:	d902      	bls.n	80103b4 <_free_r+0x78>
 80103ae:	230c      	movs	r3, #12
 80103b0:	6003      	str	r3, [r0, #0]
 80103b2:	e7d6      	b.n	8010362 <_free_r+0x26>
 80103b4:	6825      	ldr	r5, [r4, #0]
 80103b6:	1961      	adds	r1, r4, r5
 80103b8:	428b      	cmp	r3, r1
 80103ba:	bf04      	itt	eq
 80103bc:	6819      	ldreq	r1, [r3, #0]
 80103be:	685b      	ldreq	r3, [r3, #4]
 80103c0:	6063      	str	r3, [r4, #4]
 80103c2:	bf04      	itt	eq
 80103c4:	1949      	addeq	r1, r1, r5
 80103c6:	6021      	streq	r1, [r4, #0]
 80103c8:	6054      	str	r4, [r2, #4]
 80103ca:	e7ca      	b.n	8010362 <_free_r+0x26>
 80103cc:	b003      	add	sp, #12
 80103ce:	bd30      	pop	{r4, r5, pc}
 80103d0:	20002fe4 	.word	0x20002fe4

080103d4 <__malloc_lock>:
 80103d4:	4801      	ldr	r0, [pc, #4]	; (80103dc <__malloc_lock+0x8>)
 80103d6:	f7ff bfa1 	b.w	801031c <__retarget_lock_acquire_recursive>
 80103da:	bf00      	nop
 80103dc:	20002fe0 	.word	0x20002fe0

080103e0 <__malloc_unlock>:
 80103e0:	4801      	ldr	r0, [pc, #4]	; (80103e8 <__malloc_unlock+0x8>)
 80103e2:	f7ff bf9c 	b.w	801031e <__retarget_lock_release_recursive>
 80103e6:	bf00      	nop
 80103e8:	20002fe0 	.word	0x20002fe0
 80103ec:	00000000 	.word	0x00000000

080103f0 <exp>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	ed2d 8b02 	vpush	{d8}
 80103f6:	ec55 4b10 	vmov	r4, r5, d0
 80103fa:	f000 fa2d 	bl	8010858 <__ieee754_exp>
 80103fe:	eeb0 8a40 	vmov.f32	s16, s0
 8010402:	eef0 8a60 	vmov.f32	s17, s1
 8010406:	ec45 4b10 	vmov	d0, r4, r5
 801040a:	f000 f891 	bl	8010530 <finite>
 801040e:	b168      	cbz	r0, 801042c <exp+0x3c>
 8010410:	a317      	add	r3, pc, #92	; (adr r3, 8010470 <exp+0x80>)
 8010412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010416:	4620      	mov	r0, r4
 8010418:	4629      	mov	r1, r5
 801041a:	f7f0 fb25 	bl	8000a68 <__aeabi_dcmpgt>
 801041e:	b160      	cbz	r0, 801043a <exp+0x4a>
 8010420:	f7ff ff52 	bl	80102c8 <__errno>
 8010424:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010460 <exp+0x70>
 8010428:	2322      	movs	r3, #34	; 0x22
 801042a:	6003      	str	r3, [r0, #0]
 801042c:	eeb0 0a48 	vmov.f32	s0, s16
 8010430:	eef0 0a68 	vmov.f32	s1, s17
 8010434:	ecbd 8b02 	vpop	{d8}
 8010438:	bd38      	pop	{r3, r4, r5, pc}
 801043a:	a30f      	add	r3, pc, #60	; (adr r3, 8010478 <exp+0x88>)
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	4620      	mov	r0, r4
 8010442:	4629      	mov	r1, r5
 8010444:	f7f0 faf2 	bl	8000a2c <__aeabi_dcmplt>
 8010448:	2800      	cmp	r0, #0
 801044a:	d0ef      	beq.n	801042c <exp+0x3c>
 801044c:	f7ff ff3c 	bl	80102c8 <__errno>
 8010450:	2322      	movs	r3, #34	; 0x22
 8010452:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010468 <exp+0x78>
 8010456:	6003      	str	r3, [r0, #0]
 8010458:	e7e8      	b.n	801042c <exp+0x3c>
 801045a:	bf00      	nop
 801045c:	f3af 8000 	nop.w
 8010460:	00000000 	.word	0x00000000
 8010464:	7ff00000 	.word	0x7ff00000
	...
 8010470:	fefa39ef 	.word	0xfefa39ef
 8010474:	40862e42 	.word	0x40862e42
 8010478:	d52d3051 	.word	0xd52d3051
 801047c:	c0874910 	.word	0xc0874910

08010480 <sin>:
 8010480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010482:	ec53 2b10 	vmov	r2, r3, d0
 8010486:	4828      	ldr	r0, [pc, #160]	; (8010528 <sin+0xa8>)
 8010488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801048c:	4281      	cmp	r1, r0
 801048e:	dc07      	bgt.n	80104a0 <sin+0x20>
 8010490:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010520 <sin+0xa0>
 8010494:	2000      	movs	r0, #0
 8010496:	b005      	add	sp, #20
 8010498:	f85d eb04 	ldr.w	lr, [sp], #4
 801049c:	f000 b91c 	b.w	80106d8 <__kernel_sin>
 80104a0:	4822      	ldr	r0, [pc, #136]	; (801052c <sin+0xac>)
 80104a2:	4281      	cmp	r1, r0
 80104a4:	dd09      	ble.n	80104ba <sin+0x3a>
 80104a6:	ee10 0a10 	vmov	r0, s0
 80104aa:	4619      	mov	r1, r3
 80104ac:	f7ef fe94 	bl	80001d8 <__aeabi_dsub>
 80104b0:	ec41 0b10 	vmov	d0, r0, r1
 80104b4:	b005      	add	sp, #20
 80104b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80104ba:	4668      	mov	r0, sp
 80104bc:	f000 fb50 	bl	8010b60 <__ieee754_rem_pio2>
 80104c0:	f000 0003 	and.w	r0, r0, #3
 80104c4:	2801      	cmp	r0, #1
 80104c6:	d00c      	beq.n	80104e2 <sin+0x62>
 80104c8:	2802      	cmp	r0, #2
 80104ca:	d011      	beq.n	80104f0 <sin+0x70>
 80104cc:	b9f0      	cbnz	r0, 801050c <sin+0x8c>
 80104ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104d2:	ed9d 0b00 	vldr	d0, [sp]
 80104d6:	2001      	movs	r0, #1
 80104d8:	f000 f8fe 	bl	80106d8 <__kernel_sin>
 80104dc:	ec51 0b10 	vmov	r0, r1, d0
 80104e0:	e7e6      	b.n	80104b0 <sin+0x30>
 80104e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104e6:	ed9d 0b00 	vldr	d0, [sp]
 80104ea:	f000 f82d 	bl	8010548 <__kernel_cos>
 80104ee:	e7f5      	b.n	80104dc <sin+0x5c>
 80104f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104f4:	ed9d 0b00 	vldr	d0, [sp]
 80104f8:	2001      	movs	r0, #1
 80104fa:	f000 f8ed 	bl	80106d8 <__kernel_sin>
 80104fe:	ec53 2b10 	vmov	r2, r3, d0
 8010502:	ee10 0a10 	vmov	r0, s0
 8010506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801050a:	e7d1      	b.n	80104b0 <sin+0x30>
 801050c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010510:	ed9d 0b00 	vldr	d0, [sp]
 8010514:	f000 f818 	bl	8010548 <__kernel_cos>
 8010518:	e7f1      	b.n	80104fe <sin+0x7e>
 801051a:	bf00      	nop
 801051c:	f3af 8000 	nop.w
	...
 8010528:	3fe921fb 	.word	0x3fe921fb
 801052c:	7fefffff 	.word	0x7fefffff

08010530 <finite>:
 8010530:	b082      	sub	sp, #8
 8010532:	ed8d 0b00 	vstr	d0, [sp]
 8010536:	9801      	ldr	r0, [sp, #4]
 8010538:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801053c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010540:	0fc0      	lsrs	r0, r0, #31
 8010542:	b002      	add	sp, #8
 8010544:	4770      	bx	lr
	...

08010548 <__kernel_cos>:
 8010548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801054c:	ec57 6b10 	vmov	r6, r7, d0
 8010550:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010554:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010558:	ed8d 1b00 	vstr	d1, [sp]
 801055c:	da07      	bge.n	801056e <__kernel_cos+0x26>
 801055e:	ee10 0a10 	vmov	r0, s0
 8010562:	4639      	mov	r1, r7
 8010564:	f7f0 fa8a 	bl	8000a7c <__aeabi_d2iz>
 8010568:	2800      	cmp	r0, #0
 801056a:	f000 8088 	beq.w	801067e <__kernel_cos+0x136>
 801056e:	4632      	mov	r2, r6
 8010570:	463b      	mov	r3, r7
 8010572:	4630      	mov	r0, r6
 8010574:	4639      	mov	r1, r7
 8010576:	f7ef ffe7 	bl	8000548 <__aeabi_dmul>
 801057a:	4b51      	ldr	r3, [pc, #324]	; (80106c0 <__kernel_cos+0x178>)
 801057c:	2200      	movs	r2, #0
 801057e:	4604      	mov	r4, r0
 8010580:	460d      	mov	r5, r1
 8010582:	f7ef ffe1 	bl	8000548 <__aeabi_dmul>
 8010586:	a340      	add	r3, pc, #256	; (adr r3, 8010688 <__kernel_cos+0x140>)
 8010588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058c:	4682      	mov	sl, r0
 801058e:	468b      	mov	fp, r1
 8010590:	4620      	mov	r0, r4
 8010592:	4629      	mov	r1, r5
 8010594:	f7ef ffd8 	bl	8000548 <__aeabi_dmul>
 8010598:	a33d      	add	r3, pc, #244	; (adr r3, 8010690 <__kernel_cos+0x148>)
 801059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059e:	f7ef fe1d 	bl	80001dc <__adddf3>
 80105a2:	4622      	mov	r2, r4
 80105a4:	462b      	mov	r3, r5
 80105a6:	f7ef ffcf 	bl	8000548 <__aeabi_dmul>
 80105aa:	a33b      	add	r3, pc, #236	; (adr r3, 8010698 <__kernel_cos+0x150>)
 80105ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b0:	f7ef fe12 	bl	80001d8 <__aeabi_dsub>
 80105b4:	4622      	mov	r2, r4
 80105b6:	462b      	mov	r3, r5
 80105b8:	f7ef ffc6 	bl	8000548 <__aeabi_dmul>
 80105bc:	a338      	add	r3, pc, #224	; (adr r3, 80106a0 <__kernel_cos+0x158>)
 80105be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c2:	f7ef fe0b 	bl	80001dc <__adddf3>
 80105c6:	4622      	mov	r2, r4
 80105c8:	462b      	mov	r3, r5
 80105ca:	f7ef ffbd 	bl	8000548 <__aeabi_dmul>
 80105ce:	a336      	add	r3, pc, #216	; (adr r3, 80106a8 <__kernel_cos+0x160>)
 80105d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d4:	f7ef fe00 	bl	80001d8 <__aeabi_dsub>
 80105d8:	4622      	mov	r2, r4
 80105da:	462b      	mov	r3, r5
 80105dc:	f7ef ffb4 	bl	8000548 <__aeabi_dmul>
 80105e0:	a333      	add	r3, pc, #204	; (adr r3, 80106b0 <__kernel_cos+0x168>)
 80105e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e6:	f7ef fdf9 	bl	80001dc <__adddf3>
 80105ea:	4622      	mov	r2, r4
 80105ec:	462b      	mov	r3, r5
 80105ee:	f7ef ffab 	bl	8000548 <__aeabi_dmul>
 80105f2:	4622      	mov	r2, r4
 80105f4:	462b      	mov	r3, r5
 80105f6:	f7ef ffa7 	bl	8000548 <__aeabi_dmul>
 80105fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105fe:	4604      	mov	r4, r0
 8010600:	460d      	mov	r5, r1
 8010602:	4630      	mov	r0, r6
 8010604:	4639      	mov	r1, r7
 8010606:	f7ef ff9f 	bl	8000548 <__aeabi_dmul>
 801060a:	460b      	mov	r3, r1
 801060c:	4602      	mov	r2, r0
 801060e:	4629      	mov	r1, r5
 8010610:	4620      	mov	r0, r4
 8010612:	f7ef fde1 	bl	80001d8 <__aeabi_dsub>
 8010616:	4b2b      	ldr	r3, [pc, #172]	; (80106c4 <__kernel_cos+0x17c>)
 8010618:	4598      	cmp	r8, r3
 801061a:	4606      	mov	r6, r0
 801061c:	460f      	mov	r7, r1
 801061e:	dc10      	bgt.n	8010642 <__kernel_cos+0xfa>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	4650      	mov	r0, sl
 8010626:	4659      	mov	r1, fp
 8010628:	f7ef fdd6 	bl	80001d8 <__aeabi_dsub>
 801062c:	460b      	mov	r3, r1
 801062e:	4926      	ldr	r1, [pc, #152]	; (80106c8 <__kernel_cos+0x180>)
 8010630:	4602      	mov	r2, r0
 8010632:	2000      	movs	r0, #0
 8010634:	f7ef fdd0 	bl	80001d8 <__aeabi_dsub>
 8010638:	ec41 0b10 	vmov	d0, r0, r1
 801063c:	b003      	add	sp, #12
 801063e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010642:	4b22      	ldr	r3, [pc, #136]	; (80106cc <__kernel_cos+0x184>)
 8010644:	4920      	ldr	r1, [pc, #128]	; (80106c8 <__kernel_cos+0x180>)
 8010646:	4598      	cmp	r8, r3
 8010648:	bfcc      	ite	gt
 801064a:	4d21      	ldrgt	r5, [pc, #132]	; (80106d0 <__kernel_cos+0x188>)
 801064c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010650:	2400      	movs	r4, #0
 8010652:	4622      	mov	r2, r4
 8010654:	462b      	mov	r3, r5
 8010656:	2000      	movs	r0, #0
 8010658:	f7ef fdbe 	bl	80001d8 <__aeabi_dsub>
 801065c:	4622      	mov	r2, r4
 801065e:	4680      	mov	r8, r0
 8010660:	4689      	mov	r9, r1
 8010662:	462b      	mov	r3, r5
 8010664:	4650      	mov	r0, sl
 8010666:	4659      	mov	r1, fp
 8010668:	f7ef fdb6 	bl	80001d8 <__aeabi_dsub>
 801066c:	4632      	mov	r2, r6
 801066e:	463b      	mov	r3, r7
 8010670:	f7ef fdb2 	bl	80001d8 <__aeabi_dsub>
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	4640      	mov	r0, r8
 801067a:	4649      	mov	r1, r9
 801067c:	e7da      	b.n	8010634 <__kernel_cos+0xec>
 801067e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80106b8 <__kernel_cos+0x170>
 8010682:	e7db      	b.n	801063c <__kernel_cos+0xf4>
 8010684:	f3af 8000 	nop.w
 8010688:	be8838d4 	.word	0xbe8838d4
 801068c:	bda8fae9 	.word	0xbda8fae9
 8010690:	bdb4b1c4 	.word	0xbdb4b1c4
 8010694:	3e21ee9e 	.word	0x3e21ee9e
 8010698:	809c52ad 	.word	0x809c52ad
 801069c:	3e927e4f 	.word	0x3e927e4f
 80106a0:	19cb1590 	.word	0x19cb1590
 80106a4:	3efa01a0 	.word	0x3efa01a0
 80106a8:	16c15177 	.word	0x16c15177
 80106ac:	3f56c16c 	.word	0x3f56c16c
 80106b0:	5555554c 	.word	0x5555554c
 80106b4:	3fa55555 	.word	0x3fa55555
 80106b8:	00000000 	.word	0x00000000
 80106bc:	3ff00000 	.word	0x3ff00000
 80106c0:	3fe00000 	.word	0x3fe00000
 80106c4:	3fd33332 	.word	0x3fd33332
 80106c8:	3ff00000 	.word	0x3ff00000
 80106cc:	3fe90000 	.word	0x3fe90000
 80106d0:	3fd20000 	.word	0x3fd20000
 80106d4:	00000000 	.word	0x00000000

080106d8 <__kernel_sin>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	ed2d 8b04 	vpush	{d8-d9}
 80106e0:	eeb0 8a41 	vmov.f32	s16, s2
 80106e4:	eef0 8a61 	vmov.f32	s17, s3
 80106e8:	ec55 4b10 	vmov	r4, r5, d0
 80106ec:	b083      	sub	sp, #12
 80106ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80106f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80106f6:	9001      	str	r0, [sp, #4]
 80106f8:	da06      	bge.n	8010708 <__kernel_sin+0x30>
 80106fa:	ee10 0a10 	vmov	r0, s0
 80106fe:	4629      	mov	r1, r5
 8010700:	f7f0 f9bc 	bl	8000a7c <__aeabi_d2iz>
 8010704:	2800      	cmp	r0, #0
 8010706:	d051      	beq.n	80107ac <__kernel_sin+0xd4>
 8010708:	4622      	mov	r2, r4
 801070a:	462b      	mov	r3, r5
 801070c:	4620      	mov	r0, r4
 801070e:	4629      	mov	r1, r5
 8010710:	f7ef ff1a 	bl	8000548 <__aeabi_dmul>
 8010714:	4682      	mov	sl, r0
 8010716:	468b      	mov	fp, r1
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4620      	mov	r0, r4
 801071e:	4629      	mov	r1, r5
 8010720:	f7ef ff12 	bl	8000548 <__aeabi_dmul>
 8010724:	a341      	add	r3, pc, #260	; (adr r3, 801082c <__kernel_sin+0x154>)
 8010726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072a:	4680      	mov	r8, r0
 801072c:	4689      	mov	r9, r1
 801072e:	4650      	mov	r0, sl
 8010730:	4659      	mov	r1, fp
 8010732:	f7ef ff09 	bl	8000548 <__aeabi_dmul>
 8010736:	a33f      	add	r3, pc, #252	; (adr r3, 8010834 <__kernel_sin+0x15c>)
 8010738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073c:	f7ef fd4c 	bl	80001d8 <__aeabi_dsub>
 8010740:	4652      	mov	r2, sl
 8010742:	465b      	mov	r3, fp
 8010744:	f7ef ff00 	bl	8000548 <__aeabi_dmul>
 8010748:	a33c      	add	r3, pc, #240	; (adr r3, 801083c <__kernel_sin+0x164>)
 801074a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074e:	f7ef fd45 	bl	80001dc <__adddf3>
 8010752:	4652      	mov	r2, sl
 8010754:	465b      	mov	r3, fp
 8010756:	f7ef fef7 	bl	8000548 <__aeabi_dmul>
 801075a:	a33a      	add	r3, pc, #232	; (adr r3, 8010844 <__kernel_sin+0x16c>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	f7ef fd3a 	bl	80001d8 <__aeabi_dsub>
 8010764:	4652      	mov	r2, sl
 8010766:	465b      	mov	r3, fp
 8010768:	f7ef feee 	bl	8000548 <__aeabi_dmul>
 801076c:	a337      	add	r3, pc, #220	; (adr r3, 801084c <__kernel_sin+0x174>)
 801076e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010772:	f7ef fd33 	bl	80001dc <__adddf3>
 8010776:	9b01      	ldr	r3, [sp, #4]
 8010778:	4606      	mov	r6, r0
 801077a:	460f      	mov	r7, r1
 801077c:	b9eb      	cbnz	r3, 80107ba <__kernel_sin+0xe2>
 801077e:	4602      	mov	r2, r0
 8010780:	460b      	mov	r3, r1
 8010782:	4650      	mov	r0, sl
 8010784:	4659      	mov	r1, fp
 8010786:	f7ef fedf 	bl	8000548 <__aeabi_dmul>
 801078a:	a325      	add	r3, pc, #148	; (adr r3, 8010820 <__kernel_sin+0x148>)
 801078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010790:	f7ef fd22 	bl	80001d8 <__aeabi_dsub>
 8010794:	4642      	mov	r2, r8
 8010796:	464b      	mov	r3, r9
 8010798:	f7ef fed6 	bl	8000548 <__aeabi_dmul>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	4620      	mov	r0, r4
 80107a2:	4629      	mov	r1, r5
 80107a4:	f7ef fd1a 	bl	80001dc <__adddf3>
 80107a8:	4604      	mov	r4, r0
 80107aa:	460d      	mov	r5, r1
 80107ac:	ec45 4b10 	vmov	d0, r4, r5
 80107b0:	b003      	add	sp, #12
 80107b2:	ecbd 8b04 	vpop	{d8-d9}
 80107b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ba:	4b1b      	ldr	r3, [pc, #108]	; (8010828 <__kernel_sin+0x150>)
 80107bc:	ec51 0b18 	vmov	r0, r1, d8
 80107c0:	2200      	movs	r2, #0
 80107c2:	f7ef fec1 	bl	8000548 <__aeabi_dmul>
 80107c6:	4632      	mov	r2, r6
 80107c8:	ec41 0b19 	vmov	d9, r0, r1
 80107cc:	463b      	mov	r3, r7
 80107ce:	4640      	mov	r0, r8
 80107d0:	4649      	mov	r1, r9
 80107d2:	f7ef feb9 	bl	8000548 <__aeabi_dmul>
 80107d6:	4602      	mov	r2, r0
 80107d8:	460b      	mov	r3, r1
 80107da:	ec51 0b19 	vmov	r0, r1, d9
 80107de:	f7ef fcfb 	bl	80001d8 <__aeabi_dsub>
 80107e2:	4652      	mov	r2, sl
 80107e4:	465b      	mov	r3, fp
 80107e6:	f7ef feaf 	bl	8000548 <__aeabi_dmul>
 80107ea:	ec53 2b18 	vmov	r2, r3, d8
 80107ee:	f7ef fcf3 	bl	80001d8 <__aeabi_dsub>
 80107f2:	a30b      	add	r3, pc, #44	; (adr r3, 8010820 <__kernel_sin+0x148>)
 80107f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f8:	4606      	mov	r6, r0
 80107fa:	460f      	mov	r7, r1
 80107fc:	4640      	mov	r0, r8
 80107fe:	4649      	mov	r1, r9
 8010800:	f7ef fea2 	bl	8000548 <__aeabi_dmul>
 8010804:	4602      	mov	r2, r0
 8010806:	460b      	mov	r3, r1
 8010808:	4630      	mov	r0, r6
 801080a:	4639      	mov	r1, r7
 801080c:	f7ef fce6 	bl	80001dc <__adddf3>
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	4620      	mov	r0, r4
 8010816:	4629      	mov	r1, r5
 8010818:	f7ef fcde 	bl	80001d8 <__aeabi_dsub>
 801081c:	e7c4      	b.n	80107a8 <__kernel_sin+0xd0>
 801081e:	bf00      	nop
 8010820:	55555549 	.word	0x55555549
 8010824:	3fc55555 	.word	0x3fc55555
 8010828:	3fe00000 	.word	0x3fe00000
 801082c:	5acfd57c 	.word	0x5acfd57c
 8010830:	3de5d93a 	.word	0x3de5d93a
 8010834:	8a2b9ceb 	.word	0x8a2b9ceb
 8010838:	3e5ae5e6 	.word	0x3e5ae5e6
 801083c:	57b1fe7d 	.word	0x57b1fe7d
 8010840:	3ec71de3 	.word	0x3ec71de3
 8010844:	19c161d5 	.word	0x19c161d5
 8010848:	3f2a01a0 	.word	0x3f2a01a0
 801084c:	1110f8a6 	.word	0x1110f8a6
 8010850:	3f811111 	.word	0x3f811111
 8010854:	00000000 	.word	0x00000000

08010858 <__ieee754_exp>:
 8010858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801085c:	ec55 4b10 	vmov	r4, r5, d0
 8010860:	49b5      	ldr	r1, [pc, #724]	; (8010b38 <__ieee754_exp+0x2e0>)
 8010862:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010866:	428a      	cmp	r2, r1
 8010868:	ed2d 8b04 	vpush	{d8-d9}
 801086c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010870:	d93b      	bls.n	80108ea <__ieee754_exp+0x92>
 8010872:	49b2      	ldr	r1, [pc, #712]	; (8010b3c <__ieee754_exp+0x2e4>)
 8010874:	428a      	cmp	r2, r1
 8010876:	d916      	bls.n	80108a6 <__ieee754_exp+0x4e>
 8010878:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801087c:	4323      	orrs	r3, r4
 801087e:	ee10 2a10 	vmov	r2, s0
 8010882:	d007      	beq.n	8010894 <__ieee754_exp+0x3c>
 8010884:	462b      	mov	r3, r5
 8010886:	4620      	mov	r0, r4
 8010888:	4629      	mov	r1, r5
 801088a:	f7ef fca7 	bl	80001dc <__adddf3>
 801088e:	4604      	mov	r4, r0
 8010890:	460d      	mov	r5, r1
 8010892:	e002      	b.n	801089a <__ieee754_exp+0x42>
 8010894:	b10e      	cbz	r6, 801089a <__ieee754_exp+0x42>
 8010896:	2400      	movs	r4, #0
 8010898:	2500      	movs	r5, #0
 801089a:	ecbd 8b04 	vpop	{d8-d9}
 801089e:	ec45 4b10 	vmov	d0, r4, r5
 80108a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108a6:	a38e      	add	r3, pc, #568	; (adr r3, 8010ae0 <__ieee754_exp+0x288>)
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	ee10 0a10 	vmov	r0, s0
 80108b0:	4629      	mov	r1, r5
 80108b2:	f7f0 f8d9 	bl	8000a68 <__aeabi_dcmpgt>
 80108b6:	4607      	mov	r7, r0
 80108b8:	b130      	cbz	r0, 80108c8 <__ieee754_exp+0x70>
 80108ba:	ecbd 8b04 	vpop	{d8-d9}
 80108be:	2000      	movs	r0, #0
 80108c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c4:	f000 bb82 	b.w	8010fcc <__math_oflow>
 80108c8:	a387      	add	r3, pc, #540	; (adr r3, 8010ae8 <__ieee754_exp+0x290>)
 80108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ce:	4620      	mov	r0, r4
 80108d0:	4629      	mov	r1, r5
 80108d2:	f7f0 f8ab 	bl	8000a2c <__aeabi_dcmplt>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	f000 808b 	beq.w	80109f2 <__ieee754_exp+0x19a>
 80108dc:	ecbd 8b04 	vpop	{d8-d9}
 80108e0:	4638      	mov	r0, r7
 80108e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e6:	f000 bb68 	b.w	8010fba <__math_uflow>
 80108ea:	4b95      	ldr	r3, [pc, #596]	; (8010b40 <__ieee754_exp+0x2e8>)
 80108ec:	429a      	cmp	r2, r3
 80108ee:	f240 80ac 	bls.w	8010a4a <__ieee754_exp+0x1f2>
 80108f2:	4b94      	ldr	r3, [pc, #592]	; (8010b44 <__ieee754_exp+0x2ec>)
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d87c      	bhi.n	80109f2 <__ieee754_exp+0x19a>
 80108f8:	4b93      	ldr	r3, [pc, #588]	; (8010b48 <__ieee754_exp+0x2f0>)
 80108fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80108fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010902:	ee10 0a10 	vmov	r0, s0
 8010906:	4629      	mov	r1, r5
 8010908:	f7ef fc66 	bl	80001d8 <__aeabi_dsub>
 801090c:	4b8f      	ldr	r3, [pc, #572]	; (8010b4c <__ieee754_exp+0x2f4>)
 801090e:	00f7      	lsls	r7, r6, #3
 8010910:	443b      	add	r3, r7
 8010912:	ed93 7b00 	vldr	d7, [r3]
 8010916:	f1c6 0a01 	rsb	sl, r6, #1
 801091a:	4680      	mov	r8, r0
 801091c:	4689      	mov	r9, r1
 801091e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010922:	eeb0 8a47 	vmov.f32	s16, s14
 8010926:	eef0 8a67 	vmov.f32	s17, s15
 801092a:	ec53 2b18 	vmov	r2, r3, d8
 801092e:	4640      	mov	r0, r8
 8010930:	4649      	mov	r1, r9
 8010932:	f7ef fc51 	bl	80001d8 <__aeabi_dsub>
 8010936:	4604      	mov	r4, r0
 8010938:	460d      	mov	r5, r1
 801093a:	4622      	mov	r2, r4
 801093c:	462b      	mov	r3, r5
 801093e:	4620      	mov	r0, r4
 8010940:	4629      	mov	r1, r5
 8010942:	f7ef fe01 	bl	8000548 <__aeabi_dmul>
 8010946:	a36a      	add	r3, pc, #424	; (adr r3, 8010af0 <__ieee754_exp+0x298>)
 8010948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094c:	4606      	mov	r6, r0
 801094e:	460f      	mov	r7, r1
 8010950:	f7ef fdfa 	bl	8000548 <__aeabi_dmul>
 8010954:	a368      	add	r3, pc, #416	; (adr r3, 8010af8 <__ieee754_exp+0x2a0>)
 8010956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095a:	f7ef fc3d 	bl	80001d8 <__aeabi_dsub>
 801095e:	4632      	mov	r2, r6
 8010960:	463b      	mov	r3, r7
 8010962:	f7ef fdf1 	bl	8000548 <__aeabi_dmul>
 8010966:	a366      	add	r3, pc, #408	; (adr r3, 8010b00 <__ieee754_exp+0x2a8>)
 8010968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096c:	f7ef fc36 	bl	80001dc <__adddf3>
 8010970:	4632      	mov	r2, r6
 8010972:	463b      	mov	r3, r7
 8010974:	f7ef fde8 	bl	8000548 <__aeabi_dmul>
 8010978:	a363      	add	r3, pc, #396	; (adr r3, 8010b08 <__ieee754_exp+0x2b0>)
 801097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097e:	f7ef fc2b 	bl	80001d8 <__aeabi_dsub>
 8010982:	4632      	mov	r2, r6
 8010984:	463b      	mov	r3, r7
 8010986:	f7ef fddf 	bl	8000548 <__aeabi_dmul>
 801098a:	a361      	add	r3, pc, #388	; (adr r3, 8010b10 <__ieee754_exp+0x2b8>)
 801098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010990:	f7ef fc24 	bl	80001dc <__adddf3>
 8010994:	4632      	mov	r2, r6
 8010996:	463b      	mov	r3, r7
 8010998:	f7ef fdd6 	bl	8000548 <__aeabi_dmul>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	4620      	mov	r0, r4
 80109a2:	4629      	mov	r1, r5
 80109a4:	f7ef fc18 	bl	80001d8 <__aeabi_dsub>
 80109a8:	4602      	mov	r2, r0
 80109aa:	460b      	mov	r3, r1
 80109ac:	4606      	mov	r6, r0
 80109ae:	460f      	mov	r7, r1
 80109b0:	4620      	mov	r0, r4
 80109b2:	4629      	mov	r1, r5
 80109b4:	f7ef fdc8 	bl	8000548 <__aeabi_dmul>
 80109b8:	ec41 0b19 	vmov	d9, r0, r1
 80109bc:	f1ba 0f00 	cmp.w	sl, #0
 80109c0:	d15d      	bne.n	8010a7e <__ieee754_exp+0x226>
 80109c2:	2200      	movs	r2, #0
 80109c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80109c8:	4630      	mov	r0, r6
 80109ca:	4639      	mov	r1, r7
 80109cc:	f7ef fc04 	bl	80001d8 <__aeabi_dsub>
 80109d0:	4602      	mov	r2, r0
 80109d2:	460b      	mov	r3, r1
 80109d4:	ec51 0b19 	vmov	r0, r1, d9
 80109d8:	f7ef fee0 	bl	800079c <__aeabi_ddiv>
 80109dc:	4622      	mov	r2, r4
 80109de:	462b      	mov	r3, r5
 80109e0:	f7ef fbfa 	bl	80001d8 <__aeabi_dsub>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	2000      	movs	r0, #0
 80109ea:	4959      	ldr	r1, [pc, #356]	; (8010b50 <__ieee754_exp+0x2f8>)
 80109ec:	f7ef fbf4 	bl	80001d8 <__aeabi_dsub>
 80109f0:	e74d      	b.n	801088e <__ieee754_exp+0x36>
 80109f2:	4b58      	ldr	r3, [pc, #352]	; (8010b54 <__ieee754_exp+0x2fc>)
 80109f4:	4620      	mov	r0, r4
 80109f6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80109fa:	4629      	mov	r1, r5
 80109fc:	a346      	add	r3, pc, #280	; (adr r3, 8010b18 <__ieee754_exp+0x2c0>)
 80109fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a02:	f7ef fda1 	bl	8000548 <__aeabi_dmul>
 8010a06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a0a:	f7ef fbe7 	bl	80001dc <__adddf3>
 8010a0e:	f7f0 f835 	bl	8000a7c <__aeabi_d2iz>
 8010a12:	4682      	mov	sl, r0
 8010a14:	f7ef fd2e 	bl	8000474 <__aeabi_i2d>
 8010a18:	a341      	add	r3, pc, #260	; (adr r3, 8010b20 <__ieee754_exp+0x2c8>)
 8010a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1e:	4606      	mov	r6, r0
 8010a20:	460f      	mov	r7, r1
 8010a22:	f7ef fd91 	bl	8000548 <__aeabi_dmul>
 8010a26:	4602      	mov	r2, r0
 8010a28:	460b      	mov	r3, r1
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	f7ef fbd3 	bl	80001d8 <__aeabi_dsub>
 8010a32:	a33d      	add	r3, pc, #244	; (adr r3, 8010b28 <__ieee754_exp+0x2d0>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	4680      	mov	r8, r0
 8010a3a:	4689      	mov	r9, r1
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	4639      	mov	r1, r7
 8010a40:	f7ef fd82 	bl	8000548 <__aeabi_dmul>
 8010a44:	ec41 0b18 	vmov	d8, r0, r1
 8010a48:	e76f      	b.n	801092a <__ieee754_exp+0xd2>
 8010a4a:	4b43      	ldr	r3, [pc, #268]	; (8010b58 <__ieee754_exp+0x300>)
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d811      	bhi.n	8010a74 <__ieee754_exp+0x21c>
 8010a50:	a337      	add	r3, pc, #220	; (adr r3, 8010b30 <__ieee754_exp+0x2d8>)
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	ee10 0a10 	vmov	r0, s0
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	f7ef fbbe 	bl	80001dc <__adddf3>
 8010a60:	4b3b      	ldr	r3, [pc, #236]	; (8010b50 <__ieee754_exp+0x2f8>)
 8010a62:	2200      	movs	r2, #0
 8010a64:	f7f0 f800 	bl	8000a68 <__aeabi_dcmpgt>
 8010a68:	b138      	cbz	r0, 8010a7a <__ieee754_exp+0x222>
 8010a6a:	4b39      	ldr	r3, [pc, #228]	; (8010b50 <__ieee754_exp+0x2f8>)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	4620      	mov	r0, r4
 8010a70:	4629      	mov	r1, r5
 8010a72:	e70a      	b.n	801088a <__ieee754_exp+0x32>
 8010a74:	f04f 0a00 	mov.w	sl, #0
 8010a78:	e75f      	b.n	801093a <__ieee754_exp+0xe2>
 8010a7a:	4682      	mov	sl, r0
 8010a7c:	e75d      	b.n	801093a <__ieee754_exp+0xe2>
 8010a7e:	4632      	mov	r2, r6
 8010a80:	463b      	mov	r3, r7
 8010a82:	2000      	movs	r0, #0
 8010a84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010a88:	f7ef fba6 	bl	80001d8 <__aeabi_dsub>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	ec51 0b19 	vmov	r0, r1, d9
 8010a94:	f7ef fe82 	bl	800079c <__aeabi_ddiv>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	ec51 0b18 	vmov	r0, r1, d8
 8010aa0:	f7ef fb9a 	bl	80001d8 <__aeabi_dsub>
 8010aa4:	4642      	mov	r2, r8
 8010aa6:	464b      	mov	r3, r9
 8010aa8:	f7ef fb96 	bl	80001d8 <__aeabi_dsub>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	4927      	ldr	r1, [pc, #156]	; (8010b50 <__ieee754_exp+0x2f8>)
 8010ab4:	f7ef fb90 	bl	80001d8 <__aeabi_dsub>
 8010ab8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8010abc:	4592      	cmp	sl, r2
 8010abe:	db02      	blt.n	8010ac6 <__ieee754_exp+0x26e>
 8010ac0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010ac4:	e6e3      	b.n	801088e <__ieee754_exp+0x36>
 8010ac6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8010aca:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010ace:	2200      	movs	r2, #0
 8010ad0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010ad4:	f7ef fd38 	bl	8000548 <__aeabi_dmul>
 8010ad8:	e6d9      	b.n	801088e <__ieee754_exp+0x36>
 8010ada:	bf00      	nop
 8010adc:	f3af 8000 	nop.w
 8010ae0:	fefa39ef 	.word	0xfefa39ef
 8010ae4:	40862e42 	.word	0x40862e42
 8010ae8:	d52d3051 	.word	0xd52d3051
 8010aec:	c0874910 	.word	0xc0874910
 8010af0:	72bea4d0 	.word	0x72bea4d0
 8010af4:	3e663769 	.word	0x3e663769
 8010af8:	c5d26bf1 	.word	0xc5d26bf1
 8010afc:	3ebbbd41 	.word	0x3ebbbd41
 8010b00:	af25de2c 	.word	0xaf25de2c
 8010b04:	3f11566a 	.word	0x3f11566a
 8010b08:	16bebd93 	.word	0x16bebd93
 8010b0c:	3f66c16c 	.word	0x3f66c16c
 8010b10:	5555553e 	.word	0x5555553e
 8010b14:	3fc55555 	.word	0x3fc55555
 8010b18:	652b82fe 	.word	0x652b82fe
 8010b1c:	3ff71547 	.word	0x3ff71547
 8010b20:	fee00000 	.word	0xfee00000
 8010b24:	3fe62e42 	.word	0x3fe62e42
 8010b28:	35793c76 	.word	0x35793c76
 8010b2c:	3dea39ef 	.word	0x3dea39ef
 8010b30:	8800759c 	.word	0x8800759c
 8010b34:	7e37e43c 	.word	0x7e37e43c
 8010b38:	40862e41 	.word	0x40862e41
 8010b3c:	7fefffff 	.word	0x7fefffff
 8010b40:	3fd62e42 	.word	0x3fd62e42
 8010b44:	3ff0a2b1 	.word	0x3ff0a2b1
 8010b48:	08011a48 	.word	0x08011a48
 8010b4c:	08011a58 	.word	0x08011a58
 8010b50:	3ff00000 	.word	0x3ff00000
 8010b54:	08011a38 	.word	0x08011a38
 8010b58:	3defffff 	.word	0x3defffff
 8010b5c:	00000000 	.word	0x00000000

08010b60 <__ieee754_rem_pio2>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	ed2d 8b02 	vpush	{d8}
 8010b68:	ec55 4b10 	vmov	r4, r5, d0
 8010b6c:	4bca      	ldr	r3, [pc, #808]	; (8010e98 <__ieee754_rem_pio2+0x338>)
 8010b6e:	b08b      	sub	sp, #44	; 0x2c
 8010b70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010b74:	4598      	cmp	r8, r3
 8010b76:	4682      	mov	sl, r0
 8010b78:	9502      	str	r5, [sp, #8]
 8010b7a:	dc08      	bgt.n	8010b8e <__ieee754_rem_pio2+0x2e>
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	2300      	movs	r3, #0
 8010b80:	ed80 0b00 	vstr	d0, [r0]
 8010b84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010b88:	f04f 0b00 	mov.w	fp, #0
 8010b8c:	e028      	b.n	8010be0 <__ieee754_rem_pio2+0x80>
 8010b8e:	4bc3      	ldr	r3, [pc, #780]	; (8010e9c <__ieee754_rem_pio2+0x33c>)
 8010b90:	4598      	cmp	r8, r3
 8010b92:	dc78      	bgt.n	8010c86 <__ieee754_rem_pio2+0x126>
 8010b94:	9b02      	ldr	r3, [sp, #8]
 8010b96:	4ec2      	ldr	r6, [pc, #776]	; (8010ea0 <__ieee754_rem_pio2+0x340>)
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	ee10 0a10 	vmov	r0, s0
 8010b9e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010e60 <__ieee754_rem_pio2+0x300>)
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	dd39      	ble.n	8010c1c <__ieee754_rem_pio2+0xbc>
 8010ba8:	f7ef fb16 	bl	80001d8 <__aeabi_dsub>
 8010bac:	45b0      	cmp	r8, r6
 8010bae:	4604      	mov	r4, r0
 8010bb0:	460d      	mov	r5, r1
 8010bb2:	d01b      	beq.n	8010bec <__ieee754_rem_pio2+0x8c>
 8010bb4:	a3ac      	add	r3, pc, #688	; (adr r3, 8010e68 <__ieee754_rem_pio2+0x308>)
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	f7ef fb0d 	bl	80001d8 <__aeabi_dsub>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	e9ca 2300 	strd	r2, r3, [sl]
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	4629      	mov	r1, r5
 8010bca:	f7ef fb05 	bl	80001d8 <__aeabi_dsub>
 8010bce:	a3a6      	add	r3, pc, #664	; (adr r3, 8010e68 <__ieee754_rem_pio2+0x308>)
 8010bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd4:	f7ef fb00 	bl	80001d8 <__aeabi_dsub>
 8010bd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bdc:	f04f 0b01 	mov.w	fp, #1
 8010be0:	4658      	mov	r0, fp
 8010be2:	b00b      	add	sp, #44	; 0x2c
 8010be4:	ecbd 8b02 	vpop	{d8}
 8010be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bec:	a3a0      	add	r3, pc, #640	; (adr r3, 8010e70 <__ieee754_rem_pio2+0x310>)
 8010bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf2:	f7ef faf1 	bl	80001d8 <__aeabi_dsub>
 8010bf6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010e78 <__ieee754_rem_pio2+0x318>)
 8010bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	460d      	mov	r5, r1
 8010c00:	f7ef faea 	bl	80001d8 <__aeabi_dsub>
 8010c04:	4602      	mov	r2, r0
 8010c06:	460b      	mov	r3, r1
 8010c08:	e9ca 2300 	strd	r2, r3, [sl]
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	4629      	mov	r1, r5
 8010c10:	f7ef fae2 	bl	80001d8 <__aeabi_dsub>
 8010c14:	a398      	add	r3, pc, #608	; (adr r3, 8010e78 <__ieee754_rem_pio2+0x318>)
 8010c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1a:	e7db      	b.n	8010bd4 <__ieee754_rem_pio2+0x74>
 8010c1c:	f7ef fade 	bl	80001dc <__adddf3>
 8010c20:	45b0      	cmp	r8, r6
 8010c22:	4604      	mov	r4, r0
 8010c24:	460d      	mov	r5, r1
 8010c26:	d016      	beq.n	8010c56 <__ieee754_rem_pio2+0xf6>
 8010c28:	a38f      	add	r3, pc, #572	; (adr r3, 8010e68 <__ieee754_rem_pio2+0x308>)
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	f7ef fad5 	bl	80001dc <__adddf3>
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	e9ca 2300 	strd	r2, r3, [sl]
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	f7ef facb 	bl	80001d8 <__aeabi_dsub>
 8010c42:	a389      	add	r3, pc, #548	; (adr r3, 8010e68 <__ieee754_rem_pio2+0x308>)
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	f7ef fac8 	bl	80001dc <__adddf3>
 8010c4c:	f04f 3bff 	mov.w	fp, #4294967295
 8010c50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010c54:	e7c4      	b.n	8010be0 <__ieee754_rem_pio2+0x80>
 8010c56:	a386      	add	r3, pc, #536	; (adr r3, 8010e70 <__ieee754_rem_pio2+0x310>)
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	f7ef fabe 	bl	80001dc <__adddf3>
 8010c60:	a385      	add	r3, pc, #532	; (adr r3, 8010e78 <__ieee754_rem_pio2+0x318>)
 8010c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c66:	4604      	mov	r4, r0
 8010c68:	460d      	mov	r5, r1
 8010c6a:	f7ef fab7 	bl	80001dc <__adddf3>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	460b      	mov	r3, r1
 8010c72:	e9ca 2300 	strd	r2, r3, [sl]
 8010c76:	4620      	mov	r0, r4
 8010c78:	4629      	mov	r1, r5
 8010c7a:	f7ef faad 	bl	80001d8 <__aeabi_dsub>
 8010c7e:	a37e      	add	r3, pc, #504	; (adr r3, 8010e78 <__ieee754_rem_pio2+0x318>)
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	e7e0      	b.n	8010c48 <__ieee754_rem_pio2+0xe8>
 8010c86:	4b87      	ldr	r3, [pc, #540]	; (8010ea4 <__ieee754_rem_pio2+0x344>)
 8010c88:	4598      	cmp	r8, r3
 8010c8a:	f300 80d8 	bgt.w	8010e3e <__ieee754_rem_pio2+0x2de>
 8010c8e:	f000 f96d 	bl	8010f6c <fabs>
 8010c92:	ec55 4b10 	vmov	r4, r5, d0
 8010c96:	ee10 0a10 	vmov	r0, s0
 8010c9a:	a379      	add	r3, pc, #484	; (adr r3, 8010e80 <__ieee754_rem_pio2+0x320>)
 8010c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	f7ef fc51 	bl	8000548 <__aeabi_dmul>
 8010ca6:	4b80      	ldr	r3, [pc, #512]	; (8010ea8 <__ieee754_rem_pio2+0x348>)
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f7ef fa97 	bl	80001dc <__adddf3>
 8010cae:	f7ef fee5 	bl	8000a7c <__aeabi_d2iz>
 8010cb2:	4683      	mov	fp, r0
 8010cb4:	f7ef fbde 	bl	8000474 <__aeabi_i2d>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	460b      	mov	r3, r1
 8010cbc:	ec43 2b18 	vmov	d8, r2, r3
 8010cc0:	a367      	add	r3, pc, #412	; (adr r3, 8010e60 <__ieee754_rem_pio2+0x300>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	f7ef fc3f 	bl	8000548 <__aeabi_dmul>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	460b      	mov	r3, r1
 8010cce:	4620      	mov	r0, r4
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	f7ef fa81 	bl	80001d8 <__aeabi_dsub>
 8010cd6:	a364      	add	r3, pc, #400	; (adr r3, 8010e68 <__ieee754_rem_pio2+0x308>)
 8010cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cdc:	4606      	mov	r6, r0
 8010cde:	460f      	mov	r7, r1
 8010ce0:	ec51 0b18 	vmov	r0, r1, d8
 8010ce4:	f7ef fc30 	bl	8000548 <__aeabi_dmul>
 8010ce8:	f1bb 0f1f 	cmp.w	fp, #31
 8010cec:	4604      	mov	r4, r0
 8010cee:	460d      	mov	r5, r1
 8010cf0:	dc0d      	bgt.n	8010d0e <__ieee754_rem_pio2+0x1ae>
 8010cf2:	4b6e      	ldr	r3, [pc, #440]	; (8010eac <__ieee754_rem_pio2+0x34c>)
 8010cf4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cfc:	4543      	cmp	r3, r8
 8010cfe:	d006      	beq.n	8010d0e <__ieee754_rem_pio2+0x1ae>
 8010d00:	4622      	mov	r2, r4
 8010d02:	462b      	mov	r3, r5
 8010d04:	4630      	mov	r0, r6
 8010d06:	4639      	mov	r1, r7
 8010d08:	f7ef fa66 	bl	80001d8 <__aeabi_dsub>
 8010d0c:	e00e      	b.n	8010d2c <__ieee754_rem_pio2+0x1cc>
 8010d0e:	462b      	mov	r3, r5
 8010d10:	4622      	mov	r2, r4
 8010d12:	4630      	mov	r0, r6
 8010d14:	4639      	mov	r1, r7
 8010d16:	f7ef fa5f 	bl	80001d8 <__aeabi_dsub>
 8010d1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010d1e:	9303      	str	r3, [sp, #12]
 8010d20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d24:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010d28:	2b10      	cmp	r3, #16
 8010d2a:	dc02      	bgt.n	8010d32 <__ieee754_rem_pio2+0x1d2>
 8010d2c:	e9ca 0100 	strd	r0, r1, [sl]
 8010d30:	e039      	b.n	8010da6 <__ieee754_rem_pio2+0x246>
 8010d32:	a34f      	add	r3, pc, #316	; (adr r3, 8010e70 <__ieee754_rem_pio2+0x310>)
 8010d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d38:	ec51 0b18 	vmov	r0, r1, d8
 8010d3c:	f7ef fc04 	bl	8000548 <__aeabi_dmul>
 8010d40:	4604      	mov	r4, r0
 8010d42:	460d      	mov	r5, r1
 8010d44:	4602      	mov	r2, r0
 8010d46:	460b      	mov	r3, r1
 8010d48:	4630      	mov	r0, r6
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	f7ef fa44 	bl	80001d8 <__aeabi_dsub>
 8010d50:	4602      	mov	r2, r0
 8010d52:	460b      	mov	r3, r1
 8010d54:	4680      	mov	r8, r0
 8010d56:	4689      	mov	r9, r1
 8010d58:	4630      	mov	r0, r6
 8010d5a:	4639      	mov	r1, r7
 8010d5c:	f7ef fa3c 	bl	80001d8 <__aeabi_dsub>
 8010d60:	4622      	mov	r2, r4
 8010d62:	462b      	mov	r3, r5
 8010d64:	f7ef fa38 	bl	80001d8 <__aeabi_dsub>
 8010d68:	a343      	add	r3, pc, #268	; (adr r3, 8010e78 <__ieee754_rem_pio2+0x318>)
 8010d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6e:	4604      	mov	r4, r0
 8010d70:	460d      	mov	r5, r1
 8010d72:	ec51 0b18 	vmov	r0, r1, d8
 8010d76:	f7ef fbe7 	bl	8000548 <__aeabi_dmul>
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	462b      	mov	r3, r5
 8010d7e:	f7ef fa2b 	bl	80001d8 <__aeabi_dsub>
 8010d82:	4602      	mov	r2, r0
 8010d84:	460b      	mov	r3, r1
 8010d86:	4604      	mov	r4, r0
 8010d88:	460d      	mov	r5, r1
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	4649      	mov	r1, r9
 8010d8e:	f7ef fa23 	bl	80001d8 <__aeabi_dsub>
 8010d92:	9a03      	ldr	r2, [sp, #12]
 8010d94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	2b31      	cmp	r3, #49	; 0x31
 8010d9c:	dc24      	bgt.n	8010de8 <__ieee754_rem_pio2+0x288>
 8010d9e:	e9ca 0100 	strd	r0, r1, [sl]
 8010da2:	4646      	mov	r6, r8
 8010da4:	464f      	mov	r7, r9
 8010da6:	e9da 8900 	ldrd	r8, r9, [sl]
 8010daa:	4630      	mov	r0, r6
 8010dac:	4642      	mov	r2, r8
 8010dae:	464b      	mov	r3, r9
 8010db0:	4639      	mov	r1, r7
 8010db2:	f7ef fa11 	bl	80001d8 <__aeabi_dsub>
 8010db6:	462b      	mov	r3, r5
 8010db8:	4622      	mov	r2, r4
 8010dba:	f7ef fa0d 	bl	80001d8 <__aeabi_dsub>
 8010dbe:	9b02      	ldr	r3, [sp, #8]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010dc6:	f6bf af0b 	bge.w	8010be0 <__ieee754_rem_pio2+0x80>
 8010dca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010dce:	f8ca 3004 	str.w	r3, [sl, #4]
 8010dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dd6:	f8ca 8000 	str.w	r8, [sl]
 8010dda:	f8ca 0008 	str.w	r0, [sl, #8]
 8010dde:	f8ca 300c 	str.w	r3, [sl, #12]
 8010de2:	f1cb 0b00 	rsb	fp, fp, #0
 8010de6:	e6fb      	b.n	8010be0 <__ieee754_rem_pio2+0x80>
 8010de8:	a327      	add	r3, pc, #156	; (adr r3, 8010e88 <__ieee754_rem_pio2+0x328>)
 8010dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dee:	ec51 0b18 	vmov	r0, r1, d8
 8010df2:	f7ef fba9 	bl	8000548 <__aeabi_dmul>
 8010df6:	4604      	mov	r4, r0
 8010df8:	460d      	mov	r5, r1
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	4640      	mov	r0, r8
 8010e00:	4649      	mov	r1, r9
 8010e02:	f7ef f9e9 	bl	80001d8 <__aeabi_dsub>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	460f      	mov	r7, r1
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef f9e1 	bl	80001d8 <__aeabi_dsub>
 8010e16:	4622      	mov	r2, r4
 8010e18:	462b      	mov	r3, r5
 8010e1a:	f7ef f9dd 	bl	80001d8 <__aeabi_dsub>
 8010e1e:	a31c      	add	r3, pc, #112	; (adr r3, 8010e90 <__ieee754_rem_pio2+0x330>)
 8010e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e24:	4604      	mov	r4, r0
 8010e26:	460d      	mov	r5, r1
 8010e28:	ec51 0b18 	vmov	r0, r1, d8
 8010e2c:	f7ef fb8c 	bl	8000548 <__aeabi_dmul>
 8010e30:	4622      	mov	r2, r4
 8010e32:	462b      	mov	r3, r5
 8010e34:	f7ef f9d0 	bl	80001d8 <__aeabi_dsub>
 8010e38:	4604      	mov	r4, r0
 8010e3a:	460d      	mov	r5, r1
 8010e3c:	e760      	b.n	8010d00 <__ieee754_rem_pio2+0x1a0>
 8010e3e:	4b1c      	ldr	r3, [pc, #112]	; (8010eb0 <__ieee754_rem_pio2+0x350>)
 8010e40:	4598      	cmp	r8, r3
 8010e42:	dd37      	ble.n	8010eb4 <__ieee754_rem_pio2+0x354>
 8010e44:	ee10 2a10 	vmov	r2, s0
 8010e48:	462b      	mov	r3, r5
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	f7ef f9c3 	bl	80001d8 <__aeabi_dsub>
 8010e52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e56:	e9ca 0100 	strd	r0, r1, [sl]
 8010e5a:	e695      	b.n	8010b88 <__ieee754_rem_pio2+0x28>
 8010e5c:	f3af 8000 	nop.w
 8010e60:	54400000 	.word	0x54400000
 8010e64:	3ff921fb 	.word	0x3ff921fb
 8010e68:	1a626331 	.word	0x1a626331
 8010e6c:	3dd0b461 	.word	0x3dd0b461
 8010e70:	1a600000 	.word	0x1a600000
 8010e74:	3dd0b461 	.word	0x3dd0b461
 8010e78:	2e037073 	.word	0x2e037073
 8010e7c:	3ba3198a 	.word	0x3ba3198a
 8010e80:	6dc9c883 	.word	0x6dc9c883
 8010e84:	3fe45f30 	.word	0x3fe45f30
 8010e88:	2e000000 	.word	0x2e000000
 8010e8c:	3ba3198a 	.word	0x3ba3198a
 8010e90:	252049c1 	.word	0x252049c1
 8010e94:	397b839a 	.word	0x397b839a
 8010e98:	3fe921fb 	.word	0x3fe921fb
 8010e9c:	4002d97b 	.word	0x4002d97b
 8010ea0:	3ff921fb 	.word	0x3ff921fb
 8010ea4:	413921fb 	.word	0x413921fb
 8010ea8:	3fe00000 	.word	0x3fe00000
 8010eac:	08011a68 	.word	0x08011a68
 8010eb0:	7fefffff 	.word	0x7fefffff
 8010eb4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010eb8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010ebc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	460d      	mov	r5, r1
 8010ec4:	f7ef fdda 	bl	8000a7c <__aeabi_d2iz>
 8010ec8:	f7ef fad4 	bl	8000474 <__aeabi_i2d>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ed8:	f7ef f97e 	bl	80001d8 <__aeabi_dsub>
 8010edc:	4b21      	ldr	r3, [pc, #132]	; (8010f64 <__ieee754_rem_pio2+0x404>)
 8010ede:	2200      	movs	r2, #0
 8010ee0:	f7ef fb32 	bl	8000548 <__aeabi_dmul>
 8010ee4:	460d      	mov	r5, r1
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	f7ef fdc8 	bl	8000a7c <__aeabi_d2iz>
 8010eec:	f7ef fac2 	bl	8000474 <__aeabi_i2d>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010efc:	f7ef f96c 	bl	80001d8 <__aeabi_dsub>
 8010f00:	4b18      	ldr	r3, [pc, #96]	; (8010f64 <__ieee754_rem_pio2+0x404>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	f7ef fb20 	bl	8000548 <__aeabi_dmul>
 8010f08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010f0c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010f10:	2703      	movs	r7, #3
 8010f12:	2400      	movs	r4, #0
 8010f14:	2500      	movs	r5, #0
 8010f16:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010f1a:	4622      	mov	r2, r4
 8010f1c:	462b      	mov	r3, r5
 8010f1e:	46b9      	mov	r9, r7
 8010f20:	3f01      	subs	r7, #1
 8010f22:	f7ef fd79 	bl	8000a18 <__aeabi_dcmpeq>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d1f5      	bne.n	8010f16 <__ieee754_rem_pio2+0x3b6>
 8010f2a:	4b0f      	ldr	r3, [pc, #60]	; (8010f68 <__ieee754_rem_pio2+0x408>)
 8010f2c:	9301      	str	r3, [sp, #4]
 8010f2e:	2302      	movs	r3, #2
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	4632      	mov	r2, r6
 8010f34:	464b      	mov	r3, r9
 8010f36:	4651      	mov	r1, sl
 8010f38:	a804      	add	r0, sp, #16
 8010f3a:	f000 f851 	bl	8010fe0 <__kernel_rem_pio2>
 8010f3e:	9b02      	ldr	r3, [sp, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	4683      	mov	fp, r0
 8010f44:	f6bf ae4c 	bge.w	8010be0 <__ieee754_rem_pio2+0x80>
 8010f48:	e9da 2100 	ldrd	r2, r1, [sl]
 8010f4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f50:	e9ca 2300 	strd	r2, r3, [sl]
 8010f54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010f58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010f60:	e73f      	b.n	8010de2 <__ieee754_rem_pio2+0x282>
 8010f62:	bf00      	nop
 8010f64:	41700000 	.word	0x41700000
 8010f68:	08011ae8 	.word	0x08011ae8

08010f6c <fabs>:
 8010f6c:	ec51 0b10 	vmov	r0, r1, d0
 8010f70:	ee10 2a10 	vmov	r2, s0
 8010f74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f78:	ec43 2b10 	vmov	d0, r2, r3
 8010f7c:	4770      	bx	lr

08010f7e <with_errno>:
 8010f7e:	b570      	push	{r4, r5, r6, lr}
 8010f80:	4604      	mov	r4, r0
 8010f82:	460d      	mov	r5, r1
 8010f84:	4616      	mov	r6, r2
 8010f86:	f7ff f99f 	bl	80102c8 <__errno>
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	6006      	str	r6, [r0, #0]
 8010f8e:	4620      	mov	r0, r4
 8010f90:	bd70      	pop	{r4, r5, r6, pc}

08010f92 <xflow>:
 8010f92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f94:	4614      	mov	r4, r2
 8010f96:	461d      	mov	r5, r3
 8010f98:	b108      	cbz	r0, 8010f9e <xflow+0xc>
 8010f9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8010fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	4629      	mov	r1, r5
 8010faa:	f7ef facd 	bl	8000548 <__aeabi_dmul>
 8010fae:	2222      	movs	r2, #34	; 0x22
 8010fb0:	b003      	add	sp, #12
 8010fb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fb6:	f7ff bfe2 	b.w	8010f7e <with_errno>

08010fba <__math_uflow>:
 8010fba:	b508      	push	{r3, lr}
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010fc2:	f7ff ffe6 	bl	8010f92 <xflow>
 8010fc6:	ec41 0b10 	vmov	d0, r0, r1
 8010fca:	bd08      	pop	{r3, pc}

08010fcc <__math_oflow>:
 8010fcc:	b508      	push	{r3, lr}
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010fd4:	f7ff ffdd 	bl	8010f92 <xflow>
 8010fd8:	ec41 0b10 	vmov	d0, r0, r1
 8010fdc:	bd08      	pop	{r3, pc}
	...

08010fe0 <__kernel_rem_pio2>:
 8010fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	ed2d 8b02 	vpush	{d8}
 8010fe8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010fec:	f112 0f14 	cmn.w	r2, #20
 8010ff0:	9306      	str	r3, [sp, #24]
 8010ff2:	9104      	str	r1, [sp, #16]
 8010ff4:	4bc2      	ldr	r3, [pc, #776]	; (8011300 <__kernel_rem_pio2+0x320>)
 8010ff6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010ff8:	9009      	str	r0, [sp, #36]	; 0x24
 8010ffa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	9b06      	ldr	r3, [sp, #24]
 8011002:	f103 33ff 	add.w	r3, r3, #4294967295
 8011006:	bfa8      	it	ge
 8011008:	1ed4      	subge	r4, r2, #3
 801100a:	9305      	str	r3, [sp, #20]
 801100c:	bfb2      	itee	lt
 801100e:	2400      	movlt	r4, #0
 8011010:	2318      	movge	r3, #24
 8011012:	fb94 f4f3 	sdivge	r4, r4, r3
 8011016:	f06f 0317 	mvn.w	r3, #23
 801101a:	fb04 3303 	mla	r3, r4, r3, r3
 801101e:	eb03 0a02 	add.w	sl, r3, r2
 8011022:	9b00      	ldr	r3, [sp, #0]
 8011024:	9a05      	ldr	r2, [sp, #20]
 8011026:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80112f0 <__kernel_rem_pio2+0x310>
 801102a:	eb03 0802 	add.w	r8, r3, r2
 801102e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011030:	1aa7      	subs	r7, r4, r2
 8011032:	ae20      	add	r6, sp, #128	; 0x80
 8011034:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011038:	2500      	movs	r5, #0
 801103a:	4545      	cmp	r5, r8
 801103c:	dd13      	ble.n	8011066 <__kernel_rem_pio2+0x86>
 801103e:	9b06      	ldr	r3, [sp, #24]
 8011040:	aa20      	add	r2, sp, #128	; 0x80
 8011042:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011046:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801104a:	f04f 0800 	mov.w	r8, #0
 801104e:	9b00      	ldr	r3, [sp, #0]
 8011050:	4598      	cmp	r8, r3
 8011052:	dc31      	bgt.n	80110b8 <__kernel_rem_pio2+0xd8>
 8011054:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80112f0 <__kernel_rem_pio2+0x310>
 8011058:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801105c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011060:	462f      	mov	r7, r5
 8011062:	2600      	movs	r6, #0
 8011064:	e01b      	b.n	801109e <__kernel_rem_pio2+0xbe>
 8011066:	42ef      	cmn	r7, r5
 8011068:	d407      	bmi.n	801107a <__kernel_rem_pio2+0x9a>
 801106a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801106e:	f7ef fa01 	bl	8000474 <__aeabi_i2d>
 8011072:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011076:	3501      	adds	r5, #1
 8011078:	e7df      	b.n	801103a <__kernel_rem_pio2+0x5a>
 801107a:	ec51 0b18 	vmov	r0, r1, d8
 801107e:	e7f8      	b.n	8011072 <__kernel_rem_pio2+0x92>
 8011080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011084:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011088:	f7ef fa5e 	bl	8000548 <__aeabi_dmul>
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011094:	f7ef f8a2 	bl	80001dc <__adddf3>
 8011098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801109c:	3601      	adds	r6, #1
 801109e:	9b05      	ldr	r3, [sp, #20]
 80110a0:	429e      	cmp	r6, r3
 80110a2:	f1a7 0708 	sub.w	r7, r7, #8
 80110a6:	ddeb      	ble.n	8011080 <__kernel_rem_pio2+0xa0>
 80110a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110ac:	f108 0801 	add.w	r8, r8, #1
 80110b0:	ecab 7b02 	vstmia	fp!, {d7}
 80110b4:	3508      	adds	r5, #8
 80110b6:	e7ca      	b.n	801104e <__kernel_rem_pio2+0x6e>
 80110b8:	9b00      	ldr	r3, [sp, #0]
 80110ba:	aa0c      	add	r2, sp, #48	; 0x30
 80110bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80110c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80110c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80110c8:	9c00      	ldr	r4, [sp, #0]
 80110ca:	930a      	str	r3, [sp, #40]	; 0x28
 80110cc:	00e3      	lsls	r3, r4, #3
 80110ce:	9308      	str	r3, [sp, #32]
 80110d0:	ab98      	add	r3, sp, #608	; 0x260
 80110d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80110da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80110de:	ab70      	add	r3, sp, #448	; 0x1c0
 80110e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80110e4:	46c3      	mov	fp, r8
 80110e6:	46a1      	mov	r9, r4
 80110e8:	f1b9 0f00 	cmp.w	r9, #0
 80110ec:	f1a5 0508 	sub.w	r5, r5, #8
 80110f0:	dc77      	bgt.n	80111e2 <__kernel_rem_pio2+0x202>
 80110f2:	ec47 6b10 	vmov	d0, r6, r7
 80110f6:	4650      	mov	r0, sl
 80110f8:	f000 fac2 	bl	8011680 <scalbn>
 80110fc:	ec57 6b10 	vmov	r6, r7, d0
 8011100:	2200      	movs	r2, #0
 8011102:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011106:	ee10 0a10 	vmov	r0, s0
 801110a:	4639      	mov	r1, r7
 801110c:	f7ef fa1c 	bl	8000548 <__aeabi_dmul>
 8011110:	ec41 0b10 	vmov	d0, r0, r1
 8011114:	f000 fb34 	bl	8011780 <floor>
 8011118:	4b7a      	ldr	r3, [pc, #488]	; (8011304 <__kernel_rem_pio2+0x324>)
 801111a:	ec51 0b10 	vmov	r0, r1, d0
 801111e:	2200      	movs	r2, #0
 8011120:	f7ef fa12 	bl	8000548 <__aeabi_dmul>
 8011124:	4602      	mov	r2, r0
 8011126:	460b      	mov	r3, r1
 8011128:	4630      	mov	r0, r6
 801112a:	4639      	mov	r1, r7
 801112c:	f7ef f854 	bl	80001d8 <__aeabi_dsub>
 8011130:	460f      	mov	r7, r1
 8011132:	4606      	mov	r6, r0
 8011134:	f7ef fca2 	bl	8000a7c <__aeabi_d2iz>
 8011138:	9002      	str	r0, [sp, #8]
 801113a:	f7ef f99b 	bl	8000474 <__aeabi_i2d>
 801113e:	4602      	mov	r2, r0
 8011140:	460b      	mov	r3, r1
 8011142:	4630      	mov	r0, r6
 8011144:	4639      	mov	r1, r7
 8011146:	f7ef f847 	bl	80001d8 <__aeabi_dsub>
 801114a:	f1ba 0f00 	cmp.w	sl, #0
 801114e:	4606      	mov	r6, r0
 8011150:	460f      	mov	r7, r1
 8011152:	dd6d      	ble.n	8011230 <__kernel_rem_pio2+0x250>
 8011154:	1e61      	subs	r1, r4, #1
 8011156:	ab0c      	add	r3, sp, #48	; 0x30
 8011158:	9d02      	ldr	r5, [sp, #8]
 801115a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801115e:	f1ca 0018 	rsb	r0, sl, #24
 8011162:	fa43 f200 	asr.w	r2, r3, r0
 8011166:	4415      	add	r5, r2
 8011168:	4082      	lsls	r2, r0
 801116a:	1a9b      	subs	r3, r3, r2
 801116c:	aa0c      	add	r2, sp, #48	; 0x30
 801116e:	9502      	str	r5, [sp, #8]
 8011170:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011174:	f1ca 0217 	rsb	r2, sl, #23
 8011178:	fa43 fb02 	asr.w	fp, r3, r2
 801117c:	f1bb 0f00 	cmp.w	fp, #0
 8011180:	dd65      	ble.n	801124e <__kernel_rem_pio2+0x26e>
 8011182:	9b02      	ldr	r3, [sp, #8]
 8011184:	2200      	movs	r2, #0
 8011186:	3301      	adds	r3, #1
 8011188:	9302      	str	r3, [sp, #8]
 801118a:	4615      	mov	r5, r2
 801118c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011190:	4294      	cmp	r4, r2
 8011192:	f300 809f 	bgt.w	80112d4 <__kernel_rem_pio2+0x2f4>
 8011196:	f1ba 0f00 	cmp.w	sl, #0
 801119a:	dd07      	ble.n	80111ac <__kernel_rem_pio2+0x1cc>
 801119c:	f1ba 0f01 	cmp.w	sl, #1
 80111a0:	f000 80c1 	beq.w	8011326 <__kernel_rem_pio2+0x346>
 80111a4:	f1ba 0f02 	cmp.w	sl, #2
 80111a8:	f000 80c7 	beq.w	801133a <__kernel_rem_pio2+0x35a>
 80111ac:	f1bb 0f02 	cmp.w	fp, #2
 80111b0:	d14d      	bne.n	801124e <__kernel_rem_pio2+0x26e>
 80111b2:	4632      	mov	r2, r6
 80111b4:	463b      	mov	r3, r7
 80111b6:	4954      	ldr	r1, [pc, #336]	; (8011308 <__kernel_rem_pio2+0x328>)
 80111b8:	2000      	movs	r0, #0
 80111ba:	f7ef f80d 	bl	80001d8 <__aeabi_dsub>
 80111be:	4606      	mov	r6, r0
 80111c0:	460f      	mov	r7, r1
 80111c2:	2d00      	cmp	r5, #0
 80111c4:	d043      	beq.n	801124e <__kernel_rem_pio2+0x26e>
 80111c6:	4650      	mov	r0, sl
 80111c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80112f8 <__kernel_rem_pio2+0x318>
 80111cc:	f000 fa58 	bl	8011680 <scalbn>
 80111d0:	4630      	mov	r0, r6
 80111d2:	4639      	mov	r1, r7
 80111d4:	ec53 2b10 	vmov	r2, r3, d0
 80111d8:	f7ee fffe 	bl	80001d8 <__aeabi_dsub>
 80111dc:	4606      	mov	r6, r0
 80111de:	460f      	mov	r7, r1
 80111e0:	e035      	b.n	801124e <__kernel_rem_pio2+0x26e>
 80111e2:	4b4a      	ldr	r3, [pc, #296]	; (801130c <__kernel_rem_pio2+0x32c>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	4630      	mov	r0, r6
 80111e8:	4639      	mov	r1, r7
 80111ea:	f7ef f9ad 	bl	8000548 <__aeabi_dmul>
 80111ee:	f7ef fc45 	bl	8000a7c <__aeabi_d2iz>
 80111f2:	f7ef f93f 	bl	8000474 <__aeabi_i2d>
 80111f6:	4602      	mov	r2, r0
 80111f8:	460b      	mov	r3, r1
 80111fa:	ec43 2b18 	vmov	d8, r2, r3
 80111fe:	4b44      	ldr	r3, [pc, #272]	; (8011310 <__kernel_rem_pio2+0x330>)
 8011200:	2200      	movs	r2, #0
 8011202:	f7ef f9a1 	bl	8000548 <__aeabi_dmul>
 8011206:	4602      	mov	r2, r0
 8011208:	460b      	mov	r3, r1
 801120a:	4630      	mov	r0, r6
 801120c:	4639      	mov	r1, r7
 801120e:	f7ee ffe3 	bl	80001d8 <__aeabi_dsub>
 8011212:	f7ef fc33 	bl	8000a7c <__aeabi_d2iz>
 8011216:	e9d5 2300 	ldrd	r2, r3, [r5]
 801121a:	f84b 0b04 	str.w	r0, [fp], #4
 801121e:	ec51 0b18 	vmov	r0, r1, d8
 8011222:	f7ee ffdb 	bl	80001dc <__adddf3>
 8011226:	f109 39ff 	add.w	r9, r9, #4294967295
 801122a:	4606      	mov	r6, r0
 801122c:	460f      	mov	r7, r1
 801122e:	e75b      	b.n	80110e8 <__kernel_rem_pio2+0x108>
 8011230:	d106      	bne.n	8011240 <__kernel_rem_pio2+0x260>
 8011232:	1e63      	subs	r3, r4, #1
 8011234:	aa0c      	add	r2, sp, #48	; 0x30
 8011236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801123a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801123e:	e79d      	b.n	801117c <__kernel_rem_pio2+0x19c>
 8011240:	4b34      	ldr	r3, [pc, #208]	; (8011314 <__kernel_rem_pio2+0x334>)
 8011242:	2200      	movs	r2, #0
 8011244:	f7ef fc06 	bl	8000a54 <__aeabi_dcmpge>
 8011248:	2800      	cmp	r0, #0
 801124a:	d140      	bne.n	80112ce <__kernel_rem_pio2+0x2ee>
 801124c:	4683      	mov	fp, r0
 801124e:	2200      	movs	r2, #0
 8011250:	2300      	movs	r3, #0
 8011252:	4630      	mov	r0, r6
 8011254:	4639      	mov	r1, r7
 8011256:	f7ef fbdf 	bl	8000a18 <__aeabi_dcmpeq>
 801125a:	2800      	cmp	r0, #0
 801125c:	f000 80c1 	beq.w	80113e2 <__kernel_rem_pio2+0x402>
 8011260:	1e65      	subs	r5, r4, #1
 8011262:	462b      	mov	r3, r5
 8011264:	2200      	movs	r2, #0
 8011266:	9900      	ldr	r1, [sp, #0]
 8011268:	428b      	cmp	r3, r1
 801126a:	da6d      	bge.n	8011348 <__kernel_rem_pio2+0x368>
 801126c:	2a00      	cmp	r2, #0
 801126e:	f000 808a 	beq.w	8011386 <__kernel_rem_pio2+0x3a6>
 8011272:	ab0c      	add	r3, sp, #48	; 0x30
 8011274:	f1aa 0a18 	sub.w	sl, sl, #24
 8011278:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801127c:	2b00      	cmp	r3, #0
 801127e:	f000 80ae 	beq.w	80113de <__kernel_rem_pio2+0x3fe>
 8011282:	4650      	mov	r0, sl
 8011284:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80112f8 <__kernel_rem_pio2+0x318>
 8011288:	f000 f9fa 	bl	8011680 <scalbn>
 801128c:	1c6b      	adds	r3, r5, #1
 801128e:	00da      	lsls	r2, r3, #3
 8011290:	9205      	str	r2, [sp, #20]
 8011292:	ec57 6b10 	vmov	r6, r7, d0
 8011296:	aa70      	add	r2, sp, #448	; 0x1c0
 8011298:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801130c <__kernel_rem_pio2+0x32c>
 801129c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80112a0:	462c      	mov	r4, r5
 80112a2:	f04f 0800 	mov.w	r8, #0
 80112a6:	2c00      	cmp	r4, #0
 80112a8:	f280 80d4 	bge.w	8011454 <__kernel_rem_pio2+0x474>
 80112ac:	462c      	mov	r4, r5
 80112ae:	2c00      	cmp	r4, #0
 80112b0:	f2c0 8102 	blt.w	80114b8 <__kernel_rem_pio2+0x4d8>
 80112b4:	4b18      	ldr	r3, [pc, #96]	; (8011318 <__kernel_rem_pio2+0x338>)
 80112b6:	461e      	mov	r6, r3
 80112b8:	ab70      	add	r3, sp, #448	; 0x1c0
 80112ba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80112be:	1b2b      	subs	r3, r5, r4
 80112c0:	f04f 0900 	mov.w	r9, #0
 80112c4:	f04f 0a00 	mov.w	sl, #0
 80112c8:	2700      	movs	r7, #0
 80112ca:	9306      	str	r3, [sp, #24]
 80112cc:	e0e6      	b.n	801149c <__kernel_rem_pio2+0x4bc>
 80112ce:	f04f 0b02 	mov.w	fp, #2
 80112d2:	e756      	b.n	8011182 <__kernel_rem_pio2+0x1a2>
 80112d4:	f8d8 3000 	ldr.w	r3, [r8]
 80112d8:	bb05      	cbnz	r5, 801131c <__kernel_rem_pio2+0x33c>
 80112da:	b123      	cbz	r3, 80112e6 <__kernel_rem_pio2+0x306>
 80112dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80112e0:	f8c8 3000 	str.w	r3, [r8]
 80112e4:	2301      	movs	r3, #1
 80112e6:	3201      	adds	r2, #1
 80112e8:	f108 0804 	add.w	r8, r8, #4
 80112ec:	461d      	mov	r5, r3
 80112ee:	e74f      	b.n	8011190 <__kernel_rem_pio2+0x1b0>
	...
 80112fc:	3ff00000 	.word	0x3ff00000
 8011300:	08011c30 	.word	0x08011c30
 8011304:	40200000 	.word	0x40200000
 8011308:	3ff00000 	.word	0x3ff00000
 801130c:	3e700000 	.word	0x3e700000
 8011310:	41700000 	.word	0x41700000
 8011314:	3fe00000 	.word	0x3fe00000
 8011318:	08011bf0 	.word	0x08011bf0
 801131c:	1acb      	subs	r3, r1, r3
 801131e:	f8c8 3000 	str.w	r3, [r8]
 8011322:	462b      	mov	r3, r5
 8011324:	e7df      	b.n	80112e6 <__kernel_rem_pio2+0x306>
 8011326:	1e62      	subs	r2, r4, #1
 8011328:	ab0c      	add	r3, sp, #48	; 0x30
 801132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801132e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011332:	a90c      	add	r1, sp, #48	; 0x30
 8011334:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011338:	e738      	b.n	80111ac <__kernel_rem_pio2+0x1cc>
 801133a:	1e62      	subs	r2, r4, #1
 801133c:	ab0c      	add	r3, sp, #48	; 0x30
 801133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011342:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011346:	e7f4      	b.n	8011332 <__kernel_rem_pio2+0x352>
 8011348:	a90c      	add	r1, sp, #48	; 0x30
 801134a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801134e:	3b01      	subs	r3, #1
 8011350:	430a      	orrs	r2, r1
 8011352:	e788      	b.n	8011266 <__kernel_rem_pio2+0x286>
 8011354:	3301      	adds	r3, #1
 8011356:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801135a:	2900      	cmp	r1, #0
 801135c:	d0fa      	beq.n	8011354 <__kernel_rem_pio2+0x374>
 801135e:	9a08      	ldr	r2, [sp, #32]
 8011360:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011364:	446a      	add	r2, sp
 8011366:	3a98      	subs	r2, #152	; 0x98
 8011368:	9208      	str	r2, [sp, #32]
 801136a:	9a06      	ldr	r2, [sp, #24]
 801136c:	a920      	add	r1, sp, #128	; 0x80
 801136e:	18a2      	adds	r2, r4, r2
 8011370:	18e3      	adds	r3, r4, r3
 8011372:	f104 0801 	add.w	r8, r4, #1
 8011376:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801137a:	9302      	str	r3, [sp, #8]
 801137c:	9b02      	ldr	r3, [sp, #8]
 801137e:	4543      	cmp	r3, r8
 8011380:	da04      	bge.n	801138c <__kernel_rem_pio2+0x3ac>
 8011382:	461c      	mov	r4, r3
 8011384:	e6a2      	b.n	80110cc <__kernel_rem_pio2+0xec>
 8011386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011388:	2301      	movs	r3, #1
 801138a:	e7e4      	b.n	8011356 <__kernel_rem_pio2+0x376>
 801138c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801138e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011392:	f7ef f86f 	bl	8000474 <__aeabi_i2d>
 8011396:	e8e5 0102 	strd	r0, r1, [r5], #8
 801139a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801139c:	46ab      	mov	fp, r5
 801139e:	461c      	mov	r4, r3
 80113a0:	f04f 0900 	mov.w	r9, #0
 80113a4:	2600      	movs	r6, #0
 80113a6:	2700      	movs	r7, #0
 80113a8:	9b05      	ldr	r3, [sp, #20]
 80113aa:	4599      	cmp	r9, r3
 80113ac:	dd06      	ble.n	80113bc <__kernel_rem_pio2+0x3dc>
 80113ae:	9b08      	ldr	r3, [sp, #32]
 80113b0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80113b4:	f108 0801 	add.w	r8, r8, #1
 80113b8:	9308      	str	r3, [sp, #32]
 80113ba:	e7df      	b.n	801137c <__kernel_rem_pio2+0x39c>
 80113bc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80113c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80113c4:	f7ef f8c0 	bl	8000548 <__aeabi_dmul>
 80113c8:	4602      	mov	r2, r0
 80113ca:	460b      	mov	r3, r1
 80113cc:	4630      	mov	r0, r6
 80113ce:	4639      	mov	r1, r7
 80113d0:	f7ee ff04 	bl	80001dc <__adddf3>
 80113d4:	f109 0901 	add.w	r9, r9, #1
 80113d8:	4606      	mov	r6, r0
 80113da:	460f      	mov	r7, r1
 80113dc:	e7e4      	b.n	80113a8 <__kernel_rem_pio2+0x3c8>
 80113de:	3d01      	subs	r5, #1
 80113e0:	e747      	b.n	8011272 <__kernel_rem_pio2+0x292>
 80113e2:	ec47 6b10 	vmov	d0, r6, r7
 80113e6:	f1ca 0000 	rsb	r0, sl, #0
 80113ea:	f000 f949 	bl	8011680 <scalbn>
 80113ee:	ec57 6b10 	vmov	r6, r7, d0
 80113f2:	4ba0      	ldr	r3, [pc, #640]	; (8011674 <__kernel_rem_pio2+0x694>)
 80113f4:	ee10 0a10 	vmov	r0, s0
 80113f8:	2200      	movs	r2, #0
 80113fa:	4639      	mov	r1, r7
 80113fc:	f7ef fb2a 	bl	8000a54 <__aeabi_dcmpge>
 8011400:	b1f8      	cbz	r0, 8011442 <__kernel_rem_pio2+0x462>
 8011402:	4b9d      	ldr	r3, [pc, #628]	; (8011678 <__kernel_rem_pio2+0x698>)
 8011404:	2200      	movs	r2, #0
 8011406:	4630      	mov	r0, r6
 8011408:	4639      	mov	r1, r7
 801140a:	f7ef f89d 	bl	8000548 <__aeabi_dmul>
 801140e:	f7ef fb35 	bl	8000a7c <__aeabi_d2iz>
 8011412:	4680      	mov	r8, r0
 8011414:	f7ef f82e 	bl	8000474 <__aeabi_i2d>
 8011418:	4b96      	ldr	r3, [pc, #600]	; (8011674 <__kernel_rem_pio2+0x694>)
 801141a:	2200      	movs	r2, #0
 801141c:	f7ef f894 	bl	8000548 <__aeabi_dmul>
 8011420:	460b      	mov	r3, r1
 8011422:	4602      	mov	r2, r0
 8011424:	4639      	mov	r1, r7
 8011426:	4630      	mov	r0, r6
 8011428:	f7ee fed6 	bl	80001d8 <__aeabi_dsub>
 801142c:	f7ef fb26 	bl	8000a7c <__aeabi_d2iz>
 8011430:	1c65      	adds	r5, r4, #1
 8011432:	ab0c      	add	r3, sp, #48	; 0x30
 8011434:	f10a 0a18 	add.w	sl, sl, #24
 8011438:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801143c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011440:	e71f      	b.n	8011282 <__kernel_rem_pio2+0x2a2>
 8011442:	4630      	mov	r0, r6
 8011444:	4639      	mov	r1, r7
 8011446:	f7ef fb19 	bl	8000a7c <__aeabi_d2iz>
 801144a:	ab0c      	add	r3, sp, #48	; 0x30
 801144c:	4625      	mov	r5, r4
 801144e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011452:	e716      	b.n	8011282 <__kernel_rem_pio2+0x2a2>
 8011454:	ab0c      	add	r3, sp, #48	; 0x30
 8011456:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801145a:	f7ef f80b 	bl	8000474 <__aeabi_i2d>
 801145e:	4632      	mov	r2, r6
 8011460:	463b      	mov	r3, r7
 8011462:	f7ef f871 	bl	8000548 <__aeabi_dmul>
 8011466:	4642      	mov	r2, r8
 8011468:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801146c:	464b      	mov	r3, r9
 801146e:	4630      	mov	r0, r6
 8011470:	4639      	mov	r1, r7
 8011472:	f7ef f869 	bl	8000548 <__aeabi_dmul>
 8011476:	3c01      	subs	r4, #1
 8011478:	4606      	mov	r6, r0
 801147a:	460f      	mov	r7, r1
 801147c:	e713      	b.n	80112a6 <__kernel_rem_pio2+0x2c6>
 801147e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011482:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011486:	f7ef f85f 	bl	8000548 <__aeabi_dmul>
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	4648      	mov	r0, r9
 8011490:	4651      	mov	r1, sl
 8011492:	f7ee fea3 	bl	80001dc <__adddf3>
 8011496:	3701      	adds	r7, #1
 8011498:	4681      	mov	r9, r0
 801149a:	468a      	mov	sl, r1
 801149c:	9b00      	ldr	r3, [sp, #0]
 801149e:	429f      	cmp	r7, r3
 80114a0:	dc02      	bgt.n	80114a8 <__kernel_rem_pio2+0x4c8>
 80114a2:	9b06      	ldr	r3, [sp, #24]
 80114a4:	429f      	cmp	r7, r3
 80114a6:	ddea      	ble.n	801147e <__kernel_rem_pio2+0x49e>
 80114a8:	9a06      	ldr	r2, [sp, #24]
 80114aa:	ab48      	add	r3, sp, #288	; 0x120
 80114ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80114b0:	e9c6 9a00 	strd	r9, sl, [r6]
 80114b4:	3c01      	subs	r4, #1
 80114b6:	e6fa      	b.n	80112ae <__kernel_rem_pio2+0x2ce>
 80114b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	dc0b      	bgt.n	80114d6 <__kernel_rem_pio2+0x4f6>
 80114be:	2b00      	cmp	r3, #0
 80114c0:	dc39      	bgt.n	8011536 <__kernel_rem_pio2+0x556>
 80114c2:	d05d      	beq.n	8011580 <__kernel_rem_pio2+0x5a0>
 80114c4:	9b02      	ldr	r3, [sp, #8]
 80114c6:	f003 0007 	and.w	r0, r3, #7
 80114ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80114ce:	ecbd 8b02 	vpop	{d8}
 80114d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80114d8:	2b03      	cmp	r3, #3
 80114da:	d1f3      	bne.n	80114c4 <__kernel_rem_pio2+0x4e4>
 80114dc:	9b05      	ldr	r3, [sp, #20]
 80114de:	9500      	str	r5, [sp, #0]
 80114e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80114e4:	eb0d 0403 	add.w	r4, sp, r3
 80114e8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80114ec:	46a2      	mov	sl, r4
 80114ee:	9b00      	ldr	r3, [sp, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f1aa 0a08 	sub.w	sl, sl, #8
 80114f6:	dc69      	bgt.n	80115cc <__kernel_rem_pio2+0x5ec>
 80114f8:	46aa      	mov	sl, r5
 80114fa:	f1ba 0f01 	cmp.w	sl, #1
 80114fe:	f1a4 0408 	sub.w	r4, r4, #8
 8011502:	f300 8083 	bgt.w	801160c <__kernel_rem_pio2+0x62c>
 8011506:	9c05      	ldr	r4, [sp, #20]
 8011508:	ab48      	add	r3, sp, #288	; 0x120
 801150a:	441c      	add	r4, r3
 801150c:	2000      	movs	r0, #0
 801150e:	2100      	movs	r1, #0
 8011510:	2d01      	cmp	r5, #1
 8011512:	f300 809a 	bgt.w	801164a <__kernel_rem_pio2+0x66a>
 8011516:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801151a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801151e:	f1bb 0f00 	cmp.w	fp, #0
 8011522:	f040 8098 	bne.w	8011656 <__kernel_rem_pio2+0x676>
 8011526:	9b04      	ldr	r3, [sp, #16]
 8011528:	e9c3 7800 	strd	r7, r8, [r3]
 801152c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011530:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011534:	e7c6      	b.n	80114c4 <__kernel_rem_pio2+0x4e4>
 8011536:	9e05      	ldr	r6, [sp, #20]
 8011538:	ab48      	add	r3, sp, #288	; 0x120
 801153a:	441e      	add	r6, r3
 801153c:	462c      	mov	r4, r5
 801153e:	2000      	movs	r0, #0
 8011540:	2100      	movs	r1, #0
 8011542:	2c00      	cmp	r4, #0
 8011544:	da33      	bge.n	80115ae <__kernel_rem_pio2+0x5ce>
 8011546:	f1bb 0f00 	cmp.w	fp, #0
 801154a:	d036      	beq.n	80115ba <__kernel_rem_pio2+0x5da>
 801154c:	4602      	mov	r2, r0
 801154e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011552:	9c04      	ldr	r4, [sp, #16]
 8011554:	e9c4 2300 	strd	r2, r3, [r4]
 8011558:	4602      	mov	r2, r0
 801155a:	460b      	mov	r3, r1
 801155c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011560:	f7ee fe3a 	bl	80001d8 <__aeabi_dsub>
 8011564:	ae4a      	add	r6, sp, #296	; 0x128
 8011566:	2401      	movs	r4, #1
 8011568:	42a5      	cmp	r5, r4
 801156a:	da29      	bge.n	80115c0 <__kernel_rem_pio2+0x5e0>
 801156c:	f1bb 0f00 	cmp.w	fp, #0
 8011570:	d002      	beq.n	8011578 <__kernel_rem_pio2+0x598>
 8011572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011576:	4619      	mov	r1, r3
 8011578:	9b04      	ldr	r3, [sp, #16]
 801157a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801157e:	e7a1      	b.n	80114c4 <__kernel_rem_pio2+0x4e4>
 8011580:	9c05      	ldr	r4, [sp, #20]
 8011582:	ab48      	add	r3, sp, #288	; 0x120
 8011584:	441c      	add	r4, r3
 8011586:	2000      	movs	r0, #0
 8011588:	2100      	movs	r1, #0
 801158a:	2d00      	cmp	r5, #0
 801158c:	da09      	bge.n	80115a2 <__kernel_rem_pio2+0x5c2>
 801158e:	f1bb 0f00 	cmp.w	fp, #0
 8011592:	d002      	beq.n	801159a <__kernel_rem_pio2+0x5ba>
 8011594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011598:	4619      	mov	r1, r3
 801159a:	9b04      	ldr	r3, [sp, #16]
 801159c:	e9c3 0100 	strd	r0, r1, [r3]
 80115a0:	e790      	b.n	80114c4 <__kernel_rem_pio2+0x4e4>
 80115a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80115a6:	f7ee fe19 	bl	80001dc <__adddf3>
 80115aa:	3d01      	subs	r5, #1
 80115ac:	e7ed      	b.n	801158a <__kernel_rem_pio2+0x5aa>
 80115ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80115b2:	f7ee fe13 	bl	80001dc <__adddf3>
 80115b6:	3c01      	subs	r4, #1
 80115b8:	e7c3      	b.n	8011542 <__kernel_rem_pio2+0x562>
 80115ba:	4602      	mov	r2, r0
 80115bc:	460b      	mov	r3, r1
 80115be:	e7c8      	b.n	8011552 <__kernel_rem_pio2+0x572>
 80115c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80115c4:	f7ee fe0a 	bl	80001dc <__adddf3>
 80115c8:	3401      	adds	r4, #1
 80115ca:	e7cd      	b.n	8011568 <__kernel_rem_pio2+0x588>
 80115cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80115d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80115d4:	9b00      	ldr	r3, [sp, #0]
 80115d6:	3b01      	subs	r3, #1
 80115d8:	9300      	str	r3, [sp, #0]
 80115da:	4632      	mov	r2, r6
 80115dc:	463b      	mov	r3, r7
 80115de:	4640      	mov	r0, r8
 80115e0:	4649      	mov	r1, r9
 80115e2:	f7ee fdfb 	bl	80001dc <__adddf3>
 80115e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	4640      	mov	r0, r8
 80115f0:	4649      	mov	r1, r9
 80115f2:	f7ee fdf1 	bl	80001d8 <__aeabi_dsub>
 80115f6:	4632      	mov	r2, r6
 80115f8:	463b      	mov	r3, r7
 80115fa:	f7ee fdef 	bl	80001dc <__adddf3>
 80115fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011602:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011606:	ed8a 7b00 	vstr	d7, [sl]
 801160a:	e770      	b.n	80114ee <__kernel_rem_pio2+0x50e>
 801160c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011610:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011614:	4640      	mov	r0, r8
 8011616:	4632      	mov	r2, r6
 8011618:	463b      	mov	r3, r7
 801161a:	4649      	mov	r1, r9
 801161c:	f7ee fdde 	bl	80001dc <__adddf3>
 8011620:	e9cd 0100 	strd	r0, r1, [sp]
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	4640      	mov	r0, r8
 801162a:	4649      	mov	r1, r9
 801162c:	f7ee fdd4 	bl	80001d8 <__aeabi_dsub>
 8011630:	4632      	mov	r2, r6
 8011632:	463b      	mov	r3, r7
 8011634:	f7ee fdd2 	bl	80001dc <__adddf3>
 8011638:	ed9d 7b00 	vldr	d7, [sp]
 801163c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011640:	ed84 7b00 	vstr	d7, [r4]
 8011644:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011648:	e757      	b.n	80114fa <__kernel_rem_pio2+0x51a>
 801164a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801164e:	f7ee fdc5 	bl	80001dc <__adddf3>
 8011652:	3d01      	subs	r5, #1
 8011654:	e75c      	b.n	8011510 <__kernel_rem_pio2+0x530>
 8011656:	9b04      	ldr	r3, [sp, #16]
 8011658:	9a04      	ldr	r2, [sp, #16]
 801165a:	601f      	str	r7, [r3, #0]
 801165c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011660:	605c      	str	r4, [r3, #4]
 8011662:	609d      	str	r5, [r3, #8]
 8011664:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011668:	60d3      	str	r3, [r2, #12]
 801166a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801166e:	6110      	str	r0, [r2, #16]
 8011670:	6153      	str	r3, [r2, #20]
 8011672:	e727      	b.n	80114c4 <__kernel_rem_pio2+0x4e4>
 8011674:	41700000 	.word	0x41700000
 8011678:	3e700000 	.word	0x3e700000
 801167c:	00000000 	.word	0x00000000

08011680 <scalbn>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	ec55 4b10 	vmov	r4, r5, d0
 8011686:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801168a:	4606      	mov	r6, r0
 801168c:	462b      	mov	r3, r5
 801168e:	b999      	cbnz	r1, 80116b8 <scalbn+0x38>
 8011690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011694:	4323      	orrs	r3, r4
 8011696:	d03f      	beq.n	8011718 <scalbn+0x98>
 8011698:	4b35      	ldr	r3, [pc, #212]	; (8011770 <scalbn+0xf0>)
 801169a:	4629      	mov	r1, r5
 801169c:	ee10 0a10 	vmov	r0, s0
 80116a0:	2200      	movs	r2, #0
 80116a2:	f7ee ff51 	bl	8000548 <__aeabi_dmul>
 80116a6:	4b33      	ldr	r3, [pc, #204]	; (8011774 <scalbn+0xf4>)
 80116a8:	429e      	cmp	r6, r3
 80116aa:	4604      	mov	r4, r0
 80116ac:	460d      	mov	r5, r1
 80116ae:	da10      	bge.n	80116d2 <scalbn+0x52>
 80116b0:	a327      	add	r3, pc, #156	; (adr r3, 8011750 <scalbn+0xd0>)
 80116b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b6:	e01f      	b.n	80116f8 <scalbn+0x78>
 80116b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80116bc:	4291      	cmp	r1, r2
 80116be:	d10c      	bne.n	80116da <scalbn+0x5a>
 80116c0:	ee10 2a10 	vmov	r2, s0
 80116c4:	4620      	mov	r0, r4
 80116c6:	4629      	mov	r1, r5
 80116c8:	f7ee fd88 	bl	80001dc <__adddf3>
 80116cc:	4604      	mov	r4, r0
 80116ce:	460d      	mov	r5, r1
 80116d0:	e022      	b.n	8011718 <scalbn+0x98>
 80116d2:	460b      	mov	r3, r1
 80116d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80116d8:	3936      	subs	r1, #54	; 0x36
 80116da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80116de:	4296      	cmp	r6, r2
 80116e0:	dd0d      	ble.n	80116fe <scalbn+0x7e>
 80116e2:	2d00      	cmp	r5, #0
 80116e4:	a11c      	add	r1, pc, #112	; (adr r1, 8011758 <scalbn+0xd8>)
 80116e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116ea:	da02      	bge.n	80116f2 <scalbn+0x72>
 80116ec:	a11c      	add	r1, pc, #112	; (adr r1, 8011760 <scalbn+0xe0>)
 80116ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116f2:	a319      	add	r3, pc, #100	; (adr r3, 8011758 <scalbn+0xd8>)
 80116f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f8:	f7ee ff26 	bl	8000548 <__aeabi_dmul>
 80116fc:	e7e6      	b.n	80116cc <scalbn+0x4c>
 80116fe:	1872      	adds	r2, r6, r1
 8011700:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011704:	428a      	cmp	r2, r1
 8011706:	dcec      	bgt.n	80116e2 <scalbn+0x62>
 8011708:	2a00      	cmp	r2, #0
 801170a:	dd08      	ble.n	801171e <scalbn+0x9e>
 801170c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011710:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011714:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011718:	ec45 4b10 	vmov	d0, r4, r5
 801171c:	bd70      	pop	{r4, r5, r6, pc}
 801171e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011722:	da08      	bge.n	8011736 <scalbn+0xb6>
 8011724:	2d00      	cmp	r5, #0
 8011726:	a10a      	add	r1, pc, #40	; (adr r1, 8011750 <scalbn+0xd0>)
 8011728:	e9d1 0100 	ldrd	r0, r1, [r1]
 801172c:	dac0      	bge.n	80116b0 <scalbn+0x30>
 801172e:	a10e      	add	r1, pc, #56	; (adr r1, 8011768 <scalbn+0xe8>)
 8011730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011734:	e7bc      	b.n	80116b0 <scalbn+0x30>
 8011736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801173a:	3236      	adds	r2, #54	; 0x36
 801173c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011740:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011744:	4620      	mov	r0, r4
 8011746:	4b0c      	ldr	r3, [pc, #48]	; (8011778 <scalbn+0xf8>)
 8011748:	2200      	movs	r2, #0
 801174a:	e7d5      	b.n	80116f8 <scalbn+0x78>
 801174c:	f3af 8000 	nop.w
 8011750:	c2f8f359 	.word	0xc2f8f359
 8011754:	01a56e1f 	.word	0x01a56e1f
 8011758:	8800759c 	.word	0x8800759c
 801175c:	7e37e43c 	.word	0x7e37e43c
 8011760:	8800759c 	.word	0x8800759c
 8011764:	fe37e43c 	.word	0xfe37e43c
 8011768:	c2f8f359 	.word	0xc2f8f359
 801176c:	81a56e1f 	.word	0x81a56e1f
 8011770:	43500000 	.word	0x43500000
 8011774:	ffff3cb0 	.word	0xffff3cb0
 8011778:	3c900000 	.word	0x3c900000
 801177c:	00000000 	.word	0x00000000

08011780 <floor>:
 8011780:	ec51 0b10 	vmov	r0, r1, d0
 8011784:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801178c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011790:	2e13      	cmp	r6, #19
 8011792:	ee10 5a10 	vmov	r5, s0
 8011796:	ee10 8a10 	vmov	r8, s0
 801179a:	460c      	mov	r4, r1
 801179c:	dc31      	bgt.n	8011802 <floor+0x82>
 801179e:	2e00      	cmp	r6, #0
 80117a0:	da14      	bge.n	80117cc <floor+0x4c>
 80117a2:	a333      	add	r3, pc, #204	; (adr r3, 8011870 <floor+0xf0>)
 80117a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a8:	f7ee fd18 	bl	80001dc <__adddf3>
 80117ac:	2200      	movs	r2, #0
 80117ae:	2300      	movs	r3, #0
 80117b0:	f7ef f95a 	bl	8000a68 <__aeabi_dcmpgt>
 80117b4:	b138      	cbz	r0, 80117c6 <floor+0x46>
 80117b6:	2c00      	cmp	r4, #0
 80117b8:	da53      	bge.n	8011862 <floor+0xe2>
 80117ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80117be:	4325      	orrs	r5, r4
 80117c0:	d052      	beq.n	8011868 <floor+0xe8>
 80117c2:	4c2d      	ldr	r4, [pc, #180]	; (8011878 <floor+0xf8>)
 80117c4:	2500      	movs	r5, #0
 80117c6:	4621      	mov	r1, r4
 80117c8:	4628      	mov	r0, r5
 80117ca:	e024      	b.n	8011816 <floor+0x96>
 80117cc:	4f2b      	ldr	r7, [pc, #172]	; (801187c <floor+0xfc>)
 80117ce:	4137      	asrs	r7, r6
 80117d0:	ea01 0307 	and.w	r3, r1, r7
 80117d4:	4303      	orrs	r3, r0
 80117d6:	d01e      	beq.n	8011816 <floor+0x96>
 80117d8:	a325      	add	r3, pc, #148	; (adr r3, 8011870 <floor+0xf0>)
 80117da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117de:	f7ee fcfd 	bl	80001dc <__adddf3>
 80117e2:	2200      	movs	r2, #0
 80117e4:	2300      	movs	r3, #0
 80117e6:	f7ef f93f 	bl	8000a68 <__aeabi_dcmpgt>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d0eb      	beq.n	80117c6 <floor+0x46>
 80117ee:	2c00      	cmp	r4, #0
 80117f0:	bfbe      	ittt	lt
 80117f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80117f6:	4133      	asrlt	r3, r6
 80117f8:	18e4      	addlt	r4, r4, r3
 80117fa:	ea24 0407 	bic.w	r4, r4, r7
 80117fe:	2500      	movs	r5, #0
 8011800:	e7e1      	b.n	80117c6 <floor+0x46>
 8011802:	2e33      	cmp	r6, #51	; 0x33
 8011804:	dd0b      	ble.n	801181e <floor+0x9e>
 8011806:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801180a:	d104      	bne.n	8011816 <floor+0x96>
 801180c:	ee10 2a10 	vmov	r2, s0
 8011810:	460b      	mov	r3, r1
 8011812:	f7ee fce3 	bl	80001dc <__adddf3>
 8011816:	ec41 0b10 	vmov	d0, r0, r1
 801181a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011822:	f04f 37ff 	mov.w	r7, #4294967295
 8011826:	40df      	lsrs	r7, r3
 8011828:	4238      	tst	r0, r7
 801182a:	d0f4      	beq.n	8011816 <floor+0x96>
 801182c:	a310      	add	r3, pc, #64	; (adr r3, 8011870 <floor+0xf0>)
 801182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011832:	f7ee fcd3 	bl	80001dc <__adddf3>
 8011836:	2200      	movs	r2, #0
 8011838:	2300      	movs	r3, #0
 801183a:	f7ef f915 	bl	8000a68 <__aeabi_dcmpgt>
 801183e:	2800      	cmp	r0, #0
 8011840:	d0c1      	beq.n	80117c6 <floor+0x46>
 8011842:	2c00      	cmp	r4, #0
 8011844:	da0a      	bge.n	801185c <floor+0xdc>
 8011846:	2e14      	cmp	r6, #20
 8011848:	d101      	bne.n	801184e <floor+0xce>
 801184a:	3401      	adds	r4, #1
 801184c:	e006      	b.n	801185c <floor+0xdc>
 801184e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011852:	2301      	movs	r3, #1
 8011854:	40b3      	lsls	r3, r6
 8011856:	441d      	add	r5, r3
 8011858:	45a8      	cmp	r8, r5
 801185a:	d8f6      	bhi.n	801184a <floor+0xca>
 801185c:	ea25 0507 	bic.w	r5, r5, r7
 8011860:	e7b1      	b.n	80117c6 <floor+0x46>
 8011862:	2500      	movs	r5, #0
 8011864:	462c      	mov	r4, r5
 8011866:	e7ae      	b.n	80117c6 <floor+0x46>
 8011868:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801186c:	e7ab      	b.n	80117c6 <floor+0x46>
 801186e:	bf00      	nop
 8011870:	8800759c 	.word	0x8800759c
 8011874:	7e37e43c 	.word	0x7e37e43c
 8011878:	bff00000 	.word	0xbff00000
 801187c:	000fffff 	.word	0x000fffff

08011880 <_init>:
 8011880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011882:	bf00      	nop
 8011884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011886:	bc08      	pop	{r3}
 8011888:	469e      	mov	lr, r3
 801188a:	4770      	bx	lr

0801188c <_fini>:
 801188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188e:	bf00      	nop
 8011890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011892:	bc08      	pop	{r3}
 8011894:	469e      	mov	lr, r3
 8011896:	4770      	bx	lr
