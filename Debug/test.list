
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08010838  08010838  00020838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a10  08010a10  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08010a10  08010a10  00020a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a18  08010a18  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a18  08010a18  00020a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a1c  08010a1c  00020a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08010a20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030178  2**0
                  CONTENTS
 10 .bss          00002f70  20000178  20000178  00030178  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200030e8  200030e8  00030178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024ee5  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000059e6  00000000  00000000  000550d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bf8  00000000  00000000  0005aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001590  00000000  00000000  0005c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c1d  00000000  00000000  0005dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026ba8  00000000  00000000  0008085d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4596  00000000  00000000  000a7405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007ae4  00000000  00000000  0016b99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00173480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801081c 	.word	0x0801081c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	0801081c 	.word	0x0801081c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8a:	f000 b9f1 	b.w	8000f70 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f883 	bl	8000ca8 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f876 	bl	8000ca8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f865 	bl	8000ca8 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f857 	bl	8000ca8 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a6 	b.w	8000f70 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff fef1 	bl	8000a2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_dmul>
 8000c7a:	f000 f97b 	bl	8000f74 <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fbe8 	bl	8000454 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fc5e 	bl	8000548 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faa0 	bl	80001d8 <__aeabi_dsub>
 8000c98:	f000 f96c 	bl	8000f74 <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fe8 <fromTickToMs+0x34>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe8 <fromTickToMs+0x34>
 8000fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	447a0000 	.word	0x447a0000

08000fec <cmp>:
uint32_t MS5837_conv_start_tick = CONVERTION_TIMEOUT;

void calculate();
void init_new_convertion();

int cmp(const void *a, const void *b) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MS5837_02BA_init>:

bool MS5837_02BA_begin(I2C_HandleTypeDef * hi2c){
	return(MS5837_02BA_init(hi2c));
}

bool MS5837_02BA_init(I2C_HandleTypeDef * hi2c){
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
	MS5837_hi2c = hi2c;
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	HAL_I2C_Init(hi2c);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f005 fe02 	bl	8006c24 <HAL_I2C_Init>
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, HAL_MAX_DELAY) != HAL_OK){
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <MS5837_02BA_init+0xa4>)
 800102e:	21ec      	movs	r1, #236	; 0xec
 8001030:	f005 fe88 	bl	8006d44 <HAL_I2C_Master_Transmit>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MS5837_02BA_init+0x32>
		return false;
 800103a:	2300      	movs	r3, #0
 800103c:	e032      	b.n	80010a4 <MS5837_02BA_init+0x98>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e029      	b.n	800109c <MS5837_02BA_init+0x90>
		uint8_t prom_buff[2];
		prom_addr += 2;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3302      	adds	r3, #2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 020e 	add.w	r2, r7, #14
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21ec      	movs	r1, #236	; 0xec
 8001062:	f005 fe6f 	bl	8006d44 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	21ec      	movs	r1, #236	; 0xec
 8001078:	f005 ff58 	bl	8006f2c <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	7b7a      	ldrb	r2, [r7, #13]
 8001082:	4313      	orrs	r3, r2
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	17d9      	asrs	r1, r3, #31
 8001088:	461c      	mov	r4, r3
 800108a:	460d      	mov	r5, r1
 800108c:	4909      	ldr	r1, [pc, #36]	; (80010b4 <MS5837_02BA_init+0xa8>)
 800108e:	00d3      	lsls	r3, r2, #3
 8001090:	440b      	add	r3, r1
 8001092:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d9d2      	bls.n	8001048 <MS5837_02BA_init+0x3c>
	}
	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bdb0      	pop	{r4, r5, r7, pc}
 80010ac:	20000194 	.word	0x20000194
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200001a0 	.word	0x200001a0

080010b8 <MS5837_02BA_get_actual_pressure>:

int32_t MS5837_02BA_get_actual_pressure(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
 80010be:	f004 fee3 	bl	8005e88 <HAL_GetTick>
 80010c2:	6078      	str	r0, [r7, #4]
	if(MS5837_I2C_NONE == MS5837_I2C_State){
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <MS5837_02BA_get_actual_pressure+0x18>
		init_new_convertion();
 80010cc:	f000 f83e 	bl	800114c <init_new_convertion>
	}
	if(MS5837_I2C_D1_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d10f      	bne.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b13      	cmp	r3, #19
 80010e2:	d909      	bls.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
		MS5837_I2C_State = MS5837_I2C_D1_TX_ADC_COM;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010e6:	2203      	movs	r2, #3
 80010e8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	f006 f810 	bl	8007118 <HAL_I2C_Master_Transmit_IT>
	}
	if(MS5837_I2C_D2_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d10f      	bne.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b13      	cmp	r3, #19
 800110a:	d909      	bls.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
		MS5837_I2C_State = MS5837_I2C_D2_TX_ADC_COM;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 800110e:	2207      	movs	r2, #7
 8001110:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 800111a:	21ec      	movs	r1, #236	; 0xec
 800111c:	f005 fffc 	bl	8007118 <HAL_I2C_Master_Transmit_IT>
	}
//	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(MS5837_hi2c);
	return presure-initial_pressure;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MS5837_02BA_get_actual_pressure+0x8c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MS5837_02BA_get_actual_pressure+0x90>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001f3 	.word	0x200001f3
 8001138:	20000004 	.word	0x20000004
 800113c:	20000194 	.word	0x20000194
 8001140:	20000198 	.word	0x20000198
 8001144:	200001e8 	.word	0x200001e8
 8001148:	200001ec 	.word	0x200001ec

0800114c <init_new_convertion>:

void init_new_convertion(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	MS5837_I2C_State = MS5837_I2C_D1_TX_CONV_COM;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <init_new_convertion+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH);
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <init_new_convertion+0x20>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <init_new_convertion+0x24>)
 800115e:	21ec      	movs	r1, #236	; 0xec
 8001160:	f005 ffda 	bl	8007118 <HAL_I2C_Master_Transmit_IT>
//	MS5837_conv_start_tick = HAL_GetTick();
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f3 	.word	0x200001f3
 800116c:	20000194 	.word	0x20000194
 8001170:	20000001 	.word	0x20000001

08001174 <MS5837_I2C_MasterRxCplt>:

void MS5837_I2C_MasterRxCplt (I2C_HandleTypeDef * hi2c){
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800117c:	491f      	ldr	r1, [pc, #124]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 800117e:	6809      	ldr	r1, [r1, #0]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	4288      	cmp	r0, r1
 8001184:	d135      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
		if(MS5837_I2C_D1_RX_ADC == MS5837_I2C_State){
 8001186:	491e      	ldr	r1, [pc, #120]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001188:	7809      	ldrb	r1, [r1, #0]
 800118a:	2904      	cmp	r1, #4
 800118c:	d119      	bne.n	80011c2 <MS5837_I2C_MasterRxCplt+0x4e>
			D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800118e:	491d      	ldr	r1, [pc, #116]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001190:	7809      	ldrb	r1, [r1, #0]
 8001192:	0408      	lsls	r0, r1, #16
 8001194:	491b      	ldr	r1, [pc, #108]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001196:	7849      	ldrb	r1, [r1, #1]
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	4301      	orrs	r1, r0
 800119c:	4819      	ldr	r0, [pc, #100]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 800119e:	7880      	ldrb	r0, [r0, #2]
 80011a0:	4301      	orrs	r1, r0
 80011a2:	17c8      	asrs	r0, r1, #31
 80011a4:	460a      	mov	r2, r1
 80011a6:	4603      	mov	r3, r0
 80011a8:	4917      	ldr	r1, [pc, #92]	; (8001208 <MS5837_I2C_MasterRxCplt+0x94>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
			MS5837_I2C_State = MS5837_I2C_D2_TX_CONV_COM;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH);
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <MS5837_I2C_MasterRxCplt+0x98>)
 80011bc:	21ec      	movs	r1, #236	; 0xec
 80011be:	f005 ffab 	bl	8007118 <HAL_I2C_Master_Transmit_IT>
		}
		if(MS5837_I2C_D2_RX_ADC == MS5837_I2C_State){
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d113      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
			D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	041a      	lsls	r2, r3, #16
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	4313      	orrs	r3, r2
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011da:	7892      	ldrb	r2, [r2, #2]
 80011dc:	4313      	orrs	r3, r2
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	461c      	mov	r4, r3
 80011e2:	4615      	mov	r5, r2
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MS5837_I2C_MasterRxCplt+0x9c>)
 80011e6:	e9c3 4500 	strd	r4, r5, [r3]
			init_new_convertion();
 80011ea:	f7ff ffaf 	bl	800114c <init_new_convertion>
			calculate();
 80011ee:	f000 f90b 	bl	8001408 <calculate>
		}
//		MS5837_conv_start_tick = HAL_GetTick();
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000194 	.word	0x20000194
 8001200:	200001f3 	.word	0x200001f3
 8001204:	200001f0 	.word	0x200001f0
 8001208:	200001d8 	.word	0x200001d8
 800120c:	20000002 	.word	0x20000002
 8001210:	200001e0 	.word	0x200001e0

08001214 <MS5837_I2C_MasterTxCplt>:

void MS5837_I2C_MasterTxCplt (I2C_HandleTypeDef * hi2c){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d133      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
		if(MS5837_I2C_D1_TX_CONV_COM == MS5837_I2C_State){
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <MS5837_I2C_MasterTxCplt+0x2a>
			MS5837_I2C_State = MS5837_I2C_D1_CONVERTION;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001230:	2202      	movs	r2, #2
 8001232:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001234:	f004 fe28 	bl	8005e88 <HAL_GetTick>
 8001238:	4603      	mov	r3, r0
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 800123c:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D1_TX_ADC_COM == MS5837_I2C_State){
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d109      	bne.n	800125a <MS5837_I2C_MasterTxCplt+0x46>
			MS5837_I2C_State = MS5837_I2C_D1_RX_ADC;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001248:	2204      	movs	r2, #4
 800124a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2303      	movs	r3, #3
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001254:	21ec      	movs	r1, #236	; 0xec
 8001256:	f005 ffcf 	bl	80071f8 <HAL_I2C_Master_Receive_IT>
		}
		if(MS5837_I2C_D2_TX_CONV_COM == MS5837_I2C_State){
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d107      	bne.n	8001272 <MS5837_I2C_MasterTxCplt+0x5e>
			MS5837_I2C_State = MS5837_I2C_D2_CONVERTION;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001264:	2206      	movs	r2, #6
 8001266:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001268:	f004 fe0e 	bl	8005e88 <HAL_GetTick>
 800126c:	4603      	mov	r3, r0
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 8001270:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D2_TX_ADC_COM == MS5837_I2C_State){
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d109      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
			MS5837_I2C_State = MS5837_I2C_D2_RX_ADC;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800127c:	2208      	movs	r2, #8
 800127e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	2303      	movs	r3, #3
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001288:	21ec      	movs	r1, #236	; 0xec
 800128a:	f005 ffb5 	bl	80071f8 <HAL_I2C_Master_Receive_IT>
		}
	}
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000194 	.word	0x20000194
 800129c:	200001f3 	.word	0x200001f3
 80012a0:	20000004 	.word	0x20000004
 80012a4:	200001f0 	.word	0x200001f0

080012a8 <MS5837_02BA_check_pressure>:

void MS5837_I2C_MasterError (I2C_HandleTypeDef * hi2c){
	__NOP();
}

int32_t MS5837_02BA_check_pressure(){
 80012a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af02      	add	r7, sp, #8
	//initializing D1 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	4a34      	ldr	r2, [pc, #208]	; (8001390 <MS5837_02BA_check_pressure+0xe8>)
 80012be:	21ec      	movs	r1, #236	; 0xec
 80012c0:	f005 fd40 	bl	8006d44 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f004 fdeb 	bl	8005ea0 <HAL_Delay>
	//reading D1 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 80012d8:	21ec      	movs	r1, #236	; 0xec
 80012da:	f005 fd33 	bl	8006d44 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2303      	movs	r3, #3
 80012ea:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012ec:	21ec      	movs	r1, #236	; 0xec
 80012ee:	f005 fe1d 	bl	8006f2c <HAL_I2C_Master_Receive>
	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001302:	7892      	ldrb	r2, [r2, #2]
 8001304:	4313      	orrs	r3, r2
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	4698      	mov	r8, r3
 800130a:	4691      	mov	r9, r2
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MS5837_02BA_check_pressure+0xf4>)
 800130e:	e9c3 8900 	strd	r8, r9, [r3]
	//initializing D2 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <MS5837_02BA_check_pressure+0xf8>)
 8001320:	21ec      	movs	r1, #236	; 0xec
 8001322:	f005 fd0f 	bl	8006d44 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001326:	2014      	movs	r0, #20
 8001328:	f004 fdba 	bl	8005ea0 <HAL_Delay>
	//reading D2 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 800133a:	21ec      	movs	r1, #236	; 0xec
 800133c:	f005 fd02 	bl	8006d44 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2303      	movs	r3, #3
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800134e:	21ec      	movs	r1, #236	; 0xec
 8001350:	f005 fdec 	bl	8006f2c <HAL_I2C_Master_Receive>
	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4313      	orrs	r3, r2
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001364:	7892      	ldrb	r2, [r2, #2]
 8001366:	4313      	orrs	r3, r2
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	461c      	mov	r4, r3
 800136c:	4615      	mov	r5, r2
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MS5837_02BA_check_pressure+0xfc>)
 8001370:	e9c3 4500 	strd	r4, r5, [r3]
	calculate();
 8001374:	f000 f848 	bl	8001408 <calculate>
	return presure-initial_pressure;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MS5837_02BA_check_pressure+0x100>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MS5837_02BA_check_pressure+0x104>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800138a:	bf00      	nop
 800138c:	20000194 	.word	0x20000194
 8001390:	20000001 	.word	0x20000001
 8001394:	20000198 	.word	0x20000198
 8001398:	200001f0 	.word	0x200001f0
 800139c:	200001d8 	.word	0x200001d8
 80013a0:	20000002 	.word	0x20000002
 80013a4:	200001e0 	.word	0x200001e0
 80013a8:	200001e8 	.word	0x200001e8
 80013ac:	200001ec 	.word	0x200001ec

080013b0 <MS5837_02BA_reset_pressure>:

uint32_t MS5837_02BA_reset_pressure(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b09a      	sub	sp, #104	; 0x68
 80013b4:	af00      	add	r7, sp, #0
	int32_t current_pressure[25];

	for(int i =0;i<25;i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
 80013ba:	e00b      	b.n	80013d4 <MS5837_02BA_reset_pressure+0x24>
	{
		current_pressure[i]=MS5837_02BA_check_pressure();
 80013bc:	f7ff ff74 	bl	80012a8 <MS5837_02BA_check_pressure>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	3368      	adds	r3, #104	; 0x68
 80013c8:	443b      	add	r3, r7
 80013ca:	f843 2c68 	str.w	r2, [r3, #-104]
	for(int i =0;i<25;i++)
 80013ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d0:	3301      	adds	r3, #1
 80013d2:	667b      	str	r3, [r7, #100]	; 0x64
 80013d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d6:	2b18      	cmp	r3, #24
 80013d8:	ddf0      	ble.n	80013bc <MS5837_02BA_reset_pressure+0xc>
	}
	qsort(current_pressure, 25, sizeof(int32_t), cmp );
 80013da:	4638      	mov	r0, r7
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MS5837_02BA_reset_pressure+0x4c>)
 80013de:	2204      	movs	r2, #4
 80013e0:	2119      	movs	r1, #25
 80013e2:	f00e fdd3 	bl	800ff8c <qsort>
	init_new_convertion();
 80013e6:	f7ff feb1 	bl	800114c <init_new_convertion>
	return initial_pressure = current_pressure[24];
 80013ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3768      	adds	r7, #104	; 0x68
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08000fed 	.word	0x08000fed
 8001400:	200001ec 	.word	0x200001ec
 8001404:	00000000 	.word	0x00000000

08001408 <calculate>:

void calculate(){
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b0be      	sub	sp, #248	; 0xf8
 800140e:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t TEMP = 0;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	int64_t OFF = 0;
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	int64_t SENS = 0;
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	int64_t P = 0;
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	int64_t SENSi = 0;
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	int64_t OFFi = 0;
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int64_t Ti = 0;
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int64_t OFF2 = 0;
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t SENS2 = 0;
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	int64_t P2 = 0;
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP2 = 0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	//first order compensation
	dT = D2 -  C[4]*256;
 80014a0:	4be1      	ldr	r3, [pc, #900]	; (8001828 <calculate+0x420>)
 80014a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014a6:	4be1      	ldr	r3, [pc, #900]	; (800182c <calculate+0x424>)
 80014a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014ac:	f04f 0000 	mov.w	r0, #0
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	0219      	lsls	r1, r3, #8
 80014b6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80014ba:	0210      	lsls	r0, r2, #8
 80014bc:	1a23      	subs	r3, r4, r0
 80014be:	663b      	str	r3, [r7, #96]	; 0x60
 80014c0:	eb65 0301 	sbc.w	r3, r5, r1
 80014c4:	667b      	str	r3, [r7, #100]	; 0x64
 80014c6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80014ca:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	TEMP = 2000 + dT*C[4]/8388608;
 80014ce:	4bd7      	ldr	r3, [pc, #860]	; (800182c <calculate+0x424>)
 80014d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014d4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80014d8:	fb02 f501 	mul.w	r5, r2, r1
 80014dc:	fb00 f403 	mul.w	r4, r0, r3
 80014e0:	442c      	add	r4, r5
 80014e2:	fba0 8902 	umull	r8, r9, r0, r2
 80014e6:	eb04 0309 	add.w	r3, r4, r9
 80014ea:	4699      	mov	r9, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 80014f8:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 80014fc:	ea4f 53d9 	mov.w	r3, r9, lsr #23
 8001500:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 8001504:	65b9      	str	r1, [r7, #88]	; 0x58
 8001506:	f143 0300 	adc.w	r3, r3, #0
 800150a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800150c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001510:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8

//	OFF = C[1]*65536 + (C[3]*dT)/128;
//	SENS = C[0]*32768 + (C[2]*dT)/256;
//	P = ((D1 * SENS)/(2097152) - OFF)/8192;

	OFF = (C[1])*131072+(C[3]*dT)/64;
 8001514:	4bc5      	ldr	r3, [pc, #788]	; (800182c <calculate+0x424>)
 8001516:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800151a:	f04f 0800 	mov.w	r8, #0
 800151e:	f04f 0900 	mov.w	r9, #0
 8001522:	ea4f 4943 	mov.w	r9, r3, lsl #17
 8001526:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 800152a:	ea4f 4842 	mov.w	r8, r2, lsl #17
 800152e:	4bbf      	ldr	r3, [pc, #764]	; (800182c <calculate+0x424>)
 8001530:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001534:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001538:	fb02 f501 	mul.w	r5, r2, r1
 800153c:	fb00 f403 	mul.w	r4, r0, r3
 8001540:	442c      	add	r4, r5
 8001542:	fba0 ab02 	umull	sl, fp, r0, r2
 8001546:	eb04 030b 	add.w	r3, r4, fp
 800154a:	469b      	mov	fp, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	ea4f 129a 	mov.w	r2, sl, lsr #6
 8001558:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800155c:	ea4f 139b 	mov.w	r3, fp, lsr #6
 8001560:	eb18 0102 	adds.w	r1, r8, r2
 8001564:	6539      	str	r1, [r7, #80]	; 0x50
 8001566:	eb49 0303 	adc.w	r3, r9, r3
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
 800156c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001570:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	SENS = C[0]*65536+(C[2]*dT)/128;
 8001574:	4bad      	ldr	r3, [pc, #692]	; (800182c <calculate+0x424>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f04f 0800 	mov.w	r8, #0
 800157e:	f04f 0900 	mov.w	r9, #0
 8001582:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8001586:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 800158a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800158e:	4ba7      	ldr	r3, [pc, #668]	; (800182c <calculate+0x424>)
 8001590:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001594:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001598:	fb02 f501 	mul.w	r5, r2, r1
 800159c:	fb00 f403 	mul.w	r4, r0, r3
 80015a0:	442c      	add	r4, r5
 80015a2:	fba0 2302 	umull	r2, r3, r0, r2
 80015a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015aa:	4613      	mov	r3, r2
 80015ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b4:	18e3      	adds	r3, r4, r3
 80015b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80015c6:	4621      	mov	r1, r4
 80015c8:	09ca      	lsrs	r2, r1, #7
 80015ca:	4629      	mov	r1, r5
 80015cc:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80015d0:	4629      	mov	r1, r5
 80015d2:	09cb      	lsrs	r3, r1, #7
 80015d4:	eb18 0102 	adds.w	r1, r8, r2
 80015d8:	64b9      	str	r1, [r7, #72]	; 0x48
 80015da:	eb49 0303 	adc.w	r3, r9, r3
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80015e4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	P = (D1*SENS/(2097152)-OFF)/(32768);
 80015e8:	4b91      	ldr	r3, [pc, #580]	; (8001830 <calculate+0x428>)
 80015ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ee:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80015f2:	fb02 f501 	mul.w	r5, r2, r1
 80015f6:	fb00 f403 	mul.w	r4, r0, r3
 80015fa:	442c      	add	r4, r5
 80015fc:	fba0 2302 	umull	r2, r3, r0, r2
 8001600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001604:	4613      	mov	r3, r2
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800160a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160e:	18e3      	adds	r3, r4, r3
 8001610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001620:	4623      	mov	r3, r4
 8001622:	0d58      	lsrs	r0, r3, #21
 8001624:	462b      	mov	r3, r5
 8001626:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800162a:	462b      	mov	r3, r5
 800162c:	0d59      	lsrs	r1, r3, #21
 800162e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001632:	1a84      	subs	r4, r0, r2
 8001634:	643c      	str	r4, [r7, #64]	; 0x40
 8001636:	eb61 0303 	sbc.w	r3, r1, r3
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001648:	4621      	mov	r1, r4
 800164a:	0bca      	lsrs	r2, r1, #15
 800164c:	4629      	mov	r1, r5
 800164e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001652:	4629      	mov	r1, r5
 8001654:	0bcb      	lsrs	r3, r1, #15
 8001656:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 800165a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800165e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001662:	fb03 f102 	mul.w	r1, r3, r2
 8001666:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800166a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	18ca      	adds	r2, r1, r3
 8001674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001678:	fba3 1303 	umull	r1, r3, r3, r3
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800167e:	460b      	mov	r3, r1
 8001680:	67bb      	str	r3, [r7, #120]	; 0x78
 8001682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001688:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800168c:	460b      	mov	r3, r1
 800168e:	18db      	adds	r3, r3, r3
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4613      	mov	r3, r2
 8001694:	eb42 0303 	adc.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7fe ff23 	bl	80004ec <__aeabi_l2d>
 80016a6:	a35e      	add	r3, pc, #376	; (adr r3, 8001820 <calculate+0x418>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7ff f876 	bl	800079c <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fac0 	bl	8000c3c <__aeabi_d2lz>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 80016c4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016c8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80016ce:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016d8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016dc:	6339      	str	r1, [r7, #48]	; 0x30
 80016de:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80016e8:	462b      	mov	r3, r5
 80016ea:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80016ee:	4642      	mov	r2, r8
 80016f0:	fb02 f203 	mul.w	r2, r2, r3
 80016f4:	464b      	mov	r3, r9
 80016f6:	4621      	mov	r1, r4
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	4622      	mov	r2, r4
 8001700:	4641      	mov	r1, r8
 8001702:	fba2 1201 	umull	r1, r2, r2, r1
 8001706:	677a      	str	r2, [r7, #116]	; 0x74
 8001708:	460a      	mov	r2, r1
 800170a:	673a      	str	r2, [r7, #112]	; 0x70
 800170c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800170e:	4413      	add	r3, r2
 8001710:	677b      	str	r3, [r7, #116]	; 0x74
 8001712:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001716:	2900      	cmp	r1, #0
 8001718:	da07      	bge.n	800172a <calculate+0x322>
 800171a:	f110 030f 	adds.w	r3, r0, #15
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	f141 0300 	adc.w	r3, r1, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	0902      	lsrs	r2, r0, #4
 8001734:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001738:	110b      	asrs	r3, r1, #4
 800173a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	SENSi = 0;
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	//	}

	OFF2 = OFF - OFFi;
 800174a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800174e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001752:	1a84      	subs	r4, r0, r2
 8001754:	60bc      	str	r4, [r7, #8]
 8001756:	eb61 0303 	sbc.w	r3, r1, r3
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001760:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS2 = SENS - SENSi;
 8001764:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001768:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800176c:	1a84      	subs	r4, r0, r2
 800176e:	603c      	str	r4, [r7, #0]
 8001770:	eb61 0303 	sbc.w	r3, r1, r3
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e9d7 3400 	ldrd	r3, r4, [r7]
 800177a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	TEMP2 = (TEMP - Ti) / 100; //C
 800177e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001782:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001786:	1a84      	subs	r4, r0, r2
 8001788:	62bc      	str	r4, [r7, #40]	; 0x28
 800178a:	eb61 0303 	sbc.w	r3, r1, r3
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001790:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800179c:	f7ff f9e6 	bl	8000b6c <__aeabi_ldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <calculate+0x428>)
 80017aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ae:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80017b2:	fb02 f501 	mul.w	r5, r2, r1
 80017b6:	fb00 f403 	mul.w	r4, r0, r3
 80017ba:	442c      	add	r4, r5
 80017bc:	fba0 2302 	umull	r2, r3, r0, r2
 80017c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017c2:	4613      	mov	r3, r2
 80017c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80017c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c8:	18e3      	adds	r3, r4, r3
 80017ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80017d8:	4621      	mov	r1, r4
 80017da:	0d4a      	lsrs	r2, r1, #21
 80017dc:	4629      	mov	r1, r5
 80017de:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80017e2:	4629      	mov	r1, r5
 80017e4:	0d4b      	lsrs	r3, r1, #21
 80017e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80017ea:	1a14      	subs	r4, r2, r0
 80017ec:	623c      	str	r4, [r7, #32]
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
 80017f4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001800:	f7ff fa04 	bl	8000c0c <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int32_t res[2];
	res[0] = P;
 800180c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	res[1] = TEMP/100;
 8001814:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001818:	f04f 0264 	mov.w	r2, #100	; 0x64
 800181c:	e00a      	b.n	8001834 <calculate+0x42c>
 800181e:	bf00      	nop
 8001820:	fe280000 	.word	0xfe280000
 8001824:	423fffff 	.word	0x423fffff
 8001828:	200001e0 	.word	0x200001e0
 800182c:	200001a0 	.word	0x200001a0
 8001830:	200001d8 	.word	0x200001d8
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	f7ff f998 	bl	8000b6c <__aeabi_ldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	presure = res[0]/10;
 8001846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <calculate+0x45c>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	1092      	asrs	r2, r2, #2
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <calculate+0x460>)
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	37f8      	adds	r7, #248	; 0xf8
 800185e:	46bd      	mov	sp, r7
 8001860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001864:	66666667 	.word	0x66666667
 8001868:	200001e8 	.word	0x200001e8

0800186c <GetCrc16Checksumm>:
 */

#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8001878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187c:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	3b02      	subs	r3, #2
 8001882:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8001884:	e025      	b.n	80018d2 <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001896:	4053      	eors	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	737b      	strb	r3, [r7, #13]
 80018a0:	e014      	b.n	80018cc <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 80018a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da09      	bge.n	80018be <GetCrc16Checksumm+0x52>
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	e002      	b.n	80018c4 <GetCrc16Checksumm+0x58>
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 80018c6:	7b7b      	ldrb	r3, [r7, #13]
 80018c8:	3301      	adds	r3, #1
 80018ca:	737b      	strb	r3, [r7, #13]
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d9e7      	bls.n	80018a2 <GetCrc16Checksumm+0x36>
    while (len--) {
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	807a      	strh	r2, [r7, #2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1d4      	bne.n	8001886 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 80018dc:	89fb      	ldrh	r3, [r7, #14]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb6 	bl	800186c <GetCrc16Checksumm>
 8001900:	4603      	mov	r3, r0
 8001902:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	3b02      	subs	r3, #2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 8001914:	89fa      	ldrh	r2, [r7, #14]
 8001916:	8afb      	ldrh	r3, [r7, #22]
 8001918:	429a      	cmp	r2, r3
 800191a:	d101      	bne.n	8001920 <IsCrc16ChecksummCorrect+0x36>
		return true;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8001920:	2300      	movs	r3, #0
	}
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff96 	bl	800186c <GetCrc16Checksumm>
 8001940:	4603      	mov	r3, r0
 8001942:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	3b02      	subs	r3, #2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	89fa      	ldrh	r2, [r7, #14]
 8001952:	801a      	strh	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	3b01      	subs	r3, #1
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e009      	b.n	8001992 <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	4053      	eors	r3, r2
 800198a:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3301      	adds	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	3b01      	subs	r3, #1
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 800199c:	7dfa      	ldrb	r2, [r7, #23]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d101      	bne.n	80019a8 <IsChecksumm8bCorrect+0x4c>
        return 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <IsChecksumm8bCorrect+0x4e>
    else return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	e009      	b.n	80019e4 <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	4053      	eors	r3, r2
 80019dc:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e009      	b.n	8001a3c <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	4053      	eors	r3, r2
 8001a34:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf0      	blt.n	8001a28 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8001a46:	7dfa      	ldrb	r2, [r7, #23]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d101      	bne.n	8001a52 <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 8001a52:	2300      	movs	r3, #0
	}
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 8001a70:	2301      	movs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	e009      	b.n	8001a8a <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	4053      	eors	r3, r2
 8001a82:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d857      	bhi.n	8001b72 <PickBit+0xc6>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <PickBit+0x1c>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ae9 	.word	0x08001ae9
 8001acc:	08001afb 	.word	0x08001afb
 8001ad0:	08001b0d 	.word	0x08001b0d
 8001ad4:	08001b1f 	.word	0x08001b1f
 8001ad8:	08001b31 	.word	0x08001b31
 8001adc:	08001b43 	.word	0x08001b43
 8001ae0:	08001b55 	.word	0x08001b55
 8001ae4:	08001b67 	.word	0x08001b67
	case 0:
			return (bool) (input & 0b00000001);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	e03c      	b.n	8001b74 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e033      	b.n	8001b74 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	e02a      	b.n	8001b74 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e021      	b.n	8001b74 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e018      	b.n	8001b74 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	e00f      	b.n	8001b74 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	e006      	b.n	8001b74 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	09db      	lsrs	r3, r3, #7
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e000      	b.n	8001b74 <PickBit+0xc8>
	}
	return false;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <variableInit>:

uint16_t counterRx = 0;


void variableInit()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001b86:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <variableInit+0x130>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <variableInit+0x134>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <variableInit+0x134>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <variableInit+0x134>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 8001ba0:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <variableInit+0x134>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <variableInit+0x134>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <variableInit+0x134>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <variableInit+0x138>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <variableInit+0x138>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <variableInit+0x138>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <variableInit+0x138>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001bd4:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <variableInit+0x138>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <variableInit+0x138>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	831a      	strh	r2, [r3, #24]

	rSensors.pressure = 0;
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <variableInit+0x138>)
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	659a      	str	r2, [r3, #88]	; 0x58
	rSensors.pressure_null = 0;
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <variableInit+0x138>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c

	rSensors.rollSpeed = 0;
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <variableInit+0x138>)
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <variableInit+0x138>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <variableInit+0x138>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <variableInit+0x138>)
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <variableInit+0x138>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <variableInit+0x138>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <variableInit+0x138>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <variableInit+0x138>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <variableInit+0x138>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <variableInit+0x138>)
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <variableInit+0x138>)
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <variableInit+0x138>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <variableInit+0x138>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <variableInit+0x13c>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <variableInit+0x13c>)
 8001c64:	2205      	movs	r2, #5
 8001c66:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <variableInit+0x13c>)
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <variableInit+0x13c>)
 8001c72:	2206      	movs	r2, #6
 8001c74:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <variableInit+0x13c>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	779a      	strb	r2, [r3, #30]

	rSensors.startIMU = true;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <variableInit+0x138>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rSensors.startPressure = true;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <variableInit+0x138>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	thrustersInit();
 8001c8c:	f003 fb34 	bl	80052f8 <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 fa06 	bl	80030a4 <flashReadSettings>
	flashReadStructure(&config);
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fbcc 	bl	8003438 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <variableInit+0x134>)
 8001ca2:	789b      	ldrb	r3, [r3, #2]
 8001ca4:	2b00      	cmp	r3, #0
		return;
	}
}
 8001ca6:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20001ec8 	.word	0x20001ec8
 8001cb4:	20001d90 	.word	0x20001d90
 8001cb8:	20001e5c 	.word	0x20001e5c
 8001cbc:	20001ee4 	.word	0x20001ee4

08001cc0 <uartBusesInit>:

void uartBusesInit()
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001cc6:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cc8:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <uartBusesInit+0x1e0>)
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001ccc:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cce:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <uartBusesInit+0x1e4>)
 8001cd0:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001cd2:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cd4:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <uartBusesInit+0x1e8>)
 8001cd6:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001cd8:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001ce0:	4b6e      	ldr	r3, [pc, #440]	; (8001e9c <uartBusesInit+0x1dc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cea:	2214      	movs	r2, #20
 8001cec:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 8001cee:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cf4:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001cf6:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cf8:	22c8      	movs	r2, #200	; 0xc8
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001cfc:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cfe:	22c8      	movs	r2, #200	; 0xc8
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 8001d0a:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <uartBusesInit+0x1ec>)
 8001d0e:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d16:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 8001d3a:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d3c:	2264      	movs	r2, #100	; 0x64
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001d40:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d42:	2264      	movs	r2, #100	; 0x64
 8001d44:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 8001d46:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 8001d4e:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <uartBusesInit+0x1f0>)
 8001d52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d56:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d5c:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 8001d62:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d72:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d7a:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d8c:	2264      	movs	r2, #100	; 0x64
 8001d8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 8001d9a:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <uartBusesInit+0x1f4>)
 8001d9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <uartBusesInit+0x1dc>)
 8001da4:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <uartBusesInit+0x1f8>)
 8001da6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 8001daa:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <uartBusesInit+0x1dc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 8001dda:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <uartBusesInit+0x1dc>)
 8001ddc:	2264      	movs	r2, #100	; 0x64
 8001dde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <uartBusesInit+0x1dc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e04a      	b.n	8001e86 <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	492a      	ldr	r1, [pc, #168]	; (8001e9c <uartBusesInit+0x1dc>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3308      	adds	r3, #8
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001e04:	79fa      	ldrb	r2, [r7, #7]
 8001e06:	4925      	ldr	r1, [pc, #148]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	3309      	adds	r3, #9
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	4920      	ldr	r1, [pc, #128]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	330a      	adds	r3, #10
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	4916      	ldr	r1, [pc, #88]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3310      	adds	r3, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	4911      	ldr	r1, [pc, #68]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3314      	adds	r3, #20
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	490b      	ldr	r1, [pc, #44]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3318      	adds	r3, #24
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	3301      	adds	r3, #1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d9b1      	bls.n	8001df0 <uartBusesInit+0x130>
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	200001f4 	.word	0x200001f4
 8001ea0:	200026dc 	.word	0x200026dc
 8001ea4:	200022e4 	.word	0x200022e4
 8001ea8:	20002338 	.word	0x20002338
 8001eac:	200025cc 	.word	0x200025cc
 8001eb0:	20002544 	.word	0x20002544
 8001eb4:	20002654 	.word	0x20002654
 8001eb8:	2000239c 	.word	0x2000239c

08001ebc <i2cBusesInit>:

void i2cBusesInit()
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	// TODO refactor i2c communication routines
	i2cBus[DEV_I2C].hi2c = &hi2c1; // Link to hi2c will be set before receiving
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <i2cBusesInit+0x14>)
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <i2cBusesInit+0x18>)
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	200002d4 	.word	0x200002d4
 8001ed4:	20002458 	.word	0x20002458

08001ed8 <transmitPackage>:


bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f009 f914 	bl	800b11c <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <transmitPackage+0x42>
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d117      	bne.n	8001f32 <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	f009 f842 	bl	800af9c <HAL_UART_Transmit_DMA>
            break;
 8001f18:	e00d      	b.n	8001f36 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f008 ff94 	bl	800ae58 <HAL_UART_Transmit_IT>
            break;
 8001f30:	e001      	b.n	8001f36 <transmitPackage+0x5e>
        default:
            return false;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e036      	b.n	8001fa4 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8001f36:	f00c faa1 	bl	800e47c <xTaskGetTickCount>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f839 	bl	8000fb4 <fromTickToMs>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 8001f4c:	e01c      	b.n	8001f88 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 8001f4e:	f00c fa95 	bl	800e47c <xTaskGetTickCount>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f82d 	bl	8000fb4 <fromTickToMs>
 8001f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	dd01      	ble.n	8001f82 <transmitPackage+0xaa>
    		return false;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e010      	b.n	8001fa4 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 8001f82:	2032      	movs	r0, #50	; 0x32
 8001f84:	f00a ff50 	bl	800ce28 <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7a5b      	ldrb	r3, [r3, #9]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <transmitPackage+0xca>
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f083 0301 	eor.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1d5      	bne.n	8001f4e <transmitPackage+0x76>
    }
    return true;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 f91f 	bl	800b20c <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 f8a2 	bl	800b11c <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d018      	beq.n	8002014 <transmitAndReceive+0x68>
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d12d      	bne.n	8002042 <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f009 f84c 	bl	800b094 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	f008 ffc5 	bl	800af9c <HAL_UART_Transmit_DMA>
			break;
 8002012:	e018      	b.n	8002046 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	f008 ff75 	bl	800af14 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	f008 ff0c 	bl	800ae58 <HAL_UART_Transmit_IT>
			break;
 8002040:	e001      	b.n	8002046 <transmitAndReceive+0x9a>
		default:
			return false;
 8002042:	2300      	movs	r3, #0
 8002044:	e03d      	b.n	80020c2 <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8002046:	f00c fa19 	bl	800e47c <xTaskGetTickCount>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe ffb1 	bl	8000fb4 <fromTickToMs>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800205c:	e01c      	b.n	8002098 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800205e:	f00c fa0d 	bl	800e47c <xTaskGetTickCount>
 8002062:	4603      	mov	r3, r0
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ffa5 	bl	8000fb4 <fromTickToMs>
 800206a:	eeb0 7a40 	vmov.f32	s14, s0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	edd3 7a05 	vldr	s15, [r3, #20]
 8002074:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	dd01      	ble.n	8002092 <transmitAndReceive+0xe6>
			return false;
 800208e:	2300      	movs	r3, #0
 8002090:	e017      	b.n	80020c2 <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 8002092:	2032      	movs	r0, #50	; 0x32
 8002094:	f00a fec8 	bl	800ce28 <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7a5b      	ldrb	r3, [r3, #9]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <transmitAndReceive+0x114>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7a1b      	ldrb	r3, [r3, #8]
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <transmitAndReceive+0x114>
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ce      	bne.n	800205e <transmitAndReceive+0xb2>
	}
	return true;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d103      	bne.n	80020e6 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	725a      	strb	r2, [r3, #9]
		return;
 80020e4:	e022      	b.n	800212c <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e01a      	b.n	8002126 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	4911      	ldr	r1, [pc, #68]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3330      	adds	r3, #48	; 0x30
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d10b      	bne.n	8002120 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 8002114:	4413      	add	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	725a      	strb	r2, [r3, #9]
			break;
 800211e:	e005      	b.n	800212c <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3301      	adds	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d9e1      	bls.n	80020f0 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200001f4 	.word	0x200001f4

0800213c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d102      	bne.n	8002154 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800214e:	f000 f84b 	bl	80021e8 <ShoreReceive>
		return;
 8002152:	e02d      	b.n	80021b0 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e025      	b.n	80021aa <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	4915      	ldr	r1, [pc, #84]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3330      	adds	r3, #48	; 0x30
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d116      	bne.n	80021a4 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002182:	4413      	add	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2201      	movs	r2, #1
 800218a:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 800218c:	f00c f976 	bl	800e47c <xTaskGetTickCount>
 8002190:	4603      	mov	r3, r0
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe ff0e 	bl	8000fb4 <fromTickToMs>
 8002198:	eef0 7a40 	vmov.f32	s15, s0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 80021a2:	e005      	b.n	80021b0 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	3301      	adds	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d9d6      	bls.n	800215e <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200001f4 	.word	0x200001f4

080021bc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterRxCplt(hi2c);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe ffd5 	bl	8001174 <MS5837_I2C_MasterRxCplt>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterTxCplt(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff f81a 	bl	8001214 <MS5837_I2C_MasterTxCplt>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ShoreReceive>:
	MS5837_I2C_MasterError(hi2c);
}


void ShoreReceive()
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <ShoreReceive+0xec>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 80021f4:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <ShoreReceive+0xf0>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d142      	bne.n	8002282 <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	e03b      	b.n	800227a <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <ShoreReceive+0xf4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4935      	ldr	r1, [pc, #212]	; (80022e0 <ShoreReceive+0xf8>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	429a      	cmp	r2, r3
 8002210:	d125      	bne.n	800225e <ShoreReceive+0x76>
				counterRx = 1;
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <ShoreReceive+0xf0>)
 8002214:	2201      	movs	r2, #1
 8002216:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <ShoreReceive+0xfc>)
 800221c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <ShoreReceive+0xf4>)
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <ShoreReceive+0xf4>)
 800222e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <ShoreReceive+0xf4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	4a29      	ldr	r2, [pc, #164]	; (80022dc <ShoreReceive+0xf4>)
 8002238:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800223c:	b292      	uxth	r2, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f008 fe68 	bl	800af14 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <ShoreReceive+0x100>)
 8002246:	681c      	ldr	r4, [r3, #0]
 8002248:	f00c f928 	bl	800e49c <xTaskGetTickCountFromISR>
 800224c:	4602      	mov	r2, r0
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <ShoreReceive+0xec>)
 8002254:	2106      	movs	r1, #6
 8002256:	4620      	mov	r0, r4
 8002258:	f00c ff84 	bl	800f164 <xTimerGenericCommand>
				break;
 800225c:	e026      	b.n	80022ac <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d107      	bne.n	8002274 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <ShoreReceive+0xf4>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <ShoreReceive+0xf4>)
 800226a:	6811      	ldr	r1, [r2, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f008 fe50 	bl	800af14 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	3301      	adds	r3, #1
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d9c0      	bls.n	8002202 <ShoreReceive+0x1a>
 8002280:	e014      	b.n	80022ac <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <ShoreReceive+0xf0>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d110      	bne.n	80022ac <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <ShoreReceive+0xf4>)
 800228c:	2201      	movs	r2, #1
 800228e:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 8002290:	f00c f8f4 	bl	800e47c <xTaskGetTickCount>
 8002294:	4603      	mov	r3, r0
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe8c 	bl	8000fb4 <fromTickToMs>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <ShoreReceive+0xf4>)
 80022a2:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <ShoreReceive+0xf0>)
 80022a8:	2202      	movs	r2, #2
 80022aa:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <ShoreReceive+0xec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10a      	bne.n	80022ca <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <ShoreReceive+0xec>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
		taskYIELD();
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <ShoreReceive+0x104>)
 80022bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	f3bf 8f6f 	isb	sy
	}
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200002e0 	.word	0x200002e0
 80022d8:	200002dc 	.word	0x200002dc
 80022dc:	200001f4 	.word	0x200001f4
 80022e0:	080109a4 	.word	0x080109a4
 80022e4:	0801099c 	.word	0x0801099c
 80022e8:	200002e4 	.word	0x200002e4
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 80022fc:	23aa      	movs	r3, #170	; 0xaa
 80022fe:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 8002300:	23aa      	movs	r3, #170	; 0xaa
 8002302:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	4916      	ldr	r1, [pc, #88]	; (8002360 <DevicesRequestUpdate+0x70>)
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	440b      	add	r3, r1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4911      	ldr	r1, [pc, #68]	; (8002360 <DevicesRequestUpdate+0x70>)
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	440b      	add	r3, r1
 8002324:	3301      	adds	r3, #1
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	72fb      	strb	r3, [r7, #11]
    //req.velocity1 = 0;
    //req.velocity2 = rDevice[dev].force;

   // if(dev == GRAB) {
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <DevicesRequestUpdate+0x70>)
 800232c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002330:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <DevicesRequestUpdate+0x70>)
 8002334:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002338:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	461a      	mov	r2, r3
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6010      	str	r0, [r2, #0]
 8002346:	8899      	ldrh	r1, [r3, #4]
 8002348:	799b      	ldrb	r3, [r3, #6]
 800234a:	8091      	strh	r1, [r2, #4]
 800234c:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800234e:	2107      	movs	r1, #7
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff fb30 	bl	80019b6 <AddChecksumm8b>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20001ee4 	.word	0x20001ee4

08002364 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 8002370:	210a      	movs	r1, #10
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff faf2 	bl	800195c <IsChecksumm8bCorrect>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04a      	beq.n	8002414 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	6810      	ldr	r0, [r2, #0]
 8002386:	6851      	ldr	r1, [r2, #4]
 8002388:	c303      	stmia	r3!, {r0, r1}
 800238a:	8912      	ldrh	r2, [r2, #8]
 800238c:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8002394:	b298      	uxth	r0, r3
 8002396:	4924      	ldr	r1, [pc, #144]	; (8002428 <DevicesResponseUpdate+0xc4>)
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	440b      	add	r3, r1
 80023a2:	3304      	adds	r3, #4
 80023a4:	4602      	mov	r2, r0
 80023a6:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	7cf8      	ldrb	r0, [r7, #19]
 80023ac:	491e      	ldr	r1, [pc, #120]	; (8002428 <DevicesResponseUpdate+0xc4>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	440b      	add	r3, r1
 80023b8:	3307      	adds	r3, #7
 80023ba:	4602      	mov	r2, r0
 80023bc:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	7d38      	ldrb	r0, [r7, #20]
 80023c2:	4919      	ldr	r1, [pc, #100]	; (8002428 <DevicesResponseUpdate+0xc4>)
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	3308      	adds	r3, #8
 80023d0:	4602      	mov	r2, r0
 80023d2:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <DevicesResponseUpdate+0xc4>)
 80023d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <DevicesResponseUpdate+0x88>
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d103      	bne.n	80023ec <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <DevicesResponseUpdate+0xc8>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e00a      	b.n	8002402 <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <DevicesResponseUpdate+0xc4>)
 80023ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <DevicesResponseUpdate+0x9e>
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d102      	bne.n	8002402 <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <DevicesResponseUpdate+0xc8>)
 80023fe:	2204      	movs	r2, #4
 8002400:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <DevicesResponseUpdate+0xcc>)
 8002404:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002408:	3301      	adds	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <DevicesResponseUpdate+0xcc>)
 800240e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 8002412:	e004      	b.n	800241e <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <DevicesResponseUpdate+0xcc>)
 8002416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002418:	3301      	adds	r3, #1
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <DevicesResponseUpdate+0xcc>)
 800241c:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20001ee4 	.word	0x20001ee4
 800242c:	20001f20 	.word	0x20001f20
 8002430:	200001f4 	.word	0x200001f4

08002434 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800243a:	af00      	add	r7, sp, #0
 800243c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002440:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002444:	6018      	str	r0, [r3, #0]
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8002446:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800244a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800244e:	211e      	movs	r1, #30
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	f7ff fa4a 	bl	80018ea <IsCrc16ChecksummCorrect>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 818e 	beq.w	800277a <ShoreRequest+0x346>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 800245e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002462:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f507 740d 	add.w	r4, r7, #564	; 0x234
 800246c:	461d      	mov	r5, r3
 800246e:	6828      	ldr	r0, [r5, #0]
 8002470:	6869      	ldr	r1, [r5, #4]
 8002472:	68aa      	ldr	r2, [r5, #8]
 8002474:	68eb      	ldr	r3, [r5, #12]
 8002476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002478:	6928      	ldr	r0, [r5, #16]
 800247a:	6969      	ldr	r1, [r5, #20]
 800247c:	69aa      	ldr	r2, [r5, #24]
 800247e:	c407      	stmia	r4!, {r0, r1, r2}
 8002480:	8bab      	ldrh	r3, [r5, #28]
 8002482:	8023      	strh	r3, [r4, #0]

    	uint8_t tempCameraNum = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        rJoySpeed.march = req.march;
 800248a:	f9b7 3236 	ldrsh.w	r3, [r7, #566]	; 0x236
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002496:	4bbe      	ldr	r3, [pc, #760]	; (8002790 <ShoreRequest+0x35c>)
 8002498:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 800249c:	f9b7 3238 	ldrsh.w	r3, [r7, #568]	; 0x238
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	4bb9      	ldr	r3, [pc, #740]	; (8002790 <ShoreRequest+0x35c>)
 80024aa:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 80024ae:	f9b7 323a 	ldrsh.w	r3, [r7, #570]	; 0x23a
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ba:	4bb5      	ldr	r3, [pc, #724]	; (8002790 <ShoreRequest+0x35c>)
 80024bc:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 80024c0:	f9b7 323c 	ldrsh.w	r3, [r7, #572]	; 0x23c
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024cc:	4bb0      	ldr	r3, [pc, #704]	; (8002790 <ShoreRequest+0x35c>)
 80024ce:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 80024d2:	f9b7 323e 	ldrsh.w	r3, [r7, #574]	; 0x23e
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024de:	4bac      	ldr	r3, [pc, #688]	; (8002790 <ShoreRequest+0x35c>)
 80024e0:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 80024e4:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	4ba7      	ldr	r3, [pc, #668]	; (8002790 <ShoreRequest+0x35c>)
 80024f2:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 80024f6:	f997 2243 	ldrsb.w	r2, [r7, #579]	; 0x243
 80024fa:	4ba6      	ldr	r3, [pc, #664]	; (8002794 <ShoreRequest+0x360>)
 80024fc:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 80024fe:	4ba5      	ldr	r3, [pc, #660]	; (8002794 <ShoreRequest+0x360>)
 8002500:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002504:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002508:	d102      	bne.n	8002510 <ShoreRequest+0xdc>
            rDevice[GRAB].force = -127;
 800250a:	4ba2      	ldr	r3, [pc, #648]	; (8002794 <ShoreRequest+0x360>)
 800250c:	2281      	movs	r2, #129	; 0x81
 800250e:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 8002510:	f997 2244 	ldrsb.w	r2, [r7, #580]	; 0x244
 8002514:	4b9f      	ldr	r3, [pc, #636]	; (8002794 <ShoreRequest+0x360>)
 8002516:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 800251a:	4b9e      	ldr	r3, [pc, #632]	; (8002794 <ShoreRequest+0x360>)
 800251c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8002520:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002524:	d103      	bne.n	800252e <ShoreRequest+0xfa>
        	rDevice[TILT].force = -127;
 8002526:	4b9b      	ldr	r3, [pc, #620]	; (8002794 <ShoreRequest+0x360>)
 8002528:	2281      	movs	r2, #129	; 0x81
 800252a:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 800252e:	f997 2245 	ldrsb.w	r2, [r7, #581]	; 0x245
 8002532:	4b98      	ldr	r3, [pc, #608]	; (8002794 <ShoreRequest+0x360>)
 8002534:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 8002536:	4b97      	ldr	r3, [pc, #604]	; (8002794 <ShoreRequest+0x360>)
 8002538:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800253c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002540:	d102      	bne.n	8002548 <ShoreRequest+0x114>
            rDevice[GRAB_ROTATION].force = -127;
 8002542:	4b94      	ldr	r3, [pc, #592]	; (8002794 <ShoreRequest+0x360>)
 8002544:	2281      	movs	r2, #129	; 0x81
 8002546:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 8002548:	f997 2246 	ldrsb.w	r2, [r7, #582]	; 0x246
 800254c:	4b91      	ldr	r3, [pc, #580]	; (8002794 <ShoreRequest+0x360>)
 800254e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 8002552:	f997 2247 	ldrsb.w	r2, [r7, #583]	; 0x247
 8002556:	4b8f      	ldr	r3, [pc, #572]	; (8002794 <ShoreRequest+0x360>)
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 800255c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002568:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <ShoreRequest+0x364>)
 800256a:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.startIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 800256e:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8002572:	2106      	movs	r1, #6
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fa99 	bl	8001aac <PickBit>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	4b87      	ldr	r3, [pc, #540]	; (800279c <ShoreRequest+0x368>)
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 8002584:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8002588:	2107      	movs	r1, #7
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fa8e 	bl	8001aac <PickBit>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <ShoreRequest+0x176>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fde0 	bl	8003160 <flashFillStructure>
        	flashWriteSettings(&config);
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fda1 	bl	80030ec <flashWriteSettings>
        }

        tempCameraNum = req.cameras;
 80025aa:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 80025ae:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        uint8_t old_reset = rComputer.reset;
 80025b2:	4b7b      	ldr	r3, [pc, #492]	; (80027a0 <ShoreRequest+0x36c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        if(old_reset != req.pc_reset) {
 80025ba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80025be:	f897 2256 	ldrb.w	r2, [r7, #598]	; 0x256
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d002      	beq.n	80025cc <ShoreRequest+0x198>
            if(req.pc_reset == PC_ON_CODE) {
 80025c6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80025ca:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
 //           	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
   //         	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 80025cc:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 80025d0:	4b73      	ldr	r3, [pc, #460]	; (80027a0 <ShoreRequest+0x36c>)
 80025d2:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 80025d4:	4b73      	ldr	r3, [pc, #460]	; (80027a4 <ShoreRequest+0x370>)
 80025d6:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80025da:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 80025de:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 80025e2:	2103      	movs	r1, #3
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fa61 	bl	8001aac <PickBit>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <ShoreRequest+0x370>)
 80025f0:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 80025f4:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 80025f8:	f083 0301 	eor.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <ShoreRequest+0x1de>
 8002602:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <ShoreRequest+0x370>)
 8002604:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <ShoreRequest+0x1de>
        	stabilizationStart(STAB_YAW);
 800260c:	2003      	movs	r0, #3
 800260e:	f002 f9af 	bl	8004970 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 8002612:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <ShoreRequest+0x370>)
 8002614:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002618:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 800261c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fa42 	bl	8001aac <PickBit>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <ShoreRequest+0x370>)
 800262e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 8002632:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <ShoreRequest+0x21c>
 8002640:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <ShoreRequest+0x370>)
 8002642:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <ShoreRequest+0x21c>
        	stabilizationStart(STAB_ROLL);
 800264a:	2004      	movs	r0, #4
 800264c:	f002 f990 	bl	8004970 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 8002650:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <ShoreRequest+0x370>)
 8002652:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002656:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 800265a:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <ShoreRequest+0x370>)
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 8002662:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8002666:	f083 0301 	eor.w	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <ShoreRequest+0x24c>
 8002670:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <ShoreRequest+0x370>)
 8002672:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <ShoreRequest+0x24c>
        	stabilizationStart(STAB_PITCH);
 800267a:	2005      	movs	r0, #5
 800267c:	f002 f978 	bl	8004970 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 8002680:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <ShoreRequest+0x370>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8002688:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fa0c 	bl	8001aac <PickBit>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <ShoreRequest+0x370>)
 800269a:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 800269c:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 80026a0:	f083 0301 	eor.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <ShoreRequest+0x284>
 80026aa:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <ShoreRequest+0x370>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <ShoreRequest+0x284>
        	stabilizationStart(STAB_DEPTH);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f002 f95c 	bl	8004970 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <ShoreRequest+0x370>)
 80026ba:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026be:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 80026c2:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 80026c6:	2104      	movs	r1, #4
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff f9ef 	bl	8001aac <PickBit>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <ShoreRequest+0x370>)
 80026d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 80026d8:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <ShoreRequest+0x2c2>
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <ShoreRequest+0x370>)
 80026e8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <ShoreRequest+0x2c2>
        	stabilizationStart(STAB_LAG);
 80026f0:	2002      	movs	r0, #2
 80026f2:	f002 f93d 	bl	8004970 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 80026f6:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <ShoreRequest+0x370>)
 80026f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026fc:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8002700:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8002704:	2105      	movs	r1, #5
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f9d0 	bl	8001aac <PickBit>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <ShoreRequest+0x370>)
 8002712:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8002716:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800271a:	f083 0301 	eor.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <ShoreRequest+0x300>
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <ShoreRequest+0x370>)
 8002726:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <ShoreRequest+0x300>
        	stabilizationStart(STAB_MARCH);
 800272e:	2001      	movs	r0, #1
 8002730:	f002 f91e 	bl	8004970 <stabilizationStart>
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <ShoreRequest+0x364>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 800273c:	429a      	cmp	r2, r3
 800273e:	d013      	beq.n	8002768 <ShoreRequest+0x334>
        	rState.cameraNum = tempCameraNum;
 8002740:	4a15      	ldr	r2, [pc, #84]	; (8002798 <ShoreRequest+0x364>)
 8002742:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8002746:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <ShoreRequest+0x364>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d80b      	bhi.n	8002768 <ShoreRequest+0x334>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <ShoreRequest+0x324>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	08002769 	.word	0x08002769
 8002760:	08002769 	.word	0x08002769
 8002764:	08002769 	.word	0x08002769
        		break;
        	}
        }

        // TODO tuuuupoooo
        formThrustVectors();
 8002768:	f002 ff1e 	bl	80055a8 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <ShoreRequest+0x374>)
 800276e:	895b      	ldrh	r3, [r3, #10]
 8002770:	3301      	adds	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <ShoreRequest+0x374>)
 8002776:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8002778:	e004      	b.n	8002784 <ShoreRequest+0x350>
    	++uartBus[SHORE_UART].brokenRxCounter;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <ShoreRequest+0x374>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <ShoreRequest+0x374>)
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800278a:	46bd      	mov	sp, r7
 800278c:	bdb0      	pop	{r4, r5, r7, pc}
 800278e:	bf00      	nop
 8002790:	20001ecc 	.word	0x20001ecc
 8002794:	20001ee4 	.word	0x20001ee4
 8002798:	20001d90 	.word	0x20001d90
 800279c:	20001e5c 	.word	0x20001e5c
 80027a0:	20001ec8 	.word	0x20001ec8
 80027a4:	20001f24 	.word	0x20001f24
 80027a8:	200001f4 	.word	0x200001f4

080027ac <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b098      	sub	sp, #96	; 0x60
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 80027b4:	2154      	movs	r1, #84	; 0x54
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff f897 	bl	80018ea <IsCrc16ChecksummCorrect>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8158 	beq.w	8002a74 <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	4611      	mov	r1, r2
 80027cc:	2254      	movs	r2, #84	; 0x54
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00d fdb6 	bl	8010340 <memcpy>

		rJoySpeed.march = req.march;
 80027d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e0:	4ba9      	ldr	r3, [pc, #676]	; (8002a88 <ShoreConfigRequest+0x2dc>)
 80027e2:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 80027e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f2:	4ba5      	ldr	r3, [pc, #660]	; (8002a88 <ShoreConfigRequest+0x2dc>)
 80027f4:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 80027f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002804:	4ba0      	ldr	r3, [pc, #640]	; (8002a88 <ShoreConfigRequest+0x2dc>)
 8002806:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 800280a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002816:	4b9c      	ldr	r3, [pc, #624]	; (8002a88 <ShoreConfigRequest+0x2dc>)
 8002818:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 800281c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	4b97      	ldr	r3, [pc, #604]	; (8002a88 <ShoreConfigRequest+0x2dc>)
 800282a:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 800282e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283a:	4b93      	ldr	r3, [pc, #588]	; (8002a88 <ShoreConfigRequest+0x2dc>)
 800283c:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 8002840:	7a7b      	ldrb	r3, [r7, #9]
 8002842:	4618      	mov	r0, r3
 8002844:	f8d7 2016 	ldr.w	r2, [r7, #22]
 8002848:	4613      	mov	r3, r2
 800284a:	461a      	mov	r2, r3
 800284c:	498f      	ldr	r1, [pc, #572]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 800284e:	4603      	mov	r3, r0
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4403      	add	r3, r0
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	3304      	adds	r3, #4
 800285a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 800285c:	7a7b      	ldrb	r3, [r7, #9]
 800285e:	4618      	mov	r0, r3
 8002860:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8002864:	4613      	mov	r3, r2
 8002866:	461a      	mov	r2, r3
 8002868:	4988      	ldr	r1, [pc, #544]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 800286a:	4603      	mov	r3, r0
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4403      	add	r3, r0
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3308      	adds	r3, #8
 8002876:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 8002878:	7a7b      	ldrb	r3, [r7, #9]
 800287a:	4618      	mov	r0, r3
 800287c:	f8d7 201e 	ldr.w	r2, [r7, #30]
 8002880:	4613      	mov	r3, r2
 8002882:	461a      	mov	r2, r3
 8002884:	4981      	ldr	r1, [pc, #516]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 8002886:	4603      	mov	r3, r0
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4403      	add	r3, r0
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	330c      	adds	r3, #12
 8002892:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 8002894:	7a7b      	ldrb	r3, [r7, #9]
 8002896:	4618      	mov	r0, r3
 8002898:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 800289c:	4613      	mov	r3, r2
 800289e:	461a      	mov	r2, r3
 80028a0:	497a      	ldr	r1, [pc, #488]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 80028a2:	4603      	mov	r3, r0
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4403      	add	r3, r0
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	3310      	adds	r3, #16
 80028ae:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 80028b0:	7a7b      	ldrb	r3, [r7, #9]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 80028b8:	4613      	mov	r3, r2
 80028ba:	461a      	mov	r2, r3
 80028bc:	4973      	ldr	r1, [pc, #460]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 80028be:	4603      	mov	r3, r0
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4403      	add	r3, r0
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3314      	adds	r3, #20
 80028ca:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 80028cc:	7a7b      	ldrb	r3, [r7, #9]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 80028d4:	4613      	mov	r3, r2
 80028d6:	461a      	mov	r2, r3
 80028d8:	496c      	ldr	r1, [pc, #432]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 80028da:	4603      	mov	r3, r0
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4403      	add	r3, r0
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	3318      	adds	r3, #24
 80028e6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 80028e8:	7a7b      	ldrb	r3, [r7, #9]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 80028f0:	4613      	mov	r3, r2
 80028f2:	461a      	mov	r2, r3
 80028f4:	4965      	ldr	r1, [pc, #404]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 80028f6:	4603      	mov	r3, r0
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4403      	add	r3, r0
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	331c      	adds	r3, #28
 8002902:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 8002904:	7a7b      	ldrb	r3, [r7, #9]
 8002906:	4618      	mov	r0, r3
 8002908:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 800290c:	4613      	mov	r3, r2
 800290e:	461a      	mov	r2, r3
 8002910:	495e      	ldr	r1, [pc, #376]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 8002912:	4603      	mov	r3, r0
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4403      	add	r3, r0
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	3328      	adds	r3, #40	; 0x28
 800291e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8002920:	7a7b      	ldrb	r3, [r7, #9]
 8002922:	4618      	mov	r0, r3
 8002924:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8002928:	4613      	mov	r3, r2
 800292a:	461a      	mov	r2, r3
 800292c:	4957      	ldr	r1, [pc, #348]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 800292e:	4603      	mov	r3, r0
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4403      	add	r3, r0
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	332c      	adds	r3, #44	; 0x2c
 800293a:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 800293c:	7a7b      	ldrb	r3, [r7, #9]
 800293e:	4618      	mov	r0, r3
 8002940:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 8002944:	4613      	mov	r3, r2
 8002946:	461a      	mov	r2, r3
 8002948:	4950      	ldr	r1, [pc, #320]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 800294a:	4603      	mov	r3, r0
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4403      	add	r3, r0
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	3330      	adds	r3, #48	; 0x30
 8002956:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8002958:	7a7b      	ldrb	r3, [r7, #9]
 800295a:	4618      	mov	r0, r3
 800295c:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 8002960:	4613      	mov	r3, r2
 8002962:	461a      	mov	r2, r3
 8002964:	4949      	ldr	r1, [pc, #292]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 8002966:	4603      	mov	r3, r0
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4403      	add	r3, r0
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	3334      	adds	r3, #52	; 0x34
 8002972:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 8002974:	7a7b      	ldrb	r3, [r7, #9]
 8002976:	4618      	mov	r0, r3
 8002978:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 800297c:	4613      	mov	r3, r2
 800297e:	461a      	mov	r2, r3
 8002980:	4942      	ldr	r1, [pc, #264]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 8002982:	4603      	mov	r3, r0
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4403      	add	r3, r0
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	3338      	adds	r3, #56	; 0x38
 800298e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 8002990:	7a7b      	ldrb	r3, [r7, #9]
 8002992:	4618      	mov	r0, r3
 8002994:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 8002998:	4613      	mov	r3, r2
 800299a:	461a      	mov	r2, r3
 800299c:	493b      	ldr	r1, [pc, #236]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 800299e:	4603      	mov	r3, r0
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4403      	add	r3, r0
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	333c      	adds	r3, #60	; 0x3c
 80029aa:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 80029b4:	4613      	mov	r3, r2
 80029b6:	461a      	mov	r2, r3
 80029b8:	4934      	ldr	r1, [pc, #208]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 80029ba:	4603      	mov	r3, r0
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4403      	add	r3, r0
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	3320      	adds	r3, #32
 80029c6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 80029c8:	7a7b      	ldrb	r3, [r7, #9]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 80029d0:	4613      	mov	r3, r2
 80029d2:	461a      	mov	r2, r3
 80029d4:	492d      	ldr	r1, [pc, #180]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 80029d6:	4603      	mov	r3, r0
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4403      	add	r3, r0
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	3324      	adds	r3, #36	; 0x24
 80029e2:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 80029e4:	7a7b      	ldrb	r3, [r7, #9]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 80029ec:	4613      	mov	r3, r2
 80029ee:	461a      	mov	r2, r3
 80029f0:	4926      	ldr	r1, [pc, #152]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 80029f2:	4603      	mov	r3, r0
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4403      	add	r3, r0
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	3340      	adds	r3, #64	; 0x40
 80029fe:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 8002a00:	7a7b      	ldrb	r3, [r7, #9]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 8002a08:	4613      	mov	r3, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	491f      	ldr	r1, [pc, #124]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 8002a0e:	4603      	mov	r3, r0
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4403      	add	r3, r0
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	3344      	adds	r3, #68	; 0x44
 8002a1a:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <ShoreConfigRequest+0x2e4>)
 8002a1e:	785a      	ldrb	r2, [r3, #1]
 8002a20:	7a7b      	ldrb	r3, [r7, #9]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d01d      	beq.n	8002a62 <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a2c:	e00e      	b.n	8002a4c <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 8002a2e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002a32:	4916      	ldr	r1, [pc, #88]	; (8002a8c <ShoreConfigRequest+0x2e0>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a46:	3301      	adds	r3, #1
 8002a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d9ec      	bls.n	8002a2e <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 8002a54:	7a7a      	ldrb	r2, [r7, #9]
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <ShoreConfigRequest+0x2e4>)
 8002a58:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002a5a:	7a7b      	ldrb	r3, [r7, #9]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 ff87 	bl	8004970 <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 8002a62:	f002 fda1 	bl	80055a8 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <ShoreConfigRequest+0x2e8>)
 8002a68:	895b      	ldrh	r3, [r3, #10]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <ShoreConfigRequest+0x2e8>)
 8002a70:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002a72:	e004      	b.n	8002a7e <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <ShoreConfigRequest+0x2e8>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <ShoreConfigRequest+0x2e8>)
 8002a7c:	60d3      	str	r3, [r2, #12]
}
 8002a7e:	bf00      	nop
 8002a80:	3760      	adds	r7, #96	; 0x60
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20001ecc 	.word	0x20001ecc
 8002a8c:	20001f24 	.word	0x20001f24
 8002a90:	20001d90 	.word	0x20001d90
 8002a94:	200001f4 	.word	0x200001f4

08002a98 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 8002a98:	b5b0      	push	{r4, r5, r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 8002aa0:	2111      	movs	r1, #17
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe ff21 	bl	80018ea <IsCrc16ChecksummCorrect>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 809b 	beq.w	8002be6 <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f107 040c 	add.w	r4, r7, #12
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	6828      	ldr	r0, [r5, #0]
 8002aba:	6869      	ldr	r1, [r5, #4]
 8002abc:	68aa      	ldr	r2, [r5, #8]
 8002abe:	68eb      	ldr	r3, [r5, #12]
 8002ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac2:	7c2b      	ldrb	r3, [r5, #16]
 8002ac4:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e00b      	b.n	8002ae4 <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 8002acc:	7ffa      	ldrb	r2, [r7, #31]
 8002ace:	494a      	ldr	r1, [pc, #296]	; (8002bf8 <ShoreDirectRequest+0x160>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002ade:	7ffb      	ldrb	r3, [r7, #31]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	7ffb      	ldrb	r3, [r7, #31]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d9f0      	bls.n	8002acc <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002aea:	2300      	movs	r3, #0
 8002aec:	77bb      	strb	r3, [r7, #30]
 8002aee:	e070      	b.n	8002bd2 <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 8002af0:	7b7b      	ldrb	r3, [r7, #13]
 8002af2:	7fba      	ldrb	r2, [r7, #30]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d00a      	beq.n	8002b0e <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 8002af8:	7fba      	ldrb	r2, [r7, #30]
 8002afa:	4940      	ldr	r1, [pc, #256]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3302      	adds	r3, #2
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e05e      	b.n	8002bcc <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	4619      	mov	r1, r3
 8002b12:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002b16:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b18:	460b      	mov	r3, r1
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	440b      	add	r3, r1
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	3302      	adds	r3, #2
 8002b24:	4602      	mov	r2, r0
 8002b26:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002b28:	7b7b      	ldrb	r3, [r7, #13]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	7bb8      	ldrb	r0, [r7, #14]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b30:	460b      	mov	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 8002b3e:	7b7b      	ldrb	r3, [r7, #13]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002b46:	4613      	mov	r3, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	492c      	ldr	r1, [pc, #176]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4403      	add	r3, r0
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	330c      	adds	r3, #12
 8002b58:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002b5a:	7b7b      	ldrb	r3, [r7, #13]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f8d7 2015 	ldr.w	r2, [r7, #21]
 8002b62:	4613      	mov	r3, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4925      	ldr	r1, [pc, #148]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b68:	4603      	mov	r3, r0
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4403      	add	r3, r0
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3310      	adds	r3, #16
 8002b74:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002b76:	7b7b      	ldrb	r3, [r7, #13]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b80:	460b      	mov	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 8002b90:	7b7b      	ldrb	r3, [r7, #13]
 8002b92:	4619      	mov	r1, r3
 8002b94:	f997 001a 	ldrsb.w	r0, [r7, #26]
 8002b98:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	440b      	add	r3, r1
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3315      	adds	r3, #21
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 8002baa:	7c3b      	ldrb	r3, [r7, #16]
 8002bac:	7b7a      	ldrb	r2, [r7, #13]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2d8      	uxtb	r0, r3
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <ShoreDirectRequest+0x164>)
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	440b      	add	r3, r1
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3316      	adds	r3, #22
 8002bc8:	4602      	mov	r2, r0
 8002bca:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002bcc:	7fbb      	ldrb	r3, [r7, #30]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	77bb      	strb	r3, [r7, #30]
 8002bd2:	7fbb      	ldrb	r3, [r7, #30]
 8002bd4:	2b07      	cmp	r3, #7
 8002bd6:	d98b      	bls.n	8002af0 <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002bda:	895b      	ldrh	r3, [r3, #10]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002be2:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002be4:	e004      	b.n	8002bf0 <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	3301      	adds	r3, #1
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <ShoreDirectRequest+0x168>)
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf8:	20001f24 	.word	0x20001f24
 8002bfc:	20001d9c 	.word	0x20001d9c
 8002c00:	200001f4 	.word	0x200001f4

08002c04 <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b094      	sub	sp, #80	; 0x50
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <ShoreResponse+0x78>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60bb      	str	r3, [r7, #8]
    res.pitch = rSensors.pitch;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <ShoreResponse+0x78>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60fb      	str	r3, [r7, #12]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <ShoreResponse+0x78>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	613b      	str	r3, [r7, #16]
    res.rollSpeed = rSensors.rollSpeed;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <ShoreResponse+0x78>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	617b      	str	r3, [r7, #20]
    res.pitchSpeed = rSensors.pitchSpeed;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <ShoreResponse+0x78>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	61bb      	str	r3, [r7, #24]
    res.yawSpeed = rSensors.yawSpeed;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <ShoreResponse+0x78>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	61fb      	str	r3, [r7, #28]

    res.pressure = rSensors.pressure;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <ShoreResponse+0x78>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	623b      	str	r3, [r7, #32]

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8002c36:	2300      	movs	r3, #0
 8002c38:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
    res.dev_errors = 0;//robot->device.errors;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <ShoreResponse+0x7c>)
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	2246      	movs	r2, #70	; 0x46
 8002c64:	4619      	mov	r1, r3
 8002c66:	f00d fb6b 	bl	8010340 <memcpy>
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002c6a:	2146      	movs	r1, #70	; 0x46
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe fe5c 	bl	800192a <AddCrc16Checksumm>
}
 8002c72:	bf00      	nop
 8002c74:	3750      	adds	r7, #80	; 0x50
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20001e5c 	.word	0x20001e5c
 8002c80:	20001ec8 	.word	0x20001ec8

08002c84 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b09c      	sub	sp, #112	; 0x70
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002c8c:	2355      	movs	r3, #85	; 0x55
 8002c8e:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 8002c90:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 8002c98:	4b72      	ldr	r3, [pc, #456]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 8002ca0:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 8002ca8:	4b6e      	ldr	r3, [pc, #440]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 8002cc0:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002cc8:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <ShoreConfigResponse+0x1e0>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002cd8:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002cda:	785b      	ldrb	r3, [r3, #1]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4a63      	ldr	r2, [pc, #396]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002ce0:	2358      	movs	r3, #88	; 0x58
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 8002cf0:	4b5d      	ldr	r3, [pc, #372]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4a5d      	ldr	r2, [pc, #372]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002cf8:	2358      	movs	r3, #88	; 0x58
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3304      	adds	r3, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002d0a:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002d12:	2358      	movs	r3, #88	; 0x58
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002d24:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002d2c:	2358      	movs	r3, #88	; 0x58
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	331c      	adds	r3, #28
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002d3c:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	4619      	mov	r1, r3
 8002d42:	4a4a      	ldr	r2, [pc, #296]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002d44:	2358      	movs	r3, #88	; 0x58
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3320      	adds	r3, #32
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002d54:	4b44      	ldr	r3, [pc, #272]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4a44      	ldr	r2, [pc, #272]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002d5c:	2358      	movs	r3, #88	; 0x58
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3324      	adds	r3, #36	; 0x24
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	4619      	mov	r1, r3
 8002d72:	4a3e      	ldr	r2, [pc, #248]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002d74:	2358      	movs	r3, #88	; 0x58
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3328      	adds	r3, #40	; 0x28
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002d84:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4a38      	ldr	r2, [pc, #224]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002d8c:	2358      	movs	r3, #88	; 0x58
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	332c      	adds	r3, #44	; 0x2c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 8002d9c:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	4619      	mov	r1, r3
 8002da2:	4a32      	ldr	r2, [pc, #200]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002da4:	2358      	movs	r3, #88	; 0x58
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3330      	adds	r3, #48	; 0x30
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 8002db4:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002dbc:	2358      	movs	r3, #88	; 0x58
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3338      	adds	r3, #56	; 0x38
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002dce:	785b      	ldrb	r3, [r3, #1]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002dd4:	2358      	movs	r3, #88	; 0x58
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	333c      	adds	r3, #60	; 0x3c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002de6:	785b      	ldrb	r3, [r3, #1]
 8002de8:	4619      	mov	r1, r3
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002dec:	2358      	movs	r3, #88	; 0x58
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3340      	adds	r3, #64	; 0x40
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002dfe:	785b      	ldrb	r3, [r3, #1]
 8002e00:	4619      	mov	r1, r3
 8002e02:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002e04:	2358      	movs	r3, #88	; 0x58
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3334      	adds	r3, #52	; 0x34
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002e1c:	2358      	movs	r3, #88	; 0x58
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	334c      	adds	r3, #76	; 0x4c
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <ShoreConfigResponse+0x1e4>)
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	4619      	mov	r1, r3
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <ShoreConfigResponse+0x1e8>)
 8002e34:	2358      	movs	r3, #88	; 0x58
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3350      	adds	r3, #80	; 0x50
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	2263      	movs	r2, #99	; 0x63
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f00d fa76 	bl	8010340 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e54:	2163      	movs	r1, #99	; 0x63
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe fd67 	bl	800192a <AddCrc16Checksumm>
}
 8002e5c:	bf00      	nop
 8002e5e:	3770      	adds	r7, #112	; 0x70
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20001e5c 	.word	0x20001e5c
 8002e68:	20001d90 	.word	0x20001d90
 8002e6c:	200020d4 	.word	0x200020d4

08002e70 <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002e78:	23ff      	movs	r3, #255	; 0xff
 8002e7a:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002e7c:	23aa      	movs	r3, #170	; 0xaa
 8002e7e:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 8002e80:	23bb      	movs	r3, #187	; 0xbb
 8002e82:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f107 0308 	add.w	r3, r7, #8
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	6010      	str	r0, [r2, #0]
 8002e90:	889b      	ldrh	r3, [r3, #4]
 8002e92:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e94:	2106      	movs	r1, #6
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fd47 	bl	800192a <AddCrc16Checksumm>
}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)&&(ReceiveBuf[1] != 0x01)&&(ReceiveBuf[2] != 0x08)&&(ReceiveBuf[3] != 0x01))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2bfa      	cmp	r3, #250	; 0xfa
 8002eb2:	d00e      	beq.n	8002ed2 <ImuReceive+0x2e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d009      	beq.n	8002ed2 <ImuReceive+0x2e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d004      	beq.n	8002ed2 <ImuReceive+0x2e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3303      	adds	r3, #3
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d152      	bne.n	8002f78 <ImuReceive+0xd4>
		 return;


	 rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	331c      	adds	r3, #28
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	b21a      	sxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	331d      	adds	r3, #29
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <ImuReceive+0xe0>)
 8002eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	 //crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
	 uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	211b      	movs	r1, #27
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f848 	bl	8002f8c <calculateCRC>
 8002efc:	4603      	mov	r3, r0
 8002efe:	81fb      	strh	r3, [r7, #14]
	 if (rSensors.crc != calculated_crc)
 8002f00:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <ImuReceive+0xe0>)
 8002f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f06:	89fa      	ldrh	r2, [r7, #14]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d137      	bne.n	8002f7c <ImuReceive+0xd8>
		 return;



  	  memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <ImuReceive+0xe0>)
 8002f16:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <ImuReceive+0xe0>)
 8002f22:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	330c      	adds	r3, #12
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <ImuReceive+0xe0>)
 8002f2e:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.accelX, ReceiveBuf + 16, sizeof(rSensors.accelX));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3310      	adds	r3, #16
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <ImuReceive+0xe0>)
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
  	  memcpy(&rSensors.accelY, ReceiveBuf + 20, sizeof(rSensors.accelY));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3314      	adds	r3, #20
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <ImuReceive+0xe0>)
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
  	  memcpy(&rSensors.accelZ, ReceiveBuf + 24, sizeof(rSensors.accelZ));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <ImuReceive+0xe0>)
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30



    rSensors.LastTick = xTaskGetTickCount();
 8002f54:	f00b fa92 	bl	800e47c <xTaskGetTickCount>
 8002f58:	ee07 0a90 	vmov	s15, r0
 8002f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <ImuReceive+0xe0>)
 8002f62:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <ImuReceive+0xe4>)
 8002f68:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <ImuReceive+0xe4>)
 8002f72:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002f76:	e002      	b.n	8002f7e <ImuReceive+0xda>
		 return;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <ImuReceive+0xda>
		 return;
 8002f7c:	bf00      	nop
}
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20001e5c 	.word	0x20001e5c
 8002f88:	200001f4 	.word	0x200001f4

08002f8c <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e030      	b.n	8003002 <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 8002fa0:	897b      	ldrh	r3, [r7, #10]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	897b      	ldrh	r3, [r7, #10]
 8002fc2:	4053      	eors	r3, r2
 8002fc4:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	897b      	ldrh	r3, [r7, #10]
 8002fd2:	4053      	eors	r3, r2
 8002fd4:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	031b      	lsls	r3, r3, #12
 8002fda:	b21a      	sxth	r2, r3
 8002fdc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fe0:	4053      	eors	r3, r2
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 8002fe6:	897b      	ldrh	r3, [r7, #10]
 8002fe8:	015b      	lsls	r3, r3, #5
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 8002ff0:	b21a      	sxth	r2, r3
 8002ff2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ff6:	4053      	eors	r3, r2
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d3ca      	bcc.n	8002fa0 <calculateCRC+0x14>
    }
    return crc;
 800300a:	897b      	ldrh	r3, [r7, #10]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <MX_DMA_Init+0x88>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4a1f      	ldr	r2, [pc, #124]	; (80030a0 <MX_DMA_Init+0x88>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6153      	str	r3, [r2, #20]
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <MX_DMA_Init+0x88>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2105      	movs	r1, #5
 800303a:	200c      	movs	r0, #12
 800303c:	f003 f80c 	bl	8006058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003040:	200c      	movs	r0, #12
 8003042:	f003 f825 	bl	8006090 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2105      	movs	r1, #5
 800304a:	200d      	movs	r0, #13
 800304c:	f003 f804 	bl	8006058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003050:	200d      	movs	r0, #13
 8003052:	f003 f81d 	bl	8006090 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2105      	movs	r1, #5
 800305a:	200e      	movs	r0, #14
 800305c:	f002 fffc 	bl	8006058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003060:	200e      	movs	r0, #14
 8003062:	f003 f815 	bl	8006090 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2105      	movs	r1, #5
 800306a:	200f      	movs	r0, #15
 800306c:	f002 fff4 	bl	8006058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003070:	200f      	movs	r0, #15
 8003072:	f003 f80d 	bl	8006090 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2105      	movs	r1, #5
 800307a:	2010      	movs	r0, #16
 800307c:	f002 ffec 	bl	8006058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003080:	2010      	movs	r0, #16
 8003082:	f003 f805 	bl	8006090 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2105      	movs	r1, #5
 800308a:	2011      	movs	r0, #17
 800308c:	f002 ffe4 	bl	8006058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003090:	2011      	movs	r0, #17
 8003092:	f002 fffd 	bl	8006090 <HAL_NVIC_EnableIRQ>

}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000

080030a4 <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <flashReadSettings+0x44>)
 80030ae:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030b4:	2300      	movs	r3, #0
 80030b6:	81fb      	strh	r3, [r7, #14]
 80030b8:	e00c      	b.n	80030d4 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	601a      	str	r2, [r3, #0]
		source_addr++;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3304      	adds	r3, #4
 80030c6:	617b      	str	r3, [r7, #20]
		dest_addr++;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	3304      	adds	r3, #4
 80030cc:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030ce:	89fb      	ldrh	r3, [r7, #14]
 80030d0:	3301      	adds	r3, #1
 80030d2:	81fb      	strh	r3, [r7, #14]
 80030d4:	89fb      	ldrh	r3, [r7, #14]
 80030d6:	2b89      	cmp	r3, #137	; 0x89
 80030d8:	d9ef      	bls.n	80030ba <flashReadSettings+0x16>
	}
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	0803f800 	.word	0x0803f800

080030ec <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 80030f4:	f003 fa82 	bl	80065fc <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_PAGES; // erase only 1 page
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <flashWriteSettings+0x70>)
 80030fe:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 8003100:	2301      	movs	r3, #1
 8003102:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 8003104:	f107 020c 	add.w	r2, r7, #12
 8003108:	f107 0310 	add.w	r3, r7, #16
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fb38 	bl	8006784 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <flashWriteSettings+0x70>)
 800311a:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e013      	b.n	800314a <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 8003122:	6a39      	ldr	r1, [r7, #32]
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2200      	movs	r2, #0
 800312a:	461c      	mov	r4, r3
 800312c:	4615      	mov	r5, r2
 800312e:	4622      	mov	r2, r4
 8003130:	462b      	mov	r3, r5
 8003132:	2002      	movs	r0, #2
 8003134:	f003 f9f2 	bl	800651c <HAL_FLASH_Program>
		source_addr++;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	3304      	adds	r3, #4
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	3304      	adds	r3, #4
 8003142:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003144:	7ffb      	ldrb	r3, [r7, #31]
 8003146:	3301      	adds	r3, #1
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	7ffb      	ldrb	r3, [r7, #31]
 800314c:	2b89      	cmp	r3, #137	; 0x89
 800314e:	d9e8      	bls.n	8003122 <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 8003150:	f003 fa7a 	bl	8006648 <HAL_FLASH_Lock>
}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bdb0      	pop	{r4, r5, r7, pc}
 800315c:	0803f800 	.word	0x0803f800

08003160 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	22aa      	movs	r2, #170	; 0xaa
 800316c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
 8003172:	e154      	b.n	800341e <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8003174:	7bf9      	ldrb	r1, [r7, #15]
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	48ae      	ldr	r0, [pc, #696]	; (8003434 <flashFillStructure+0x2d4>)
 800317a:	460b      	mov	r3, r1
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4403      	add	r3, r0
 8003184:	3304      	adds	r3, #4
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3301      	adds	r3, #1
 8003196:	4602      	mov	r2, r0
 8003198:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 800319a:	7bf9      	ldrb	r1, [r7, #15]
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	48a5      	ldr	r0, [pc, #660]	; (8003434 <flashFillStructure+0x2d4>)
 80031a0:	460b      	mov	r3, r1
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4403      	add	r3, r0
 80031aa:	3308      	adds	r3, #8
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3305      	adds	r3, #5
 80031bc:	4602      	mov	r2, r0
 80031be:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 80031c0:	7bf9      	ldrb	r1, [r7, #15]
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	489b      	ldr	r0, [pc, #620]	; (8003434 <flashFillStructure+0x2d4>)
 80031c6:	460b      	mov	r3, r1
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4403      	add	r3, r0
 80031d0:	330c      	adds	r3, #12
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3308      	adds	r3, #8
 80031e2:	3301      	adds	r3, #1
 80031e4:	4602      	mov	r2, r0
 80031e6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 80031e8:	7bf9      	ldrb	r1, [r7, #15]
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	4891      	ldr	r0, [pc, #580]	; (8003434 <flashFillStructure+0x2d4>)
 80031ee:	460b      	mov	r3, r1
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4403      	add	r3, r0
 80031f8:	3310      	adds	r3, #16
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3308      	adds	r3, #8
 800320a:	3305      	adds	r3, #5
 800320c:	4602      	mov	r2, r0
 800320e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 8003210:	7bf9      	ldrb	r1, [r7, #15]
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	4887      	ldr	r0, [pc, #540]	; (8003434 <flashFillStructure+0x2d4>)
 8003216:	460b      	mov	r3, r1
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4403      	add	r3, r0
 8003220:	3318      	adds	r3, #24
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	3310      	adds	r3, #16
 8003232:	3301      	adds	r3, #1
 8003234:	4602      	mov	r2, r0
 8003236:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 8003238:	7bf9      	ldrb	r1, [r7, #15]
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	487d      	ldr	r0, [pc, #500]	; (8003434 <flashFillStructure+0x2d4>)
 800323e:	460b      	mov	r3, r1
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4403      	add	r3, r0
 8003248:	3314      	adds	r3, #20
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3310      	adds	r3, #16
 800325a:	3305      	adds	r3, #5
 800325c:	4602      	mov	r2, r0
 800325e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8003260:	7bf9      	ldrb	r1, [r7, #15]
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	4873      	ldr	r0, [pc, #460]	; (8003434 <flashFillStructure+0x2d4>)
 8003266:	460b      	mov	r3, r1
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4403      	add	r3, r0
 8003270:	331c      	adds	r3, #28
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	3318      	adds	r3, #24
 8003282:	3301      	adds	r3, #1
 8003284:	4602      	mov	r2, r0
 8003286:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8003288:	7bf9      	ldrb	r1, [r7, #15]
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	4869      	ldr	r0, [pc, #420]	; (8003434 <flashFillStructure+0x2d4>)
 800328e:	460b      	mov	r3, r1
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4403      	add	r3, r0
 8003298:	3328      	adds	r3, #40	; 0x28
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3318      	adds	r3, #24
 80032aa:	3305      	adds	r3, #5
 80032ac:	4602      	mov	r2, r0
 80032ae:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 80032b0:	7bf9      	ldrb	r1, [r7, #15]
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	485f      	ldr	r0, [pc, #380]	; (8003434 <flashFillStructure+0x2d4>)
 80032b6:	460b      	mov	r3, r1
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4403      	add	r3, r0
 80032c0:	332c      	adds	r3, #44	; 0x2c
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3320      	adds	r3, #32
 80032d2:	3301      	adds	r3, #1
 80032d4:	4602      	mov	r2, r0
 80032d6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 80032d8:	7bf9      	ldrb	r1, [r7, #15]
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	4855      	ldr	r0, [pc, #340]	; (8003434 <flashFillStructure+0x2d4>)
 80032de:	460b      	mov	r3, r1
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4403      	add	r3, r0
 80032e8:	3330      	adds	r3, #48	; 0x30
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3320      	adds	r3, #32
 80032fa:	3305      	adds	r3, #5
 80032fc:	4602      	mov	r2, r0
 80032fe:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8003300:	7bf9      	ldrb	r1, [r7, #15]
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	484b      	ldr	r0, [pc, #300]	; (8003434 <flashFillStructure+0x2d4>)
 8003306:	460b      	mov	r3, r1
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4403      	add	r3, r0
 8003310:	3334      	adds	r3, #52	; 0x34
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3328      	adds	r3, #40	; 0x28
 8003322:	3301      	adds	r3, #1
 8003324:	4602      	mov	r2, r0
 8003326:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 8003328:	7bf9      	ldrb	r1, [r7, #15]
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	4841      	ldr	r0, [pc, #260]	; (8003434 <flashFillStructure+0x2d4>)
 800332e:	460b      	mov	r3, r1
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4403      	add	r3, r0
 8003338:	3338      	adds	r3, #56	; 0x38
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3328      	adds	r3, #40	; 0x28
 800334a:	3305      	adds	r3, #5
 800334c:	4602      	mov	r2, r0
 800334e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 8003350:	7bf9      	ldrb	r1, [r7, #15]
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	4837      	ldr	r0, [pc, #220]	; (8003434 <flashFillStructure+0x2d4>)
 8003356:	460b      	mov	r3, r1
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4403      	add	r3, r0
 8003360:	333c      	adds	r3, #60	; 0x3c
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3330      	adds	r3, #48	; 0x30
 8003372:	3301      	adds	r3, #1
 8003374:	4602      	mov	r2, r0
 8003376:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 8003378:	7bf9      	ldrb	r1, [r7, #15]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	482d      	ldr	r0, [pc, #180]	; (8003434 <flashFillStructure+0x2d4>)
 800337e:	460b      	mov	r3, r1
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4403      	add	r3, r0
 8003388:	3320      	adds	r3, #32
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3330      	adds	r3, #48	; 0x30
 800339a:	3305      	adds	r3, #5
 800339c:	4602      	mov	r2, r0
 800339e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 80033a0:	7bf9      	ldrb	r1, [r7, #15]
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	4823      	ldr	r0, [pc, #140]	; (8003434 <flashFillStructure+0x2d4>)
 80033a6:	460b      	mov	r3, r1
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4403      	add	r3, r0
 80033b0:	3324      	adds	r3, #36	; 0x24
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3338      	adds	r3, #56	; 0x38
 80033c2:	3301      	adds	r3, #1
 80033c4:	4602      	mov	r2, r0
 80033c6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 80033c8:	7bf9      	ldrb	r1, [r7, #15]
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	4819      	ldr	r0, [pc, #100]	; (8003434 <flashFillStructure+0x2d4>)
 80033ce:	460b      	mov	r3, r1
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4403      	add	r3, r0
 80033d8:	3340      	adds	r3, #64	; 0x40
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3338      	adds	r3, #56	; 0x38
 80033ea:	3305      	adds	r3, #5
 80033ec:	4602      	mov	r2, r0
 80033ee:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 80033f0:	7bf9      	ldrb	r1, [r7, #15]
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	480f      	ldr	r0, [pc, #60]	; (8003434 <flashFillStructure+0x2d4>)
 80033f6:	460b      	mov	r3, r1
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4403      	add	r3, r0
 8003400:	3344      	adds	r3, #68	; 0x44
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3340      	adds	r3, #64	; 0x40
 8003412:	3301      	adds	r3, #1
 8003414:	4602      	mov	r2, r0
 8003416:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	3301      	adds	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b05      	cmp	r3, #5
 8003422:	f67f aea7 	bls.w	8003174 <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	20001f24 	.word	0x20001f24

08003438 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e165      	b.n	8003712 <flashReadStructure+0x2da>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	7bf9      	ldrb	r1, [r7, #15]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4403      	add	r3, r0
 8003456:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800345a:	4613      	mov	r3, r2
 800345c:	461a      	mov	r2, r3
 800345e:	48b7      	ldr	r0, [pc, #732]	; (800373c <flashReadStructure+0x304>)
 8003460:	460b      	mov	r3, r1
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4403      	add	r3, r0
 800346a:	3304      	adds	r3, #4
 800346c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	7bf9      	ldrb	r1, [r7, #15]
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4403      	add	r3, r0
 800347e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003482:	4613      	mov	r3, r2
 8003484:	461a      	mov	r2, r3
 8003486:	48ad      	ldr	r0, [pc, #692]	; (800373c <flashReadStructure+0x304>)
 8003488:	460b      	mov	r3, r1
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4403      	add	r3, r0
 8003492:	3308      	adds	r3, #8
 8003494:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	7bf9      	ldrb	r1, [r7, #15]
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4403      	add	r3, r0
 80034a6:	3308      	adds	r3, #8
 80034a8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80034ac:	4613      	mov	r3, r2
 80034ae:	461a      	mov	r2, r3
 80034b0:	48a2      	ldr	r0, [pc, #648]	; (800373c <flashReadStructure+0x304>)
 80034b2:	460b      	mov	r3, r1
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	440b      	add	r3, r1
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4403      	add	r3, r0
 80034bc:	330c      	adds	r3, #12
 80034be:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	7bf9      	ldrb	r1, [r7, #15]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4403      	add	r3, r0
 80034d0:	3308      	adds	r3, #8
 80034d2:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80034d6:	4613      	mov	r3, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4898      	ldr	r0, [pc, #608]	; (800373c <flashReadStructure+0x304>)
 80034dc:	460b      	mov	r3, r1
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	440b      	add	r3, r1
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4403      	add	r3, r0
 80034e6:	3310      	adds	r3, #16
 80034e8:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	7bf9      	ldrb	r1, [r7, #15]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4403      	add	r3, r0
 80034fa:	3310      	adds	r3, #16
 80034fc:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003500:	4613      	mov	r3, r2
 8003502:	461a      	mov	r2, r3
 8003504:	488d      	ldr	r0, [pc, #564]	; (800373c <flashReadStructure+0x304>)
 8003506:	460b      	mov	r3, r1
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4403      	add	r3, r0
 8003510:	3318      	adds	r3, #24
 8003512:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	7bf9      	ldrb	r1, [r7, #15]
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4403      	add	r3, r0
 8003524:	3310      	adds	r3, #16
 8003526:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800352a:	4613      	mov	r3, r2
 800352c:	461a      	mov	r2, r3
 800352e:	4883      	ldr	r0, [pc, #524]	; (800373c <flashReadStructure+0x304>)
 8003530:	460b      	mov	r3, r1
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4403      	add	r3, r0
 800353a:	3314      	adds	r3, #20
 800353c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	7bf9      	ldrb	r1, [r7, #15]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	3318      	adds	r3, #24
 8003550:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003554:	4613      	mov	r3, r2
 8003556:	461a      	mov	r2, r3
 8003558:	4878      	ldr	r0, [pc, #480]	; (800373c <flashReadStructure+0x304>)
 800355a:	460b      	mov	r3, r1
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4403      	add	r3, r0
 8003564:	331c      	adds	r3, #28
 8003566:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	7bf9      	ldrb	r1, [r7, #15]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4403      	add	r3, r0
 8003578:	3318      	adds	r3, #24
 800357a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800357e:	4613      	mov	r3, r2
 8003580:	461a      	mov	r2, r3
 8003582:	486e      	ldr	r0, [pc, #440]	; (800373c <flashReadStructure+0x304>)
 8003584:	460b      	mov	r3, r1
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4403      	add	r3, r0
 800358e:	3328      	adds	r3, #40	; 0x28
 8003590:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	7bf9      	ldrb	r1, [r7, #15]
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4403      	add	r3, r0
 80035a2:	3320      	adds	r3, #32
 80035a4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80035a8:	4613      	mov	r3, r2
 80035aa:	461a      	mov	r2, r3
 80035ac:	4863      	ldr	r0, [pc, #396]	; (800373c <flashReadStructure+0x304>)
 80035ae:	460b      	mov	r3, r1
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4403      	add	r3, r0
 80035b8:	332c      	adds	r3, #44	; 0x2c
 80035ba:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	7bf9      	ldrb	r1, [r7, #15]
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4403      	add	r3, r0
 80035cc:	3320      	adds	r3, #32
 80035ce:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80035d2:	4613      	mov	r3, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	4859      	ldr	r0, [pc, #356]	; (800373c <flashReadStructure+0x304>)
 80035d8:	460b      	mov	r3, r1
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4403      	add	r3, r0
 80035e2:	3330      	adds	r3, #48	; 0x30
 80035e4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	7bf9      	ldrb	r1, [r7, #15]
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4403      	add	r3, r0
 80035f6:	3328      	adds	r3, #40	; 0x28
 80035f8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80035fc:	4613      	mov	r3, r2
 80035fe:	461a      	mov	r2, r3
 8003600:	484e      	ldr	r0, [pc, #312]	; (800373c <flashReadStructure+0x304>)
 8003602:	460b      	mov	r3, r1
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	440b      	add	r3, r1
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4403      	add	r3, r0
 800360c:	3334      	adds	r3, #52	; 0x34
 800360e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	7bf9      	ldrb	r1, [r7, #15]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4403      	add	r3, r0
 8003620:	3328      	adds	r3, #40	; 0x28
 8003622:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003626:	4613      	mov	r3, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4844      	ldr	r0, [pc, #272]	; (800373c <flashReadStructure+0x304>)
 800362c:	460b      	mov	r3, r1
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4403      	add	r3, r0
 8003636:	3338      	adds	r3, #56	; 0x38
 8003638:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	7bf9      	ldrb	r1, [r7, #15]
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4403      	add	r3, r0
 800364a:	3330      	adds	r3, #48	; 0x30
 800364c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003650:	4613      	mov	r3, r2
 8003652:	461a      	mov	r2, r3
 8003654:	4839      	ldr	r0, [pc, #228]	; (800373c <flashReadStructure+0x304>)
 8003656:	460b      	mov	r3, r1
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4403      	add	r3, r0
 8003660:	333c      	adds	r3, #60	; 0x3c
 8003662:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	7bf9      	ldrb	r1, [r7, #15]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4403      	add	r3, r0
 8003674:	3330      	adds	r3, #48	; 0x30
 8003676:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800367a:	4613      	mov	r3, r2
 800367c:	461a      	mov	r2, r3
 800367e:	482f      	ldr	r0, [pc, #188]	; (800373c <flashReadStructure+0x304>)
 8003680:	460b      	mov	r3, r1
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4403      	add	r3, r0
 800368a:	3320      	adds	r3, #32
 800368c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	7bf9      	ldrb	r1, [r7, #15]
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4403      	add	r3, r0
 800369e:	3338      	adds	r3, #56	; 0x38
 80036a0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80036a4:	4613      	mov	r3, r2
 80036a6:	461a      	mov	r2, r3
 80036a8:	4824      	ldr	r0, [pc, #144]	; (800373c <flashReadStructure+0x304>)
 80036aa:	460b      	mov	r3, r1
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4403      	add	r3, r0
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	7bf9      	ldrb	r1, [r7, #15]
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4403      	add	r3, r0
 80036c8:	3338      	adds	r3, #56	; 0x38
 80036ca:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80036ce:	4613      	mov	r3, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	481a      	ldr	r0, [pc, #104]	; (800373c <flashReadStructure+0x304>)
 80036d4:	460b      	mov	r3, r1
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	440b      	add	r3, r1
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4403      	add	r3, r0
 80036de:	3340      	adds	r3, #64	; 0x40
 80036e0:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	7bf9      	ldrb	r1, [r7, #15]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4403      	add	r3, r0
 80036f2:	3340      	adds	r3, #64	; 0x40
 80036f4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80036f8:	4613      	mov	r3, r2
 80036fa:	461a      	mov	r2, r3
 80036fc:	480f      	ldr	r0, [pc, #60]	; (800373c <flashReadStructure+0x304>)
 80036fe:	460b      	mov	r3, r1
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	440b      	add	r3, r1
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4403      	add	r3, r0
 8003708:	3344      	adds	r3, #68	; 0x44
 800370a:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	3301      	adds	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b05      	cmp	r3, #5
 8003716:	f67f ae96 	bls.w	8003446 <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2baa      	cmp	r3, #170	; 0xaa
 8003720:	d103      	bne.n	800372a <flashReadStructure+0x2f2>
		rState.flash = true;
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <flashReadStructure+0x308>)
 8003724:	2201      	movs	r2, #1
 8003726:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 8003728:	e002      	b.n	8003730 <flashReadStructure+0x2f8>
		rState.flash = false;
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <flashReadStructure+0x308>)
 800372c:	2200      	movs	r2, #0
 800372e:	709a      	strb	r2, [r3, #2]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	20001f24 	.word	0x20001f24
 8003740:	20001d90 	.word	0x20001d90

08003744 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <vApplicationGetIdleTaskMemory+0x2c>)
 8003754:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a06      	ldr	r2, [pc, #24]	; (8003774 <vApplicationGetIdleTaskMemory+0x30>)
 800375a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20001630 	.word	0x20001630
 8003774:	200016e0 	.word	0x200016e0

08003778 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003788:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <vApplicationGetTimerTaskMemory+0x30>)
 800378e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003796:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	200018e0 	.word	0x200018e0
 80037a8:	20001990 	.word	0x20001990

080037ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b0bc      	sub	sp, #240	; 0xf0
 80037b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 80037b2:	f7fe fa85 	bl	8001cc0 <uartBusesInit>
    i2cBusesInit();
 80037b6:	f7fe fb81 	bl	8001ebc <i2cBusesInit>
    variableInit();
 80037ba:	f7fe f9e1 	bl	8001b80 <variableInit>
    stabilizationInit();
 80037be:	f000 fddf 	bl	8004380 <stabilizationInit>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 80037c2:	2300      	movs	r3, #0
 80037c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037c8:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <MX_FREERTOS_Init+0x1f8>)
 80037ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 80037ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f009 fb70 	bl	800ceb8 <osMutexCreate>
 80037d8:	4603      	mov	r3, r0
 80037da:	4a73      	ldr	r2, [pc, #460]	; (80039a8 <MX_FREERTOS_Init+0x1fc>)
 80037dc:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 80037de:	4b73      	ldr	r3, [pc, #460]	; (80039ac <MX_FREERTOS_Init+0x200>)
 80037e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 80037ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f009 fb2c 	bl	800ce50 <osTimerCreate>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4a6d      	ldr	r2, [pc, #436]	; (80039b0 <MX_FREERTOS_Init+0x204>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 80037fe:	4b6d      	ldr	r3, [pc, #436]	; (80039b4 <MX_FREERTOS_Init+0x208>)
 8003800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 800380a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f009 fb1c 	bl	800ce50 <osTimerCreate>
 8003818:	4603      	mov	r3, r0
 800381a:	4a67      	ldr	r2, [pc, #412]	; (80039b8 <MX_FREERTOS_Init+0x20c>)
 800381c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTImer */
  osTimerDef(tTechCommTImer, tTechCommTImer_callback);
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <MX_FREERTOS_Init+0x210>)
 8003820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  tTechCommTImerHandle = osTimerCreate(osTimer(tTechCommTImer), osTimerOnce, NULL);
 800382a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f009 fb0c 	bl	800ce50 <osTimerCreate>
 8003838:	4603      	mov	r3, r0
 800383a:	4a61      	ldr	r2, [pc, #388]	; (80039c0 <MX_FREERTOS_Init+0x214>)
 800383c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 800383e:	4b5d      	ldr	r3, [pc, #372]	; (80039b4 <MX_FREERTOS_Init+0x208>)
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	2200      	movs	r2, #0
 8003846:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800384a:	485e      	ldr	r0, [pc, #376]	; (80039c4 <MX_FREERTOS_Init+0x218>)
 800384c:	f00b fbfa 	bl	800f044 <xTimerCreate>
 8003850:	4603      	mov	r3, r0
 8003852:	4a5d      	ldr	r2, [pc, #372]	; (80039c8 <MX_FREERTOS_Init+0x21c>)
 8003854:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 8003856:	4b55      	ldr	r3, [pc, #340]	; (80039ac <MX_FREERTOS_Init+0x200>)
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2300      	movs	r3, #0
 800385c:	2200      	movs	r2, #0
 800385e:	211e      	movs	r1, #30
 8003860:	485a      	ldr	r0, [pc, #360]	; (80039cc <MX_FREERTOS_Init+0x220>)
 8003862:	f00b fbef 	bl	800f044 <xTimerCreate>
 8003866:	4603      	mov	r3, r0
 8003868:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <MX_FREERTOS_Init+0x224>)
 800386a:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 800386c:	4b56      	ldr	r3, [pc, #344]	; (80039c8 <MX_FREERTOS_Init+0x21c>)
 800386e:	681c      	ldr	r4, [r3, #0]
 8003870:	f00a fe04 	bl	800e47c <xTaskGetTickCount>
 8003874:	4602      	mov	r2, r0
 8003876:	230a      	movs	r3, #10
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	2101      	movs	r1, #1
 800387e:	4620      	mov	r0, r4
 8003880:	f00b fc70 	bl	800f164 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 8003884:	4b53      	ldr	r3, [pc, #332]	; (80039d4 <MX_FREERTOS_Init+0x228>)
 8003886:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800388a:	461d      	mov	r5, r3
 800388c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800388e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003890:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 8003898:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f009 fa76 	bl	800cd90 <osThreadCreate>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <MX_FREERTOS_Init+0x22c>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityBelowNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 80038aa:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <MX_FREERTOS_Init+0x230>)
 80038ac:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80038b0:	461d      	mov	r5, r3
 80038b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 80038be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f009 fa63 	bl	800cd90 <osThreadCreate>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4a44      	ldr	r2, [pc, #272]	; (80039e0 <MX_FREERTOS_Init+0x234>)
 80038ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityBelowNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 80038d0:	4b44      	ldr	r3, [pc, #272]	; (80039e4 <MX_FREERTOS_Init+0x238>)
 80038d2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80038d6:	461d      	mov	r5, r3
 80038d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 80038e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f009 fa50 	bl	800cd90 <osThreadCreate>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4a3d      	ldr	r2, [pc, #244]	; (80039e8 <MX_FREERTOS_Init+0x23c>)
 80038f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityBelowNormal, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 80038f6:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <MX_FREERTOS_Init+0x240>)
 80038f8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80038fc:	461d      	mov	r5, r3
 80038fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003902:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 800390a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f009 fa3d 	bl	800cd90 <osThreadCreate>
 8003916:	4603      	mov	r3, r0
 8003918:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <MX_FREERTOS_Init+0x244>)
 800391a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityBelowNormal, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 800391c:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <MX_FREERTOS_Init+0x248>)
 800391e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003922:	461d      	mov	r5, r3
 8003924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003928:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800392c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 8003930:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f009 fa2a 	bl	800cd90 <osThreadCreate>
 800393c:	4603      	mov	r3, r0
 800393e:	4a2e      	ldr	r2, [pc, #184]	; (80039f8 <MX_FREERTOS_Init+0x24c>)
 8003940:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityBelowNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 8003942:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <MX_FREERTOS_Init+0x250>)
 8003944:	f107 0420 	add.w	r4, r7, #32
 8003948:	461d      	mov	r5, r3
 800394a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800394c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800394e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 8003956:	f107 0320 	add.w	r3, r7, #32
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f009 fa17 	bl	800cd90 <osThreadCreate>
 8003962:	4603      	mov	r3, r0
 8003964:	4a26      	ldr	r2, [pc, #152]	; (8003a00 <MX_FREERTOS_Init+0x254>)
 8003966:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityBelowNormal, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 8003968:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <MX_FREERTOS_Init+0x258>)
 800396a:	1d3c      	adds	r4, r7, #4
 800396c:	461d      	mov	r5, r3
 800396e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003972:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f009 fa06 	bl	800cd90 <osThreadCreate>
 8003984:	4603      	mov	r3, r0
 8003986:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <MX_FREERTOS_Init+0x25c>)
 8003988:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <MX_FREERTOS_Init+0x260>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <MX_FREERTOS_Init+0x260>)
 8003990:	6811      	ldr	r1, [r2, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f007 fabd 	bl	800af14 <HAL_UART_Receive_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800399a:	bf00      	nop
 800399c:	37e8      	adds	r7, #232	; 0xe8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bdb0      	pop	{r4, r5, r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200015e8 	.word	0x200015e8
 80039a8:	200015e4 	.word	0x200015e4
 80039ac:	08003e11 	.word	0x08003e11
 80039b0:	200015d8 	.word	0x200015d8
 80039b4:	08003f1d 	.word	0x08003f1d
 80039b8:	200015dc 	.word	0x200015dc
 80039bc:	08003ff1 	.word	0x08003ff1
 80039c0:	200015e0 	.word	0x200015e0
 80039c4:	08010838 	.word	0x08010838
 80039c8:	200002e8 	.word	0x200002e8
 80039cc:	08010840 	.word	0x08010840
 80039d0:	200002e4 	.word	0x200002e4
 80039d4:	0801085c 	.word	0x0801085c
 80039d8:	200002ec 	.word	0x200002ec
 80039dc:	08010888 	.word	0x08010888
 80039e0:	200005a0 	.word	0x200005a0
 80039e4:	080108b4 	.word	0x080108b4
 80039e8:	20000854 	.word	0x20000854
 80039ec:	080108e4 	.word	0x080108e4
 80039f0:	20000b08 	.word	0x20000b08
 80039f4:	08010910 	.word	0x08010910
 80039f8:	20000dbc 	.word	0x20000dbc
 80039fc:	0801093c 	.word	0x0801093c
 8003a00:	20001070 	.word	0x20001070
 8003a04:	08010964 	.word	0x08010964
 8003a08:	20001324 	.word	0x20001324
 8003a0c:	200001f4 	.word	0x200001f4

08003a10 <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 8003a18:	f009 f9aa 	bl	800cd70 <osKernelSysTick>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8003a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a24:	4811      	ldr	r0, [pc, #68]	; (8003a6c <func_tLedBlinkingTask+0x5c>)
 8003a26:	f003 f8e3 	bl	8006bf0 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a2a:	f107 030c 	add.w	r3, r7, #12
 8003a2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f009 fa58 	bl	800cee8 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8003a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a3c:	480b      	ldr	r0, [pc, #44]	; (8003a6c <func_tLedBlinkingTask+0x5c>)
 8003a3e:	f003 f8d7 	bl	8006bf0 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f009 fa4c 	bl	800cee8 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 8003a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <func_tLedBlinkingTask+0x5c>)
 8003a56:	f003 f8cb 	bl	8006bf0 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a62:	4618      	mov	r0, r3
 8003a64:	f009 fa40 	bl	800cee8 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8003a68:	e7da      	b.n	8003a20 <func_tLedBlinkingTask+0x10>
 8003a6a:	bf00      	nop
 8003a6c:	48000400 	.word	0x48000400

08003a70 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003a78:	f009 f97a 	bl	800cd70 <osKernelSysTick>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 8003a84:	2201      	movs	r2, #1
 8003a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8e:	f003 f897 	bl	8006bc0 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003a92:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <func_tVmaCommTask+0xd4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2114      	movs	r1, #20
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f009 feef 	bl	800d87c <xQueueSemaphoreTake>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10b      	bne.n	8003abc <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4827      	ldr	r0, [pc, #156]	; (8003b48 <func_tVmaCommTask+0xd8>)
 8003aaa:	f001 fcc7 	bl	800543c <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 8003aae:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <func_tVmaCommTask+0xd4>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f009 fc6a 	bl	800d390 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <func_tVmaCommTask+0xdc>)
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <func_tVmaCommTask+0xd8>)
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <func_tVmaCommTask+0xdc>)
 8003ac4:	220d      	movs	r2, #13
 8003ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <func_tVmaCommTask+0xe0>)
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <func_tVmaCommTask+0xdc>)
 8003ad8:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8003ada:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <func_tVmaCommTask+0xdc>)
 8003adc:	2209      	movs	r2, #9
 8003ade:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	481b      	ldr	r0, [pc, #108]	; (8003b54 <func_tVmaCommTask+0xe4>)
 8003ae6:	f7fe fa61 	bl	8001fac <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <func_tVmaCommTask+0xd4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2114      	movs	r1, #20
 8003af0:	4618      	mov	r0, r3
 8003af2:	f009 fec3 	bl	800d87c <xQueueSemaphoreTake>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d111      	bne.n	8003b20 <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <func_tVmaCommTask+0xe0>)
 8003b06:	4413      	add	r3, r2
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fd0f 	bl	8005530 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <func_tVmaCommTask+0xd4>)
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f009 fc38 	bl	800d390 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	3301      	adds	r3, #1
 8003b24:	425a      	negs	r2, r3
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	f002 0207 	and.w	r2, r2, #7
 8003b2e:	bf58      	it	pl
 8003b30:	4253      	negpl	r3, r2
 8003b32:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 8003b34:	f107 0308 	add.w	r3, r7, #8
 8003b38:	2114      	movs	r1, #20
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f009 f9d4 	bl	800cee8 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003b40:	e7a7      	b.n	8003a92 <func_tVmaCommTask+0x22>
 8003b42:	bf00      	nop
 8003b44:	200015e4 	.word	0x200015e4
 8003b48:	200023bc 	.word	0x200023bc
 8003b4c:	200001f4 	.word	0x200001f4
 8003b50:	200023cc 	.word	0x200023cc
 8003b54:	2000022c 	.word	0x2000022c

08003b58 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003b60:	f009 f906 	bl	800cd70 <osKernelSysTick>
 8003b64:	4603      	mov	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.startIMU) {
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <func_tImuCommTask+0xc8>)
 8003b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 8003b72:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003b74:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <func_tImuCommTask+0xd0>)
 8003b76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003b7c:	2214      	movs	r2, #20
 8003b7e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003b82:	2100      	movs	r1, #0
 8003b84:	4829      	ldr	r0, [pc, #164]	; (8003c2c <func_tImuCommTask+0xd4>)
 8003b86:	f7fe f9a7 	bl	8001ed8 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003b8c:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <func_tImuCommTask+0xd8>)
 8003b8e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003b94:	221b      	movs	r2, #27
 8003b96:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4823      	ldr	r0, [pc, #140]	; (8003c2c <func_tImuCommTask+0xd4>)
 8003b9e:	f7fe f99b 	bl	8001ed8 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <func_tImuCommTask+0xc8>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <func_tImuCommTask+0xc8>)
 8003ba8:	65d3      	str	r3, [r2, #92]	; 0x5c
	  		rSensors.startIMU = false;
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <func_tImuCommTask+0xc8>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003bb2:	e02d      	b.n	8003c10 <func_tImuCommTask+0xb8>
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003bb6:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <func_tImuCommTask+0xdc>)
 8003bb8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003bbe:	221e      	movs	r2, #30
 8003bc0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8003bc4:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003bc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003bcc:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <func_tImuCommTask+0xcc>)
 8003bd2:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f007 f99b 	bl	800af14 <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	210a      	movs	r1, #10
 8003be4:	4618      	mov	r0, r3
 8003be6:	f009 f97f 	bl	800cee8 <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <func_tImuCommTask+0xe0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	210a      	movs	r1, #10
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f009 fe43 	bl	800d87c <xQueueSemaphoreTake>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d109      	bne.n	8003c10 <func_tImuCommTask+0xb8>
	  			ImuReceive(ImuResponseBuffer);
 8003bfc:	480d      	ldr	r0, [pc, #52]	; (8003c34 <func_tImuCommTask+0xdc>)
 8003bfe:	f7ff f951 	bl	8002ea4 <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <func_tImuCommTask+0xe0>)
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	f009 fbc0 	bl	800d390 <xQueueGenericSend>
	  		}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	210a      	movs	r1, #10
 8003c16:	4618      	mov	r0, r3
 8003c18:	f009 f966 	bl	800cee8 <osDelayUntil>
	  	if(rSensors.startIMU) {
 8003c1c:	e7a4      	b.n	8003b68 <func_tImuCommTask+0x10>
 8003c1e:	bf00      	nop
 8003c20:	20001e5c 	.word	0x20001e5c
 8003c24:	200001f4 	.word	0x200001f4
 8003c28:	20000024 	.word	0x20000024
 8003c2c:	2000029c 	.word	0x2000029c
 8003c30:	20000008 	.word	0x20000008
 8003c34:	2000239c 	.word	0x2000239c
 8003c38:	200015e4 	.word	0x200015e4

08003c3c <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003c44:	f009 f894 	bl	800cd70 <osKernelSysTick>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <func_tStabilizationTask+0x6c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	210a      	movs	r1, #10
 8003c52:	4618      	mov	r0, r3
 8003c54:	f009 fe12 	bl	800d87c <xQueueSemaphoreTake>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d11d      	bne.n	8003c9a <func_tStabilizationTask+0x5e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
 8003c62:	e010      	b.n	8003c86 <func_tStabilizationTask+0x4a>
				if (rStabConstants[i].enable) {
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	4911      	ldr	r1, [pc, #68]	; (8003cac <func_tStabilizationTask+0x70>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <func_tStabilizationTask+0x44>
					stabilizationUpdate(i);
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 ff66 	bl	8004b4c <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	3301      	adds	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d9eb      	bls.n	8003c64 <func_tStabilizationTask+0x28>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <func_tStabilizationTask+0x6c>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	2300      	movs	r3, #0
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	f009 fb7b 	bl	800d390 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	210a      	movs	r1, #10
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f009 f921 	bl	800cee8 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003ca6:	e7d1      	b.n	8003c4c <func_tStabilizationTask+0x10>
 8003ca8:	200015e4 	.word	0x200015e4
 8003cac:	20001f24 	.word	0x20001f24

08003cb0 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003cb8:	f009 f85a 	bl	800cd70 <osKernelSysTick>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <func_tDevCommTask+0xd0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	210a      	movs	r1, #10
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f009 fdd6 	bl	800d87c <xQueueSemaphoreTake>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10b      	bne.n	8003cee <func_tDevCommTask+0x3e>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	482a      	ldr	r0, [pc, #168]	; (8003d84 <func_tDevCommTask+0xd4>)
 8003cdc:	f7fe fb08 	bl	80022f0 <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <func_tDevCommTask+0xd0>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2100      	movs	r1, #0
 8003cea:	f009 fb51 	bl	800d390 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003cee:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003cf0:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <func_tDevCommTask+0xd4>)
 8003cf2:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <func_tDevCommTask+0xdc>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <func_tDevCommTask+0xd8>)
 8003d10:	220a      	movs	r2, #10
 8003d12:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8003d16:	2100      	movs	r1, #0
 8003d18:	481d      	ldr	r0, [pc, #116]	; (8003d90 <func_tDevCommTask+0xe0>)
 8003d1a:	f7fe f947 	bl	8001fac <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003d1e:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <func_tDevCommTask+0xd0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	210a      	movs	r1, #10
 8003d24:	4618      	mov	r0, r3
 8003d26:	f009 fda9 	bl	800d87c <xQueueSemaphoreTake>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d112      	bne.n	8003d56 <func_tDevCommTask+0xa6>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <func_tDevCommTask+0xdc>)
 8003d3c:	4413      	add	r3, r2
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fb0e 	bl	8002364 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <func_tDevCommTask+0xd0>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2100      	movs	r1, #0
 8003d52:	f009 fb1d 	bl	800d390 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <func_tDevCommTask+0xe4>)
 8003d5c:	fb83 3102 	smull	r3, r1, r3, r2
 8003d60:	17d3      	asrs	r3, r2, #31
 8003d62:	1ac9      	subs	r1, r1, r3
 8003d64:	460b      	mov	r3, r1
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	440b      	add	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	1ad1      	subs	r1, r2, r3
 8003d6e:	460b      	mov	r3, r1
 8003d70:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	210a      	movs	r1, #10
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f009 f8b5 	bl	800cee8 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003d7e:	e7a1      	b.n	8003cc4 <func_tDevCommTask+0x14>
 8003d80:	200015e4 	.word	0x200015e4
 8003d84:	20002414 	.word	0x20002414
 8003d88:	200001f4 	.word	0x200001f4
 8003d8c:	2000241c 	.word	0x2000241c
 8003d90:	20000264 	.word	0x20000264
 8003d94:	2aaaaaab 	.word	0x2aaaaaab

08003d98 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003da0:	f008 ffe6 	bl	800cd70 <osKernelSysTick>
 8003da4:	4603      	mov	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <func_tSensCommTask+0x50>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2164      	movs	r1, #100	; 0x64
 8003dae:	4618      	mov	r0, r3
 8003db0:	f009 fd64 	bl	800d87c <xQueueSemaphoreTake>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d10f      	bne.n	8003dda <func_tSensCommTask+0x42>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
      rSensors.pressure = MS5837_02BA_get_actual_pressure();
 8003dba:	f7fd f97d 	bl	80010b8 <MS5837_02BA_get_actual_pressure>
 8003dbe:	ee07 0a90 	vmov	s15, r0
 8003dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <func_tSensCommTask+0x54>)
 8003dc8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      xSemaphoreGive(mutDataHandle);
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <func_tSensCommTask+0x50>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f009 fadb 	bl	800d390 <xQueueGenericSend>
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // �?справленная задержка
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	2164      	movs	r1, #100	; 0x64
 8003de0:	4618      	mov	r0, r3
 8003de2:	f009 f881 	bl	800cee8 <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003de6:	e7df      	b.n	8003da8 <func_tSensCommTask+0x10>
 8003de8:	200015e4 	.word	0x200015e4
 8003dec:	20001e5c 	.word	0x20001e5c

08003df0 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003df8:	f008 ffba 	bl	800cd70 <osKernelSysTick>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	210a      	movs	r1, #10
 8003e06:	4618      	mov	r0, r3
 8003e08:	f009 f86e 	bl	800cee8 <osDelayUntil>
 8003e0c:	e7f8      	b.n	8003e00 <func_tPcCommTask+0x10>
	...

08003e10 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003e18:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <func_tUartTimer+0x100>)
 8003e1a:	7a1b      	ldrb	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05a      	beq.n	8003ed6 <func_tUartTimer+0xc6>
		bool package = true;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003e24:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <func_tUartTimer+0x104>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2105      	movs	r1, #5
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f009 fd26 	bl	800d87c <xQueueSemaphoreTake>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d140      	bne.n	8003eb8 <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003e36:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <func_tUartTimer+0x100>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2baa      	cmp	r3, #170	; 0xaa
 8003e3e:	d023      	beq.n	8003e88 <func_tUartTimer+0x78>
 8003e40:	2baa      	cmp	r3, #170	; 0xaa
 8003e42:	dc30      	bgt.n	8003ea6 <func_tUartTimer+0x96>
 8003e44:	2b55      	cmp	r3, #85	; 0x55
 8003e46:	d010      	beq.n	8003e6a <func_tUartTimer+0x5a>
 8003e48:	2ba5      	cmp	r3, #165	; 0xa5
 8003e4a:	d12c      	bne.n	8003ea6 <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003e4c:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <func_tUartTimer+0x100>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe faef 	bl	8002434 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <func_tUartTimer+0x100>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fed2 	bl	8002c04 <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <func_tUartTimer+0x100>)
 8003e62:	2246      	movs	r2, #70	; 0x46
 8003e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e68:	e01f      	b.n	8003eaa <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003e6a:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <func_tUartTimer+0x100>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fc9c 	bl	80027ac <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003e74:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <func_tUartTimer+0x100>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe ff03 	bl	8002c84 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <func_tUartTimer+0x100>)
 8003e80:	2263      	movs	r2, #99	; 0x63
 8003e82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e86:	e010      	b.n	8003eaa <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003e88:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <func_tUartTimer+0x100>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fe03 	bl	8002a98 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <func_tUartTimer+0x100>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe ffea 	bl	8002e70 <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <func_tUartTimer+0x100>)
 8003e9e:	2206      	movs	r2, #6
 8003ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003ea4:	e001      	b.n	8003eaa <func_tUartTimer+0x9a>
				default:
					package = false;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <func_tUartTimer+0x104>)
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	f009 fa6c 	bl	800d390 <xQueueGenericSend>
		}
		if(package) {
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <func_tUartTimer+0x100>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <func_tUartTimer+0x100>)
 8003ec4:	6851      	ldr	r1, [r2, #4]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <func_tUartTimer+0x100>)
 8003ec8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003ecc:	b292      	uxth	r2, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f006 ffc2 	bl	800ae58 <HAL_UART_Transmit_IT>
 8003ed4:	e004      	b.n	8003ee0 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <func_tUartTimer+0x100>)
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	3301      	adds	r3, #1
 8003edc:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <func_tUartTimer+0x100>)
 8003ede:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <func_tUartTimer+0x108>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <func_tUartTimer+0x100>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <func_tUartTimer+0x100>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f007 f98b 	bl	800b20c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <func_tUartTimer+0x100>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <func_tUartTimer+0x100>)
 8003efc:	6811      	ldr	r1, [r2, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	4618      	mov	r0, r3
 8003f02:	f007 f807 	bl	800af14 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200001f4 	.word	0x200001f4
 8003f14:	200015e4 	.word	0x200015e4
 8003f18:	200002dc 	.word	0x200002dc

08003f1c <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8003f24:	f00a faaa 	bl	800e47c <xTaskGetTickCount>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fd f842 	bl	8000fb4 <fromTickToMs>
 8003f30:	eeb0 7a40 	vmov.f32	s14, s0
 8003f34:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <tSilence_func+0xbc>)
 8003f36:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003fdc <tSilence_func+0xc0>
 8003f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	dd34      	ble.n	8003fb6 <tSilence_func+0x9a>
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <tSilence_func+0xc4>)
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d130      	bne.n	8003fb6 <tSilence_func+0x9a>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <tSilence_func+0xbc>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f007 f957 	bl	800b20c <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <tSilence_func+0xbc>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <tSilence_func+0xbc>)
 8003f64:	6811      	ldr	r1, [r2, #0]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f006 ffd3 	bl	800af14 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <tSilence_func+0xc8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2105      	movs	r1, #5
 8003f74:	4618      	mov	r0, r3
 8003f76:	f009 fc81 	bl	800d87c <xQueueSemaphoreTake>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d11a      	bne.n	8003fb6 <tSilence_func+0x9a>
			resetThrusters();
 8003f80:	f001 fa22 	bl	80053c8 <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]
 8003f88:	e00b      	b.n	8003fa2 <tSilence_func+0x86>
				rStabConstants[i].enable = false;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	4916      	ldr	r1, [pc, #88]	; (8003fe8 <tSilence_func+0xcc>)
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d9f0      	bls.n	8003f8a <tSilence_func+0x6e>
			}
			xSemaphoreGive(mutDataHandle);
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <tSilence_func+0xc8>)
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	2300      	movs	r3, #0
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f009 f9ed 	bl	800d390 <xQueueGenericSend>
//			break;
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
	xTimerStart(SilenceTimer, 50);
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <tSilence_func+0xd0>)
 8003fb8:	681c      	ldr	r4, [r3, #0]
 8003fba:	f00a fa5f 	bl	800e47c <xTaskGetTickCount>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	2332      	movs	r3, #50	; 0x32
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f00b f8cb 	bl	800f164 <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd90      	pop	{r4, r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200001f4 	.word	0x200001f4
 8003fdc:	447a0000 	.word	0x447a0000
 8003fe0:	200002dc 	.word	0x200002dc
 8003fe4:	200015e4 	.word	0x200015e4
 8003fe8:	20001f24 	.word	0x20001f24
 8003fec:	200002e8 	.word	0x200002e8

08003ff0 <tTechCommTImer_callback>:

/* tTechCommTImer_callback function */
void tTechCommTImer_callback(void const * argument)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTImer_callback */

  /* USER CODE END tTechCommTImer_callback */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	609a      	str	r2, [r3, #8]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800401a:	4b40      	ldr	r3, [pc, #256]	; (800411c <MX_GPIO_Init+0x118>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4a3f      	ldr	r2, [pc, #252]	; (800411c <MX_GPIO_Init+0x118>)
 8004020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004024:	6153      	str	r3, [r2, #20]
 8004026:	4b3d      	ldr	r3, [pc, #244]	; (800411c <MX_GPIO_Init+0x118>)
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004032:	4b3a      	ldr	r3, [pc, #232]	; (800411c <MX_GPIO_Init+0x118>)
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4a39      	ldr	r2, [pc, #228]	; (800411c <MX_GPIO_Init+0x118>)
 8004038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403c:	6153      	str	r3, [r2, #20]
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <MX_GPIO_Init+0x118>)
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <MX_GPIO_Init+0x118>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4a33      	ldr	r2, [pc, #204]	; (800411c <MX_GPIO_Init+0x118>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6153      	str	r3, [r2, #20]
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <MX_GPIO_Init+0x118>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004062:	4b2e      	ldr	r3, [pc, #184]	; (800411c <MX_GPIO_Init+0x118>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4a2d      	ldr	r2, [pc, #180]	; (800411c <MX_GPIO_Init+0x118>)
 8004068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406c:	6153      	str	r3, [r2, #20]
 800406e:	4b2b      	ldr	r3, [pc, #172]	; (800411c <MX_GPIO_Init+0x118>)
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <MX_GPIO_Init+0x118>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	4a27      	ldr	r2, [pc, #156]	; (800411c <MX_GPIO_Init+0x118>)
 8004080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004084:	6153      	str	r3, [r2, #20]
 8004086:	4b25      	ldr	r3, [pc, #148]	; (800411c <MX_GPIO_Init+0x118>)
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 8004092:	2200      	movs	r2, #0
 8004094:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004098:	4821      	ldr	r0, [pc, #132]	; (8004120 <MX_GPIO_Init+0x11c>)
 800409a:	f002 fd91 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);
 800409e:	2200      	movs	r2, #0
 80040a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040a4:	481f      	ldr	r0, [pc, #124]	; (8004124 <MX_GPIO_Init+0x120>)
 80040a6:	f002 fd8b 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b4:	f002 fd84 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 80040b8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80040bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040be:	2301      	movs	r3, #1
 80040c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	4619      	mov	r1, r3
 80040d0:	4813      	ldr	r0, [pc, #76]	; (8004120 <MX_GPIO_Init+0x11c>)
 80040d2:	f002 fbfb 	bl	80068cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 80040d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040dc:	2301      	movs	r3, #1
 80040de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e4:	2300      	movs	r3, #0
 80040e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4619      	mov	r1, r3
 80040ee:	480d      	ldr	r0, [pc, #52]	; (8004124 <MX_GPIO_Init+0x120>)
 80040f0:	f002 fbec 	bl	80068cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 80040f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004102:	2300      	movs	r3, #0
 8004104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	4619      	mov	r1, r3
 800410c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004110:	f002 fbdc 	bl	80068cc <HAL_GPIO_Init>

}
 8004114:	bf00      	nop
 8004116:	3728      	adds	r7, #40	; 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	48000400 	.word	0x48000400
 8004124:	48000c00 	.word	0x48000c00

08004128 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <MX_I2C1_Init+0x74>)
 800412e:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <MX_I2C1_Init+0x78>)
 8004130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <MX_I2C1_Init+0x74>)
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <MX_I2C1_Init+0x7c>)
 8004136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <MX_I2C1_Init+0x74>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <MX_I2C1_Init+0x74>)
 8004140:	2201      	movs	r2, #1
 8004142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <MX_I2C1_Init+0x74>)
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <MX_I2C1_Init+0x74>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <MX_I2C1_Init+0x74>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <MX_I2C1_Init+0x74>)
 8004158:	2200      	movs	r2, #0
 800415a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <MX_I2C1_Init+0x74>)
 800415e:	2200      	movs	r2, #0
 8004160:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004162:	480e      	ldr	r0, [pc, #56]	; (800419c <MX_I2C1_Init+0x74>)
 8004164:	f002 fd5e 	bl	8006c24 <HAL_I2C_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800416e:	f000 f901 	bl	8004374 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004172:	2100      	movs	r1, #0
 8004174:	4809      	ldr	r0, [pc, #36]	; (800419c <MX_I2C1_Init+0x74>)
 8004176:	f004 fdf9 	bl	8008d6c <HAL_I2CEx_ConfigAnalogFilter>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004180:	f000 f8f8 	bl	8004374 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004184:	2100      	movs	r1, #0
 8004186:	4805      	ldr	r0, [pc, #20]	; (800419c <MX_I2C1_Init+0x74>)
 8004188:	f004 fe3b 	bl	8008e02 <HAL_I2CEx_ConfigDigitalFilter>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004192:	f000 f8ef 	bl	8004374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20002458 	.word	0x20002458
 80041a0:	40005400 	.word	0x40005400
 80041a4:	2000090e 	.word	0x2000090e

080041a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_I2C_MspInit+0x8c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d12f      	bne.n	800422a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_I2C_MspInit+0x90>)
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_I2C_MspInit+0x90>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6153      	str	r3, [r2, #20]
 80041d6:	4b18      	ldr	r3, [pc, #96]	; (8004238 <HAL_I2C_MspInit+0x90>)
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041e2:	23c0      	movs	r3, #192	; 0xc0
 80041e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e6:	2312      	movs	r3, #18
 80041e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ee:	2303      	movs	r3, #3
 80041f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041f2:	2304      	movs	r3, #4
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	4619      	mov	r1, r3
 80041fc:	480f      	ldr	r0, [pc, #60]	; (800423c <HAL_I2C_MspInit+0x94>)
 80041fe:	f002 fb65 	bl	80068cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_I2C_MspInit+0x90>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <HAL_I2C_MspInit+0x90>)
 8004208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800420c:	61d3      	str	r3, [r2, #28]
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <HAL_I2C_MspInit+0x90>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800421a:	2200      	movs	r2, #0
 800421c:	2105      	movs	r1, #5
 800421e:	201f      	movs	r0, #31
 8004220:	f001 ff1a 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004224:	201f      	movs	r0, #31
 8004226:	f001 ff33 	bl	8006090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800422a:	bf00      	nop
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40005400 	.word	0x40005400
 8004238:	40021000 	.word	0x40021000
 800423c:	48000400 	.word	0x48000400

08004240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004244:	f001 fdf6 	bl	8005e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004248:	f000 f81c 	bl	8004284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800424c:	f7ff feda 	bl	8004004 <MX_GPIO_Init>
  MX_DMA_Init();
 8004250:	f7fe fee2 	bl	8003018 <MX_DMA_Init>
  MX_TIM7_Init();
 8004254:	f001 faaa 	bl	80057ac <MX_TIM7_Init>
  MX_UART4_Init();
 8004258:	f001 fafe 	bl	8005858 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800425c:	f001 fb2c 	bl	80058b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004260:	f001 fb5a 	bl	8005918 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004264:	f001 fb8c 	bl	8005980 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8004268:	f7ff ff5e 	bl	8004128 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(30e3); //30 seconds delay to start PC
  MS5837_02BA_init(&hi2c1);
 800426c:	4804      	ldr	r0, [pc, #16]	; (8004280 <main+0x40>)
 800426e:	f7fc fecd 	bl	800100c <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 8004272:	f7fd f89d 	bl	80013b0 <MS5837_02BA_reset_pressure>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004276:	f7ff fa99 	bl	80037ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800427a:	f008 fd72 	bl	800cd62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800427e:	e7fe      	b.n	800427e <main+0x3e>
 8004280:	20002458 	.word	0x20002458

08004284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b09e      	sub	sp, #120	; 0x78
 8004288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800428a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800428e:	2228      	movs	r2, #40	; 0x28
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f00b ffca 	bl	801022c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004298:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042a8:	463b      	mov	r3, r7
 80042aa:	223c      	movs	r2, #60	; 0x3c
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f00b ffbc 	bl	801022c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042be:	2300      	movs	r3, #0
 80042c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042c2:	2301      	movs	r3, #1
 80042c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042c6:	2302      	movs	r3, #2
 80042c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80042d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80042d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042da:	4618      	mov	r0, r3
 80042dc:	f004 fdde 	bl	8008e9c <HAL_RCC_OscConfig>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80042e6:	f000 f845 	bl	8004374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042ea:	230f      	movs	r3, #15
 80042ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042ee:	2302      	movs	r3, #2
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042f2:	2300      	movs	r3, #0
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042fc:	2300      	movs	r3, #0
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004300:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f005 fe06 	bl	8009f18 <HAL_RCC_ClockConfig>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004312:	f000 f82f 	bl	8004374 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004316:	232f      	movs	r3, #47	; 0x2f
 8004318:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800431e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004322:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8004324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004328:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800432a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800432e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8004330:	2310      	movs	r3, #16
 8004332:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004334:	463b      	mov	r3, r7
 8004336:	4618      	mov	r0, r3
 8004338:	f006 f858 	bl	800a3ec <HAL_RCCEx_PeriphCLKConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004342:	f000 f817 	bl	8004374 <Error_Handler>
  }
}
 8004346:	bf00      	nop
 8004348:	3778      	adds	r7, #120	; 0x78
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a04      	ldr	r2, [pc, #16]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004362:	f001 fd7d 	bl	8005e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40012c00 	.word	0x40012c00

08004374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004378:	b672      	cpsid	i
}
 800437a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800437c:	e7fe      	b.n	800437c <Error_Handler+0x8>
	...

08004380 <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8004386:	2300      	movs	r3, #0
 8004388:	71fb      	strb	r3, [r7, #7]
 800438a:	e16d      	b.n	8004668 <stabilizationInit+0x2e8>
		rStabConstants[i].enable = false;
 800438c:	79fa      	ldrb	r2, [r7, #7]
 800438e:	49c1      	ldr	r1, [pc, #772]	; (8004694 <stabilizationInit+0x314>)
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	440b      	add	r3, r1
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	4abd      	ldr	r2, [pc, #756]	; (8004698 <stabilizationInit+0x318>)
 80043a2:	2158      	movs	r1, #88	; 0x58
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	330c      	adds	r3, #12
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	4ab8      	ldr	r2, [pc, #736]	; (8004698 <stabilizationInit+0x318>)
 80043b6:	2158      	movs	r1, #88	; 0x58
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	3310      	adds	r3, #16
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	4ab3      	ldr	r2, [pc, #716]	; (8004698 <stabilizationInit+0x318>)
 80043ca:	2158      	movs	r1, #88	; 0x58
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	3314      	adds	r3, #20
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4aae      	ldr	r2, [pc, #696]	; (8004698 <stabilizationInit+0x318>)
 80043de:	2158      	movs	r1, #88	; 0x58
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	3318      	adds	r3, #24
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	4aa9      	ldr	r2, [pc, #676]	; (8004698 <stabilizationInit+0x318>)
 80043f2:	2158      	movs	r1, #88	; 0x58
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	331c      	adds	r3, #28
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	4aa4      	ldr	r2, [pc, #656]	; (8004698 <stabilizationInit+0x318>)
 8004406:	2158      	movs	r1, #88	; 0x58
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	3320      	adds	r3, #32
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	4a9f      	ldr	r2, [pc, #636]	; (8004698 <stabilizationInit+0x318>)
 800441a:	2158      	movs	r1, #88	; 0x58
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	3324      	adds	r3, #36	; 0x24
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	4a9a      	ldr	r2, [pc, #616]	; (8004698 <stabilizationInit+0x318>)
 800442e:	2158      	movs	r1, #88	; 0x58
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	3328      	adds	r3, #40	; 0x28
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	4a95      	ldr	r2, [pc, #596]	; (8004698 <stabilizationInit+0x318>)
 8004442:	2158      	movs	r1, #88	; 0x58
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	332c      	adds	r3, #44	; 0x2c
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	4a90      	ldr	r2, [pc, #576]	; (8004698 <stabilizationInit+0x318>)
 8004456:	2158      	movs	r1, #88	; 0x58
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	3330      	adds	r3, #48	; 0x30
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	4a8b      	ldr	r2, [pc, #556]	; (8004698 <stabilizationInit+0x318>)
 800446a:	2158      	movs	r1, #88	; 0x58
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	3334      	adds	r3, #52	; 0x34
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	4a86      	ldr	r2, [pc, #536]	; (8004698 <stabilizationInit+0x318>)
 800447e:	2158      	movs	r1, #88	; 0x58
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	3338      	adds	r3, #56	; 0x38
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	4a81      	ldr	r2, [pc, #516]	; (8004698 <stabilizationInit+0x318>)
 8004492:	2158      	movs	r1, #88	; 0x58
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	333c      	adds	r3, #60	; 0x3c
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	4a7c      	ldr	r2, [pc, #496]	; (8004698 <stabilizationInit+0x318>)
 80044a6:	2158      	movs	r1, #88	; 0x58
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3340      	adds	r3, #64	; 0x40
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	4a77      	ldr	r2, [pc, #476]	; (8004698 <stabilizationInit+0x318>)
 80044ba:	2158      	movs	r1, #88	; 0x58
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3344      	adds	r3, #68	; 0x44
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	4a72      	ldr	r2, [pc, #456]	; (8004698 <stabilizationInit+0x318>)
 80044ce:	2158      	movs	r1, #88	; 0x58
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	3348      	adds	r3, #72	; 0x48
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	4a6d      	ldr	r2, [pc, #436]	; (8004698 <stabilizationInit+0x318>)
 80044e2:	2158      	movs	r1, #88	; 0x58
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	334c      	adds	r3, #76	; 0x4c
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	4a68      	ldr	r2, [pc, #416]	; (8004698 <stabilizationInit+0x318>)
 80044f6:	2158      	movs	r1, #88	; 0x58
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3350      	adds	r3, #80	; 0x50
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	4a63      	ldr	r2, [pc, #396]	; (8004698 <stabilizationInit+0x318>)
 800450a:	2158      	movs	r1, #88	; 0x58
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	3354      	adds	r3, #84	; 0x54
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 800451a:	4b60      	ldr	r3, [pc, #384]	; (800469c <stabilizationInit+0x31c>)
 800451c:	789b      	ldrb	r3, [r3, #2]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 809f 	bne.w	8004662 <stabilizationInit+0x2e2>
			rStabConstants[i].pJoyUnitCast = 1;
 8004524:	79fa      	ldrb	r2, [r7, #7]
 8004526:	495b      	ldr	r1, [pc, #364]	; (8004694 <stabilizationInit+0x314>)
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	440b      	add	r3, r1
 8004532:	3304      	adds	r3, #4
 8004534:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004538:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 800453a:	79fa      	ldrb	r2, [r7, #7]
 800453c:	4955      	ldr	r1, [pc, #340]	; (8004694 <stabilizationInit+0x314>)
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	440b      	add	r3, r1
 8004548:	3308      	adds	r3, #8
 800454a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800454e:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 8004550:	79fa      	ldrb	r2, [r7, #7]
 8004552:	4950      	ldr	r1, [pc, #320]	; (8004694 <stabilizationInit+0x314>)
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	440b      	add	r3, r1
 800455e:	330c      	adds	r3, #12
 8004560:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004564:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 8004566:	79fa      	ldrb	r2, [r7, #7]
 8004568:	494a      	ldr	r1, [pc, #296]	; (8004694 <stabilizationInit+0x314>)
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	440b      	add	r3, r1
 8004574:	3318      	adds	r3, #24
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 800457c:	79fa      	ldrb	r2, [r7, #7]
 800457e:	4945      	ldr	r1, [pc, #276]	; (8004694 <stabilizationInit+0x314>)
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	440b      	add	r3, r1
 800458a:	331c      	adds	r3, #28
 800458c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004590:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 8004592:	79fa      	ldrb	r2, [r7, #7]
 8004594:	493f      	ldr	r1, [pc, #252]	; (8004694 <stabilizationInit+0x314>)
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	440b      	add	r3, r1
 80045a0:	3310      	adds	r3, #16
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 80045a8:	79fa      	ldrb	r2, [r7, #7]
 80045aa:	493a      	ldr	r1, [pc, #232]	; (8004694 <stabilizationInit+0x314>)
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	440b      	add	r3, r1
 80045b6:	3314      	adds	r3, #20
 80045b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045bc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 80045be:	79fa      	ldrb	r2, [r7, #7]
 80045c0:	4934      	ldr	r1, [pc, #208]	; (8004694 <stabilizationInit+0x314>)
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	3328      	adds	r3, #40	; 0x28
 80045ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045d2:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 80045d4:	79fa      	ldrb	r2, [r7, #7]
 80045d6:	492f      	ldr	r1, [pc, #188]	; (8004694 <stabilizationInit+0x314>)
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	332c      	adds	r3, #44	; 0x2c
 80045e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045e8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 80045ea:	79fa      	ldrb	r2, [r7, #7]
 80045ec:	4929      	ldr	r1, [pc, #164]	; (8004694 <stabilizationInit+0x314>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	440b      	add	r3, r1
 80045f8:	3330      	adds	r3, #48	; 0x30
 80045fa:	4a29      	ldr	r2, [pc, #164]	; (80046a0 <stabilizationInit+0x320>)
 80045fc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 80045fe:	79fa      	ldrb	r2, [r7, #7]
 8004600:	4924      	ldr	r1, [pc, #144]	; (8004694 <stabilizationInit+0x314>)
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	440b      	add	r3, r1
 800460c:	3334      	adds	r3, #52	; 0x34
 800460e:	4a25      	ldr	r2, [pc, #148]	; (80046a4 <stabilizationInit+0x324>)
 8004610:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	491f      	ldr	r1, [pc, #124]	; (8004694 <stabilizationInit+0x314>)
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	440b      	add	r3, r1
 8004620:	333c      	adds	r3, #60	; 0x3c
 8004622:	4a21      	ldr	r2, [pc, #132]	; (80046a8 <stabilizationInit+0x328>)
 8004624:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8004626:	79fa      	ldrb	r2, [r7, #7]
 8004628:	491a      	ldr	r1, [pc, #104]	; (8004694 <stabilizationInit+0x314>)
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	440b      	add	r3, r1
 8004634:	3338      	adds	r3, #56	; 0x38
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <stabilizationInit+0x32c>)
 8004638:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 800463a:	79fa      	ldrb	r2, [r7, #7]
 800463c:	4915      	ldr	r1, [pc, #84]	; (8004694 <stabilizationInit+0x314>)
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	3340      	adds	r3, #64	; 0x40
 800464a:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <stabilizationInit+0x330>)
 800464c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 800464e:	79fa      	ldrb	r2, [r7, #7]
 8004650:	4910      	ldr	r1, [pc, #64]	; (8004694 <stabilizationInit+0x314>)
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	3344      	adds	r3, #68	; 0x44
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <stabilizationInit+0x334>)
 8004660:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	3301      	adds	r3, #1
 8004666:	71fb      	strb	r3, [r7, #7]
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b05      	cmp	r3, #5
 800466c:	f67f ae8e 	bls.w	800438c <stabilizationInit+0xc>




	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <stabilizationInit+0x318>)
 8004672:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <stabilizationInit+0x338>)
 8004674:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <stabilizationInit+0x318>)
 800467a:	4a10      	ldr	r2, [pc, #64]	; (80046bc <stabilizationInit+0x33c>)
 800467c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <stabilizationInit+0x318>)
 8004682:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <stabilizationInit+0x340>)
 8004684:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8004688:	4b02      	ldr	r3, [pc, #8]	; (8004694 <stabilizationInit+0x314>)
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8004690:	e018      	b.n	80046c4 <stabilizationInit+0x344>
 8004692:	bf00      	nop
 8004694:	20001f24 	.word	0x20001f24
 8004698:	200020d4 	.word	0x200020d4
 800469c:	20001d90 	.word	0x20001d90
 80046a0:	c47a0000 	.word	0xc47a0000
 80046a4:	447a0000 	.word	0x447a0000
 80046a8:	459c4000 	.word	0x459c4000
 80046ac:	c59c4000 	.word	0xc59c4000
 80046b0:	46fa0000 	.word	0x46fa0000
 80046b4:	c6fa0000 	.word	0xc6fa0000
 80046b8:	20001ed8 	.word	0x20001ed8
 80046bc:	20001e78 	.word	0x20001e78
 80046c0:	20001e5c 	.word	0x20001e5c
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 80046c4:	4b86      	ldr	r3, [pc, #536]	; (80048e0 <stabilizationInit+0x560>)
 80046c6:	4a87      	ldr	r2, [pc, #540]	; (80048e4 <stabilizationInit+0x564>)
 80046c8:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 80046cc:	4b84      	ldr	r3, [pc, #528]	; (80048e0 <stabilizationInit+0x560>)
 80046ce:	4a86      	ldr	r2, [pc, #536]	; (80048e8 <stabilizationInit+0x568>)
 80046d0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 80046d4:	4b82      	ldr	r3, [pc, #520]	; (80048e0 <stabilizationInit+0x560>)
 80046d6:	4a85      	ldr	r2, [pc, #532]	; (80048ec <stabilizationInit+0x56c>)
 80046d8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 80046dc:	4b84      	ldr	r3, [pc, #528]	; (80048f0 <stabilizationInit+0x570>)
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 80046e4:	4b7e      	ldr	r3, [pc, #504]	; (80048e0 <stabilizationInit+0x560>)
 80046e6:	4a83      	ldr	r2, [pc, #524]	; (80048f4 <stabilizationInit+0x574>)
 80046e8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 80046ec:	4b7c      	ldr	r3, [pc, #496]	; (80048e0 <stabilizationInit+0x560>)
 80046ee:	4a82      	ldr	r2, [pc, #520]	; (80048f8 <stabilizationInit+0x578>)
 80046f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 80046f4:	4b7a      	ldr	r3, [pc, #488]	; (80048e0 <stabilizationInit+0x560>)
 80046f6:	4a81      	ldr	r2, [pc, #516]	; (80048fc <stabilizationInit+0x57c>)
 80046f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 80046fc:	4b7c      	ldr	r3, [pc, #496]	; (80048f0 <stabilizationInit+0x570>)
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 8004704:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <stabilizationInit+0x560>)
 8004706:	4a7e      	ldr	r2, [pc, #504]	; (8004900 <stabilizationInit+0x580>)
 8004708:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 800470a:	4b75      	ldr	r3, [pc, #468]	; (80048e0 <stabilizationInit+0x560>)
 800470c:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <stabilizationInit+0x584>)
 800470e:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8004710:	4b73      	ldr	r3, [pc, #460]	; (80048e0 <stabilizationInit+0x560>)
 8004712:	4a7d      	ldr	r2, [pc, #500]	; (8004908 <stabilizationInit+0x588>)
 8004714:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8004716:	4b76      	ldr	r3, [pc, #472]	; (80048f0 <stabilizationInit+0x570>)
 8004718:	2200      	movs	r2, #0
 800471a:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 800471c:	4b70      	ldr	r3, [pc, #448]	; (80048e0 <stabilizationInit+0x560>)
 800471e:	4a7b      	ldr	r2, [pc, #492]	; (800490c <stabilizationInit+0x58c>)
 8004720:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8004724:	4b6e      	ldr	r3, [pc, #440]	; (80048e0 <stabilizationInit+0x560>)
 8004726:	4a7a      	ldr	r2, [pc, #488]	; (8004910 <stabilizationInit+0x590>)
 8004728:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 800472c:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <stabilizationInit+0x560>)
 800472e:	4a79      	ldr	r2, [pc, #484]	; (8004914 <stabilizationInit+0x594>)
 8004730:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8004734:	4b6e      	ldr	r3, [pc, #440]	; (80048f0 <stabilizationInit+0x570>)
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 800473c:	4b68      	ldr	r3, [pc, #416]	; (80048e0 <stabilizationInit+0x560>)
 800473e:	4a76      	ldr	r2, [pc, #472]	; (8004918 <stabilizationInit+0x598>)
 8004740:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8004742:	4b67      	ldr	r3, [pc, #412]	; (80048e0 <stabilizationInit+0x560>)
 8004744:	4a75      	ldr	r2, [pc, #468]	; (800491c <stabilizationInit+0x59c>)
 8004746:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 8004748:	4b65      	ldr	r3, [pc, #404]	; (80048e0 <stabilizationInit+0x560>)
 800474a:	4a73      	ldr	r2, [pc, #460]	; (8004918 <stabilizationInit+0x598>)
 800474c:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 800474e:	4b68      	ldr	r3, [pc, #416]	; (80048f0 <stabilizationInit+0x570>)
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49


    //upload coef
	//rStabConstants[STAB_YAW].enable = true;

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 8004756:	4b66      	ldr	r3, [pc, #408]	; (80048f0 <stabilizationInit+0x570>)
 8004758:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800475c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 8004760:	4b63      	ldr	r3, [pc, #396]	; (80048f0 <stabilizationInit+0x570>)
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	rStabConstants[STAB_YAW].pErrGain = 70;
 800476a:	4b61      	ldr	r3, [pc, #388]	; (80048f0 <stabilizationInit+0x570>)
 800476c:	4a6c      	ldr	r2, [pc, #432]	; (8004920 <stabilizationInit+0x5a0>)
 800476e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 8004772:	4b5f      	ldr	r3, [pc, #380]	; (80048f0 <stabilizationInit+0x570>)
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 120;
 800477c:	4b5c      	ldr	r3, [pc, #368]	; (80048f0 <stabilizationInit+0x570>)
 800477e:	4a69      	ldr	r2, [pc, #420]	; (8004924 <stabilizationInit+0x5a4>)
 8004780:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 8004784:	4b5a      	ldr	r3, [pc, #360]	; (80048f0 <stabilizationInit+0x570>)
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 800478e:	4b58      	ldr	r3, [pc, #352]	; (80048f0 <stabilizationInit+0x570>)
 8004790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004794:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pid.pGain = 25;
 8004798:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <stabilizationInit+0x570>)
 800479a:	4a63      	ldr	r2, [pc, #396]	; (8004928 <stabilizationInit+0x5a8>)
 800479c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].pid.iGain = 0;
 80047a0:	4b53      	ldr	r3, [pc, #332]	; (80048f0 <stabilizationInit+0x570>)
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rStabConstants[STAB_YAW].pid.iMax = 3000;
 80047aa:	4b51      	ldr	r3, [pc, #324]	; (80048f0 <stabilizationInit+0x570>)
 80047ac:	4a5f      	ldr	r2, [pc, #380]	; (800492c <stabilizationInit+0x5ac>)
 80047ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	rStabConstants[STAB_YAW].pid.iMin = -3000;
 80047b2:	4b4f      	ldr	r3, [pc, #316]	; (80048f0 <stabilizationInit+0x570>)
 80047b4:	4a5e      	ldr	r2, [pc, #376]	; (8004930 <stabilizationInit+0x5b0>)
 80047b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pThrustersMax = 20000;
 80047ba:	4b4d      	ldr	r3, [pc, #308]	; (80048f0 <stabilizationInit+0x570>)
 80047bc:	4a5d      	ldr	r2, [pc, #372]	; (8004934 <stabilizationInit+0x5b4>)
 80047be:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pThrustersMin = -20000;
 80047c2:	4b4b      	ldr	r3, [pc, #300]	; (80048f0 <stabilizationInit+0x570>)
 80047c4:	4a5c      	ldr	r2, [pc, #368]	; (8004938 <stabilizationInit+0x5b8>)
 80047c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 80047ca:	4b49      	ldr	r3, [pc, #292]	; (80048f0 <stabilizationInit+0x570>)
 80047cc:	4a5b      	ldr	r2, [pc, #364]	; (800493c <stabilizationInit+0x5bc>)
 80047ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <stabilizationInit+0x570>)
 80047d4:	4a5a      	ldr	r2, [pc, #360]	; (8004940 <stabilizationInit+0x5c0>)
 80047d6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    rStabConstants[STAB_YAW].joyIntegration = false;
 80047da:	4b45      	ldr	r3, [pc, #276]	; (80048f0 <stabilizationInit+0x570>)
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

	//rStabConstants[STAB_DEPTH].enable = true;

	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 80047e2:	4b43      	ldr	r3, [pc, #268]	; (80048f0 <stabilizationInit+0x570>)
 80047e4:	4a57      	ldr	r2, [pc, #348]	; (8004944 <stabilizationInit+0x5c4>)
 80047e6:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 80047e8:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <stabilizationInit+0x570>)
 80047ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ee:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 80047f0:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <stabilizationInit+0x570>)
 80047f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047f6:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 80;
 80047f8:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <stabilizationInit+0x570>)
 80047fa:	4a53      	ldr	r2, [pc, #332]	; (8004948 <stabilizationInit+0x5c8>)
 80047fc:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = -15;
 80047fe:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <stabilizationInit+0x570>)
 8004800:	4a52      	ldr	r2, [pc, #328]	; (800494c <stabilizationInit+0x5cc>)
 8004802:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8004804:	4b3a      	ldr	r3, [pc, #232]	; (80048f0 <stabilizationInit+0x570>)
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = -1;
 800480c:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <stabilizationInit+0x570>)
 800480e:	4a4d      	ldr	r2, [pc, #308]	; (8004944 <stabilizationInit+0x5c4>)
 8004810:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 30;
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <stabilizationInit+0x570>)
 8004814:	4a4e      	ldr	r2, [pc, #312]	; (8004950 <stabilizationInit+0x5d0>)
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 5;
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <stabilizationInit+0x570>)
 800481a:	4a4e      	ldr	r2, [pc, #312]	; (8004954 <stabilizationInit+0x5d4>)
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 40;
 800481e:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <stabilizationInit+0x570>)
 8004820:	4a4d      	ldr	r2, [pc, #308]	; (8004958 <stabilizationInit+0x5d8>)
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -40;
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <stabilizationInit+0x570>)
 8004826:	4a4d      	ldr	r2, [pc, #308]	; (800495c <stabilizationInit+0x5dc>)
 8004828:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersMax = 32000;
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <stabilizationInit+0x570>)
 800482c:	4a43      	ldr	r2, [pc, #268]	; (800493c <stabilizationInit+0x5bc>)
 800482e:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -32000;
 8004830:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <stabilizationInit+0x570>)
 8004832:	4a43      	ldr	r2, [pc, #268]	; (8004940 <stabilizationInit+0x5c0>)
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 8004836:	4b2e      	ldr	r3, [pc, #184]	; (80048f0 <stabilizationInit+0x570>)
 8004838:	4a40      	ldr	r2, [pc, #256]	; (800493c <stabilizationInit+0x5bc>)
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <stabilizationInit+0x570>)
 800483e:	4a40      	ldr	r2, [pc, #256]	; (8004940 <stabilizationInit+0x5c0>)
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8004842:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <stabilizationInit+0x570>)
 8004844:	2200      	movs	r2, #0
 8004846:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_PITCH].pJoyUnitCast = -1;
 8004848:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <stabilizationInit+0x570>)
 800484a:	4a3e      	ldr	r2, [pc, #248]	; (8004944 <stabilizationInit+0x5c4>)
 800484c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_PITCH].pSpeedDyn = 0;
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <stabilizationInit+0x570>)
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_PITCH].pErrGain = 1;
 800485a:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <stabilizationInit+0x570>)
 800485c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004860:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].T = 0;
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <stabilizationInit+0x570>)
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].K = 1;
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <stabilizationInit+0x570>)
 8004870:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004874:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].T = 0;
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <stabilizationInit+0x570>)
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].K = -100;
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <stabilizationInit+0x570>)
 8004884:	4a36      	ldr	r2, [pc, #216]	; (8004960 <stabilizationInit+0x5e0>)
 8004886:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	rStabConstants[STAB_PITCH].pid.pGain = 25;
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <stabilizationInit+0x570>)
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <stabilizationInit+0x5a8>)
 800488e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	rStabConstants[STAB_PITCH].pid.iGain = 60;
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <stabilizationInit+0x570>)
 8004894:	4a33      	ldr	r2, [pc, #204]	; (8004964 <stabilizationInit+0x5e4>)
 8004896:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	rStabConstants[STAB_PITCH].pid.iMax = 50;
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <stabilizationInit+0x570>)
 800489c:	4a32      	ldr	r2, [pc, #200]	; (8004968 <stabilizationInit+0x5e8>)
 800489e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	rStabConstants[STAB_PITCH].pid.iMin = -50;
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <stabilizationInit+0x570>)
 80048a4:	4a31      	ldr	r2, [pc, #196]	; (800496c <stabilizationInit+0x5ec>)
 80048a6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	rStabConstants[STAB_PITCH].pThrustersMax = 32000;
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <stabilizationInit+0x570>)
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <stabilizationInit+0x5bc>)
 80048ae:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	rStabConstants[STAB_PITCH].pThrustersMin = -32000;
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <stabilizationInit+0x570>)
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <stabilizationInit+0x5c0>)
 80048b6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	rStabConstants[STAB_PITCH].sOutSummatorMax = 32000;
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <stabilizationInit+0x570>)
 80048bc:	4a1f      	ldr	r2, [pc, #124]	; (800493c <stabilizationInit+0x5bc>)
 80048be:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	rStabConstants[STAB_PITCH].sOutSummatorMin = -32000;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <stabilizationInit+0x570>)
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <stabilizationInit+0x5c0>)
 80048c6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    rStabConstants[STAB_PITCH].joyIntegration = false;
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <stabilizationInit+0x570>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169


}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	200020d4 	.word	0x200020d4
 80048e4:	20001edc 	.word	0x20001edc
 80048e8:	20001e7c 	.word	0x20001e7c
 80048ec:	20001e60 	.word	0x20001e60
 80048f0:	20001f24 	.word	0x20001f24
 80048f4:	20001ee0 	.word	0x20001ee0
 80048f8:	20001e80 	.word	0x20001e80
 80048fc:	20001e64 	.word	0x20001e64
 8004900:	20001ed4 	.word	0x20001ed4
 8004904:	20001ebc 	.word	0x20001ebc
 8004908:	20001eb4 	.word	0x20001eb4
 800490c:	20001ed0 	.word	0x20001ed0
 8004910:	20002194 	.word	0x20002194
 8004914:	20001d98 	.word	0x20001d98
 8004918:	20001ecc 	.word	0x20001ecc
 800491c:	2000213c 	.word	0x2000213c
 8004920:	428c0000 	.word	0x428c0000
 8004924:	42f00000 	.word	0x42f00000
 8004928:	41c80000 	.word	0x41c80000
 800492c:	453b8000 	.word	0x453b8000
 8004930:	c53b8000 	.word	0xc53b8000
 8004934:	469c4000 	.word	0x469c4000
 8004938:	c69c4000 	.word	0xc69c4000
 800493c:	46fa0000 	.word	0x46fa0000
 8004940:	c6fa0000 	.word	0xc6fa0000
 8004944:	bf800000 	.word	0xbf800000
 8004948:	42a00000 	.word	0x42a00000
 800494c:	c1700000 	.word	0xc1700000
 8004950:	41f00000 	.word	0x41f00000
 8004954:	40a00000 	.word	0x40a00000
 8004958:	42200000 	.word	0x42200000
 800495c:	c2200000 	.word	0xc2200000
 8004960:	c2c80000 	.word	0xc2c80000
 8004964:	42700000 	.word	0x42700000
 8004968:	42480000 	.word	0x42480000
 800496c:	c2480000 	.word	0xc2480000

08004970 <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 800497a:	79fa      	ldrb	r2, [r7, #7]
 800497c:	4970      	ldr	r1, [pc, #448]	; (8004b40 <stabilizationStart+0x1d0>)
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	440b      	add	r3, r1
 8004988:	2201      	movs	r2, #1
 800498a:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	4a6d      	ldr	r2, [pc, #436]	; (8004b44 <stabilizationStart+0x1d4>)
 8004990:	2158      	movs	r1, #88	; 0x58
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	3304      	adds	r3, #4
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	4968      	ldr	r1, [pc, #416]	; (8004b44 <stabilizationStart+0x1d4>)
 80049a2:	2058      	movs	r0, #88	; 0x58
 80049a4:	fb00 f303 	mul.w	r3, r0, r3
 80049a8:	440b      	add	r3, r1
 80049aa:	3314      	adds	r3, #20
 80049ac:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	4a64      	ldr	r2, [pc, #400]	; (8004b44 <stabilizationStart+0x1d4>)
 80049b2:	2158      	movs	r1, #88	; 0x58
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	3308      	adds	r3, #8
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	4960      	ldr	r1, [pc, #384]	; (8004b44 <stabilizationStart+0x1d4>)
 80049c4:	2058      	movs	r0, #88	; 0x58
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	440b      	add	r3, r1
 80049cc:	3318      	adds	r3, #24
 80049ce:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	4a5c      	ldr	r2, [pc, #368]	; (8004b44 <stabilizationStart+0x1d4>)
 80049d4:	2158      	movs	r1, #88	; 0x58
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	3310      	adds	r3, #16
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d103      	bne.n	80049f2 <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 80049ea:	4b57      	ldr	r3, [pc, #348]	; (8004b48 <stabilizationStart+0x1d8>)
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	4a53      	ldr	r2, [pc, #332]	; (8004b44 <stabilizationStart+0x1d4>)
 80049f6:	2158      	movs	r1, #88	; 0x58
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	331c      	adds	r3, #28
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	4a4e      	ldr	r2, [pc, #312]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a0a:	2158      	movs	r1, #88	; 0x58
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	3308      	adds	r3, #8
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	494a      	ldr	r1, [pc, #296]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a1c:	2058      	movs	r0, #88	; 0x58
 8004a1e:	fb00 f303 	mul.w	r3, r0, r3
 8004a22:	440b      	add	r3, r1
 8004a24:	3320      	adds	r3, #32
 8004a26:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	4a46      	ldr	r2, [pc, #280]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a2c:	2158      	movs	r1, #88	; 0x58
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3324      	adds	r3, #36	; 0x24
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	4a41      	ldr	r2, [pc, #260]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a40:	2158      	movs	r1, #88	; 0x58
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	3328      	adds	r3, #40	; 0x28
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a54:	2158      	movs	r1, #88	; 0x58
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	332c      	adds	r3, #44	; 0x2c
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a68:	2158      	movs	r1, #88	; 0x58
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3330      	adds	r3, #48	; 0x30
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	4a32      	ldr	r2, [pc, #200]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a7c:	2158      	movs	r1, #88	; 0x58
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	3334      	adds	r3, #52	; 0x34
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	4a2d      	ldr	r2, [pc, #180]	; (8004b44 <stabilizationStart+0x1d4>)
 8004a90:	2158      	movs	r1, #88	; 0x58
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	3338      	adds	r3, #56	; 0x38
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	4a28      	ldr	r2, [pc, #160]	; (8004b44 <stabilizationStart+0x1d4>)
 8004aa4:	2158      	movs	r1, #88	; 0x58
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	333c      	adds	r3, #60	; 0x3c
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	4a23      	ldr	r2, [pc, #140]	; (8004b44 <stabilizationStart+0x1d4>)
 8004ab8:	2158      	movs	r1, #88	; 0x58
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	4413      	add	r3, r2
 8004ac0:	3340      	adds	r3, #64	; 0x40
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <stabilizationStart+0x1d4>)
 8004acc:	2158      	movs	r1, #88	; 0x58
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3344      	adds	r3, #68	; 0x44
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <stabilizationStart+0x1d4>)
 8004ae0:	2158      	movs	r1, #88	; 0x58
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3348      	adds	r3, #72	; 0x48
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <stabilizationStart+0x1d4>)
 8004af4:	2158      	movs	r1, #88	; 0x58
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	4413      	add	r3, r2
 8004afc:	334c      	adds	r3, #76	; 0x4c
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <stabilizationStart+0x1d4>)
 8004b08:	2158      	movs	r1, #88	; 0x58
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3350      	adds	r3, #80	; 0x50
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8004b18:	f009 fcb0 	bl	800e47c <xTaskGetTickCount>
 8004b1c:	ee07 0a90 	vmov	s15, r0
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <stabilizationStart+0x1d4>)
 8004b28:	2158      	movs	r1, #88	; 0x58
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	3354      	adds	r3, #84	; 0x54
 8004b32:	edc3 7a00 	vstr	s15, [r3]
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20001f24 	.word	0x20001f24
 8004b44:	200020d4 	.word	0x200020d4
 8004b48:	20001e5c 	.word	0x20001e5c

08004b4c <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8004b4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	4603      	mov	r3, r0
 8004b56:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8004b58:	79fa      	ldrb	r2, [r7, #7]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4aa6      	ldr	r2, [pc, #664]	; (8004dfc <stabilizationUpdate+0x2b0>)
 8004b64:	4413      	add	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2258      	movs	r2, #88	; 0x58
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	4aa3      	ldr	r2, [pc, #652]	; (8004e00 <stabilizationUpdate+0x2b4>)
 8004b72:	4413      	add	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004b76:	f009 fc81 	bl	800e47c <xTaskGetTickCount>
 8004b7a:	ee07 0a90 	vmov	s15, r0
 8004b7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b90:	ee17 0a90 	vmov	r0, s15
 8004b94:	f7fc fa0e 	bl	8000fb4 <fromTickToMs>
 8004b98:	eeb0 7a40 	vmov.f32	s14, s0
 8004b9c:	eddf 6a99 	vldr	s13, [pc, #612]	; 8004e04 <stabilizationUpdate+0x2b8>
 8004ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba4:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004ba8:	f009 fc68 	bl	800e47c <xTaskGetTickCount>
 8004bac:	ee07 0a90 	vmov	s15, r0
 8004bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	d02b      	beq.n	8004c28 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	ed93 7a05 	vldr	s14, [r3, #20]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	edd3 6a00 	vldr	s13, [r3]
 8004bdc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004be0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004be4:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8004e14 <stabilizationUpdate+0x2c8>
 8004be8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bf0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	ed93 6a00 	vldr	s12, [r3]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c02:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004c06:	ed9f 6a80 	vldr	s12, [pc, #512]	; 8004e08 <stabilizationUpdate+0x2bc>
 8004c0a:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c14:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004c26:	e023      	b.n	8004c70 <stabilizationUpdate+0x124>
	}
	else {
		if(contour==STAB_PITCH)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d110      	bne.n	8004c50 <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	ed93 7a00 	vldr	s14, [r3]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c40:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004e0c <stabilizationUpdate+0x2c0>
 8004c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004c4e:	e00f      	b.n	8004c70 <stabilizationUpdate+0x124>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K*10;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	ed93 7a00 	vldr	s14, [r3]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3310      	adds	r3, #16
 8004c7c:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	edd3 7a00 	vldr	s15, [r3]
 8004c84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8c:	d061      	beq.n	8004d52 <stabilizationUpdate+0x206>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fb fc00 	bl	8000498 <__aeabi_f2d>
 8004c98:	4604      	mov	r4, r0
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ca0:	eeb1 7a67 	vneg.f32	s14, s15
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cae:	ee16 0a90 	vmov	r0, s13
 8004cb2:	f7fb fbf1 	bl	8000498 <__aeabi_f2d>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	ec43 2b10 	vmov	d0, r2, r3
 8004cbe:	f00b fba7 	bl	8010410 <exp>
 8004cc2:	ec53 2b10 	vmov	r2, r3, d0
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fc3d 	bl	8000548 <__aeabi_dmul>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4690      	mov	r8, r2
 8004cd4:	4699      	mov	r9, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	ed93 7a06 	vldr	s14, [r3, #24]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce6:	ee17 0a90 	vmov	r0, s15
 8004cea:	f7fb fbd5 	bl	8000498 <__aeabi_f2d>
 8004cee:	4604      	mov	r4, r0
 8004cf0:	460d      	mov	r5, r1
 8004cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf6:	eeb1 7a67 	vneg.f32	s14, s15
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	edd3 7a00 	vldr	s15, [r3]
 8004d00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d04:	ee16 0a90 	vmov	r0, s13
 8004d08:	f7fb fbc6 	bl	8000498 <__aeabi_f2d>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	ec43 2b10 	vmov	d0, r2, r3
 8004d14:	f00b fb7c 	bl	8010410 <exp>
 8004d18:	ec53 2b10 	vmov	r2, r3, d0
 8004d1c:	f04f 0000 	mov.w	r0, #0
 8004d20:	493b      	ldr	r1, [pc, #236]	; (8004e10 <stabilizationUpdate+0x2c4>)
 8004d22:	f7fb fa59 	bl	80001d8 <__aeabi_dsub>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	f7fb fc0b 	bl	8000548 <__aeabi_dmul>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4640      	mov	r0, r8
 8004d38:	4649      	mov	r1, r9
 8004d3a:	f7fb fa4f 	bl	80001dc <__adddf3>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4610      	mov	r0, r2
 8004d44:	4619      	mov	r1, r3
 8004d46:	f7fb fec1 	bl	8000acc <__aeabi_d2f>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8004d50:	e00b      	b.n	8004d6a <stabilizationUpdate+0x21e>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	ed93 7a00 	vldr	s14, [r3]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	edd3 6a00 	vldr	s13, [r3]
 8004d82:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004da0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004da4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01e      	beq.n	8004e18 <stabilizationUpdate+0x2cc>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	ed93 7a08 	vldr	s14, [r3, #32]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	edd3 6a07 	vldr	s13, [r3, #28]
 8004de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	edc3 7a08 	vstr	s15, [r3, #32]
 8004df8:	e012      	b.n	8004e20 <stabilizationUpdate+0x2d4>
 8004dfa:	bf00      	nop
 8004dfc:	20001f24 	.word	0x20001f24
 8004e00:	200020d4 	.word	0x200020d4
 8004e04:	447a0000 	.word	0x447a0000
 8004e08:	428c0000 	.word	0x428c0000
 8004e0c:	437a0000 	.word	0x437a0000
 8004e10:	3ff00000 	.word	0x3ff00000
 8004e14:	42c80000 	.word	0x42c80000
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	ed93 7a08 	vldr	s14, [r3, #32]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004e80:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8004e14 <stabilizationUpdate+0x2c8>
 8004e84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e90:	dd0a      	ble.n	8004ea8 <stabilizationUpdate+0x35c>
    	state->pid_iValue = constants->pid.iMax*100;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004e98:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8004e14 <stabilizationUpdate+0x2c8>
 8004e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004ea6:	e018      	b.n	8004eda <stabilizationUpdate+0x38e>
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004eb4:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8004e14 <stabilizationUpdate+0x2c8>
 8004eb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec4:	d509      	bpl.n	8004eda <stabilizationUpdate+0x38e>
    	state->pid_iValue = constants->pid.iMin*100;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004ecc:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8004e14 <stabilizationUpdate+0x2c8>
 8004ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	edd3 6a00 	vldr	s13, [r3]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	3320      	adds	r3, #32
 8004f36:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	edd3 7a00 	vldr	s15, [r3]
 8004f3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	d061      	beq.n	800500c <stabilizationUpdate+0x4c0>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fb faa3 	bl	8000498 <__aeabi_f2d>
 8004f52:	4604      	mov	r4, r0
 8004f54:	460d      	mov	r5, r1
 8004f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f5a:	eeb1 7a67 	vneg.f32	s14, s15
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	edd3 7a00 	vldr	s15, [r3]
 8004f64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f68:	ee16 0a90 	vmov	r0, s13
 8004f6c:	f7fb fa94 	bl	8000498 <__aeabi_f2d>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	ec43 2b10 	vmov	d0, r2, r3
 8004f78:	f00b fa4a 	bl	8010410 <exp>
 8004f7c:	ec53 2b10 	vmov	r2, r3, d0
 8004f80:	4620      	mov	r0, r4
 8004f82:	4629      	mov	r1, r5
 8004f84:	f7fb fae0 	bl	8000548 <__aeabi_dmul>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4690      	mov	r8, r2
 8004f8e:	4699      	mov	r9, r3
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa0:	ee17 0a90 	vmov	r0, s15
 8004fa4:	f7fb fa78 	bl	8000498 <__aeabi_f2d>
 8004fa8:	4604      	mov	r4, r0
 8004faa:	460d      	mov	r5, r1
 8004fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fb0:	eeb1 7a67 	vneg.f32	s14, s15
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	edd3 7a00 	vldr	s15, [r3]
 8004fba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004fbe:	ee16 0a90 	vmov	r0, s13
 8004fc2:	f7fb fa69 	bl	8000498 <__aeabi_f2d>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	ec43 2b10 	vmov	d0, r2, r3
 8004fce:	f00b fa1f 	bl	8010410 <exp>
 8004fd2:	ec53 2b10 	vmov	r2, r3, d0
 8004fd6:	f04f 0000 	mov.w	r0, #0
 8004fda:	492a      	ldr	r1, [pc, #168]	; (8005084 <stabilizationUpdate+0x538>)
 8004fdc:	f7fb f8fc 	bl	80001d8 <__aeabi_dsub>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	f7fb faae 	bl	8000548 <__aeabi_dmul>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	f7fb f8f2 	bl	80001dc <__adddf3>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7fb fd64 	bl	8000acc <__aeabi_d2f>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	64da      	str	r2, [r3, #76]	; 0x4c
 800500a:	e00a      	b.n	8005022 <stabilizationUpdate+0x4d6>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	edd3 7a01 	vldr	s15, [r3, #4]
 8005018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503e:	dd04      	ble.n	800504a <stabilizationUpdate+0x4fe>
    	state->thrustersFiltered = constants->pThrustersMax;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	64da      	str	r2, [r3, #76]	; 0x4c
 8005048:	e00e      	b.n	8005068 <stabilizationUpdate+0x51c>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	d503      	bpl.n	8005068 <stabilizationUpdate+0x51c>
    	state->thrustersFiltered = constants->pThrustersMin;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800506e:	eef1 7a67 	vneg.f32	s15, s15
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8005078:	bf00      	nop
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005082:	bf00      	nop
 8005084:	3ff00000 	.word	0x3ff00000

08005088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_MspInit+0x4c>)
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	4a10      	ldr	r2, [pc, #64]	; (80050d4 <HAL_MspInit+0x4c>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6193      	str	r3, [r2, #24]
 800509a:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <HAL_MspInit+0x4c>)
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_MspInit+0x4c>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <HAL_MspInit+0x4c>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	61d3      	str	r3, [r2, #28]
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <HAL_MspInit+0x4c>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80050be:	2200      	movs	r2, #0
 80050c0:	210f      	movs	r1, #15
 80050c2:	f06f 0001 	mvn.w	r0, #1
 80050c6:	f000 ffc7 	bl	8006058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40021000 	.word	0x40021000

080050d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08c      	sub	sp, #48	; 0x30
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80050e8:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <HAL_InitTick+0xcc>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <HAL_InitTick+0xcc>)
 80050ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050f2:	6193      	str	r3, [r2, #24]
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_InitTick+0xcc>)
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005100:	f107 020c 	add.w	r2, r7, #12
 8005104:	f107 0310 	add.w	r3, r7, #16
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f005 f93c 	bl	800a388 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005110:	f005 f918 	bl	800a344 <HAL_RCC_GetPCLK2Freq>
 8005114:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	4a23      	ldr	r2, [pc, #140]	; (80051a8 <HAL_InitTick+0xd0>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0c9b      	lsrs	r3, r3, #18
 8005120:	3b01      	subs	r3, #1
 8005122:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <HAL_InitTick+0xd4>)
 8005126:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_InitTick+0xd8>)
 8005128:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_InitTick+0xd4>)
 800512c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005130:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005132:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <HAL_InitTick+0xd4>)
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <HAL_InitTick+0xd4>)
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <HAL_InitTick+0xd4>)
 8005140:	2200      	movs	r2, #0
 8005142:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_InitTick+0xd4>)
 8005146:	2200      	movs	r2, #0
 8005148:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800514a:	4818      	ldr	r0, [pc, #96]	; (80051ac <HAL_InitTick+0xd4>)
 800514c:	f005 fafe 	bl	800a74c <HAL_TIM_Base_Init>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11b      	bne.n	8005196 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800515e:	4813      	ldr	r0, [pc, #76]	; (80051ac <HAL_InitTick+0xd4>)
 8005160:	f005 fb4c 	bl	800a7fc <HAL_TIM_Base_Start_IT>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800516a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800516e:	2b00      	cmp	r3, #0
 8005170:	d111      	bne.n	8005196 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005172:	2019      	movs	r0, #25
 8005174:	f000 ff8c 	bl	8006090 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b0f      	cmp	r3, #15
 800517c:	d808      	bhi.n	8005190 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800517e:	2200      	movs	r2, #0
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	2019      	movs	r0, #25
 8005184:	f000 ff68 	bl	8006058 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005188:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <HAL_InitTick+0xdc>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e002      	b.n	8005196 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800519a:	4618      	mov	r0, r3
 800519c:	3730      	adds	r7, #48	; 0x30
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000
 80051a8:	431bde83 	.word	0x431bde83
 80051ac:	200024ac 	.word	0x200024ac
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	2000011c 	.word	0x2000011c

080051b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051bc:	e7fe      	b.n	80051bc <NMI_Handler+0x4>

080051be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051be:	b480      	push	{r7}
 80051c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051c2:	e7fe      	b.n	80051c2 <HardFault_Handler+0x4>

080051c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051c8:	e7fe      	b.n	80051c8 <MemManage_Handler+0x4>

080051ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ce:	e7fe      	b.n	80051ce <BusFault_Handler+0x4>

080051d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051d4:	e7fe      	b.n	80051d4 <UsageFault_Handler+0x4>

080051d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051d6:	b480      	push	{r7}
 80051d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80051e8:	4802      	ldr	r0, [pc, #8]	; (80051f4 <DMA1_Channel2_IRQHandler+0x10>)
 80051ea:	f001 f87c 	bl	80062e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	200028b8 	.word	0x200028b8

080051f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80051fc:	4802      	ldr	r0, [pc, #8]	; (8005208 <DMA1_Channel3_IRQHandler+0x10>)
 80051fe:	f001 f872 	bl	80062e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20002874 	.word	0x20002874

0800520c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005210:	4802      	ldr	r0, [pc, #8]	; (800521c <DMA1_Channel4_IRQHandler+0x10>)
 8005212:	f001 f868 	bl	80062e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20002764 	.word	0x20002764

08005220 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005224:	4802      	ldr	r0, [pc, #8]	; (8005230 <DMA1_Channel5_IRQHandler+0x10>)
 8005226:	f001 f85e 	bl	80062e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800522a:	bf00      	nop
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	200027a8 	.word	0x200027a8

08005234 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005238:	4802      	ldr	r0, [pc, #8]	; (8005244 <DMA1_Channel6_IRQHandler+0x10>)
 800523a:	f001 f854 	bl	80062e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200027ec 	.word	0x200027ec

08005248 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800524c:	4802      	ldr	r0, [pc, #8]	; (8005258 <DMA1_Channel7_IRQHandler+0x10>)
 800524e:	f001 f84a 	bl	80062e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20002830 	.word	0x20002830

0800525c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005260:	4802      	ldr	r0, [pc, #8]	; (800526c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005262:	f005 fb35 	bl	800a8d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005266:	bf00      	nop
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	200024ac 	.word	0x200024ac

08005270 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005274:	4802      	ldr	r0, [pc, #8]	; (8005280 <I2C1_EV_IRQHandler+0x10>)
 8005276:	f002 f82f 	bl	80072d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800527a:	bf00      	nop
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20002458 	.word	0x20002458

08005284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005288:	4802      	ldr	r0, [pc, #8]	; (8005294 <USART1_IRQHandler+0x10>)
 800528a:	f006 f887 	bl	800b39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	200025cc 	.word	0x200025cc

08005298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800529c:	4802      	ldr	r0, [pc, #8]	; (80052a8 <USART2_IRQHandler+0x10>)
 800529e:	f006 f87d 	bl	800b39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20002654 	.word	0x20002654

080052ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80052b0:	4802      	ldr	r0, [pc, #8]	; (80052bc <USART3_IRQHandler+0x10>)
 80052b2:	f006 f873 	bl	800b39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80052b6:	bf00      	nop
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200026dc 	.word	0x200026dc

080052c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80052c4:	4802      	ldr	r0, [pc, #8]	; (80052d0 <UART4_IRQHandler+0x10>)
 80052c6:	f006 f869 	bl	800b39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80052ca:	bf00      	nop
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20002544 	.word	0x20002544

080052d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <SystemInit+0x20>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <SystemInit+0x20>)
 80052e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052e8:	bf00      	nop
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <thrustersInit>:
    {0.4041149, 0.25000000, 0.35350677, 1.00000000, 0.3, 1.0000000, 1.00000000},
    {0.40411496, -0.25000000, 0.3535067, -1.0000000, 0.3, -1.00000000,  1.50000000}
};

void thrustersInit()
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
   //Numarate by LOVE
  rThrusters[FDR].address = 1; //Forward Down Right
 80052fe:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <thrustersInit+0xc8>)
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 8005304:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <thrustersInit+0xc8>)
 8005306:	2202      	movs	r2, #2
 8005308:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 800530a:	4b2d      	ldr	r3, [pc, #180]	; (80053c0 <thrustersInit+0xc8>)
 800530c:	2203      	movs	r2, #3
 800530e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <thrustersInit+0xc8>)
 8005314:	2204      	movs	r2, #4
 8005316:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 800531a:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <thrustersInit+0xc8>)
 800531c:	2205      	movs	r2, #5
 800531e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 8005322:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <thrustersInit+0xc8>)
 8005324:	2206      	movs	r2, #6
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  rThrusters[BUR].address = 7; //Back Up Right
 800532a:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <thrustersInit+0xc8>)
 800532c:	2207      	movs	r2, #7
 800532e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  rThrusters[BUL].address = 8; //Back Up Left
 8005332:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <thrustersInit+0xc8>)
 8005334:	2208      	movs	r2, #8
 8005336:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800533a:	2300      	movs	r3, #0
 800533c:	71fb      	strb	r3, [r7, #7]
 800533e:	e034      	b.n	80053aa <thrustersInit+0xb2>
    rThrusters[i].desiredSpeed = 0;
 8005340:	79fa      	ldrb	r2, [r7, #7]
 8005342:	491f      	ldr	r1, [pc, #124]	; (80053c0 <thrustersInit+0xc8>)
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	3302      	adds	r3, #2
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 8005354:	79fa      	ldrb	r2, [r7, #7]
 8005356:	491a      	ldr	r1, [pc, #104]	; (80053c0 <thrustersInit+0xc8>)
 8005358:	4613      	mov	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	330c      	adds	r3, #12
 8005364:	4a17      	ldr	r2, [pc, #92]	; (80053c4 <thrustersInit+0xcc>)
 8005366:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 8005368:	79fa      	ldrb	r2, [r7, #7]
 800536a:	4915      	ldr	r1, [pc, #84]	; (80053c0 <thrustersInit+0xc8>)
 800536c:	4613      	mov	r3, r2
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	440b      	add	r3, r1
 8005376:	3310      	adds	r3, #16
 8005378:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <thrustersInit+0xcc>)
 800537a:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 800537c:	79fa      	ldrb	r2, [r7, #7]
 800537e:	4910      	ldr	r1, [pc, #64]	; (80053c0 <thrustersInit+0xc8>)
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	440b      	add	r3, r1
 800538a:	3314      	adds	r3, #20
 800538c:	227f      	movs	r2, #127	; 0x7f
 800538e:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 8005390:	79fa      	ldrb	r2, [r7, #7]
 8005392:	490b      	ldr	r1, [pc, #44]	; (80053c0 <thrustersInit+0xc8>)
 8005394:	4613      	mov	r3, r2
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	3315      	adds	r3, #21
 80053a0:	227f      	movs	r2, #127	; 0x7f
 80053a2:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	3301      	adds	r3, #1
 80053a8:	71fb      	strb	r3, [r7, #7]
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	2b07      	cmp	r3, #7
 80053ae:	d9c7      	bls.n	8005340 <thrustersInit+0x48>
  }

}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20001d9c 	.word	0x20001d9c
 80053c4:	3f333333 	.word	0x3f333333

080053c8 <resetThrusters>:

void resetThrusters()
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
  rJoySpeed.depth = 0;
 80053ce:	4b19      	ldr	r3, [pc, #100]	; (8005434 <resetThrusters+0x6c>)
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
  rJoySpeed.lag = 0;
 80053d6:	4b17      	ldr	r3, [pc, #92]	; (8005434 <resetThrusters+0x6c>)
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
  rJoySpeed.march = 0;
 80053de:	4b15      	ldr	r3, [pc, #84]	; (8005434 <resetThrusters+0x6c>)
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
  rJoySpeed.pitch = 0;
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <resetThrusters+0x6c>)
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	611a      	str	r2, [r3, #16]
  rJoySpeed.roll = 0;
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <resetThrusters+0x6c>)
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	60da      	str	r2, [r3, #12]
  rJoySpeed.yaw = 0;
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <resetThrusters+0x6c>)
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	615a      	str	r2, [r3, #20]

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80053fe:	2300      	movs	r3, #0
 8005400:	71fb      	strb	r3, [r7, #7]
 8005402:	e00c      	b.n	800541e <resetThrusters+0x56>
    rThrusters[i].desiredSpeed = 0;
 8005404:	79fa      	ldrb	r2, [r7, #7]
 8005406:	490c      	ldr	r1, [pc, #48]	; (8005438 <resetThrusters+0x70>)
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	440b      	add	r3, r1
 8005412:	3302      	adds	r3, #2
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	3301      	adds	r3, #1
 800541c:	71fb      	strb	r3, [r7, #7]
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	2b07      	cmp	r3, #7
 8005422:	d9ef      	bls.n	8005404 <resetThrusters+0x3c>
  }

}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20001ecc 	.word	0x20001ecc
 8005438:	20001d9c 	.word	0x20001d9c

0800543c <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8005448:	23aa      	movs	r3, #170	; 0xaa
 800544a:	733b      	strb	r3, [r7, #12]
    res.type = 0x01;
 800544c:	2301      	movs	r3, #1
 800544e:	737b      	strb	r3, [r7, #13]
    res.address = 0xAF;
 8005450:	23af      	movs	r3, #175	; 0xaf
 8005452:	73bb      	strb	r3, [r7, #14]
    for(int i=0; i<8;i++){
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	e04c      	b.n	80054f4 <fillThrustersRequest+0xb8>
    	int16_t velocity = rThrusters[i].desiredSpeed;
 800545a:	4933      	ldr	r1, [pc, #204]	; (8005528 <fillThrustersRequest+0xec>)
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	4613      	mov	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	3302      	adds	r3, #2
 800546a:	f993 3000 	ldrsb.w	r3, [r3]
 800546e:	837b      	strh	r3, [r7, #26]
    	if(rThrusters[i].inverse) {
//    		velocity *= -1;
    	}

    	// Multiplier constants
    	if(velocity > 0) {
 8005470:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005474:	2b00      	cmp	r3, #0
 8005476:	dd17      	ble.n	80054a8 <fillThrustersRequest+0x6c>
    		velocity = (int16_t) ( (float) (velocity) * rThrusters[i].kForward);
 8005478:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800547c:	ee07 3a90 	vmov	s15, r3
 8005480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005484:	4928      	ldr	r1, [pc, #160]	; (8005528 <fillThrustersRequest+0xec>)
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	440b      	add	r3, r1
 8005492:	330c      	adds	r3, #12
 8005494:	edd3 7a00 	vldr	s15, [r3]
 8005498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a0:	ee17 3a90 	vmov	r3, s15
 80054a4:	837b      	strh	r3, [r7, #26]
 80054a6:	e01a      	b.n	80054de <fillThrustersRequest+0xa2>
    	}
    	else if(velocity < 0) {
 80054a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	da16      	bge.n	80054de <fillThrustersRequest+0xa2>
    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
 80054b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054bc:	491a      	ldr	r1, [pc, #104]	; (8005528 <fillThrustersRequest+0xec>)
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	440b      	add	r3, r1
 80054ca:	3310      	adds	r3, #16
 80054cc:	edd3 7a00 	vldr	s15, [r3]
 80054d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d8:	ee17 3a90 	vmov	r3, s15
 80054dc:	837b      	strh	r3, [r7, #26]
    	}

    	res.velocity[i] = velocity;
 80054de:	8b7b      	ldrh	r3, [r7, #26]
 80054e0:	b259      	sxtb	r1, r3
 80054e2:	f107 020f 	add.w	r2, r7, #15
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	460a      	mov	r2, r1
 80054ec:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<8;i++){
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	3301      	adds	r3, #1
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2b07      	cmp	r3, #7
 80054f8:	ddaf      	ble.n	800545a <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <fillThrustersRequest+0xf0>)
 80054fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8005500:	75fb      	strb	r3, [r7, #23]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	461c      	mov	r4, r3
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800550c:	6020      	str	r0, [r4, #0]
 800550e:	6061      	str	r1, [r4, #4]
 8005510:	60a2      	str	r2, [r4, #8]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	7323      	strb	r3, [r4, #12]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 8005516:	210d      	movs	r1, #13
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fc faa1 	bl	8001a60 <AddChecksumm8bVma>
}
 800551e:	bf00      	nop
 8005520:	3724      	adds	r7, #36	; 0x24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd90      	pop	{r4, r7, pc}
 8005526:	bf00      	nop
 8005528:	20001d9c 	.word	0x20001d9c
 800552c:	20001ee4 	.word	0x20001ee4

08005530 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 800553c:	2109      	movs	r1, #9
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fc fa61 	bl	8001a06 <IsChecksumm8bCorrectVma>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01f      	beq.n	800558a <fillThrustersResponse+0x5a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01b      	beq.n	800558a <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	6810      	ldr	r0, [r2, #0]
 800555a:	6851      	ldr	r1, [r2, #4]
 800555c:	c303      	stmia	r3!, {r0, r1}
 800555e:	7a12      	ldrb	r2, [r2, #8]
 8005560:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	8a38      	ldrh	r0, [r7, #16]
 8005566:	490e      	ldr	r1, [pc, #56]	; (80055a0 <fillThrustersResponse+0x70>)
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	440b      	add	r3, r1
 8005572:	3304      	adds	r3, #4
 8005574:	4602      	mov	r2, r0
 8005576:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <fillThrustersResponse+0x74>)
 800557a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800557e:	3301      	adds	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <fillThrustersResponse+0x74>)
 8005584:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8005588:	e005      	b.n	8005596 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <fillThrustersResponse+0x74>)
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	3301      	adds	r3, #1
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <fillThrustersResponse+0x74>)
 8005592:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20001d9c 	.word	0x20001d9c
 80055a4:	200001f4 	.word	0x200001f4

080055a8 <formThrustVectors>:

void formThrustVectors()
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b090      	sub	sp, #64	; 0x40
 80055ac:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80055b4:	e00d      	b.n	80055d2 <formThrustVectors+0x2a>
    velocity[i] = 0;
 80055b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	3340      	adds	r3, #64	; 0x40
 80055be:	443b      	add	r3, r7
 80055c0:	3b3c      	subs	r3, #60	; 0x3c
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80055c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055cc:	3301      	adds	r3, #1
 80055ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80055d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055d6:	2b07      	cmp	r3, #7
 80055d8:	d9ed      	bls.n	80055b6 <formThrustVectors+0xe>
  float Uz;
  float Ugamma;
  float Uteta;
  float Upsi;

  Ux = rJoySpeed.march;
 80055da:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <formThrustVectors+0x1a0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	63bb      	str	r3, [r7, #56]	; 0x38
  Uy = rJoySpeed.lag;
 80055e0:	4b59      	ldr	r3, [pc, #356]	; (8005748 <formThrustVectors+0x1a0>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
  Uz = rJoySpeed.depth;
 80055e6:	4b58      	ldr	r3, [pc, #352]	; (8005748 <formThrustVectors+0x1a0>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
  Upsi = rJoySpeed.yaw;
 80055ec:	4b56      	ldr	r3, [pc, #344]	; (8005748 <formThrustVectors+0x1a0>)
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Ugamma = rJoySpeed.roll;
 80055f2:	4b55      	ldr	r3, [pc, #340]	; (8005748 <formThrustVectors+0x1a0>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
  Uteta = rJoySpeed.pitch;
 80055f8:	4b53      	ldr	r3, [pc, #332]	; (8005748 <formThrustVectors+0x1a0>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005604:	e095      	b.n	8005732 <formThrustVectors+0x18a>
  {
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 8005606:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800560a:	4950      	ldr	r1, [pc, #320]	; (800574c <formThrustVectors+0x1a4>)
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	ed93 7a00 	vldr	s14, [r3]
 800561a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800561e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005622:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005626:	4949      	ldr	r1, [pc, #292]	; (800574c <formThrustVectors+0x1a4>)
 8005628:	4613      	mov	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	3304      	adds	r3, #4
 8005634:	edd3 6a00 	vldr	s13, [r3]
 8005638:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800563c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005644:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005648:	4940      	ldr	r1, [pc, #256]	; (800574c <formThrustVectors+0x1a4>)
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3308      	adds	r3, #8
 8005656:	edd3 6a00 	vldr	s13, [r3]
 800565a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800565e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005662:	ee37 7a27 	vadd.f32	s14, s14, s15
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 8005666:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800566a:	4938      	ldr	r1, [pc, #224]	; (800574c <formThrustVectors+0x1a4>)
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	1a9b      	subs	r3, r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	330c      	adds	r3, #12
 8005678:	edd3 6a00 	vldr	s13, [r3]
 800567c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005688:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800568c:	492f      	ldr	r1, [pc, #188]	; (800574c <formThrustVectors+0x1a4>)
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	3310      	adds	r3, #16
 800569a:	edd3 6a00 	vldr	s13, [r3]
 800569e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80056a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056aa:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80056ae:	4927      	ldr	r1, [pc, #156]	; (800574c <formThrustVectors+0x1a4>)
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	3314      	adds	r3, #20
 80056bc:	edd3 6a00 	vldr	s13, [r3]
 80056c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80056c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056cc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80056d0:	491e      	ldr	r1, [pc, #120]	; (800574c <formThrustVectors+0x1a4>)
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3318      	adds	r3, #24
 80056de:	edd3 7a00 	vldr	s15, [r3]
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 80056e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	3340      	adds	r3, #64	; 0x40
 80056ee:	443b      	add	r3, r7
 80056f0:	3b3c      	subs	r3, #60	; 0x3c
 80056f2:	edc3 7a00 	vstr	s15, [r3]
    rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 80056f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	3340      	adds	r3, #64	; 0x40
 80056fe:	443b      	add	r3, r7
 8005700:	3b3c      	subs	r3, #60	; 0x3c
 8005702:	edd3 7a00 	vldr	s15, [r3]
 8005706:	eeb0 0a67 	vmov.f32	s0, s15
 800570a:	f000 f823 	bl	8005754 <resizeFloatToUint8>
 800570e:	4603      	mov	r3, r0
 8005710:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005714:	b258      	sxtb	r0, r3
 8005716:	490e      	ldr	r1, [pc, #56]	; (8005750 <formThrustVectors+0x1a8>)
 8005718:	4613      	mov	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	3302      	adds	r3, #2
 8005724:	4602      	mov	r2, r0
 8005726:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8005728:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800572c:	3301      	adds	r3, #1
 800572e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005732:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005736:	2b07      	cmp	r3, #7
 8005738:	f67f af65 	bls.w	8005606 <formThrustVectors+0x5e>
  }

}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	3740      	adds	r7, #64	; 0x40
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20001ecc 	.word	0x20001ecc
 800574c:	2000003c 	.word	0x2000003c
 8005750:	20001d9c 	.word	0x20001d9c

08005754 <resizeFloatToUint8>:

uint8_t resizeFloatToUint8(float input)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 800575e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005766:	ee17 3a90 	vmov	r3, s15
 800576a:	60fb      	str	r3, [r7, #12]
  cast = cast / 0xFF;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4a0e      	ldr	r2, [pc, #56]	; (80057a8 <resizeFloatToUint8+0x54>)
 8005770:	fb82 1203 	smull	r1, r2, r2, r3
 8005774:	441a      	add	r2, r3
 8005776:	11d2      	asrs	r2, r2, #7
 8005778:	17db      	asrs	r3, r3, #31
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	60fb      	str	r3, [r7, #12]
  if (cast > 127) {
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b7f      	cmp	r3, #127	; 0x7f
 8005782:	dd02      	ble.n	800578a <resizeFloatToUint8+0x36>
    cast = 127;
 8005784:	237f      	movs	r3, #127	; 0x7f
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	e006      	b.n	8005798 <resizeFloatToUint8+0x44>
  }
  else if(cast < -127) {
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8005790:	da02      	bge.n	8005798 <resizeFloatToUint8+0x44>
    cast = -127;
 8005792:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8005796:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	b2db      	uxtb	r3, r3
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	80808081 	.word	0x80808081

080057ac <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <MX_TIM7_Init+0x64>)
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <MX_TIM7_Init+0x68>)
 80057c0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <MX_TIM7_Init+0x64>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057c8:	4b11      	ldr	r3, [pc, #68]	; (8005810 <MX_TIM7_Init+0x64>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <MX_TIM7_Init+0x64>)
 80057d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <MX_TIM7_Init+0x64>)
 80057d8:	2200      	movs	r2, #0
 80057da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80057dc:	480c      	ldr	r0, [pc, #48]	; (8005810 <MX_TIM7_Init+0x64>)
 80057de:	f004 ffb5 	bl	800a74c <HAL_TIM_Base_Init>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80057e8:	f7fe fdc4 	bl	8004374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ec:	2300      	movs	r3, #0
 80057ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80057f4:	1d3b      	adds	r3, r7, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4805      	ldr	r0, [pc, #20]	; (8005810 <MX_TIM7_Init+0x64>)
 80057fa:	f005 fa41 	bl	800ac80 <HAL_TIMEx_MasterConfigSynchronization>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005804:	f7fe fdb6 	bl	8004374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	200024f8 	.word	0x200024f8
 8005814:	40001400 	.word	0x40001400

08005818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <HAL_TIM_Base_MspInit+0x38>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10b      	bne.n	8005842 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <HAL_TIM_Base_MspInit+0x3c>)
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <HAL_TIM_Base_MspInit+0x3c>)
 8005830:	f043 0320 	orr.w	r3, r3, #32
 8005834:	61d3      	str	r3, [r2, #28]
 8005836:	4b07      	ldr	r3, [pc, #28]	; (8005854 <HAL_TIM_Base_MspInit+0x3c>)
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40001400 	.word	0x40001400
 8005854:	40021000 	.word	0x40021000

08005858 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <MX_UART4_Init+0x58>)
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <MX_UART4_Init+0x5c>)
 8005860:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005862:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <MX_UART4_Init+0x58>)
 8005864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005868:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <MX_UART4_Init+0x58>)
 800586c:	2200      	movs	r2, #0
 800586e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005870:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <MX_UART4_Init+0x58>)
 8005872:	2200      	movs	r2, #0
 8005874:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005876:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <MX_UART4_Init+0x58>)
 8005878:	2200      	movs	r2, #0
 800587a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800587c:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <MX_UART4_Init+0x58>)
 800587e:	220c      	movs	r2, #12
 8005880:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <MX_UART4_Init+0x58>)
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <MX_UART4_Init+0x58>)
 800588a:	2200      	movs	r2, #0
 800588c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800588e:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <MX_UART4_Init+0x58>)
 8005890:	2200      	movs	r2, #0
 8005892:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <MX_UART4_Init+0x58>)
 8005896:	2200      	movs	r2, #0
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800589a:	4805      	ldr	r0, [pc, #20]	; (80058b0 <MX_UART4_Init+0x58>)
 800589c:	f005 fa8e 	bl	800adbc <HAL_UART_Init>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80058a6:	f7fe fd65 	bl	8004374 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20002544 	.word	0x20002544
 80058b4:	40004c00 	.word	0x40004c00

080058b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058be:	4a15      	ldr	r2, [pc, #84]	; (8005914 <MX_USART1_UART_Init+0x5c>)
 80058c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80058c2:	4b13      	ldr	r3, [pc, #76]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058c4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80058c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80058d6:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058d8:	2200      	movs	r2, #0
 80058da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058de:	220c      	movs	r2, #12
 80058e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ee:	4b08      	ldr	r3, [pc, #32]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058fa:	4805      	ldr	r0, [pc, #20]	; (8005910 <MX_USART1_UART_Init+0x58>)
 80058fc:	f005 fa5e 	bl	800adbc <HAL_UART_Init>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005906:	f7fe fd35 	bl	8004374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	200025cc 	.word	0x200025cc
 8005914:	40013800 	.word	0x40013800

08005918 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800591c:	4b16      	ldr	r3, [pc, #88]	; (8005978 <MX_USART2_UART_Init+0x60>)
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <MX_USART2_UART_Init+0x64>)
 8005920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <MX_USART2_UART_Init+0x60>)
 8005924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <MX_USART2_UART_Init+0x60>)
 800592c:	2200      	movs	r2, #0
 800592e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005930:	4b11      	ldr	r3, [pc, #68]	; (8005978 <MX_USART2_UART_Init+0x60>)
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005936:	4b10      	ldr	r3, [pc, #64]	; (8005978 <MX_USART2_UART_Init+0x60>)
 8005938:	2200      	movs	r2, #0
 800593a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <MX_USART2_UART_Init+0x60>)
 800593e:	220c      	movs	r2, #12
 8005940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005942:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <MX_USART2_UART_Init+0x60>)
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <MX_USART2_UART_Init+0x60>)
 800594a:	2200      	movs	r2, #0
 800594c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <MX_USART2_UART_Init+0x60>)
 8005950:	2200      	movs	r2, #0
 8005952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005954:	4b08      	ldr	r3, [pc, #32]	; (8005978 <MX_USART2_UART_Init+0x60>)
 8005956:	2220      	movs	r2, #32
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <MX_USART2_UART_Init+0x60>)
 800595c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005962:	4805      	ldr	r0, [pc, #20]	; (8005978 <MX_USART2_UART_Init+0x60>)
 8005964:	f005 fa2a 	bl	800adbc <HAL_UART_Init>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800596e:	f7fe fd01 	bl	8004374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20002654 	.word	0x20002654
 800597c:	40004400 	.word	0x40004400

08005980 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 8005986:	4a15      	ldr	r2, [pc, #84]	; (80059dc <MX_USART3_UART_Init+0x5c>)
 8005988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800598a:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 800598c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005992:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 800599a:	2200      	movs	r2, #0
 800599c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800599e:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 80059a6:	220c      	movs	r2, #12
 80059a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 80059be:	2200      	movs	r2, #0
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80059c2:	4805      	ldr	r0, [pc, #20]	; (80059d8 <MX_USART3_UART_Init+0x58>)
 80059c4:	f005 f9fa 	bl	800adbc <HAL_UART_Init>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80059ce:	f7fe fcd1 	bl	8004374 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200026dc 	.word	0x200026dc
 80059dc:	40004800 	.word	0x40004800

080059e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b090      	sub	sp, #64	; 0x40
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4aa0      	ldr	r2, [pc, #640]	; (8005c80 <HAL_UART_MspInit+0x2a0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d131      	bne.n	8005a66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005a02:	4ba0      	ldr	r3, [pc, #640]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	4a9f      	ldr	r2, [pc, #636]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0c:	61d3      	str	r3, [r2, #28]
 8005a0e:	4b9d      	ldr	r3, [pc, #628]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a1a:	4b9a      	ldr	r3, [pc, #616]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4a99      	ldr	r2, [pc, #612]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a24:	6153      	str	r3, [r2, #20]
 8005a26:	4b97      	ldr	r3, [pc, #604]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005a32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a40:	2303      	movs	r3, #3
 8005a42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005a44:	2305      	movs	r3, #5
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	488e      	ldr	r0, [pc, #568]	; (8005c88 <HAL_UART_MspInit+0x2a8>)
 8005a50:	f000 ff3c 	bl	80068cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005a54:	2200      	movs	r2, #0
 8005a56:	2105      	movs	r1, #5
 8005a58:	2034      	movs	r0, #52	; 0x34
 8005a5a:	f000 fafd 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005a5e:	2034      	movs	r0, #52	; 0x34
 8005a60:	f000 fb16 	bl	8006090 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005a64:	e1aa      	b.n	8005dbc <HAL_UART_MspInit+0x3dc>
  else if(uartHandle->Instance==USART1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a88      	ldr	r2, [pc, #544]	; (8005c8c <HAL_UART_MspInit+0x2ac>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	f040 8081 	bne.w	8005b74 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a72:	4b84      	ldr	r3, [pc, #528]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	4a83      	ldr	r2, [pc, #524]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a7c:	6193      	str	r3, [r2, #24]
 8005a7e:	4b81      	ldr	r3, [pc, #516]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a86:	623b      	str	r3, [r7, #32]
 8005a88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a8a:	4b7e      	ldr	r3, [pc, #504]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4a7d      	ldr	r2, [pc, #500]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a94:	6153      	str	r3, [r2, #20]
 8005a96:	4b7b      	ldr	r3, [pc, #492]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005aa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ab4:	2307      	movs	r3, #7
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005abc:	4619      	mov	r1, r3
 8005abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ac2:	f000 ff03 	bl	80068cc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005ac6:	4b72      	ldr	r3, [pc, #456]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005ac8:	4a72      	ldr	r2, [pc, #456]	; (8005c94 <HAL_UART_MspInit+0x2b4>)
 8005aca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005acc:	4b70      	ldr	r3, [pc, #448]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005ace:	2210      	movs	r2, #16
 8005ad0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ad2:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ad8:	4b6d      	ldr	r3, [pc, #436]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ade:	4b6c      	ldr	r3, [pc, #432]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ae4:	4b6a      	ldr	r3, [pc, #424]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005aea:	4b69      	ldr	r3, [pc, #420]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005af0:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005af2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005af6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005af8:	4865      	ldr	r0, [pc, #404]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005afa:	f000 fad7 	bl	80060ac <HAL_DMA_Init>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005b04:	f7fe fc36 	bl	8004374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a61      	ldr	r2, [pc, #388]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005b0c:	671a      	str	r2, [r3, #112]	; 0x70
 8005b0e:	4a60      	ldr	r2, [pc, #384]	; (8005c90 <HAL_UART_MspInit+0x2b0>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005b14:	4b60      	ldr	r3, [pc, #384]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b16:	4a61      	ldr	r2, [pc, #388]	; (8005c9c <HAL_UART_MspInit+0x2bc>)
 8005b18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b20:	4b5d      	ldr	r3, [pc, #372]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b26:	4b5c      	ldr	r3, [pc, #368]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b28:	2280      	movs	r2, #128	; 0x80
 8005b2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b2c:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b32:	4b59      	ldr	r3, [pc, #356]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005b38:	4b57      	ldr	r3, [pc, #348]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005b3e:	4b56      	ldr	r3, [pc, #344]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b40:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005b44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005b46:	4854      	ldr	r0, [pc, #336]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b48:	f000 fab0 	bl	80060ac <HAL_DMA_Init>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8005b52:	f7fe fc0f 	bl	8004374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a4f      	ldr	r2, [pc, #316]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b5a:	675a      	str	r2, [r3, #116]	; 0x74
 8005b5c:	4a4e      	ldr	r2, [pc, #312]	; (8005c98 <HAL_UART_MspInit+0x2b8>)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005b62:	2200      	movs	r2, #0
 8005b64:	2105      	movs	r1, #5
 8005b66:	2025      	movs	r0, #37	; 0x25
 8005b68:	f000 fa76 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b6c:	2025      	movs	r0, #37	; 0x25
 8005b6e:	f000 fa8f 	bl	8006090 <HAL_NVIC_EnableIRQ>
}
 8005b72:	e123      	b.n	8005dbc <HAL_UART_MspInit+0x3dc>
  else if(uartHandle->Instance==USART2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a49      	ldr	r2, [pc, #292]	; (8005ca0 <HAL_UART_MspInit+0x2c0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	f040 809a 	bne.w	8005cb4 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b80:	4b40      	ldr	r3, [pc, #256]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	4a3f      	ldr	r2, [pc, #252]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b8a:	61d3      	str	r3, [r2, #28]
 8005b8c:	4b3d      	ldr	r3, [pc, #244]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b98:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	4a39      	ldr	r2, [pc, #228]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba2:	6153      	str	r3, [r2, #20]
 8005ba4:	4b37      	ldr	r3, [pc, #220]	; (8005c84 <HAL_UART_MspInit+0x2a4>)
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bc0:	2307      	movs	r3, #7
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bce:	f000 fe7d 	bl	80068cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005bd2:	4b34      	ldr	r3, [pc, #208]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005bd4:	4a34      	ldr	r2, [pc, #208]	; (8005ca8 <HAL_UART_MspInit+0x2c8>)
 8005bd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bd8:	4b32      	ldr	r3, [pc, #200]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005be4:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bea:	4b2e      	ldr	r3, [pc, #184]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bf0:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005bf6:	4b2b      	ldr	r3, [pc, #172]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005bfc:	4b29      	ldr	r3, [pc, #164]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005bfe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005c02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005c04:	4827      	ldr	r0, [pc, #156]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005c06:	f000 fa51 	bl	80060ac <HAL_DMA_Init>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8005c10:	f7fe fbb0 	bl	8004374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a23      	ldr	r2, [pc, #140]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005c18:	675a      	str	r2, [r3, #116]	; 0x74
 8005c1a:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <HAL_UART_MspInit+0x2c4>)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005c20:	4b22      	ldr	r3, [pc, #136]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c22:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <HAL_UART_MspInit+0x2d0>)
 8005c24:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c26:	4b21      	ldr	r3, [pc, #132]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c28:	2210      	movs	r2, #16
 8005c2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c32:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c38:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c3e:	4b1b      	ldr	r3, [pc, #108]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c4a:	4b18      	ldr	r3, [pc, #96]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c50:	4816      	ldr	r0, [pc, #88]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c52:	f000 fa2b 	bl	80060ac <HAL_DMA_Init>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8005c5c:	f7fe fb8a 	bl	8004374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a12      	ldr	r2, [pc, #72]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c64:	671a      	str	r2, [r3, #112]	; 0x70
 8005c66:	4a11      	ldr	r2, [pc, #68]	; (8005cac <HAL_UART_MspInit+0x2cc>)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2105      	movs	r1, #5
 8005c70:	2026      	movs	r0, #38	; 0x26
 8005c72:	f000 f9f1 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c76:	2026      	movs	r0, #38	; 0x26
 8005c78:	f000 fa0a 	bl	8006090 <HAL_NVIC_EnableIRQ>
}
 8005c7c:	e09e      	b.n	8005dbc <HAL_UART_MspInit+0x3dc>
 8005c7e:	bf00      	nop
 8005c80:	40004c00 	.word	0x40004c00
 8005c84:	40021000 	.word	0x40021000
 8005c88:	48000800 	.word	0x48000800
 8005c8c:	40013800 	.word	0x40013800
 8005c90:	20002764 	.word	0x20002764
 8005c94:	40020044 	.word	0x40020044
 8005c98:	200027a8 	.word	0x200027a8
 8005c9c:	40020058 	.word	0x40020058
 8005ca0:	40004400 	.word	0x40004400
 8005ca4:	200027ec 	.word	0x200027ec
 8005ca8:	4002006c 	.word	0x4002006c
 8005cac:	20002830 	.word	0x20002830
 8005cb0:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a42      	ldr	r2, [pc, #264]	; (8005dc4 <HAL_UART_MspInit+0x3e4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d17e      	bne.n	8005dbc <HAL_UART_MspInit+0x3dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005cbe:	4b42      	ldr	r3, [pc, #264]	; (8005dc8 <HAL_UART_MspInit+0x3e8>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	4a41      	ldr	r2, [pc, #260]	; (8005dc8 <HAL_UART_MspInit+0x3e8>)
 8005cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc8:	61d3      	str	r3, [r2, #28]
 8005cca:	4b3f      	ldr	r3, [pc, #252]	; (8005dc8 <HAL_UART_MspInit+0x3e8>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd6:	4b3c      	ldr	r3, [pc, #240]	; (8005dc8 <HAL_UART_MspInit+0x3e8>)
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4a3b      	ldr	r2, [pc, #236]	; (8005dc8 <HAL_UART_MspInit+0x3e8>)
 8005cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce0:	6153      	str	r3, [r2, #20]
 8005ce2:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <HAL_UART_MspInit+0x3e8>)
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d00:	2307      	movs	r3, #7
 8005d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4830      	ldr	r0, [pc, #192]	; (8005dcc <HAL_UART_MspInit+0x3ec>)
 8005d0c:	f000 fdde 	bl	80068cc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005d10:	4b2f      	ldr	r3, [pc, #188]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d12:	4a30      	ldr	r2, [pc, #192]	; (8005dd4 <HAL_UART_MspInit+0x3f4>)
 8005d14:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d16:	4b2e      	ldr	r3, [pc, #184]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d22:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d28:	4b29      	ldr	r3, [pc, #164]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d2e:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005d34:	4b26      	ldr	r3, [pc, #152]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d3a:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005d42:	4823      	ldr	r0, [pc, #140]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d44:	f000 f9b2 	bl	80060ac <HAL_DMA_Init>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_UART_MspInit+0x372>
      Error_Handler();
 8005d4e:	f7fe fb11 	bl	8004374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d56:	675a      	str	r2, [r3, #116]	; 0x74
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_UART_MspInit+0x3f0>)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_UART_MspInit+0x3fc>)
 8005d62:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d64:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d66:	2210      	movs	r2, #16
 8005d68:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d70:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d76:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d7c:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d88:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005d90:	4811      	ldr	r0, [pc, #68]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005d92:	f000 f98b 	bl	80060ac <HAL_DMA_Init>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8005d9c:	f7fe faea 	bl	8004374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005da4:	671a      	str	r2, [r3, #112]	; 0x70
 8005da6:	4a0c      	ldr	r2, [pc, #48]	; (8005dd8 <HAL_UART_MspInit+0x3f8>)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005dac:	2200      	movs	r2, #0
 8005dae:	2105      	movs	r1, #5
 8005db0:	2027      	movs	r0, #39	; 0x27
 8005db2:	f000 f951 	bl	8006058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005db6:	2027      	movs	r0, #39	; 0x27
 8005db8:	f000 f96a 	bl	8006090 <HAL_NVIC_EnableIRQ>
}
 8005dbc:	bf00      	nop
 8005dbe:	3740      	adds	r7, #64	; 0x40
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40004800 	.word	0x40004800
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	48000400 	.word	0x48000400
 8005dd0:	20002874 	.word	0x20002874
 8005dd4:	40020030 	.word	0x40020030
 8005dd8:	200028b8 	.word	0x200028b8
 8005ddc:	4002001c 	.word	0x4002001c

08005de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e18 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005de4:	f7ff fa76 	bl	80052d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005de8:	480c      	ldr	r0, [pc, #48]	; (8005e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8005dea:	490d      	ldr	r1, [pc, #52]	; (8005e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005dec:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <LoopForever+0xe>)
  movs r3, #0
 8005dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005df0:	e002      	b.n	8005df8 <LoopCopyDataInit>

08005df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005df6:	3304      	adds	r3, #4

08005df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dfc:	d3f9      	bcc.n	8005df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e00:	4c0a      	ldr	r4, [pc, #40]	; (8005e2c <LoopForever+0x16>)
  movs r3, #0
 8005e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e04:	e001      	b.n	8005e0a <LoopFillZerobss>

08005e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e08:	3204      	adds	r2, #4

08005e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e0c:	d3fb      	bcc.n	8005e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e0e:	f00a fa71 	bl	80102f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e12:	f7fe fa15 	bl	8004240 <main>

08005e16 <LoopForever>:

LoopForever:
    b LoopForever
 8005e16:	e7fe      	b.n	8005e16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e18:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e20:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8005e24:	08010a20 	.word	0x08010a20
  ldr r2, =_sbss
 8005e28:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8005e2c:	200030e8 	.word	0x200030e8

08005e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e30:	e7fe      	b.n	8005e30 <ADC1_2_IRQHandler>
	...

08005e34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_Init+0x28>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <HAL_Init+0x28>)
 8005e3e:	f043 0310 	orr.w	r3, r3, #16
 8005e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e44:	2003      	movs	r0, #3
 8005e46:	f000 f8fc 	bl	8006042 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e4a:	200f      	movs	r0, #15
 8005e4c:	f7ff f944 	bl	80050d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e50:	f7ff f91a 	bl	8005088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40022000 	.word	0x40022000

08005e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <HAL_IncTick+0x20>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_IncTick+0x24>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4413      	add	r3, r2
 8005e70:	4a04      	ldr	r2, [pc, #16]	; (8005e84 <HAL_IncTick+0x24>)
 8005e72:	6013      	str	r3, [r2, #0]
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20000120 	.word	0x20000120
 8005e84:	200028fc 	.word	0x200028fc

08005e88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8005e8c:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <HAL_GetTick+0x14>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	200028fc 	.word	0x200028fc

08005ea0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ea8:	f7ff ffee 	bl	8005e88 <HAL_GetTick>
 8005eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d005      	beq.n	8005ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <HAL_Delay+0x44>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005ec6:	bf00      	nop
 8005ec8:	f7ff ffde 	bl	8005e88 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d8f7      	bhi.n	8005ec8 <HAL_Delay+0x28>
  {
  }
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000120 	.word	0x20000120

08005ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <__NVIC_SetPriorityGrouping+0x44>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f04:	4013      	ands	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f1a:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <__NVIC_SetPriorityGrouping+0x44>)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	60d3      	str	r3, [r2, #12]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000ed00 	.word	0xe000ed00

08005f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <__NVIC_GetPriorityGrouping+0x18>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	0a1b      	lsrs	r3, r3, #8
 8005f3a:	f003 0307 	and.w	r3, r3, #7
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000ed00 	.word	0xe000ed00

08005f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	db0b      	blt.n	8005f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	f003 021f 	and.w	r2, r3, #31
 8005f64:	4907      	ldr	r1, [pc, #28]	; (8005f84 <__NVIC_EnableIRQ+0x38>)
 8005f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	e000e100 	.word	0xe000e100

08005f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	db0a      	blt.n	8005fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	490c      	ldr	r1, [pc, #48]	; (8005fd4 <__NVIC_SetPriority+0x4c>)
 8005fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa6:	0112      	lsls	r2, r2, #4
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	440b      	add	r3, r1
 8005fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fb0:	e00a      	b.n	8005fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	4908      	ldr	r1, [pc, #32]	; (8005fd8 <__NVIC_SetPriority+0x50>)
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	0112      	lsls	r2, r2, #4
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	761a      	strb	r2, [r3, #24]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	e000e100 	.word	0xe000e100
 8005fd8:	e000ed00 	.word	0xe000ed00

08005fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f1c3 0307 	rsb	r3, r3, #7
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	bf28      	it	cs
 8005ffa:	2304      	movcs	r3, #4
 8005ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3304      	adds	r3, #4
 8006002:	2b06      	cmp	r3, #6
 8006004:	d902      	bls.n	800600c <NVIC_EncodePriority+0x30>
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	3b03      	subs	r3, #3
 800600a:	e000      	b.n	800600e <NVIC_EncodePriority+0x32>
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006010:	f04f 32ff 	mov.w	r2, #4294967295
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43da      	mvns	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	401a      	ands	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006024:	f04f 31ff 	mov.w	r1, #4294967295
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	fa01 f303 	lsl.w	r3, r1, r3
 800602e:	43d9      	mvns	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006034:	4313      	orrs	r3, r2
         );
}
 8006036:	4618      	mov	r0, r3
 8006038:	3724      	adds	r7, #36	; 0x24
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff4c 	bl	8005ee8 <__NVIC_SetPriorityGrouping>
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800606a:	f7ff ff61 	bl	8005f30 <__NVIC_GetPriorityGrouping>
 800606e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	6978      	ldr	r0, [r7, #20]
 8006076:	f7ff ffb1 	bl	8005fdc <NVIC_EncodePriority>
 800607a:	4602      	mov	r2, r0
 800607c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff ff80 	bl	8005f88 <__NVIC_SetPriority>
}
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800609a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ff54 	bl	8005f4c <__NVIC_EnableIRQ>
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e037      	b.n	8006132 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80060dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80060e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9c5 	bl	80064a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}  
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b086      	sub	sp, #24
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
 8006146:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_DMA_Start_IT+0x20>
 8006156:	2302      	movs	r3, #2
 8006158:	e04a      	b.n	80061f0 <HAL_DMA_Start_IT+0xb6>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006168:	2b01      	cmp	r3, #1
 800616a:	d13a      	bne.n	80061e2 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f958 	bl	8006446 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 020e 	orr.w	r2, r2, #14
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e00f      	b.n	80061d0 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 020a 	orr.w	r2, r2, #10
 80061be:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0204 	bic.w	r2, r2, #4
 80061ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e005      	b.n	80061ee <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
 80061ec:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
} 
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006206:	2b02      	cmp	r3, #2
 8006208:	d008      	beq.n	800621c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2204      	movs	r2, #4
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e020      	b.n	800625e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 020e 	bic.w	r2, r2, #14
 800622a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	2101      	movs	r1, #1
 8006246:	fa01 f202 	lsl.w	r2, r1, r2
 800624a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800627c:	2b02      	cmp	r3, #2
 800627e:	d005      	beq.n	800628c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2204      	movs	r2, #4
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	73fb      	strb	r3, [r7, #15]
 800628a:	e027      	b.n	80062dc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 020e 	bic.w	r2, r2, #14
 800629a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	2101      	movs	r1, #1
 80062b6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ba:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
    } 
  }
  return status;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	2204      	movs	r2, #4
 8006304:	409a      	lsls	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d024      	beq.n	8006358 <HAL_DMA_IRQHandler+0x72>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01f      	beq.n	8006358 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0204 	bic.w	r2, r2, #4
 8006334:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	2104      	movs	r1, #4
 8006340:	fa01 f202 	lsl.w	r2, r1, r2
 8006344:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d06a      	beq.n	8006424 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006356:	e065      	b.n	8006424 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	2202      	movs	r2, #2
 800635e:	409a      	lsls	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02c      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xdc>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d027      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 020a 	bic.w	r2, r2, #10
 800638e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a0:	2102      	movs	r1, #2
 80063a2:	fa01 f202 	lsl.w	r2, r1, r2
 80063a6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d035      	beq.n	8006424 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80063c0:	e030      	b.n	8006424 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	2208      	movs	r2, #8
 80063c8:	409a      	lsls	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d028      	beq.n	8006424 <HAL_DMA_IRQHandler+0x13e>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d023      	beq.n	8006424 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 020e 	bic.w	r2, r2, #14
 80063ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	2101      	movs	r1, #1
 80063f6:	fa01 f202 	lsl.w	r2, r1, r2
 80063fa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
    }
  }
}  
 8006422:	e7ff      	b.n	8006424 <HAL_DMA_IRQHandler+0x13e>
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f202 	lsl.w	r2, r1, r2
 8006462:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b10      	cmp	r3, #16
 8006472:	d108      	bne.n	8006486 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006484:	e007      	b.n	8006496 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	4b14      	ldr	r3, [pc, #80]	; (8006504 <DMA_CalcBaseAndBitshift+0x60>)
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d80f      	bhi.n	80064d8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <DMA_CalcBaseAndBitshift+0x64>)
 80064c0:	4413      	add	r3, r2
 80064c2:	4a12      	ldr	r2, [pc, #72]	; (800650c <DMA_CalcBaseAndBitshift+0x68>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a0f      	ldr	r2, [pc, #60]	; (8006510 <DMA_CalcBaseAndBitshift+0x6c>)
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80064d6:	e00e      	b.n	80064f6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <DMA_CalcBaseAndBitshift+0x70>)
 80064e0:	4413      	add	r3, r2
 80064e2:	4a0a      	ldr	r2, [pc, #40]	; (800650c <DMA_CalcBaseAndBitshift+0x68>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	091b      	lsrs	r3, r3, #4
 80064ea:	009a      	lsls	r2, r3, #2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a09      	ldr	r2, [pc, #36]	; (8006518 <DMA_CalcBaseAndBitshift+0x74>)
 80064f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40020407 	.word	0x40020407
 8006508:	bffdfff8 	.word	0xbffdfff8
 800650c:	cccccccd 	.word	0xcccccccd
 8006510:	40020000 	.word	0x40020000
 8006514:	bffdfbf8 	.word	0xbffdfbf8
 8006518:	40020400 	.word	0x40020400

0800651c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006536:	4b2f      	ldr	r3, [pc, #188]	; (80065f4 <HAL_FLASH_Program+0xd8>)
 8006538:	7e1b      	ldrb	r3, [r3, #24]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_FLASH_Program+0x26>
 800653e:	2302      	movs	r3, #2
 8006540:	e054      	b.n	80065ec <HAL_FLASH_Program+0xd0>
 8006542:	4b2c      	ldr	r3, [pc, #176]	; (80065f4 <HAL_FLASH_Program+0xd8>)
 8006544:	2201      	movs	r2, #1
 8006546:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006548:	f24c 3050 	movw	r0, #50000	; 0xc350
 800654c:	f000 f8a8 	bl	80066a0 <FLASH_WaitForLastOperation>
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d144      	bne.n	80065e4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d102      	bne.n	8006566 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006560:	2301      	movs	r3, #1
 8006562:	757b      	strb	r3, [r7, #21]
 8006564:	e007      	b.n	8006576 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d102      	bne.n	8006572 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800656c:	2302      	movs	r3, #2
 800656e:	757b      	strb	r3, [r7, #21]
 8006570:	e001      	b.n	8006576 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8006572:	2304      	movs	r3, #4
 8006574:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006576:	2300      	movs	r3, #0
 8006578:	75bb      	strb	r3, [r7, #22]
 800657a:	e02d      	b.n	80065d8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800657c:	7dbb      	ldrb	r3, [r7, #22]
 800657e:	005a      	lsls	r2, r3, #1
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	eb02 0c03 	add.w	ip, r2, r3
 8006586:	7dbb      	ldrb	r3, [r7, #22]
 8006588:	0119      	lsls	r1, r3, #4
 800658a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658e:	f1c1 0620 	rsb	r6, r1, #32
 8006592:	f1a1 0020 	sub.w	r0, r1, #32
 8006596:	fa22 f401 	lsr.w	r4, r2, r1
 800659a:	fa03 f606 	lsl.w	r6, r3, r6
 800659e:	4334      	orrs	r4, r6
 80065a0:	fa23 f000 	lsr.w	r0, r3, r0
 80065a4:	4304      	orrs	r4, r0
 80065a6:	fa23 f501 	lsr.w	r5, r3, r1
 80065aa:	b2a3      	uxth	r3, r4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4660      	mov	r0, ip
 80065b0:	f000 f85a 	bl	8006668 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80065b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065b8:	f000 f872 	bl	80066a0 <FLASH_WaitForLastOperation>
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <HAL_FLASH_Program+0xdc>)
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	4a0c      	ldr	r2, [pc, #48]	; (80065f8 <HAL_FLASH_Program+0xdc>)
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d107      	bne.n	80065e2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80065d2:	7dbb      	ldrb	r3, [r7, #22]
 80065d4:	3301      	adds	r3, #1
 80065d6:	75bb      	strb	r3, [r7, #22]
 80065d8:	7dba      	ldrb	r2, [r7, #22]
 80065da:	7d7b      	ldrb	r3, [r7, #21]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d3cd      	bcc.n	800657c <HAL_FLASH_Program+0x60>
 80065e0:	e000      	b.n	80065e4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80065e2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80065e4:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <HAL_FLASH_Program+0xd8>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	761a      	strb	r2, [r3, #24]

  return status;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f4:	20002900 	.word	0x20002900
 80065f8:	40022000 	.word	0x40022000

080065fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <HAL_FLASH_Unlock+0x40>)
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <HAL_FLASH_Unlock+0x40>)
 8006614:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <HAL_FLASH_Unlock+0x44>)
 8006616:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006618:	4b08      	ldr	r3, [pc, #32]	; (800663c <HAL_FLASH_Unlock+0x40>)
 800661a:	4a0a      	ldr	r2, [pc, #40]	; (8006644 <HAL_FLASH_Unlock+0x48>)
 800661c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <HAL_FLASH_Unlock+0x40>)
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800662e:	79fb      	ldrb	r3, [r7, #7]
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	40022000 	.word	0x40022000
 8006640:	45670123 	.word	0x45670123
 8006644:	cdef89ab 	.word	0xcdef89ab

08006648 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <HAL_FLASH_Lock+0x1c>)
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	4a04      	ldr	r2, [pc, #16]	; (8006664 <HAL_FLASH_Lock+0x1c>)
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	40022000 	.word	0x40022000

08006668 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006674:	4b08      	ldr	r3, [pc, #32]	; (8006698 <FLASH_Program_HalfWord+0x30>)
 8006676:	2200      	movs	r2, #0
 8006678:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <FLASH_Program_HalfWord+0x34>)
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	4a07      	ldr	r2, [pc, #28]	; (800669c <FLASH_Program_HalfWord+0x34>)
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	887a      	ldrh	r2, [r7, #2]
 800668a:	801a      	strh	r2, [r3, #0]
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20002900 	.word	0x20002900
 800669c:	40022000 	.word	0x40022000

080066a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80066a8:	f7ff fbee 	bl	8005e88 <HAL_GetTick>
 80066ac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80066ae:	e010      	b.n	80066d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d00c      	beq.n	80066d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <FLASH_WaitForLastOperation+0x2e>
 80066be:	f7ff fbe3 	bl	8005e88 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d201      	bcs.n	80066d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e01f      	b.n	8006712 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <FLASH_WaitForLastOperation+0x7c>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d0e8      	beq.n	80066b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <FLASH_WaitForLastOperation+0x7c>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d102      	bne.n	80066f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <FLASH_WaitForLastOperation+0x7c>)
 80066ec:	2220      	movs	r2, #32
 80066ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <FLASH_WaitForLastOperation+0x7c>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d005      	beq.n	8006708 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80066fc:	4b07      	ldr	r3, [pc, #28]	; (800671c <FLASH_WaitForLastOperation+0x7c>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006704:	2b04      	cmp	r3, #4
 8006706:	d103      	bne.n	8006710 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006708:	f000 f80a 	bl	8006720 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40022000 	.word	0x40022000

08006720 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <FLASH_SetErrorCode+0x5c>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b10      	cmp	r3, #16
 8006734:	d109      	bne.n	800674a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006736:	4b12      	ldr	r3, [pc, #72]	; (8006780 <FLASH_SetErrorCode+0x60>)
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	4a10      	ldr	r2, [pc, #64]	; (8006780 <FLASH_SetErrorCode+0x60>)
 8006740:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f043 0310 	orr.w	r3, r3, #16
 8006748:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <FLASH_SetErrorCode+0x5c>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d109      	bne.n	800676a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <FLASH_SetErrorCode+0x60>)
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	4a08      	ldr	r2, [pc, #32]	; (8006780 <FLASH_SetErrorCode+0x60>)
 8006760:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f043 0304 	orr.w	r3, r3, #4
 8006768:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800676a:	4a04      	ldr	r2, [pc, #16]	; (800677c <FLASH_SetErrorCode+0x5c>)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60d3      	str	r3, [r2, #12]
}  
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40022000 	.word	0x40022000
 8006780:	20002900 	.word	0x20002900

08006784 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <HAL_FLASHEx_Erase+0xcc>)
 8006798:	7e1b      	ldrb	r3, [r3, #24]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_FLASHEx_Erase+0x1e>
 800679e:	2302      	movs	r3, #2
 80067a0:	e052      	b.n	8006848 <HAL_FLASHEx_Erase+0xc4>
 80067a2:	4b2b      	ldr	r3, [pc, #172]	; (8006850 <HAL_FLASHEx_Erase+0xcc>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d115      	bne.n	80067dc <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80067b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067b4:	f7ff ff74 	bl	80066a0 <FLASH_WaitForLastOperation>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d140      	bne.n	8006840 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80067be:	f000 f84b 	bl	8006858 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80067c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067c6:	f7ff ff6b 	bl	80066a0 <FLASH_WaitForLastOperation>
 80067ca:	4603      	mov	r3, r0
 80067cc:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80067ce:	4b21      	ldr	r3, [pc, #132]	; (8006854 <HAL_FLASHEx_Erase+0xd0>)
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	4a20      	ldr	r2, [pc, #128]	; (8006854 <HAL_FLASHEx_Erase+0xd0>)
 80067d4:	f023 0304 	bic.w	r3, r3, #4
 80067d8:	6113      	str	r3, [r2, #16]
 80067da:	e031      	b.n	8006840 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80067dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067e0:	f7ff ff5e 	bl	80066a0 <FLASH_WaitForLastOperation>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d12a      	bne.n	8006840 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295
 80067f0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	60bb      	str	r3, [r7, #8]
 80067f8:	e019      	b.n	800682e <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80067fa:	68b8      	ldr	r0, [r7, #8]
 80067fc:	f000 f846 	bl	800688c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006800:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006804:	f7ff ff4c 	bl	80066a0 <FLASH_WaitForLastOperation>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <HAL_FLASHEx_Erase+0xd0>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	4a10      	ldr	r2, [pc, #64]	; (8006854 <HAL_FLASHEx_Erase+0xd0>)
 8006812:	f023 0302 	bic.w	r3, r3, #2
 8006816:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	601a      	str	r2, [r3, #0]
            break;
 8006824:	e00c      	b.n	8006840 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	02da      	lsls	r2, r3, #11
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4413      	add	r3, r2
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d3dc      	bcc.n	80067fa <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <HAL_FLASHEx_Erase+0xcc>)
 8006842:	2200      	movs	r2, #0
 8006844:	761a      	strb	r2, [r3, #24]

  return status;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20002900 	.word	0x20002900
 8006854:	40022000 	.word	0x40022000

08006858 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <FLASH_MassErase+0x2c>)
 800685e:	2200      	movs	r2, #0
 8006860:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006862:	4b09      	ldr	r3, [pc, #36]	; (8006888 <FLASH_MassErase+0x30>)
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	4a08      	ldr	r2, [pc, #32]	; (8006888 <FLASH_MassErase+0x30>)
 8006868:	f043 0304 	orr.w	r3, r3, #4
 800686c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800686e:	4b06      	ldr	r3, [pc, #24]	; (8006888 <FLASH_MassErase+0x30>)
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	4a05      	ldr	r2, [pc, #20]	; (8006888 <FLASH_MassErase+0x30>)
 8006874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006878:	6113      	str	r3, [r2, #16]
}
 800687a:	bf00      	nop
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20002900 	.word	0x20002900
 8006888:	40022000 	.word	0x40022000

0800688c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <FLASH_PageErase+0x38>)
 8006896:	2200      	movs	r2, #0
 8006898:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <FLASH_PageErase+0x3c>)
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <FLASH_PageErase+0x3c>)
 80068a0:	f043 0302 	orr.w	r3, r3, #2
 80068a4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80068a6:	4a08      	ldr	r2, [pc, #32]	; (80068c8 <FLASH_PageErase+0x3c>)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <FLASH_PageErase+0x3c>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <FLASH_PageErase+0x3c>)
 80068b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b6:	6113      	str	r3, [r2, #16]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20002900 	.word	0x20002900
 80068c8:	40022000 	.word	0x40022000

080068cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068da:	e154      	b.n	8006b86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	2101      	movs	r1, #1
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
 80068e8:	4013      	ands	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8146 	beq.w	8006b80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d005      	beq.n	800690c <HAL_GPIO_Init+0x40>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d130      	bne.n	800696e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	2203      	movs	r2, #3
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4013      	ands	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006942:	2201      	movs	r2, #1
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4013      	ands	r3, r2
 8006950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	091b      	lsrs	r3, r3, #4
 8006958:	f003 0201 	and.w	r2, r3, #1
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d017      	beq.n	80069aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	2203      	movs	r2, #3
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4013      	ands	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d123      	bne.n	80069fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	08da      	lsrs	r2, r3, #3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3208      	adds	r2, #8
 80069be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	220f      	movs	r2, #15
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4013      	ands	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	08da      	lsrs	r2, r3, #3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3208      	adds	r2, #8
 80069f8:	6939      	ldr	r1, [r7, #16]
 80069fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	2203      	movs	r2, #3
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4013      	ands	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f003 0203 	and.w	r2, r3, #3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80a0 	beq.w	8006b80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a40:	4b58      	ldr	r3, [pc, #352]	; (8006ba4 <HAL_GPIO_Init+0x2d8>)
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	4a57      	ldr	r2, [pc, #348]	; (8006ba4 <HAL_GPIO_Init+0x2d8>)
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	6193      	str	r3, [r2, #24]
 8006a4c:	4b55      	ldr	r3, [pc, #340]	; (8006ba4 <HAL_GPIO_Init+0x2d8>)
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006a58:	4a53      	ldr	r2, [pc, #332]	; (8006ba8 <HAL_GPIO_Init+0x2dc>)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	3302      	adds	r3, #2
 8006a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	220f      	movs	r2, #15
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	43db      	mvns	r3, r3
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a82:	d019      	beq.n	8006ab8 <HAL_GPIO_Init+0x1ec>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a49      	ldr	r2, [pc, #292]	; (8006bac <HAL_GPIO_Init+0x2e0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_GPIO_Init+0x1e8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a48      	ldr	r2, [pc, #288]	; (8006bb0 <HAL_GPIO_Init+0x2e4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00d      	beq.n	8006ab0 <HAL_GPIO_Init+0x1e4>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a47      	ldr	r2, [pc, #284]	; (8006bb4 <HAL_GPIO_Init+0x2e8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <HAL_GPIO_Init+0x1e0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a46      	ldr	r2, [pc, #280]	; (8006bb8 <HAL_GPIO_Init+0x2ec>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d101      	bne.n	8006aa8 <HAL_GPIO_Init+0x1dc>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	e008      	b.n	8006aba <HAL_GPIO_Init+0x1ee>
 8006aa8:	2305      	movs	r3, #5
 8006aaa:	e006      	b.n	8006aba <HAL_GPIO_Init+0x1ee>
 8006aac:	2303      	movs	r3, #3
 8006aae:	e004      	b.n	8006aba <HAL_GPIO_Init+0x1ee>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e002      	b.n	8006aba <HAL_GPIO_Init+0x1ee>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_GPIO_Init+0x1ee>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	f002 0203 	and.w	r2, r2, #3
 8006ac0:	0092      	lsls	r2, r2, #2
 8006ac2:	4093      	lsls	r3, r2
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006aca:	4937      	ldr	r1, [pc, #220]	; (8006ba8 <HAL_GPIO_Init+0x2dc>)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	089b      	lsrs	r3, r3, #2
 8006ad0:	3302      	adds	r3, #2
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ad8:	4b38      	ldr	r3, [pc, #224]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006afc:	4a2f      	ldr	r2, [pc, #188]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b02:	4b2e      	ldr	r3, [pc, #184]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006b26:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b2c:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	43db      	mvns	r3, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006b50:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b56:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4013      	ands	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006b7a:	4a10      	ldr	r2, [pc, #64]	; (8006bbc <HAL_GPIO_Init+0x2f0>)
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3301      	adds	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f47f aea3 	bne.w	80068dc <HAL_GPIO_Init+0x10>
  }
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	40021000 	.word	0x40021000
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	48000400 	.word	0x48000400
 8006bb0:	48000800 	.word	0x48000800
 8006bb4:	48000c00 	.word	0x48000c00
 8006bb8:	48001000 	.word	0x48001000
 8006bbc:	40010400 	.word	0x40010400

08006bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	807b      	strh	r3, [r7, #2]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bd0:	787b      	ldrb	r3, [r7, #1]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bd6:	887a      	ldrh	r2, [r7, #2]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bdc:	e002      	b.n	8006be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bde:	887a      	ldrh	r2, [r7, #2]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c02:	887a      	ldrh	r2, [r7, #2]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4013      	ands	r3, r2
 8006c08:	041a      	lsls	r2, r3, #16
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	43d9      	mvns	r1, r3
 8006c0e:	887b      	ldrh	r3, [r7, #2]
 8006c10:	400b      	ands	r3, r1
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	619a      	str	r2, [r3, #24]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e081      	b.n	8006d3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fd faac 	bl	80041a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2224      	movs	r2, #36	; 0x24
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	e006      	b.n	8006cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d104      	bne.n	8006cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69d9      	ldr	r1, [r3, #28]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1a      	ldr	r2, [r3, #32]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0201 	orr.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	460b      	mov	r3, r1
 8006d52:	817b      	strh	r3, [r7, #10]
 8006d54:	4613      	mov	r3, r2
 8006d56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	f040 80da 	bne.w	8006f1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_I2C_Master_Transmit+0x30>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e0d3      	b.n	8006f1c <HAL_I2C_Master_Transmit+0x1d8>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d7c:	f7ff f884 	bl	8005e88 <HAL_GetTick>
 8006d80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	2319      	movs	r3, #25
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f001 fc99 	bl	80086c6 <I2C_WaitOnFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e0be      	b.n	8006f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2210      	movs	r2, #16
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	893a      	ldrh	r2, [r7, #8]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2bff      	cmp	r3, #255	; 0xff
 8006dce:	d90e      	bls.n	8006dee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	22ff      	movs	r2, #255	; 0xff
 8006dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	8979      	ldrh	r1, [r7, #10]
 8006dde:	4b51      	ldr	r3, [pc, #324]	; (8006f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f001 fea8 	bl	8008b3c <I2C_TransferConfig>
 8006dec:	e06c      	b.n	8006ec8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	8979      	ldrh	r1, [r7, #10]
 8006e00:	4b48      	ldr	r3, [pc, #288]	; (8006f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 fe97 	bl	8008b3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006e0e:	e05b      	b.n	8006ec8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	6a39      	ldr	r1, [r7, #32]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f001 fca5 	bl	8008764 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e07b      	b.n	8006f1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	781a      	ldrb	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d034      	beq.n	8006ec8 <HAL_I2C_Master_Transmit+0x184>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d130      	bne.n	8006ec8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f001 fc28 	bl	80086c6 <I2C_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e04d      	b.n	8006f1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2bff      	cmp	r3, #255	; 0xff
 8006e88:	d90e      	bls.n	8006ea8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	8979      	ldrh	r1, [r7, #10]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f001 fe4b 	bl	8008b3c <I2C_TransferConfig>
 8006ea6:	e00f      	b.n	8006ec8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	8979      	ldrh	r1, [r7, #10]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f001 fe3a 	bl	8008b3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d19e      	bne.n	8006e10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	6a39      	ldr	r1, [r7, #32]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f001 fc8b 	bl	80087f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e01a      	b.n	8006f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2220      	movs	r2, #32
 8006eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <HAL_I2C_Master_Transmit+0x1e4>)
 8006efa:	400b      	ands	r3, r1
 8006efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	80002000 	.word	0x80002000
 8006f28:	fe00e800 	.word	0xfe00e800

08006f2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	461a      	mov	r2, r3
 8006f38:	460b      	mov	r3, r1
 8006f3a:	817b      	strh	r3, [r7, #10]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	f040 80db 	bne.w	8007104 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_I2C_Master_Receive+0x30>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e0d4      	b.n	8007106 <HAL_I2C_Master_Receive+0x1da>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f64:	f7fe ff90 	bl	8005e88 <HAL_GetTick>
 8006f68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2319      	movs	r3, #25
 8006f70:	2201      	movs	r2, #1
 8006f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f001 fba5 	bl	80086c6 <I2C_WaitOnFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e0bf      	b.n	8007106 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2222      	movs	r2, #34	; 0x22
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2210      	movs	r2, #16
 8006f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	893a      	ldrh	r2, [r7, #8]
 8006fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2bff      	cmp	r3, #255	; 0xff
 8006fb6:	d90e      	bls.n	8006fd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	22ff      	movs	r2, #255	; 0xff
 8006fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	8979      	ldrh	r1, [r7, #10]
 8006fc6:	4b52      	ldr	r3, [pc, #328]	; (8007110 <HAL_I2C_Master_Receive+0x1e4>)
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f001 fdb4 	bl	8008b3c <I2C_TransferConfig>
 8006fd4:	e06d      	b.n	80070b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	8979      	ldrh	r1, [r7, #10]
 8006fe8:	4b49      	ldr	r3, [pc, #292]	; (8007110 <HAL_I2C_Master_Receive+0x1e4>)
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 fda3 	bl	8008b3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006ff6:	e05c      	b.n	80070b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	6a39      	ldr	r1, [r7, #32]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 fc3b 	bl	8008878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e07c      	b.n	8007106 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d034      	beq.n	80070b2 <HAL_I2C_Master_Receive+0x186>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704c:	2b00      	cmp	r3, #0
 800704e:	d130      	bne.n	80070b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	2200      	movs	r2, #0
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f001 fb33 	bl	80086c6 <I2C_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e04d      	b.n	8007106 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	2bff      	cmp	r3, #255	; 0xff
 8007072:	d90e      	bls.n	8007092 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	22ff      	movs	r2, #255	; 0xff
 8007078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707e:	b2da      	uxtb	r2, r3
 8007080:	8979      	ldrh	r1, [r7, #10]
 8007082:	2300      	movs	r3, #0
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 fd56 	bl	8008b3c <I2C_TransferConfig>
 8007090:	e00f      	b.n	80070b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	8979      	ldrh	r1, [r7, #10]
 80070a4:	2300      	movs	r3, #0
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f001 fd45 	bl	8008b3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d19d      	bne.n	8006ff8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	6a39      	ldr	r1, [r7, #32]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 fb96 	bl	80087f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e01a      	b.n	8007106 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2220      	movs	r2, #32
 80070d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6859      	ldr	r1, [r3, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <HAL_I2C_Master_Receive+0x1e8>)
 80070e4:	400b      	ands	r3, r1
 80070e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	80002400 	.word	0x80002400
 8007114:	fe00e800 	.word	0xfe00e800

08007118 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	461a      	mov	r2, r3
 8007124:	460b      	mov	r3, r1
 8007126:	817b      	strh	r3, [r7, #10]
 8007128:	4613      	mov	r3, r2
 800712a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b20      	cmp	r3, #32
 8007136:	d153      	bne.n	80071e0 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007146:	d101      	bne.n	800714c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
 800714a:	e04a      	b.n	80071e2 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_I2C_Master_Transmit_IT+0x42>
 8007156:	2302      	movs	r3, #2
 8007158:	e043      	b.n	80071e2 <HAL_I2C_Master_Transmit_IT+0xca>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2221      	movs	r2, #33	; 0x21
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2210      	movs	r2, #16
 800716e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	893a      	ldrh	r2, [r7, #8]
 8007182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4a19      	ldr	r2, [pc, #100]	; (80071ec <HAL_I2C_Master_Transmit_IT+0xd4>)
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4a18      	ldr	r2, [pc, #96]	; (80071f0 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800718e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2bff      	cmp	r3, #255	; 0xff
 8007198:	d906      	bls.n	80071a8 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80071a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	e007      	b.n	80071b8 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80071b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071b6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	8979      	ldrh	r1, [r7, #10]
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f001 fcb8 	bl	8008b3c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071d4:	2101      	movs	r1, #1
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 fce2 	bl	8008ba0 <I2C_Enable_IRQ>

    return HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	e000      	b.n	80071e2 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80071e0:	2302      	movs	r3, #2
  }
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	ffff0000 	.word	0xffff0000
 80071f0:	080073b5 	.word	0x080073b5
 80071f4:	80002000 	.word	0x80002000

080071f8 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	461a      	mov	r2, r3
 8007204:	460b      	mov	r3, r1
 8007206:	817b      	strh	r3, [r7, #10]
 8007208:	4613      	mov	r3, r2
 800720a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b20      	cmp	r3, #32
 8007216:	d153      	bne.n	80072c0 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007226:	d101      	bne.n	800722c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
 800722a:	e04a      	b.n	80072c2 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_I2C_Master_Receive_IT+0x42>
 8007236:	2302      	movs	r3, #2
 8007238:	e043      	b.n	80072c2 <HAL_I2C_Master_Receive_IT+0xca>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2222      	movs	r2, #34	; 0x22
 8007246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2210      	movs	r2, #16
 800724e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	893a      	ldrh	r2, [r7, #8]
 8007262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4a19      	ldr	r2, [pc, #100]	; (80072cc <HAL_I2C_Master_Receive_IT+0xd4>)
 8007268:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a18      	ldr	r2, [pc, #96]	; (80072d0 <HAL_I2C_Master_Receive_IT+0xd8>)
 800726e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	2bff      	cmp	r3, #255	; 0xff
 8007278:	d906      	bls.n	8007288 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	22ff      	movs	r2, #255	; 0xff
 800727e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	e007      	b.n	8007298 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007296:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729c:	b2da      	uxtb	r2, r3
 800729e:	8979      	ldrh	r1, [r7, #10]
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <HAL_I2C_Master_Receive_IT+0xdc>)
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f001 fc48 	bl	8008b3c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80072b4:	2102      	movs	r1, #2
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f001 fc72 	bl	8008ba0 <I2C_Enable_IRQ>

    return HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	e000      	b.n	80072c2 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80072c0:	2302      	movs	r3, #2
  }
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	ffff0000 	.word	0xffff0000
 80072d0:	080073b5 	.word	0x080073b5
 80072d4:	80002400 	.word	0x80002400

080072d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
  }
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
 8007340:	4613      	mov	r3, r2
 8007342:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af02      	add	r7, sp, #8
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <I2C_Master_ISR_IT+0x1e>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e108      	b.n	80075e4 <I2C_Master_ISR_IT+0x230>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d012      	beq.n	800740a <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2210      	movs	r2, #16
 80073f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	f043 0204 	orr.w	r2, r3, #4
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f001 f91d 	bl	8008642 <I2C_Flush_TXDR>
 8007408:	e0d9      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d022      	beq.n	800745a <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01d      	beq.n	800745a <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f023 0304 	bic.w	r3, r3, #4
 8007424:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	b2d2      	uxtb	r2, r2
 8007432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007458:	e0b1      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01d      	beq.n	80074a0 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800746a:	2b00      	cmp	r3, #0
 800746c:	d018      	beq.n	80074a0 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800749e:	e08e      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d05c      	beq.n	8007564 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d057      	beq.n	8007564 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d040      	beq.n	8007540 <I2C_Master_ISR_IT+0x18c>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d13c      	bne.n	8007540 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2bff      	cmp	r3, #255	; 0xff
 80074dc:	d90e      	bls.n	80074fc <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	22ff      	movs	r2, #255	; 0xff
 80074e2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	8a79      	ldrh	r1, [r7, #18]
 80074ec:	2300      	movs	r3, #0
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f001 fb21 	bl	8008b3c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074fa:	e032      	b.n	8007562 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800750e:	d00b      	beq.n	8007528 <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007514:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800751a:	8a79      	ldrh	r1, [r7, #18]
 800751c:	2000      	movs	r0, #0
 800751e:	9000      	str	r0, [sp, #0]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f001 fb0b 	bl	8008b3c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007526:	e01c      	b.n	8007562 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	b2da      	uxtb	r2, r3
 800752e:	8a79      	ldrh	r1, [r7, #18]
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f001 faff 	bl	8008b3c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800753e:	e010      	b.n	8007562 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800754e:	d003      	beq.n	8007558 <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fca3 	bl	8007e9c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007556:	e032      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 ff5a 	bl	8008414 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007560:	e02d      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
 8007562:	e02c      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b00      	cmp	r3, #0
 800756c:	d027      	beq.n	80075be <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007574:	2b00      	cmp	r3, #0
 8007576:	d022      	beq.n	80075be <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d119      	bne.n	80075b6 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007590:	d015      	beq.n	80075be <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800759a:	d108      	bne.n	80075ae <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	e007      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fc74 	bl	8007e9c <I2C_ITMasterSeqCplt>
 80075b4:	e003      	b.n	80075be <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80075b6:	2140      	movs	r1, #64	; 0x40
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 ff2b 	bl	8008414 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80075d2:	6979      	ldr	r1, [r7, #20]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fcfb 	bl	8007fd0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <I2C_Slave_ISR_IT+0x24>
 800760c:	2302      	movs	r3, #2
 800760e:	e0e1      	b.n	80077d4 <I2C_Slave_ISR_IT+0x1e8>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800762c:	6939      	ldr	r1, [r7, #16]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fd96 	bl	8008160 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04b      	beq.n	80076d6 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007644:	2b00      	cmp	r3, #0
 8007646:	d046      	beq.n	80076d6 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d128      	bne.n	80076a4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b28      	cmp	r3, #40	; 0x28
 800765c:	d108      	bne.n	8007670 <I2C_Slave_ISR_IT+0x84>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007664:	d104      	bne.n	8007670 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007666:	6939      	ldr	r1, [r7, #16]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fe7f 	bl	800836c <I2C_ITListenCplt>
 800766e:	e031      	b.n	80076d4 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b29      	cmp	r3, #41	; 0x29
 800767a:	d10e      	bne.n	800769a <I2C_Slave_ISR_IT+0xae>
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007682:	d00a      	beq.n	800769a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2210      	movs	r2, #16
 800768a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 ffd8 	bl	8008642 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fc3f 	bl	8007f16 <I2C_ITSlaveSeqCplt>
 8007698:	e01c      	b.n	80076d4 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2210      	movs	r2, #16
 80076a0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80076a2:	e08f      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2210      	movs	r2, #16
 80076aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b0:	f043 0204 	orr.w	r2, r3, #4
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <I2C_Slave_ISR_IT+0xda>
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076c4:	d17e      	bne.n	80077c4 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fea1 	bl	8008414 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076d2:	e077      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1d8>
 80076d4:	e076      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02f      	beq.n	8007740 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d02a      	beq.n	8007740 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d018      	beq.n	8007726 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007710:	3b01      	subs	r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d14b      	bne.n	80077c8 <I2C_Slave_ISR_IT+0x1dc>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007736:	d047      	beq.n	80077c8 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fbec 	bl	8007f16 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800773e:	e043      	b.n	80077c8 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007754:	6939      	ldr	r1, [r7, #16]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 fb1c 	bl	8007d94 <I2C_ITAddrCplt>
 800775c:	e035      	b.n	80077ca <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d030      	beq.n	80077ca <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800776e:	2b00      	cmp	r3, #0
 8007770:	d02b      	beq.n	80077ca <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d018      	beq.n	80077ae <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80077ac:	e00d      	b.n	80077ca <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077b4:	d002      	beq.n	80077bc <I2C_Slave_ISR_IT+0x1d0>
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fbaa 	bl	8007f16 <I2C_ITSlaveSeqCplt>
 80077c2:	e002      	b.n	80077ca <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80077c4:	bf00      	nop
 80077c6:	e000      	b.n	80077ca <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80077c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <I2C_Master_ISR_DMA+0x1a>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e0d9      	b.n	80079aa <I2C_Master_ISR_DMA+0x1ce>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b00      	cmp	r3, #0
 8007806:	d016      	beq.n	8007836 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2210      	movs	r2, #16
 8007818:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	f043 0204 	orr.w	r2, r3, #4
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007826:	2120      	movs	r1, #32
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f001 f9b9 	bl	8008ba0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 ff07 	bl	8008642 <I2C_Flush_TXDR>
 8007834:	e0b4      	b.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783c:	2b00      	cmp	r3, #0
 800783e:	d071      	beq.n	8007924 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007846:	2b00      	cmp	r3, #0
 8007848:	d06c      	beq.n	8007924 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007858:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d04e      	beq.n	8007902 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007870:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007876:	b29b      	uxth	r3, r3
 8007878:	2bff      	cmp	r3, #255	; 0xff
 800787a:	d906      	bls.n	800788a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	22ff      	movs	r2, #255	; 0xff
 8007880:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e010      	b.n	80078ac <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800789c:	d003      	beq.n	80078a6 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e002      	b.n	80078ac <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80078a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078aa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	8a79      	ldrh	r1, [r7, #18]
 80078b4:	2300      	movs	r3, #0
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f001 f93e 	bl	8008b3c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b22      	cmp	r3, #34	; 0x22
 80078dc:	d108      	bne.n	80078f0 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078ec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80078ee:	e057      	b.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078fe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007900:	e04e      	b.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007910:	d003      	beq.n	800791a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fac2 	bl	8007e9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007918:	e042      	b.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800791a:	2140      	movs	r1, #64	; 0x40
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fd79 	bl	8008414 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007922:	e03d      	b.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d028      	beq.n	8007980 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007934:	2b00      	cmp	r3, #0
 8007936:	d023      	beq.n	8007980 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d119      	bne.n	8007976 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007950:	d025      	beq.n	800799e <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800795a:	d108      	bne.n	800796e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800796a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800796c:	e017      	b.n	800799e <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fa94 	bl	8007e9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007974:	e013      	b.n	800799e <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007976:	2140      	movs	r1, #64	; 0x40
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fd4b 	bl	8008414 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800797e:	e00e      	b.n	800799e <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 fb1a 	bl	8007fd0 <I2C_ITMasterCplt>
 800799c:	e000      	b.n	80079a0 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800799e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80079c0:	4b87      	ldr	r3, [pc, #540]	; (8007be0 <I2C_Mem_ISR_DMA+0x22c>)
 80079c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <I2C_Mem_ISR_DMA+0x1e>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e102      	b.n	8007bd8 <I2C_Mem_ISR_DMA+0x224>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d016      	beq.n	8007a12 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d011      	beq.n	8007a12 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2210      	movs	r2, #16
 80079f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fa:	f043 0204 	orr.w	r2, r3, #4
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a02:	2120      	movs	r1, #32
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f001 f8cb 	bl	8008ba0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fe19 	bl	8008642 <I2C_Flush_TXDR>
 8007a10:	e0dd      	b.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f04f 32ff 	mov.w	r2, #4294967295
 8007a36:	651a      	str	r2, [r3, #80]	; 0x50
 8007a38:	e0c9      	b.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d05b      	beq.n	8007afc <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d056      	beq.n	8007afc <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007a4e:	2110      	movs	r1, #16
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f001 f8a5 	bl	8008ba0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d048      	beq.n	8007af2 <I2C_Mem_ISR_DMA+0x13e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2bff      	cmp	r3, #255	; 0xff
 8007a68:	d910      	bls.n	8007a8c <I2C_Mem_ISR_DMA+0xd8>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	22ff      	movs	r2, #255	; 0xff
 8007a6e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a74:	b299      	uxth	r1, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f001 f859 	bl	8008b3c <I2C_TransferConfig>
 8007a8a:	e011      	b.n	8007ab0 <I2C_Mem_ISR_DMA+0xfc>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9a:	b299      	uxth	r1, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f001 f846 	bl	8008b3c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b22      	cmp	r3, #34	; 0x22
 8007acc:	d108      	bne.n	8007ae0 <I2C_Mem_ISR_DMA+0x12c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007adc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ade:	e076      	b.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007af0:	e06d      	b.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007af2:	2140      	movs	r1, #64	; 0x40
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 fc8d 	bl	8008414 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007afa:	e068      	b.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d055      	beq.n	8007bb2 <I2C_Mem_ISR_DMA+0x1fe>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d050      	beq.n	8007bb2 <I2C_Mem_ISR_DMA+0x1fe>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b22      	cmp	r3, #34	; 0x22
 8007b1a:	d101      	bne.n	8007b20 <I2C_Mem_ISR_DMA+0x16c>
    {
      direction = I2C_GENERATE_START_READ;
 8007b1c:	4b31      	ldr	r3, [pc, #196]	; (8007be4 <I2C_Mem_ISR_DMA+0x230>)
 8007b1e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2bff      	cmp	r3, #255	; 0xff
 8007b28:	d910      	bls.n	8007b4c <I2C_Mem_ISR_DMA+0x198>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	22ff      	movs	r2, #255	; 0xff
 8007b2e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b34:	b299      	uxth	r1, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fff9 	bl	8008b3c <I2C_TransferConfig>
 8007b4a:	e011      	b.n	8007b70 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5a:	b299      	uxth	r1, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 ffe6 	bl	8008b3c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b22      	cmp	r3, #34	; 0x22
 8007b8c:	d108      	bne.n	8007ba0 <I2C_Mem_ISR_DMA+0x1ec>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b9c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b9e:	e016      	b.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bb0:	e00d      	b.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <I2C_Mem_ISR_DMA+0x21a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 fa01 	bl	8007fd0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	80002000 	.word	0x80002000
 8007be4:	80002400 	.word	0x80002400

08007be8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <I2C_Slave_ISR_DMA+0x24>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e0bf      	b.n	8007d8c <I2C_Slave_ISR_DMA+0x1a4>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d008      	beq.n	8007c30 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fa98 	bl	8008160 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8095 	beq.w	8007d66 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 808f 	beq.w	8007d66 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d07d      	beq.n	8007d58 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00c      	beq.n	8007c7e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d007      	beq.n	8007c7e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00c      	beq.n	8007ca0 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d128      	bne.n	8007cf8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b28      	cmp	r3, #40	; 0x28
 8007cb0:	d108      	bne.n	8007cc4 <I2C_Slave_ISR_DMA+0xdc>
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cb8:	d104      	bne.n	8007cc4 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fb55 	bl	800836c <I2C_ITListenCplt>
 8007cc2:	e048      	b.n	8007d56 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b29      	cmp	r3, #41	; 0x29
 8007cce:	d10e      	bne.n	8007cee <I2C_Slave_ISR_DMA+0x106>
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cd6:	d00a      	beq.n	8007cee <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2210      	movs	r2, #16
 8007cde:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 fcae 	bl	8008642 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f915 	bl	8007f16 <I2C_ITSlaveSeqCplt>
 8007cec:	e033      	b.n	8007d56 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007cf6:	e034      	b.n	8007d62 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	f043 0204 	orr.w	r2, r3, #4
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d12:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <I2C_Slave_ISR_DMA+0x13a>
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d20:	d11f      	bne.n	8007d62 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	2b21      	cmp	r3, #33	; 0x21
 8007d26:	d002      	beq.n	8007d2e <I2C_Slave_ISR_DMA+0x146>
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b29      	cmp	r3, #41	; 0x29
 8007d2c:	d103      	bne.n	8007d36 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2221      	movs	r2, #33	; 0x21
 8007d32:	631a      	str	r2, [r3, #48]	; 0x30
 8007d34:	e008      	b.n	8007d48 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	2b22      	cmp	r3, #34	; 0x22
 8007d3a:	d002      	beq.n	8007d42 <I2C_Slave_ISR_DMA+0x15a>
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d40:	d102      	bne.n	8007d48 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2222      	movs	r2, #34	; 0x22
 8007d46:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fb60 	bl	8008414 <I2C_ITError>
      if (treatdmanack == 1U)
 8007d54:	e005      	b.n	8007d62 <I2C_Slave_ISR_DMA+0x17a>
 8007d56:	e004      	b.n	8007d62 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2210      	movs	r2, #16
 8007d5e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007d60:	e00f      	b.n	8007d82 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8007d62:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007d64:	e00d      	b.n	8007d82 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f809 	bl	8007d94 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007daa:	2b28      	cmp	r3, #40	; 0x28
 8007dac:	d16a      	bne.n	8007e84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	0c1b      	lsrs	r3, r3, #16
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007dcc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007de8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d138      	bne.n	8007e64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007df2:	897b      	ldrh	r3, [r7, #10]
 8007df4:	09db      	lsrs	r3, r3, #7
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	89bb      	ldrh	r3, [r7, #12]
 8007dfa:	4053      	eors	r3, r2
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f003 0306 	and.w	r3, r3, #6
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d11c      	bne.n	8007e40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007e06:	897b      	ldrh	r3, [r7, #10]
 8007e08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d13b      	bne.n	8007e94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2208      	movs	r2, #8
 8007e28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e32:	89ba      	ldrh	r2, [r7, #12]
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fa7b 	bl	8007334 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007e3e:	e029      	b.n	8007e94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007e40:	893b      	ldrh	r3, [r7, #8]
 8007e42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 ff31 	bl	8008cb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e56:	89ba      	ldrh	r2, [r7, #12]
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff fa69 	bl	8007334 <HAL_I2C_AddrCallback>
}
 8007e62:	e017      	b.n	8007e94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 ff21 	bl	8008cb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e76:	89ba      	ldrh	r2, [r7, #12]
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff fa59 	bl	8007334 <HAL_I2C_AddrCallback>
}
 8007e82:	e007      	b.n	8007e94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2208      	movs	r2, #8
 8007e8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b21      	cmp	r3, #33	; 0x21
 8007eb6:	d115      	bne.n	8007ee4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2211      	movs	r2, #17
 8007ec4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ecc:	2101      	movs	r1, #1
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 feee 	bl	8008cb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7fa f978 	bl	80021d2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ee2:	e014      	b.n	8007f0e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2212      	movs	r2, #18
 8007ef0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007ef8:	2102      	movs	r1, #2
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fed8 	bl	8008cb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7fa f957 	bl	80021bc <HAL_I2C_MasterRxCpltCallback>
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	e00c      	b.n	8007f64 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f62:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b29      	cmp	r3, #41	; 0x29
 8007f6e:	d112      	bne.n	8007f96 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2228      	movs	r2, #40	; 0x28
 8007f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2221      	movs	r2, #33	; 0x21
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007f7e:	2101      	movs	r1, #1
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fe95 	bl	8008cb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff f9bc 	bl	800730c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f94:	e017      	b.n	8007fc6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa0:	d111      	bne.n	8007fc6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2228      	movs	r2, #40	; 0x28
 8007fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2222      	movs	r2, #34	; 0x22
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fe7c 	bl	8008cb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff f9ad 	bl	8007320 <HAL_I2C_SlaveRxCpltCallback>
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b21      	cmp	r3, #33	; 0x21
 8007ff0:	d107      	bne.n	8008002 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fe5b 	bl	8008cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2211      	movs	r2, #17
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8008000:	e00c      	b.n	800801c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b22      	cmp	r3, #34	; 0x22
 800800c:	d106      	bne.n	800801c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800800e:	2102      	movs	r1, #2
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fe4d 	bl	8008cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2212      	movs	r2, #18
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6859      	ldr	r1, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4b4c      	ldr	r3, [pc, #304]	; (8008158 <I2C_ITMasterCplt+0x188>)
 8008028:	400b      	ands	r3, r1
 800802a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a49      	ldr	r2, [pc, #292]	; (800815c <I2C_ITMasterCplt+0x18c>)
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2210      	movs	r2, #16
 8008048:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b60      	cmp	r3, #96	; 0x60
 8008060:	d10a      	bne.n	8008078 <I2C_ITMasterCplt+0xa8>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	b2db      	uxtb	r3, r3
 8008074:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008076:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fae2 	bl	8008642 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008082:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b60      	cmp	r3, #96	; 0x60
 800808e:	d002      	beq.n	8008096 <I2C_ITMasterCplt+0xc6>
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d006      	beq.n	80080a4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f9b9 	bl	8008414 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80080a2:	e054      	b.n	800814e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b21      	cmp	r3, #33	; 0x21
 80080ae:	d124      	bne.n	80080fa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b40      	cmp	r3, #64	; 0x40
 80080c8:	d10b      	bne.n	80080e2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff f942 	bl	8007364 <HAL_I2C_MemTxCpltCallback>
}
 80080e0:	e035      	b.n	800814e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7fa f86d 	bl	80021d2 <HAL_I2C_MasterTxCpltCallback>
}
 80080f8:	e029      	b.n	800814e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b22      	cmp	r3, #34	; 0x22
 8008104:	d123      	bne.n	800814e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b40      	cmp	r3, #64	; 0x40
 800811e:	d10b      	bne.n	8008138 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff f921 	bl	8007378 <HAL_I2C_MemRxCpltCallback>
}
 8008136:	e00a      	b.n	800814e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fa f837 	bl	80021bc <HAL_I2C_MasterRxCpltCallback>
}
 800814e:	bf00      	nop
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	fe00e800 	.word	0xfe00e800
 800815c:	ffff0000 	.word	0xffff0000

08008160 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800817c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2220      	movs	r2, #32
 8008184:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	2b21      	cmp	r3, #33	; 0x21
 800818a:	d002      	beq.n	8008192 <I2C_ITSlaveCplt+0x32>
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	2b29      	cmp	r3, #41	; 0x29
 8008190:	d108      	bne.n	80081a4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008192:	f248 0101 	movw	r1, #32769	; 0x8001
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fd8a 	bl	8008cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2221      	movs	r2, #33	; 0x21
 80081a0:	631a      	str	r2, [r3, #48]	; 0x30
 80081a2:	e00d      	b.n	80081c0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b22      	cmp	r3, #34	; 0x22
 80081a8:	d002      	beq.n	80081b0 <I2C_ITSlaveCplt+0x50>
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b2a      	cmp	r3, #42	; 0x2a
 80081ae:	d107      	bne.n	80081c0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80081b0:	f248 0102 	movw	r1, #32770	; 0x8002
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fd7b 	bl	8008cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2222      	movs	r2, #34	; 0x22
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6859      	ldr	r1, [r3, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b62      	ldr	r3, [pc, #392]	; (8008364 <I2C_ITSlaveCplt+0x204>)
 80081dc:	400b      	ands	r3, r1
 80081de:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa2e 	bl	8008642 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d013      	beq.n	8008218 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01f      	beq.n	8008248 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	b29a      	uxth	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008216:	e017      	b.n	8008248 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d012      	beq.n	8008248 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008230:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d006      	beq.n	8008248 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	b29a      	uxth	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f003 0304 	and.w	r3, r3, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d020      	beq.n	8008294 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f023 0304 	bic.w	r3, r3, #4
 8008258:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00c      	beq.n	8008294 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828a:	b29b      	uxth	r3, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	b29a      	uxth	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	f043 0204 	orr.w	r2, r3, #4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d010      	beq.n	80082e2 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f8a4 	bl	8008414 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b28      	cmp	r3, #40	; 0x28
 80082d6:	d141      	bne.n	800835c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80082d8:	6979      	ldr	r1, [r7, #20]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f846 	bl	800836c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082e0:	e03c      	b.n	800835c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082ea:	d014      	beq.n	8008316 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff fe12 	bl	8007f16 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a1c      	ldr	r2, [pc, #112]	; (8008368 <I2C_ITSlaveCplt+0x208>)
 80082f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff f81e 	bl	8007350 <HAL_I2C_ListenCpltCallback>
}
 8008314:	e022      	b.n	800835c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b22      	cmp	r3, #34	; 0x22
 8008320:	d10e      	bne.n	8008340 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7fe fff1 	bl	8007320 <HAL_I2C_SlaveRxCpltCallback>
}
 800833e:	e00d      	b.n	800835c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fe ffd8 	bl	800730c <HAL_I2C_SlaveTxCpltCallback>
}
 800835c:	bf00      	nop
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	fe00e800 	.word	0xfe00e800
 8008368:	ffff0000 	.word	0xffff0000

0800836c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a25      	ldr	r2, [pc, #148]	; (8008410 <I2C_ITListenCplt+0xa4>)
 800837a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d022      	beq.n	80083e8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	b2d2      	uxtb	r2, r2
 80083ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d012      	beq.n	80083e8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	f043 0204 	orr.w	r2, r3, #4
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80083e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc5f 	bl	8008cb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2210      	movs	r2, #16
 80083f8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fe ffa4 	bl	8007350 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	ffff0000 	.word	0xffff0000

08008414 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008424:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a6d      	ldr	r2, [pc, #436]	; (80085e8 <I2C_ITError+0x1d4>)
 8008432:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	2b28      	cmp	r3, #40	; 0x28
 800844a:	d005      	beq.n	8008458 <I2C_ITError+0x44>
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b29      	cmp	r3, #41	; 0x29
 8008450:	d002      	beq.n	8008458 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	2b2a      	cmp	r3, #42	; 0x2a
 8008456:	d10b      	bne.n	8008470 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008458:	2103      	movs	r1, #3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fc28 	bl	8008cb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2228      	movs	r2, #40	; 0x28
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a60      	ldr	r2, [pc, #384]	; (80085ec <I2C_ITError+0x1d8>)
 800846c:	635a      	str	r2, [r3, #52]	; 0x34
 800846e:	e030      	b.n	80084d2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008470:	f248 0103 	movw	r1, #32771	; 0x8003
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fc1b 	bl	8008cb0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8e1 	bl	8008642 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b60      	cmp	r3, #96	; 0x60
 800848a:	d01f      	beq.n	80084cc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d114      	bne.n	80084cc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	f003 0310 	and.w	r3, r3, #16
 80084ac:	2b10      	cmp	r3, #16
 80084ae:	d109      	bne.n	80084c4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2210      	movs	r2, #16
 80084b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084bc:	f043 0204 	orr.w	r2, r3, #4
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2220      	movs	r2, #32
 80084ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d039      	beq.n	8008554 <I2C_ITError+0x140>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b11      	cmp	r3, #17
 80084e4:	d002      	beq.n	80084ec <I2C_ITError+0xd8>
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b21      	cmp	r3, #33	; 0x21
 80084ea:	d133      	bne.n	8008554 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084fa:	d107      	bne.n	800850c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800850a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	4618      	mov	r0, r3
 8008512:	f7fd ff8b 	bl	800642c <HAL_DMA_GetState>
 8008516:	4603      	mov	r3, r0
 8008518:	2b01      	cmp	r3, #1
 800851a:	d017      	beq.n	800854c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	4a33      	ldr	r2, [pc, #204]	; (80085f0 <I2C_ITError+0x1dc>)
 8008522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	4618      	mov	r0, r3
 8008532:	f7fd fe9a 	bl	800626a <HAL_DMA_Abort_IT>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d04d      	beq.n	80085d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008546:	4610      	mov	r0, r2
 8008548:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800854a:	e045      	b.n	80085d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f851 	bl	80085f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008552:	e041      	b.n	80085d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d039      	beq.n	80085d0 <I2C_ITError+0x1bc>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b12      	cmp	r3, #18
 8008560:	d002      	beq.n	8008568 <I2C_ITError+0x154>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b22      	cmp	r3, #34	; 0x22
 8008566:	d133      	bne.n	80085d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008576:	d107      	bne.n	8008588 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008586:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd ff4d 	bl	800642c <HAL_DMA_GetState>
 8008592:	4603      	mov	r3, r0
 8008594:	2b01      	cmp	r3, #1
 8008596:	d017      	beq.n	80085c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859c:	4a14      	ldr	r2, [pc, #80]	; (80085f0 <I2C_ITError+0x1dc>)
 800859e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fd fe5c 	bl	800626a <HAL_DMA_Abort_IT>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d011      	beq.n	80085dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085c2:	4610      	mov	r0, r2
 80085c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085c6:	e009      	b.n	80085dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f813 	bl	80085f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085ce:	e005      	b.n	80085dc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f80f 	bl	80085f4 <I2C_TreatErrorCallback>
  }
}
 80085d6:	e002      	b.n	80085de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085d8:	bf00      	nop
 80085da:	e000      	b.n	80085de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085dc:	bf00      	nop
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	ffff0000 	.word	0xffff0000
 80085ec:	080075ed 	.word	0x080075ed
 80085f0:	0800868b 	.word	0x0800868b

080085f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b60      	cmp	r3, #96	; 0x60
 8008606:	d10e      	bne.n	8008626 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2220      	movs	r2, #32
 800860c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fe febe 	bl	80073a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008624:	e009      	b.n	800863a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7fe fea9 	bl	800738c <HAL_I2C_ErrorCallback>
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b02      	cmp	r3, #2
 8008656:	d103      	bne.n	8008660 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2200      	movs	r2, #0
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b01      	cmp	r3, #1
 800866c:	d007      	beq.n	800867e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699a      	ldr	r2, [r3, #24]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0201 	orr.w	r2, r2, #1
 800867c:	619a      	str	r2, [r3, #24]
  }
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a4:	2200      	movs	r2, #0
 80086a6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b4:	2200      	movs	r2, #0
 80086b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff ff9b 	bl	80085f4 <I2C_TreatErrorCallback>
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086d6:	e031      	b.n	800873c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	d02d      	beq.n	800873c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e0:	f7fd fbd2 	bl	8005e88 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d302      	bcc.n	80086f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d122      	bne.n	800873c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4013      	ands	r3, r2
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	429a      	cmp	r2, r3
 8008704:	bf0c      	ite	eq
 8008706:	2301      	moveq	r3, #1
 8008708:	2300      	movne	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	429a      	cmp	r2, r3
 8008712:	d113      	bne.n	800873c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008718:	f043 0220 	orr.w	r2, r3, #32
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e00f      	b.n	800875c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	4013      	ands	r3, r2
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	429a      	cmp	r2, r3
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	429a      	cmp	r2, r3
 8008758:	d0be      	beq.n	80086d8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008770:	e033      	b.n	80087da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f900 	bl	800897c <I2C_IsErrorOccurred>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e031      	b.n	80087ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878c:	d025      	beq.n	80087da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800878e:	f7fd fb7b 	bl	8005e88 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	429a      	cmp	r2, r3
 800879c:	d302      	bcc.n	80087a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11a      	bne.n	80087da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	f003 0302 	and.w	r3, r3, #2
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d013      	beq.n	80087da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	f043 0220 	orr.w	r2, r3, #32
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e007      	b.n	80087ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d1c4      	bne.n	8008772 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087fe:	e02f      	b.n	8008860 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f8b9 	bl	800897c <I2C_IsErrorOccurred>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e02d      	b.n	8008870 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008814:	f7fd fb38 	bl	8005e88 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	429a      	cmp	r2, r3
 8008822:	d302      	bcc.n	800882a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d11a      	bne.n	8008860 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b20      	cmp	r3, #32
 8008836:	d013      	beq.n	8008860 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883c:	f043 0220 	orr.w	r2, r3, #32
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e007      	b.n	8008870 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b20      	cmp	r3, #32
 800886c:	d1c8      	bne.n	8008800 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008884:	e06b      	b.n	800895e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 f876 	bl	800897c <I2C_IsErrorOccurred>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e069      	b.n	800896e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d138      	bne.n	800891a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f003 0304 	and.w	r3, r3, #4
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d105      	bne.n	80088c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	e055      	b.n	800896e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f003 0310 	and.w	r3, r3, #16
 80088cc:	2b10      	cmp	r3, #16
 80088ce:	d107      	bne.n	80088e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2210      	movs	r2, #16
 80088d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2204      	movs	r2, #4
 80088dc:	645a      	str	r2, [r3, #68]	; 0x44
 80088de:	e002      	b.n	80088e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2220      	movs	r2, #32
 80088ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6859      	ldr	r1, [r3, #4]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b1f      	ldr	r3, [pc, #124]	; (8008978 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80088fa:	400b      	ands	r3, r1
 80088fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2220      	movs	r2, #32
 8008902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e029      	b.n	800896e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800891a:	f7fd fab5 	bl	8005e88 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	429a      	cmp	r2, r3
 8008928:	d302      	bcc.n	8008930 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d116      	bne.n	800895e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	2b04      	cmp	r3, #4
 800893c:	d00f      	beq.n	800895e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	f043 0220 	orr.w	r2, r3, #32
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2220      	movs	r2, #32
 800894e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e007      	b.n	800896e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b04      	cmp	r3, #4
 800896a:	d18c      	bne.n	8008886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	fe00e800 	.word	0xfe00e800

0800897c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	; 0x28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d068      	beq.n	8008a7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2210      	movs	r2, #16
 80089ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089b0:	e049      	b.n	8008a46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b8:	d045      	beq.n	8008a46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089ba:	f7fd fa65 	bl	8005e88 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <I2C_IsErrorOccurred+0x54>
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d13a      	bne.n	8008a46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f2:	d121      	bne.n	8008a38 <I2C_IsErrorOccurred+0xbc>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089fa:	d01d      	beq.n	8008a38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80089fc:	7cfb      	ldrb	r3, [r7, #19]
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	d01a      	beq.n	8008a38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a12:	f7fd fa39 	bl	8005e88 <HAL_GetTick>
 8008a16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a18:	e00e      	b.n	8008a38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a1a:	f7fd fa35 	bl	8005e88 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	2b19      	cmp	r3, #25
 8008a26:	d907      	bls.n	8008a38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	f043 0320 	orr.w	r3, r3, #32
 8008a2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008a36:	e006      	b.n	8008a46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d1e9      	bne.n	8008a1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d003      	beq.n	8008a5c <I2C_IsErrorOccurred+0xe0>
 8008a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0aa      	beq.n	80089b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	f043 0304 	orr.w	r3, r3, #4
 8008a72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	f043 0308 	orr.w	r3, r3, #8
 8008ab4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	f043 0302 	orr.w	r3, r3, #2
 8008ad6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01c      	beq.n	8008b2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7ff fda6 	bl	8008642 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6859      	ldr	r1, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <I2C_IsErrorOccurred+0x1bc>)
 8008b02:	400b      	ands	r3, r1
 8008b04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3728      	adds	r7, #40	; 0x28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	fe00e800 	.word	0xfe00e800

08008b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	607b      	str	r3, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	817b      	strh	r3, [r7, #10]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b4e:	897b      	ldrh	r3, [r7, #10]
 8008b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b54:	7a7b      	ldrb	r3, [r7, #9]
 8008b56:	041b      	lsls	r3, r3, #16
 8008b58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	0d5b      	lsrs	r3, r3, #21
 8008b76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008b7a:	4b08      	ldr	r3, [pc, #32]	; (8008b9c <I2C_TransferConfig+0x60>)
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	ea02 0103 	and.w	r1, r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b8e:	bf00      	nop
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	03ff63ff 	.word	0x03ff63ff

08008ba0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb4:	4a3b      	ldr	r2, [pc, #236]	; (8008ca4 <I2C_Enable_IRQ+0x104>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d032      	beq.n	8008c20 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008bbe:	4a3a      	ldr	r2, [pc, #232]	; (8008ca8 <I2C_Enable_IRQ+0x108>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d02d      	beq.n	8008c20 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008bc8:	4a38      	ldr	r2, [pc, #224]	; (8008cac <I2C_Enable_IRQ+0x10c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d028      	beq.n	8008c20 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008bce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	da03      	bge.n	8008bde <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008bdc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bde:	887b      	ldrh	r3, [r7, #2]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008bee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008bf0:	887b      	ldrh	r3, [r7, #2]
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008c00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c02:	887b      	ldrh	r3, [r7, #2]
 8008c04:	2b10      	cmp	r3, #16
 8008c06:	d103      	bne.n	8008c10 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008c0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c10:	887b      	ldrh	r3, [r7, #2]
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d138      	bne.n	8008c88 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f043 0320 	orr.w	r3, r3, #32
 8008c1c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c1e:	e033      	b.n	8008c88 <I2C_Enable_IRQ+0xe8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	da03      	bge.n	8008c30 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008c2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008c30:	887b      	ldrh	r3, [r7, #2]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008c40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008c42:	887b      	ldrh	r3, [r7, #2]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008c52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c54:	887b      	ldrh	r3, [r7, #2]
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d103      	bne.n	8008c62 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008c60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c62:	887b      	ldrh	r3, [r7, #2]
 8008c64:	2b20      	cmp	r3, #32
 8008c66:	d103      	bne.n	8008c70 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c6e:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	4a0d      	ldr	r2, [pc, #52]	; (8008cac <I2C_Enable_IRQ+0x10c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d006      	beq.n	8008c88 <I2C_Enable_IRQ+0xe8>
 8008c7a:	887b      	ldrh	r3, [r7, #2]
 8008c7c:	2b40      	cmp	r3, #64	; 0x40
 8008c7e:	d103      	bne.n	8008c88 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c86:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6819      	ldr	r1, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	601a      	str	r2, [r3, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	080077dd 	.word	0x080077dd
 8008ca8:	08007be9 	.word	0x08007be9
 8008cac:	080079b5 	.word	0x080079b5

08008cb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008cc0:	887b      	ldrh	r3, [r7, #2]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00f      	beq.n	8008cea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008cd0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008cde:	2b28      	cmp	r3, #40	; 0x28
 8008ce0:	d003      	beq.n	8008cea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008ce8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00f      	beq.n	8008d14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008cfa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d08:	2b28      	cmp	r3, #40	; 0x28
 8008d0a:	d003      	beq.n	8008d14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008d12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da03      	bge.n	8008d24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008d22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008d24:	887b      	ldrh	r3, [r7, #2]
 8008d26:	2b10      	cmp	r3, #16
 8008d28:	d103      	bne.n	8008d32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008d30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d103      	bne.n	8008d40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f043 0320 	orr.w	r3, r3, #32
 8008d3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008d40:	887b      	ldrh	r3, [r7, #2]
 8008d42:	2b40      	cmp	r3, #64	; 0x40
 8008d44:	d103      	bne.n	8008d4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	43da      	mvns	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	400a      	ands	r2, r1
 8008d5e:	601a      	str	r2, [r3, #0]
}
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d138      	bne.n	8008df4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d101      	bne.n	8008d90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	e032      	b.n	8008df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2224      	movs	r2, #36	; 0x24
 8008d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008dbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6819      	ldr	r1, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e000      	b.n	8008df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d139      	bne.n	8008e8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e033      	b.n	8008e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2224      	movs	r2, #36	; 0x24
 8008e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0201 	bic.w	r2, r2, #1
 8008e44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008e54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e000      	b.n	8008e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
  }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
	...

08008e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008eac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d102      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f001 b823 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 817d 	beq.w	80091d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008ed8:	4bbc      	ldr	r3, [pc, #752]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f003 030c 	and.w	r3, r3, #12
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d00c      	beq.n	8008efe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008ee4:	4bb9      	ldr	r3, [pc, #740]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f003 030c 	and.w	r3, r3, #12
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d15c      	bne.n	8008faa <HAL_RCC_OscConfig+0x10e>
 8008ef0:	4bb6      	ldr	r3, [pc, #728]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008efc:	d155      	bne.n	8008faa <HAL_RCC_OscConfig+0x10e>
 8008efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008f0a:	fa93 f3a3 	rbit	r3, r3
 8008f0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008f12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f16:	fab3 f383 	clz	r3, r3
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d102      	bne.n	8008f30 <HAL_RCC_OscConfig+0x94>
 8008f2a:	4ba8      	ldr	r3, [pc, #672]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	e015      	b.n	8008f5c <HAL_RCC_OscConfig+0xc0>
 8008f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008f3c:	fa93 f3a3 	rbit	r3, r3
 8008f40:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008f4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008f50:	fa93 f3a3 	rbit	r3, r3
 8008f54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008f58:	4b9c      	ldr	r3, [pc, #624]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008f64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008f68:	fa92 f2a2 	rbit	r2, r2
 8008f6c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8008f70:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008f74:	fab2 f282 	clz	r2, r2
 8008f78:	b2d2      	uxtb	r2, r2
 8008f7a:	f042 0220 	orr.w	r2, r2, #32
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	f002 021f 	and.w	r2, r2, #31
 8008f84:	2101      	movs	r1, #1
 8008f86:	fa01 f202 	lsl.w	r2, r1, r2
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 811f 	beq.w	80091d0 <HAL_RCC_OscConfig+0x334>
 8008f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f040 8116 	bne.w	80091d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f000 bfaf 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fba:	d106      	bne.n	8008fca <HAL_RCC_OscConfig+0x12e>
 8008fbc:	4b83      	ldr	r3, [pc, #524]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a82      	ldr	r2, [pc, #520]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	e036      	b.n	8009038 <HAL_RCC_OscConfig+0x19c>
 8008fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10c      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x158>
 8008fda:	4b7c      	ldr	r3, [pc, #496]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a7b      	ldr	r2, [pc, #492]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	4b79      	ldr	r3, [pc, #484]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a78      	ldr	r2, [pc, #480]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8008fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	e021      	b.n	8009038 <HAL_RCC_OscConfig+0x19c>
 8008ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009004:	d10c      	bne.n	8009020 <HAL_RCC_OscConfig+0x184>
 8009006:	4b71      	ldr	r3, [pc, #452]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a70      	ldr	r2, [pc, #448]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 800900c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	4b6e      	ldr	r3, [pc, #440]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a6d      	ldr	r2, [pc, #436]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	e00b      	b.n	8009038 <HAL_RCC_OscConfig+0x19c>
 8009020:	4b6a      	ldr	r3, [pc, #424]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a69      	ldr	r2, [pc, #420]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	4b67      	ldr	r3, [pc, #412]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a66      	ldr	r2, [pc, #408]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009036:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009038:	4b64      	ldr	r3, [pc, #400]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	f023 020f 	bic.w	r2, r3, #15
 8009040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	495f      	ldr	r1, [pc, #380]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 800904e:	4313      	orrs	r3, r2
 8009050:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d059      	beq.n	8009116 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009062:	f7fc ff11 	bl	8005e88 <HAL_GetTick>
 8009066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800906a:	e00a      	b.n	8009082 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800906c:	f7fc ff0c 	bl	8005e88 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b64      	cmp	r3, #100	; 0x64
 800907a:	d902      	bls.n	8009082 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	f000 bf43 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009086:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800908e:	fa93 f3a3 	rbit	r3, r3
 8009092:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8009096:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	fab3 f383 	clz	r3, r3
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	f043 0301 	orr.w	r3, r3, #1
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d102      	bne.n	80090b4 <HAL_RCC_OscConfig+0x218>
 80090ae:	4b47      	ldr	r3, [pc, #284]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	e015      	b.n	80090e0 <HAL_RCC_OscConfig+0x244>
 80090b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80090c0:	fa93 f3a3 	rbit	r3, r3
 80090c4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80090c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80090d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80090d4:	fa93 f3a3 	rbit	r3, r3
 80090d8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80090dc:	4b3b      	ldr	r3, [pc, #236]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80090e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80090e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80090ec:	fa92 f2a2 	rbit	r2, r2
 80090f0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80090f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80090f8:	fab2 f282 	clz	r2, r2
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	f042 0220 	orr.w	r2, r2, #32
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	f002 021f 	and.w	r2, r2, #31
 8009108:	2101      	movs	r1, #1
 800910a:	fa01 f202 	lsl.w	r2, r1, r2
 800910e:	4013      	ands	r3, r2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0ab      	beq.n	800906c <HAL_RCC_OscConfig+0x1d0>
 8009114:	e05d      	b.n	80091d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009116:	f7fc feb7 	bl	8005e88 <HAL_GetTick>
 800911a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800911e:	e00a      	b.n	8009136 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009120:	f7fc feb2 	bl	8005e88 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	2b64      	cmp	r3, #100	; 0x64
 800912e:	d902      	bls.n	8009136 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	f000 bee9 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800913a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800913e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8009142:	fa93 f3a3 	rbit	r3, r3
 8009146:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800914a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800914e:	fab3 f383 	clz	r3, r3
 8009152:	b2db      	uxtb	r3, r3
 8009154:	095b      	lsrs	r3, r3, #5
 8009156:	b2db      	uxtb	r3, r3
 8009158:	f043 0301 	orr.w	r3, r3, #1
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b01      	cmp	r3, #1
 8009160:	d102      	bne.n	8009168 <HAL_RCC_OscConfig+0x2cc>
 8009162:	4b1a      	ldr	r3, [pc, #104]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	e015      	b.n	8009194 <HAL_RCC_OscConfig+0x2f8>
 8009168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800916c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009170:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009174:	fa93 f3a3 	rbit	r3, r3
 8009178:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800917c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009180:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009184:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009188:	fa93 f3a3 	rbit	r3, r3
 800918c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009190:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <HAL_RCC_OscConfig+0x330>)
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009198:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800919c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80091a0:	fa92 f2a2 	rbit	r2, r2
 80091a4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80091a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80091ac:	fab2 f282 	clz	r2, r2
 80091b0:	b2d2      	uxtb	r2, r2
 80091b2:	f042 0220 	orr.w	r2, r2, #32
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	f002 021f 	and.w	r2, r2, #31
 80091bc:	2101      	movs	r1, #1
 80091be:	fa01 f202 	lsl.w	r2, r1, r2
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ab      	bne.n	8009120 <HAL_RCC_OscConfig+0x284>
 80091c8:	e003      	b.n	80091d2 <HAL_RCC_OscConfig+0x336>
 80091ca:	bf00      	nop
 80091cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80091d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 817d 	beq.w	80094e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80091e8:	4ba6      	ldr	r3, [pc, #664]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f003 030c 	and.w	r3, r3, #12
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80091f4:	4ba3      	ldr	r3, [pc, #652]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	f003 030c 	and.w	r3, r3, #12
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d172      	bne.n	80092e6 <HAL_RCC_OscConfig+0x44a>
 8009200:	4ba0      	ldr	r3, [pc, #640]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d16c      	bne.n	80092e6 <HAL_RCC_OscConfig+0x44a>
 800920c:	2302      	movs	r3, #2
 800920e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009212:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009216:	fa93 f3a3 	rbit	r3, r3
 800921a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800921e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009222:	fab3 f383 	clz	r3, r3
 8009226:	b2db      	uxtb	r3, r3
 8009228:	095b      	lsrs	r3, r3, #5
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b01      	cmp	r3, #1
 8009234:	d102      	bne.n	800923c <HAL_RCC_OscConfig+0x3a0>
 8009236:	4b93      	ldr	r3, [pc, #588]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	e013      	b.n	8009264 <HAL_RCC_OscConfig+0x3c8>
 800923c:	2302      	movs	r3, #2
 800923e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009242:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8009246:	fa93 f3a3 	rbit	r3, r3
 800924a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800924e:	2302      	movs	r3, #2
 8009250:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009254:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009258:	fa93 f3a3 	rbit	r3, r3
 800925c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009260:	4b88      	ldr	r3, [pc, #544]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	2202      	movs	r2, #2
 8009266:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800926a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800926e:	fa92 f2a2 	rbit	r2, r2
 8009272:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8009276:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800927a:	fab2 f282 	clz	r2, r2
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	f042 0220 	orr.w	r2, r2, #32
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	f002 021f 	and.w	r2, r2, #31
 800928a:	2101      	movs	r1, #1
 800928c:	fa01 f202 	lsl.w	r2, r1, r2
 8009290:	4013      	ands	r3, r2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <HAL_RCC_OscConfig+0x410>
 8009296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800929a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d002      	beq.n	80092ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f000 be2e 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ac:	4b75      	ldr	r3, [pc, #468]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	21f8      	movs	r1, #248	; 0xf8
 80092c2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80092ca:	fa91 f1a1 	rbit	r1, r1
 80092ce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80092d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80092d6:	fab1 f181 	clz	r1, r1
 80092da:	b2c9      	uxtb	r1, r1
 80092dc:	408b      	lsls	r3, r1
 80092de:	4969      	ldr	r1, [pc, #420]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092e4:	e0fd      	b.n	80094e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8088 	beq.w	8009408 <HAL_RCC_OscConfig+0x56c>
 80092f8:	2301      	movs	r3, #1
 80092fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009302:	fa93 f3a3 	rbit	r3, r3
 8009306:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800930a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800930e:	fab3 f383 	clz	r3, r3
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	461a      	mov	r2, r3
 8009320:	2301      	movs	r3, #1
 8009322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009324:	f7fc fdb0 	bl	8005e88 <HAL_GetTick>
 8009328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800932c:	e00a      	b.n	8009344 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800932e:	f7fc fdab 	bl	8005e88 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d902      	bls.n	8009344 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	f000 bde2 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009344:	2302      	movs	r3, #2
 8009346:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800934a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800934e:	fa93 f3a3 	rbit	r3, r3
 8009352:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8009356:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800935a:	fab3 f383 	clz	r3, r3
 800935e:	b2db      	uxtb	r3, r3
 8009360:	095b      	lsrs	r3, r3, #5
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f043 0301 	orr.w	r3, r3, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b01      	cmp	r3, #1
 800936c:	d102      	bne.n	8009374 <HAL_RCC_OscConfig+0x4d8>
 800936e:	4b45      	ldr	r3, [pc, #276]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	e013      	b.n	800939c <HAL_RCC_OscConfig+0x500>
 8009374:	2302      	movs	r3, #2
 8009376:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800937a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800937e:	fa93 f3a3 	rbit	r3, r3
 8009382:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009386:	2302      	movs	r3, #2
 8009388:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800938c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009390:	fa93 f3a3 	rbit	r3, r3
 8009394:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009398:	4b3a      	ldr	r3, [pc, #232]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	2202      	movs	r2, #2
 800939e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80093a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80093a6:	fa92 f2a2 	rbit	r2, r2
 80093aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80093ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80093b2:	fab2 f282 	clz	r2, r2
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	f042 0220 	orr.w	r2, r2, #32
 80093bc:	b2d2      	uxtb	r2, r2
 80093be:	f002 021f 	and.w	r2, r2, #31
 80093c2:	2101      	movs	r1, #1
 80093c4:	fa01 f202 	lsl.w	r2, r1, r2
 80093c8:	4013      	ands	r3, r2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0af      	beq.n	800932e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093ce:	4b2d      	ldr	r3, [pc, #180]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	21f8      	movs	r1, #248	; 0xf8
 80093e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80093ec:	fa91 f1a1 	rbit	r1, r1
 80093f0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80093f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80093f8:	fab1 f181 	clz	r1, r1
 80093fc:	b2c9      	uxtb	r1, r1
 80093fe:	408b      	lsls	r3, r1
 8009400:	4920      	ldr	r1, [pc, #128]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 8009402:	4313      	orrs	r3, r2
 8009404:	600b      	str	r3, [r1, #0]
 8009406:	e06c      	b.n	80094e2 <HAL_RCC_OscConfig+0x646>
 8009408:	2301      	movs	r3, #1
 800940a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009412:	fa93 f3a3 	rbit	r3, r3
 8009416:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800941a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800941e:	fab3 f383 	clz	r3, r3
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	461a      	mov	r2, r3
 8009430:	2300      	movs	r3, #0
 8009432:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009434:	f7fc fd28 	bl	8005e88 <HAL_GetTick>
 8009438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800943c:	e00a      	b.n	8009454 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800943e:	f7fc fd23 	bl	8005e88 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d902      	bls.n	8009454 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	f000 bd5a 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009454:	2302      	movs	r3, #2
 8009456:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800945a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800945e:	fa93 f3a3 	rbit	r3, r3
 8009462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8009466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800946a:	fab3 f383 	clz	r3, r3
 800946e:	b2db      	uxtb	r3, r3
 8009470:	095b      	lsrs	r3, r3, #5
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b01      	cmp	r3, #1
 800947c:	d104      	bne.n	8009488 <HAL_RCC_OscConfig+0x5ec>
 800947e:	4b01      	ldr	r3, [pc, #4]	; (8009484 <HAL_RCC_OscConfig+0x5e8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	e015      	b.n	80094b0 <HAL_RCC_OscConfig+0x614>
 8009484:	40021000 	.word	0x40021000
 8009488:	2302      	movs	r3, #2
 800948a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009492:	fa93 f3a3 	rbit	r3, r3
 8009496:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800949a:	2302      	movs	r3, #2
 800949c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094a4:	fa93 f3a3 	rbit	r3, r3
 80094a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80094ac:	4bc8      	ldr	r3, [pc, #800]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	2202      	movs	r2, #2
 80094b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80094b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80094ba:	fa92 f2a2 	rbit	r2, r2
 80094be:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80094c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80094c6:	fab2 f282 	clz	r2, r2
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	f042 0220 	orr.w	r2, r2, #32
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	f002 021f 	and.w	r2, r2, #31
 80094d6:	2101      	movs	r1, #1
 80094d8:	fa01 f202 	lsl.w	r2, r1, r2
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1ad      	bne.n	800943e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0308 	and.w	r3, r3, #8
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8110 	beq.w	8009718 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80094f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d079      	beq.n	80095fc <HAL_RCC_OscConfig+0x760>
 8009508:	2301      	movs	r3, #1
 800950a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009512:	fa93 f3a3 	rbit	r3, r3
 8009516:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800951a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800951e:	fab3 f383 	clz	r3, r3
 8009522:	b2db      	uxtb	r3, r3
 8009524:	461a      	mov	r2, r3
 8009526:	4bab      	ldr	r3, [pc, #684]	; (80097d4 <HAL_RCC_OscConfig+0x938>)
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	461a      	mov	r2, r3
 800952e:	2301      	movs	r3, #1
 8009530:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009532:	f7fc fca9 	bl	8005e88 <HAL_GetTick>
 8009536:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800953a:	e00a      	b.n	8009552 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800953c:	f7fc fca4 	bl	8005e88 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d902      	bls.n	8009552 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	f000 bcdb 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009552:	2302      	movs	r3, #2
 8009554:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800955c:	fa93 f3a3 	rbit	r3, r3
 8009560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009568:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800956c:	2202      	movs	r2, #2
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009574:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	fa93 f2a3 	rbit	r2, r3
 800957e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009590:	2202      	movs	r2, #2
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	fa93 f2a3 	rbit	r2, r3
 80095a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095ac:	4b88      	ldr	r3, [pc, #544]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 80095ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80095b8:	2102      	movs	r1, #2
 80095ba:	6019      	str	r1, [r3, #0]
 80095bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	fa93 f1a3 	rbit	r1, r3
 80095ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80095d2:	6019      	str	r1, [r3, #0]
  return result;
 80095d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	fab3 f383 	clz	r3, r3
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f003 031f 	and.w	r3, r3, #31
 80095ee:	2101      	movs	r1, #1
 80095f0:	fa01 f303 	lsl.w	r3, r1, r3
 80095f4:	4013      	ands	r3, r2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0a0      	beq.n	800953c <HAL_RCC_OscConfig+0x6a0>
 80095fa:	e08d      	b.n	8009718 <HAL_RCC_OscConfig+0x87c>
 80095fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009600:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009604:	2201      	movs	r2, #1
 8009606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800960c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	fa93 f2a3 	rbit	r2, r3
 8009616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800961a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800961e:	601a      	str	r2, [r3, #0]
  return result;
 8009620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009624:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009628:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800962a:	fab3 f383 	clz	r3, r3
 800962e:	b2db      	uxtb	r3, r3
 8009630:	461a      	mov	r2, r3
 8009632:	4b68      	ldr	r3, [pc, #416]	; (80097d4 <HAL_RCC_OscConfig+0x938>)
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	461a      	mov	r2, r3
 800963a:	2300      	movs	r3, #0
 800963c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800963e:	f7fc fc23 	bl	8005e88 <HAL_GetTick>
 8009642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009646:	e00a      	b.n	800965e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009648:	f7fc fc1e 	bl	8005e88 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	2b02      	cmp	r3, #2
 8009656:	d902      	bls.n	800965e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	f000 bc55 	b.w	8009f08 <HAL_RCC_OscConfig+0x106c>
 800965e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009662:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009666:	2202      	movs	r2, #2
 8009668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800966a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800966e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	fa93 f2a3 	rbit	r2, r3
 8009678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800967c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009686:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800968a:	2202      	movs	r2, #2
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009692:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	fa93 f2a3 	rbit	r2, r3
 800969c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096ae:	2202      	movs	r2, #2
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	fa93 f2a3 	rbit	r2, r3
 80096c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096ca:	4b41      	ldr	r3, [pc, #260]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 80096cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80096d6:	2102      	movs	r1, #2
 80096d8:	6019      	str	r1, [r3, #0]
 80096da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	fa93 f1a3 	rbit	r1, r3
 80096e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096f0:	6019      	str	r1, [r3, #0]
  return result;
 80096f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	fab3 f383 	clz	r3, r3
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 031f 	and.w	r3, r3, #31
 800970c:	2101      	movs	r1, #1
 800970e:	fa01 f303 	lsl.w	r3, r1, r3
 8009712:	4013      	ands	r3, r2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d197      	bne.n	8009648 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800971c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 81a1 	beq.w	8009a70 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800972e:	2300      	movs	r3, #0
 8009730:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009734:	4b26      	ldr	r3, [pc, #152]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d116      	bne.n	800976e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009740:	4b23      	ldr	r3, [pc, #140]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	4a22      	ldr	r2, [pc, #136]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 8009746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800974a:	61d3      	str	r3, [r2, #28]
 800974c:	4b20      	ldr	r3, [pc, #128]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009758:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009762:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009766:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009768:	2301      	movs	r3, #1
 800976a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800976e:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <HAL_RCC_OscConfig+0x93c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009776:	2b00      	cmp	r3, #0
 8009778:	d11a      	bne.n	80097b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800977a:	4b17      	ldr	r3, [pc, #92]	; (80097d8 <HAL_RCC_OscConfig+0x93c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a16      	ldr	r2, [pc, #88]	; (80097d8 <HAL_RCC_OscConfig+0x93c>)
 8009780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009784:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009786:	f7fc fb7f 	bl	8005e88 <HAL_GetTick>
 800978a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800978e:	e009      	b.n	80097a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009790:	f7fc fb7a 	bl	8005e88 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	2b64      	cmp	r3, #100	; 0x64
 800979e:	d901      	bls.n	80097a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e3b1      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097a4:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <HAL_RCC_OscConfig+0x93c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0ef      	beq.n	8009790 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d10d      	bne.n	80097dc <HAL_RCC_OscConfig+0x940>
 80097c0:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	4a02      	ldr	r2, [pc, #8]	; (80097d0 <HAL_RCC_OscConfig+0x934>)
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	6213      	str	r3, [r2, #32]
 80097cc:	e03c      	b.n	8009848 <HAL_RCC_OscConfig+0x9ac>
 80097ce:	bf00      	nop
 80097d0:	40021000 	.word	0x40021000
 80097d4:	10908120 	.word	0x10908120
 80097d8:	40007000 	.word	0x40007000
 80097dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10c      	bne.n	8009806 <HAL_RCC_OscConfig+0x96a>
 80097ec:	4bc1      	ldr	r3, [pc, #772]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	4ac0      	ldr	r2, [pc, #768]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	6213      	str	r3, [r2, #32]
 80097f8:	4bbe      	ldr	r3, [pc, #760]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	4abd      	ldr	r2, [pc, #756]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 80097fe:	f023 0304 	bic.w	r3, r3, #4
 8009802:	6213      	str	r3, [r2, #32]
 8009804:	e020      	b.n	8009848 <HAL_RCC_OscConfig+0x9ac>
 8009806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800980a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	2b05      	cmp	r3, #5
 8009814:	d10c      	bne.n	8009830 <HAL_RCC_OscConfig+0x994>
 8009816:	4bb7      	ldr	r3, [pc, #732]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	4ab6      	ldr	r2, [pc, #728]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 800981c:	f043 0304 	orr.w	r3, r3, #4
 8009820:	6213      	str	r3, [r2, #32]
 8009822:	4bb4      	ldr	r3, [pc, #720]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	4ab3      	ldr	r2, [pc, #716]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	6213      	str	r3, [r2, #32]
 800982e:	e00b      	b.n	8009848 <HAL_RCC_OscConfig+0x9ac>
 8009830:	4bb0      	ldr	r3, [pc, #704]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	4aaf      	ldr	r2, [pc, #700]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	6213      	str	r3, [r2, #32]
 800983c:	4bad      	ldr	r3, [pc, #692]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	4aac      	ldr	r2, [pc, #688]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009842:	f023 0304 	bic.w	r3, r3, #4
 8009846:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800984c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 8081 	beq.w	800995c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800985a:	f7fc fb15 	bl	8005e88 <HAL_GetTick>
 800985e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009862:	e00b      	b.n	800987c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009864:	f7fc fb10 	bl	8005e88 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	f241 3288 	movw	r2, #5000	; 0x1388
 8009874:	4293      	cmp	r3, r2
 8009876:	d901      	bls.n	800987c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e345      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
 800987c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009880:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009884:	2202      	movs	r2, #2
 8009886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800988c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	fa93 f2a3 	rbit	r2, r3
 8009896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800989a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098a8:	2202      	movs	r2, #2
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	fa93 f2a3 	rbit	r2, r3
 80098ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80098c2:	601a      	str	r2, [r3, #0]
  return result;
 80098c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80098cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098ce:	fab3 f383 	clz	r3, r3
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	095b      	lsrs	r3, r3, #5
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f043 0302 	orr.w	r3, r3, #2
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d102      	bne.n	80098e8 <HAL_RCC_OscConfig+0xa4c>
 80098e2:	4b84      	ldr	r3, [pc, #528]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	e013      	b.n	8009910 <HAL_RCC_OscConfig+0xa74>
 80098e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80098f0:	2202      	movs	r2, #2
 80098f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	fa93 f2a3 	rbit	r2, r3
 8009902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009906:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	4b79      	ldr	r3, [pc, #484]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009914:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009918:	2102      	movs	r1, #2
 800991a:	6011      	str	r1, [r2, #0]
 800991c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009920:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	fa92 f1a2 	rbit	r1, r2
 800992a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800992e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009932:	6011      	str	r1, [r2, #0]
  return result;
 8009934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009938:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	fab2 f282 	clz	r2, r2
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	f002 021f 	and.w	r2, r2, #31
 800994e:	2101      	movs	r1, #1
 8009950:	fa01 f202 	lsl.w	r2, r1, r2
 8009954:	4013      	ands	r3, r2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d084      	beq.n	8009864 <HAL_RCC_OscConfig+0x9c8>
 800995a:	e07f      	b.n	8009a5c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800995c:	f7fc fa94 	bl	8005e88 <HAL_GetTick>
 8009960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009964:	e00b      	b.n	800997e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009966:	f7fc fa8f 	bl	8005e88 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	f241 3288 	movw	r2, #5000	; 0x1388
 8009976:	4293      	cmp	r3, r2
 8009978:	d901      	bls.n	800997e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e2c4      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
 800997e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009982:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009986:	2202      	movs	r2, #2
 8009988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800998a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800998e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	fa93 f2a3 	rbit	r2, r3
 8009998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800999c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80099aa:	2202      	movs	r2, #2
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	fa93 f2a3 	rbit	r2, r3
 80099bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80099c4:	601a      	str	r2, [r3, #0]
  return result;
 80099c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80099ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099d0:	fab3 f383 	clz	r3, r3
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	f043 0302 	orr.w	r3, r3, #2
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d102      	bne.n	80099ea <HAL_RCC_OscConfig+0xb4e>
 80099e4:	4b43      	ldr	r3, [pc, #268]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	e013      	b.n	8009a12 <HAL_RCC_OscConfig+0xb76>
 80099ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80099f2:	2202      	movs	r2, #2
 80099f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	fa93 f2a3 	rbit	r2, r3
 8009a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	4b39      	ldr	r3, [pc, #228]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009a1a:	2102      	movs	r1, #2
 8009a1c:	6011      	str	r1, [r2, #0]
 8009a1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	fa92 f1a2 	rbit	r1, r2
 8009a2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a30:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009a34:	6011      	str	r1, [r2, #0]
  return result;
 8009a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a3a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009a3e:	6812      	ldr	r2, [r2, #0]
 8009a40:	fab2 f282 	clz	r2, r2
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	f002 021f 	and.w	r2, r2, #31
 8009a50:	2101      	movs	r1, #1
 8009a52:	fa01 f202 	lsl.w	r2, r1, r2
 8009a56:	4013      	ands	r3, r2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d184      	bne.n	8009966 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009a5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d105      	bne.n	8009a70 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a64:	4b23      	ldr	r3, [pc, #140]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	4a22      	ldr	r2, [pc, #136]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 8242 	beq.w	8009f06 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a82:	4b1c      	ldr	r3, [pc, #112]	; (8009af4 <HAL_RCC_OscConfig+0xc58>)
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f003 030c 	and.w	r3, r3, #12
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	f000 8213 	beq.w	8009eb6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	f040 8162 	bne.w	8009d66 <HAL_RCC_OscConfig+0xeca>
 8009aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aa6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009aaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ab4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	fa93 f2a3 	rbit	r2, r3
 8009abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ac2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009ac6:	601a      	str	r2, [r3, #0]
  return result;
 8009ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009acc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009ad0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ad2:	fab3 f383 	clz	r3, r3
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009adc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ae8:	f7fc f9ce 	bl	8005e88 <HAL_GetTick>
 8009aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009af0:	e00c      	b.n	8009b0c <HAL_RCC_OscConfig+0xc70>
 8009af2:	bf00      	nop
 8009af4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009af8:	f7fc f9c6 	bl	8005e88 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d901      	bls.n	8009b0c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e1fd      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b10:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b1e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	fa93 f2a3 	rbit	r2, r3
 8009b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009b30:	601a      	str	r2, [r3, #0]
  return result;
 8009b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b3c:	fab3 f383 	clz	r3, r3
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	095b      	lsrs	r3, r3, #5
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	f043 0301 	orr.w	r3, r3, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d102      	bne.n	8009b56 <HAL_RCC_OscConfig+0xcba>
 8009b50:	4bb0      	ldr	r3, [pc, #704]	; (8009e14 <HAL_RCC_OscConfig+0xf78>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	e027      	b.n	8009ba6 <HAL_RCC_OscConfig+0xd0a>
 8009b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b68:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	fa93 f2a3 	rbit	r2, r3
 8009b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	fa93 f2a3 	rbit	r2, r3
 8009b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	4b9c      	ldr	r3, [pc, #624]	; (8009e14 <HAL_RCC_OscConfig+0xf78>)
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009baa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009bae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009bb2:	6011      	str	r1, [r2, #0]
 8009bb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bb8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009bbc:	6812      	ldr	r2, [r2, #0]
 8009bbe:	fa92 f1a2 	rbit	r1, r2
 8009bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bc6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009bca:	6011      	str	r1, [r2, #0]
  return result;
 8009bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bd0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	fab2 f282 	clz	r2, r2
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	f042 0220 	orr.w	r2, r2, #32
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	f002 021f 	and.w	r2, r2, #31
 8009be6:	2101      	movs	r1, #1
 8009be8:	fa01 f202 	lsl.w	r2, r1, r2
 8009bec:	4013      	ands	r3, r2
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d182      	bne.n	8009af8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bf2:	4b88      	ldr	r3, [pc, #544]	; (8009e14 <HAL_RCC_OscConfig+0xf78>)
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	430b      	orrs	r3, r1
 8009c14:	497f      	ldr	r1, [pc, #508]	; (8009e14 <HAL_RCC_OscConfig+0xf78>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	604b      	str	r3, [r1, #4]
 8009c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c1e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009c22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c2c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	fa93 f2a3 	rbit	r2, r3
 8009c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009c3e:	601a      	str	r2, [r3, #0]
  return result;
 8009c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009c48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c4a:	fab3 f383 	clz	r3, r3
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c60:	f7fc f912 	bl	8005e88 <HAL_GetTick>
 8009c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009c68:	e009      	b.n	8009c7e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c6a:	f7fc f90d 	bl	8005e88 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e144      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c90:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	fa93 f2a3 	rbit	r2, r3
 8009c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c9e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009ca2:	601a      	str	r2, [r3, #0]
  return result;
 8009ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ca8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009cac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009cae:	fab3 f383 	clz	r3, r3
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	095b      	lsrs	r3, r3, #5
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f043 0301 	orr.w	r3, r3, #1
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d102      	bne.n	8009cc8 <HAL_RCC_OscConfig+0xe2c>
 8009cc2:	4b54      	ldr	r3, [pc, #336]	; (8009e14 <HAL_RCC_OscConfig+0xf78>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	e027      	b.n	8009d18 <HAL_RCC_OscConfig+0xe7c>
 8009cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ccc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	fa93 f2a3 	rbit	r2, r3
 8009ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cf2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d00:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	fa93 f2a3 	rbit	r2, r3
 8009d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	4b3f      	ldr	r3, [pc, #252]	; (8009e14 <HAL_RCC_OscConfig+0xf78>)
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d1c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009d20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009d24:	6011      	str	r1, [r2, #0]
 8009d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d2a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009d2e:	6812      	ldr	r2, [r2, #0]
 8009d30:	fa92 f1a2 	rbit	r1, r2
 8009d34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009d3c:	6011      	str	r1, [r2, #0]
  return result;
 8009d3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d42:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	fab2 f282 	clz	r2, r2
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	f042 0220 	orr.w	r2, r2, #32
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	f002 021f 	and.w	r2, r2, #31
 8009d58:	2101      	movs	r1, #1
 8009d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8009d5e:	4013      	ands	r3, r2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d082      	beq.n	8009c6a <HAL_RCC_OscConfig+0xdce>
 8009d64:	e0cf      	b.n	8009f06 <HAL_RCC_OscConfig+0x106a>
 8009d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009d6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d78:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	fa93 f2a3 	rbit	r2, r3
 8009d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d86:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d8a:	601a      	str	r2, [r3, #0]
  return result;
 8009d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d96:	fab3 f383 	clz	r3, r3
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009da0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	461a      	mov	r2, r3
 8009da8:	2300      	movs	r3, #0
 8009daa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dac:	f7fc f86c 	bl	8005e88 <HAL_GetTick>
 8009db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009db4:	e009      	b.n	8009dca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009db6:	f7fc f867 	bl	8005e88 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e09e      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
 8009dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ddc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	fa93 f2a3 	rbit	r2, r3
 8009de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009dee:	601a      	str	r2, [r3, #0]
  return result;
 8009df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009df4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009dfa:	fab3 f383 	clz	r3, r3
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	095b      	lsrs	r3, r3, #5
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	f043 0301 	orr.w	r3, r3, #1
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d104      	bne.n	8009e18 <HAL_RCC_OscConfig+0xf7c>
 8009e0e:	4b01      	ldr	r3, [pc, #4]	; (8009e14 <HAL_RCC_OscConfig+0xf78>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	e029      	b.n	8009e68 <HAL_RCC_OscConfig+0xfcc>
 8009e14:	40021000 	.word	0x40021000
 8009e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	fa93 f2a3 	rbit	r2, r3
 8009e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e42:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e50:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	fa93 f2a3 	rbit	r2, r3
 8009e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	4b2b      	ldr	r3, [pc, #172]	; (8009f14 <HAL_RCC_OscConfig+0x1078>)
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e6c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009e70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009e74:	6011      	str	r1, [r2, #0]
 8009e76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e7a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	fa92 f1a2 	rbit	r1, r2
 8009e84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e88:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e8c:	6011      	str	r1, [r2, #0]
  return result;
 8009e8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	fab2 f282 	clz	r2, r2
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	f042 0220 	orr.w	r2, r2, #32
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	f002 021f 	and.w	r2, r2, #31
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8009eae:	4013      	ands	r3, r2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d180      	bne.n	8009db6 <HAL_RCC_OscConfig+0xf1a>
 8009eb4:	e027      	b.n	8009f06 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d101      	bne.n	8009eca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e01e      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009eca:	4b12      	ldr	r3, [pc, #72]	; (8009f14 <HAL_RCC_OscConfig+0x1078>)
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009ed2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009ed6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d10b      	bne.n	8009f02 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8009eea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d001      	beq.n	8009f06 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	40021000 	.word	0x40021000

08009f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b09e      	sub	sp, #120	; 0x78
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e162      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f30:	4b90      	ldr	r3, [pc, #576]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0307 	and.w	r3, r3, #7
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d910      	bls.n	8009f60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f3e:	4b8d      	ldr	r3, [pc, #564]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f023 0207 	bic.w	r2, r3, #7
 8009f46:	498b      	ldr	r1, [pc, #556]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f4e:	4b89      	ldr	r3, [pc, #548]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0307 	and.w	r3, r3, #7
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d001      	beq.n	8009f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e14a      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0302 	and.w	r3, r3, #2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d008      	beq.n	8009f7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f6c:	4b82      	ldr	r3, [pc, #520]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	497f      	ldr	r1, [pc, #508]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 80dc 	beq.w	800a144 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d13c      	bne.n	800a00e <HAL_RCC_ClockConfig+0xf6>
 8009f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f9c:	fa93 f3a3 	rbit	r3, r3
 8009fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fa4:	fab3 f383 	clz	r3, r3
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	095b      	lsrs	r3, r3, #5
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	f043 0301 	orr.w	r3, r3, #1
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d102      	bne.n	8009fbe <HAL_RCC_ClockConfig+0xa6>
 8009fb8:	4b6f      	ldr	r3, [pc, #444]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	e00f      	b.n	8009fde <HAL_RCC_ClockConfig+0xc6>
 8009fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009fc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fc6:	fa93 f3a3 	rbit	r3, r3
 8009fca:	667b      	str	r3, [r7, #100]	; 0x64
 8009fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8009fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fd4:	fa93 f3a3 	rbit	r3, r3
 8009fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fda:	4b67      	ldr	r3, [pc, #412]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009fe2:	65ba      	str	r2, [r7, #88]	; 0x58
 8009fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fe6:	fa92 f2a2 	rbit	r2, r2
 8009fea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fee:	fab2 f282 	clz	r2, r2
 8009ff2:	b2d2      	uxtb	r2, r2
 8009ff4:	f042 0220 	orr.w	r2, r2, #32
 8009ff8:	b2d2      	uxtb	r2, r2
 8009ffa:	f002 021f 	and.w	r2, r2, #31
 8009ffe:	2101      	movs	r1, #1
 800a000:	fa01 f202 	lsl.w	r2, r1, r2
 800a004:	4013      	ands	r3, r2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d17b      	bne.n	800a102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e0f3      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d13c      	bne.n	800a090 <HAL_RCC_ClockConfig+0x178>
 800a016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a01a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a01c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a01e:	fa93 f3a3 	rbit	r3, r3
 800a022:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a026:	fab3 f383 	clz	r3, r3
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	095b      	lsrs	r3, r3, #5
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f043 0301 	orr.w	r3, r3, #1
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b01      	cmp	r3, #1
 800a038:	d102      	bne.n	800a040 <HAL_RCC_ClockConfig+0x128>
 800a03a:	4b4f      	ldr	r3, [pc, #316]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	e00f      	b.n	800a060 <HAL_RCC_ClockConfig+0x148>
 800a040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a044:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a048:	fa93 f3a3 	rbit	r3, r3
 800a04c:	647b      	str	r3, [r7, #68]	; 0x44
 800a04e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a052:	643b      	str	r3, [r7, #64]	; 0x40
 800a054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a056:	fa93 f3a3 	rbit	r3, r3
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a05c:	4b46      	ldr	r3, [pc, #280]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a064:	63ba      	str	r2, [r7, #56]	; 0x38
 800a066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a068:	fa92 f2a2 	rbit	r2, r2
 800a06c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a06e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a070:	fab2 f282 	clz	r2, r2
 800a074:	b2d2      	uxtb	r2, r2
 800a076:	f042 0220 	orr.w	r2, r2, #32
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	f002 021f 	and.w	r2, r2, #31
 800a080:	2101      	movs	r1, #1
 800a082:	fa01 f202 	lsl.w	r2, r1, r2
 800a086:	4013      	ands	r3, r2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d13a      	bne.n	800a102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e0b2      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x2de>
 800a090:	2302      	movs	r3, #2
 800a092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	fa93 f3a3 	rbit	r3, r3
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a09e:	fab3 f383 	clz	r3, r3
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	095b      	lsrs	r3, r3, #5
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f043 0301 	orr.w	r3, r3, #1
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d102      	bne.n	800a0b8 <HAL_RCC_ClockConfig+0x1a0>
 800a0b2:	4b31      	ldr	r3, [pc, #196]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	e00d      	b.n	800a0d4 <HAL_RCC_ClockConfig+0x1bc>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	fa93 f3a3 	rbit	r3, r3
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	623b      	str	r3, [r7, #32]
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	fa93 f3a3 	rbit	r3, r3
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	4b29      	ldr	r3, [pc, #164]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	61ba      	str	r2, [r7, #24]
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	fa92 f2a2 	rbit	r2, r2
 800a0de:	617a      	str	r2, [r7, #20]
  return result;
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	fab2 f282 	clz	r2, r2
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	f042 0220 	orr.w	r2, r2, #32
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	f002 021f 	and.w	r2, r2, #31
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	fa01 f202 	lsl.w	r2, r1, r2
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e079      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a102:	4b1d      	ldr	r3, [pc, #116]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f023 0203 	bic.w	r2, r3, #3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	491a      	ldr	r1, [pc, #104]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 800a110:	4313      	orrs	r3, r2
 800a112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a114:	f7fb feb8 	bl	8005e88 <HAL_GetTick>
 800a118:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a11a:	e00a      	b.n	800a132 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a11c:	f7fb feb4 	bl	8005e88 <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	f241 3288 	movw	r2, #5000	; 0x1388
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d901      	bls.n	800a132 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e061      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a132:	4b11      	ldr	r3, [pc, #68]	; (800a178 <HAL_RCC_ClockConfig+0x260>)
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f003 020c 	and.w	r2, r3, #12
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	429a      	cmp	r2, r3
 800a142:	d1eb      	bne.n	800a11c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a144:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d214      	bcs.n	800a17c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a152:	4b08      	ldr	r3, [pc, #32]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f023 0207 	bic.w	r2, r3, #7
 800a15a:	4906      	ldr	r1, [pc, #24]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	4313      	orrs	r3, r2
 800a160:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a162:	4b04      	ldr	r3, [pc, #16]	; (800a174 <HAL_RCC_ClockConfig+0x25c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d005      	beq.n	800a17c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e040      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x2de>
 800a174:	40022000 	.word	0x40022000
 800a178:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d008      	beq.n	800a19a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a188:	4b1d      	ldr	r3, [pc, #116]	; (800a200 <HAL_RCC_ClockConfig+0x2e8>)
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	491a      	ldr	r1, [pc, #104]	; (800a200 <HAL_RCC_ClockConfig+0x2e8>)
 800a196:	4313      	orrs	r3, r2
 800a198:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0308 	and.w	r3, r3, #8
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d009      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a1a6:	4b16      	ldr	r3, [pc, #88]	; (800a200 <HAL_RCC_ClockConfig+0x2e8>)
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4912      	ldr	r1, [pc, #72]	; (800a200 <HAL_RCC_ClockConfig+0x2e8>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a1ba:	f000 f829 	bl	800a210 <HAL_RCC_GetSysClockFreq>
 800a1be:	4601      	mov	r1, r0
 800a1c0:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <HAL_RCC_ClockConfig+0x2e8>)
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1c8:	22f0      	movs	r2, #240	; 0xf0
 800a1ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	fa92 f2a2 	rbit	r2, r2
 800a1d2:	60fa      	str	r2, [r7, #12]
  return result;
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	fab2 f282 	clz	r2, r2
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	40d3      	lsrs	r3, r2
 800a1de:	4a09      	ldr	r2, [pc, #36]	; (800a204 <HAL_RCC_ClockConfig+0x2ec>)
 800a1e0:	5cd3      	ldrb	r3, [r2, r3]
 800a1e2:	fa21 f303 	lsr.w	r3, r1, r3
 800a1e6:	4a08      	ldr	r2, [pc, #32]	; (800a208 <HAL_RCC_ClockConfig+0x2f0>)
 800a1e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a1ea:	4b08      	ldr	r3, [pc, #32]	; (800a20c <HAL_RCC_ClockConfig+0x2f4>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fa ff72 	bl	80050d8 <HAL_InitTick>
  
  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3778      	adds	r7, #120	; 0x78
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	40021000 	.word	0x40021000
 800a204:	080109a8 	.word	0x080109a8
 800a208:	20000038 	.word	0x20000038
 800a20c:	2000011c 	.word	0x2000011c

0800a210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a210:	b480      	push	{r7}
 800a212:	b08b      	sub	sp, #44	; 0x2c
 800a214:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	61fb      	str	r3, [r7, #28]
 800a21a:	2300      	movs	r3, #0
 800a21c:	61bb      	str	r3, [r7, #24]
 800a21e:	2300      	movs	r3, #0
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
 800a222:	2300      	movs	r3, #0
 800a224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a22a:	4b29      	ldr	r3, [pc, #164]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f003 030c 	and.w	r3, r3, #12
 800a236:	2b04      	cmp	r3, #4
 800a238:	d002      	beq.n	800a240 <HAL_RCC_GetSysClockFreq+0x30>
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d003      	beq.n	800a246 <HAL_RCC_GetSysClockFreq+0x36>
 800a23e:	e03c      	b.n	800a2ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a240:	4b24      	ldr	r3, [pc, #144]	; (800a2d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a242:	623b      	str	r3, [r7, #32]
      break;
 800a244:	e03c      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a24c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a250:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	fa92 f2a2 	rbit	r2, r2
 800a258:	607a      	str	r2, [r7, #4]
  return result;
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	fab2 f282 	clz	r2, r2
 800a260:	b2d2      	uxtb	r2, r2
 800a262:	40d3      	lsrs	r3, r2
 800a264:	4a1c      	ldr	r2, [pc, #112]	; (800a2d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a266:	5cd3      	ldrb	r3, [r2, r3]
 800a268:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a26a:	4b19      	ldr	r3, [pc, #100]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	220f      	movs	r2, #15
 800a274:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	fa92 f2a2 	rbit	r2, r2
 800a27c:	60fa      	str	r2, [r7, #12]
  return result;
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	fab2 f282 	clz	r2, r2
 800a284:	b2d2      	uxtb	r2, r2
 800a286:	40d3      	lsrs	r3, r2
 800a288:	4a14      	ldr	r2, [pc, #80]	; (800a2dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800a28a:	5cd3      	ldrb	r3, [r2, r3]
 800a28c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d008      	beq.n	800a2aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a298:	4a0e      	ldr	r2, [pc, #56]	; (800a2d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	fb02 f303 	mul.w	r3, r2, r3
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a8:	e004      	b.n	800a2b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	4a0c      	ldr	r2, [pc, #48]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a2ae:	fb02 f303 	mul.w	r3, r2, r3
 800a2b2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	623b      	str	r3, [r7, #32]
      break;
 800a2b8:	e002      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a2bc:	623b      	str	r3, [r7, #32]
      break;
 800a2be:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	372c      	adds	r7, #44	; 0x2c
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	40021000 	.word	0x40021000
 800a2d4:	016e3600 	.word	0x016e3600
 800a2d8:	080109c0 	.word	0x080109c0
 800a2dc:	080109d0 	.word	0x080109d0
 800a2e0:	003d0900 	.word	0x003d0900
 800a2e4:	007a1200 	.word	0x007a1200

0800a2e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2ec:	4b03      	ldr	r3, [pc, #12]	; (800a2fc <HAL_RCC_GetHCLKFreq+0x14>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20000038 	.word	0x20000038

0800a300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a306:	f7ff ffef 	bl	800a2e8 <HAL_RCC_GetHCLKFreq>
 800a30a:	4601      	mov	r1, r0
 800a30c:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a314:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a318:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	fa92 f2a2 	rbit	r2, r2
 800a320:	603a      	str	r2, [r7, #0]
  return result;
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	fab2 f282 	clz	r2, r2
 800a328:	b2d2      	uxtb	r2, r2
 800a32a:	40d3      	lsrs	r3, r2
 800a32c:	4a04      	ldr	r2, [pc, #16]	; (800a340 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a32e:	5cd3      	ldrb	r3, [r2, r3]
 800a330:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	40021000 	.word	0x40021000
 800a340:	080109b8 	.word	0x080109b8

0800a344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a34a:	f7ff ffcd 	bl	800a2e8 <HAL_RCC_GetHCLKFreq>
 800a34e:	4601      	mov	r1, r0
 800a350:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a358:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a35c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	fa92 f2a2 	rbit	r2, r2
 800a364:	603a      	str	r2, [r7, #0]
  return result;
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	fab2 f282 	clz	r2, r2
 800a36c:	b2d2      	uxtb	r2, r2
 800a36e:	40d3      	lsrs	r3, r2
 800a370:	4a04      	ldr	r2, [pc, #16]	; (800a384 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a372:	5cd3      	ldrb	r3, [r2, r3]
 800a374:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	40021000 	.word	0x40021000
 800a384:	080109b8 	.word	0x080109b8

0800a388 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	220f      	movs	r2, #15
 800a396:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a398:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <HAL_RCC_GetClockConfig+0x5c>)
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f003 0203 	and.w	r2, r3, #3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800a3a4:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <HAL_RCC_GetClockConfig+0x5c>)
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800a3b0:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <HAL_RCC_GetClockConfig+0x5c>)
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a3bc:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <HAL_RCC_GetClockConfig+0x5c>)
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	08db      	lsrs	r3, r3, #3
 800a3c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800a3ca:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <HAL_RCC_GetClockConfig+0x60>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0207 	and.w	r2, r3, #7
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	601a      	str	r2, [r3, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40021000 	.word	0x40021000
 800a3e8:	40022000 	.word	0x40022000

0800a3ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b092      	sub	sp, #72	; 0x48
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 80d4 	beq.w	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a410:	4b4e      	ldr	r3, [pc, #312]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10e      	bne.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a41c:	4b4b      	ldr	r3, [pc, #300]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	4a4a      	ldr	r2, [pc, #296]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a426:	61d3      	str	r3, [r2, #28]
 800a428:	4b48      	ldr	r3, [pc, #288]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a434:	2301      	movs	r3, #1
 800a436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a43a:	4b45      	ldr	r3, [pc, #276]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a442:	2b00      	cmp	r3, #0
 800a444:	d118      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a446:	4b42      	ldr	r3, [pc, #264]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a41      	ldr	r2, [pc, #260]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a44c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a450:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a452:	f7fb fd19 	bl	8005e88 <HAL_GetTick>
 800a456:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a458:	e008      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a45a:	f7fb fd15 	bl	8005e88 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b64      	cmp	r3, #100	; 0x64
 800a466:	d901      	bls.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e169      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a46c:	4b38      	ldr	r3, [pc, #224]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0f0      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a478:	4b34      	ldr	r3, [pc, #208]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8084 	beq.w	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a494:	429a      	cmp	r2, r3
 800a496:	d07c      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a498:	4b2c      	ldr	r3, [pc, #176]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a4a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	fa93 f3a3 	rbit	r3, r3
 800a4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a4b2:	fab3 f383 	clz	r3, r3
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4b26      	ldr	r3, [pc, #152]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a4ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	fa93 f3a3 	rbit	r3, r3
 800a4d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4d6:	fab3 f383 	clz	r3, r3
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	461a      	mov	r2, r3
 800a4de:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a4e0:	4413      	add	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a4ea:	4a18      	ldr	r2, [pc, #96]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d04b      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4fa:	f7fb fcc5 	bl	8005e88 <HAL_GetTick>
 800a4fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a500:	e00a      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a502:	f7fb fcc1 	bl	8005e88 <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a510:	4293      	cmp	r3, r2
 800a512:	d901      	bls.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	e113      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a518:	2302      	movs	r3, #2
 800a51a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	fa93 f3a3 	rbit	r3, r3
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
 800a524:	2302      	movs	r3, #2
 800a526:	623b      	str	r3, [r7, #32]
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	fa93 f3a3 	rbit	r3, r3
 800a52e:	61fb      	str	r3, [r7, #28]
  return result;
 800a530:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a532:	fab3 f383 	clz	r3, r3
 800a536:	b2db      	uxtb	r3, r3
 800a538:	095b      	lsrs	r3, r3, #5
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	f043 0302 	orr.w	r3, r3, #2
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b02      	cmp	r3, #2
 800a544:	d108      	bne.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a546:	4b01      	ldr	r3, [pc, #4]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	e00d      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a54c:	40021000 	.word	0x40021000
 800a550:	40007000 	.word	0x40007000
 800a554:	10908100 	.word	0x10908100
 800a558:	2302      	movs	r3, #2
 800a55a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	fa93 f3a3 	rbit	r3, r3
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	4b78      	ldr	r3, [pc, #480]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	2202      	movs	r2, #2
 800a56a:	613a      	str	r2, [r7, #16]
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	fa92 f2a2 	rbit	r2, r2
 800a572:	60fa      	str	r2, [r7, #12]
  return result;
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	fab2 f282 	clz	r2, r2
 800a57a:	b2d2      	uxtb	r2, r2
 800a57c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	f002 021f 	and.w	r2, r2, #31
 800a586:	2101      	movs	r1, #1
 800a588:	fa01 f202 	lsl.w	r2, r1, r2
 800a58c:	4013      	ands	r3, r2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0b7      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a592:	4b6d      	ldr	r3, [pc, #436]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	496a      	ldr	r1, [pc, #424]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a5a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d105      	bne.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5ac:	4b66      	ldr	r3, [pc, #408]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	4a65      	ldr	r2, [pc, #404]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d008      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a5c4:	4b60      	ldr	r3, [pc, #384]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c8:	f023 0203 	bic.w	r2, r3, #3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	495d      	ldr	r1, [pc, #372]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d008      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5e2:	4b59      	ldr	r3, [pc, #356]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	4956      	ldr	r1, [pc, #344]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a600:	4b51      	ldr	r3, [pc, #324]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	494e      	ldr	r1, [pc, #312]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a61e:	4b4a      	ldr	r3, [pc, #296]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	f023 0210 	bic.w	r2, r3, #16
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	4947      	ldr	r1, [pc, #284]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d008      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a63c:	4b42      	ldr	r3, [pc, #264]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a648:	493f      	ldr	r1, [pc, #252]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a65a:	4b3b      	ldr	r3, [pc, #236]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	f023 0220 	bic.w	r2, r3, #32
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	4938      	ldr	r1, [pc, #224]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a668:	4313      	orrs	r3, r2
 800a66a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d008      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a678:	4b33      	ldr	r3, [pc, #204]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	4930      	ldr	r1, [pc, #192]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a686:	4313      	orrs	r3, r2
 800a688:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0310 	and.w	r3, r3, #16
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a696:	4b2c      	ldr	r3, [pc, #176]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	4929      	ldr	r1, [pc, #164]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d008      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a6b4:	4b24      	ldr	r3, [pc, #144]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	4921      	ldr	r1, [pc, #132]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d008      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a6d2:	4b1d      	ldr	r3, [pc, #116]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	491a      	ldr	r1, [pc, #104]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d008      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a6f0:	4b15      	ldr	r3, [pc, #84]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fc:	4912      	ldr	r1, [pc, #72]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d008      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a70e:	4b0e      	ldr	r3, [pc, #56]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71a:	490b      	ldr	r1, [pc, #44]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d008      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a72c:	4b06      	ldr	r3, [pc, #24]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a738:	4903      	ldr	r1, [pc, #12]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3748      	adds	r7, #72	; 0x48
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	40021000 	.word	0x40021000

0800a74c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e049      	b.n	800a7f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7fb f850 	bl	8005818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3304      	adds	r3, #4
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f000 f9e8 	bl	800ab60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d001      	beq.n	800a814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e04a      	b.n	800a8aa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68da      	ldr	r2, [r3, #12]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a21      	ldr	r2, [pc, #132]	; (800a8b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d018      	beq.n	800a868 <HAL_TIM_Base_Start_IT+0x6c>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83e:	d013      	beq.n	800a868 <HAL_TIM_Base_Start_IT+0x6c>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a1d      	ldr	r2, [pc, #116]	; (800a8bc <HAL_TIM_Base_Start_IT+0xc0>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00e      	beq.n	800a868 <HAL_TIM_Base_Start_IT+0x6c>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a1c      	ldr	r2, [pc, #112]	; (800a8c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d009      	beq.n	800a868 <HAL_TIM_Base_Start_IT+0x6c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a1a      	ldr	r2, [pc, #104]	; (800a8c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d004      	beq.n	800a868 <HAL_TIM_Base_Start_IT+0x6c>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a19      	ldr	r2, [pc, #100]	; (800a8c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d115      	bne.n	800a894 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	4b17      	ldr	r3, [pc, #92]	; (800a8cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a870:	4013      	ands	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b06      	cmp	r3, #6
 800a878:	d015      	beq.n	800a8a6 <HAL_TIM_Base_Start_IT+0xaa>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a880:	d011      	beq.n	800a8a6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f042 0201 	orr.w	r2, r2, #1
 800a890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a892:	e008      	b.n	800a8a6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f042 0201 	orr.w	r2, r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	e000      	b.n	800a8a8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	40012c00 	.word	0x40012c00
 800a8bc:	40000400 	.word	0x40000400
 800a8c0:	40000800 	.word	0x40000800
 800a8c4:	40013400 	.word	0x40013400
 800a8c8:	40014000 	.word	0x40014000
 800a8cc:	00010007 	.word	0x00010007

0800a8d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d122      	bne.n	800a92c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f003 0302 	and.w	r3, r3, #2
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d11b      	bne.n	800a92c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f06f 0202 	mvn.w	r2, #2
 800a8fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f905 	bl	800ab22 <HAL_TIM_IC_CaptureCallback>
 800a918:	e005      	b.n	800a926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8f7 	bl	800ab0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f908 	bl	800ab36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f003 0304 	and.w	r3, r3, #4
 800a936:	2b04      	cmp	r3, #4
 800a938:	d122      	bne.n	800a980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b04      	cmp	r3, #4
 800a946:	d11b      	bne.n	800a980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f06f 0204 	mvn.w	r2, #4
 800a950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2202      	movs	r2, #2
 800a956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8db 	bl	800ab22 <HAL_TIM_IC_CaptureCallback>
 800a96c:	e005      	b.n	800a97a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f8cd 	bl	800ab0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f8de 	bl	800ab36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	f003 0308 	and.w	r3, r3, #8
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d122      	bne.n	800a9d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f003 0308 	and.w	r3, r3, #8
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d11b      	bne.n	800a9d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f06f 0208 	mvn.w	r2, #8
 800a9a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f003 0303 	and.w	r3, r3, #3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f8b1 	bl	800ab22 <HAL_TIM_IC_CaptureCallback>
 800a9c0:	e005      	b.n	800a9ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f8a3 	bl	800ab0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f8b4 	bl	800ab36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	f003 0310 	and.w	r3, r3, #16
 800a9de:	2b10      	cmp	r3, #16
 800a9e0:	d122      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f003 0310 	and.w	r3, r3, #16
 800a9ec:	2b10      	cmp	r3, #16
 800a9ee:	d11b      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f06f 0210 	mvn.w	r2, #16
 800a9f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2208      	movs	r2, #8
 800a9fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f887 	bl	800ab22 <HAL_TIM_IC_CaptureCallback>
 800aa14:	e005      	b.n	800aa22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f879 	bl	800ab0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f88a 	bl	800ab36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d10e      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d107      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f06f 0201 	mvn.w	r2, #1
 800aa4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7f9 fc7e 	bl	8004350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa5e:	2b80      	cmp	r3, #128	; 0x80
 800aa60:	d10e      	bne.n	800aa80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6c:	2b80      	cmp	r3, #128	; 0x80
 800aa6e:	d107      	bne.n	800aa80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f98a 	bl	800ad94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa8e:	d10e      	bne.n	800aaae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9a:	2b80      	cmp	r3, #128	; 0x80
 800aa9c:	d107      	bne.n	800aaae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aaa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f97d 	bl	800ada8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab8:	2b40      	cmp	r3, #64	; 0x40
 800aaba:	d10e      	bne.n	800aada <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac6:	2b40      	cmp	r3, #64	; 0x40
 800aac8:	d107      	bne.n	800aada <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f838 	bl	800ab4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	f003 0320 	and.w	r3, r3, #32
 800aae4:	2b20      	cmp	r3, #32
 800aae6:	d10e      	bne.n	800ab06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f003 0320 	and.w	r3, r3, #32
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d107      	bne.n	800ab06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f06f 0220 	mvn.w	r2, #32
 800aafe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f93d 	bl	800ad80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab06:	bf00      	nop
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b083      	sub	sp, #12
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab2a:	bf00      	nop
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab3e:	bf00      	nop
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab52:	bf00      	nop
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a3c      	ldr	r2, [pc, #240]	; (800ac64 <TIM_Base_SetConfig+0x104>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00f      	beq.n	800ab98 <TIM_Base_SetConfig+0x38>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab7e:	d00b      	beq.n	800ab98 <TIM_Base_SetConfig+0x38>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a39      	ldr	r2, [pc, #228]	; (800ac68 <TIM_Base_SetConfig+0x108>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d007      	beq.n	800ab98 <TIM_Base_SetConfig+0x38>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a38      	ldr	r2, [pc, #224]	; (800ac6c <TIM_Base_SetConfig+0x10c>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d003      	beq.n	800ab98 <TIM_Base_SetConfig+0x38>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a37      	ldr	r2, [pc, #220]	; (800ac70 <TIM_Base_SetConfig+0x110>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d108      	bne.n	800abaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a2d      	ldr	r2, [pc, #180]	; (800ac64 <TIM_Base_SetConfig+0x104>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d01b      	beq.n	800abea <TIM_Base_SetConfig+0x8a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb8:	d017      	beq.n	800abea <TIM_Base_SetConfig+0x8a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a2a      	ldr	r2, [pc, #168]	; (800ac68 <TIM_Base_SetConfig+0x108>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d013      	beq.n	800abea <TIM_Base_SetConfig+0x8a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a29      	ldr	r2, [pc, #164]	; (800ac6c <TIM_Base_SetConfig+0x10c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d00f      	beq.n	800abea <TIM_Base_SetConfig+0x8a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <TIM_Base_SetConfig+0x110>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d00b      	beq.n	800abea <TIM_Base_SetConfig+0x8a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a27      	ldr	r2, [pc, #156]	; (800ac74 <TIM_Base_SetConfig+0x114>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d007      	beq.n	800abea <TIM_Base_SetConfig+0x8a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a26      	ldr	r2, [pc, #152]	; (800ac78 <TIM_Base_SetConfig+0x118>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_Base_SetConfig+0x8a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a25      	ldr	r2, [pc, #148]	; (800ac7c <TIM_Base_SetConfig+0x11c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d108      	bne.n	800abfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a10      	ldr	r2, [pc, #64]	; (800ac64 <TIM_Base_SetConfig+0x104>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00f      	beq.n	800ac48 <TIM_Base_SetConfig+0xe8>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a11      	ldr	r2, [pc, #68]	; (800ac70 <TIM_Base_SetConfig+0x110>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00b      	beq.n	800ac48 <TIM_Base_SetConfig+0xe8>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a10      	ldr	r2, [pc, #64]	; (800ac74 <TIM_Base_SetConfig+0x114>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d007      	beq.n	800ac48 <TIM_Base_SetConfig+0xe8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a0f      	ldr	r2, [pc, #60]	; (800ac78 <TIM_Base_SetConfig+0x118>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d003      	beq.n	800ac48 <TIM_Base_SetConfig+0xe8>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a0e      	ldr	r2, [pc, #56]	; (800ac7c <TIM_Base_SetConfig+0x11c>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d103      	bne.n	800ac50 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	615a      	str	r2, [r3, #20]
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40012c00 	.word	0x40012c00
 800ac68:	40000400 	.word	0x40000400
 800ac6c:	40000800 	.word	0x40000800
 800ac70:	40013400 	.word	0x40013400
 800ac74:	40014000 	.word	0x40014000
 800ac78:	40014400 	.word	0x40014400
 800ac7c:	40014800 	.word	0x40014800

0800ac80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e063      	b.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2202      	movs	r2, #2
 800aca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a2b      	ldr	r2, [pc, #172]	; (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d004      	beq.n	800accc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d108      	bne.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800acd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ace4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	4313      	orrs	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a1b      	ldr	r2, [pc, #108]	; (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d018      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0a:	d013      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a18      	ldr	r2, [pc, #96]	; (800ad74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d00e      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a17      	ldr	r2, [pc, #92]	; (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d009      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a12      	ldr	r2, [pc, #72]	; (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d004      	beq.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a13      	ldr	r2, [pc, #76]	; (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d10c      	bne.n	800ad4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	40012c00 	.word	0x40012c00
 800ad70:	40013400 	.word	0x40013400
 800ad74:	40000400 	.word	0x40000400
 800ad78:	40000800 	.word	0x40000800
 800ad7c:	40014000 	.word	0x40014000

0800ad80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e040      	b.n	800ae50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7fa fdfe 	bl	80059e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2224      	movs	r2, #36	; 0x24
 800ade8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f022 0201 	bic.w	r2, r2, #1
 800adf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fdf2 	bl	800b9e4 <UART_SetConfig>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d101      	bne.n	800ae0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e022      	b.n	800ae50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 ffba 	bl	800bd8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689a      	ldr	r2, [r3, #8]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f042 0201 	orr.w	r2, r2, #1
 800ae46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f001 f841 	bl	800bed0 <UART_CheckIdleState>
 800ae4e:	4603      	mov	r3, r0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b08b      	sub	sp, #44	; 0x2c
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	4613      	mov	r3, r2
 800ae64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	d147      	bne.n	800aefe <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <HAL_UART_Transmit_IT+0x22>
 800ae74:	88fb      	ldrh	r3, [r7, #6]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d101      	bne.n	800ae7e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e040      	b.n	800af00 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	88fa      	ldrh	r2, [r7, #6]
 800ae88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	88fa      	ldrh	r2, [r7, #6]
 800ae90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2221      	movs	r2, #33	; 0x21
 800aea6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb0:	d107      	bne.n	800aec2 <HAL_UART_Transmit_IT+0x6a>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d103      	bne.n	800aec2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	4a13      	ldr	r2, [pc, #76]	; (800af0c <HAL_UART_Transmit_IT+0xb4>)
 800aebe:	66da      	str	r2, [r3, #108]	; 0x6c
 800aec0:	e002      	b.n	800aec8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	4a12      	ldr	r2, [pc, #72]	; (800af10 <HAL_UART_Transmit_IT+0xb8>)
 800aec6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	e853 3f00 	ldrex	r3, [r3]
 800aed4:	613b      	str	r3, [r7, #16]
   return(result);
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	623b      	str	r3, [r7, #32]
 800aee8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeea:	69f9      	ldr	r1, [r7, #28]
 800aeec:	6a3a      	ldr	r2, [r7, #32]
 800aeee:	e841 2300 	strex	r3, r2, [r1]
 800aef2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1e6      	bne.n	800aec8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	e000      	b.n	800af00 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800aefe:	2302      	movs	r3, #2
  }
}
 800af00:	4618      	mov	r0, r3
 800af02:	372c      	adds	r7, #44	; 0x2c
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	0800c897 	.word	0x0800c897
 800af10:	0800c7df 	.word	0x0800c7df

0800af14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af28:	2b20      	cmp	r3, #32
 800af2a:	d132      	bne.n	800af92 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <HAL_UART_Receive_IT+0x24>
 800af32:	88fb      	ldrh	r3, [r7, #6]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d101      	bne.n	800af3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	e02b      	b.n	800af94 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d018      	beq.n	800af82 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	613b      	str	r3, [r7, #16]
   return(result);
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af64:	627b      	str	r3, [r7, #36]	; 0x24
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	623b      	str	r3, [r7, #32]
 800af70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	69f9      	ldr	r1, [r7, #28]
 800af74:	6a3a      	ldr	r2, [r7, #32]
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	61bb      	str	r3, [r7, #24]
   return(result);
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e6      	bne.n	800af50 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af82:	88fb      	ldrh	r3, [r7, #6]
 800af84:	461a      	mov	r2, r3
 800af86:	68b9      	ldr	r1, [r7, #8]
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f001 f8b1 	bl	800c0f0 <UART_Start_Receive_IT>
 800af8e:	4603      	mov	r3, r0
 800af90:	e000      	b.n	800af94 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800af92:	2302      	movs	r3, #2
  }
}
 800af94:	4618      	mov	r0, r3
 800af96:	3728      	adds	r7, #40	; 0x28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08a      	sub	sp, #40	; 0x28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	4613      	mov	r3, r2
 800afa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afae:	2b20      	cmp	r3, #32
 800afb0:	d165      	bne.n	800b07e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <HAL_UART_Transmit_DMA+0x22>
 800afb8:	88fb      	ldrh	r3, [r7, #6]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e05e      	b.n	800b080 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	88fa      	ldrh	r2, [r7, #6]
 800afcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	88fa      	ldrh	r2, [r7, #6]
 800afd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2221      	movs	r2, #33	; 0x21
 800afe4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afea:	2b00      	cmp	r3, #0
 800afec:	d027      	beq.n	800b03e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	4a25      	ldr	r2, [pc, #148]	; (800b088 <HAL_UART_Transmit_DMA+0xec>)
 800aff4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affa:	4a24      	ldr	r2, [pc, #144]	; (800b08c <HAL_UART_Transmit_DMA+0xf0>)
 800affc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b002:	4a23      	ldr	r2, [pc, #140]	; (800b090 <HAL_UART_Transmit_DMA+0xf4>)
 800b004:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00a:	2200      	movs	r2, #0
 800b00c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b016:	4619      	mov	r1, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3328      	adds	r3, #40	; 0x28
 800b01e:	461a      	mov	r2, r3
 800b020:	88fb      	ldrh	r3, [r7, #6]
 800b022:	f7fb f88a 	bl	800613a <HAL_DMA_Start_IT>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d008      	beq.n	800b03e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2210      	movs	r2, #16
 800b030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2220      	movs	r2, #32
 800b038:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e020      	b.n	800b080 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2240      	movs	r2, #64	; 0x40
 800b044:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	613b      	str	r3, [r7, #16]
   return(result);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3308      	adds	r3, #8
 800b064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b066:	623a      	str	r2, [r7, #32]
 800b068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	69f9      	ldr	r1, [r7, #28]
 800b06c:	6a3a      	ldr	r2, [r7, #32]
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	61bb      	str	r3, [r7, #24]
   return(result);
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e5      	bne.n	800b046 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	e000      	b.n	800b080 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b07e:	2302      	movs	r3, #2
  }
}
 800b080:	4618      	mov	r0, r3
 800b082:	3728      	adds	r7, #40	; 0x28
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	0800c4ad 	.word	0x0800c4ad
 800b08c:	0800c541 	.word	0x0800c541
 800b090:	0800c6c1 	.word	0x0800c6c1

0800b094 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08a      	sub	sp, #40	; 0x28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	d132      	bne.n	800b112 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <HAL_UART_Receive_DMA+0x24>
 800b0b2:	88fb      	ldrh	r3, [r7, #6]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e02b      	b.n	800b114 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d018      	beq.n	800b102 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	623b      	str	r3, [r7, #32]
 800b0f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	69f9      	ldr	r1, [r7, #28]
 800b0f4:	6a3a      	ldr	r2, [r7, #32]
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e6      	bne.n	800b0d0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	461a      	mov	r2, r3
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f001 f8a5 	bl	800c258 <UART_Start_Receive_DMA>
 800b10e:	4603      	mov	r3, r0
 800b110:	e000      	b.n	800b114 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b112:	2302      	movs	r3, #2
  }
}
 800b114:	4618      	mov	r0, r3
 800b116:	3728      	adds	r7, #40	; 0x28
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08e      	sub	sp, #56	; 0x38
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	e853 3f00 	ldrex	r3, [r3]
 800b130:	61fb      	str	r3, [r7, #28]
   return(result);
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b138:	637b      	str	r3, [r7, #52]	; 0x34
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b142:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b144:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b14a:	e841 2300 	strex	r3, r2, [r1]
 800b14e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1e6      	bne.n	800b124 <HAL_UART_AbortTransmit_IT+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b160:	2b80      	cmp	r3, #128	; 0x80
 800b162:	d13f      	bne.n	800b1e4 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3308      	adds	r3, #8
 800b16a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	e853 3f00 	ldrex	r3, [r3]
 800b172:	60bb      	str	r3, [r7, #8]
   return(result);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3308      	adds	r3, #8
 800b182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b184:	61ba      	str	r2, [r7, #24]
 800b186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6979      	ldr	r1, [r7, #20]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	613b      	str	r3, [r7, #16]
   return(result);
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e5      	bne.n	800b164 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d013      	beq.n	800b1c8 <HAL_UART_AbortTransmit_IT+0xac>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a4:	4a18      	ldr	r2, [pc, #96]	; (800b208 <HAL_UART_AbortTransmit_IT+0xec>)
 800b1a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fb f85c 	bl	800626a <HAL_DMA_Abort_IT>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d022      	beq.n	800b1fe <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	4798      	blx	r3
 800b1c6:	e01a      	b.n	800b1fe <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fbe1 	bl	800b9a4 <HAL_UART_AbortTransmitCpltCallback>
 800b1e2:	e00c      	b.n	800b1fe <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	66da      	str	r2, [r3, #108]	; 0x6c


    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fbd3 	bl	800b9a4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3738      	adds	r7, #56	; 0x38
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	0800c76b 	.word	0x0800c76b

0800b20c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b09a      	sub	sp, #104	; 0x68
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b21c:	e853 3f00 	ldrex	r3, [r3]
 800b220:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b228:	667b      	str	r3, [r7, #100]	; 0x64
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b232:	657b      	str	r3, [r7, #84]	; 0x54
 800b234:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b236:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b23a:	e841 2300 	strex	r3, r2, [r1]
 800b23e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1e6      	bne.n	800b214 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3308      	adds	r3, #8
 800b24c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b250:	e853 3f00 	ldrex	r3, [r3]
 800b254:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	f023 0301 	bic.w	r3, r3, #1
 800b25c:	663b      	str	r3, [r7, #96]	; 0x60
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3308      	adds	r3, #8
 800b264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b266:	643a      	str	r2, [r7, #64]	; 0x40
 800b268:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b26c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b26e:	e841 2300 	strex	r3, r2, [r1]
 800b272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1e5      	bne.n	800b246 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d118      	bne.n	800b2b4 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	f023 0310 	bic.w	r3, r3, #16
 800b296:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	461a      	mov	r2, r3
 800b29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e6      	bne.n	800b282 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2be:	2b40      	cmp	r3, #64	; 0x40
 800b2c0:	d14f      	bne.n	800b362 <HAL_UART_AbortReceive_IT+0x156>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2e2:	61ba      	str	r2, [r7, #24]
 800b2e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	6979      	ldr	r1, [r7, #20]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e5      	bne.n	800b2c2 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d013      	beq.n	800b326 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b302:	4a25      	ldr	r2, [pc, #148]	; (800b398 <HAL_UART_AbortReceive_IT+0x18c>)
 800b304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fa ffad 	bl	800626a <HAL_DMA_Abort_IT>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d03a      	beq.n	800b38c <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	e032      	b.n	800b38c <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	220f      	movs	r2, #15
 800b33a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	699a      	ldr	r2, [r3, #24]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f042 0208 	orr.w	r2, r2, #8
 800b34a:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2220      	movs	r2, #32
 800b350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fb2c 	bl	800b9b8 <HAL_UART_AbortReceiveCpltCallback>
 800b360:	e014      	b.n	800b38c <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	220f      	movs	r2, #15
 800b376:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2220      	movs	r2, #32
 800b37c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fb16 	bl	800b9b8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3768      	adds	r7, #104	; 0x68
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	0800c795 	.word	0x0800c795

0800b39c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b0ba      	sub	sp, #232	; 0xe8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b3c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b3d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d115      	bne.n	800b404 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	f003 0320 	and.w	r3, r3, #32
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00f      	beq.n	800b404 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e8:	f003 0320 	and.w	r3, r3, #32
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d009      	beq.n	800b404 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 82ab 	beq.w	800b950 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	4798      	blx	r3
      }
      return;
 800b402:	e2a5      	b.n	800b950 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 8117 	beq.w	800b63c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b41a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b41e:	4b85      	ldr	r3, [pc, #532]	; (800b634 <HAL_UART_IRQHandler+0x298>)
 800b420:	4013      	ands	r3, r2
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 810a 	beq.w	800b63c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	2b00      	cmp	r3, #0
 800b432:	d011      	beq.n	800b458 <HAL_UART_IRQHandler+0xbc>
 800b434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2201      	movs	r2, #1
 800b446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b44e:	f043 0201 	orr.w	r2, r3, #1
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d011      	beq.n	800b488 <HAL_UART_IRQHandler+0xec>
 800b464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2202      	movs	r2, #2
 800b476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b47e:	f043 0204 	orr.w	r2, r3, #4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d011      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x11c>
 800b494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ae:	f043 0202 	orr.w	r2, r3, #2
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d017      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c8:	f003 0320 	and.w	r3, r3, #32
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d105      	bne.n	800b4dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b4d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00b      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ea:	f043 0208 	orr.w	r2, r3, #8
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d012      	beq.n	800b526 <HAL_UART_IRQHandler+0x18a>
 800b500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00c      	beq.n	800b526 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b51c:	f043 0220 	orr.w	r2, r3, #32
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 8211 	beq.w	800b954 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b536:	f003 0320 	and.w	r3, r3, #32
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00d      	beq.n	800b55a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b53e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b542:	f003 0320 	and.w	r3, r3, #32
 800b546:	2b00      	cmp	r3, #0
 800b548:	d007      	beq.n	800b55a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56e:	2b40      	cmp	r3, #64	; 0x40
 800b570:	d005      	beq.n	800b57e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b576:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d04f      	beq.n	800b61e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 ff30 	bl	800c3e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58e:	2b40      	cmp	r3, #64	; 0x40
 800b590:	d141      	bne.n	800b616 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3308      	adds	r3, #8
 800b598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5a0:	e853 3f00 	ldrex	r3, [r3]
 800b5a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b5be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b5c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b5ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b5ce:	e841 2300 	strex	r3, r2, [r1]
 800b5d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b5d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1d9      	bne.n	800b592 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d013      	beq.n	800b60e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ea:	4a13      	ldr	r2, [pc, #76]	; (800b638 <HAL_UART_IRQHandler+0x29c>)
 800b5ec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fa fe39 	bl	800626a <HAL_DMA_Abort_IT>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d017      	beq.n	800b62e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b608:	4610      	mov	r0, r2
 800b60a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b60c:	e00f      	b.n	800b62e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9be 	bl	800b990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b614:	e00b      	b.n	800b62e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f9ba 	bl	800b990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b61c:	e007      	b.n	800b62e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f9b6 	bl	800b990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b62c:	e192      	b.n	800b954 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b62e:	bf00      	nop
    return;
 800b630:	e190      	b.n	800b954 <HAL_UART_IRQHandler+0x5b8>
 800b632:	bf00      	nop
 800b634:	04000120 	.word	0x04000120
 800b638:	0800c73f 	.word	0x0800c73f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b640:	2b01      	cmp	r3, #1
 800b642:	f040 814b 	bne.w	800b8dc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b64a:	f003 0310 	and.w	r3, r3, #16
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 8144 	beq.w	800b8dc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b658:	f003 0310 	and.w	r3, r3, #16
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 813d 	beq.w	800b8dc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2210      	movs	r2, #16
 800b668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b674:	2b40      	cmp	r3, #64	; 0x40
 800b676:	f040 80b5 	bne.w	800b7e4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b686:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 8164 	beq.w	800b958 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b69a:	429a      	cmp	r2, r3
 800b69c:	f080 815c 	bcs.w	800b958 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b6a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	2b20      	cmp	r3, #32
 800b6b2:	f000 8086 	beq.w	800b7c2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6c2:	e853 3f00 	ldrex	r3, [r3]
 800b6c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b6ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b6e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b6ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b6f0:	e841 2300 	strex	r3, r2, [r1]
 800b6f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b6f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1da      	bne.n	800b6b6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3308      	adds	r3, #8
 800b706:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b70a:	e853 3f00 	ldrex	r3, [r3]
 800b70e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b712:	f023 0301 	bic.w	r3, r3, #1
 800b716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3308      	adds	r3, #8
 800b720:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b724:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b728:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b72c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b730:	e841 2300 	strex	r3, r2, [r1]
 800b734:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1e1      	bne.n	800b700 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3308      	adds	r3, #8
 800b742:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b74c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b74e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	3308      	adds	r3, #8
 800b75c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b760:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b762:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b764:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b766:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b768:	e841 2300 	strex	r3, r2, [r1]
 800b76c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b76e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1e3      	bne.n	800b73c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2220      	movs	r2, #32
 800b778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b78a:	e853 3f00 	ldrex	r3, [r3]
 800b78e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b792:	f023 0310 	bic.w	r3, r3, #16
 800b796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e4      	bne.n	800b782 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fa fd1b 	bl	80061f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f8f5 	bl	800b9cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7e2:	e0b9      	b.n	800b958 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 80ab 	beq.w	800b95c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800b806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f000 80a6 	beq.w	800b95c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b832:	647b      	str	r3, [r7, #68]	; 0x44
 800b834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b83a:	e841 2300 	strex	r3, r2, [r1]
 800b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1e4      	bne.n	800b810 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3308      	adds	r3, #8
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	623b      	str	r3, [r7, #32]
   return(result);
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	f023 0301 	bic.w	r3, r3, #1
 800b85c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3308      	adds	r3, #8
 800b866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b86a:	633a      	str	r2, [r7, #48]	; 0x30
 800b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b872:	e841 2300 	strex	r3, r2, [r1]
 800b876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1e3      	bne.n	800b846 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2220      	movs	r2, #32
 800b882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	e853 3f00 	ldrex	r3, [r3]
 800b89e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f023 0310 	bic.w	r3, r3, #16
 800b8a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	69b9      	ldr	r1, [r7, #24]
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	e841 2300 	strex	r3, r2, [r1]
 800b8c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e4      	bne.n	800b892 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f879 	bl	800b9cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8da:	e03f      	b.n	800b95c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00e      	beq.n	800b906 <HAL_UART_IRQHandler+0x56a>
 800b8e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b8fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f001 f9fb 	bl	800ccfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b904:	e02d      	b.n	800b962 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00e      	beq.n	800b930 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d008      	beq.n	800b930 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b922:	2b00      	cmp	r3, #0
 800b924:	d01c      	beq.n	800b960 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	4798      	blx	r3
    }
    return;
 800b92e:	e017      	b.n	800b960 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d012      	beq.n	800b962 <HAL_UART_IRQHandler+0x5c6>
 800b93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00c      	beq.n	800b962 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 f804 	bl	800c956 <UART_EndTransmit_IT>
    return;
 800b94e:	e008      	b.n	800b962 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b950:	bf00      	nop
 800b952:	e006      	b.n	800b962 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b954:	bf00      	nop
 800b956:	e004      	b.n	800b962 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b958:	bf00      	nop
 800b95a:	e002      	b.n	800b962 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b95c:	bf00      	nop
 800b95e:	e000      	b.n	800b962 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b960:	bf00      	nop
  }

}
 800b962:	37e8      	adds	r7, #232	; 0xe8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689a      	ldr	r2, [r3, #8]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	431a      	orrs	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	69db      	ldr	r3, [r3, #28]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ba12:	f023 030c 	bic.w	r3, r3, #12
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	6979      	ldr	r1, [r7, #20]
 800ba1c:	430b      	orrs	r3, r1
 800ba1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	430a      	orrs	r2, r1
 800ba34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	430a      	orrs	r2, r1
 800ba58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4aa7      	ldr	r2, [pc, #668]	; (800bcfc <UART_SetConfig+0x318>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d120      	bne.n	800baa6 <UART_SetConfig+0xc2>
 800ba64:	4ba6      	ldr	r3, [pc, #664]	; (800bd00 <UART_SetConfig+0x31c>)
 800ba66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba68:	f003 0303 	and.w	r3, r3, #3
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d817      	bhi.n	800baa0 <UART_SetConfig+0xbc>
 800ba70:	a201      	add	r2, pc, #4	; (adr r2, 800ba78 <UART_SetConfig+0x94>)
 800ba72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba76:	bf00      	nop
 800ba78:	0800ba89 	.word	0x0800ba89
 800ba7c:	0800ba95 	.word	0x0800ba95
 800ba80:	0800ba9b 	.word	0x0800ba9b
 800ba84:	0800ba8f 	.word	0x0800ba8f
 800ba88:	2301      	movs	r3, #1
 800ba8a:	77fb      	strb	r3, [r7, #31]
 800ba8c:	e0b5      	b.n	800bbfa <UART_SetConfig+0x216>
 800ba8e:	2302      	movs	r3, #2
 800ba90:	77fb      	strb	r3, [r7, #31]
 800ba92:	e0b2      	b.n	800bbfa <UART_SetConfig+0x216>
 800ba94:	2304      	movs	r3, #4
 800ba96:	77fb      	strb	r3, [r7, #31]
 800ba98:	e0af      	b.n	800bbfa <UART_SetConfig+0x216>
 800ba9a:	2308      	movs	r3, #8
 800ba9c:	77fb      	strb	r3, [r7, #31]
 800ba9e:	e0ac      	b.n	800bbfa <UART_SetConfig+0x216>
 800baa0:	2310      	movs	r3, #16
 800baa2:	77fb      	strb	r3, [r7, #31]
 800baa4:	e0a9      	b.n	800bbfa <UART_SetConfig+0x216>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a96      	ldr	r2, [pc, #600]	; (800bd04 <UART_SetConfig+0x320>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d124      	bne.n	800bafa <UART_SetConfig+0x116>
 800bab0:	4b93      	ldr	r3, [pc, #588]	; (800bd00 <UART_SetConfig+0x31c>)
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800babc:	d011      	beq.n	800bae2 <UART_SetConfig+0xfe>
 800babe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bac2:	d817      	bhi.n	800baf4 <UART_SetConfig+0x110>
 800bac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bac8:	d011      	beq.n	800baee <UART_SetConfig+0x10a>
 800baca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bace:	d811      	bhi.n	800baf4 <UART_SetConfig+0x110>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d003      	beq.n	800badc <UART_SetConfig+0xf8>
 800bad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bad8:	d006      	beq.n	800bae8 <UART_SetConfig+0x104>
 800bada:	e00b      	b.n	800baf4 <UART_SetConfig+0x110>
 800badc:	2300      	movs	r3, #0
 800bade:	77fb      	strb	r3, [r7, #31]
 800bae0:	e08b      	b.n	800bbfa <UART_SetConfig+0x216>
 800bae2:	2302      	movs	r3, #2
 800bae4:	77fb      	strb	r3, [r7, #31]
 800bae6:	e088      	b.n	800bbfa <UART_SetConfig+0x216>
 800bae8:	2304      	movs	r3, #4
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e085      	b.n	800bbfa <UART_SetConfig+0x216>
 800baee:	2308      	movs	r3, #8
 800baf0:	77fb      	strb	r3, [r7, #31]
 800baf2:	e082      	b.n	800bbfa <UART_SetConfig+0x216>
 800baf4:	2310      	movs	r3, #16
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	e07f      	b.n	800bbfa <UART_SetConfig+0x216>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a82      	ldr	r2, [pc, #520]	; (800bd08 <UART_SetConfig+0x324>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d124      	bne.n	800bb4e <UART_SetConfig+0x16a>
 800bb04:	4b7e      	ldr	r3, [pc, #504]	; (800bd00 <UART_SetConfig+0x31c>)
 800bb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bb0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bb10:	d011      	beq.n	800bb36 <UART_SetConfig+0x152>
 800bb12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bb16:	d817      	bhi.n	800bb48 <UART_SetConfig+0x164>
 800bb18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb1c:	d011      	beq.n	800bb42 <UART_SetConfig+0x15e>
 800bb1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb22:	d811      	bhi.n	800bb48 <UART_SetConfig+0x164>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <UART_SetConfig+0x14c>
 800bb28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb2c:	d006      	beq.n	800bb3c <UART_SetConfig+0x158>
 800bb2e:	e00b      	b.n	800bb48 <UART_SetConfig+0x164>
 800bb30:	2300      	movs	r3, #0
 800bb32:	77fb      	strb	r3, [r7, #31]
 800bb34:	e061      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb36:	2302      	movs	r3, #2
 800bb38:	77fb      	strb	r3, [r7, #31]
 800bb3a:	e05e      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb3c:	2304      	movs	r3, #4
 800bb3e:	77fb      	strb	r3, [r7, #31]
 800bb40:	e05b      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb42:	2308      	movs	r3, #8
 800bb44:	77fb      	strb	r3, [r7, #31]
 800bb46:	e058      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb48:	2310      	movs	r3, #16
 800bb4a:	77fb      	strb	r3, [r7, #31]
 800bb4c:	e055      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a6e      	ldr	r2, [pc, #440]	; (800bd0c <UART_SetConfig+0x328>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d124      	bne.n	800bba2 <UART_SetConfig+0x1be>
 800bb58:	4b69      	ldr	r3, [pc, #420]	; (800bd00 <UART_SetConfig+0x31c>)
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bb60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb64:	d011      	beq.n	800bb8a <UART_SetConfig+0x1a6>
 800bb66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb6a:	d817      	bhi.n	800bb9c <UART_SetConfig+0x1b8>
 800bb6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb70:	d011      	beq.n	800bb96 <UART_SetConfig+0x1b2>
 800bb72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb76:	d811      	bhi.n	800bb9c <UART_SetConfig+0x1b8>
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <UART_SetConfig+0x1a0>
 800bb7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb80:	d006      	beq.n	800bb90 <UART_SetConfig+0x1ac>
 800bb82:	e00b      	b.n	800bb9c <UART_SetConfig+0x1b8>
 800bb84:	2300      	movs	r3, #0
 800bb86:	77fb      	strb	r3, [r7, #31]
 800bb88:	e037      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	77fb      	strb	r3, [r7, #31]
 800bb8e:	e034      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb90:	2304      	movs	r3, #4
 800bb92:	77fb      	strb	r3, [r7, #31]
 800bb94:	e031      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb96:	2308      	movs	r3, #8
 800bb98:	77fb      	strb	r3, [r7, #31]
 800bb9a:	e02e      	b.n	800bbfa <UART_SetConfig+0x216>
 800bb9c:	2310      	movs	r3, #16
 800bb9e:	77fb      	strb	r3, [r7, #31]
 800bba0:	e02b      	b.n	800bbfa <UART_SetConfig+0x216>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a5a      	ldr	r2, [pc, #360]	; (800bd10 <UART_SetConfig+0x32c>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d124      	bne.n	800bbf6 <UART_SetConfig+0x212>
 800bbac:	4b54      	ldr	r3, [pc, #336]	; (800bd00 <UART_SetConfig+0x31c>)
 800bbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bbb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbb8:	d011      	beq.n	800bbde <UART_SetConfig+0x1fa>
 800bbba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbbe:	d817      	bhi.n	800bbf0 <UART_SetConfig+0x20c>
 800bbc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbc4:	d011      	beq.n	800bbea <UART_SetConfig+0x206>
 800bbc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbca:	d811      	bhi.n	800bbf0 <UART_SetConfig+0x20c>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <UART_SetConfig+0x1f4>
 800bbd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbd4:	d006      	beq.n	800bbe4 <UART_SetConfig+0x200>
 800bbd6:	e00b      	b.n	800bbf0 <UART_SetConfig+0x20c>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	77fb      	strb	r3, [r7, #31]
 800bbdc:	e00d      	b.n	800bbfa <UART_SetConfig+0x216>
 800bbde:	2302      	movs	r3, #2
 800bbe0:	77fb      	strb	r3, [r7, #31]
 800bbe2:	e00a      	b.n	800bbfa <UART_SetConfig+0x216>
 800bbe4:	2304      	movs	r3, #4
 800bbe6:	77fb      	strb	r3, [r7, #31]
 800bbe8:	e007      	b.n	800bbfa <UART_SetConfig+0x216>
 800bbea:	2308      	movs	r3, #8
 800bbec:	77fb      	strb	r3, [r7, #31]
 800bbee:	e004      	b.n	800bbfa <UART_SetConfig+0x216>
 800bbf0:	2310      	movs	r3, #16
 800bbf2:	77fb      	strb	r3, [r7, #31]
 800bbf4:	e001      	b.n	800bbfa <UART_SetConfig+0x216>
 800bbf6:	2310      	movs	r3, #16
 800bbf8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc02:	d15b      	bne.n	800bcbc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800bc04:	7ffb      	ldrb	r3, [r7, #31]
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d827      	bhi.n	800bc5a <UART_SetConfig+0x276>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <UART_SetConfig+0x22c>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc35 	.word	0x0800bc35
 800bc14:	0800bc3d 	.word	0x0800bc3d
 800bc18:	0800bc45 	.word	0x0800bc45
 800bc1c:	0800bc5b 	.word	0x0800bc5b
 800bc20:	0800bc4b 	.word	0x0800bc4b
 800bc24:	0800bc5b 	.word	0x0800bc5b
 800bc28:	0800bc5b 	.word	0x0800bc5b
 800bc2c:	0800bc5b 	.word	0x0800bc5b
 800bc30:	0800bc53 	.word	0x0800bc53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc34:	f7fe fb64 	bl	800a300 <HAL_RCC_GetPCLK1Freq>
 800bc38:	61b8      	str	r0, [r7, #24]
        break;
 800bc3a:	e013      	b.n	800bc64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc3c:	f7fe fb82 	bl	800a344 <HAL_RCC_GetPCLK2Freq>
 800bc40:	61b8      	str	r0, [r7, #24]
        break;
 800bc42:	e00f      	b.n	800bc64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc44:	4b33      	ldr	r3, [pc, #204]	; (800bd14 <UART_SetConfig+0x330>)
 800bc46:	61bb      	str	r3, [r7, #24]
        break;
 800bc48:	e00c      	b.n	800bc64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc4a:	f7fe fae1 	bl	800a210 <HAL_RCC_GetSysClockFreq>
 800bc4e:	61b8      	str	r0, [r7, #24]
        break;
 800bc50:	e008      	b.n	800bc64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc56:	61bb      	str	r3, [r7, #24]
        break;
 800bc58:	e004      	b.n	800bc64 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	77bb      	strb	r3, [r7, #30]
        break;
 800bc62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 8082 	beq.w	800bd70 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	005a      	lsls	r2, r3, #1
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	085b      	lsrs	r3, r3, #1
 800bc76:	441a      	add	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	2b0f      	cmp	r3, #15
 800bc86:	d916      	bls.n	800bcb6 <UART_SetConfig+0x2d2>
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc8e:	d212      	bcs.n	800bcb6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	f023 030f 	bic.w	r3, r3, #15
 800bc98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	085b      	lsrs	r3, r3, #1
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	f003 0307 	and.w	r3, r3, #7
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	89fb      	ldrh	r3, [r7, #14]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	89fa      	ldrh	r2, [r7, #14]
 800bcb2:	60da      	str	r2, [r3, #12]
 800bcb4:	e05c      	b.n	800bd70 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	77bb      	strb	r3, [r7, #30]
 800bcba:	e059      	b.n	800bd70 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bcbc:	7ffb      	ldrb	r3, [r7, #31]
 800bcbe:	2b08      	cmp	r3, #8
 800bcc0:	d835      	bhi.n	800bd2e <UART_SetConfig+0x34a>
 800bcc2:	a201      	add	r2, pc, #4	; (adr r2, 800bcc8 <UART_SetConfig+0x2e4>)
 800bcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc8:	0800bced 	.word	0x0800bced
 800bccc:	0800bcf5 	.word	0x0800bcf5
 800bcd0:	0800bd19 	.word	0x0800bd19
 800bcd4:	0800bd2f 	.word	0x0800bd2f
 800bcd8:	0800bd1f 	.word	0x0800bd1f
 800bcdc:	0800bd2f 	.word	0x0800bd2f
 800bce0:	0800bd2f 	.word	0x0800bd2f
 800bce4:	0800bd2f 	.word	0x0800bd2f
 800bce8:	0800bd27 	.word	0x0800bd27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcec:	f7fe fb08 	bl	800a300 <HAL_RCC_GetPCLK1Freq>
 800bcf0:	61b8      	str	r0, [r7, #24]
        break;
 800bcf2:	e021      	b.n	800bd38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcf4:	f7fe fb26 	bl	800a344 <HAL_RCC_GetPCLK2Freq>
 800bcf8:	61b8      	str	r0, [r7, #24]
        break;
 800bcfa:	e01d      	b.n	800bd38 <UART_SetConfig+0x354>
 800bcfc:	40013800 	.word	0x40013800
 800bd00:	40021000 	.word	0x40021000
 800bd04:	40004400 	.word	0x40004400
 800bd08:	40004800 	.word	0x40004800
 800bd0c:	40004c00 	.word	0x40004c00
 800bd10:	40005000 	.word	0x40005000
 800bd14:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd18:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <UART_SetConfig+0x3a4>)
 800bd1a:	61bb      	str	r3, [r7, #24]
        break;
 800bd1c:	e00c      	b.n	800bd38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd1e:	f7fe fa77 	bl	800a210 <HAL_RCC_GetSysClockFreq>
 800bd22:	61b8      	str	r0, [r7, #24]
        break;
 800bd24:	e008      	b.n	800bd38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd2a:	61bb      	str	r3, [r7, #24]
        break;
 800bd2c:	e004      	b.n	800bd38 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	77bb      	strb	r3, [r7, #30]
        break;
 800bd36:	bf00      	nop
    }

    if (pclk != 0U)
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d018      	beq.n	800bd70 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	085a      	lsrs	r2, r3, #1
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	441a      	add	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	2b0f      	cmp	r3, #15
 800bd56:	d909      	bls.n	800bd6c <UART_SetConfig+0x388>
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd5e:	d205      	bcs.n	800bd6c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60da      	str	r2, [r3, #12]
 800bd6a:	e001      	b.n	800bd70 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bd7c:	7fbb      	ldrb	r3, [r7, #30]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3720      	adds	r7, #32
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	007a1200 	.word	0x007a1200

0800bd8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00a      	beq.n	800bdb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	f003 0302 	and.w	r3, r3, #2
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	f003 0304 	and.w	r3, r3, #4
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	f003 0308 	and.w	r3, r3, #8
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00a      	beq.n	800be1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	f003 0310 	and.w	r3, r3, #16
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be42:	f003 0320 	and.w	r3, r3, #32
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d01a      	beq.n	800bea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be8a:	d10a      	bne.n	800bea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	605a      	str	r2, [r3, #4]
  }
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b098      	sub	sp, #96	; 0x60
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bee0:	f7f9 ffd2 	bl	8005e88 <HAL_GetTick>
 800bee4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0308 	and.w	r3, r3, #8
 800bef0:	2b08      	cmp	r3, #8
 800bef2:	d12e      	bne.n	800bf52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800befc:	2200      	movs	r2, #0
 800befe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f88c 	bl	800c020 <UART_WaitOnFlagUntilTimeout>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d021      	beq.n	800bf52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf22:	653b      	str	r3, [r7, #80]	; 0x50
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf2c:	647b      	str	r3, [r7, #68]	; 0x44
 800bf2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e6      	bne.n	800bf0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2220      	movs	r2, #32
 800bf44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e062      	b.n	800c018 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 0304 	and.w	r3, r3, #4
 800bf5c:	2b04      	cmp	r3, #4
 800bf5e:	d149      	bne.n	800bff4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f856 	bl	800c020 <UART_WaitOnFlagUntilTimeout>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d03c      	beq.n	800bff4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	e853 3f00 	ldrex	r3, [r3]
 800bf86:	623b      	str	r3, [r7, #32]
   return(result);
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf98:	633b      	str	r3, [r7, #48]	; 0x30
 800bf9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e6      	bne.n	800bf7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f023 0301 	bic.w	r3, r3, #1
 800bfc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3308      	adds	r3, #8
 800bfca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfcc:	61fa      	str	r2, [r7, #28]
 800bfce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	69b9      	ldr	r1, [r7, #24]
 800bfd2:	69fa      	ldr	r2, [r7, #28]
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	617b      	str	r3, [r7, #20]
   return(result);
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e5      	bne.n	800bfac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e011      	b.n	800c018 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2220      	movs	r2, #32
 800bff8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2220      	movs	r2, #32
 800bffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3758      	adds	r7, #88	; 0x58
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	4613      	mov	r3, r2
 800c02e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c030:	e049      	b.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c038:	d045      	beq.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c03a:	f7f9 ff25 	bl	8005e88 <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	429a      	cmp	r2, r3
 800c048:	d302      	bcc.n	800c050 <UART_WaitOnFlagUntilTimeout+0x30>
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d101      	bne.n	800c054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e048      	b.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 0304 	and.w	r3, r3, #4
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d031      	beq.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	f003 0308 	and.w	r3, r3, #8
 800c06c:	2b08      	cmp	r3, #8
 800c06e:	d110      	bne.n	800c092 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2208      	movs	r2, #8
 800c076:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f000 f9b3 	bl	800c3e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2208      	movs	r2, #8
 800c082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e029      	b.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	69db      	ldr	r3, [r3, #28]
 800c098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c09c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0a0:	d111      	bne.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 f999 	bl	800c3e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e00f      	b.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	69da      	ldr	r2, [r3, #28]
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	bf0c      	ite	eq
 800c0d6:	2301      	moveq	r3, #1
 800c0d8:	2300      	movne	r3, #0
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	461a      	mov	r2, r3
 800c0de:	79fb      	ldrb	r3, [r7, #7]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d0a6      	beq.n	800c032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b097      	sub	sp, #92	; 0x5c
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	88fa      	ldrh	r2, [r7, #6]
 800c108:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	88fa      	ldrh	r2, [r7, #6]
 800c110:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c122:	d10e      	bne.n	800c142 <UART_Start_Receive_IT+0x52>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <UART_Start_Receive_IT+0x48>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c136:	e01a      	b.n	800c16e <UART_Start_Receive_IT+0x7e>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	22ff      	movs	r2, #255	; 0xff
 800c13c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c140:	e015      	b.n	800c16e <UART_Start_Receive_IT+0x7e>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10d      	bne.n	800c166 <UART_Start_Receive_IT+0x76>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d104      	bne.n	800c15c <UART_Start_Receive_IT+0x6c>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	22ff      	movs	r2, #255	; 0xff
 800c156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c15a:	e008      	b.n	800c16e <UART_Start_Receive_IT+0x7e>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	227f      	movs	r2, #127	; 0x7f
 800c160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c164:	e003      	b.n	800c16e <UART_Start_Receive_IT+0x7e>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2222      	movs	r2, #34	; 0x22
 800c17a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3308      	adds	r3, #8
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	f043 0301 	orr.w	r3, r3, #1
 800c194:	657b      	str	r3, [r7, #84]	; 0x54
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3308      	adds	r3, #8
 800c19c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c19e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c1a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1e5      	bne.n	800c17e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ba:	d107      	bne.n	800c1cc <UART_Start_Receive_IT+0xdc>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d103      	bne.n	800c1cc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4a22      	ldr	r2, [pc, #136]	; (800c250 <UART_Start_Receive_IT+0x160>)
 800c1c8:	669a      	str	r2, [r3, #104]	; 0x68
 800c1ca:	e002      	b.n	800c1d2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4a21      	ldr	r2, [pc, #132]	; (800c254 <UART_Start_Receive_IT+0x164>)
 800c1d0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d019      	beq.n	800c20e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e2:	e853 3f00 	ldrex	r3, [r3]
 800c1e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c200:	e841 2300 	strex	r3, r2, [r1]
 800c204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e6      	bne.n	800c1da <UART_Start_Receive_IT+0xea>
 800c20c:	e018      	b.n	800c240 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	e853 3f00 	ldrex	r3, [r3]
 800c21a:	613b      	str	r3, [r7, #16]
   return(result);
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	f043 0320 	orr.w	r3, r3, #32
 800c222:	653b      	str	r3, [r7, #80]	; 0x50
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c22c:	623b      	str	r3, [r7, #32]
 800c22e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	69f9      	ldr	r1, [r7, #28]
 800c232:	6a3a      	ldr	r2, [r7, #32]
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	61bb      	str	r3, [r7, #24]
   return(result);
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e6      	bne.n	800c20e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	375c      	adds	r7, #92	; 0x5c
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	0800cb53 	.word	0x0800cb53
 800c254:	0800c9ab 	.word	0x0800c9ab

0800c258 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b096      	sub	sp, #88	; 0x58
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	88fa      	ldrh	r2, [r7, #6]
 800c270:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2222      	movs	r2, #34	; 0x22
 800c280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d028      	beq.n	800c2de <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c290:	4a3e      	ldr	r2, [pc, #248]	; (800c38c <UART_Start_Receive_DMA+0x134>)
 800c292:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c298:	4a3d      	ldr	r2, [pc, #244]	; (800c390 <UART_Start_Receive_DMA+0x138>)
 800c29a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2a0:	4a3c      	ldr	r2, [pc, #240]	; (800c394 <UART_Start_Receive_DMA+0x13c>)
 800c2a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	3324      	adds	r3, #36	; 0x24
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2bc:	461a      	mov	r2, r3
 800c2be:	88fb      	ldrh	r3, [r7, #6]
 800c2c0:	f7f9 ff3b 	bl	800613a <HAL_DMA_Start_IT>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2210      	movs	r2, #16
 800c2ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2220      	movs	r2, #32
 800c2d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e051      	b.n	800c382 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d018      	beq.n	800c318 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ee:	e853 3f00 	ldrex	r3, [r3]
 800c2f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2fa:	657b      	str	r3, [r7, #84]	; 0x54
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c304:	64bb      	str	r3, [r7, #72]	; 0x48
 800c306:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c30a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c30c:	e841 2300 	strex	r3, r2, [r1]
 800c310:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e6      	bne.n	800c2e6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	f043 0301 	orr.w	r3, r3, #1
 800c32e:	653b      	str	r3, [r7, #80]	; 0x50
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	3308      	adds	r3, #8
 800c336:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c338:	637a      	str	r2, [r7, #52]	; 0x34
 800c33a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c33e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c340:	e841 2300 	strex	r3, r2, [r1]
 800c344:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e5      	bne.n	800c318 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3308      	adds	r3, #8
 800c352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	e853 3f00 	ldrex	r3, [r3]
 800c35a:	613b      	str	r3, [r7, #16]
   return(result);
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3308      	adds	r3, #8
 800c36a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c36c:	623a      	str	r2, [r7, #32]
 800c36e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	69f9      	ldr	r1, [r7, #28]
 800c372:	6a3a      	ldr	r2, [r7, #32]
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	61bb      	str	r3, [r7, #24]
   return(result);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e5      	bne.n	800c34c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3758      	adds	r7, #88	; 0x58
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	0800c55d 	.word	0x0800c55d
 800c390:	0800c683 	.word	0x0800c683
 800c394:	0800c6c1 	.word	0x0800c6c1

0800c398 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c398:	b480      	push	{r7}
 800c39a:	b089      	sub	sp, #36	; 0x24
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	e853 3f00 	ldrex	r3, [r3]
 800c3ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c3b4:	61fb      	str	r3, [r7, #28]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	61bb      	str	r3, [r7, #24]
 800c3c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c2:	6979      	ldr	r1, [r7, #20]
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	e841 2300 	strex	r3, r2, [r1]
 800c3ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e6      	bne.n	800c3a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2220      	movs	r2, #32
 800c3d6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c3d8:	bf00      	nop
 800c3da:	3724      	adds	r7, #36	; 0x24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b095      	sub	sp, #84	; 0x54
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c400:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c40a:	643b      	str	r3, [r7, #64]	; 0x40
 800c40c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c412:	e841 2300 	strex	r3, r2, [r1]
 800c416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1e6      	bne.n	800c3ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	f023 0301 	bic.w	r3, r3, #1
 800c434:	64bb      	str	r3, [r7, #72]	; 0x48
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	3308      	adds	r3, #8
 800c43c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c43e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e5      	bne.n	800c41e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c456:	2b01      	cmp	r3, #1
 800c458:	d118      	bne.n	800c48c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	60bb      	str	r3, [r7, #8]
   return(result);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	f023 0310 	bic.w	r3, r3, #16
 800c46e:	647b      	str	r3, [r7, #68]	; 0x44
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c478:	61bb      	str	r3, [r7, #24]
 800c47a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	6979      	ldr	r1, [r7, #20]
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	e841 2300 	strex	r3, r2, [r1]
 800c484:	613b      	str	r3, [r7, #16]
   return(result);
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1e6      	bne.n	800c45a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2220      	movs	r2, #32
 800c490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c4a0:	bf00      	nop
 800c4a2:	3754      	adds	r7, #84	; 0x54
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b090      	sub	sp, #64	; 0x40
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	2b20      	cmp	r3, #32
 800c4c0:	d037      	beq.n	800c532 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800c4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	e853 3f00 	ldrex	r3, [r3]
 800c4d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ea:	633a      	str	r2, [r7, #48]	; 0x30
 800c4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4f2:	e841 2300 	strex	r3, r2, [r1]
 800c4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1e5      	bne.n	800c4ca <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	e853 3f00 	ldrex	r3, [r3]
 800c50a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c512:	637b      	str	r3, [r7, #52]	; 0x34
 800c514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c51c:	61fb      	str	r3, [r7, #28]
 800c51e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c520:	69b9      	ldr	r1, [r7, #24]
 800c522:	69fa      	ldr	r2, [r7, #28]
 800c524:	e841 2300 	strex	r3, r2, [r1]
 800c528:	617b      	str	r3, [r7, #20]
   return(result);
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e6      	bne.n	800c4fe <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c530:	e002      	b.n	800c538 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800c532:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c534:	f7f5 fdca 	bl	80020cc <HAL_UART_TxCpltCallback>
}
 800c538:	bf00      	nop
 800c53a:	3740      	adds	r7, #64	; 0x40
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7ff fa0a 	bl	800b968 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c554:	bf00      	nop
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b09c      	sub	sp, #112	; 0x70
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c568:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	2b20      	cmp	r3, #32
 800c570:	d071      	beq.n	800c656 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c574:	2200      	movs	r2, #0
 800c576:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c58e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	461a      	mov	r2, r3
 800c596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c598:	65bb      	str	r3, [r7, #88]	; 0x58
 800c59a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c59e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5a0:	e841 2300 	strex	r3, r2, [r1]
 800c5a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e6      	bne.n	800c57a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	e853 3f00 	ldrex	r3, [r3]
 800c5ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5be:	f023 0301 	bic.w	r3, r3, #1
 800c5c2:	667b      	str	r3, [r7, #100]	; 0x64
 800c5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5cc:	647a      	str	r2, [r7, #68]	; 0x44
 800c5ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5d4:	e841 2300 	strex	r3, r2, [r1]
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1e5      	bne.n	800c5ac <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	e853 3f00 	ldrex	r3, [r3]
 800c5ee:	623b      	str	r3, [r7, #32]
   return(result);
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5f6:	663b      	str	r3, [r7, #96]	; 0x60
 800c5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c600:	633a      	str	r2, [r7, #48]	; 0x30
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c608:	e841 2300 	strex	r3, r2, [r1]
 800c60c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e5      	bne.n	800c5e0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c616:	2220      	movs	r2, #32
 800c618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c61c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c620:	2b01      	cmp	r3, #1
 800c622:	d118      	bne.n	800c656 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	60fb      	str	r3, [r7, #12]
   return(result);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f023 0310 	bic.w	r3, r3, #16
 800c638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	69b9      	ldr	r1, [r7, #24]
 800c648:	69fa      	ldr	r2, [r7, #28]
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	617b      	str	r3, [r7, #20]
   return(result);
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e6      	bne.n	800c624 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c658:	2200      	movs	r2, #0
 800c65a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c65e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c660:	2b01      	cmp	r3, #1
 800c662:	d107      	bne.n	800c674 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c666:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c66a:	4619      	mov	r1, r3
 800c66c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c66e:	f7ff f9ad 	bl	800b9cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c672:	e002      	b.n	800c67a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c674:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c676:	f7f5 fd61 	bl	800213c <HAL_UART_RxCpltCallback>
}
 800c67a:	bf00      	nop
 800c67c:	3770      	adds	r7, #112	; 0x70
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b084      	sub	sp, #16
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2201      	movs	r2, #1
 800c694:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d109      	bne.n	800c6b2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6a4:	085b      	lsrs	r3, r3, #1
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff f98e 	bl	800b9cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c6b0:	e002      	b.n	800c6b8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7ff f962 	bl	800b97c <HAL_UART_RxHalfCpltCallback>
}
 800c6b8:	bf00      	nop
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e6:	2b80      	cmp	r3, #128	; 0x80
 800c6e8:	d109      	bne.n	800c6fe <UART_DMAError+0x3e>
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	2b21      	cmp	r3, #33	; 0x21
 800c6ee:	d106      	bne.n	800c6fe <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c6f8:	6978      	ldr	r0, [r7, #20]
 800c6fa:	f7ff fe4d 	bl	800c398 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c708:	2b40      	cmp	r3, #64	; 0x40
 800c70a:	d109      	bne.n	800c720 <UART_DMAError+0x60>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2b22      	cmp	r3, #34	; 0x22
 800c710:	d106      	bne.n	800c720 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	2200      	movs	r2, #0
 800c716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c71a:	6978      	ldr	r0, [r7, #20]
 800c71c:	f7ff fe62 	bl	800c3e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c726:	f043 0210 	orr.w	r2, r3, #16
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c730:	6978      	ldr	r0, [r7, #20]
 800c732:	f7ff f92d 	bl	800b990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c736:	bf00      	nop
 800c738:	3718      	adds	r7, #24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b084      	sub	sp, #16
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f7ff f917 	bl	800b990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c762:	bf00      	nop
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c776:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2220      	movs	r2, #32
 800c784:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff f90c 	bl	800b9a4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c78c:	bf00      	nop
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	220f      	movs	r2, #15
 800c7b0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	699a      	ldr	r2, [r3, #24]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f042 0208 	orr.w	r2, r2, #8
 800c7c0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f7ff f8f1 	bl	800b9b8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7d6:	bf00      	nop
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c7de:	b480      	push	{r7}
 800c7e0:	b08f      	sub	sp, #60	; 0x3c
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ea:	2b21      	cmp	r3, #33	; 0x21
 800c7ec:	d14d      	bne.n	800c88a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d132      	bne.n	800c860 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	e853 3f00 	ldrex	r3, [r3]
 800c806:	61fb      	str	r3, [r7, #28]
   return(result);
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c80e:	637b      	str	r3, [r7, #52]	; 0x34
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	461a      	mov	r2, r3
 800c816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c81a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c81e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c820:	e841 2300 	strex	r3, r2, [r1]
 800c824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1e6      	bne.n	800c7fa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	e853 3f00 	ldrex	r3, [r3]
 800c838:	60bb      	str	r3, [r7, #8]
   return(result);
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c840:	633b      	str	r3, [r7, #48]	; 0x30
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	461a      	mov	r2, r3
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	61bb      	str	r3, [r7, #24]
 800c84c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84e:	6979      	ldr	r1, [r7, #20]
 800c850:	69ba      	ldr	r2, [r7, #24]
 800c852:	e841 2300 	strex	r3, r2, [r1]
 800c856:	613b      	str	r3, [r7, #16]
   return(result);
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e6      	bne.n	800c82c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c85e:	e014      	b.n	800c88a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c864:	781a      	ldrb	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	b292      	uxth	r2, r2
 800c86c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c87e:	b29b      	uxth	r3, r3
 800c880:	3b01      	subs	r3, #1
 800c882:	b29a      	uxth	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c88a:	bf00      	nop
 800c88c:	373c      	adds	r7, #60	; 0x3c
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c896:	b480      	push	{r7}
 800c898:	b091      	sub	sp, #68	; 0x44
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a2:	2b21      	cmp	r3, #33	; 0x21
 800c8a4:	d151      	bne.n	800c94a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d132      	bne.n	800c918 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	e853 3f00 	ldrex	r3, [r3]
 800c8be:	623b      	str	r3, [r7, #32]
   return(result);
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	633b      	str	r3, [r7, #48]	; 0x30
 800c8d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8d8:	e841 2300 	strex	r3, r2, [r1]
 800c8dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1e6      	bne.n	800c8b2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	e853 3f00 	ldrex	r3, [r3]
 800c8f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c902:	61fb      	str	r3, [r7, #28]
 800c904:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c906:	69b9      	ldr	r1, [r7, #24]
 800c908:	69fa      	ldr	r2, [r7, #28]
 800c90a:	e841 2300 	strex	r3, r2, [r1]
 800c90e:	617b      	str	r3, [r7, #20]
   return(result);
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1e6      	bne.n	800c8e4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c916:	e018      	b.n	800c94a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c920:	881a      	ldrh	r2, [r3, #0]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c92a:	b292      	uxth	r2, r2
 800c92c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c932:	1c9a      	adds	r2, r3, #2
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c93e:	b29b      	uxth	r3, r3
 800c940:	3b01      	subs	r3, #1
 800c942:	b29a      	uxth	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c94a:	bf00      	nop
 800c94c:	3744      	adds	r7, #68	; 0x44
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b088      	sub	sp, #32
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	e853 3f00 	ldrex	r3, [r3]
 800c96a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c972:	61fb      	str	r3, [r7, #28]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	61bb      	str	r3, [r7, #24]
 800c97e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c980:	6979      	ldr	r1, [r7, #20]
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	e841 2300 	strex	r3, r2, [r1]
 800c988:	613b      	str	r3, [r7, #16]
   return(result);
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1e6      	bne.n	800c95e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2220      	movs	r2, #32
 800c994:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7f5 fb95 	bl	80020cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9a2:	bf00      	nop
 800c9a4:	3720      	adds	r7, #32
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b09c      	sub	sp, #112	; 0x70
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9c2:	2b22      	cmp	r3, #34	; 0x22
 800c9c4:	f040 80b9 	bne.w	800cb3a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c9ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c9d6:	b2d9      	uxtb	r1, r3
 800c9d8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9e2:	400a      	ands	r2, r1
 800c9e4:	b2d2      	uxtb	r2, r2
 800c9e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f040 809c 	bne.w	800cb4a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca1a:	e853 3f00 	ldrex	r3, [r3]
 800ca1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca30:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca38:	e841 2300 	strex	r3, r2, [r1]
 800ca3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1e6      	bne.n	800ca12 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3308      	adds	r3, #8
 800ca4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	e853 3f00 	ldrex	r3, [r3]
 800ca52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca56:	f023 0301 	bic.w	r3, r3, #1
 800ca5a:	667b      	str	r3, [r7, #100]	; 0x64
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3308      	adds	r3, #8
 800ca62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ca64:	647a      	str	r2, [r7, #68]	; 0x44
 800ca66:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca6c:	e841 2300 	strex	r3, r2, [r1]
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e5      	bne.n	800ca44 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2220      	movs	r2, #32
 800ca7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d018      	beq.n	800cacc <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	e853 3f00 	ldrex	r3, [r3]
 800caa6:	623b      	str	r3, [r7, #32]
   return(result);
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800caae:	663b      	str	r3, [r7, #96]	; 0x60
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	461a      	mov	r2, r3
 800cab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cab8:	633b      	str	r3, [r7, #48]	; 0x30
 800caba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cac0:	e841 2300 	strex	r3, r2, [r1]
 800cac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e6      	bne.n	800ca9a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d12e      	bne.n	800cb32 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	e853 3f00 	ldrex	r3, [r3]
 800cae6:	60fb      	str	r3, [r7, #12]
   return(result);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f023 0310 	bic.w	r3, r3, #16
 800caee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	461a      	mov	r2, r3
 800caf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caf8:	61fb      	str	r3, [r7, #28]
 800cafa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafc:	69b9      	ldr	r1, [r7, #24]
 800cafe:	69fa      	ldr	r2, [r7, #28]
 800cb00:	e841 2300 	strex	r3, r2, [r1]
 800cb04:	617b      	str	r3, [r7, #20]
   return(result);
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1e6      	bne.n	800cada <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	f003 0310 	and.w	r3, r3, #16
 800cb16:	2b10      	cmp	r3, #16
 800cb18:	d103      	bne.n	800cb22 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2210      	movs	r2, #16
 800cb20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7fe ff4e 	bl	800b9cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb30:	e00b      	b.n	800cb4a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7f5 fb02 	bl	800213c <HAL_UART_RxCpltCallback>
}
 800cb38:	e007      	b.n	800cb4a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	699a      	ldr	r2, [r3, #24]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f042 0208 	orr.w	r2, r2, #8
 800cb48:	619a      	str	r2, [r3, #24]
}
 800cb4a:	bf00      	nop
 800cb4c:	3770      	adds	r7, #112	; 0x70
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b09c      	sub	sp, #112	; 0x70
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb6a:	2b22      	cmp	r3, #34	; 0x22
 800cb6c:	f040 80b9 	bne.w	800cce2 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7e:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cb80:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800cb84:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cb88:	4013      	ands	r3, r2
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb8e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb94:	1c9a      	adds	r2, r3, #2
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	3b01      	subs	r3, #1
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f040 809c 	bne.w	800ccf2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbc2:	e853 3f00 	ldrex	r3, [r3]
 800cbc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbce:	667b      	str	r3, [r7, #100]	; 0x64
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbd8:	657b      	str	r3, [r7, #84]	; 0x54
 800cbda:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cbe0:	e841 2300 	strex	r3, r2, [r1]
 800cbe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cbe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1e6      	bne.n	800cbba <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf6:	e853 3f00 	ldrex	r3, [r3]
 800cbfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	f023 0301 	bic.w	r3, r3, #1
 800cc02:	663b      	str	r3, [r7, #96]	; 0x60
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3308      	adds	r3, #8
 800cc0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc0c:	643a      	str	r2, [r7, #64]	; 0x40
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc14:	e841 2300 	strex	r3, r2, [r1]
 800cc18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e5      	bne.n	800cbec <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2220      	movs	r2, #32
 800cc24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d018      	beq.n	800cc74 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc48:	6a3b      	ldr	r3, [r7, #32]
 800cc4a:	e853 3f00 	ldrex	r3, [r3]
 800cc4e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc62:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc68:	e841 2300 	strex	r3, r2, [r1]
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e6      	bne.n	800cc42 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d12e      	bne.n	800ccda <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	e853 3f00 	ldrex	r3, [r3]
 800cc8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	f023 0310 	bic.w	r3, r3, #16
 800cc96:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cca0:	61bb      	str	r3, [r7, #24]
 800cca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca4:	6979      	ldr	r1, [r7, #20]
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	e841 2300 	strex	r3, r2, [r1]
 800ccac:	613b      	str	r3, [r7, #16]
   return(result);
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e6      	bne.n	800cc82 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	f003 0310 	and.w	r3, r3, #16
 800ccbe:	2b10      	cmp	r3, #16
 800ccc0:	d103      	bne.n	800ccca <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2210      	movs	r2, #16
 800ccc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7fe fe7a 	bl	800b9cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ccd8:	e00b      	b.n	800ccf2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7f5 fa2e 	bl	800213c <HAL_UART_RxCpltCallback>
}
 800cce0:	e007      	b.n	800ccf2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	699a      	ldr	r2, [r3, #24]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f042 0208 	orr.w	r2, r2, #8
 800ccf0:	619a      	str	r2, [r3, #24]
}
 800ccf2:	bf00      	nop
 800ccf4:	3770      	adds	r7, #112	; 0x70
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b083      	sub	sp, #12
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b085      	sub	sp, #20
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	4603      	mov	r3, r0
 800cd16:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cd1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd20:	2b84      	cmp	r3, #132	; 0x84
 800cd22:	d005      	beq.n	800cd30 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cd24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	3303      	adds	r3, #3
 800cd2e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cd30:	68fb      	ldr	r3, [r7, #12]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3714      	adds	r7, #20
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd44:	f3ef 8305 	mrs	r3, IPSR
 800cd48:	607b      	str	r3, [r7, #4]
  return(result);
 800cd4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	bf14      	ite	ne
 800cd50:	2301      	movne	r3, #1
 800cd52:	2300      	moveq	r3, #0
 800cd54:	b2db      	uxtb	r3, r3
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cd66:	f001 fa6f 	bl	800e248 <vTaskStartScheduler>
  
  return osOK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cd74:	f7ff ffe3 	bl	800cd3e <inHandlerMode>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d003      	beq.n	800cd86 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cd7e:	f001 fb8d 	bl	800e49c <xTaskGetTickCountFromISR>
 800cd82:	4603      	mov	r3, r0
 800cd84:	e002      	b.n	800cd8c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cd86:	f001 fb79 	bl	800e47c <xTaskGetTickCount>
 800cd8a:	4603      	mov	r3, r0
  }
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd92:	b089      	sub	sp, #36	; 0x24
 800cd94:	af04      	add	r7, sp, #16
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d020      	beq.n	800cde4 <osThreadCreate+0x54>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d01c      	beq.n	800cde4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685c      	ldr	r4, [r3, #4]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691e      	ldr	r6, [r3, #16]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7ff ffa6 	bl	800cd0e <makeFreeRtosPriority>
 800cdc2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdcc:	9202      	str	r2, [sp, #8]
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	9100      	str	r1, [sp, #0]
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f000 ffe1 	bl	800dda0 <xTaskCreateStatic>
 800cdde:	4603      	mov	r3, r0
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	e01c      	b.n	800ce1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685c      	ldr	r4, [r3, #4]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdf0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff ff88 	bl	800cd0e <makeFreeRtosPriority>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	f107 030c 	add.w	r3, r7, #12
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	9200      	str	r2, [sp, #0]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f001 f822 	bl	800de58 <xTaskCreate>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d001      	beq.n	800ce1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e000      	b.n	800ce20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d001      	beq.n	800ce3e <osDelay+0x16>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	e000      	b.n	800ce40 <osDelay+0x18>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4618      	mov	r0, r3
 800ce42:	f001 f9cd 	bl	800e1e0 <vTaskDelay>
  
  return osOK;
 800ce46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af02      	add	r7, sp, #8
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d013      	beq.n	800ce8e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800ce66:	7afb      	ldrb	r3, [r7, #11]
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d101      	bne.n	800ce70 <osTimerCreate+0x20>
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	e000      	b.n	800ce72 <osTimerCreate+0x22>
 800ce70:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800ce7a:	9201      	str	r2, [sp, #4]
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	460a      	mov	r2, r1
 800ce82:	2101      	movs	r1, #1
 800ce84:	480b      	ldr	r0, [pc, #44]	; (800ceb4 <osTimerCreate+0x64>)
 800ce86:	f002 f8fe 	bl	800f086 <xTimerCreateStatic>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	e00e      	b.n	800ceac <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800ce8e:	7afb      	ldrb	r3, [r7, #11]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d101      	bne.n	800ce98 <osTimerCreate+0x48>
 800ce94:	2201      	movs	r2, #1
 800ce96:	e000      	b.n	800ce9a <osTimerCreate+0x4a>
 800ce98:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2101      	movs	r1, #1
 800cea4:	4803      	ldr	r0, [pc, #12]	; (800ceb4 <osTimerCreate+0x64>)
 800cea6:	f002 f8cd 	bl	800f044 <xTimerCreate>
 800ceaa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	08010980 	.word	0x08010980

0800ceb8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d007      	beq.n	800ced8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	4619      	mov	r1, r3
 800cece:	2001      	movs	r0, #1
 800ced0:	f000 fa42 	bl	800d358 <xQueueCreateMutexStatic>
 800ced4:	4603      	mov	r3, r0
 800ced6:	e003      	b.n	800cee0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ced8:	2001      	movs	r0, #1
 800ceda:	f000 fa25 	bl	800d328 <xQueueCreateMutex>
 800cede:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <osDelayUntil+0x18>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	e000      	b.n	800cf02 <osDelayUntil+0x1a>
 800cf00:	2301      	movs	r3, #1
 800cf02:	4619      	mov	r1, r3
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 f8ed 	bl	800e0e4 <vTaskDelayUntil>
  
  return osOK;
 800cf0a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f103 0208 	add.w	r2, r3, #8
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f103 0208 	add.w	r2, r3, #8
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f103 0208 	add.w	r2, r3, #8
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf62:	bf00      	nop
 800cf64:	370c      	adds	r7, #12
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b085      	sub	sp, #20
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	689a      	ldr	r2, [r3, #8]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	601a      	str	r2, [r3, #0]
}
 800cfaa:	bf00      	nop
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfb6:	b480      	push	{r7}
 800cfb8:	b085      	sub	sp, #20
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfcc:	d103      	bne.n	800cfd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	60fb      	str	r3, [r7, #12]
 800cfd4:	e00c      	b.n	800cff0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3308      	adds	r3, #8
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	e002      	b.n	800cfe4 <vListInsert+0x2e>
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d2f6      	bcs.n	800cfde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	601a      	str	r2, [r3, #0]
}
 800d01c:	bf00      	nop
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	6892      	ldr	r2, [r2, #8]
 800d03e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6852      	ldr	r2, [r2, #4]
 800d048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	429a      	cmp	r2, r3
 800d052:	d103      	bne.n	800d05c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	689a      	ldr	r2, [r3, #8]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	1e5a      	subs	r2, r3, #1
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10a      	bne.n	800d0a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d0a6:	f002 fc3d 	bl	800f924 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b2:	68f9      	ldr	r1, [r7, #12]
 800d0b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0b6:	fb01 f303 	mul.w	r3, r1, r3
 800d0ba:	441a      	add	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	68f9      	ldr	r1, [r7, #12]
 800d0da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0dc:	fb01 f303 	mul.w	r3, r1, r3
 800d0e0:	441a      	add	r2, r3
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	22ff      	movs	r2, #255	; 0xff
 800d0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	22ff      	movs	r2, #255	; 0xff
 800d0f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d114      	bne.n	800d126 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d01a      	beq.n	800d13a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	3310      	adds	r3, #16
 800d108:	4618      	mov	r0, r3
 800d10a:	f001 fb49 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d012      	beq.n	800d13a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d114:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <xQueueGenericReset+0xcc>)
 800d116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	e009      	b.n	800d13a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	3310      	adds	r3, #16
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff fef2 	bl	800cf14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	3324      	adds	r3, #36	; 0x24
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff feed 	bl	800cf14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d13a:	f002 fc23 	bl	800f984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d13e:	2301      	movs	r3, #1
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08e      	sub	sp, #56	; 0x38
 800d150:	af02      	add	r7, sp, #8
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10a      	bne.n	800d192 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <xQueueGenericCreateStatic+0x52>
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <xQueueGenericCreateStatic+0x56>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e000      	b.n	800d1a4 <xQueueGenericCreateStatic+0x58>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	623b      	str	r3, [r7, #32]
}
 800d1ba:	bf00      	nop
 800d1bc:	e7fe      	b.n	800d1bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d102      	bne.n	800d1ca <xQueueGenericCreateStatic+0x7e>
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <xQueueGenericCreateStatic+0x82>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <xQueueGenericCreateStatic+0x84>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	61fb      	str	r3, [r7, #28]
}
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d1ea:	2348      	movs	r3, #72	; 0x48
 800d1ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2b48      	cmp	r3, #72	; 0x48
 800d1f2:	d00a      	beq.n	800d20a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	61bb      	str	r3, [r7, #24]
}
 800d206:	bf00      	nop
 800d208:	e7fe      	b.n	800d208 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00d      	beq.n	800d230 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d21c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	4613      	mov	r3, r2
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	68b9      	ldr	r1, [r7, #8]
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f000 f843 	bl	800d2b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d232:	4618      	mov	r0, r3
 800d234:	3730      	adds	r7, #48	; 0x30
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b08a      	sub	sp, #40	; 0x28
 800d23e:	af02      	add	r7, sp, #8
 800d240:	60f8      	str	r0, [r7, #12]
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	4613      	mov	r3, r2
 800d246:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10a      	bne.n	800d264 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	613b      	str	r3, [r7, #16]
}
 800d260:	bf00      	nop
 800d262:	e7fe      	b.n	800d262 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	61fb      	str	r3, [r7, #28]
 800d26e:	e004      	b.n	800d27a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	3348      	adds	r3, #72	; 0x48
 800d27e:	4618      	mov	r0, r3
 800d280:	f002 fc72 	bl	800fb68 <pvPortMalloc>
 800d284:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00f      	beq.n	800d2ac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	3348      	adds	r3, #72	; 0x48
 800d290:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d29a:	79fa      	ldrb	r2, [r7, #7]
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	68b9      	ldr	r1, [r7, #8]
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 f805 	bl	800d2b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d2ac:	69bb      	ldr	r3, [r7, #24]
	}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3720      	adds	r7, #32
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	60f8      	str	r0, [r7, #12]
 800d2be:	60b9      	str	r1, [r7, #8]
 800d2c0:	607a      	str	r2, [r7, #4]
 800d2c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d103      	bne.n	800d2d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	69ba      	ldr	r2, [r7, #24]
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	e002      	b.n	800d2d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d2e4:	2101      	movs	r1, #1
 800d2e6:	69b8      	ldr	r0, [r7, #24]
 800d2e8:	f7ff fec8 	bl	800d07c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d2ec:	bf00      	nop
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00e      	beq.n	800d320 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d314:	2300      	movs	r3, #0
 800d316:	2200      	movs	r2, #0
 800d318:	2100      	movs	r1, #0
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f838 	bl	800d390 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d320:	bf00      	nop
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d332:	2301      	movs	r3, #1
 800d334:	617b      	str	r3, [r7, #20]
 800d336:	2300      	movs	r3, #0
 800d338:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	461a      	mov	r2, r3
 800d33e:	6939      	ldr	r1, [r7, #16]
 800d340:	6978      	ldr	r0, [r7, #20]
 800d342:	f7ff ff7a 	bl	800d23a <xQueueGenericCreate>
 800d346:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff ffd3 	bl	800d2f4 <prvInitialiseMutex>

		return pxNewQueue;
 800d34e:	68fb      	ldr	r3, [r7, #12]
	}
 800d350:	4618      	mov	r0, r3
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	af02      	add	r7, sp, #8
 800d35e:	4603      	mov	r3, r0
 800d360:	6039      	str	r1, [r7, #0]
 800d362:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d364:	2301      	movs	r3, #1
 800d366:	617b      	str	r3, [r7, #20]
 800d368:	2300      	movs	r3, #0
 800d36a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d36c:	79fb      	ldrb	r3, [r7, #7]
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	2200      	movs	r2, #0
 800d374:	6939      	ldr	r1, [r7, #16]
 800d376:	6978      	ldr	r0, [r7, #20]
 800d378:	f7ff fee8 	bl	800d14c <xQueueGenericCreateStatic>
 800d37c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff ffb8 	bl	800d2f4 <prvInitialiseMutex>

		return pxNewQueue;
 800d384:	68fb      	ldr	r3, [r7, #12]
	}
 800d386:	4618      	mov	r0, r3
 800d388:	3718      	adds	r7, #24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
	...

0800d390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b08e      	sub	sp, #56	; 0x38
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
 800d39c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10a      	bne.n	800d3c2 <xQueueGenericSend+0x32>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d3be:	bf00      	nop
 800d3c0:	e7fe      	b.n	800d3c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d103      	bne.n	800d3d0 <xQueueGenericSend+0x40>
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <xQueueGenericSend+0x44>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e000      	b.n	800d3d6 <xQueueGenericSend+0x46>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10a      	bne.n	800d3f0 <xQueueGenericSend+0x60>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3ec:	bf00      	nop
 800d3ee:	e7fe      	b.n	800d3ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d103      	bne.n	800d3fe <xQueueGenericSend+0x6e>
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d101      	bne.n	800d402 <xQueueGenericSend+0x72>
 800d3fe:	2301      	movs	r3, #1
 800d400:	e000      	b.n	800d404 <xQueueGenericSend+0x74>
 800d402:	2300      	movs	r3, #0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10a      	bne.n	800d41e <xQueueGenericSend+0x8e>
	__asm volatile
 800d408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	623b      	str	r3, [r7, #32]
}
 800d41a:	bf00      	nop
 800d41c:	e7fe      	b.n	800d41c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d41e:	f001 fb85 	bl	800eb2c <xTaskGetSchedulerState>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d102      	bne.n	800d42e <xQueueGenericSend+0x9e>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <xQueueGenericSend+0xa2>
 800d42e:	2301      	movs	r3, #1
 800d430:	e000      	b.n	800d434 <xQueueGenericSend+0xa4>
 800d432:	2300      	movs	r3, #0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10a      	bne.n	800d44e <xQueueGenericSend+0xbe>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	61fb      	str	r3, [r7, #28]
}
 800d44a:	bf00      	nop
 800d44c:	e7fe      	b.n	800d44c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d44e:	f002 fa69 	bl	800f924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d302      	bcc.n	800d464 <xQueueGenericSend+0xd4>
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b02      	cmp	r3, #2
 800d462:	d129      	bne.n	800d4b8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d464:	683a      	ldr	r2, [r7, #0]
 800d466:	68b9      	ldr	r1, [r7, #8]
 800d468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d46a:	f000 fb2b 	bl	800dac4 <prvCopyDataToQueue>
 800d46e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d474:	2b00      	cmp	r3, #0
 800d476:	d010      	beq.n	800d49a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47a:	3324      	adds	r3, #36	; 0x24
 800d47c:	4618      	mov	r0, r3
 800d47e:	f001 f98f 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d013      	beq.n	800d4b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d488:	4b3f      	ldr	r3, [pc, #252]	; (800d588 <xQueueGenericSend+0x1f8>)
 800d48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	e00a      	b.n	800d4b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d007      	beq.n	800d4b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d4a0:	4b39      	ldr	r3, [pc, #228]	; (800d588 <xQueueGenericSend+0x1f8>)
 800d4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4a6:	601a      	str	r2, [r3, #0]
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d4b0:	f002 fa68 	bl	800f984 <vPortExitCritical>
				return pdPASS;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e063      	b.n	800d580 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d103      	bne.n	800d4c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4be:	f002 fa61 	bl	800f984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e05c      	b.n	800d580 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d106      	bne.n	800d4da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4cc:	f107 0314 	add.w	r3, r7, #20
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f001 f9c7 	bl	800e864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4da:	f002 fa53 	bl	800f984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4de:	f000 ff23 	bl	800e328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4e2:	f002 fa1f 	bl	800f924 <vPortEnterCritical>
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4ec:	b25b      	sxtb	r3, r3
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d103      	bne.n	800d4fc <xQueueGenericSend+0x16c>
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d502:	b25b      	sxtb	r3, r3
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d508:	d103      	bne.n	800d512 <xQueueGenericSend+0x182>
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	2200      	movs	r2, #0
 800d50e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d512:	f002 fa37 	bl	800f984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d516:	1d3a      	adds	r2, r7, #4
 800d518:	f107 0314 	add.w	r3, r7, #20
 800d51c:	4611      	mov	r1, r2
 800d51e:	4618      	mov	r0, r3
 800d520:	f001 f9b6 	bl	800e890 <xTaskCheckForTimeOut>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d124      	bne.n	800d574 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d52a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d52c:	f000 fbc2 	bl	800dcb4 <prvIsQueueFull>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d018      	beq.n	800d568 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	3310      	adds	r3, #16
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	4611      	mov	r1, r2
 800d53e:	4618      	mov	r0, r3
 800d540:	f001 f8de 	bl	800e700 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d546:	f000 fb4d 	bl	800dbe4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d54a:	f000 fefb 	bl	800e344 <xTaskResumeAll>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	f47f af7c 	bne.w	800d44e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d556:	4b0c      	ldr	r3, [pc, #48]	; (800d588 <xQueueGenericSend+0x1f8>)
 800d558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	e772      	b.n	800d44e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d56a:	f000 fb3b 	bl	800dbe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d56e:	f000 fee9 	bl	800e344 <xTaskResumeAll>
 800d572:	e76c      	b.n	800d44e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d576:	f000 fb35 	bl	800dbe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d57a:	f000 fee3 	bl	800e344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d57e:	2300      	movs	r3, #0
		}
	}
}
 800d580:	4618      	mov	r0, r3
 800d582:	3738      	adds	r7, #56	; 0x38
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	e000ed04 	.word	0xe000ed04

0800d58c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b08e      	sub	sp, #56	; 0x38
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
 800d598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10a      	bne.n	800d5ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d5b6:	bf00      	nop
 800d5b8:	e7fe      	b.n	800d5b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d103      	bne.n	800d5c8 <xQueueGenericSendFromISR+0x3c>
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d101      	bne.n	800d5cc <xQueueGenericSendFromISR+0x40>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e000      	b.n	800d5ce <xQueueGenericSendFromISR+0x42>
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10a      	bne.n	800d5e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	623b      	str	r3, [r7, #32]
}
 800d5e4:	bf00      	nop
 800d5e6:	e7fe      	b.n	800d5e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d103      	bne.n	800d5f6 <xQueueGenericSendFromISR+0x6a>
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d101      	bne.n	800d5fa <xQueueGenericSendFromISR+0x6e>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e000      	b.n	800d5fc <xQueueGenericSendFromISR+0x70>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d10a      	bne.n	800d616 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	61fb      	str	r3, [r7, #28]
}
 800d612:	bf00      	nop
 800d614:	e7fe      	b.n	800d614 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d616:	f002 fa67 	bl	800fae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d61a:	f3ef 8211 	mrs	r2, BASEPRI
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	61ba      	str	r2, [r7, #24]
 800d630:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d632:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d63e:	429a      	cmp	r2, r3
 800d640:	d302      	bcc.n	800d648 <xQueueGenericSendFromISR+0xbc>
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d12c      	bne.n	800d6a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	68b9      	ldr	r1, [r7, #8]
 800d656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d658:	f000 fa34 	bl	800dac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d65c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d664:	d112      	bne.n	800d68c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d016      	beq.n	800d69c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d670:	3324      	adds	r3, #36	; 0x24
 800d672:	4618      	mov	r0, r3
 800d674:	f001 f894 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00e      	beq.n	800d69c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2201      	movs	r2, #1
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	e007      	b.n	800d69c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d68c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d690:	3301      	adds	r3, #1
 800d692:	b2db      	uxtb	r3, r3
 800d694:	b25a      	sxtb	r2, r3
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d69c:	2301      	movs	r3, #1
 800d69e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d6a0:	e001      	b.n	800d6a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d6b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3738      	adds	r7, #56	; 0x38
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08c      	sub	sp, #48	; 0x30
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10a      	bne.n	800d6ec <xQueueReceive+0x30>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	623b      	str	r3, [r7, #32]
}
 800d6e8:	bf00      	nop
 800d6ea:	e7fe      	b.n	800d6ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d103      	bne.n	800d6fa <xQueueReceive+0x3e>
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <xQueueReceive+0x42>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e000      	b.n	800d700 <xQueueReceive+0x44>
 800d6fe:	2300      	movs	r3, #0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10a      	bne.n	800d71a <xQueueReceive+0x5e>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	61fb      	str	r3, [r7, #28]
}
 800d716:	bf00      	nop
 800d718:	e7fe      	b.n	800d718 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d71a:	f001 fa07 	bl	800eb2c <xTaskGetSchedulerState>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d102      	bne.n	800d72a <xQueueReceive+0x6e>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <xQueueReceive+0x72>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <xQueueReceive+0x74>
 800d72e:	2300      	movs	r3, #0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10a      	bne.n	800d74a <xQueueReceive+0x8e>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	61bb      	str	r3, [r7, #24]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d74a:	f002 f8eb 	bl	800f924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d752:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	2b00      	cmp	r3, #0
 800d758:	d01f      	beq.n	800d79a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d75a:	68b9      	ldr	r1, [r7, #8]
 800d75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d75e:	f000 fa1b 	bl	800db98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d764:	1e5a      	subs	r2, r3, #1
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00f      	beq.n	800d792 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	3310      	adds	r3, #16
 800d776:	4618      	mov	r0, r3
 800d778:	f001 f812 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d007      	beq.n	800d792 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d782:	4b3d      	ldr	r3, [pc, #244]	; (800d878 <xQueueReceive+0x1bc>)
 800d784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d792:	f002 f8f7 	bl	800f984 <vPortExitCritical>
				return pdPASS;
 800d796:	2301      	movs	r3, #1
 800d798:	e069      	b.n	800d86e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d103      	bne.n	800d7a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7a0:	f002 f8f0 	bl	800f984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e062      	b.n	800d86e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7ae:	f107 0310 	add.w	r3, r7, #16
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f001 f856 	bl	800e864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7bc:	f002 f8e2 	bl	800f984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7c0:	f000 fdb2 	bl	800e328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7c4:	f002 f8ae 	bl	800f924 <vPortEnterCritical>
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ce:	b25b      	sxtb	r3, r3
 800d7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d4:	d103      	bne.n	800d7de <xQueueReceive+0x122>
 800d7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7e4:	b25b      	sxtb	r3, r3
 800d7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ea:	d103      	bne.n	800d7f4 <xQueueReceive+0x138>
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7f4:	f002 f8c6 	bl	800f984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7f8:	1d3a      	adds	r2, r7, #4
 800d7fa:	f107 0310 	add.w	r3, r7, #16
 800d7fe:	4611      	mov	r1, r2
 800d800:	4618      	mov	r0, r3
 800d802:	f001 f845 	bl	800e890 <xTaskCheckForTimeOut>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d123      	bne.n	800d854 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d80e:	f000 fa3b 	bl	800dc88 <prvIsQueueEmpty>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d017      	beq.n	800d848 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	3324      	adds	r3, #36	; 0x24
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	4611      	mov	r1, r2
 800d820:	4618      	mov	r0, r3
 800d822:	f000 ff6d 	bl	800e700 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d828:	f000 f9dc 	bl	800dbe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d82c:	f000 fd8a 	bl	800e344 <xTaskResumeAll>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d189      	bne.n	800d74a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d836:	4b10      	ldr	r3, [pc, #64]	; (800d878 <xQueueReceive+0x1bc>)
 800d838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	e780      	b.n	800d74a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d84a:	f000 f9cb 	bl	800dbe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d84e:	f000 fd79 	bl	800e344 <xTaskResumeAll>
 800d852:	e77a      	b.n	800d74a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d856:	f000 f9c5 	bl	800dbe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d85a:	f000 fd73 	bl	800e344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d85e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d860:	f000 fa12 	bl	800dc88 <prvIsQueueEmpty>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	f43f af6f 	beq.w	800d74a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d86c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3730      	adds	r7, #48	; 0x30
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08e      	sub	sp, #56	; 0x38
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d886:	2300      	movs	r3, #0
 800d888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d88e:	2300      	movs	r3, #0
 800d890:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d894:	2b00      	cmp	r3, #0
 800d896:	d10a      	bne.n	800d8ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89c:	f383 8811 	msr	BASEPRI, r3
 800d8a0:	f3bf 8f6f 	isb	sy
 800d8a4:	f3bf 8f4f 	dsb	sy
 800d8a8:	623b      	str	r3, [r7, #32]
}
 800d8aa:	bf00      	nop
 800d8ac:	e7fe      	b.n	800d8ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00a      	beq.n	800d8cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ba:	f383 8811 	msr	BASEPRI, r3
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	61fb      	str	r3, [r7, #28]
}
 800d8c8:	bf00      	nop
 800d8ca:	e7fe      	b.n	800d8ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8cc:	f001 f92e 	bl	800eb2c <xTaskGetSchedulerState>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d102      	bne.n	800d8dc <xQueueSemaphoreTake+0x60>
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <xQueueSemaphoreTake+0x64>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e000      	b.n	800d8e2 <xQueueSemaphoreTake+0x66>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10a      	bne.n	800d8fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	61bb      	str	r3, [r7, #24]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8fc:	f002 f812 	bl	800f924 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d024      	beq.n	800d956 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	1e5a      	subs	r2, r3, #1
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d104      	bne.n	800d926 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d91c:	f001 fad0 	bl	800eec0 <pvTaskIncrementMutexHeldCount>
 800d920:	4602      	mov	r2, r0
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00f      	beq.n	800d94e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d930:	3310      	adds	r3, #16
 800d932:	4618      	mov	r0, r3
 800d934:	f000 ff34 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d007      	beq.n	800d94e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d93e:	4b54      	ldr	r3, [pc, #336]	; (800da90 <xQueueSemaphoreTake+0x214>)
 800d940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d94e:	f002 f819 	bl	800f984 <vPortExitCritical>
				return pdPASS;
 800d952:	2301      	movs	r3, #1
 800d954:	e097      	b.n	800da86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d111      	bne.n	800d980 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	617b      	str	r3, [r7, #20]
}
 800d974:	bf00      	nop
 800d976:	e7fe      	b.n	800d976 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d978:	f002 f804 	bl	800f984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d97c:	2300      	movs	r3, #0
 800d97e:	e082      	b.n	800da86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d986:	f107 030c 	add.w	r3, r7, #12
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 ff6a 	bl	800e864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d990:	2301      	movs	r3, #1
 800d992:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d994:	f001 fff6 	bl	800f984 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d998:	f000 fcc6 	bl	800e328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d99c:	f001 ffc2 	bl	800f924 <vPortEnterCritical>
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9a6:	b25b      	sxtb	r3, r3
 800d9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ac:	d103      	bne.n	800d9b6 <xQueueSemaphoreTake+0x13a>
 800d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9bc:	b25b      	sxtb	r3, r3
 800d9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c2:	d103      	bne.n	800d9cc <xQueueSemaphoreTake+0x150>
 800d9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9cc:	f001 ffda 	bl	800f984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9d0:	463a      	mov	r2, r7
 800d9d2:	f107 030c 	add.w	r3, r7, #12
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f000 ff59 	bl	800e890 <xTaskCheckForTimeOut>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d132      	bne.n	800da4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9e6:	f000 f94f 	bl	800dc88 <prvIsQueueEmpty>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d026      	beq.n	800da3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d109      	bne.n	800da0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d9f8:	f001 ff94 	bl	800f924 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	4618      	mov	r0, r3
 800da02:	f001 f8b1 	bl	800eb68 <xTaskPriorityInherit>
 800da06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800da08:	f001 ffbc 	bl	800f984 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0e:	3324      	adds	r3, #36	; 0x24
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	4611      	mov	r1, r2
 800da14:	4618      	mov	r0, r3
 800da16:	f000 fe73 	bl	800e700 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da1c:	f000 f8e2 	bl	800dbe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da20:	f000 fc90 	bl	800e344 <xTaskResumeAll>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	f47f af68 	bne.w	800d8fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800da2c:	4b18      	ldr	r3, [pc, #96]	; (800da90 <xQueueSemaphoreTake+0x214>)
 800da2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	e75e      	b.n	800d8fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da40:	f000 f8d0 	bl	800dbe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da44:	f000 fc7e 	bl	800e344 <xTaskResumeAll>
 800da48:	e758      	b.n	800d8fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da4c:	f000 f8ca 	bl	800dbe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da50:	f000 fc78 	bl	800e344 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da56:	f000 f917 	bl	800dc88 <prvIsQueueEmpty>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f43f af4d 	beq.w	800d8fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00d      	beq.n	800da84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800da68:	f001 ff5c 	bl	800f924 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da6e:	f000 f811 	bl	800da94 <prvGetDisinheritPriorityAfterTimeout>
 800da72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da7a:	4618      	mov	r0, r3
 800da7c:	f001 f980 	bl	800ed80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da80:	f001 ff80 	bl	800f984 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800da86:	4618      	mov	r0, r3
 800da88:	3738      	adds	r7, #56	; 0x38
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1c3 0307 	rsb	r3, r3, #7
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	e001      	b.n	800dab6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dab2:	2300      	movs	r3, #0
 800dab4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dab6:	68fb      	ldr	r3, [r7, #12]
	}
 800dab8:	4618      	mov	r0, r3
 800daba:	3714      	adds	r7, #20
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dad0:	2300      	movs	r3, #0
 800dad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10d      	bne.n	800dafe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d14d      	bne.n	800db86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	4618      	mov	r0, r3
 800daf0:	f001 f8c0 	bl	800ec74 <xTaskPriorityDisinherit>
 800daf4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	605a      	str	r2, [r3, #4]
 800dafc:	e043      	b.n	800db86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d119      	bne.n	800db38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6898      	ldr	r0, [r3, #8]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db0c:	461a      	mov	r2, r3
 800db0e:	68b9      	ldr	r1, [r7, #8]
 800db10:	f002 fc16 	bl	8010340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	689a      	ldr	r2, [r3, #8]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1c:	441a      	add	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	689a      	ldr	r2, [r3, #8]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d32b      	bcc.n	800db86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	609a      	str	r2, [r3, #8]
 800db36:	e026      	b.n	800db86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	68d8      	ldr	r0, [r3, #12]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db40:	461a      	mov	r2, r3
 800db42:	68b9      	ldr	r1, [r7, #8]
 800db44:	f002 fbfc 	bl	8010340 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	68da      	ldr	r2, [r3, #12]
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db50:	425b      	negs	r3, r3
 800db52:	441a      	add	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	68da      	ldr	r2, [r3, #12]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	429a      	cmp	r2, r3
 800db62:	d207      	bcs.n	800db74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6c:	425b      	negs	r3, r3
 800db6e:	441a      	add	r2, r3
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b02      	cmp	r3, #2
 800db78:	d105      	bne.n	800db86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d002      	beq.n	800db86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	3b01      	subs	r3, #1
 800db84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db8e:	697b      	ldr	r3, [r7, #20]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d018      	beq.n	800dbdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68da      	ldr	r2, [r3, #12]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb2:	441a      	add	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68da      	ldr	r2, [r3, #12]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d303      	bcc.n	800dbcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	68d9      	ldr	r1, [r3, #12]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	6838      	ldr	r0, [r7, #0]
 800dbd8:	f002 fbb2 	bl	8010340 <memcpy>
	}
}
 800dbdc:	bf00      	nop
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbec:	f001 fe9a 	bl	800f924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbf8:	e011      	b.n	800dc1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d012      	beq.n	800dc28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	3324      	adds	r3, #36	; 0x24
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fdca 	bl	800e7a0 <xTaskRemoveFromEventList>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc12:	f000 fe9f 	bl	800e954 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc16:	7bfb      	ldrb	r3, [r7, #15]
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	dce9      	bgt.n	800dbfa <prvUnlockQueue+0x16>
 800dc26:	e000      	b.n	800dc2a <prvUnlockQueue+0x46>
					break;
 800dc28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	22ff      	movs	r2, #255	; 0xff
 800dc2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc32:	f001 fea7 	bl	800f984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc36:	f001 fe75 	bl	800f924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc42:	e011      	b.n	800dc68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d012      	beq.n	800dc72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	3310      	adds	r3, #16
 800dc50:	4618      	mov	r0, r3
 800dc52:	f000 fda5 	bl	800e7a0 <xTaskRemoveFromEventList>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc5c:	f000 fe7a 	bl	800e954 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc60:	7bbb      	ldrb	r3, [r7, #14]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	dce9      	bgt.n	800dc44 <prvUnlockQueue+0x60>
 800dc70:	e000      	b.n	800dc74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	22ff      	movs	r2, #255	; 0xff
 800dc78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc7c:	f001 fe82 	bl	800f984 <vPortExitCritical>
}
 800dc80:	bf00      	nop
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc90:	f001 fe48 	bl	800f924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d102      	bne.n	800dca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	60fb      	str	r3, [r7, #12]
 800dca0:	e001      	b.n	800dca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dca2:	2300      	movs	r3, #0
 800dca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dca6:	f001 fe6d 	bl	800f984 <vPortExitCritical>

	return xReturn;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcbc:	f001 fe32 	bl	800f924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d102      	bne.n	800dcd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dccc:	2301      	movs	r3, #1
 800dcce:	60fb      	str	r3, [r7, #12]
 800dcd0:	e001      	b.n	800dcd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcd6:	f001 fe55 	bl	800f984 <vPortExitCritical>

	return xReturn;
 800dcda:	68fb      	ldr	r3, [r7, #12]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
 800dcf2:	e014      	b.n	800dd1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcf4:	4a0f      	ldr	r2, [pc, #60]	; (800dd34 <vQueueAddToRegistry+0x50>)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd00:	490c      	ldr	r1, [pc, #48]	; (800dd34 <vQueueAddToRegistry+0x50>)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd0a:	4a0a      	ldr	r2, [pc, #40]	; (800dd34 <vQueueAddToRegistry+0x50>)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	4413      	add	r3, r2
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd16:	e006      	b.n	800dd26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b07      	cmp	r3, #7
 800dd22:	d9e7      	bls.n	800dcf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	20002920 	.word	0x20002920

0800dd38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd48:	f001 fdec 	bl	800f924 <vPortEnterCritical>
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd52:	b25b      	sxtb	r3, r3
 800dd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd58:	d103      	bne.n	800dd62 <vQueueWaitForMessageRestricted+0x2a>
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd68:	b25b      	sxtb	r3, r3
 800dd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6e:	d103      	bne.n	800dd78 <vQueueWaitForMessageRestricted+0x40>
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd78:	f001 fe04 	bl	800f984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	3324      	adds	r3, #36	; 0x24
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	68b9      	ldr	r1, [r7, #8]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f000 fcdb 	bl	800e748 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd92:	6978      	ldr	r0, [r7, #20]
 800dd94:	f7ff ff26 	bl	800dbe4 <prvUnlockQueue>
	}
 800dd98:	bf00      	nop
 800dd9a:	3718      	adds	r7, #24
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08e      	sub	sp, #56	; 0x38
 800dda4:	af04      	add	r7, sp, #16
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10a      	bne.n	800ddca <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	623b      	str	r3, [r7, #32]
}
 800ddc6:	bf00      	nop
 800ddc8:	e7fe      	b.n	800ddc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10a      	bne.n	800dde6 <xTaskCreateStatic+0x46>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	61fb      	str	r3, [r7, #28]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dde6:	23b0      	movs	r3, #176	; 0xb0
 800dde8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	2bb0      	cmp	r3, #176	; 0xb0
 800ddee:	d00a      	beq.n	800de06 <xTaskCreateStatic+0x66>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	61bb      	str	r3, [r7, #24]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d01e      	beq.n	800de4a <xTaskCreateStatic+0xaa>
 800de0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d01b      	beq.n	800de4a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	2202      	movs	r2, #2
 800de20:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de24:	2300      	movs	r3, #0
 800de26:	9303      	str	r3, [sp, #12]
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	9302      	str	r3, [sp, #8]
 800de2c:	f107 0314 	add.w	r3, r7, #20
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	68b9      	ldr	r1, [r7, #8]
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 f851 	bl	800dee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de44:	f000 f8e4 	bl	800e010 <prvAddNewTaskToReadyList>
 800de48:	e001      	b.n	800de4e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de4e:	697b      	ldr	r3, [r7, #20]
	}
 800de50:	4618      	mov	r0, r3
 800de52:	3728      	adds	r7, #40	; 0x28
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b08c      	sub	sp, #48	; 0x30
 800de5c:	af04      	add	r7, sp, #16
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	603b      	str	r3, [r7, #0]
 800de64:	4613      	mov	r3, r2
 800de66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de68:	88fb      	ldrh	r3, [r7, #6]
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4618      	mov	r0, r3
 800de6e:	f001 fe7b 	bl	800fb68 <pvPortMalloc>
 800de72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00e      	beq.n	800de98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800de7a:	20b0      	movs	r0, #176	; 0xb0
 800de7c:	f001 fe74 	bl	800fb68 <pvPortMalloc>
 800de80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d003      	beq.n	800de90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	631a      	str	r2, [r3, #48]	; 0x30
 800de8e:	e005      	b.n	800de9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de90:	6978      	ldr	r0, [r7, #20]
 800de92:	f001 ff2d 	bl	800fcf0 <vPortFree>
 800de96:	e001      	b.n	800de9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de98:	2300      	movs	r3, #0
 800de9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d017      	beq.n	800ded2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800deaa:	88fa      	ldrh	r2, [r7, #6]
 800deac:	2300      	movs	r3, #0
 800deae:	9303      	str	r3, [sp, #12]
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	9302      	str	r3, [sp, #8]
 800deb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb6:	9301      	str	r3, [sp, #4]
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f000 f80f 	bl	800dee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dec6:	69f8      	ldr	r0, [r7, #28]
 800dec8:	f000 f8a2 	bl	800e010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800decc:	2301      	movs	r3, #1
 800dece:	61bb      	str	r3, [r7, #24]
 800ded0:	e002      	b.n	800ded8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ded2:	f04f 33ff 	mov.w	r3, #4294967295
 800ded6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ded8:	69bb      	ldr	r3, [r7, #24]
	}
 800deda:	4618      	mov	r0, r3
 800dedc:	3720      	adds	r7, #32
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
	...

0800dee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b088      	sub	sp, #32
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
 800def0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800defc:	3b01      	subs	r3, #1
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	f023 0307 	bic.w	r3, r3, #7
 800df0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	f003 0307 	and.w	r3, r3, #7
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00a      	beq.n	800df2c <prvInitialiseNewTask+0x48>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	617b      	str	r3, [r7, #20]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df2c:	2300      	movs	r3, #0
 800df2e:	61fb      	str	r3, [r7, #28]
 800df30:	e012      	b.n	800df58 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	4413      	add	r3, r2
 800df38:	7819      	ldrb	r1, [r3, #0]
 800df3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	4413      	add	r3, r2
 800df40:	3334      	adds	r3, #52	; 0x34
 800df42:	460a      	mov	r2, r1
 800df44:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	4413      	add	r3, r2
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d006      	beq.n	800df60 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	3301      	adds	r3, #1
 800df56:	61fb      	str	r3, [r7, #28]
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	2b1f      	cmp	r3, #31
 800df5c:	d9e9      	bls.n	800df32 <prvInitialiseNewTask+0x4e>
 800df5e:	e000      	b.n	800df62 <prvInitialiseNewTask+0x7e>
		{
			break;
 800df60:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	2200      	movs	r2, #0
 800df66:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6c:	2b06      	cmp	r3, #6
 800df6e:	d901      	bls.n	800df74 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df70:	2306      	movs	r3, #6
 800df72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df7e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	2200      	movs	r2, #0
 800df84:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	3304      	adds	r3, #4
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fe ffe2 	bl	800cf54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	3318      	adds	r3, #24
 800df94:	4618      	mov	r0, r3
 800df96:	f7fe ffdd 	bl	800cf54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	f1c3 0207 	rsb	r2, r3, #7
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc2:	335c      	adds	r3, #92	; 0x5c
 800dfc4:	224c      	movs	r2, #76	; 0x4c
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f002 f92f 	bl	801022c <memset>
 800dfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd0:	4a0c      	ldr	r2, [pc, #48]	; (800e004 <prvInitialiseNewTask+0x120>)
 800dfd2:	661a      	str	r2, [r3, #96]	; 0x60
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	4a0c      	ldr	r2, [pc, #48]	; (800e008 <prvInitialiseNewTask+0x124>)
 800dfd8:	665a      	str	r2, [r3, #100]	; 0x64
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	4a0b      	ldr	r2, [pc, #44]	; (800e00c <prvInitialiseNewTask+0x128>)
 800dfde:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfe0:	683a      	ldr	r2, [r7, #0]
 800dfe2:	68f9      	ldr	r1, [r7, #12]
 800dfe4:	69b8      	ldr	r0, [r7, #24]
 800dfe6:	f001 fb6d 	bl	800f6c4 <pxPortInitialiseStack>
 800dfea:	4602      	mov	r2, r0
 800dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d002      	beq.n	800dffc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dffa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dffc:	bf00      	nop
 800dffe:	3720      	adds	r7, #32
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20002fa8 	.word	0x20002fa8
 800e008:	20003010 	.word	0x20003010
 800e00c:	20003078 	.word	0x20003078

0800e010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e018:	f001 fc84 	bl	800f924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e01c:	4b2a      	ldr	r3, [pc, #168]	; (800e0c8 <prvAddNewTaskToReadyList+0xb8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	4a29      	ldr	r2, [pc, #164]	; (800e0c8 <prvAddNewTaskToReadyList+0xb8>)
 800e024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e026:	4b29      	ldr	r3, [pc, #164]	; (800e0cc <prvAddNewTaskToReadyList+0xbc>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d109      	bne.n	800e042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e02e:	4a27      	ldr	r2, [pc, #156]	; (800e0cc <prvAddNewTaskToReadyList+0xbc>)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e034:	4b24      	ldr	r3, [pc, #144]	; (800e0c8 <prvAddNewTaskToReadyList+0xb8>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d110      	bne.n	800e05e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e03c:	f000 fcae 	bl	800e99c <prvInitialiseTaskLists>
 800e040:	e00d      	b.n	800e05e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e042:	4b23      	ldr	r3, [pc, #140]	; (800e0d0 <prvAddNewTaskToReadyList+0xc0>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d109      	bne.n	800e05e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e04a:	4b20      	ldr	r3, [pc, #128]	; (800e0cc <prvAddNewTaskToReadyList+0xbc>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e054:	429a      	cmp	r2, r3
 800e056:	d802      	bhi.n	800e05e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e058:	4a1c      	ldr	r2, [pc, #112]	; (800e0cc <prvAddNewTaskToReadyList+0xbc>)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e05e:	4b1d      	ldr	r3, [pc, #116]	; (800e0d4 <prvAddNewTaskToReadyList+0xc4>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	4a1b      	ldr	r2, [pc, #108]	; (800e0d4 <prvAddNewTaskToReadyList+0xc4>)
 800e066:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	2201      	movs	r2, #1
 800e06e:	409a      	lsls	r2, r3
 800e070:	4b19      	ldr	r3, [pc, #100]	; (800e0d8 <prvAddNewTaskToReadyList+0xc8>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4313      	orrs	r3, r2
 800e076:	4a18      	ldr	r2, [pc, #96]	; (800e0d8 <prvAddNewTaskToReadyList+0xc8>)
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07e:	4613      	mov	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4a15      	ldr	r2, [pc, #84]	; (800e0dc <prvAddNewTaskToReadyList+0xcc>)
 800e088:	441a      	add	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	3304      	adds	r3, #4
 800e08e:	4619      	mov	r1, r3
 800e090:	4610      	mov	r0, r2
 800e092:	f7fe ff6c 	bl	800cf6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e096:	f001 fc75 	bl	800f984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e09a:	4b0d      	ldr	r3, [pc, #52]	; (800e0d0 <prvAddNewTaskToReadyList+0xc0>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00e      	beq.n	800e0c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0a2:	4b0a      	ldr	r3, [pc, #40]	; (800e0cc <prvAddNewTaskToReadyList+0xbc>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d207      	bcs.n	800e0c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0b0:	4b0b      	ldr	r3, [pc, #44]	; (800e0e0 <prvAddNewTaskToReadyList+0xd0>)
 800e0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0c0:	bf00      	nop
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	20002a60 	.word	0x20002a60
 800e0cc:	20002960 	.word	0x20002960
 800e0d0:	20002a6c 	.word	0x20002a6c
 800e0d4:	20002a7c 	.word	0x20002a7c
 800e0d8:	20002a68 	.word	0x20002a68
 800e0dc:	20002964 	.word	0x20002964
 800e0e0:	e000ed04 	.word	0xe000ed04

0800e0e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b08a      	sub	sp, #40	; 0x28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <vTaskDelayUntil+0x2a>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	617b      	str	r3, [r7, #20]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10a      	bne.n	800e12a <vTaskDelayUntil+0x46>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	613b      	str	r3, [r7, #16]
}
 800e126:	bf00      	nop
 800e128:	e7fe      	b.n	800e128 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e12a:	4b2a      	ldr	r3, [pc, #168]	; (800e1d4 <vTaskDelayUntil+0xf0>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <vTaskDelayUntil+0x64>
	__asm volatile
 800e132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e136:	f383 8811 	msr	BASEPRI, r3
 800e13a:	f3bf 8f6f 	isb	sy
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	60fb      	str	r3, [r7, #12]
}
 800e144:	bf00      	nop
 800e146:	e7fe      	b.n	800e146 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e148:	f000 f8ee 	bl	800e328 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e14c:	4b22      	ldr	r3, [pc, #136]	; (800e1d8 <vTaskDelayUntil+0xf4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	4413      	add	r3, r2
 800e15a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	6a3a      	ldr	r2, [r7, #32]
 800e162:	429a      	cmp	r2, r3
 800e164:	d20b      	bcs.n	800e17e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69fa      	ldr	r2, [r7, #28]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d211      	bcs.n	800e194 <vTaskDelayUntil+0xb0>
 800e170:	69fa      	ldr	r2, [r7, #28]
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	429a      	cmp	r2, r3
 800e176:	d90d      	bls.n	800e194 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e178:	2301      	movs	r3, #1
 800e17a:	627b      	str	r3, [r7, #36]	; 0x24
 800e17c:	e00a      	b.n	800e194 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	69fa      	ldr	r2, [r7, #28]
 800e184:	429a      	cmp	r2, r3
 800e186:	d303      	bcc.n	800e190 <vTaskDelayUntil+0xac>
 800e188:	69fa      	ldr	r2, [r7, #28]
 800e18a:	6a3b      	ldr	r3, [r7, #32]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d901      	bls.n	800e194 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e190:	2301      	movs	r3, #1
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	69fa      	ldr	r2, [r7, #28]
 800e198:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d006      	beq.n	800e1ae <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e1a0:	69fa      	ldr	r2, [r7, #28]
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f000 fe9d 	bl	800eee8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e1ae:	f000 f8c9 	bl	800e344 <xTaskResumeAll>
 800e1b2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d107      	bne.n	800e1ca <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e1ba:	4b08      	ldr	r3, [pc, #32]	; (800e1dc <vTaskDelayUntil+0xf8>)
 800e1bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1ca:	bf00      	nop
 800e1cc:	3728      	adds	r7, #40	; 0x28
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20002a88 	.word	0x20002a88
 800e1d8:	20002a64 	.word	0x20002a64
 800e1dc:	e000ed04 	.word	0xe000ed04

0800e1e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d017      	beq.n	800e222 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e1f2:	4b13      	ldr	r3, [pc, #76]	; (800e240 <vTaskDelay+0x60>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <vTaskDelay+0x30>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	60bb      	str	r3, [r7, #8]
}
 800e20c:	bf00      	nop
 800e20e:	e7fe      	b.n	800e20e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e210:	f000 f88a 	bl	800e328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e214:	2100      	movs	r1, #0
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fe66 	bl	800eee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e21c:	f000 f892 	bl	800e344 <xTaskResumeAll>
 800e220:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d107      	bne.n	800e238 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e228:	4b06      	ldr	r3, [pc, #24]	; (800e244 <vTaskDelay+0x64>)
 800e22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e238:	bf00      	nop
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	20002a88 	.word	0x20002a88
 800e244:	e000ed04 	.word	0xe000ed04

0800e248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b08a      	sub	sp, #40	; 0x28
 800e24c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e252:	2300      	movs	r3, #0
 800e254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e256:	463a      	mov	r2, r7
 800e258:	1d39      	adds	r1, r7, #4
 800e25a:	f107 0308 	add.w	r3, r7, #8
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f5 fa70 	bl	8003744 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e264:	6839      	ldr	r1, [r7, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	9202      	str	r2, [sp, #8]
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	2300      	movs	r3, #0
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	2300      	movs	r3, #0
 800e274:	460a      	mov	r2, r1
 800e276:	4924      	ldr	r1, [pc, #144]	; (800e308 <vTaskStartScheduler+0xc0>)
 800e278:	4824      	ldr	r0, [pc, #144]	; (800e30c <vTaskStartScheduler+0xc4>)
 800e27a:	f7ff fd91 	bl	800dda0 <xTaskCreateStatic>
 800e27e:	4603      	mov	r3, r0
 800e280:	4a23      	ldr	r2, [pc, #140]	; (800e310 <vTaskStartScheduler+0xc8>)
 800e282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e284:	4b22      	ldr	r3, [pc, #136]	; (800e310 <vTaskStartScheduler+0xc8>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e28c:	2301      	movs	r3, #1
 800e28e:	617b      	str	r3, [r7, #20]
 800e290:	e001      	b.n	800e296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e292:	2300      	movs	r3, #0
 800e294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d102      	bne.n	800e2a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e29c:	f000 fe8a 	bl	800efb4 <xTimerCreateTimerTask>
 800e2a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d11b      	bne.n	800e2e0 <vTaskStartScheduler+0x98>
	__asm volatile
 800e2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	613b      	str	r3, [r7, #16]
}
 800e2ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2bc:	4b15      	ldr	r3, [pc, #84]	; (800e314 <vTaskStartScheduler+0xcc>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	335c      	adds	r3, #92	; 0x5c
 800e2c2:	4a15      	ldr	r2, [pc, #84]	; (800e318 <vTaskStartScheduler+0xd0>)
 800e2c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2c6:	4b15      	ldr	r3, [pc, #84]	; (800e31c <vTaskStartScheduler+0xd4>)
 800e2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2ce:	4b14      	ldr	r3, [pc, #80]	; (800e320 <vTaskStartScheduler+0xd8>)
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e2d4:	4b13      	ldr	r3, [pc, #76]	; (800e324 <vTaskStartScheduler+0xdc>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2da:	f001 fa81 	bl	800f7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2de:	e00e      	b.n	800e2fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e6:	d10a      	bne.n	800e2fe <vTaskStartScheduler+0xb6>
	__asm volatile
 800e2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ec:	f383 8811 	msr	BASEPRI, r3
 800e2f0:	f3bf 8f6f 	isb	sy
 800e2f4:	f3bf 8f4f 	dsb	sy
 800e2f8:	60fb      	str	r3, [r7, #12]
}
 800e2fa:	bf00      	nop
 800e2fc:	e7fe      	b.n	800e2fc <vTaskStartScheduler+0xb4>
}
 800e2fe:	bf00      	nop
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	08010984 	.word	0x08010984
 800e30c:	0800e96d 	.word	0x0800e96d
 800e310:	20002a84 	.word	0x20002a84
 800e314:	20002960 	.word	0x20002960
 800e318:	20000174 	.word	0x20000174
 800e31c:	20002a80 	.word	0x20002a80
 800e320:	20002a6c 	.word	0x20002a6c
 800e324:	20002a64 	.word	0x20002a64

0800e328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e32c:	4b04      	ldr	r3, [pc, #16]	; (800e340 <vTaskSuspendAll+0x18>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3301      	adds	r3, #1
 800e332:	4a03      	ldr	r2, [pc, #12]	; (800e340 <vTaskSuspendAll+0x18>)
 800e334:	6013      	str	r3, [r2, #0]
}
 800e336:	bf00      	nop
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	20002a88 	.word	0x20002a88

0800e344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e34e:	2300      	movs	r3, #0
 800e350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e352:	4b41      	ldr	r3, [pc, #260]	; (800e458 <xTaskResumeAll+0x114>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <xTaskResumeAll+0x2c>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	603b      	str	r3, [r7, #0]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e370:	f001 fad8 	bl	800f924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e374:	4b38      	ldr	r3, [pc, #224]	; (800e458 <xTaskResumeAll+0x114>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3b01      	subs	r3, #1
 800e37a:	4a37      	ldr	r2, [pc, #220]	; (800e458 <xTaskResumeAll+0x114>)
 800e37c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e37e:	4b36      	ldr	r3, [pc, #216]	; (800e458 <xTaskResumeAll+0x114>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d161      	bne.n	800e44a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e386:	4b35      	ldr	r3, [pc, #212]	; (800e45c <xTaskResumeAll+0x118>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d05d      	beq.n	800e44a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e38e:	e02e      	b.n	800e3ee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e390:	4b33      	ldr	r3, [pc, #204]	; (800e460 <xTaskResumeAll+0x11c>)
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3318      	adds	r3, #24
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fe fe43 	bl	800d028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fe fe3e 	bl	800d028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	409a      	lsls	r2, r3
 800e3b4:	4b2b      	ldr	r3, [pc, #172]	; (800e464 <xTaskResumeAll+0x120>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	4a2a      	ldr	r2, [pc, #168]	; (800e464 <xTaskResumeAll+0x120>)
 800e3bc:	6013      	str	r3, [r2, #0]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4a27      	ldr	r2, [pc, #156]	; (800e468 <xTaskResumeAll+0x124>)
 800e3cc:	441a      	add	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	4610      	mov	r0, r2
 800e3d6:	f7fe fdca 	bl	800cf6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3de:	4b23      	ldr	r3, [pc, #140]	; (800e46c <xTaskResumeAll+0x128>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d302      	bcc.n	800e3ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e3e8:	4b21      	ldr	r3, [pc, #132]	; (800e470 <xTaskResumeAll+0x12c>)
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3ee:	4b1c      	ldr	r3, [pc, #112]	; (800e460 <xTaskResumeAll+0x11c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1cc      	bne.n	800e390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e3fc:	f000 fb70 	bl	800eae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e400:	4b1c      	ldr	r3, [pc, #112]	; (800e474 <xTaskResumeAll+0x130>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d010      	beq.n	800e42e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e40c:	f000 f858 	bl	800e4c0 <xTaskIncrementTick>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d002      	beq.n	800e41c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e416:	4b16      	ldr	r3, [pc, #88]	; (800e470 <xTaskResumeAll+0x12c>)
 800e418:	2201      	movs	r2, #1
 800e41a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3b01      	subs	r3, #1
 800e420:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1f1      	bne.n	800e40c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e428:	4b12      	ldr	r3, [pc, #72]	; (800e474 <xTaskResumeAll+0x130>)
 800e42a:	2200      	movs	r2, #0
 800e42c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e42e:	4b10      	ldr	r3, [pc, #64]	; (800e470 <xTaskResumeAll+0x12c>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d009      	beq.n	800e44a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e436:	2301      	movs	r3, #1
 800e438:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e43a:	4b0f      	ldr	r3, [pc, #60]	; (800e478 <xTaskResumeAll+0x134>)
 800e43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e440:	601a      	str	r2, [r3, #0]
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e44a:	f001 fa9b 	bl	800f984 <vPortExitCritical>

	return xAlreadyYielded;
 800e44e:	68bb      	ldr	r3, [r7, #8]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	20002a88 	.word	0x20002a88
 800e45c:	20002a60 	.word	0x20002a60
 800e460:	20002a20 	.word	0x20002a20
 800e464:	20002a68 	.word	0x20002a68
 800e468:	20002964 	.word	0x20002964
 800e46c:	20002960 	.word	0x20002960
 800e470:	20002a74 	.word	0x20002a74
 800e474:	20002a70 	.word	0x20002a70
 800e478:	e000ed04 	.word	0xe000ed04

0800e47c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e482:	4b05      	ldr	r3, [pc, #20]	; (800e498 <xTaskGetTickCount+0x1c>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e488:	687b      	ldr	r3, [r7, #4]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	20002a64 	.word	0x20002a64

0800e49c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4a2:	f001 fb21 	bl	800fae8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e4aa:	4b04      	ldr	r3, [pc, #16]	; (800e4bc <xTaskGetTickCountFromISR+0x20>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4b0:	683b      	ldr	r3, [r7, #0]
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	20002a64 	.word	0x20002a64

0800e4c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4ca:	4b51      	ldr	r3, [pc, #324]	; (800e610 <xTaskIncrementTick+0x150>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f040 808d 	bne.w	800e5ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e4d4:	4b4f      	ldr	r3, [pc, #316]	; (800e614 <xTaskIncrementTick+0x154>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e4dc:	4a4d      	ldr	r2, [pc, #308]	; (800e614 <xTaskIncrementTick+0x154>)
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d120      	bne.n	800e52a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e4e8:	4b4b      	ldr	r3, [pc, #300]	; (800e618 <xTaskIncrementTick+0x158>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00a      	beq.n	800e508 <xTaskIncrementTick+0x48>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	603b      	str	r3, [r7, #0]
}
 800e504:	bf00      	nop
 800e506:	e7fe      	b.n	800e506 <xTaskIncrementTick+0x46>
 800e508:	4b43      	ldr	r3, [pc, #268]	; (800e618 <xTaskIncrementTick+0x158>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	4b43      	ldr	r3, [pc, #268]	; (800e61c <xTaskIncrementTick+0x15c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a41      	ldr	r2, [pc, #260]	; (800e618 <xTaskIncrementTick+0x158>)
 800e514:	6013      	str	r3, [r2, #0]
 800e516:	4a41      	ldr	r2, [pc, #260]	; (800e61c <xTaskIncrementTick+0x15c>)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6013      	str	r3, [r2, #0]
 800e51c:	4b40      	ldr	r3, [pc, #256]	; (800e620 <xTaskIncrementTick+0x160>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3301      	adds	r3, #1
 800e522:	4a3f      	ldr	r2, [pc, #252]	; (800e620 <xTaskIncrementTick+0x160>)
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	f000 fadb 	bl	800eae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e52a:	4b3e      	ldr	r3, [pc, #248]	; (800e624 <xTaskIncrementTick+0x164>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	693a      	ldr	r2, [r7, #16]
 800e530:	429a      	cmp	r2, r3
 800e532:	d34d      	bcc.n	800e5d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e534:	4b38      	ldr	r3, [pc, #224]	; (800e618 <xTaskIncrementTick+0x158>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d101      	bne.n	800e542 <xTaskIncrementTick+0x82>
 800e53e:	2301      	movs	r3, #1
 800e540:	e000      	b.n	800e544 <xTaskIncrementTick+0x84>
 800e542:	2300      	movs	r3, #0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d004      	beq.n	800e552 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e548:	4b36      	ldr	r3, [pc, #216]	; (800e624 <xTaskIncrementTick+0x164>)
 800e54a:	f04f 32ff 	mov.w	r2, #4294967295
 800e54e:	601a      	str	r2, [r3, #0]
					break;
 800e550:	e03e      	b.n	800e5d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e552:	4b31      	ldr	r3, [pc, #196]	; (800e618 <xTaskIncrementTick+0x158>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e562:	693a      	ldr	r2, [r7, #16]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	429a      	cmp	r2, r3
 800e568:	d203      	bcs.n	800e572 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e56a:	4a2e      	ldr	r2, [pc, #184]	; (800e624 <xTaskIncrementTick+0x164>)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6013      	str	r3, [r2, #0]
						break;
 800e570:	e02e      	b.n	800e5d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	3304      	adds	r3, #4
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe fd56 	bl	800d028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e580:	2b00      	cmp	r3, #0
 800e582:	d004      	beq.n	800e58e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	3318      	adds	r3, #24
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fe fd4d 	bl	800d028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e592:	2201      	movs	r2, #1
 800e594:	409a      	lsls	r2, r3
 800e596:	4b24      	ldr	r3, [pc, #144]	; (800e628 <xTaskIncrementTick+0x168>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	4a22      	ldr	r2, [pc, #136]	; (800e628 <xTaskIncrementTick+0x168>)
 800e59e:	6013      	str	r3, [r2, #0]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4413      	add	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4a1f      	ldr	r2, [pc, #124]	; (800e62c <xTaskIncrementTick+0x16c>)
 800e5ae:	441a      	add	r2, r3
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4610      	mov	r0, r2
 800e5b8:	f7fe fcd9 	bl	800cf6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c0:	4b1b      	ldr	r3, [pc, #108]	; (800e630 <xTaskIncrementTick+0x170>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d3b4      	bcc.n	800e534 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ce:	e7b1      	b.n	800e534 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5d0:	4b17      	ldr	r3, [pc, #92]	; (800e630 <xTaskIncrementTick+0x170>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d6:	4915      	ldr	r1, [pc, #84]	; (800e62c <xTaskIncrementTick+0x16c>)
 800e5d8:	4613      	mov	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4413      	add	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	440b      	add	r3, r1
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d907      	bls.n	800e5f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	617b      	str	r3, [r7, #20]
 800e5ec:	e004      	b.n	800e5f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e5ee:	4b11      	ldr	r3, [pc, #68]	; (800e634 <xTaskIncrementTick+0x174>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	4a0f      	ldr	r2, [pc, #60]	; (800e634 <xTaskIncrementTick+0x174>)
 800e5f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e5f8:	4b0f      	ldr	r3, [pc, #60]	; (800e638 <xTaskIncrementTick+0x178>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e600:	2301      	movs	r3, #1
 800e602:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e604:	697b      	ldr	r3, [r7, #20]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	20002a88 	.word	0x20002a88
 800e614:	20002a64 	.word	0x20002a64
 800e618:	20002a18 	.word	0x20002a18
 800e61c:	20002a1c 	.word	0x20002a1c
 800e620:	20002a78 	.word	0x20002a78
 800e624:	20002a80 	.word	0x20002a80
 800e628:	20002a68 	.word	0x20002a68
 800e62c:	20002964 	.word	0x20002964
 800e630:	20002960 	.word	0x20002960
 800e634:	20002a70 	.word	0x20002a70
 800e638:	20002a74 	.word	0x20002a74

0800e63c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e63c:	b480      	push	{r7}
 800e63e:	b087      	sub	sp, #28
 800e640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e642:	4b29      	ldr	r3, [pc, #164]	; (800e6e8 <vTaskSwitchContext+0xac>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e64a:	4b28      	ldr	r3, [pc, #160]	; (800e6ec <vTaskSwitchContext+0xb0>)
 800e64c:	2201      	movs	r2, #1
 800e64e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e650:	e044      	b.n	800e6dc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e652:	4b26      	ldr	r3, [pc, #152]	; (800e6ec <vTaskSwitchContext+0xb0>)
 800e654:	2200      	movs	r2, #0
 800e656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e658:	4b25      	ldr	r3, [pc, #148]	; (800e6f0 <vTaskSwitchContext+0xb4>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	fab3 f383 	clz	r3, r3
 800e664:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e666:	7afb      	ldrb	r3, [r7, #11]
 800e668:	f1c3 031f 	rsb	r3, r3, #31
 800e66c:	617b      	str	r3, [r7, #20]
 800e66e:	4921      	ldr	r1, [pc, #132]	; (800e6f4 <vTaskSwitchContext+0xb8>)
 800e670:	697a      	ldr	r2, [r7, #20]
 800e672:	4613      	mov	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	440b      	add	r3, r1
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d10a      	bne.n	800e698 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e686:	f383 8811 	msr	BASEPRI, r3
 800e68a:	f3bf 8f6f 	isb	sy
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	607b      	str	r3, [r7, #4]
}
 800e694:	bf00      	nop
 800e696:	e7fe      	b.n	800e696 <vTaskSwitchContext+0x5a>
 800e698:	697a      	ldr	r2, [r7, #20]
 800e69a:	4613      	mov	r3, r2
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	4413      	add	r3, r2
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	4a14      	ldr	r2, [pc, #80]	; (800e6f4 <vTaskSwitchContext+0xb8>)
 800e6a4:	4413      	add	r3, r2
 800e6a6:	613b      	str	r3, [r7, #16]
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	605a      	str	r2, [r3, #4]
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	685a      	ldr	r2, [r3, #4]
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d104      	bne.n	800e6c8 <vTaskSwitchContext+0x8c>
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	605a      	str	r2, [r3, #4]
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	4a0a      	ldr	r2, [pc, #40]	; (800e6f8 <vTaskSwitchContext+0xbc>)
 800e6d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6d2:	4b09      	ldr	r3, [pc, #36]	; (800e6f8 <vTaskSwitchContext+0xbc>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	335c      	adds	r3, #92	; 0x5c
 800e6d8:	4a08      	ldr	r2, [pc, #32]	; (800e6fc <vTaskSwitchContext+0xc0>)
 800e6da:	6013      	str	r3, [r2, #0]
}
 800e6dc:	bf00      	nop
 800e6de:	371c      	adds	r7, #28
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	20002a88 	.word	0x20002a88
 800e6ec:	20002a74 	.word	0x20002a74
 800e6f0:	20002a68 	.word	0x20002a68
 800e6f4:	20002964 	.word	0x20002964
 800e6f8:	20002960 	.word	0x20002960
 800e6fc:	20000174 	.word	0x20000174

0800e700 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d10a      	bne.n	800e726 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	60fb      	str	r3, [r7, #12]
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e726:	4b07      	ldr	r3, [pc, #28]	; (800e744 <vTaskPlaceOnEventList+0x44>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3318      	adds	r3, #24
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7fe fc41 	bl	800cfb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e734:	2101      	movs	r1, #1
 800e736:	6838      	ldr	r0, [r7, #0]
 800e738:	f000 fbd6 	bl	800eee8 <prvAddCurrentTaskToDelayedList>
}
 800e73c:	bf00      	nop
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20002960 	.word	0x20002960

0800e748 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d10a      	bne.n	800e770 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	617b      	str	r3, [r7, #20]
}
 800e76c:	bf00      	nop
 800e76e:	e7fe      	b.n	800e76e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e770:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <vTaskPlaceOnEventListRestricted+0x54>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3318      	adds	r3, #24
 800e776:	4619      	mov	r1, r3
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f7fe fbf8 	bl	800cf6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e784:	f04f 33ff 	mov.w	r3, #4294967295
 800e788:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e78a:	6879      	ldr	r1, [r7, #4]
 800e78c:	68b8      	ldr	r0, [r7, #8]
 800e78e:	f000 fbab 	bl	800eee8 <prvAddCurrentTaskToDelayedList>
	}
 800e792:	bf00      	nop
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	20002960 	.word	0x20002960

0800e7a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10a      	bne.n	800e7cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ba:	f383 8811 	msr	BASEPRI, r3
 800e7be:	f3bf 8f6f 	isb	sy
 800e7c2:	f3bf 8f4f 	dsb	sy
 800e7c6:	60fb      	str	r3, [r7, #12]
}
 800e7c8:	bf00      	nop
 800e7ca:	e7fe      	b.n	800e7ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	3318      	adds	r3, #24
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fe fc29 	bl	800d028 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7d6:	4b1d      	ldr	r3, [pc, #116]	; (800e84c <xTaskRemoveFromEventList+0xac>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d11c      	bne.n	800e818 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe fc20 	bl	800d028 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	409a      	lsls	r2, r3
 800e7f0:	4b17      	ldr	r3, [pc, #92]	; (800e850 <xTaskRemoveFromEventList+0xb0>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	4a16      	ldr	r2, [pc, #88]	; (800e850 <xTaskRemoveFromEventList+0xb0>)
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7fe:	4613      	mov	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4413      	add	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4a13      	ldr	r2, [pc, #76]	; (800e854 <xTaskRemoveFromEventList+0xb4>)
 800e808:	441a      	add	r2, r3
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4619      	mov	r1, r3
 800e810:	4610      	mov	r0, r2
 800e812:	f7fe fbac 	bl	800cf6e <vListInsertEnd>
 800e816:	e005      	b.n	800e824 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	3318      	adds	r3, #24
 800e81c:	4619      	mov	r1, r3
 800e81e:	480e      	ldr	r0, [pc, #56]	; (800e858 <xTaskRemoveFromEventList+0xb8>)
 800e820:	f7fe fba5 	bl	800cf6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e828:	4b0c      	ldr	r3, [pc, #48]	; (800e85c <xTaskRemoveFromEventList+0xbc>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82e:	429a      	cmp	r2, r3
 800e830:	d905      	bls.n	800e83e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e832:	2301      	movs	r3, #1
 800e834:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e836:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <xTaskRemoveFromEventList+0xc0>)
 800e838:	2201      	movs	r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	e001      	b.n	800e842 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e83e:	2300      	movs	r3, #0
 800e840:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800e842:	697b      	ldr	r3, [r7, #20]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	20002a88 	.word	0x20002a88
 800e850:	20002a68 	.word	0x20002a68
 800e854:	20002964 	.word	0x20002964
 800e858:	20002a20 	.word	0x20002a20
 800e85c:	20002960 	.word	0x20002960
 800e860:	20002a74 	.word	0x20002a74

0800e864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e86c:	4b06      	ldr	r3, [pc, #24]	; (800e888 <vTaskInternalSetTimeOutState+0x24>)
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e874:	4b05      	ldr	r3, [pc, #20]	; (800e88c <vTaskInternalSetTimeOutState+0x28>)
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	605a      	str	r2, [r3, #4]
}
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	20002a78 	.word	0x20002a78
 800e88c:	20002a64 	.word	0x20002a64

0800e890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b088      	sub	sp, #32
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d10a      	bne.n	800e8b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	613b      	str	r3, [r7, #16]
}
 800e8b2:	bf00      	nop
 800e8b4:	e7fe      	b.n	800e8b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10a      	bne.n	800e8d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c0:	f383 8811 	msr	BASEPRI, r3
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	60fb      	str	r3, [r7, #12]
}
 800e8ce:	bf00      	nop
 800e8d0:	e7fe      	b.n	800e8d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e8d2:	f001 f827 	bl	800f924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8d6:	4b1d      	ldr	r3, [pc, #116]	; (800e94c <xTaskCheckForTimeOut+0xbc>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	69ba      	ldr	r2, [r7, #24]
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ee:	d102      	bne.n	800e8f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	61fb      	str	r3, [r7, #28]
 800e8f4:	e023      	b.n	800e93e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	4b15      	ldr	r3, [pc, #84]	; (800e950 <xTaskCheckForTimeOut+0xc0>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d007      	beq.n	800e912 <xTaskCheckForTimeOut+0x82>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d302      	bcc.n	800e912 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e90c:	2301      	movs	r3, #1
 800e90e:	61fb      	str	r3, [r7, #28]
 800e910:	e015      	b.n	800e93e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d20b      	bcs.n	800e934 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	1ad2      	subs	r2, r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7ff ff9b 	bl	800e864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e92e:	2300      	movs	r3, #0
 800e930:	61fb      	str	r3, [r7, #28]
 800e932:	e004      	b.n	800e93e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	2200      	movs	r2, #0
 800e938:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e93a:	2301      	movs	r3, #1
 800e93c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e93e:	f001 f821 	bl	800f984 <vPortExitCritical>

	return xReturn;
 800e942:	69fb      	ldr	r3, [r7, #28]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3720      	adds	r7, #32
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	20002a64 	.word	0x20002a64
 800e950:	20002a78 	.word	0x20002a78

0800e954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e958:	4b03      	ldr	r3, [pc, #12]	; (800e968 <vTaskMissedYield+0x14>)
 800e95a:	2201      	movs	r2, #1
 800e95c:	601a      	str	r2, [r3, #0]
}
 800e95e:	bf00      	nop
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	20002a74 	.word	0x20002a74

0800e96c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e974:	f000 f852 	bl	800ea1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e978:	4b06      	ldr	r3, [pc, #24]	; (800e994 <prvIdleTask+0x28>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d9f9      	bls.n	800e974 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e980:	4b05      	ldr	r3, [pc, #20]	; (800e998 <prvIdleTask+0x2c>)
 800e982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e986:	601a      	str	r2, [r3, #0]
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e990:	e7f0      	b.n	800e974 <prvIdleTask+0x8>
 800e992:	bf00      	nop
 800e994:	20002964 	.word	0x20002964
 800e998:	e000ed04 	.word	0xe000ed04

0800e99c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	607b      	str	r3, [r7, #4]
 800e9a6:	e00c      	b.n	800e9c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	4413      	add	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4a12      	ldr	r2, [pc, #72]	; (800e9fc <prvInitialiseTaskLists+0x60>)
 800e9b4:	4413      	add	r3, r2
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fe faac 	bl	800cf14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	607b      	str	r3, [r7, #4]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b06      	cmp	r3, #6
 800e9c6:	d9ef      	bls.n	800e9a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9c8:	480d      	ldr	r0, [pc, #52]	; (800ea00 <prvInitialiseTaskLists+0x64>)
 800e9ca:	f7fe faa3 	bl	800cf14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9ce:	480d      	ldr	r0, [pc, #52]	; (800ea04 <prvInitialiseTaskLists+0x68>)
 800e9d0:	f7fe faa0 	bl	800cf14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9d4:	480c      	ldr	r0, [pc, #48]	; (800ea08 <prvInitialiseTaskLists+0x6c>)
 800e9d6:	f7fe fa9d 	bl	800cf14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9da:	480c      	ldr	r0, [pc, #48]	; (800ea0c <prvInitialiseTaskLists+0x70>)
 800e9dc:	f7fe fa9a 	bl	800cf14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9e0:	480b      	ldr	r0, [pc, #44]	; (800ea10 <prvInitialiseTaskLists+0x74>)
 800e9e2:	f7fe fa97 	bl	800cf14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ea14 <prvInitialiseTaskLists+0x78>)
 800e9e8:	4a05      	ldr	r2, [pc, #20]	; (800ea00 <prvInitialiseTaskLists+0x64>)
 800e9ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ea18 <prvInitialiseTaskLists+0x7c>)
 800e9ee:	4a05      	ldr	r2, [pc, #20]	; (800ea04 <prvInitialiseTaskLists+0x68>)
 800e9f0:	601a      	str	r2, [r3, #0]
}
 800e9f2:	bf00      	nop
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20002964 	.word	0x20002964
 800ea00:	200029f0 	.word	0x200029f0
 800ea04:	20002a04 	.word	0x20002a04
 800ea08:	20002a20 	.word	0x20002a20
 800ea0c:	20002a34 	.word	0x20002a34
 800ea10:	20002a4c 	.word	0x20002a4c
 800ea14:	20002a18 	.word	0x20002a18
 800ea18:	20002a1c 	.word	0x20002a1c

0800ea1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea22:	e019      	b.n	800ea58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea24:	f000 ff7e 	bl	800f924 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ea28:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <prvCheckTasksWaitingTermination+0x50>)
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	3304      	adds	r3, #4
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fe faf7 	bl	800d028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea3a:	4b0d      	ldr	r3, [pc, #52]	; (800ea70 <prvCheckTasksWaitingTermination+0x54>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	4a0b      	ldr	r2, [pc, #44]	; (800ea70 <prvCheckTasksWaitingTermination+0x54>)
 800ea42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea44:	4b0b      	ldr	r3, [pc, #44]	; (800ea74 <prvCheckTasksWaitingTermination+0x58>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3b01      	subs	r3, #1
 800ea4a:	4a0a      	ldr	r2, [pc, #40]	; (800ea74 <prvCheckTasksWaitingTermination+0x58>)
 800ea4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea4e:	f000 ff99 	bl	800f984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 f810 	bl	800ea78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea58:	4b06      	ldr	r3, [pc, #24]	; (800ea74 <prvCheckTasksWaitingTermination+0x58>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1e1      	bne.n	800ea24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea60:	bf00      	nop
 800ea62:	bf00      	nop
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20002a34 	.word	0x20002a34
 800ea70:	20002a60 	.word	0x20002a60
 800ea74:	20002a48 	.word	0x20002a48

0800ea78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	335c      	adds	r3, #92	; 0x5c
 800ea84:	4618      	mov	r0, r3
 800ea86:	f001 fbd9 	bl	801023c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d108      	bne.n	800eaa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f001 f929 	bl	800fcf0 <vPortFree>
				vPortFree( pxTCB );
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f001 f926 	bl	800fcf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eaa4:	e018      	b.n	800ead8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d103      	bne.n	800eab8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f001 f91d 	bl	800fcf0 <vPortFree>
	}
 800eab6:	e00f      	b.n	800ead8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d00a      	beq.n	800ead8 <prvDeleteTCB+0x60>
	__asm volatile
 800eac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	60fb      	str	r3, [r7, #12]
}
 800ead4:	bf00      	nop
 800ead6:	e7fe      	b.n	800ead6 <prvDeleteTCB+0x5e>
	}
 800ead8:	bf00      	nop
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eae6:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <prvResetNextTaskUnblockTime+0x44>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d101      	bne.n	800eaf4 <prvResetNextTaskUnblockTime+0x14>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e000      	b.n	800eaf6 <prvResetNextTaskUnblockTime+0x16>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d004      	beq.n	800eb04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <prvResetNextTaskUnblockTime+0x48>)
 800eafc:	f04f 32ff 	mov.w	r2, #4294967295
 800eb00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb02:	e008      	b.n	800eb16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eb04:	4b07      	ldr	r3, [pc, #28]	; (800eb24 <prvResetNextTaskUnblockTime+0x44>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	4a05      	ldr	r2, [pc, #20]	; (800eb28 <prvResetNextTaskUnblockTime+0x48>)
 800eb14:	6013      	str	r3, [r2, #0]
}
 800eb16:	bf00      	nop
 800eb18:	370c      	adds	r7, #12
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	20002a18 	.word	0x20002a18
 800eb28:	20002a80 	.word	0x20002a80

0800eb2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb32:	4b0b      	ldr	r3, [pc, #44]	; (800eb60 <xTaskGetSchedulerState+0x34>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d102      	bne.n	800eb40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	607b      	str	r3, [r7, #4]
 800eb3e:	e008      	b.n	800eb52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb40:	4b08      	ldr	r3, [pc, #32]	; (800eb64 <xTaskGetSchedulerState+0x38>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d102      	bne.n	800eb4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb48:	2302      	movs	r3, #2
 800eb4a:	607b      	str	r3, [r7, #4]
 800eb4c:	e001      	b.n	800eb52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb52:	687b      	ldr	r3, [r7, #4]
	}
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	20002a6c 	.word	0x20002a6c
 800eb64:	20002a88 	.word	0x20002a88

0800eb68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb74:	2300      	movs	r3, #0
 800eb76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d06e      	beq.n	800ec5c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb82:	4b39      	ldr	r3, [pc, #228]	; (800ec68 <xTaskPriorityInherit+0x100>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d25e      	bcs.n	800ec4a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	db06      	blt.n	800eba2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb94:	4b34      	ldr	r3, [pc, #208]	; (800ec68 <xTaskPriorityInherit+0x100>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9a:	f1c3 0207 	rsb	r2, r3, #7
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	6959      	ldr	r1, [r3, #20]
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebaa:	4613      	mov	r3, r2
 800ebac:	009b      	lsls	r3, r3, #2
 800ebae:	4413      	add	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4a2e      	ldr	r2, [pc, #184]	; (800ec6c <xTaskPriorityInherit+0x104>)
 800ebb4:	4413      	add	r3, r2
 800ebb6:	4299      	cmp	r1, r3
 800ebb8:	d101      	bne.n	800ebbe <xTaskPriorityInherit+0x56>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e000      	b.n	800ebc0 <xTaskPriorityInherit+0x58>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d03a      	beq.n	800ec3a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	3304      	adds	r3, #4
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fe fa2d 	bl	800d028 <uxListRemove>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d115      	bne.n	800ec00 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd8:	4924      	ldr	r1, [pc, #144]	; (800ec6c <xTaskPriorityInherit+0x104>)
 800ebda:	4613      	mov	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	4413      	add	r3, r2
 800ebe0:	009b      	lsls	r3, r3, #2
 800ebe2:	440b      	add	r3, r1
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d10a      	bne.n	800ec00 <xTaskPriorityInherit+0x98>
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebee:	2201      	movs	r2, #1
 800ebf0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf4:	43da      	mvns	r2, r3
 800ebf6:	4b1e      	ldr	r3, [pc, #120]	; (800ec70 <xTaskPriorityInherit+0x108>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4013      	ands	r3, r2
 800ebfc:	4a1c      	ldr	r2, [pc, #112]	; (800ec70 <xTaskPriorityInherit+0x108>)
 800ebfe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec00:	4b19      	ldr	r3, [pc, #100]	; (800ec68 <xTaskPriorityInherit+0x100>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0e:	2201      	movs	r2, #1
 800ec10:	409a      	lsls	r2, r3
 800ec12:	4b17      	ldr	r3, [pc, #92]	; (800ec70 <xTaskPriorityInherit+0x108>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4313      	orrs	r3, r2
 800ec18:	4a15      	ldr	r2, [pc, #84]	; (800ec70 <xTaskPriorityInherit+0x108>)
 800ec1a:	6013      	str	r3, [r2, #0]
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec20:	4613      	mov	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4413      	add	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4a10      	ldr	r2, [pc, #64]	; (800ec6c <xTaskPriorityInherit+0x104>)
 800ec2a:	441a      	add	r2, r3
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	3304      	adds	r3, #4
 800ec30:	4619      	mov	r1, r3
 800ec32:	4610      	mov	r0, r2
 800ec34:	f7fe f99b 	bl	800cf6e <vListInsertEnd>
 800ec38:	e004      	b.n	800ec44 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec3a:	4b0b      	ldr	r3, [pc, #44]	; (800ec68 <xTaskPriorityInherit+0x100>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec44:	2301      	movs	r3, #1
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	e008      	b.n	800ec5c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec4e:	4b06      	ldr	r3, [pc, #24]	; (800ec68 <xTaskPriorityInherit+0x100>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d201      	bcs.n	800ec5c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
	}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	20002960 	.word	0x20002960
 800ec6c:	20002964 	.word	0x20002964
 800ec70:	20002a68 	.word	0x20002a68

0800ec74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b086      	sub	sp, #24
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec80:	2300      	movs	r3, #0
 800ec82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d06e      	beq.n	800ed68 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec8a:	4b3a      	ldr	r3, [pc, #232]	; (800ed74 <xTaskPriorityDisinherit+0x100>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	693a      	ldr	r2, [r7, #16]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d00a      	beq.n	800ecaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec98:	f383 8811 	msr	BASEPRI, r3
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	60fb      	str	r3, [r7, #12]
}
 800eca6:	bf00      	nop
 800eca8:	e7fe      	b.n	800eca8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10a      	bne.n	800ecc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	60bb      	str	r3, [r7, #8]
}
 800ecc4:	bf00      	nop
 800ecc6:	e7fe      	b.n	800ecc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eccc:	1e5a      	subs	r2, r3, #1
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d044      	beq.n	800ed68 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d140      	bne.n	800ed68 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe f99c 	bl	800d028 <uxListRemove>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d115      	bne.n	800ed22 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfa:	491f      	ldr	r1, [pc, #124]	; (800ed78 <xTaskPriorityDisinherit+0x104>)
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	4413      	add	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	440b      	add	r3, r1
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10a      	bne.n	800ed22 <xTaskPriorityDisinherit+0xae>
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed10:	2201      	movs	r2, #1
 800ed12:	fa02 f303 	lsl.w	r3, r2, r3
 800ed16:	43da      	mvns	r2, r3
 800ed18:	4b18      	ldr	r3, [pc, #96]	; (800ed7c <xTaskPriorityDisinherit+0x108>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	4a17      	ldr	r2, [pc, #92]	; (800ed7c <xTaskPriorityDisinherit+0x108>)
 800ed20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	f1c3 0207 	rsb	r2, r3, #7
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	409a      	lsls	r2, r3
 800ed3e:	4b0f      	ldr	r3, [pc, #60]	; (800ed7c <xTaskPriorityDisinherit+0x108>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	4a0d      	ldr	r2, [pc, #52]	; (800ed7c <xTaskPriorityDisinherit+0x108>)
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4413      	add	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	4a08      	ldr	r2, [pc, #32]	; (800ed78 <xTaskPriorityDisinherit+0x104>)
 800ed56:	441a      	add	r2, r3
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f7fe f905 	bl	800cf6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed64:	2301      	movs	r3, #1
 800ed66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed68:	697b      	ldr	r3, [r7, #20]
	}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	20002960 	.word	0x20002960
 800ed78:	20002964 	.word	0x20002964
 800ed7c:	20002a68 	.word	0x20002a68

0800ed80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b088      	sub	sp, #32
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f000 8088 	beq.w	800eeaa <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d10a      	bne.n	800edb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda6:	f383 8811 	msr	BASEPRI, r3
 800edaa:	f3bf 8f6f 	isb	sy
 800edae:	f3bf 8f4f 	dsb	sy
 800edb2:	60fb      	str	r3, [r7, #12]
}
 800edb4:	bf00      	nop
 800edb6:	e7fe      	b.n	800edb6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d902      	bls.n	800edc8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	61fb      	str	r3, [r7, #28]
 800edc6:	e002      	b.n	800edce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edcc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d068      	beq.n	800eeaa <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eddc:	697a      	ldr	r2, [r7, #20]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d163      	bne.n	800eeaa <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ede2:	4b34      	ldr	r3, [pc, #208]	; (800eeb4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	69ba      	ldr	r2, [r7, #24]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d10a      	bne.n	800ee02 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	60bb      	str	r3, [r7, #8]
}
 800edfe:	bf00      	nop
 800ee00:	e7fe      	b.n	800ee00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee02:	69bb      	ldr	r3, [r7, #24]
 800ee04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee06:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	69fa      	ldr	r2, [r7, #28]
 800ee0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	db04      	blt.n	800ee20 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	f1c3 0207 	rsb	r2, r3, #7
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	6959      	ldr	r1, [r3, #20]
 800ee24:	693a      	ldr	r2, [r7, #16]
 800ee26:	4613      	mov	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	4a22      	ldr	r2, [pc, #136]	; (800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee30:	4413      	add	r3, r2
 800ee32:	4299      	cmp	r1, r3
 800ee34:	d101      	bne.n	800ee3a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ee36:	2301      	movs	r3, #1
 800ee38:	e000      	b.n	800ee3c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d034      	beq.n	800eeaa <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	3304      	adds	r3, #4
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe f8ef 	bl	800d028 <uxListRemove>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d115      	bne.n	800ee7c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee54:	4918      	ldr	r1, [pc, #96]	; (800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee56:	4613      	mov	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	440b      	add	r3, r1
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10a      	bne.n	800ee7c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee70:	43da      	mvns	r2, r3
 800ee72:	4b12      	ldr	r3, [pc, #72]	; (800eebc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4013      	ands	r3, r2
 800ee78:	4a10      	ldr	r2, [pc, #64]	; (800eebc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee7a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee80:	2201      	movs	r2, #1
 800ee82:	409a      	lsls	r2, r3
 800ee84:	4b0d      	ldr	r3, [pc, #52]	; (800eebc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	4a0c      	ldr	r2, [pc, #48]	; (800eebc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee8c:	6013      	str	r3, [r2, #0]
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee92:	4613      	mov	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	4413      	add	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4a07      	ldr	r2, [pc, #28]	; (800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee9c:	441a      	add	r2, r3
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	3304      	adds	r3, #4
 800eea2:	4619      	mov	r1, r3
 800eea4:	4610      	mov	r0, r2
 800eea6:	f7fe f862 	bl	800cf6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eeaa:	bf00      	nop
 800eeac:	3720      	adds	r7, #32
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20002960 	.word	0x20002960
 800eeb8:	20002964 	.word	0x20002964
 800eebc:	20002a68 	.word	0x20002a68

0800eec0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800eec0:	b480      	push	{r7}
 800eec2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eec4:	4b07      	ldr	r3, [pc, #28]	; (800eee4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d004      	beq.n	800eed6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eecc:	4b05      	ldr	r3, [pc, #20]	; (800eee4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eed2:	3201      	adds	r2, #1
 800eed4:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800eed6:	4b03      	ldr	r3, [pc, #12]	; (800eee4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eed8:	681b      	ldr	r3, [r3, #0]
	}
 800eeda:	4618      	mov	r0, r3
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	20002960 	.word	0x20002960

0800eee8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eef2:	4b29      	ldr	r3, [pc, #164]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eef8:	4b28      	ldr	r3, [pc, #160]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3304      	adds	r3, #4
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe f892 	bl	800d028 <uxListRemove>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10b      	bne.n	800ef22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ef0a:	4b24      	ldr	r3, [pc, #144]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef10:	2201      	movs	r2, #1
 800ef12:	fa02 f303 	lsl.w	r3, r2, r3
 800ef16:	43da      	mvns	r2, r3
 800ef18:	4b21      	ldr	r3, [pc, #132]	; (800efa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	4a20      	ldr	r2, [pc, #128]	; (800efa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef28:	d10a      	bne.n	800ef40 <prvAddCurrentTaskToDelayedList+0x58>
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d007      	beq.n	800ef40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef30:	4b1a      	ldr	r3, [pc, #104]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	3304      	adds	r3, #4
 800ef36:	4619      	mov	r1, r3
 800ef38:	481a      	ldr	r0, [pc, #104]	; (800efa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef3a:	f7fe f818 	bl	800cf6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef3e:	e026      	b.n	800ef8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4413      	add	r3, r2
 800ef46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef48:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef50:	68ba      	ldr	r2, [r7, #8]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d209      	bcs.n	800ef6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef58:	4b13      	ldr	r3, [pc, #76]	; (800efa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	4b0f      	ldr	r3, [pc, #60]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3304      	adds	r3, #4
 800ef62:	4619      	mov	r1, r3
 800ef64:	4610      	mov	r0, r2
 800ef66:	f7fe f826 	bl	800cfb6 <vListInsert>
}
 800ef6a:	e010      	b.n	800ef8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef6c:	4b0f      	ldr	r3, [pc, #60]	; (800efac <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	4b0a      	ldr	r3, [pc, #40]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	3304      	adds	r3, #4
 800ef76:	4619      	mov	r1, r3
 800ef78:	4610      	mov	r0, r2
 800ef7a:	f7fe f81c 	bl	800cfb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef7e:	4b0c      	ldr	r3, [pc, #48]	; (800efb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d202      	bcs.n	800ef8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ef88:	4a09      	ldr	r2, [pc, #36]	; (800efb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	6013      	str	r3, [r2, #0]
}
 800ef8e:	bf00      	nop
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	20002a64 	.word	0x20002a64
 800ef9c:	20002960 	.word	0x20002960
 800efa0:	20002a68 	.word	0x20002a68
 800efa4:	20002a4c 	.word	0x20002a4c
 800efa8:	20002a1c 	.word	0x20002a1c
 800efac:	20002a18 	.word	0x20002a18
 800efb0:	20002a80 	.word	0x20002a80

0800efb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b08a      	sub	sp, #40	; 0x28
 800efb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800efba:	2300      	movs	r3, #0
 800efbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800efbe:	f000 fb41 	bl	800f644 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800efc2:	4b1c      	ldr	r3, [pc, #112]	; (800f034 <xTimerCreateTimerTask+0x80>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d021      	beq.n	800f00e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800efca:	2300      	movs	r3, #0
 800efcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800efd2:	1d3a      	adds	r2, r7, #4
 800efd4:	f107 0108 	add.w	r1, r7, #8
 800efd8:	f107 030c 	add.w	r3, r7, #12
 800efdc:	4618      	mov	r0, r3
 800efde:	f7f4 fbcb 	bl	8003778 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800efe2:	6879      	ldr	r1, [r7, #4]
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	9202      	str	r2, [sp, #8]
 800efea:	9301      	str	r3, [sp, #4]
 800efec:	2302      	movs	r3, #2
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	2300      	movs	r3, #0
 800eff2:	460a      	mov	r2, r1
 800eff4:	4910      	ldr	r1, [pc, #64]	; (800f038 <xTimerCreateTimerTask+0x84>)
 800eff6:	4811      	ldr	r0, [pc, #68]	; (800f03c <xTimerCreateTimerTask+0x88>)
 800eff8:	f7fe fed2 	bl	800dda0 <xTaskCreateStatic>
 800effc:	4603      	mov	r3, r0
 800effe:	4a10      	ldr	r2, [pc, #64]	; (800f040 <xTimerCreateTimerTask+0x8c>)
 800f000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f002:	4b0f      	ldr	r3, [pc, #60]	; (800f040 <xTimerCreateTimerTask+0x8c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d001      	beq.n	800f00e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f00a:	2301      	movs	r3, #1
 800f00c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10a      	bne.n	800f02a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	613b      	str	r3, [r7, #16]
}
 800f026:	bf00      	nop
 800f028:	e7fe      	b.n	800f028 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f02a:	697b      	ldr	r3, [r7, #20]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	20002abc 	.word	0x20002abc
 800f038:	0801098c 	.word	0x0801098c
 800f03c:	0800f281 	.word	0x0800f281
 800f040:	20002ac0 	.word	0x20002ac0

0800f044 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f044:	b580      	push	{r7, lr}
 800f046:	b088      	sub	sp, #32
 800f048:	af02      	add	r7, sp, #8
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f052:	202c      	movs	r0, #44	; 0x2c
 800f054:	f000 fd88 	bl	800fb68 <pvPortMalloc>
 800f058:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00d      	beq.n	800f07c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	6a3b      	ldr	r3, [r7, #32]
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	68b9      	ldr	r1, [r7, #8]
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f000 f846 	bl	800f100 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800f07c:	697b      	ldr	r3, [r7, #20]
	}
 800f07e:	4618      	mov	r0, r3
 800f080:	3718      	adds	r7, #24
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f086:	b580      	push	{r7, lr}
 800f088:	b08a      	sub	sp, #40	; 0x28
 800f08a:	af02      	add	r7, sp, #8
 800f08c:	60f8      	str	r0, [r7, #12]
 800f08e:	60b9      	str	r1, [r7, #8]
 800f090:	607a      	str	r2, [r7, #4]
 800f092:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f094:	232c      	movs	r3, #44	; 0x2c
 800f096:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	2b2c      	cmp	r3, #44	; 0x2c
 800f09c:	d00a      	beq.n	800f0b4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	61bb      	str	r3, [r7, #24]
}
 800f0b0:	bf00      	nop
 800f0b2:	e7fe      	b.n	800f0b2 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10a      	bne.n	800f0d0 <xTimerCreateStatic+0x4a>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	617b      	str	r3, [r7, #20]
}
 800f0cc:	bf00      	nop
 800f0ce:	e7fe      	b.n	800f0ce <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00d      	beq.n	800f0f6 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	9301      	str	r3, [sp, #4]
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	68b9      	ldr	r1, [r7, #8]
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 f809 	bl	800f100 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800f0f6:	69fb      	ldr	r3, [r7, #28]
	}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3720      	adds	r7, #32
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10a      	bne.n	800f12a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f118:	f383 8811 	msr	BASEPRI, r3
 800f11c:	f3bf 8f6f 	isb	sy
 800f120:	f3bf 8f4f 	dsb	sy
 800f124:	617b      	str	r3, [r7, #20]
}
 800f126:	bf00      	nop
 800f128:	e7fe      	b.n	800f128 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d015      	beq.n	800f15c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f130:	f000 fa88 	bl	800f644 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	6a3a      	ldr	r2, [r7, #32]
 800f150:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f154:	3304      	adds	r3, #4
 800f156:	4618      	mov	r0, r3
 800f158:	f7fd fefc 	bl	800cf54 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f15c:	bf00      	nop
 800f15e:	3718      	adds	r7, #24
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b08a      	sub	sp, #40	; 0x28
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	607a      	str	r2, [r7, #4]
 800f170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f172:	2300      	movs	r3, #0
 800f174:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10a      	bne.n	800f192 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f180:	f383 8811 	msr	BASEPRI, r3
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	623b      	str	r3, [r7, #32]
}
 800f18e:	bf00      	nop
 800f190:	e7fe      	b.n	800f190 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f192:	4b1a      	ldr	r3, [pc, #104]	; (800f1fc <xTimerGenericCommand+0x98>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d02a      	beq.n	800f1f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	2b05      	cmp	r3, #5
 800f1aa:	dc18      	bgt.n	800f1de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1ac:	f7ff fcbe 	bl	800eb2c <xTaskGetSchedulerState>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d109      	bne.n	800f1ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1b6:	4b11      	ldr	r3, [pc, #68]	; (800f1fc <xTimerGenericCommand+0x98>)
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	f107 0114 	add.w	r1, r7, #20
 800f1be:	2300      	movs	r3, #0
 800f1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1c2:	f7fe f8e5 	bl	800d390 <xQueueGenericSend>
 800f1c6:	6278      	str	r0, [r7, #36]	; 0x24
 800f1c8:	e012      	b.n	800f1f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1ca:	4b0c      	ldr	r3, [pc, #48]	; (800f1fc <xTimerGenericCommand+0x98>)
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	f107 0114 	add.w	r1, r7, #20
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f7fe f8db 	bl	800d390 <xQueueGenericSend>
 800f1da:	6278      	str	r0, [r7, #36]	; 0x24
 800f1dc:	e008      	b.n	800f1f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1de:	4b07      	ldr	r3, [pc, #28]	; (800f1fc <xTimerGenericCommand+0x98>)
 800f1e0:	6818      	ldr	r0, [r3, #0]
 800f1e2:	f107 0114 	add.w	r1, r7, #20
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	683a      	ldr	r2, [r7, #0]
 800f1ea:	f7fe f9cf 	bl	800d58c <xQueueGenericSendFromISR>
 800f1ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3728      	adds	r7, #40	; 0x28
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	20002abc 	.word	0x20002abc

0800f200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b088      	sub	sp, #32
 800f204:	af02      	add	r7, sp, #8
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f20a:	4b1c      	ldr	r3, [pc, #112]	; (800f27c <prvProcessExpiredTimer+0x7c>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	3304      	adds	r3, #4
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fd ff05 	bl	800d028 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	69db      	ldr	r3, [r3, #28]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d122      	bne.n	800f26c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	699a      	ldr	r2, [r3, #24]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	18d1      	adds	r1, r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	6978      	ldr	r0, [r7, #20]
 800f234:	f000 f8c8 	bl	800f3c8 <prvInsertTimerInActiveList>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d016      	beq.n	800f26c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f23e:	2300      	movs	r3, #0
 800f240:	9300      	str	r3, [sp, #0]
 800f242:	2300      	movs	r3, #0
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	2100      	movs	r1, #0
 800f248:	6978      	ldr	r0, [r7, #20]
 800f24a:	f7ff ff8b 	bl	800f164 <xTimerGenericCommand>
 800f24e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d10a      	bne.n	800f26c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25a:	f383 8811 	msr	BASEPRI, r3
 800f25e:	f3bf 8f6f 	isb	sy
 800f262:	f3bf 8f4f 	dsb	sy
 800f266:	60fb      	str	r3, [r7, #12]
}
 800f268:	bf00      	nop
 800f26a:	e7fe      	b.n	800f26a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f270:	6978      	ldr	r0, [r7, #20]
 800f272:	4798      	blx	r3
}
 800f274:	bf00      	nop
 800f276:	3718      	adds	r7, #24
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	20002ab4 	.word	0x20002ab4

0800f280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f288:	f107 0308 	add.w	r3, r7, #8
 800f28c:	4618      	mov	r0, r3
 800f28e:	f000 f857 	bl	800f340 <prvGetNextExpireTime>
 800f292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	4619      	mov	r1, r3
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f000 f803 	bl	800f2a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f29e:	f000 f8d5 	bl	800f44c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2a2:	e7f1      	b.n	800f288 <prvTimerTask+0x8>

0800f2a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2ae:	f7ff f83b 	bl	800e328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2b2:	f107 0308 	add.w	r3, r7, #8
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 f866 	bl	800f388 <prvSampleTimeNow>
 800f2bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d130      	bne.n	800f326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10a      	bne.n	800f2e0 <prvProcessTimerOrBlockTask+0x3c>
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d806      	bhi.n	800f2e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2d2:	f7ff f837 	bl	800e344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2d6:	68f9      	ldr	r1, [r7, #12]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7ff ff91 	bl	800f200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2de:	e024      	b.n	800f32a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d008      	beq.n	800f2f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2e6:	4b13      	ldr	r3, [pc, #76]	; (800f334 <prvProcessTimerOrBlockTask+0x90>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	bf0c      	ite	eq
 800f2f0:	2301      	moveq	r3, #1
 800f2f2:	2300      	movne	r3, #0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2f8:	4b0f      	ldr	r3, [pc, #60]	; (800f338 <prvProcessTimerOrBlockTask+0x94>)
 800f2fa:	6818      	ldr	r0, [r3, #0]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	4619      	mov	r1, r3
 800f306:	f7fe fd17 	bl	800dd38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f30a:	f7ff f81b 	bl	800e344 <xTaskResumeAll>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10a      	bne.n	800f32a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f314:	4b09      	ldr	r3, [pc, #36]	; (800f33c <prvProcessTimerOrBlockTask+0x98>)
 800f316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	f3bf 8f6f 	isb	sy
}
 800f324:	e001      	b.n	800f32a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f326:	f7ff f80d 	bl	800e344 <xTaskResumeAll>
}
 800f32a:	bf00      	nop
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	20002ab8 	.word	0x20002ab8
 800f338:	20002abc 	.word	0x20002abc
 800f33c:	e000ed04 	.word	0xe000ed04

0800f340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f348:	4b0e      	ldr	r3, [pc, #56]	; (800f384 <prvGetNextExpireTime+0x44>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bf0c      	ite	eq
 800f352:	2301      	moveq	r3, #1
 800f354:	2300      	movne	r3, #0
 800f356:	b2db      	uxtb	r3, r3
 800f358:	461a      	mov	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d105      	bne.n	800f372 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f366:	4b07      	ldr	r3, [pc, #28]	; (800f384 <prvGetNextExpireTime+0x44>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	60fb      	str	r3, [r7, #12]
 800f370:	e001      	b.n	800f376 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f372:	2300      	movs	r3, #0
 800f374:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f376:	68fb      	ldr	r3, [r7, #12]
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3714      	adds	r7, #20
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr
 800f384:	20002ab4 	.word	0x20002ab4

0800f388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f390:	f7ff f874 	bl	800e47c <xTaskGetTickCount>
 800f394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f396:	4b0b      	ldr	r3, [pc, #44]	; (800f3c4 <prvSampleTimeNow+0x3c>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d205      	bcs.n	800f3ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3a0:	f000 f8ee 	bl	800f580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	601a      	str	r2, [r3, #0]
 800f3aa:	e002      	b.n	800f3b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3b2:	4a04      	ldr	r2, [pc, #16]	; (800f3c4 <prvSampleTimeNow+0x3c>)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20002ac4 	.word	0x20002ac4

0800f3c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	68ba      	ldr	r2, [r7, #8]
 800f3de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d812      	bhi.n	800f414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	1ad2      	subs	r2, r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	699b      	ldr	r3, [r3, #24]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d302      	bcc.n	800f402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	617b      	str	r3, [r7, #20]
 800f400:	e01b      	b.n	800f43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f402:	4b10      	ldr	r3, [pc, #64]	; (800f444 <prvInsertTimerInActiveList+0x7c>)
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	3304      	adds	r3, #4
 800f40a:	4619      	mov	r1, r3
 800f40c:	4610      	mov	r0, r2
 800f40e:	f7fd fdd2 	bl	800cfb6 <vListInsert>
 800f412:	e012      	b.n	800f43a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d206      	bcs.n	800f42a <prvInsertTimerInActiveList+0x62>
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	429a      	cmp	r2, r3
 800f422:	d302      	bcc.n	800f42a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f424:	2301      	movs	r3, #1
 800f426:	617b      	str	r3, [r7, #20]
 800f428:	e007      	b.n	800f43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f42a:	4b07      	ldr	r3, [pc, #28]	; (800f448 <prvInsertTimerInActiveList+0x80>)
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	3304      	adds	r3, #4
 800f432:	4619      	mov	r1, r3
 800f434:	4610      	mov	r0, r2
 800f436:	f7fd fdbe 	bl	800cfb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f43a:	697b      	ldr	r3, [r7, #20]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	20002ab8 	.word	0x20002ab8
 800f448:	20002ab4 	.word	0x20002ab4

0800f44c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b08c      	sub	sp, #48	; 0x30
 800f450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f452:	e081      	b.n	800f558 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	2b00      	cmp	r3, #0
 800f458:	db7e      	blt.n	800f558 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d004      	beq.n	800f470 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f468:	3304      	adds	r3, #4
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fd fddc 	bl	800d028 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f470:	1d3b      	adds	r3, r7, #4
 800f472:	4618      	mov	r0, r3
 800f474:	f7ff ff88 	bl	800f388 <prvSampleTimeNow>
 800f478:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	2b09      	cmp	r3, #9
 800f47e:	d86a      	bhi.n	800f556 <prvProcessReceivedCommands+0x10a>
 800f480:	a201      	add	r2, pc, #4	; (adr r2, 800f488 <prvProcessReceivedCommands+0x3c>)
 800f482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f486:	bf00      	nop
 800f488:	0800f4b1 	.word	0x0800f4b1
 800f48c:	0800f4b1 	.word	0x0800f4b1
 800f490:	0800f4b1 	.word	0x0800f4b1
 800f494:	0800f559 	.word	0x0800f559
 800f498:	0800f50d 	.word	0x0800f50d
 800f49c:	0800f545 	.word	0x0800f545
 800f4a0:	0800f4b1 	.word	0x0800f4b1
 800f4a4:	0800f4b1 	.word	0x0800f4b1
 800f4a8:	0800f559 	.word	0x0800f559
 800f4ac:	0800f50d 	.word	0x0800f50d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	18d1      	adds	r1, r2, r3
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6a3a      	ldr	r2, [r7, #32]
 800f4bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4be:	f7ff ff83 	bl	800f3c8 <prvInsertTimerInActiveList>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d047      	beq.n	800f558 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d13f      	bne.n	800f558 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4d8:	68fa      	ldr	r2, [r7, #12]
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	699b      	ldr	r3, [r3, #24]
 800f4de:	441a      	add	r2, r3
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	2100      	movs	r1, #0
 800f4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ea:	f7ff fe3b 	bl	800f164 <xTimerGenericCommand>
 800f4ee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d130      	bne.n	800f558 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	61bb      	str	r3, [r7, #24]
}
 800f508:	bf00      	nop
 800f50a:	e7fe      	b.n	800f50a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f50c:	68fa      	ldr	r2, [r7, #12]
 800f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f510:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10a      	bne.n	800f530 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	617b      	str	r3, [r7, #20]
}
 800f52c:	bf00      	nop
 800f52e:	e7fe      	b.n	800f52e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	699a      	ldr	r2, [r3, #24]
 800f534:	6a3b      	ldr	r3, [r7, #32]
 800f536:	18d1      	adds	r1, r2, r3
 800f538:	6a3b      	ldr	r3, [r7, #32]
 800f53a:	6a3a      	ldr	r2, [r7, #32]
 800f53c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f53e:	f7ff ff43 	bl	800f3c8 <prvInsertTimerInActiveList>
					break;
 800f542:	e009      	b.n	800f558 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d104      	bne.n	800f558 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800f54e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f550:	f000 fbce 	bl	800fcf0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f554:	e000      	b.n	800f558 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800f556:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f558:	4b08      	ldr	r3, [pc, #32]	; (800f57c <prvProcessReceivedCommands+0x130>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f107 0108 	add.w	r1, r7, #8
 800f560:	2200      	movs	r2, #0
 800f562:	4618      	mov	r0, r3
 800f564:	f7fe f8aa 	bl	800d6bc <xQueueReceive>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f47f af72 	bne.w	800f454 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f570:	bf00      	nop
 800f572:	bf00      	nop
 800f574:	3728      	adds	r7, #40	; 0x28
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	20002abc 	.word	0x20002abc

0800f580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b088      	sub	sp, #32
 800f584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f586:	e045      	b.n	800f614 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f588:	4b2c      	ldr	r3, [pc, #176]	; (800f63c <prvSwitchTimerLists+0xbc>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f592:	4b2a      	ldr	r3, [pc, #168]	; (800f63c <prvSwitchTimerLists+0xbc>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	3304      	adds	r3, #4
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fd fd41 	bl	800d028 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	69db      	ldr	r3, [r3, #28]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d12e      	bne.n	800f614 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	699b      	ldr	r3, [r3, #24]
 800f5ba:	693a      	ldr	r2, [r7, #16]
 800f5bc:	4413      	add	r3, r2
 800f5be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d90e      	bls.n	800f5e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5d4:	4b19      	ldr	r3, [pc, #100]	; (800f63c <prvSwitchTimerLists+0xbc>)
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3304      	adds	r3, #4
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4610      	mov	r0, r2
 800f5e0:	f7fd fce9 	bl	800cfb6 <vListInsert>
 800f5e4:	e016      	b.n	800f614 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	693a      	ldr	r2, [r7, #16]
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f7ff fdb7 	bl	800f164 <xTimerGenericCommand>
 800f5f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d10a      	bne.n	800f614 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	603b      	str	r3, [r7, #0]
}
 800f610:	bf00      	nop
 800f612:	e7fe      	b.n	800f612 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f614:	4b09      	ldr	r3, [pc, #36]	; (800f63c <prvSwitchTimerLists+0xbc>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d1b4      	bne.n	800f588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f61e:	4b07      	ldr	r3, [pc, #28]	; (800f63c <prvSwitchTimerLists+0xbc>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f624:	4b06      	ldr	r3, [pc, #24]	; (800f640 <prvSwitchTimerLists+0xc0>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a04      	ldr	r2, [pc, #16]	; (800f63c <prvSwitchTimerLists+0xbc>)
 800f62a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f62c:	4a04      	ldr	r2, [pc, #16]	; (800f640 <prvSwitchTimerLists+0xc0>)
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	6013      	str	r3, [r2, #0]
}
 800f632:	bf00      	nop
 800f634:	3718      	adds	r7, #24
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20002ab4 	.word	0x20002ab4
 800f640:	20002ab8 	.word	0x20002ab8

0800f644 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f64a:	f000 f96b 	bl	800f924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f64e:	4b15      	ldr	r3, [pc, #84]	; (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d120      	bne.n	800f698 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f656:	4814      	ldr	r0, [pc, #80]	; (800f6a8 <prvCheckForValidListAndQueue+0x64>)
 800f658:	f7fd fc5c 	bl	800cf14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f65c:	4813      	ldr	r0, [pc, #76]	; (800f6ac <prvCheckForValidListAndQueue+0x68>)
 800f65e:	f7fd fc59 	bl	800cf14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f662:	4b13      	ldr	r3, [pc, #76]	; (800f6b0 <prvCheckForValidListAndQueue+0x6c>)
 800f664:	4a10      	ldr	r2, [pc, #64]	; (800f6a8 <prvCheckForValidListAndQueue+0x64>)
 800f666:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f668:	4b12      	ldr	r3, [pc, #72]	; (800f6b4 <prvCheckForValidListAndQueue+0x70>)
 800f66a:	4a10      	ldr	r2, [pc, #64]	; (800f6ac <prvCheckForValidListAndQueue+0x68>)
 800f66c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f66e:	2300      	movs	r3, #0
 800f670:	9300      	str	r3, [sp, #0]
 800f672:	4b11      	ldr	r3, [pc, #68]	; (800f6b8 <prvCheckForValidListAndQueue+0x74>)
 800f674:	4a11      	ldr	r2, [pc, #68]	; (800f6bc <prvCheckForValidListAndQueue+0x78>)
 800f676:	210c      	movs	r1, #12
 800f678:	200a      	movs	r0, #10
 800f67a:	f7fd fd67 	bl	800d14c <xQueueGenericCreateStatic>
 800f67e:	4603      	mov	r3, r0
 800f680:	4a08      	ldr	r2, [pc, #32]	; (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f682:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f684:	4b07      	ldr	r3, [pc, #28]	; (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d005      	beq.n	800f698 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f68c:	4b05      	ldr	r3, [pc, #20]	; (800f6a4 <prvCheckForValidListAndQueue+0x60>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	490b      	ldr	r1, [pc, #44]	; (800f6c0 <prvCheckForValidListAndQueue+0x7c>)
 800f692:	4618      	mov	r0, r3
 800f694:	f7fe fb26 	bl	800dce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f698:	f000 f974 	bl	800f984 <vPortExitCritical>
}
 800f69c:	bf00      	nop
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20002abc 	.word	0x20002abc
 800f6a8:	20002a8c 	.word	0x20002a8c
 800f6ac:	20002aa0 	.word	0x20002aa0
 800f6b0:	20002ab4 	.word	0x20002ab4
 800f6b4:	20002ab8 	.word	0x20002ab8
 800f6b8:	20002b40 	.word	0x20002b40
 800f6bc:	20002ac8 	.word	0x20002ac8
 800f6c0:	08010994 	.word	0x08010994

0800f6c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	3b04      	subs	r3, #4
 800f6d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f6dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	3b04      	subs	r3, #4
 800f6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	f023 0201 	bic.w	r2, r3, #1
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3b04      	subs	r3, #4
 800f6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6f4:	4a0c      	ldr	r2, [pc, #48]	; (800f728 <pxPortInitialiseStack+0x64>)
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3b14      	subs	r3, #20
 800f6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3b04      	subs	r3, #4
 800f70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f06f 0202 	mvn.w	r2, #2
 800f712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3b20      	subs	r3, #32
 800f718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f71a:	68fb      	ldr	r3, [r7, #12]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3714      	adds	r7, #20
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr
 800f728:	0800f72d 	.word	0x0800f72d

0800f72c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f736:	4b12      	ldr	r3, [pc, #72]	; (800f780 <prvTaskExitError+0x54>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f73e:	d00a      	beq.n	800f756 <prvTaskExitError+0x2a>
	__asm volatile
 800f740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f744:	f383 8811 	msr	BASEPRI, r3
 800f748:	f3bf 8f6f 	isb	sy
 800f74c:	f3bf 8f4f 	dsb	sy
 800f750:	60fb      	str	r3, [r7, #12]
}
 800f752:	bf00      	nop
 800f754:	e7fe      	b.n	800f754 <prvTaskExitError+0x28>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	60bb      	str	r3, [r7, #8]
}
 800f768:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f76a:	bf00      	nop
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d0fc      	beq.n	800f76c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f772:	bf00      	nop
 800f774:	bf00      	nop
 800f776:	3714      	adds	r7, #20
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr
 800f780:	20000124 	.word	0x20000124
	...

0800f790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <pxCurrentTCBConst2>)
 800f792:	6819      	ldr	r1, [r3, #0]
 800f794:	6808      	ldr	r0, [r1, #0]
 800f796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79a:	f380 8809 	msr	PSP, r0
 800f79e:	f3bf 8f6f 	isb	sy
 800f7a2:	f04f 0000 	mov.w	r0, #0
 800f7a6:	f380 8811 	msr	BASEPRI, r0
 800f7aa:	4770      	bx	lr
 800f7ac:	f3af 8000 	nop.w

0800f7b0 <pxCurrentTCBConst2>:
 800f7b0:	20002960 	.word	0x20002960
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop

0800f7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7b8:	4808      	ldr	r0, [pc, #32]	; (800f7dc <prvPortStartFirstTask+0x24>)
 800f7ba:	6800      	ldr	r0, [r0, #0]
 800f7bc:	6800      	ldr	r0, [r0, #0]
 800f7be:	f380 8808 	msr	MSP, r0
 800f7c2:	f04f 0000 	mov.w	r0, #0
 800f7c6:	f380 8814 	msr	CONTROL, r0
 800f7ca:	b662      	cpsie	i
 800f7cc:	b661      	cpsie	f
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	df00      	svc	0
 800f7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7da:	bf00      	nop
 800f7dc:	e000ed08 	.word	0xe000ed08

0800f7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b086      	sub	sp, #24
 800f7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f7e6:	4b46      	ldr	r3, [pc, #280]	; (800f900 <xPortStartScheduler+0x120>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a46      	ldr	r2, [pc, #280]	; (800f904 <xPortStartScheduler+0x124>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d10a      	bne.n	800f806 <xPortStartScheduler+0x26>
	__asm volatile
 800f7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f4:	f383 8811 	msr	BASEPRI, r3
 800f7f8:	f3bf 8f6f 	isb	sy
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	613b      	str	r3, [r7, #16]
}
 800f802:	bf00      	nop
 800f804:	e7fe      	b.n	800f804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f806:	4b3e      	ldr	r3, [pc, #248]	; (800f900 <xPortStartScheduler+0x120>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a3f      	ldr	r2, [pc, #252]	; (800f908 <xPortStartScheduler+0x128>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d10a      	bne.n	800f826 <xPortStartScheduler+0x46>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	60fb      	str	r3, [r7, #12]
}
 800f822:	bf00      	nop
 800f824:	e7fe      	b.n	800f824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f826:	4b39      	ldr	r3, [pc, #228]	; (800f90c <xPortStartScheduler+0x12c>)
 800f828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	22ff      	movs	r2, #255	; 0xff
 800f836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f840:	78fb      	ldrb	r3, [r7, #3]
 800f842:	b2db      	uxtb	r3, r3
 800f844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	4b31      	ldr	r3, [pc, #196]	; (800f910 <xPortStartScheduler+0x130>)
 800f84c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f84e:	4b31      	ldr	r3, [pc, #196]	; (800f914 <xPortStartScheduler+0x134>)
 800f850:	2207      	movs	r2, #7
 800f852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f854:	e009      	b.n	800f86a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f856:	4b2f      	ldr	r3, [pc, #188]	; (800f914 <xPortStartScheduler+0x134>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	4a2d      	ldr	r2, [pc, #180]	; (800f914 <xPortStartScheduler+0x134>)
 800f85e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f860:	78fb      	ldrb	r3, [r7, #3]
 800f862:	b2db      	uxtb	r3, r3
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	b2db      	uxtb	r3, r3
 800f868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f86a:	78fb      	ldrb	r3, [r7, #3]
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f872:	2b80      	cmp	r3, #128	; 0x80
 800f874:	d0ef      	beq.n	800f856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f876:	4b27      	ldr	r3, [pc, #156]	; (800f914 <xPortStartScheduler+0x134>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f1c3 0307 	rsb	r3, r3, #7
 800f87e:	2b04      	cmp	r3, #4
 800f880:	d00a      	beq.n	800f898 <xPortStartScheduler+0xb8>
	__asm volatile
 800f882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f886:	f383 8811 	msr	BASEPRI, r3
 800f88a:	f3bf 8f6f 	isb	sy
 800f88e:	f3bf 8f4f 	dsb	sy
 800f892:	60bb      	str	r3, [r7, #8]
}
 800f894:	bf00      	nop
 800f896:	e7fe      	b.n	800f896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f898:	4b1e      	ldr	r3, [pc, #120]	; (800f914 <xPortStartScheduler+0x134>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	021b      	lsls	r3, r3, #8
 800f89e:	4a1d      	ldr	r2, [pc, #116]	; (800f914 <xPortStartScheduler+0x134>)
 800f8a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8a2:	4b1c      	ldr	r3, [pc, #112]	; (800f914 <xPortStartScheduler+0x134>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8aa:	4a1a      	ldr	r2, [pc, #104]	; (800f914 <xPortStartScheduler+0x134>)
 800f8ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8b6:	4b18      	ldr	r3, [pc, #96]	; (800f918 <xPortStartScheduler+0x138>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4a17      	ldr	r2, [pc, #92]	; (800f918 <xPortStartScheduler+0x138>)
 800f8bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f8c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8c2:	4b15      	ldr	r3, [pc, #84]	; (800f918 <xPortStartScheduler+0x138>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a14      	ldr	r2, [pc, #80]	; (800f918 <xPortStartScheduler+0x138>)
 800f8c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f8cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f8ce:	f000 f8dd 	bl	800fa8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8d2:	4b12      	ldr	r3, [pc, #72]	; (800f91c <xPortStartScheduler+0x13c>)
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f8d8:	f000 f8fc 	bl	800fad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f8dc:	4b10      	ldr	r3, [pc, #64]	; (800f920 <xPortStartScheduler+0x140>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a0f      	ldr	r2, [pc, #60]	; (800f920 <xPortStartScheduler+0x140>)
 800f8e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f8e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f8e8:	f7ff ff66 	bl	800f7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8ec:	f7fe fea6 	bl	800e63c <vTaskSwitchContext>
	prvTaskExitError();
 800f8f0:	f7ff ff1c 	bl	800f72c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3718      	adds	r7, #24
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	e000ed00 	.word	0xe000ed00
 800f904:	410fc271 	.word	0x410fc271
 800f908:	410fc270 	.word	0x410fc270
 800f90c:	e000e400 	.word	0xe000e400
 800f910:	20002b88 	.word	0x20002b88
 800f914:	20002b8c 	.word	0x20002b8c
 800f918:	e000ed20 	.word	0xe000ed20
 800f91c:	20000124 	.word	0x20000124
 800f920:	e000ef34 	.word	0xe000ef34

0800f924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
	__asm volatile
 800f92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92e:	f383 8811 	msr	BASEPRI, r3
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	f3bf 8f4f 	dsb	sy
 800f93a:	607b      	str	r3, [r7, #4]
}
 800f93c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f93e:	4b0f      	ldr	r3, [pc, #60]	; (800f97c <vPortEnterCritical+0x58>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	3301      	adds	r3, #1
 800f944:	4a0d      	ldr	r2, [pc, #52]	; (800f97c <vPortEnterCritical+0x58>)
 800f946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f948:	4b0c      	ldr	r3, [pc, #48]	; (800f97c <vPortEnterCritical+0x58>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d10f      	bne.n	800f970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f950:	4b0b      	ldr	r3, [pc, #44]	; (800f980 <vPortEnterCritical+0x5c>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00a      	beq.n	800f970 <vPortEnterCritical+0x4c>
	__asm volatile
 800f95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95e:	f383 8811 	msr	BASEPRI, r3
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	f3bf 8f4f 	dsb	sy
 800f96a:	603b      	str	r3, [r7, #0]
}
 800f96c:	bf00      	nop
 800f96e:	e7fe      	b.n	800f96e <vPortEnterCritical+0x4a>
	}
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	20000124 	.word	0x20000124
 800f980:	e000ed04 	.word	0xe000ed04

0800f984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f98a:	4b12      	ldr	r3, [pc, #72]	; (800f9d4 <vPortExitCritical+0x50>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10a      	bne.n	800f9a8 <vPortExitCritical+0x24>
	__asm volatile
 800f992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	607b      	str	r3, [r7, #4]
}
 800f9a4:	bf00      	nop
 800f9a6:	e7fe      	b.n	800f9a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f9a8:	4b0a      	ldr	r3, [pc, #40]	; (800f9d4 <vPortExitCritical+0x50>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	4a09      	ldr	r2, [pc, #36]	; (800f9d4 <vPortExitCritical+0x50>)
 800f9b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9b2:	4b08      	ldr	r3, [pc, #32]	; (800f9d4 <vPortExitCritical+0x50>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d105      	bne.n	800f9c6 <vPortExitCritical+0x42>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	f383 8811 	msr	BASEPRI, r3
}
 800f9c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9c6:	bf00      	nop
 800f9c8:	370c      	adds	r7, #12
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	20000124 	.word	0x20000124
	...

0800f9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f9e0:	f3ef 8009 	mrs	r0, PSP
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	4b15      	ldr	r3, [pc, #84]	; (800fa40 <pxCurrentTCBConst>)
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	f01e 0f10 	tst.w	lr, #16
 800f9f0:	bf08      	it	eq
 800f9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9fa:	6010      	str	r0, [r2, #0]
 800f9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa04:	f380 8811 	msr	BASEPRI, r0
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f7fe fe14 	bl	800e63c <vTaskSwitchContext>
 800fa14:	f04f 0000 	mov.w	r0, #0
 800fa18:	f380 8811 	msr	BASEPRI, r0
 800fa1c:	bc09      	pop	{r0, r3}
 800fa1e:	6819      	ldr	r1, [r3, #0]
 800fa20:	6808      	ldr	r0, [r1, #0]
 800fa22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa26:	f01e 0f10 	tst.w	lr, #16
 800fa2a:	bf08      	it	eq
 800fa2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa30:	f380 8809 	msr	PSP, r0
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w

0800fa40 <pxCurrentTCBConst>:
 800fa40:	20002960 	.word	0x20002960
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa44:	bf00      	nop
 800fa46:	bf00      	nop

0800fa48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	607b      	str	r3, [r7, #4]
}
 800fa60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa62:	f7fe fd2d 	bl	800e4c0 <xTaskIncrementTick>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d003      	beq.n	800fa74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa6c:	4b06      	ldr	r3, [pc, #24]	; (800fa88 <SysTick_Handler+0x40>)
 800fa6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa72:	601a      	str	r2, [r3, #0]
 800fa74:	2300      	movs	r3, #0
 800fa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	f383 8811 	msr	BASEPRI, r3
}
 800fa7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa80:	bf00      	nop
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa90:	4b0b      	ldr	r3, [pc, #44]	; (800fac0 <vPortSetupTimerInterrupt+0x34>)
 800fa92:	2200      	movs	r2, #0
 800fa94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa96:	4b0b      	ldr	r3, [pc, #44]	; (800fac4 <vPortSetupTimerInterrupt+0x38>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa9c:	4b0a      	ldr	r3, [pc, #40]	; (800fac8 <vPortSetupTimerInterrupt+0x3c>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a0a      	ldr	r2, [pc, #40]	; (800facc <vPortSetupTimerInterrupt+0x40>)
 800faa2:	fba2 2303 	umull	r2, r3, r2, r3
 800faa6:	099b      	lsrs	r3, r3, #6
 800faa8:	4a09      	ldr	r2, [pc, #36]	; (800fad0 <vPortSetupTimerInterrupt+0x44>)
 800faaa:	3b01      	subs	r3, #1
 800faac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800faae:	4b04      	ldr	r3, [pc, #16]	; (800fac0 <vPortSetupTimerInterrupt+0x34>)
 800fab0:	2207      	movs	r2, #7
 800fab2:	601a      	str	r2, [r3, #0]
}
 800fab4:	bf00      	nop
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	e000e010 	.word	0xe000e010
 800fac4:	e000e018 	.word	0xe000e018
 800fac8:	20000038 	.word	0x20000038
 800facc:	10624dd3 	.word	0x10624dd3
 800fad0:	e000e014 	.word	0xe000e014

0800fad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fae4 <vPortEnableVFP+0x10>
 800fad8:	6801      	ldr	r1, [r0, #0]
 800fada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fade:	6001      	str	r1, [r0, #0]
 800fae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fae2:	bf00      	nop
 800fae4:	e000ed88 	.word	0xe000ed88

0800fae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fae8:	b480      	push	{r7}
 800faea:	b085      	sub	sp, #20
 800faec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800faee:	f3ef 8305 	mrs	r3, IPSR
 800faf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b0f      	cmp	r3, #15
 800faf8:	d914      	bls.n	800fb24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fafa:	4a17      	ldr	r2, [pc, #92]	; (800fb58 <vPortValidateInterruptPriority+0x70>)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	4413      	add	r3, r2
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb04:	4b15      	ldr	r3, [pc, #84]	; (800fb5c <vPortValidateInterruptPriority+0x74>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	7afa      	ldrb	r2, [r7, #11]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d20a      	bcs.n	800fb24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb12:	f383 8811 	msr	BASEPRI, r3
 800fb16:	f3bf 8f6f 	isb	sy
 800fb1a:	f3bf 8f4f 	dsb	sy
 800fb1e:	607b      	str	r3, [r7, #4]
}
 800fb20:	bf00      	nop
 800fb22:	e7fe      	b.n	800fb22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb24:	4b0e      	ldr	r3, [pc, #56]	; (800fb60 <vPortValidateInterruptPriority+0x78>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb2c:	4b0d      	ldr	r3, [pc, #52]	; (800fb64 <vPortValidateInterruptPriority+0x7c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d90a      	bls.n	800fb4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb38:	f383 8811 	msr	BASEPRI, r3
 800fb3c:	f3bf 8f6f 	isb	sy
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	603b      	str	r3, [r7, #0]
}
 800fb46:	bf00      	nop
 800fb48:	e7fe      	b.n	800fb48 <vPortValidateInterruptPriority+0x60>
	}
 800fb4a:	bf00      	nop
 800fb4c:	3714      	adds	r7, #20
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop
 800fb58:	e000e3f0 	.word	0xe000e3f0
 800fb5c:	20002b88 	.word	0x20002b88
 800fb60:	e000ed0c 	.word	0xe000ed0c
 800fb64:	20002b8c 	.word	0x20002b8c

0800fb68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b08a      	sub	sp, #40	; 0x28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb70:	2300      	movs	r3, #0
 800fb72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb74:	f7fe fbd8 	bl	800e328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb78:	4b58      	ldr	r3, [pc, #352]	; (800fcdc <pvPortMalloc+0x174>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d101      	bne.n	800fb84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb80:	f000 f910 	bl	800fda4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb84:	4b56      	ldr	r3, [pc, #344]	; (800fce0 <pvPortMalloc+0x178>)
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4013      	ands	r3, r2
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f040 808e 	bne.w	800fcae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d01d      	beq.n	800fbd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fb98:	2208      	movs	r2, #8
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f003 0307 	and.w	r3, r3, #7
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d014      	beq.n	800fbd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f023 0307 	bic.w	r3, r3, #7
 800fbb0:	3308      	adds	r3, #8
 800fbb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f003 0307 	and.w	r3, r3, #7
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d00a      	beq.n	800fbd4 <pvPortMalloc+0x6c>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	617b      	str	r3, [r7, #20]
}
 800fbd0:	bf00      	nop
 800fbd2:	e7fe      	b.n	800fbd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d069      	beq.n	800fcae <pvPortMalloc+0x146>
 800fbda:	4b42      	ldr	r3, [pc, #264]	; (800fce4 <pvPortMalloc+0x17c>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d864      	bhi.n	800fcae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbe4:	4b40      	ldr	r3, [pc, #256]	; (800fce8 <pvPortMalloc+0x180>)
 800fbe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbe8:	4b3f      	ldr	r3, [pc, #252]	; (800fce8 <pvPortMalloc+0x180>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbee:	e004      	b.n	800fbfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d903      	bls.n	800fc0c <pvPortMalloc+0xa4>
 800fc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1f1      	bne.n	800fbf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc0c:	4b33      	ldr	r3, [pc, #204]	; (800fcdc <pvPortMalloc+0x174>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d04b      	beq.n	800fcae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc16:	6a3b      	ldr	r3, [r7, #32]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2208      	movs	r2, #8
 800fc1c:	4413      	add	r3, r2
 800fc1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	6a3b      	ldr	r3, [r7, #32]
 800fc26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	685a      	ldr	r2, [r3, #4]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	1ad2      	subs	r2, r2, r3
 800fc30:	2308      	movs	r3, #8
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d91f      	bls.n	800fc78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	f003 0307 	and.w	r3, r3, #7
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00a      	beq.n	800fc60 <pvPortMalloc+0xf8>
	__asm volatile
 800fc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4e:	f383 8811 	msr	BASEPRI, r3
 800fc52:	f3bf 8f6f 	isb	sy
 800fc56:	f3bf 8f4f 	dsb	sy
 800fc5a:	613b      	str	r3, [r7, #16]
}
 800fc5c:	bf00      	nop
 800fc5e:	e7fe      	b.n	800fc5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	1ad2      	subs	r2, r2, r3
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc72:	69b8      	ldr	r0, [r7, #24]
 800fc74:	f000 f8f8 	bl	800fe68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc78:	4b1a      	ldr	r3, [pc, #104]	; (800fce4 <pvPortMalloc+0x17c>)
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	1ad3      	subs	r3, r2, r3
 800fc82:	4a18      	ldr	r2, [pc, #96]	; (800fce4 <pvPortMalloc+0x17c>)
 800fc84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc86:	4b17      	ldr	r3, [pc, #92]	; (800fce4 <pvPortMalloc+0x17c>)
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	4b18      	ldr	r3, [pc, #96]	; (800fcec <pvPortMalloc+0x184>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d203      	bcs.n	800fc9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc92:	4b14      	ldr	r3, [pc, #80]	; (800fce4 <pvPortMalloc+0x17c>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a15      	ldr	r2, [pc, #84]	; (800fcec <pvPortMalloc+0x184>)
 800fc98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	4b10      	ldr	r3, [pc, #64]	; (800fce0 <pvPortMalloc+0x178>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	431a      	orrs	r2, r3
 800fca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fcae:	f7fe fb49 	bl	800e344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	f003 0307 	and.w	r3, r3, #7
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00a      	beq.n	800fcd2 <pvPortMalloc+0x16a>
	__asm volatile
 800fcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc0:	f383 8811 	msr	BASEPRI, r3
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	f3bf 8f4f 	dsb	sy
 800fccc:	60fb      	str	r3, [r7, #12]
}
 800fcce:	bf00      	nop
 800fcd0:	e7fe      	b.n	800fcd0 <pvPortMalloc+0x168>
	return pvReturn;
 800fcd2:	69fb      	ldr	r3, [r7, #28]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3728      	adds	r7, #40	; 0x28
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	20002f98 	.word	0x20002f98
 800fce0:	20002fa4 	.word	0x20002fa4
 800fce4:	20002f9c 	.word	0x20002f9c
 800fce8:	20002f90 	.word	0x20002f90
 800fcec:	20002fa0 	.word	0x20002fa0

0800fcf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d048      	beq.n	800fd94 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd02:	2308      	movs	r3, #8
 800fd04:	425b      	negs	r3, r3
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	4413      	add	r3, r2
 800fd0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	4b21      	ldr	r3, [pc, #132]	; (800fd9c <vPortFree+0xac>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4013      	ands	r3, r2
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10a      	bne.n	800fd34 <vPortFree+0x44>
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	60fb      	str	r3, [r7, #12]
}
 800fd30:	bf00      	nop
 800fd32:	e7fe      	b.n	800fd32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00a      	beq.n	800fd52 <vPortFree+0x62>
	__asm volatile
 800fd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd40:	f383 8811 	msr	BASEPRI, r3
 800fd44:	f3bf 8f6f 	isb	sy
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	60bb      	str	r3, [r7, #8]
}
 800fd4e:	bf00      	nop
 800fd50:	e7fe      	b.n	800fd50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	685a      	ldr	r2, [r3, #4]
 800fd56:	4b11      	ldr	r3, [pc, #68]	; (800fd9c <vPortFree+0xac>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4013      	ands	r3, r2
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d019      	beq.n	800fd94 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d115      	bne.n	800fd94 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	4b0b      	ldr	r3, [pc, #44]	; (800fd9c <vPortFree+0xac>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	43db      	mvns	r3, r3
 800fd72:	401a      	ands	r2, r3
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd78:	f7fe fad6 	bl	800e328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	685a      	ldr	r2, [r3, #4]
 800fd80:	4b07      	ldr	r3, [pc, #28]	; (800fda0 <vPortFree+0xb0>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4413      	add	r3, r2
 800fd86:	4a06      	ldr	r2, [pc, #24]	; (800fda0 <vPortFree+0xb0>)
 800fd88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd8a:	6938      	ldr	r0, [r7, #16]
 800fd8c:	f000 f86c 	bl	800fe68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fd90:	f7fe fad8 	bl	800e344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd94:	bf00      	nop
 800fd96:	3718      	adds	r7, #24
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	20002fa4 	.word	0x20002fa4
 800fda0:	20002f9c 	.word	0x20002f9c

0800fda4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fda4:	b480      	push	{r7}
 800fda6:	b085      	sub	sp, #20
 800fda8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fdb0:	4b27      	ldr	r3, [pc, #156]	; (800fe50 <prvHeapInit+0xac>)
 800fdb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f003 0307 	and.w	r3, r3, #7
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00c      	beq.n	800fdd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	3307      	adds	r3, #7
 800fdc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f023 0307 	bic.w	r3, r3, #7
 800fdca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdcc:	68ba      	ldr	r2, [r7, #8]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	4a1f      	ldr	r2, [pc, #124]	; (800fe50 <prvHeapInit+0xac>)
 800fdd4:	4413      	add	r3, r2
 800fdd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fddc:	4a1d      	ldr	r2, [pc, #116]	; (800fe54 <prvHeapInit+0xb0>)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fde2:	4b1c      	ldr	r3, [pc, #112]	; (800fe54 <prvHeapInit+0xb0>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	4413      	add	r3, r2
 800fdee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fdf0:	2208      	movs	r2, #8
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	1a9b      	subs	r3, r3, r2
 800fdf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f023 0307 	bic.w	r3, r3, #7
 800fdfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	4a15      	ldr	r2, [pc, #84]	; (800fe58 <prvHeapInit+0xb4>)
 800fe04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe06:	4b14      	ldr	r3, [pc, #80]	; (800fe58 <prvHeapInit+0xb4>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe0e:	4b12      	ldr	r3, [pc, #72]	; (800fe58 <prvHeapInit+0xb4>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2200      	movs	r2, #0
 800fe14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	1ad2      	subs	r2, r2, r3
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe24:	4b0c      	ldr	r3, [pc, #48]	; (800fe58 <prvHeapInit+0xb4>)
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	4a0a      	ldr	r2, [pc, #40]	; (800fe5c <prvHeapInit+0xb8>)
 800fe32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	4a09      	ldr	r2, [pc, #36]	; (800fe60 <prvHeapInit+0xbc>)
 800fe3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe3c:	4b09      	ldr	r3, [pc, #36]	; (800fe64 <prvHeapInit+0xc0>)
 800fe3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe42:	601a      	str	r2, [r3, #0]
}
 800fe44:	bf00      	nop
 800fe46:	3714      	adds	r7, #20
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4e:	4770      	bx	lr
 800fe50:	20002b90 	.word	0x20002b90
 800fe54:	20002f90 	.word	0x20002f90
 800fe58:	20002f98 	.word	0x20002f98
 800fe5c:	20002fa0 	.word	0x20002fa0
 800fe60:	20002f9c 	.word	0x20002f9c
 800fe64:	20002fa4 	.word	0x20002fa4

0800fe68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe70:	4b28      	ldr	r3, [pc, #160]	; (800ff14 <prvInsertBlockIntoFreeList+0xac>)
 800fe72:	60fb      	str	r3, [r7, #12]
 800fe74:	e002      	b.n	800fe7c <prvInsertBlockIntoFreeList+0x14>
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	60fb      	str	r3, [r7, #12]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d8f7      	bhi.n	800fe76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	4413      	add	r3, r2
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d108      	bne.n	800feaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	441a      	add	r2, r3
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	68ba      	ldr	r2, [r7, #8]
 800feb4:	441a      	add	r2, r3
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	429a      	cmp	r2, r3
 800febc:	d118      	bne.n	800fef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	4b15      	ldr	r3, [pc, #84]	; (800ff18 <prvInsertBlockIntoFreeList+0xb0>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d00d      	beq.n	800fee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	441a      	add	r2, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	601a      	str	r2, [r3, #0]
 800fee4:	e008      	b.n	800fef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fee6:	4b0c      	ldr	r3, [pc, #48]	; (800ff18 <prvInsertBlockIntoFreeList+0xb0>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	e003      	b.n	800fef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d002      	beq.n	800ff06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff06:	bf00      	nop
 800ff08:	3714      	adds	r7, #20
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop
 800ff14:	20002f90 	.word	0x20002f90
 800ff18:	20002f98 	.word	0x20002f98

0800ff1c <swapfunc>:
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	b510      	push	{r4, lr}
 800ff20:	d00a      	beq.n	800ff38 <swapfunc+0x1c>
 800ff22:	0892      	lsrs	r2, r2, #2
 800ff24:	3a01      	subs	r2, #1
 800ff26:	6803      	ldr	r3, [r0, #0]
 800ff28:	680c      	ldr	r4, [r1, #0]
 800ff2a:	f840 4b04 	str.w	r4, [r0], #4
 800ff2e:	2a00      	cmp	r2, #0
 800ff30:	f841 3b04 	str.w	r3, [r1], #4
 800ff34:	dcf6      	bgt.n	800ff24 <swapfunc+0x8>
 800ff36:	bd10      	pop	{r4, pc}
 800ff38:	4402      	add	r2, r0
 800ff3a:	780c      	ldrb	r4, [r1, #0]
 800ff3c:	7803      	ldrb	r3, [r0, #0]
 800ff3e:	f800 4b01 	strb.w	r4, [r0], #1
 800ff42:	f801 3b01 	strb.w	r3, [r1], #1
 800ff46:	1a13      	subs	r3, r2, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	dcf6      	bgt.n	800ff3a <swapfunc+0x1e>
 800ff4c:	e7f3      	b.n	800ff36 <swapfunc+0x1a>

0800ff4e <med3.constprop.0>:
 800ff4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff50:	460c      	mov	r4, r1
 800ff52:	4615      	mov	r5, r2
 800ff54:	4607      	mov	r7, r0
 800ff56:	461e      	mov	r6, r3
 800ff58:	4798      	blx	r3
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	4620      	mov	r0, r4
 800ff60:	da0a      	bge.n	800ff78 <med3.constprop.0+0x2a>
 800ff62:	47b0      	blx	r6
 800ff64:	2800      	cmp	r0, #0
 800ff66:	db05      	blt.n	800ff74 <med3.constprop.0+0x26>
 800ff68:	4629      	mov	r1, r5
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	47b0      	blx	r6
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	db0a      	blt.n	800ff88 <med3.constprop.0+0x3a>
 800ff72:	463c      	mov	r4, r7
 800ff74:	4620      	mov	r0, r4
 800ff76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff78:	47b0      	blx	r6
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	dcfa      	bgt.n	800ff74 <med3.constprop.0+0x26>
 800ff7e:	4629      	mov	r1, r5
 800ff80:	4638      	mov	r0, r7
 800ff82:	47b0      	blx	r6
 800ff84:	2800      	cmp	r0, #0
 800ff86:	dbf4      	blt.n	800ff72 <med3.constprop.0+0x24>
 800ff88:	462c      	mov	r4, r5
 800ff8a:	e7f3      	b.n	800ff74 <med3.constprop.0+0x26>

0800ff8c <qsort>:
 800ff8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff90:	469a      	mov	sl, r3
 800ff92:	ea40 0302 	orr.w	r3, r0, r2
 800ff96:	079b      	lsls	r3, r3, #30
 800ff98:	b097      	sub	sp, #92	; 0x5c
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	d11a      	bne.n	800ffd6 <qsort+0x4a>
 800ffa0:	f1b2 0804 	subs.w	r8, r2, #4
 800ffa4:	bf18      	it	ne
 800ffa6:	f04f 0801 	movne.w	r8, #1
 800ffaa:	2300      	movs	r3, #0
 800ffac:	9302      	str	r3, [sp, #8]
 800ffae:	1933      	adds	r3, r6, r4
 800ffb0:	fb04 f701 	mul.w	r7, r4, r1
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	2906      	cmp	r1, #6
 800ffb8:	eb06 0307 	add.w	r3, r6, r7
 800ffbc:	9303      	str	r3, [sp, #12]
 800ffbe:	d82a      	bhi.n	8010016 <qsort+0x8a>
 800ffc0:	9b01      	ldr	r3, [sp, #4]
 800ffc2:	9a03      	ldr	r2, [sp, #12]
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d310      	bcc.n	800ffea <qsort+0x5e>
 800ffc8:	9b02      	ldr	r3, [sp, #8]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f040 811e 	bne.w	801020c <qsort+0x280>
 800ffd0:	b017      	add	sp, #92	; 0x5c
 800ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd6:	f04f 0802 	mov.w	r8, #2
 800ffda:	e7e6      	b.n	800ffaa <qsort+0x1e>
 800ffdc:	4643      	mov	r3, r8
 800ffde:	4622      	mov	r2, r4
 800ffe0:	4639      	mov	r1, r7
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	f7ff ff9a 	bl	800ff1c <swapfunc>
 800ffe8:	e00e      	b.n	8010008 <qsort+0x7c>
 800ffea:	9d01      	ldr	r5, [sp, #4]
 800ffec:	e00d      	b.n	801000a <qsort+0x7e>
 800ffee:	1b2f      	subs	r7, r5, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	4638      	mov	r0, r7
 800fff4:	47d0      	blx	sl
 800fff6:	2800      	cmp	r0, #0
 800fff8:	dd09      	ble.n	801000e <qsort+0x82>
 800fffa:	f1b8 0f00 	cmp.w	r8, #0
 800fffe:	d1ed      	bne.n	800ffdc <qsort+0x50>
 8010000:	682b      	ldr	r3, [r5, #0]
 8010002:	683a      	ldr	r2, [r7, #0]
 8010004:	602a      	str	r2, [r5, #0]
 8010006:	603b      	str	r3, [r7, #0]
 8010008:	463d      	mov	r5, r7
 801000a:	42ae      	cmp	r6, r5
 801000c:	d3ef      	bcc.n	800ffee <qsort+0x62>
 801000e:	9b01      	ldr	r3, [sp, #4]
 8010010:	4423      	add	r3, r4
 8010012:	9301      	str	r3, [sp, #4]
 8010014:	e7d4      	b.n	800ffc0 <qsort+0x34>
 8010016:	ea4f 0951 	mov.w	r9, r1, lsr #1
 801001a:	1b3f      	subs	r7, r7, r4
 801001c:	2907      	cmp	r1, #7
 801001e:	fb04 6909 	mla	r9, r4, r9, r6
 8010022:	4437      	add	r7, r6
 8010024:	d021      	beq.n	801006a <qsort+0xde>
 8010026:	2928      	cmp	r1, #40	; 0x28
 8010028:	d944      	bls.n	80100b4 <qsort+0x128>
 801002a:	08cd      	lsrs	r5, r1, #3
 801002c:	4365      	muls	r5, r4
 801002e:	4653      	mov	r3, sl
 8010030:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8010034:	1971      	adds	r1, r6, r5
 8010036:	4630      	mov	r0, r6
 8010038:	f7ff ff89 	bl	800ff4e <med3.constprop.0>
 801003c:	4649      	mov	r1, r9
 801003e:	eb09 0205 	add.w	r2, r9, r5
 8010042:	4653      	mov	r3, sl
 8010044:	4683      	mov	fp, r0
 8010046:	1b48      	subs	r0, r1, r5
 8010048:	f7ff ff81 	bl	800ff4e <med3.constprop.0>
 801004c:	463a      	mov	r2, r7
 801004e:	4681      	mov	r9, r0
 8010050:	4653      	mov	r3, sl
 8010052:	1b79      	subs	r1, r7, r5
 8010054:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8010058:	f7ff ff79 	bl	800ff4e <med3.constprop.0>
 801005c:	4602      	mov	r2, r0
 801005e:	4649      	mov	r1, r9
 8010060:	4653      	mov	r3, sl
 8010062:	4658      	mov	r0, fp
 8010064:	f7ff ff73 	bl	800ff4e <med3.constprop.0>
 8010068:	4681      	mov	r9, r0
 801006a:	f1b8 0f00 	cmp.w	r8, #0
 801006e:	d124      	bne.n	80100ba <qsort+0x12e>
 8010070:	6833      	ldr	r3, [r6, #0]
 8010072:	f8d9 2000 	ldr.w	r2, [r9]
 8010076:	6032      	str	r2, [r6, #0]
 8010078:	f8c9 3000 	str.w	r3, [r9]
 801007c:	eb06 0b04 	add.w	fp, r6, r4
 8010080:	46b9      	mov	r9, r7
 8010082:	465d      	mov	r5, fp
 8010084:	2300      	movs	r3, #0
 8010086:	45bb      	cmp	fp, r7
 8010088:	d835      	bhi.n	80100f6 <qsort+0x16a>
 801008a:	4631      	mov	r1, r6
 801008c:	4658      	mov	r0, fp
 801008e:	9304      	str	r3, [sp, #16]
 8010090:	47d0      	blx	sl
 8010092:	2800      	cmp	r0, #0
 8010094:	9b04      	ldr	r3, [sp, #16]
 8010096:	dc3e      	bgt.n	8010116 <qsort+0x18a>
 8010098:	d10a      	bne.n	80100b0 <qsort+0x124>
 801009a:	f1b8 0f00 	cmp.w	r8, #0
 801009e:	d113      	bne.n	80100c8 <qsort+0x13c>
 80100a0:	682b      	ldr	r3, [r5, #0]
 80100a2:	f8db 2000 	ldr.w	r2, [fp]
 80100a6:	602a      	str	r2, [r5, #0]
 80100a8:	f8cb 3000 	str.w	r3, [fp]
 80100ac:	4425      	add	r5, r4
 80100ae:	2301      	movs	r3, #1
 80100b0:	44a3      	add	fp, r4
 80100b2:	e7e8      	b.n	8010086 <qsort+0xfa>
 80100b4:	463a      	mov	r2, r7
 80100b6:	46b3      	mov	fp, r6
 80100b8:	e7d1      	b.n	801005e <qsort+0xd2>
 80100ba:	4643      	mov	r3, r8
 80100bc:	4622      	mov	r2, r4
 80100be:	4649      	mov	r1, r9
 80100c0:	4630      	mov	r0, r6
 80100c2:	f7ff ff2b 	bl	800ff1c <swapfunc>
 80100c6:	e7d9      	b.n	801007c <qsort+0xf0>
 80100c8:	4643      	mov	r3, r8
 80100ca:	4622      	mov	r2, r4
 80100cc:	4659      	mov	r1, fp
 80100ce:	4628      	mov	r0, r5
 80100d0:	f7ff ff24 	bl	800ff1c <swapfunc>
 80100d4:	e7ea      	b.n	80100ac <qsort+0x120>
 80100d6:	d10b      	bne.n	80100f0 <qsort+0x164>
 80100d8:	f1b8 0f00 	cmp.w	r8, #0
 80100dc:	d114      	bne.n	8010108 <qsort+0x17c>
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	f8d9 2000 	ldr.w	r2, [r9]
 80100e4:	603a      	str	r2, [r7, #0]
 80100e6:	f8c9 3000 	str.w	r3, [r9]
 80100ea:	eba9 0904 	sub.w	r9, r9, r4
 80100ee:	2301      	movs	r3, #1
 80100f0:	9f04      	ldr	r7, [sp, #16]
 80100f2:	45bb      	cmp	fp, r7
 80100f4:	d90f      	bls.n	8010116 <qsort+0x18a>
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d143      	bne.n	8010182 <qsort+0x1f6>
 80100fa:	9b01      	ldr	r3, [sp, #4]
 80100fc:	9a03      	ldr	r2, [sp, #12]
 80100fe:	4293      	cmp	r3, r2
 8010100:	f4bf af62 	bcs.w	800ffc8 <qsort+0x3c>
 8010104:	9d01      	ldr	r5, [sp, #4]
 8010106:	e036      	b.n	8010176 <qsort+0x1ea>
 8010108:	4643      	mov	r3, r8
 801010a:	4622      	mov	r2, r4
 801010c:	4649      	mov	r1, r9
 801010e:	4638      	mov	r0, r7
 8010110:	f7ff ff04 	bl	800ff1c <swapfunc>
 8010114:	e7e9      	b.n	80100ea <qsort+0x15e>
 8010116:	4631      	mov	r1, r6
 8010118:	4638      	mov	r0, r7
 801011a:	9305      	str	r3, [sp, #20]
 801011c:	47d0      	blx	sl
 801011e:	1b3b      	subs	r3, r7, r4
 8010120:	2800      	cmp	r0, #0
 8010122:	9304      	str	r3, [sp, #16]
 8010124:	9b05      	ldr	r3, [sp, #20]
 8010126:	dad6      	bge.n	80100d6 <qsort+0x14a>
 8010128:	f1b8 0f00 	cmp.w	r8, #0
 801012c:	d006      	beq.n	801013c <qsort+0x1b0>
 801012e:	4643      	mov	r3, r8
 8010130:	4622      	mov	r2, r4
 8010132:	4639      	mov	r1, r7
 8010134:	4658      	mov	r0, fp
 8010136:	f7ff fef1 	bl	800ff1c <swapfunc>
 801013a:	e005      	b.n	8010148 <qsort+0x1bc>
 801013c:	f8db 3000 	ldr.w	r3, [fp]
 8010140:	683a      	ldr	r2, [r7, #0]
 8010142:	f8cb 2000 	str.w	r2, [fp]
 8010146:	603b      	str	r3, [r7, #0]
 8010148:	9f04      	ldr	r7, [sp, #16]
 801014a:	e7b0      	b.n	80100ae <qsort+0x122>
 801014c:	4643      	mov	r3, r8
 801014e:	4622      	mov	r2, r4
 8010150:	4639      	mov	r1, r7
 8010152:	4628      	mov	r0, r5
 8010154:	f7ff fee2 	bl	800ff1c <swapfunc>
 8010158:	e00c      	b.n	8010174 <qsort+0x1e8>
 801015a:	1b2f      	subs	r7, r5, r4
 801015c:	4629      	mov	r1, r5
 801015e:	4638      	mov	r0, r7
 8010160:	47d0      	blx	sl
 8010162:	2800      	cmp	r0, #0
 8010164:	dd09      	ble.n	801017a <qsort+0x1ee>
 8010166:	f1b8 0f00 	cmp.w	r8, #0
 801016a:	d1ef      	bne.n	801014c <qsort+0x1c0>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	683a      	ldr	r2, [r7, #0]
 8010170:	602a      	str	r2, [r5, #0]
 8010172:	603b      	str	r3, [r7, #0]
 8010174:	463d      	mov	r5, r7
 8010176:	42ae      	cmp	r6, r5
 8010178:	d3ef      	bcc.n	801015a <qsort+0x1ce>
 801017a:	9b01      	ldr	r3, [sp, #4]
 801017c:	4423      	add	r3, r4
 801017e:	9301      	str	r3, [sp, #4]
 8010180:	e7bb      	b.n	80100fa <qsort+0x16e>
 8010182:	ebab 0305 	sub.w	r3, fp, r5
 8010186:	1baa      	subs	r2, r5, r6
 8010188:	429a      	cmp	r2, r3
 801018a:	bfa8      	it	ge
 801018c:	461a      	movge	r2, r3
 801018e:	9301      	str	r3, [sp, #4]
 8010190:	b12a      	cbz	r2, 801019e <qsort+0x212>
 8010192:	4643      	mov	r3, r8
 8010194:	ebab 0102 	sub.w	r1, fp, r2
 8010198:	4630      	mov	r0, r6
 801019a:	f7ff febf 	bl	800ff1c <swapfunc>
 801019e:	9b03      	ldr	r3, [sp, #12]
 80101a0:	eba3 0209 	sub.w	r2, r3, r9
 80101a4:	eba9 0707 	sub.w	r7, r9, r7
 80101a8:	1b12      	subs	r2, r2, r4
 80101aa:	42ba      	cmp	r2, r7
 80101ac:	bf28      	it	cs
 80101ae:	463a      	movcs	r2, r7
 80101b0:	b12a      	cbz	r2, 80101be <qsort+0x232>
 80101b2:	9903      	ldr	r1, [sp, #12]
 80101b4:	4643      	mov	r3, r8
 80101b6:	1a89      	subs	r1, r1, r2
 80101b8:	4658      	mov	r0, fp
 80101ba:	f7ff feaf 	bl	800ff1c <swapfunc>
 80101be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80101c2:	9b03      	ldr	r3, [sp, #12]
 80101c4:	454f      	cmp	r7, r9
 80101c6:	eba3 0007 	sub.w	r0, r3, r7
 80101ca:	d904      	bls.n	80101d6 <qsort+0x24a>
 80101cc:	4633      	mov	r3, r6
 80101ce:	46b9      	mov	r9, r7
 80101d0:	9f01      	ldr	r7, [sp, #4]
 80101d2:	4606      	mov	r6, r0
 80101d4:	4618      	mov	r0, r3
 80101d6:	42a7      	cmp	r7, r4
 80101d8:	d921      	bls.n	801021e <qsort+0x292>
 80101da:	fbb7 f1f4 	udiv	r1, r7, r4
 80101de:	9b02      	ldr	r3, [sp, #8]
 80101e0:	2b07      	cmp	r3, #7
 80101e2:	d80d      	bhi.n	8010200 <qsort+0x274>
 80101e4:	aa16      	add	r2, sp, #88	; 0x58
 80101e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101ea:	fbb9 f2f4 	udiv	r2, r9, r4
 80101ee:	f843 6c40 	str.w	r6, [r3, #-64]
 80101f2:	f843 2c3c 	str.w	r2, [r3, #-60]
 80101f6:	9b02      	ldr	r3, [sp, #8]
 80101f8:	3301      	adds	r3, #1
 80101fa:	9302      	str	r3, [sp, #8]
 80101fc:	4606      	mov	r6, r0
 80101fe:	e6d6      	b.n	800ffae <qsort+0x22>
 8010200:	4653      	mov	r3, sl
 8010202:	4622      	mov	r2, r4
 8010204:	f7ff fec2 	bl	800ff8c <qsort>
 8010208:	45a1      	cmp	r9, r4
 801020a:	d80b      	bhi.n	8010224 <qsort+0x298>
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	aa16      	add	r2, sp, #88	; 0x58
 8010210:	3b01      	subs	r3, #1
 8010212:	9302      	str	r3, [sp, #8]
 8010214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010218:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 801021c:	e7ee      	b.n	80101fc <qsort+0x270>
 801021e:	45a1      	cmp	r9, r4
 8010220:	f67f aed2 	bls.w	800ffc8 <qsort+0x3c>
 8010224:	fbb9 f1f4 	udiv	r1, r9, r4
 8010228:	4630      	mov	r0, r6
 801022a:	e7e7      	b.n	80101fc <qsort+0x270>

0801022c <memset>:
 801022c:	4402      	add	r2, r0
 801022e:	4603      	mov	r3, r0
 8010230:	4293      	cmp	r3, r2
 8010232:	d100      	bne.n	8010236 <memset+0xa>
 8010234:	4770      	bx	lr
 8010236:	f803 1b01 	strb.w	r1, [r3], #1
 801023a:	e7f9      	b.n	8010230 <memset+0x4>

0801023c <_reclaim_reent>:
 801023c:	4b29      	ldr	r3, [pc, #164]	; (80102e4 <_reclaim_reent+0xa8>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4283      	cmp	r3, r0
 8010242:	b570      	push	{r4, r5, r6, lr}
 8010244:	4604      	mov	r4, r0
 8010246:	d04b      	beq.n	80102e0 <_reclaim_reent+0xa4>
 8010248:	69c3      	ldr	r3, [r0, #28]
 801024a:	b143      	cbz	r3, 801025e <_reclaim_reent+0x22>
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d144      	bne.n	80102dc <_reclaim_reent+0xa0>
 8010252:	69e3      	ldr	r3, [r4, #28]
 8010254:	6819      	ldr	r1, [r3, #0]
 8010256:	b111      	cbz	r1, 801025e <_reclaim_reent+0x22>
 8010258:	4620      	mov	r0, r4
 801025a:	f000 f87f 	bl	801035c <_free_r>
 801025e:	6961      	ldr	r1, [r4, #20]
 8010260:	b111      	cbz	r1, 8010268 <_reclaim_reent+0x2c>
 8010262:	4620      	mov	r0, r4
 8010264:	f000 f87a 	bl	801035c <_free_r>
 8010268:	69e1      	ldr	r1, [r4, #28]
 801026a:	b111      	cbz	r1, 8010272 <_reclaim_reent+0x36>
 801026c:	4620      	mov	r0, r4
 801026e:	f000 f875 	bl	801035c <_free_r>
 8010272:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010274:	b111      	cbz	r1, 801027c <_reclaim_reent+0x40>
 8010276:	4620      	mov	r0, r4
 8010278:	f000 f870 	bl	801035c <_free_r>
 801027c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801027e:	b111      	cbz	r1, 8010286 <_reclaim_reent+0x4a>
 8010280:	4620      	mov	r0, r4
 8010282:	f000 f86b 	bl	801035c <_free_r>
 8010286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010288:	b111      	cbz	r1, 8010290 <_reclaim_reent+0x54>
 801028a:	4620      	mov	r0, r4
 801028c:	f000 f866 	bl	801035c <_free_r>
 8010290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010292:	b111      	cbz	r1, 801029a <_reclaim_reent+0x5e>
 8010294:	4620      	mov	r0, r4
 8010296:	f000 f861 	bl	801035c <_free_r>
 801029a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801029c:	b111      	cbz	r1, 80102a4 <_reclaim_reent+0x68>
 801029e:	4620      	mov	r0, r4
 80102a0:	f000 f85c 	bl	801035c <_free_r>
 80102a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80102a6:	b111      	cbz	r1, 80102ae <_reclaim_reent+0x72>
 80102a8:	4620      	mov	r0, r4
 80102aa:	f000 f857 	bl	801035c <_free_r>
 80102ae:	6a23      	ldr	r3, [r4, #32]
 80102b0:	b1b3      	cbz	r3, 80102e0 <_reclaim_reent+0xa4>
 80102b2:	4620      	mov	r0, r4
 80102b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102b8:	4718      	bx	r3
 80102ba:	5949      	ldr	r1, [r1, r5]
 80102bc:	b941      	cbnz	r1, 80102d0 <_reclaim_reent+0x94>
 80102be:	3504      	adds	r5, #4
 80102c0:	69e3      	ldr	r3, [r4, #28]
 80102c2:	2d80      	cmp	r5, #128	; 0x80
 80102c4:	68d9      	ldr	r1, [r3, #12]
 80102c6:	d1f8      	bne.n	80102ba <_reclaim_reent+0x7e>
 80102c8:	4620      	mov	r0, r4
 80102ca:	f000 f847 	bl	801035c <_free_r>
 80102ce:	e7c0      	b.n	8010252 <_reclaim_reent+0x16>
 80102d0:	680e      	ldr	r6, [r1, #0]
 80102d2:	4620      	mov	r0, r4
 80102d4:	f000 f842 	bl	801035c <_free_r>
 80102d8:	4631      	mov	r1, r6
 80102da:	e7ef      	b.n	80102bc <_reclaim_reent+0x80>
 80102dc:	2500      	movs	r5, #0
 80102de:	e7ef      	b.n	80102c0 <_reclaim_reent+0x84>
 80102e0:	bd70      	pop	{r4, r5, r6, pc}
 80102e2:	bf00      	nop
 80102e4:	20000174 	.word	0x20000174

080102e8 <__errno>:
 80102e8:	4b01      	ldr	r3, [pc, #4]	; (80102f0 <__errno+0x8>)
 80102ea:	6818      	ldr	r0, [r3, #0]
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	20000174 	.word	0x20000174

080102f4 <__libc_init_array>:
 80102f4:	b570      	push	{r4, r5, r6, lr}
 80102f6:	4d0d      	ldr	r5, [pc, #52]	; (801032c <__libc_init_array+0x38>)
 80102f8:	4c0d      	ldr	r4, [pc, #52]	; (8010330 <__libc_init_array+0x3c>)
 80102fa:	1b64      	subs	r4, r4, r5
 80102fc:	10a4      	asrs	r4, r4, #2
 80102fe:	2600      	movs	r6, #0
 8010300:	42a6      	cmp	r6, r4
 8010302:	d109      	bne.n	8010318 <__libc_init_array+0x24>
 8010304:	4d0b      	ldr	r5, [pc, #44]	; (8010334 <__libc_init_array+0x40>)
 8010306:	4c0c      	ldr	r4, [pc, #48]	; (8010338 <__libc_init_array+0x44>)
 8010308:	f000 fa88 	bl	801081c <_init>
 801030c:	1b64      	subs	r4, r4, r5
 801030e:	10a4      	asrs	r4, r4, #2
 8010310:	2600      	movs	r6, #0
 8010312:	42a6      	cmp	r6, r4
 8010314:	d105      	bne.n	8010322 <__libc_init_array+0x2e>
 8010316:	bd70      	pop	{r4, r5, r6, pc}
 8010318:	f855 3b04 	ldr.w	r3, [r5], #4
 801031c:	4798      	blx	r3
 801031e:	3601      	adds	r6, #1
 8010320:	e7ee      	b.n	8010300 <__libc_init_array+0xc>
 8010322:	f855 3b04 	ldr.w	r3, [r5], #4
 8010326:	4798      	blx	r3
 8010328:	3601      	adds	r6, #1
 801032a:	e7f2      	b.n	8010312 <__libc_init_array+0x1e>
 801032c:	08010a18 	.word	0x08010a18
 8010330:	08010a18 	.word	0x08010a18
 8010334:	08010a18 	.word	0x08010a18
 8010338:	08010a1c 	.word	0x08010a1c

0801033c <__retarget_lock_acquire_recursive>:
 801033c:	4770      	bx	lr

0801033e <__retarget_lock_release_recursive>:
 801033e:	4770      	bx	lr

08010340 <memcpy>:
 8010340:	440a      	add	r2, r1
 8010342:	4291      	cmp	r1, r2
 8010344:	f100 33ff 	add.w	r3, r0, #4294967295
 8010348:	d100      	bne.n	801034c <memcpy+0xc>
 801034a:	4770      	bx	lr
 801034c:	b510      	push	{r4, lr}
 801034e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010356:	4291      	cmp	r1, r2
 8010358:	d1f9      	bne.n	801034e <memcpy+0xe>
 801035a:	bd10      	pop	{r4, pc}

0801035c <_free_r>:
 801035c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801035e:	2900      	cmp	r1, #0
 8010360:	d044      	beq.n	80103ec <_free_r+0x90>
 8010362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010366:	9001      	str	r0, [sp, #4]
 8010368:	2b00      	cmp	r3, #0
 801036a:	f1a1 0404 	sub.w	r4, r1, #4
 801036e:	bfb8      	it	lt
 8010370:	18e4      	addlt	r4, r4, r3
 8010372:	f000 f83f 	bl	80103f4 <__malloc_lock>
 8010376:	4a1e      	ldr	r2, [pc, #120]	; (80103f0 <_free_r+0x94>)
 8010378:	9801      	ldr	r0, [sp, #4]
 801037a:	6813      	ldr	r3, [r2, #0]
 801037c:	b933      	cbnz	r3, 801038c <_free_r+0x30>
 801037e:	6063      	str	r3, [r4, #4]
 8010380:	6014      	str	r4, [r2, #0]
 8010382:	b003      	add	sp, #12
 8010384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010388:	f000 b83a 	b.w	8010400 <__malloc_unlock>
 801038c:	42a3      	cmp	r3, r4
 801038e:	d908      	bls.n	80103a2 <_free_r+0x46>
 8010390:	6825      	ldr	r5, [r4, #0]
 8010392:	1961      	adds	r1, r4, r5
 8010394:	428b      	cmp	r3, r1
 8010396:	bf01      	itttt	eq
 8010398:	6819      	ldreq	r1, [r3, #0]
 801039a:	685b      	ldreq	r3, [r3, #4]
 801039c:	1949      	addeq	r1, r1, r5
 801039e:	6021      	streq	r1, [r4, #0]
 80103a0:	e7ed      	b.n	801037e <_free_r+0x22>
 80103a2:	461a      	mov	r2, r3
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	b10b      	cbz	r3, 80103ac <_free_r+0x50>
 80103a8:	42a3      	cmp	r3, r4
 80103aa:	d9fa      	bls.n	80103a2 <_free_r+0x46>
 80103ac:	6811      	ldr	r1, [r2, #0]
 80103ae:	1855      	adds	r5, r2, r1
 80103b0:	42a5      	cmp	r5, r4
 80103b2:	d10b      	bne.n	80103cc <_free_r+0x70>
 80103b4:	6824      	ldr	r4, [r4, #0]
 80103b6:	4421      	add	r1, r4
 80103b8:	1854      	adds	r4, r2, r1
 80103ba:	42a3      	cmp	r3, r4
 80103bc:	6011      	str	r1, [r2, #0]
 80103be:	d1e0      	bne.n	8010382 <_free_r+0x26>
 80103c0:	681c      	ldr	r4, [r3, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	6053      	str	r3, [r2, #4]
 80103c6:	440c      	add	r4, r1
 80103c8:	6014      	str	r4, [r2, #0]
 80103ca:	e7da      	b.n	8010382 <_free_r+0x26>
 80103cc:	d902      	bls.n	80103d4 <_free_r+0x78>
 80103ce:	230c      	movs	r3, #12
 80103d0:	6003      	str	r3, [r0, #0]
 80103d2:	e7d6      	b.n	8010382 <_free_r+0x26>
 80103d4:	6825      	ldr	r5, [r4, #0]
 80103d6:	1961      	adds	r1, r4, r5
 80103d8:	428b      	cmp	r3, r1
 80103da:	bf04      	itt	eq
 80103dc:	6819      	ldreq	r1, [r3, #0]
 80103de:	685b      	ldreq	r3, [r3, #4]
 80103e0:	6063      	str	r3, [r4, #4]
 80103e2:	bf04      	itt	eq
 80103e4:	1949      	addeq	r1, r1, r5
 80103e6:	6021      	streq	r1, [r4, #0]
 80103e8:	6054      	str	r4, [r2, #4]
 80103ea:	e7ca      	b.n	8010382 <_free_r+0x26>
 80103ec:	b003      	add	sp, #12
 80103ee:	bd30      	pop	{r4, r5, pc}
 80103f0:	200030e4 	.word	0x200030e4

080103f4 <__malloc_lock>:
 80103f4:	4801      	ldr	r0, [pc, #4]	; (80103fc <__malloc_lock+0x8>)
 80103f6:	f7ff bfa1 	b.w	801033c <__retarget_lock_acquire_recursive>
 80103fa:	bf00      	nop
 80103fc:	200030e0 	.word	0x200030e0

08010400 <__malloc_unlock>:
 8010400:	4801      	ldr	r0, [pc, #4]	; (8010408 <__malloc_unlock+0x8>)
 8010402:	f7ff bf9c 	b.w	801033e <__retarget_lock_release_recursive>
 8010406:	bf00      	nop
 8010408:	200030e0 	.word	0x200030e0
 801040c:	00000000 	.word	0x00000000

08010410 <exp>:
 8010410:	b538      	push	{r3, r4, r5, lr}
 8010412:	ed2d 8b02 	vpush	{d8}
 8010416:	ec55 4b10 	vmov	r4, r5, d0
 801041a:	f000 f84d 	bl	80104b8 <__ieee754_exp>
 801041e:	eeb0 8a40 	vmov.f32	s16, s0
 8010422:	eef0 8a60 	vmov.f32	s17, s1
 8010426:	ec45 4b10 	vmov	d0, r4, r5
 801042a:	f000 f839 	bl	80104a0 <finite>
 801042e:	b168      	cbz	r0, 801044c <exp+0x3c>
 8010430:	a317      	add	r3, pc, #92	; (adr r3, 8010490 <exp+0x80>)
 8010432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010436:	4620      	mov	r0, r4
 8010438:	4629      	mov	r1, r5
 801043a:	f7f0 fb15 	bl	8000a68 <__aeabi_dcmpgt>
 801043e:	b160      	cbz	r0, 801045a <exp+0x4a>
 8010440:	f7ff ff52 	bl	80102e8 <__errno>
 8010444:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010480 <exp+0x70>
 8010448:	2322      	movs	r3, #34	; 0x22
 801044a:	6003      	str	r3, [r0, #0]
 801044c:	eeb0 0a48 	vmov.f32	s0, s16
 8010450:	eef0 0a68 	vmov.f32	s1, s17
 8010454:	ecbd 8b02 	vpop	{d8}
 8010458:	bd38      	pop	{r3, r4, r5, pc}
 801045a:	a30f      	add	r3, pc, #60	; (adr r3, 8010498 <exp+0x88>)
 801045c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010460:	4620      	mov	r0, r4
 8010462:	4629      	mov	r1, r5
 8010464:	f7f0 fae2 	bl	8000a2c <__aeabi_dcmplt>
 8010468:	2800      	cmp	r0, #0
 801046a:	d0ef      	beq.n	801044c <exp+0x3c>
 801046c:	f7ff ff3c 	bl	80102e8 <__errno>
 8010470:	2322      	movs	r3, #34	; 0x22
 8010472:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010488 <exp+0x78>
 8010476:	6003      	str	r3, [r0, #0]
 8010478:	e7e8      	b.n	801044c <exp+0x3c>
 801047a:	bf00      	nop
 801047c:	f3af 8000 	nop.w
 8010480:	00000000 	.word	0x00000000
 8010484:	7ff00000 	.word	0x7ff00000
	...
 8010490:	fefa39ef 	.word	0xfefa39ef
 8010494:	40862e42 	.word	0x40862e42
 8010498:	d52d3051 	.word	0xd52d3051
 801049c:	c0874910 	.word	0xc0874910

080104a0 <finite>:
 80104a0:	b082      	sub	sp, #8
 80104a2:	ed8d 0b00 	vstr	d0, [sp]
 80104a6:	9801      	ldr	r0, [sp, #4]
 80104a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104b0:	0fc0      	lsrs	r0, r0, #31
 80104b2:	b002      	add	sp, #8
 80104b4:	4770      	bx	lr
	...

080104b8 <__ieee754_exp>:
 80104b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104bc:	ec55 4b10 	vmov	r4, r5, d0
 80104c0:	49b5      	ldr	r1, [pc, #724]	; (8010798 <__ieee754_exp+0x2e0>)
 80104c2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80104c6:	428a      	cmp	r2, r1
 80104c8:	ed2d 8b04 	vpush	{d8-d9}
 80104cc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80104d0:	d93b      	bls.n	801054a <__ieee754_exp+0x92>
 80104d2:	49b2      	ldr	r1, [pc, #712]	; (801079c <__ieee754_exp+0x2e4>)
 80104d4:	428a      	cmp	r2, r1
 80104d6:	d916      	bls.n	8010506 <__ieee754_exp+0x4e>
 80104d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80104dc:	4323      	orrs	r3, r4
 80104de:	ee10 2a10 	vmov	r2, s0
 80104e2:	d007      	beq.n	80104f4 <__ieee754_exp+0x3c>
 80104e4:	462b      	mov	r3, r5
 80104e6:	4620      	mov	r0, r4
 80104e8:	4629      	mov	r1, r5
 80104ea:	f7ef fe77 	bl	80001dc <__adddf3>
 80104ee:	4604      	mov	r4, r0
 80104f0:	460d      	mov	r5, r1
 80104f2:	e002      	b.n	80104fa <__ieee754_exp+0x42>
 80104f4:	b10e      	cbz	r6, 80104fa <__ieee754_exp+0x42>
 80104f6:	2400      	movs	r4, #0
 80104f8:	2500      	movs	r5, #0
 80104fa:	ecbd 8b04 	vpop	{d8-d9}
 80104fe:	ec45 4b10 	vmov	d0, r4, r5
 8010502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010506:	a38e      	add	r3, pc, #568	; (adr r3, 8010740 <__ieee754_exp+0x288>)
 8010508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050c:	ee10 0a10 	vmov	r0, s0
 8010510:	4629      	mov	r1, r5
 8010512:	f7f0 faa9 	bl	8000a68 <__aeabi_dcmpgt>
 8010516:	4607      	mov	r7, r0
 8010518:	b130      	cbz	r0, 8010528 <__ieee754_exp+0x70>
 801051a:	ecbd 8b04 	vpop	{d8-d9}
 801051e:	2000      	movs	r0, #0
 8010520:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010524:	f000 b971 	b.w	801080a <__math_oflow>
 8010528:	a387      	add	r3, pc, #540	; (adr r3, 8010748 <__ieee754_exp+0x290>)
 801052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052e:	4620      	mov	r0, r4
 8010530:	4629      	mov	r1, r5
 8010532:	f7f0 fa7b 	bl	8000a2c <__aeabi_dcmplt>
 8010536:	2800      	cmp	r0, #0
 8010538:	f000 808b 	beq.w	8010652 <__ieee754_exp+0x19a>
 801053c:	ecbd 8b04 	vpop	{d8-d9}
 8010540:	4638      	mov	r0, r7
 8010542:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010546:	f000 b957 	b.w	80107f8 <__math_uflow>
 801054a:	4b95      	ldr	r3, [pc, #596]	; (80107a0 <__ieee754_exp+0x2e8>)
 801054c:	429a      	cmp	r2, r3
 801054e:	f240 80ac 	bls.w	80106aa <__ieee754_exp+0x1f2>
 8010552:	4b94      	ldr	r3, [pc, #592]	; (80107a4 <__ieee754_exp+0x2ec>)
 8010554:	429a      	cmp	r2, r3
 8010556:	d87c      	bhi.n	8010652 <__ieee754_exp+0x19a>
 8010558:	4b93      	ldr	r3, [pc, #588]	; (80107a8 <__ieee754_exp+0x2f0>)
 801055a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	ee10 0a10 	vmov	r0, s0
 8010566:	4629      	mov	r1, r5
 8010568:	f7ef fe36 	bl	80001d8 <__aeabi_dsub>
 801056c:	4b8f      	ldr	r3, [pc, #572]	; (80107ac <__ieee754_exp+0x2f4>)
 801056e:	00f7      	lsls	r7, r6, #3
 8010570:	443b      	add	r3, r7
 8010572:	ed93 7b00 	vldr	d7, [r3]
 8010576:	f1c6 0a01 	rsb	sl, r6, #1
 801057a:	4680      	mov	r8, r0
 801057c:	4689      	mov	r9, r1
 801057e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010582:	eeb0 8a47 	vmov.f32	s16, s14
 8010586:	eef0 8a67 	vmov.f32	s17, s15
 801058a:	ec53 2b18 	vmov	r2, r3, d8
 801058e:	4640      	mov	r0, r8
 8010590:	4649      	mov	r1, r9
 8010592:	f7ef fe21 	bl	80001d8 <__aeabi_dsub>
 8010596:	4604      	mov	r4, r0
 8010598:	460d      	mov	r5, r1
 801059a:	4622      	mov	r2, r4
 801059c:	462b      	mov	r3, r5
 801059e:	4620      	mov	r0, r4
 80105a0:	4629      	mov	r1, r5
 80105a2:	f7ef ffd1 	bl	8000548 <__aeabi_dmul>
 80105a6:	a36a      	add	r3, pc, #424	; (adr r3, 8010750 <__ieee754_exp+0x298>)
 80105a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ac:	4606      	mov	r6, r0
 80105ae:	460f      	mov	r7, r1
 80105b0:	f7ef ffca 	bl	8000548 <__aeabi_dmul>
 80105b4:	a368      	add	r3, pc, #416	; (adr r3, 8010758 <__ieee754_exp+0x2a0>)
 80105b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ba:	f7ef fe0d 	bl	80001d8 <__aeabi_dsub>
 80105be:	4632      	mov	r2, r6
 80105c0:	463b      	mov	r3, r7
 80105c2:	f7ef ffc1 	bl	8000548 <__aeabi_dmul>
 80105c6:	a366      	add	r3, pc, #408	; (adr r3, 8010760 <__ieee754_exp+0x2a8>)
 80105c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105cc:	f7ef fe06 	bl	80001dc <__adddf3>
 80105d0:	4632      	mov	r2, r6
 80105d2:	463b      	mov	r3, r7
 80105d4:	f7ef ffb8 	bl	8000548 <__aeabi_dmul>
 80105d8:	a363      	add	r3, pc, #396	; (adr r3, 8010768 <__ieee754_exp+0x2b0>)
 80105da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105de:	f7ef fdfb 	bl	80001d8 <__aeabi_dsub>
 80105e2:	4632      	mov	r2, r6
 80105e4:	463b      	mov	r3, r7
 80105e6:	f7ef ffaf 	bl	8000548 <__aeabi_dmul>
 80105ea:	a361      	add	r3, pc, #388	; (adr r3, 8010770 <__ieee754_exp+0x2b8>)
 80105ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f0:	f7ef fdf4 	bl	80001dc <__adddf3>
 80105f4:	4632      	mov	r2, r6
 80105f6:	463b      	mov	r3, r7
 80105f8:	f7ef ffa6 	bl	8000548 <__aeabi_dmul>
 80105fc:	4602      	mov	r2, r0
 80105fe:	460b      	mov	r3, r1
 8010600:	4620      	mov	r0, r4
 8010602:	4629      	mov	r1, r5
 8010604:	f7ef fde8 	bl	80001d8 <__aeabi_dsub>
 8010608:	4602      	mov	r2, r0
 801060a:	460b      	mov	r3, r1
 801060c:	4606      	mov	r6, r0
 801060e:	460f      	mov	r7, r1
 8010610:	4620      	mov	r0, r4
 8010612:	4629      	mov	r1, r5
 8010614:	f7ef ff98 	bl	8000548 <__aeabi_dmul>
 8010618:	ec41 0b19 	vmov	d9, r0, r1
 801061c:	f1ba 0f00 	cmp.w	sl, #0
 8010620:	d15d      	bne.n	80106de <__ieee754_exp+0x226>
 8010622:	2200      	movs	r2, #0
 8010624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010628:	4630      	mov	r0, r6
 801062a:	4639      	mov	r1, r7
 801062c:	f7ef fdd4 	bl	80001d8 <__aeabi_dsub>
 8010630:	4602      	mov	r2, r0
 8010632:	460b      	mov	r3, r1
 8010634:	ec51 0b19 	vmov	r0, r1, d9
 8010638:	f7f0 f8b0 	bl	800079c <__aeabi_ddiv>
 801063c:	4622      	mov	r2, r4
 801063e:	462b      	mov	r3, r5
 8010640:	f7ef fdca 	bl	80001d8 <__aeabi_dsub>
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	2000      	movs	r0, #0
 801064a:	4959      	ldr	r1, [pc, #356]	; (80107b0 <__ieee754_exp+0x2f8>)
 801064c:	f7ef fdc4 	bl	80001d8 <__aeabi_dsub>
 8010650:	e74d      	b.n	80104ee <__ieee754_exp+0x36>
 8010652:	4b58      	ldr	r3, [pc, #352]	; (80107b4 <__ieee754_exp+0x2fc>)
 8010654:	4620      	mov	r0, r4
 8010656:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801065a:	4629      	mov	r1, r5
 801065c:	a346      	add	r3, pc, #280	; (adr r3, 8010778 <__ieee754_exp+0x2c0>)
 801065e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010662:	f7ef ff71 	bl	8000548 <__aeabi_dmul>
 8010666:	e9d6 2300 	ldrd	r2, r3, [r6]
 801066a:	f7ef fdb7 	bl	80001dc <__adddf3>
 801066e:	f7f0 fa05 	bl	8000a7c <__aeabi_d2iz>
 8010672:	4682      	mov	sl, r0
 8010674:	f7ef fefe 	bl	8000474 <__aeabi_i2d>
 8010678:	a341      	add	r3, pc, #260	; (adr r3, 8010780 <__ieee754_exp+0x2c8>)
 801067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067e:	4606      	mov	r6, r0
 8010680:	460f      	mov	r7, r1
 8010682:	f7ef ff61 	bl	8000548 <__aeabi_dmul>
 8010686:	4602      	mov	r2, r0
 8010688:	460b      	mov	r3, r1
 801068a:	4620      	mov	r0, r4
 801068c:	4629      	mov	r1, r5
 801068e:	f7ef fda3 	bl	80001d8 <__aeabi_dsub>
 8010692:	a33d      	add	r3, pc, #244	; (adr r3, 8010788 <__ieee754_exp+0x2d0>)
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	4680      	mov	r8, r0
 801069a:	4689      	mov	r9, r1
 801069c:	4630      	mov	r0, r6
 801069e:	4639      	mov	r1, r7
 80106a0:	f7ef ff52 	bl	8000548 <__aeabi_dmul>
 80106a4:	ec41 0b18 	vmov	d8, r0, r1
 80106a8:	e76f      	b.n	801058a <__ieee754_exp+0xd2>
 80106aa:	4b43      	ldr	r3, [pc, #268]	; (80107b8 <__ieee754_exp+0x300>)
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d811      	bhi.n	80106d4 <__ieee754_exp+0x21c>
 80106b0:	a337      	add	r3, pc, #220	; (adr r3, 8010790 <__ieee754_exp+0x2d8>)
 80106b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b6:	ee10 0a10 	vmov	r0, s0
 80106ba:	4629      	mov	r1, r5
 80106bc:	f7ef fd8e 	bl	80001dc <__adddf3>
 80106c0:	4b3b      	ldr	r3, [pc, #236]	; (80107b0 <__ieee754_exp+0x2f8>)
 80106c2:	2200      	movs	r2, #0
 80106c4:	f7f0 f9d0 	bl	8000a68 <__aeabi_dcmpgt>
 80106c8:	b138      	cbz	r0, 80106da <__ieee754_exp+0x222>
 80106ca:	4b39      	ldr	r3, [pc, #228]	; (80107b0 <__ieee754_exp+0x2f8>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	4620      	mov	r0, r4
 80106d0:	4629      	mov	r1, r5
 80106d2:	e70a      	b.n	80104ea <__ieee754_exp+0x32>
 80106d4:	f04f 0a00 	mov.w	sl, #0
 80106d8:	e75f      	b.n	801059a <__ieee754_exp+0xe2>
 80106da:	4682      	mov	sl, r0
 80106dc:	e75d      	b.n	801059a <__ieee754_exp+0xe2>
 80106de:	4632      	mov	r2, r6
 80106e0:	463b      	mov	r3, r7
 80106e2:	2000      	movs	r0, #0
 80106e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80106e8:	f7ef fd76 	bl	80001d8 <__aeabi_dsub>
 80106ec:	4602      	mov	r2, r0
 80106ee:	460b      	mov	r3, r1
 80106f0:	ec51 0b19 	vmov	r0, r1, d9
 80106f4:	f7f0 f852 	bl	800079c <__aeabi_ddiv>
 80106f8:	4602      	mov	r2, r0
 80106fa:	460b      	mov	r3, r1
 80106fc:	ec51 0b18 	vmov	r0, r1, d8
 8010700:	f7ef fd6a 	bl	80001d8 <__aeabi_dsub>
 8010704:	4642      	mov	r2, r8
 8010706:	464b      	mov	r3, r9
 8010708:	f7ef fd66 	bl	80001d8 <__aeabi_dsub>
 801070c:	4602      	mov	r2, r0
 801070e:	460b      	mov	r3, r1
 8010710:	2000      	movs	r0, #0
 8010712:	4927      	ldr	r1, [pc, #156]	; (80107b0 <__ieee754_exp+0x2f8>)
 8010714:	f7ef fd60 	bl	80001d8 <__aeabi_dsub>
 8010718:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801071c:	4592      	cmp	sl, r2
 801071e:	db02      	blt.n	8010726 <__ieee754_exp+0x26e>
 8010720:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010724:	e6e3      	b.n	80104ee <__ieee754_exp+0x36>
 8010726:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801072a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801072e:	2200      	movs	r2, #0
 8010730:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010734:	f7ef ff08 	bl	8000548 <__aeabi_dmul>
 8010738:	e6d9      	b.n	80104ee <__ieee754_exp+0x36>
 801073a:	bf00      	nop
 801073c:	f3af 8000 	nop.w
 8010740:	fefa39ef 	.word	0xfefa39ef
 8010744:	40862e42 	.word	0x40862e42
 8010748:	d52d3051 	.word	0xd52d3051
 801074c:	c0874910 	.word	0xc0874910
 8010750:	72bea4d0 	.word	0x72bea4d0
 8010754:	3e663769 	.word	0x3e663769
 8010758:	c5d26bf1 	.word	0xc5d26bf1
 801075c:	3ebbbd41 	.word	0x3ebbbd41
 8010760:	af25de2c 	.word	0xaf25de2c
 8010764:	3f11566a 	.word	0x3f11566a
 8010768:	16bebd93 	.word	0x16bebd93
 801076c:	3f66c16c 	.word	0x3f66c16c
 8010770:	5555553e 	.word	0x5555553e
 8010774:	3fc55555 	.word	0x3fc55555
 8010778:	652b82fe 	.word	0x652b82fe
 801077c:	3ff71547 	.word	0x3ff71547
 8010780:	fee00000 	.word	0xfee00000
 8010784:	3fe62e42 	.word	0x3fe62e42
 8010788:	35793c76 	.word	0x35793c76
 801078c:	3dea39ef 	.word	0x3dea39ef
 8010790:	8800759c 	.word	0x8800759c
 8010794:	7e37e43c 	.word	0x7e37e43c
 8010798:	40862e41 	.word	0x40862e41
 801079c:	7fefffff 	.word	0x7fefffff
 80107a0:	3fd62e42 	.word	0x3fd62e42
 80107a4:	3ff0a2b1 	.word	0x3ff0a2b1
 80107a8:	080109f0 	.word	0x080109f0
 80107ac:	08010a00 	.word	0x08010a00
 80107b0:	3ff00000 	.word	0x3ff00000
 80107b4:	080109e0 	.word	0x080109e0
 80107b8:	3defffff 	.word	0x3defffff

080107bc <with_errno>:
 80107bc:	b570      	push	{r4, r5, r6, lr}
 80107be:	4604      	mov	r4, r0
 80107c0:	460d      	mov	r5, r1
 80107c2:	4616      	mov	r6, r2
 80107c4:	f7ff fd90 	bl	80102e8 <__errno>
 80107c8:	4629      	mov	r1, r5
 80107ca:	6006      	str	r6, [r0, #0]
 80107cc:	4620      	mov	r0, r4
 80107ce:	bd70      	pop	{r4, r5, r6, pc}

080107d0 <xflow>:
 80107d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107d2:	4614      	mov	r4, r2
 80107d4:	461d      	mov	r5, r3
 80107d6:	b108      	cbz	r0, 80107dc <xflow+0xc>
 80107d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80107dc:	e9cd 2300 	strd	r2, r3, [sp]
 80107e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107e4:	4620      	mov	r0, r4
 80107e6:	4629      	mov	r1, r5
 80107e8:	f7ef feae 	bl	8000548 <__aeabi_dmul>
 80107ec:	2222      	movs	r2, #34	; 0x22
 80107ee:	b003      	add	sp, #12
 80107f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107f4:	f7ff bfe2 	b.w	80107bc <with_errno>

080107f8 <__math_uflow>:
 80107f8:	b508      	push	{r3, lr}
 80107fa:	2200      	movs	r2, #0
 80107fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010800:	f7ff ffe6 	bl	80107d0 <xflow>
 8010804:	ec41 0b10 	vmov	d0, r0, r1
 8010808:	bd08      	pop	{r3, pc}

0801080a <__math_oflow>:
 801080a:	b508      	push	{r3, lr}
 801080c:	2200      	movs	r2, #0
 801080e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010812:	f7ff ffdd 	bl	80107d0 <xflow>
 8010816:	ec41 0b10 	vmov	d0, r0, r1
 801081a:	bd08      	pop	{r3, pc}

0801081c <_init>:
 801081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081e:	bf00      	nop
 8010820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010822:	bc08      	pop	{r3}
 8010824:	469e      	mov	lr, r3
 8010826:	4770      	bx	lr

08010828 <_fini>:
 8010828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082a:	bf00      	nop
 801082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082e:	bc08      	pop	{r3}
 8010830:	469e      	mov	lr, r3
 8010832:	4770      	bx	lr
