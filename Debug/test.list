
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         000116a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08011838  08011838  00021838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011be0  08011be0  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  08011be0  08011be0  00021be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011be8  08011be8  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011be8  08011be8  00021be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bec  08011bec  00021bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08011bf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030114  2**0
                  CONTENTS
 10 .bss          00002ec8  20000118  20000118  00030118  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002fe0  20002fe0  00030118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002519b  00000000  00000000  00030187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a07  00000000  00000000  00055322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be8  00000000  00000000  0005ad30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001582  00000000  00000000  0005c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c1d  00000000  00000000  0005de9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026b24  00000000  00000000  00080ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c458b  00000000  00000000  000a75db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007c9c  00000000  00000000  0016bb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00173804  2**0
=======
  1 .text         00011638  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080117c8  080117c8  000217c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b78  08011b78  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  08011b78  08011b78  00021b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b80  08011b80  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b80  08011b80  00021b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b84  08011b84  00021b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08011b88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030118  2**0
                  CONTENTS
 10 .bss          00003078  20000118  20000118  00030118  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003190  20003190  00030118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   000254dd  00000000  00000000  0003018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005b05  00000000  00000000  00055668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c10  00000000  00000000  0005b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000159d  00000000  00000000  0005cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022cb2  00000000  00000000  0005e31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026e75  00000000  00000000  00080fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c463d  00000000  00000000  000a7e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007cf8  00000000  00000000  0016c484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0017417c  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001b0:	08011820 	.word	0x08011820
=======
 80001b0:	080117b0 	.word	0x080117b0
>>>>>>> Stashed changes

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
<<<<<<< Updated upstream
 80001cc:	08011820 	.word	0x08011820
=======
 80001cc:	080117b0 	.word	0x080117b0
>>>>>>> Stashed changes

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8a:	f000 b9f1 	b.w	8000f70 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f883 	bl	8000ca8 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f876 	bl	8000ca8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f865 	bl	8000ca8 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f857 	bl	8000ca8 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a6 	b.w	8000f70 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff fef1 	bl	8000a2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_dmul>
 8000c7a:	f000 f97b 	bl	8000f74 <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fbe8 	bl	8000454 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fc5e 	bl	8000548 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faa0 	bl	80001d8 <__aeabi_dsub>
 8000c98:	f000 f96c 	bl	8000f74 <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fe8 <fromTickToMs+0x34>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe8 <fromTickToMs+0x34>
 8000fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	447a0000 	.word	0x447a0000

08000fec <cmp>:
uint32_t MS5837_conv_start_tick = CONVERTION_TIMEOUT;

void calculate();
void init_new_convertion();

int cmp(const void *a, const void *b) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MS5837_02BA_init>:

bool MS5837_02BA_begin(I2C_HandleTypeDef * hi2c){
	return(MS5837_02BA_init(hi2c));
}

bool MS5837_02BA_init(I2C_HandleTypeDef * hi2c){
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
	MS5837_hi2c = hi2c;
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	HAL_I2C_Init(hi2c);
 800101a:	6878      	ldr	r0, [r7, #4]
<<<<<<< Updated upstream
 800101c:	f005 fdc2 	bl	8006ba4 <HAL_I2C_Init>
=======
 800101c:	f005 fd8c 	bl	8006b38 <HAL_I2C_Init>
>>>>>>> Stashed changes
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, HAL_MAX_DELAY) != HAL_OK){
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <MS5837_02BA_init+0xa4>)
 800102e:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 8001030:	f005 fe48 	bl	8006cc4 <HAL_I2C_Master_Transmit>
=======
 8001030:	f005 fe12 	bl	8006c58 <HAL_I2C_Master_Transmit>
>>>>>>> Stashed changes
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MS5837_02BA_init+0x32>
		return false;
 800103a:	2300      	movs	r3, #0
 800103c:	e032      	b.n	80010a4 <MS5837_02BA_init+0x98>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e029      	b.n	800109c <MS5837_02BA_init+0x90>
		uint8_t prom_buff[2];
		prom_addr += 2;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3302      	adds	r3, #2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 020e 	add.w	r2, r7, #14
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 8001062:	f005 fe2f 	bl	8006cc4 <HAL_I2C_Master_Transmit>
=======
 8001062:	f005 fdf9 	bl	8006c58 <HAL_I2C_Master_Transmit>
>>>>>>> Stashed changes
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 8001078:	f005 ff18 	bl	8006eac <HAL_I2C_Master_Receive>
=======
 8001078:	f005 fee2 	bl	8006e40 <HAL_I2C_Master_Receive>
>>>>>>> Stashed changes
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	7b7a      	ldrb	r2, [r7, #13]
 8001082:	4313      	orrs	r3, r2
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	17d9      	asrs	r1, r3, #31
 8001088:	461c      	mov	r4, r3
 800108a:	460d      	mov	r5, r1
 800108c:	4909      	ldr	r1, [pc, #36]	; (80010b4 <MS5837_02BA_init+0xa8>)
 800108e:	00d3      	lsls	r3, r2, #3
 8001090:	440b      	add	r3, r1
 8001092:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d9d2      	bls.n	8001048 <MS5837_02BA_init+0x3c>
	}
	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bdb0      	pop	{r4, r5, r7, pc}
 80010ac:	20000134 	.word	0x20000134
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000140 	.word	0x20000140

080010b8 <MS5837_02BA_get_actual_pressure>:

int32_t MS5837_02BA_get_actual_pressure(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
<<<<<<< Updated upstream
 80010be:	f004 fea3 	bl	8005e08 <HAL_GetTick>
=======
 80010be:	f004 fe6d 	bl	8005d9c <HAL_GetTick>
>>>>>>> Stashed changes
 80010c2:	6078      	str	r0, [r7, #4]
	if(MS5837_I2C_NONE == MS5837_I2C_State){
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <MS5837_02BA_get_actual_pressure+0x18>
		init_new_convertion();
 80010cc:	f000 f83e 	bl	800114c <init_new_convertion>
	}
	if(MS5837_I2C_D1_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d10f      	bne.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b13      	cmp	r3, #19
 80010e2:	d909      	bls.n	80010f8 <MS5837_02BA_get_actual_pressure+0x40>
		MS5837_I2C_State = MS5837_I2C_D1_TX_ADC_COM;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010e6:	2203      	movs	r2, #3
 80010e8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 80010f2:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 80010f4:	f005 ffd0 	bl	8007098 <HAL_I2C_Master_Transmit_IT>
=======
 80010f4:	f005 ff9a 	bl	800702c <HAL_I2C_Master_Transmit_IT>
>>>>>>> Stashed changes
	}
	if(MS5837_I2C_D2_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d10f      	bne.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MS5837_02BA_get_actual_pressure+0x80>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b13      	cmp	r3, #19
 800110a:	d909      	bls.n	8001120 <MS5837_02BA_get_actual_pressure+0x68>
		MS5837_I2C_State = MS5837_I2C_D2_TX_ADC_COM;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MS5837_02BA_get_actual_pressure+0x7c>)
 800110e:	2207      	movs	r2, #7
 8001110:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MS5837_02BA_get_actual_pressure+0x84>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <MS5837_02BA_get_actual_pressure+0x88>)
 800111a:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 800111c:	f005 ffbc 	bl	8007098 <HAL_I2C_Master_Transmit_IT>
=======
 800111c:	f005 ff86 	bl	800702c <HAL_I2C_Master_Transmit_IT>
>>>>>>> Stashed changes
	}
//	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(MS5837_hi2c);
	return presure-initial_pressure;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MS5837_02BA_get_actual_pressure+0x8c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MS5837_02BA_get_actual_pressure+0x90>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000193 	.word	0x20000193
 8001138:	20000004 	.word	0x20000004
 800113c:	20000134 	.word	0x20000134
 8001140:	20000138 	.word	0x20000138
 8001144:	20000188 	.word	0x20000188
 8001148:	2000018c 	.word	0x2000018c

0800114c <init_new_convertion>:

void init_new_convertion(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	MS5837_I2C_State = MS5837_I2C_D1_TX_CONV_COM;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <init_new_convertion+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH);
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <init_new_convertion+0x20>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <init_new_convertion+0x24>)
 800115e:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 8001160:	f005 ff9a 	bl	8007098 <HAL_I2C_Master_Transmit_IT>
=======
 8001160:	f005 ff64 	bl	800702c <HAL_I2C_Master_Transmit_IT>
>>>>>>> Stashed changes
//	MS5837_conv_start_tick = HAL_GetTick();
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000193 	.word	0x20000193
 800116c:	20000134 	.word	0x20000134
 8001170:	20000001 	.word	0x20000001

08001174 <MS5837_I2C_MasterRxCplt>:

void MS5837_I2C_MasterRxCplt (I2C_HandleTypeDef * hi2c){
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800117c:	491f      	ldr	r1, [pc, #124]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 800117e:	6809      	ldr	r1, [r1, #0]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	4288      	cmp	r0, r1
 8001184:	d135      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
		if(MS5837_I2C_D1_RX_ADC == MS5837_I2C_State){
 8001186:	491e      	ldr	r1, [pc, #120]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001188:	7809      	ldrb	r1, [r1, #0]
 800118a:	2904      	cmp	r1, #4
 800118c:	d119      	bne.n	80011c2 <MS5837_I2C_MasterRxCplt+0x4e>
			D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800118e:	491d      	ldr	r1, [pc, #116]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001190:	7809      	ldrb	r1, [r1, #0]
 8001192:	0408      	lsls	r0, r1, #16
 8001194:	491b      	ldr	r1, [pc, #108]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 8001196:	7849      	ldrb	r1, [r1, #1]
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	4301      	orrs	r1, r0
 800119c:	4819      	ldr	r0, [pc, #100]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 800119e:	7880      	ldrb	r0, [r0, #2]
 80011a0:	4301      	orrs	r1, r0
 80011a2:	17c8      	asrs	r0, r1, #31
 80011a4:	460a      	mov	r2, r1
 80011a6:	4603      	mov	r3, r0
 80011a8:	4917      	ldr	r1, [pc, #92]	; (8001208 <MS5837_I2C_MasterRxCplt+0x94>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
			MS5837_I2C_State = MS5837_I2C_D2_TX_CONV_COM;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH);
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MS5837_I2C_MasterRxCplt+0x88>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <MS5837_I2C_MasterRxCplt+0x98>)
 80011bc:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 80011be:	f005 ff6b 	bl	8007098 <HAL_I2C_Master_Transmit_IT>
=======
 80011be:	f005 ff35 	bl	800702c <HAL_I2C_Master_Transmit_IT>
>>>>>>> Stashed changes
		}
		if(MS5837_I2C_D2_RX_ADC == MS5837_I2C_State){
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MS5837_I2C_MasterRxCplt+0x8c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d113      	bne.n	80011f2 <MS5837_I2C_MasterRxCplt+0x7e>
			D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	041a      	lsls	r2, r3, #16
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	4313      	orrs	r3, r2
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <MS5837_I2C_MasterRxCplt+0x90>)
 80011da:	7892      	ldrb	r2, [r2, #2]
 80011dc:	4313      	orrs	r3, r2
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	461c      	mov	r4, r3
 80011e2:	4615      	mov	r5, r2
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MS5837_I2C_MasterRxCplt+0x9c>)
 80011e6:	e9c3 4500 	strd	r4, r5, [r3]
			init_new_convertion();
 80011ea:	f7ff ffaf 	bl	800114c <init_new_convertion>
			calculate();
 80011ee:	f000 f90b 	bl	8001408 <calculate>
		}
//		MS5837_conv_start_tick = HAL_GetTick();
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000134 	.word	0x20000134
 8001200:	20000193 	.word	0x20000193
 8001204:	20000190 	.word	0x20000190
 8001208:	20000178 	.word	0x20000178
 800120c:	20000002 	.word	0x20000002
 8001210:	20000180 	.word	0x20000180

08001214 <MS5837_I2C_MasterTxCplt>:

void MS5837_I2C_MasterTxCplt (I2C_HandleTypeDef * hi2c){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d133      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
		if(MS5837_I2C_D1_TX_CONV_COM == MS5837_I2C_State){
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <MS5837_I2C_MasterTxCplt+0x2a>
			MS5837_I2C_State = MS5837_I2C_D1_CONVERTION;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001230:	2202      	movs	r2, #2
 8001232:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
<<<<<<< Updated upstream
 8001234:	f004 fde8 	bl	8005e08 <HAL_GetTick>
=======
 8001234:	f004 fdb2 	bl	8005d9c <HAL_GetTick>
>>>>>>> Stashed changes
 8001238:	4603      	mov	r3, r0
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 800123c:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D1_TX_ADC_COM == MS5837_I2C_State){
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d109      	bne.n	800125a <MS5837_I2C_MasterTxCplt+0x46>
			MS5837_I2C_State = MS5837_I2C_D1_RX_ADC;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001248:	2204      	movs	r2, #4
 800124a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2303      	movs	r3, #3
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001254:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 8001256:	f005 ff8f 	bl	8007178 <HAL_I2C_Master_Receive_IT>
=======
 8001256:	f005 ff59 	bl	800710c <HAL_I2C_Master_Receive_IT>
>>>>>>> Stashed changes
		}
		if(MS5837_I2C_D2_TX_CONV_COM == MS5837_I2C_State){
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d107      	bne.n	8001272 <MS5837_I2C_MasterTxCplt+0x5e>
			MS5837_I2C_State = MS5837_I2C_D2_CONVERTION;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001264:	2206      	movs	r2, #6
 8001266:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
<<<<<<< Updated upstream
 8001268:	f004 fdce 	bl	8005e08 <HAL_GetTick>
=======
 8001268:	f004 fd98 	bl	8005d9c <HAL_GetTick>
>>>>>>> Stashed changes
 800126c:	4603      	mov	r3, r0
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <MS5837_I2C_MasterTxCplt+0x8c>)
 8001270:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D2_TX_ADC_COM == MS5837_I2C_State){
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d109      	bne.n	800128e <MS5837_I2C_MasterTxCplt+0x7a>
			MS5837_I2C_State = MS5837_I2C_D2_RX_ADC;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MS5837_I2C_MasterTxCplt+0x88>)
 800127c:	2208      	movs	r2, #8
 800127e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <MS5837_I2C_MasterTxCplt+0x84>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	2303      	movs	r3, #3
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <MS5837_I2C_MasterTxCplt+0x90>)
 8001288:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 800128a:	f005 ff75 	bl	8007178 <HAL_I2C_Master_Receive_IT>
=======
 800128a:	f005 ff3f 	bl	800710c <HAL_I2C_Master_Receive_IT>
>>>>>>> Stashed changes
		}
	}
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000134 	.word	0x20000134
 800129c:	20000193 	.word	0x20000193
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000190 	.word	0x20000190

080012a8 <MS5837_02BA_check_pressure>:

void MS5837_I2C_MasterError (I2C_HandleTypeDef * hi2c){
	__NOP();
}

int32_t MS5837_02BA_check_pressure(){
 80012a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af02      	add	r7, sp, #8
	//initializing D1 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	4a34      	ldr	r2, [pc, #208]	; (8001390 <MS5837_02BA_check_pressure+0xe8>)
 80012be:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 80012c0:	f005 fd00 	bl	8006cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f004 fdab 	bl	8005e20 <HAL_Delay>
=======
 80012c0:	f005 fcca 	bl	8006c58 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f004 fd75 	bl	8005db4 <HAL_Delay>
>>>>>>> Stashed changes
	//reading D1 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 80012d8:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 80012da:	f005 fcf3 	bl	8006cc4 <HAL_I2C_Master_Transmit>
=======
 80012da:	f005 fcbd 	bl	8006c58 <HAL_I2C_Master_Transmit>
>>>>>>> Stashed changes
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2303      	movs	r3, #3
 80012ea:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012ec:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 80012ee:	f005 fddd 	bl	8006eac <HAL_I2C_Master_Receive>
=======
 80012ee:	f005 fda7 	bl	8006e40 <HAL_I2C_Master_Receive>
>>>>>>> Stashed changes
	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001302:	7892      	ldrb	r2, [r2, #2]
 8001304:	4313      	orrs	r3, r2
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	4698      	mov	r8, r3
 800130a:	4691      	mov	r9, r2
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MS5837_02BA_check_pressure+0xf4>)
 800130e:	e9c3 8900 	strd	r8, r9, [r3]
	//initializing D2 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <MS5837_02BA_check_pressure+0xf8>)
 8001320:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 8001322:	f005 fccf 	bl	8006cc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001326:	2014      	movs	r0, #20
 8001328:	f004 fd7a 	bl	8005e20 <HAL_Delay>
=======
 8001322:	f005 fc99 	bl	8006c58 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001326:	2014      	movs	r0, #20
 8001328:	f004 fd44 	bl	8005db4 <HAL_Delay>
>>>>>>> Stashed changes
	//reading D2 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MS5837_02BA_check_pressure+0xec>)
 800133a:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 800133c:	f005 fcc2 	bl	8006cc4 <HAL_I2C_Master_Transmit>
=======
 800133c:	f005 fc8c 	bl	8006c58 <HAL_I2C_Master_Transmit>
>>>>>>> Stashed changes
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MS5837_02BA_check_pressure+0xe4>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2303      	movs	r3, #3
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800134e:	21ec      	movs	r1, #236	; 0xec
<<<<<<< Updated upstream
 8001350:	f005 fdac 	bl	8006eac <HAL_I2C_Master_Receive>
=======
 8001350:	f005 fd76 	bl	8006e40 <HAL_I2C_Master_Receive>
>>>>>>> Stashed changes
	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4313      	orrs	r3, r2
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <MS5837_02BA_check_pressure+0xf0>)
 8001364:	7892      	ldrb	r2, [r2, #2]
 8001366:	4313      	orrs	r3, r2
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	461c      	mov	r4, r3
 800136c:	4615      	mov	r5, r2
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MS5837_02BA_check_pressure+0xfc>)
 8001370:	e9c3 4500 	strd	r4, r5, [r3]
	calculate();
 8001374:	f000 f848 	bl	8001408 <calculate>
	return presure-initial_pressure;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MS5837_02BA_check_pressure+0x100>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MS5837_02BA_check_pressure+0x104>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800138a:	bf00      	nop
 800138c:	20000134 	.word	0x20000134
 8001390:	20000001 	.word	0x20000001
 8001394:	20000138 	.word	0x20000138
 8001398:	20000190 	.word	0x20000190
 800139c:	20000178 	.word	0x20000178
 80013a0:	20000002 	.word	0x20000002
 80013a4:	20000180 	.word	0x20000180
 80013a8:	20000188 	.word	0x20000188
 80013ac:	2000018c 	.word	0x2000018c

080013b0 <MS5837_02BA_reset_pressure>:

uint32_t MS5837_02BA_reset_pressure(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b09a      	sub	sp, #104	; 0x68
 80013b4:	af00      	add	r7, sp, #0
	int32_t current_pressure[25];

	for(int i =0;i<25;i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
 80013ba:	e00b      	b.n	80013d4 <MS5837_02BA_reset_pressure+0x24>
	{
		current_pressure[i]=MS5837_02BA_check_pressure();
 80013bc:	f7ff ff74 	bl	80012a8 <MS5837_02BA_check_pressure>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	3368      	adds	r3, #104	; 0x68
 80013c8:	443b      	add	r3, r7
 80013ca:	f843 2c68 	str.w	r2, [r3, #-104]
	for(int i =0;i<25;i++)
 80013ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d0:	3301      	adds	r3, #1
 80013d2:	667b      	str	r3, [r7, #100]	; 0x64
 80013d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d6:	2b18      	cmp	r3, #24
 80013d8:	ddf0      	ble.n	80013bc <MS5837_02BA_reset_pressure+0xc>
	}
	qsort(current_pressure, 25, sizeof(int32_t), cmp );
 80013da:	4638      	mov	r0, r7
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MS5837_02BA_reset_pressure+0x4c>)
 80013de:	2204      	movs	r2, #4
 80013e0:	2119      	movs	r1, #25
<<<<<<< Updated upstream
 80013e2:	f00e fd93 	bl	800ff0c <qsort>
=======
 80013e2:	f00e fd5b 	bl	800fe9c <qsort>
>>>>>>> Stashed changes
	init_new_convertion();
 80013e6:	f7ff feb1 	bl	800114c <init_new_convertion>
	return initial_pressure = current_pressure[24];
 80013ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <MS5837_02BA_reset_pressure+0x50>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3768      	adds	r7, #104	; 0x68
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08000fed 	.word	0x08000fed
 8001400:	2000018c 	.word	0x2000018c
 8001404:	00000000 	.word	0x00000000

08001408 <calculate>:

void calculate(){
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b0be      	sub	sp, #248	; 0xf8
 800140e:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t TEMP = 0;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	int64_t OFF = 0;
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	int64_t SENS = 0;
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	int64_t P = 0;
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	int64_t SENSi = 0;
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	int64_t OFFi = 0;
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int64_t Ti = 0;
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int64_t OFF2 = 0;
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t SENS2 = 0;
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	int64_t P2 = 0;
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP2 = 0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	//first order compensation
	dT = D2 -  C[4]*256;
 80014a0:	4be1      	ldr	r3, [pc, #900]	; (8001828 <calculate+0x420>)
 80014a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014a6:	4be1      	ldr	r3, [pc, #900]	; (800182c <calculate+0x424>)
 80014a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014ac:	f04f 0000 	mov.w	r0, #0
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	0219      	lsls	r1, r3, #8
 80014b6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80014ba:	0210      	lsls	r0, r2, #8
 80014bc:	1a23      	subs	r3, r4, r0
 80014be:	663b      	str	r3, [r7, #96]	; 0x60
 80014c0:	eb65 0301 	sbc.w	r3, r5, r1
 80014c4:	667b      	str	r3, [r7, #100]	; 0x64
 80014c6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80014ca:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	TEMP = 2000 + dT*C[4]/8388608;
 80014ce:	4bd7      	ldr	r3, [pc, #860]	; (800182c <calculate+0x424>)
 80014d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014d4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80014d8:	fb02 f501 	mul.w	r5, r2, r1
 80014dc:	fb00 f403 	mul.w	r4, r0, r3
 80014e0:	442c      	add	r4, r5
 80014e2:	fba0 8902 	umull	r8, r9, r0, r2
 80014e6:	eb04 0309 	add.w	r3, r4, r9
 80014ea:	4699      	mov	r9, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 80014f8:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 80014fc:	ea4f 53d9 	mov.w	r3, r9, lsr #23
 8001500:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 8001504:	65b9      	str	r1, [r7, #88]	; 0x58
 8001506:	f143 0300 	adc.w	r3, r3, #0
 800150a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800150c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001510:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8

//	OFF = C[1]*65536 + (C[3]*dT)/128;
//	SENS = C[0]*32768 + (C[2]*dT)/256;
//	P = ((D1 * SENS)/(2097152) - OFF)/8192;

	OFF = (C[1])*131072+(C[3]*dT)/64;
 8001514:	4bc5      	ldr	r3, [pc, #788]	; (800182c <calculate+0x424>)
 8001516:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800151a:	f04f 0800 	mov.w	r8, #0
 800151e:	f04f 0900 	mov.w	r9, #0
 8001522:	ea4f 4943 	mov.w	r9, r3, lsl #17
 8001526:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 800152a:	ea4f 4842 	mov.w	r8, r2, lsl #17
 800152e:	4bbf      	ldr	r3, [pc, #764]	; (800182c <calculate+0x424>)
 8001530:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001534:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001538:	fb02 f501 	mul.w	r5, r2, r1
 800153c:	fb00 f403 	mul.w	r4, r0, r3
 8001540:	442c      	add	r4, r5
 8001542:	fba0 ab02 	umull	sl, fp, r0, r2
 8001546:	eb04 030b 	add.w	r3, r4, fp
 800154a:	469b      	mov	fp, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	ea4f 129a 	mov.w	r2, sl, lsr #6
 8001558:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800155c:	ea4f 139b 	mov.w	r3, fp, lsr #6
 8001560:	eb18 0102 	adds.w	r1, r8, r2
 8001564:	6539      	str	r1, [r7, #80]	; 0x50
 8001566:	eb49 0303 	adc.w	r3, r9, r3
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
 800156c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001570:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	SENS = C[0]*65536+(C[2]*dT)/128;
 8001574:	4bad      	ldr	r3, [pc, #692]	; (800182c <calculate+0x424>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f04f 0800 	mov.w	r8, #0
 800157e:	f04f 0900 	mov.w	r9, #0
 8001582:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8001586:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 800158a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800158e:	4ba7      	ldr	r3, [pc, #668]	; (800182c <calculate+0x424>)
 8001590:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001594:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001598:	fb02 f501 	mul.w	r5, r2, r1
 800159c:	fb00 f403 	mul.w	r4, r0, r3
 80015a0:	442c      	add	r4, r5
 80015a2:	fba0 2302 	umull	r2, r3, r0, r2
 80015a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015aa:	4613      	mov	r3, r2
 80015ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b4:	18e3      	adds	r3, r4, r3
 80015b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80015c6:	4621      	mov	r1, r4
 80015c8:	09ca      	lsrs	r2, r1, #7
 80015ca:	4629      	mov	r1, r5
 80015cc:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80015d0:	4629      	mov	r1, r5
 80015d2:	09cb      	lsrs	r3, r1, #7
 80015d4:	eb18 0102 	adds.w	r1, r8, r2
 80015d8:	64b9      	str	r1, [r7, #72]	; 0x48
 80015da:	eb49 0303 	adc.w	r3, r9, r3
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80015e4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	P = (D1*SENS/(2097152)-OFF)/(32768);
 80015e8:	4b91      	ldr	r3, [pc, #580]	; (8001830 <calculate+0x428>)
 80015ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ee:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80015f2:	fb02 f501 	mul.w	r5, r2, r1
 80015f6:	fb00 f403 	mul.w	r4, r0, r3
 80015fa:	442c      	add	r4, r5
 80015fc:	fba0 2302 	umull	r2, r3, r0, r2
 8001600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001604:	4613      	mov	r3, r2
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800160a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160e:	18e3      	adds	r3, r4, r3
 8001610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001620:	4623      	mov	r3, r4
 8001622:	0d58      	lsrs	r0, r3, #21
 8001624:	462b      	mov	r3, r5
 8001626:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800162a:	462b      	mov	r3, r5
 800162c:	0d59      	lsrs	r1, r3, #21
 800162e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001632:	1a84      	subs	r4, r0, r2
 8001634:	643c      	str	r4, [r7, #64]	; 0x40
 8001636:	eb61 0303 	sbc.w	r3, r1, r3
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001648:	4621      	mov	r1, r4
 800164a:	0bca      	lsrs	r2, r1, #15
 800164c:	4629      	mov	r1, r5
 800164e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001652:	4629      	mov	r1, r5
 8001654:	0bcb      	lsrs	r3, r1, #15
 8001656:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 800165a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800165e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001662:	fb03 f102 	mul.w	r1, r3, r2
 8001666:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800166a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	18ca      	adds	r2, r1, r3
 8001674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001678:	fba3 1303 	umull	r1, r3, r3, r3
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800167e:	460b      	mov	r3, r1
 8001680:	67bb      	str	r3, [r7, #120]	; 0x78
 8001682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001688:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800168c:	460b      	mov	r3, r1
 800168e:	18db      	adds	r3, r3, r3
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4613      	mov	r3, r2
 8001694:	eb42 0303 	adc.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7fe ff23 	bl	80004ec <__aeabi_l2d>
 80016a6:	a35e      	add	r3, pc, #376	; (adr r3, 8001820 <calculate+0x418>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7ff f876 	bl	800079c <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fac0 	bl	8000c3c <__aeabi_d2lz>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 80016c4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016c8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80016ce:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80016d8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80016dc:	6339      	str	r1, [r7, #48]	; 0x30
 80016de:	f143 33ff 	adc.w	r3, r3, #4294967295
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80016e8:	462b      	mov	r3, r5
 80016ea:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80016ee:	4642      	mov	r2, r8
 80016f0:	fb02 f203 	mul.w	r2, r2, r3
 80016f4:	464b      	mov	r3, r9
 80016f6:	4621      	mov	r1, r4
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	4622      	mov	r2, r4
 8001700:	4641      	mov	r1, r8
 8001702:	fba2 1201 	umull	r1, r2, r2, r1
 8001706:	677a      	str	r2, [r7, #116]	; 0x74
 8001708:	460a      	mov	r2, r1
 800170a:	673a      	str	r2, [r7, #112]	; 0x70
 800170c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800170e:	4413      	add	r3, r2
 8001710:	677b      	str	r3, [r7, #116]	; 0x74
 8001712:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001716:	2900      	cmp	r1, #0
 8001718:	da07      	bge.n	800172a <calculate+0x322>
 800171a:	f110 030f 	adds.w	r3, r0, #15
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	f141 0300 	adc.w	r3, r1, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	0902      	lsrs	r2, r0, #4
 8001734:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001738:	110b      	asrs	r3, r1, #4
 800173a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	SENSi = 0;
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	//	}

	OFF2 = OFF - OFFi;
 800174a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800174e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001752:	1a84      	subs	r4, r0, r2
 8001754:	60bc      	str	r4, [r7, #8]
 8001756:	eb61 0303 	sbc.w	r3, r1, r3
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001760:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS2 = SENS - SENSi;
 8001764:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001768:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800176c:	1a84      	subs	r4, r0, r2
 800176e:	603c      	str	r4, [r7, #0]
 8001770:	eb61 0303 	sbc.w	r3, r1, r3
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e9d7 3400 	ldrd	r3, r4, [r7]
 800177a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	TEMP2 = (TEMP - Ti) / 100; //C
 800177e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001782:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001786:	1a84      	subs	r4, r0, r2
 8001788:	62bc      	str	r4, [r7, #40]	; 0x28
 800178a:	eb61 0303 	sbc.w	r3, r1, r3
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001790:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800179c:	f7ff f9e6 	bl	8000b6c <__aeabi_ldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <calculate+0x428>)
 80017aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ae:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80017b2:	fb02 f501 	mul.w	r5, r2, r1
 80017b6:	fb00 f403 	mul.w	r4, r0, r3
 80017ba:	442c      	add	r4, r5
 80017bc:	fba0 2302 	umull	r2, r3, r0, r2
 80017c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017c2:	4613      	mov	r3, r2
 80017c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80017c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c8:	18e3      	adds	r3, r4, r3
 80017ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80017d8:	4621      	mov	r1, r4
 80017da:	0d4a      	lsrs	r2, r1, #21
 80017dc:	4629      	mov	r1, r5
 80017de:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80017e2:	4629      	mov	r1, r5
 80017e4:	0d4b      	lsrs	r3, r1, #21
 80017e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80017ea:	1a14      	subs	r4, r2, r0
 80017ec:	623c      	str	r4, [r7, #32]
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
 80017f4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001800:	f7ff fa04 	bl	8000c0c <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int32_t res[2];
	res[0] = P;
 800180c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	res[1] = TEMP/100;
 8001814:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001818:	f04f 0264 	mov.w	r2, #100	; 0x64
 800181c:	e00a      	b.n	8001834 <calculate+0x42c>
 800181e:	bf00      	nop
 8001820:	fe280000 	.word	0xfe280000
 8001824:	423fffff 	.word	0x423fffff
 8001828:	20000180 	.word	0x20000180
 800182c:	20000140 	.word	0x20000140
 8001830:	20000178 	.word	0x20000178
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	f7ff f998 	bl	8000b6c <__aeabi_ldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	presure = res[0]/10;
 8001846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <calculate+0x45c>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	1092      	asrs	r2, r2, #2
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <calculate+0x460>)
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	37f8      	adds	r7, #248	; 0xf8
 800185e:	46bd      	mov	sp, r7
 8001860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001864:	66666667 	.word	0x66666667
 8001868:	20000188 	.word	0x20000188

0800186c <GetCrc16Checksumm>:
 */

#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8001878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187c:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	3b02      	subs	r3, #2
 8001882:	807b      	strh	r3, [r7, #2]

    while (len--) {
 8001884:	e025      	b.n	80018d2 <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001896:	4053      	eors	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	737b      	strb	r3, [r7, #13]
 80018a0:	e014      	b.n	80018cc <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 80018a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da09      	bge.n	80018be <GetCrc16Checksumm+0x52>
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	e002      	b.n	80018c4 <GetCrc16Checksumm+0x58>
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 80018c6:	7b7b      	ldrb	r3, [r7, #13]
 80018c8:	3301      	adds	r3, #1
 80018ca:	737b      	strb	r3, [r7, #13]
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d9e7      	bls.n	80018a2 <GetCrc16Checksumm+0x36>
    while (len--) {
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	807a      	strh	r2, [r7, #2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1d4      	bne.n	8001886 <GetCrc16Checksumm+0x1a>
    }
    return crc;
 80018dc:	89fb      	ldrh	r3, [r7, #14]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb6 	bl	800186c <GetCrc16Checksumm>
 8001900:	4603      	mov	r3, r0
 8001902:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	3b02      	subs	r3, #2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 8001914:	89fa      	ldrh	r2, [r7, #14]
 8001916:	8afb      	ldrh	r3, [r7, #22]
 8001918:	429a      	cmp	r2, r3
 800191a:	d101      	bne.n	8001920 <IsCrc16ChecksummCorrect+0x36>
		return true;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 8001920:	2300      	movs	r3, #0
	}
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff96 	bl	800186c <GetCrc16Checksumm>
 8001940:	4603      	mov	r3, r0
 8001942:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	3b02      	subs	r3, #2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	89fa      	ldrh	r2, [r7, #14]
 8001952:	801a      	strh	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	3b01      	subs	r3, #1
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e009      	b.n	8001992 <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	4053      	eors	r3, r2
 800198a:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3301      	adds	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	3b01      	subs	r3, #1
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 800199c:	7dfa      	ldrb	r2, [r7, #23]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d101      	bne.n	80019a8 <IsChecksumm8bCorrect+0x4c>
        return 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <IsChecksumm8bCorrect+0x4e>
    else return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	e009      	b.n	80019e4 <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	4053      	eors	r3, r2
 80019dc:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e009      	b.n	8001a3c <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	4053      	eors	r3, r2
 8001a34:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf0      	blt.n	8001a28 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8001a46:	7dfa      	ldrb	r2, [r7, #23]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d101      	bne.n	8001a52 <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 8001a52:	2300      	movs	r3, #0
	}
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 8001a70:	2301      	movs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	e009      	b.n	8001a8a <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	4053      	eors	r3, r2
 8001a82:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d857      	bhi.n	8001b72 <PickBit+0xc6>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <PickBit+0x1c>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ae9 	.word	0x08001ae9
 8001acc:	08001afb 	.word	0x08001afb
 8001ad0:	08001b0d 	.word	0x08001b0d
 8001ad4:	08001b1f 	.word	0x08001b1f
 8001ad8:	08001b31 	.word	0x08001b31
 8001adc:	08001b43 	.word	0x08001b43
 8001ae0:	08001b55 	.word	0x08001b55
 8001ae4:	08001b67 	.word	0x08001b67
	case 0:
			return (bool) (input & 0b00000001);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	e03c      	b.n	8001b74 <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e033      	b.n	8001b74 <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	e02a      	b.n	8001b74 <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e021      	b.n	8001b74 <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e018      	b.n	8001b74 <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	e00f      	b.n	8001b74 <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	e006      	b.n	8001b74 <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	09db      	lsrs	r3, r3, #7
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e000      	b.n	8001b74 <PickBit+0xc8>
	}
	return false;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <variableInit>:

uint16_t counterRx = 0;


void variableInit()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b86:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <variableInit+0x130>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <variableInit+0x134>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <variableInit+0x134>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <variableInit+0x134>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 8001ba0:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <variableInit+0x134>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <variableInit+0x134>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <variableInit+0x134>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <variableInit+0x138>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <variableInit+0x138>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <variableInit+0x138>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <variableInit+0x138>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001bd4:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <variableInit+0x138>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <variableInit+0x138>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	831a      	strh	r2, [r3, #24]

	rSensors.pressure = 0;
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <variableInit+0x138>)
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	659a      	str	r2, [r3, #88]	; 0x58
	rSensors.pressure_null = 0;
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <variableInit+0x138>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c

	rSensors.rollSpeed = 0;
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <variableInit+0x138>)
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <variableInit+0x138>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <variableInit+0x138>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <variableInit+0x138>)
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <variableInit+0x138>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <variableInit+0x138>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <variableInit+0x138>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <variableInit+0x138>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <variableInit+0x138>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <variableInit+0x138>)
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <variableInit+0x138>)
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <variableInit+0x138>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <variableInit+0x138>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <variableInit+0x13c>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <variableInit+0x13c>)
 8001c64:	2205      	movs	r2, #5
 8001c66:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <variableInit+0x13c>)
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <variableInit+0x13c>)
 8001c72:	2206      	movs	r2, #6
 8001c74:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <variableInit+0x13c>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	779a      	strb	r2, [r3, #30]

	rSensors.startIMU = true;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <variableInit+0x138>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rSensors.startPressure = true;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <variableInit+0x138>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	thrustersInit();
<<<<<<< Updated upstream
 8001c8c:	f003 fb4a 	bl	8005324 <thrustersInit>
=======
 8001c9a:	f003 fb45 	bl	8005328 <thrustersInit>
>>>>>>> Stashed changes

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
<<<<<<< Updated upstream
 8001c90:	463b      	mov	r3, r7
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 f9f0 	bl	8003078 <flashReadSettings>
	flashReadStructure(&config);
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fbb6 	bl	800340c <flashReadStructure>
=======
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 f975 	bl	8002f90 <flashReadSettings>
	flashReadStructure(&config);
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 fb2b 	bl	8003304 <flashReadStructure>
>>>>>>> Stashed changes

	// Thrusters initialization
	if(rState.flash) {
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <variableInit+0x134>)
 8001ca2:	789b      	ldrb	r3, [r3, #2]
 8001ca4:	2b00      	cmp	r3, #0
		return;
	}
}
<<<<<<< Updated upstream
 8001ca6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20001e3c 	.word	0x20001e3c
 8001cb4:	20001d34 	.word	0x20001d34
 8001cb8:	20001dd0 	.word	0x20001dd0
 8001cbc:	20001e70 	.word	0x20001e70
=======
 8001cb4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20001e44 	.word	0x20001e44
 8001cc0:	20001d34 	.word	0x20001d34
 8001cc4:	20001dd0 	.word	0x20001dd0
 8001cc8:	20001e60 	.word	0x20001e60
>>>>>>> Stashed changes

08001cc0 <uartBusesInit>:

void uartBusesInit()
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001cc6:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cc8:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <uartBusesInit+0x1e0>)
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001ccc:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cce:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <uartBusesInit+0x1e4>)
 8001cd0:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001cd2:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cd4:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <uartBusesInit+0x1e8>)
 8001cd6:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001cd8:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001ce0:	4b6e      	ldr	r3, [pc, #440]	; (8001e9c <uartBusesInit+0x1dc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cea:	2214      	movs	r2, #20
 8001cec:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 8001cee:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cf4:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001cf6:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cf8:	22c8      	movs	r2, #200	; 0xc8
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001cfc:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <uartBusesInit+0x1dc>)
 8001cfe:	22c8      	movs	r2, #200	; 0xc8
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 8001d0a:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <uartBusesInit+0x1ec>)
 8001d0e:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d16:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 8001d3a:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d3c:	2264      	movs	r2, #100	; 0x64
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001d40:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d42:	2264      	movs	r2, #100	; 0x64
 8001d44:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 8001d46:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 8001d4e:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <uartBusesInit+0x1f0>)
 8001d52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001d56:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001d5c:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 8001d62:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001d72:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001d7a:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d8c:	2264      	movs	r2, #100	; 0x64
 8001d8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 8001d9a:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <uartBusesInit+0x1dc>)
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <uartBusesInit+0x1f4>)
 8001d9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <uartBusesInit+0x1dc>)
 8001da4:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <uartBusesInit+0x1f8>)
 8001da6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 8001daa:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <uartBusesInit+0x1dc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <uartBusesInit+0x1dc>)
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 8001dda:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <uartBusesInit+0x1dc>)
 8001ddc:	2264      	movs	r2, #100	; 0x64
 8001dde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <uartBusesInit+0x1dc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e04a      	b.n	8001e86 <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	492a      	ldr	r1, [pc, #168]	; (8001e9c <uartBusesInit+0x1dc>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3308      	adds	r3, #8
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001e04:	79fa      	ldrb	r2, [r7, #7]
 8001e06:	4925      	ldr	r1, [pc, #148]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	3309      	adds	r3, #9
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	4920      	ldr	r1, [pc, #128]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	330a      	adds	r3, #10
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	4916      	ldr	r1, [pc, #88]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3310      	adds	r3, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	4911      	ldr	r1, [pc, #68]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3314      	adds	r3, #20
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	490b      	ldr	r1, [pc, #44]	; (8001e9c <uartBusesInit+0x1dc>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3318      	adds	r3, #24
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	3301      	adds	r3, #1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d9b1      	bls.n	8001df0 <uartBusesInit+0x130>
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
<<<<<<< Updated upstream
 8001e9c:	20000194 	.word	0x20000194
 8001ea0:	2000265c 	.word	0x2000265c
 8001ea4:	20002270 	.word	0x20002270
 8001ea8:	200022c4 	.word	0x200022c4
 8001eac:	2000254c 	.word	0x2000254c
 8001eb0:	200024c4 	.word	0x200024c4
 8001eb4:	200025d4 	.word	0x200025d4
 8001eb8:	20002328 	.word	0x20002328

08001ebc <i2cBusesInit>:
=======
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000194 	.word	0x20000194
 8001eac:	20002808 	.word	0x20002808
 8001eb0:	20002278 	.word	0x20002278
 8001eb4:	200022cc 	.word	0x200022cc
 8001eb8:	200026f8 	.word	0x200026f8
 8001ebc:	20002670 	.word	0x20002670
 8001ec0:	20002780 	.word	0x20002780
 8001ec4:	20002330 	.word	0x20002330

08001ec8 <i2cBusesInit>:
>>>>>>> Stashed changes

void i2cBusesInit()
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	// TODO refactor i2c communication routines
	i2cBus[DEV_I2C].hi2c = &hi2c1; // Link to hi2c will be set before receiving
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <i2cBusesInit+0x14>)
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <i2cBusesInit+0x18>)
 8001ec4:	601a      	str	r2, [r3, #0]
}
<<<<<<< Updated upstream
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20000274 	.word	0x20000274
 8001ed4:	200023d8 	.word	0x200023d8
=======
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20000274 	.word	0x20000274
 8001ee0:	200023e0 	.word	0x200023e0
>>>>>>> Stashed changes

08001ed8 <transmitPackage>:


bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
<<<<<<< Updated upstream
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f009 f8d4 	bl	800b09c <HAL_UART_AbortTransmit_IT>
=======
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4618      	mov	r0, r3
 8001efc:	f009 f898 	bl	800b030 <HAL_UART_AbortTransmit_IT>
>>>>>>> Stashed changes
    switch(bus->txrxType) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <transmitPackage+0x42>
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d117      	bne.n	8001f32 <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
<<<<<<< Updated upstream
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	f009 f802 	bl	800af1c <HAL_UART_Transmit_DMA>
=======
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f008 ffc6 	bl	800aeb0 <HAL_UART_Transmit_DMA>
>>>>>>> Stashed changes
            break;
 8001f18:	e00d      	b.n	8001f36 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
<<<<<<< Updated upstream
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f008 ff54 	bl	800add8 <HAL_UART_Transmit_IT>
=======
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	f008 ff18 	bl	800ad6c <HAL_UART_Transmit_IT>
>>>>>>> Stashed changes
            break;
 8001f30:	e001      	b.n	8001f36 <transmitPackage+0x5e>
        default:
            return false;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e036      	b.n	8001fa4 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
<<<<<<< Updated upstream
 8001f36:	f00c fa61 	bl	800e3fc <xTaskGetTickCount>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f839 	bl	8000fb4 <fromTickToMs>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	edc3 7a05 	vstr	s15, [r3, #20]
=======
 8001f42:	f00c fa25 	bl	800e390 <xTaskGetTickCount>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f833 	bl	8000fb4 <fromTickToMs>
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	edc3 7a05 	vstr	s15, [r3, #20]
>>>>>>> Stashed changes
    while (!bus->packageTransmitted && !isrMode) {
 8001f4c:	e01c      	b.n	8001f88 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
<<<<<<< Updated upstream
 8001f4e:	f00c fa55 	bl	800e3fc <xTaskGetTickCount>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f82d 	bl	8000fb4 <fromTickToMs>
 8001f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	dd01      	ble.n	8001f82 <transmitPackage+0xaa>
=======
 8001f5a:	f00c fa19 	bl	800e390 <xTaskGetTickCount>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f827 	bl	8000fb4 <fromTickToMs>
 8001f66:	eeb0 7a40 	vmov.f32	s14, s0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	dd01      	ble.n	8001f8e <transmitPackage+0xaa>
>>>>>>> Stashed changes
    		return false;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e010      	b.n	8001fa4 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
<<<<<<< Updated upstream
 8001f82:	2032      	movs	r0, #50	; 0x32
 8001f84:	f00a ff10 	bl	800cda8 <osDelay>
=======
 8001f8e:	2032      	movs	r0, #50	; 0x32
 8001f90:	f00a fed4 	bl	800cd3c <osDelay>
>>>>>>> Stashed changes
    while (!bus->packageTransmitted && !isrMode) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7a5b      	ldrb	r3, [r3, #9]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <transmitPackage+0xca>
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f083 0301 	eor.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1d5      	bne.n	8001f4e <transmitPackage+0x76>
    }
    return true;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
<<<<<<< Updated upstream
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 f8df 	bl	800b18c <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 f862 	bl	800b09c <HAL_UART_AbortTransmit_IT>
=======
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f009 f8a3 	bl	800b120 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f009 f826 	bl	800b030 <HAL_UART_AbortTransmit_IT>
>>>>>>> Stashed changes
	switch(bus->txrxType) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d018      	beq.n	8002014 <transmitAndReceive+0x68>
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d12d      	bne.n	8002042 <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
<<<<<<< Updated upstream
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f009 f80c 	bl	800b014 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	f008 ff85 	bl	800af1c <HAL_UART_Transmit_DMA>
=======
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	f008 ffd0 	bl	800afa8 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	f008 ff49 	bl	800aeb0 <HAL_UART_Transmit_DMA>
>>>>>>> Stashed changes
			break;
 8002012:	e018      	b.n	8002046 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
<<<<<<< Updated upstream
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	f008 ff35 	bl	800ae94 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	f008 fecc 	bl	800add8 <HAL_UART_Transmit_IT>
=======
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	f008 fef9 	bl	800ae28 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	f008 fe90 	bl	800ad6c <HAL_UART_Transmit_IT>
>>>>>>> Stashed changes
			break;
 8002040:	e001      	b.n	8002046 <transmitAndReceive+0x9a>
		default:
			return false;
 8002042:	2300      	movs	r3, #0
 8002044:	e03d      	b.n	80020c2 <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
<<<<<<< Updated upstream
 8002046:	f00c f9d9 	bl	800e3fc <xTaskGetTickCount>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe ffb1 	bl	8000fb4 <fromTickToMs>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a05 	vstr	s15, [r3, #20]
=======
 8002052:	f00c f99d 	bl	800e390 <xTaskGetTickCount>
 8002056:	4603      	mov	r3, r0
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ffab 	bl	8000fb4 <fromTickToMs>
 800205e:	eef0 7a40 	vmov.f32	s15, s0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edc3 7a05 	vstr	s15, [r3, #20]
>>>>>>> Stashed changes
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 800205c:	e01c      	b.n	8002098 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
<<<<<<< Updated upstream
 800205e:	f00c f9cd 	bl	800e3fc <xTaskGetTickCount>
 8002062:	4603      	mov	r3, r0
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ffa5 	bl	8000fb4 <fromTickToMs>
 800206a:	eeb0 7a40 	vmov.f32	s14, s0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	edd3 7a05 	vldr	s15, [r3, #20]
 8002074:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	dd01      	ble.n	8002092 <transmitAndReceive+0xe6>
=======
 800206a:	f00c f991 	bl	800e390 <xTaskGetTickCount>
 800206e:	4603      	mov	r3, r0
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ff9f 	bl	8000fb4 <fromTickToMs>
 8002076:	eeb0 7a40 	vmov.f32	s14, s0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002080:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	dd01      	ble.n	800209e <transmitAndReceive+0xe6>
>>>>>>> Stashed changes
			return false;
 800208e:	2300      	movs	r3, #0
 8002090:	e017      	b.n	80020c2 <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
<<<<<<< Updated upstream
 8002092:	2032      	movs	r0, #50	; 0x32
 8002094:	f00a fe88 	bl	800cda8 <osDelay>
=======
 800209e:	2032      	movs	r0, #50	; 0x32
 80020a0:	f00a fe4c 	bl	800cd3c <osDelay>
>>>>>>> Stashed changes
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7a5b      	ldrb	r3, [r3, #9]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <transmitAndReceive+0x114>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7a1b      	ldrb	r3, [r3, #8]
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <transmitAndReceive+0x114>
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ce      	bne.n	800205e <transmitAndReceive+0xb2>
	}
	return true;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d103      	bne.n	80020e6 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	725a      	strb	r2, [r3, #9]
		return;
 80020e4:	e022      	b.n	800212c <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e01a      	b.n	8002126 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	4911      	ldr	r1, [pc, #68]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3330      	adds	r3, #48	; 0x30
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d10b      	bne.n	8002120 <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_UART_TxCpltCallback+0x6c>)
 8002114:	4413      	add	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	725a      	strb	r2, [r3, #9]
			break;
 800211e:	e005      	b.n	800212c <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3301      	adds	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d9e1      	bls.n	80020f0 <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
<<<<<<< Updated upstream
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000194 	.word	0x20000194
=======
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000194 	.word	0x20000194
>>>>>>> Stashed changes

0800213c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d102      	bne.n	8002154 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800214e:	f000 f84b 	bl	80021e8 <ShoreReceive>
		return;
 8002152:	e02d      	b.n	80021b0 <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e025      	b.n	80021aa <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	4915      	ldr	r1, [pc, #84]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3330      	adds	r3, #48	; 0x30
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d116      	bne.n	80021a4 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_UART_RxCpltCallback+0x7c>)
 8002182:	4413      	add	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2201      	movs	r2, #1
 800218a:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
<<<<<<< Updated upstream
 800218c:	f00c f936 	bl	800e3fc <xTaskGetTickCount>
 8002190:	4603      	mov	r3, r0
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe ff0e 	bl	8000fb4 <fromTickToMs>
 8002198:	eef0 7a40 	vmov.f32	s15, s0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	edc3 7a06 	vstr	s15, [r3, #24]
=======
 8002198:	f00c f8fa 	bl	800e390 <xTaskGetTickCount>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe ff08 	bl	8000fb4 <fromTickToMs>
 80021a4:	eef0 7a40 	vmov.f32	s15, s0
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	edc3 7a06 	vstr	s15, [r3, #24]
>>>>>>> Stashed changes
			break;
 80021a2:	e005      	b.n	80021b0 <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	3301      	adds	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d9d6      	bls.n	800215e <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
<<<<<<< Updated upstream
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000194 	.word	0x20000194
=======
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000194 	.word	0x20000194
>>>>>>> Stashed changes

080021bc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterRxCplt(hi2c);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe ffd5 	bl	8001174 <MS5837_I2C_MasterRxCplt>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterTxCplt(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff f81a 	bl	8001214 <MS5837_I2C_MasterTxCplt>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ShoreReceive>:
	MS5837_I2C_MasterError(hi2c);
}


void ShoreReceive()
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <ShoreReceive+0xe0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <ShoreReceive+0xe4>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13c      	bne.n	8002276 <ShoreReceive+0x8e>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	e035      	b.n	800226e <ShoreReceive+0x86>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <ShoreReceive+0xe8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4932      	ldr	r1, [pc, #200]	; (80022d4 <ShoreReceive+0xec>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	429a      	cmp	r2, r3
 8002210:	d11f      	bne.n	8002252 <ShoreReceive+0x6a>
				counterRx = 1;
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <ShoreReceive+0xe4>)
 8002214:	2201      	movs	r2, #1
 8002216:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = 5;//ShoreLength[i]-1;
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <ShoreReceive+0xe8>)
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
<<<<<<< Updated upstream
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <ShoreReceive+0xe8>)
 8002222:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <ShoreReceive+0xe8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <ShoreReceive+0xe8>)
 800222c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002230:	b292      	uxth	r2, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f008 fe2e 	bl	800ae94 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <ShoreReceive+0xf0>)
 800223a:	681c      	ldr	r4, [r3, #0]
 800223c:	f00c f8ee 	bl	800e41c <xTaskGetTickCountFromISR>
 8002240:	4602      	mov	r2, r0
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <ShoreReceive+0xe0>)
 8002248:	2106      	movs	r1, #6
 800224a:	4620      	mov	r0, r4
 800224c:	f00c ff4a 	bl	800f0e4 <xTimerGenericCommand>
=======
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <ShoreReceive+0xf4>)
 800223a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <ShoreReceive+0xf4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <ShoreReceive+0xf4>)
 8002244:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002248:	b292      	uxth	r2, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f008 fdec 	bl	800ae28 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <ShoreReceive+0x100>)
 8002252:	681c      	ldr	r4, [r3, #0]
 8002254:	f00c f8ac 	bl	800e3b0 <xTaskGetTickCountFromISR>
 8002258:	4602      	mov	r2, r0
 800225a:	2300      	movs	r3, #0
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <ShoreReceive+0xec>)
 8002260:	2106      	movs	r1, #6
 8002262:	4620      	mov	r0, r4
 8002264:	f00c ff08 	bl	800f078 <xTimerGenericCommand>
>>>>>>> Stashed changes
				break;
 8002250:	e026      	b.n	80022a0 <ShoreReceive+0xb8>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d107      	bne.n	8002268 <ShoreReceive+0x80>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
<<<<<<< Updated upstream
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <ShoreReceive+0xe8>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <ShoreReceive+0xe8>)
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f008 fe16 	bl	800ae94 <HAL_UART_Receive_IT>
=======
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <ShoreReceive+0xf4>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <ShoreReceive+0xf4>)
 8002276:	6811      	ldr	r1, [r2, #0]
 8002278:	2201      	movs	r2, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f008 fdd4 	bl	800ae28 <HAL_UART_Receive_IT>
>>>>>>> Stashed changes
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	3301      	adds	r3, #1
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d9c6      	bls.n	8002202 <ShoreReceive+0x1a>
 8002274:	e014      	b.n	80022a0 <ShoreReceive+0xb8>
			}
		}
	}
	else if(counterRx == 1) {
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <ShoreReceive+0xe4>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d110      	bne.n	80022a0 <ShoreReceive+0xb8>
		uartBus[SHORE_UART].packageReceived = true;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <ShoreReceive+0xe8>)
 8002280:	2201      	movs	r2, #1
 8002282:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
<<<<<<< Updated upstream
 8002284:	f00c f8ba 	bl	800e3fc <xTaskGetTickCount>
 8002288:	4603      	mov	r3, r0
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fe92 	bl	8000fb4 <fromTickToMs>
 8002290:	eef0 7a40 	vmov.f32	s15, s0
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <ShoreReceive+0xe8>)
 8002296:	edc3 7a06 	vstr	s15, [r3, #24]
=======
 800229c:	f00c f878 	bl	800e390 <xTaskGetTickCount>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe86 	bl	8000fb4 <fromTickToMs>
 80022a8:	eef0 7a40 	vmov.f32	s15, s0
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <ShoreReceive+0xf4>)
 80022ae:	edc3 7a06 	vstr	s15, [r3, #24]
>>>>>>> Stashed changes
		counterRx = 2;
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <ShoreReceive+0xe4>)
 800229c:	2202      	movs	r2, #2
 800229e:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <ShoreReceive+0xe0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10a      	bne.n	80022be <ShoreReceive+0xd6>
		xHigherPriorityTaskWoken = pdFALSE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <ShoreReceive+0xe0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
		taskYIELD();
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <ShoreReceive+0xf4>)
 80022b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	f3bf 8f6f 	isb	sy
	}
}
<<<<<<< Updated upstream
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000280 	.word	0x20000280
 80022cc:	2000027c 	.word	0x2000027c
 80022d0:	20000194 	.word	0x20000194
 80022d4:	0801199c 	.word	0x0801199c
 80022d8:	20000288 	.word	0x20000288
 80022dc:	e000ed04 	.word	0xe000ed04

080022e0 <DevicesRequestUpdate>:
=======
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000280 	.word	0x20000280
 80022e4:	2000027c 	.word	0x2000027c
 80022e8:	20000194 	.word	0x20000194
 80022ec:	08011934 	.word	0x08011934
 80022f0:	0801192c 	.word	0x0801192c
 80022f4:	20000288 	.word	0x20000288
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <DevicesRequestUpdate>:
>>>>>>> Stashed changes

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 80022ec:	23aa      	movs	r3, #170	; 0xaa
 80022ee:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 80022f0:	23aa      	movs	r3, #170	; 0xaa
 80022f2:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	4916      	ldr	r1, [pc, #88]	; (8002350 <DevicesRequestUpdate+0x70>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	4911      	ldr	r1, [pc, #68]	; (8002350 <DevicesRequestUpdate+0x70>)
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	440b      	add	r3, r1
 8002314:	3301      	adds	r3, #1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	72fb      	strb	r3, [r7, #11]
    //req.velocity1 = 0;
    //req.velocity2 = rDevice[dev].force;

   // if(dev == GRAB) {
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <DevicesRequestUpdate+0x70>)
 800231c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002320:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <DevicesRequestUpdate+0x70>)
 8002324:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002328:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	461a      	mov	r2, r3
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	6010      	str	r0, [r2, #0]
 8002336:	8899      	ldrh	r1, [r3, #4]
 8002338:	799b      	ldrb	r3, [r3, #6]
 800233a:	8091      	strh	r1, [r2, #4]
 800233c:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800233e:	2107      	movs	r1, #7
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fb38 	bl	80019b6 <AddChecksumm8b>
}
<<<<<<< Updated upstream
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20001e70 	.word	0x20001e70
=======
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001e60 	.word	0x20001e60
>>>>>>> Stashed changes

08002354 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 8002360:	210a      	movs	r1, #10
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fafa 	bl	800195c <IsChecksumm8bCorrect>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d04a      	beq.n	8002404 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	6810      	ldr	r0, [r2, #0]
 8002376:	6851      	ldr	r1, [r2, #4]
 8002378:	c303      	stmia	r3!, {r0, r1}
 800237a:	8912      	ldrh	r2, [r2, #8]
 800237c:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8002384:	b298      	uxth	r0, r3
 8002386:	4924      	ldr	r1, [pc, #144]	; (8002418 <DevicesResponseUpdate+0xc4>)
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	3304      	adds	r3, #4
 8002394:	4602      	mov	r2, r0
 8002396:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	7cf8      	ldrb	r0, [r7, #19]
 800239c:	491e      	ldr	r1, [pc, #120]	; (8002418 <DevicesResponseUpdate+0xc4>)
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	3307      	adds	r3, #7
 80023aa:	4602      	mov	r2, r0
 80023ac:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	7d38      	ldrb	r0, [r7, #20]
 80023b2:	4919      	ldr	r1, [pc, #100]	; (8002418 <DevicesResponseUpdate+0xc4>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	3308      	adds	r3, #8
 80023c0:	4602      	mov	r2, r0
 80023c2:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <DevicesResponseUpdate+0xc4>)
 80023c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <DevicesResponseUpdate+0x88>
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d103      	bne.n	80023dc <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <DevicesResponseUpdate+0xc8>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e00a      	b.n	80023f2 <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <DevicesResponseUpdate+0xc4>)
 80023de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <DevicesResponseUpdate+0x9e>
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d102      	bne.n	80023f2 <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <DevicesResponseUpdate+0xc8>)
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <DevicesResponseUpdate+0xcc>)
 80023f4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80023f8:	3301      	adds	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <DevicesResponseUpdate+0xcc>)
 80023fe:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 8002402:	e004      	b.n	800240e <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
<<<<<<< Updated upstream
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <DevicesResponseUpdate+0xcc>)
 8002406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002408:	3301      	adds	r3, #1
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <DevicesResponseUpdate+0xcc>)
 800240c:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20001e70 	.word	0x20001e70
 800241c:	20001eac 	.word	0x20001eac
 8002420:	20000194 	.word	0x20000194

08002424 <ShoreRequest>:
=======
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <DevicesResponseUpdate+0xcc>)
 8002422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002424:	3301      	adds	r3, #1
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <DevicesResponseUpdate+0xcc>)
 8002428:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20001e60 	.word	0x20001e60
 8002438:	20001e9c 	.word	0x20001e9c
 800243c:	20000194 	.word	0x20000194

08002440 <ShoreRequest>:
>>>>>>> Stashed changes

void ShoreRequest(uint8_t *requestBuf)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800242a:	af00      	add	r7, sp, #0
 800242c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002430:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002434:	6018      	str	r0, [r3, #0]
	bool flag = false;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	flag = IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH);
 800243c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002440:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002444:	211f      	movs	r1, #31
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f7ff fa4f 	bl	80018ea <IsCrc16ChecksummCorrect>
 800244c:	4603      	mov	r3, r0
 800244e:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 8002452:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002456:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800245a:	211f      	movs	r1, #31
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	f7ff fa44 	bl	80018ea <IsCrc16ChecksummCorrect>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8184 	beq.w	8002772 <ShoreRequest+0x34e>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 800246a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800246e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002472:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8002476:	221f      	movs	r2, #31
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	f00d ff21 	bl	80102c0 <memcpy>

    	uint8_t tempCameraNum = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

        rJoySpeed.march = req.march;
 8002484:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	4bbd      	ldr	r3, [pc, #756]	; (8002788 <ShoreRequest+0x364>)
 8002492:	edc3 7a00 	vstr	s15, [r3]
        rJoySpeed.lag = req.lag;
 8002496:	f9b7 3218 	ldrsh.w	r3, [r7, #536]	; 0x218
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a2:	4bb9      	ldr	r3, [pc, #740]	; (8002788 <ShoreRequest+0x364>)
 80024a4:	edc3 7a01 	vstr	s15, [r3, #4]
        rJoySpeed.depth = req.depth;
 80024a8:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b4:	4bb4      	ldr	r3, [pc, #720]	; (8002788 <ShoreRequest+0x364>)
 80024b6:	edc3 7a02 	vstr	s15, [r3, #8]
        rJoySpeed.roll = req.roll;
 80024ba:	f9b7 321c 	ldrsh.w	r3, [r7, #540]	; 0x21c
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c6:	4bb0      	ldr	r3, [pc, #704]	; (8002788 <ShoreRequest+0x364>)
 80024c8:	edc3 7a03 	vstr	s15, [r3, #12]
        rJoySpeed.pitch = req.pitch;
 80024cc:	f9b7 321e 	ldrsh.w	r3, [r7, #542]	; 0x21e
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d8:	4bab      	ldr	r3, [pc, #684]	; (8002788 <ShoreRequest+0x364>)
 80024da:	edc3 7a04 	vstr	s15, [r3, #16]
        rJoySpeed.yaw = req.yaw;
 80024de:	f9b7 3220 	ldrsh.w	r3, [r7, #544]	; 0x220
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ea:	4ba7      	ldr	r3, [pc, #668]	; (8002788 <ShoreRequest+0x364>)
 80024ec:	edc3 7a05 	vstr	s15, [r3, #20]

        rDevice[GRAB].force = req.grab;
 80024f0:	f997 2223 	ldrsb.w	r2, [r7, #547]	; 0x223
 80024f4:	4ba5      	ldr	r3, [pc, #660]	; (800278c <ShoreRequest+0x368>)
 80024f6:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 80024f8:	4ba4      	ldr	r3, [pc, #656]	; (800278c <ShoreRequest+0x368>)
 80024fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80024fe:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002502:	d102      	bne.n	800250a <ShoreRequest+0xe6>
            rDevice[GRAB].force = -127;
 8002504:	4ba1      	ldr	r3, [pc, #644]	; (800278c <ShoreRequest+0x368>)
 8002506:	2281      	movs	r2, #129	; 0x81
 8002508:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.tilt;
 800250a:	f997 2224 	ldrsb.w	r2, [r7, #548]	; 0x224
 800250e:	4b9f      	ldr	r3, [pc, #636]	; (800278c <ShoreRequest+0x368>)
 8002510:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 8002514:	4b9d      	ldr	r3, [pc, #628]	; (800278c <ShoreRequest+0x368>)
 8002516:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800251a:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800251e:	d103      	bne.n	8002528 <ShoreRequest+0x104>
        	rDevice[TILT].force = -127;
 8002520:	4b9a      	ldr	r3, [pc, #616]	; (800278c <ShoreRequest+0x368>)
 8002522:	2281      	movs	r2, #129	; 0x81
 8002524:	f883 2020 	strb.w	r2, [r3, #32]
        }
        rDevice[GRAB_ROTATION].force  = req.grab_rotate;
 8002528:	f997 2225 	ldrsb.w	r2, [r7, #549]	; 0x225
 800252c:	4b97      	ldr	r3, [pc, #604]	; (800278c <ShoreRequest+0x368>)
 800252e:	759a      	strb	r2, [r3, #22]
        if (rDevice[GRAB_ROTATION].force < -127) {
 8002530:	4b96      	ldr	r3, [pc, #600]	; (800278c <ShoreRequest+0x368>)
 8002532:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002536:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800253a:	d102      	bne.n	8002542 <ShoreRequest+0x11e>
            rDevice[GRAB_ROTATION].force = -127;
 800253c:	4b93      	ldr	r3, [pc, #588]	; (800278c <ShoreRequest+0x368>)
 800253e:	2281      	movs	r2, #129	; 0x81
 8002540:	759a      	strb	r2, [r3, #22]
        }

        rDevice[DEV1].force = req.dev1;
 8002542:	f997 2226 	ldrsb.w	r2, [r7, #550]	; 0x226
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <ShoreRequest+0x368>)
 8002548:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        rDevice[DEV2].force = req.dev2;
 800254c:	f997 2227 	ldrsb.w	r2, [r7, #551]	; 0x227
 8002550:	4b8e      	ldr	r3, [pc, #568]	; (800278c <ShoreRequest+0x368>)
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        rState.lag_error = (float) req.lag_error;
 8002556:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	4b8b      	ldr	r3, [pc, #556]	; (8002790 <ShoreRequest+0x36c>)
 8002564:	edc3 7a02 	vstr	s15, [r3, #8]

        rSensors.startIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 8002568:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800256c:	2106      	movs	r1, #6
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fa9c 	bl	8001aac <PickBit>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	4b86      	ldr	r3, [pc, #536]	; (8002794 <ShoreRequest+0x370>)
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 800257e:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8002582:	2107      	movs	r1, #7
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fa91 	bl	8001aac <PickBit>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <ShoreRequest+0x180>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
<<<<<<< Updated upstream
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fdcd 	bl	8003134 <flashFillStructure>
        	flashWriteSettings(&config);
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fd8e 	bl	80030c0 <flashWriteSettings>
=======
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd7d 	bl	800304c <flashFillStructure>
        	flashWriteSettings(&config);
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fd3e 	bl	8002fd8 <flashWriteSettings>
>>>>>>> Stashed changes
        }

        tempCameraNum = req.cameras;
 80025a4:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 80025a8:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

        uint8_t old_reset = rComputer.reset;
 80025ac:	4b7a      	ldr	r3, [pc, #488]	; (8002798 <ShoreRequest+0x374>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
        if(old_reset != req.pc_reset) {
 80025b4:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 80025b8:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 80025bc:	429a      	cmp	r2, r3
 80025be:	d002      	beq.n	80025c6 <ShoreRequest+0x1a2>
            if(req.pc_reset == PC_ON_CODE) {
 80025c0:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 80025c4:	2baa      	cmp	r3, #170	; 0xaa
            else if(req.pc_reset == PC_OFF_CODE) {
 //           	HAL_GPIO_WritePin(PC_CONTROL1_GPIO_Port, PC_CONTROL1_Pin, GPIO_PIN_SET); // RESET
   //         	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
            }
        }
        rComputer.reset = req.pc_reset;
 80025c6:	f897 222f 	ldrb.w	r2, [r7, #559]	; 0x22f
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <ShoreRequest+0x374>)
 80025cc:	701a      	strb	r2, [r3, #0]

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 80025ce:	4b73      	ldr	r3, [pc, #460]	; (800279c <ShoreRequest+0x378>)
 80025d0:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80025d4:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 80025d8:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80025dc:	2103      	movs	r1, #3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fa64 	bl	8001aac <PickBit>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <ShoreRequest+0x378>)
 80025ea:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 80025ee:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <ShoreRequest+0x1e8>
 80025fc:	4b67      	ldr	r3, [pc, #412]	; (800279c <ShoreRequest+0x378>)
 80025fe:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <ShoreRequest+0x1e8>
        	stabilizationStart(STAB_YAW);
<<<<<<< Updated upstream
 8002606:	2003      	movs	r0, #3
 8002608:	f002 f9e0 	bl	80049cc <stabilizationStart>
=======
 800259c:	2003      	movs	r0, #3
 800259e:	f002 fa15 	bl	80049cc <stabilizationStart>
>>>>>>> Stashed changes
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 800260c:	4b63      	ldr	r3, [pc, #396]	; (800279c <ShoreRequest+0x378>)
 800260e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002612:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 8002616:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fa45 	bl	8001aac <PickBit>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <ShoreRequest+0x378>)
 8002628:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 800262c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <ShoreRequest+0x226>
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <ShoreRequest+0x378>)
 800263c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <ShoreRequest+0x226>
        	stabilizationStart(STAB_ROLL);
<<<<<<< Updated upstream
 8002644:	2004      	movs	r0, #4
 8002646:	f002 f9c1 	bl	80049cc <stabilizationStart>
=======
 80025da:	2004      	movs	r0, #4
 80025dc:	f002 f9f6 	bl	80049cc <stabilizationStart>
>>>>>>> Stashed changes
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <ShoreRequest+0x378>)
 800264c:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002650:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 8002654:	4b51      	ldr	r3, [pc, #324]	; (800279c <ShoreRequest+0x378>)
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 800265c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <ShoreRequest+0x256>
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <ShoreRequest+0x378>)
 800266c:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <ShoreRequest+0x256>
        	stabilizationStart(STAB_PITCH);
<<<<<<< Updated upstream
 8002674:	2005      	movs	r0, #5
 8002676:	f002 f9a9 	bl	80049cc <stabilizationStart>
=======
 800260a:	2005      	movs	r0, #5
 800260c:	f002 f9de 	bl	80049cc <stabilizationStart>
>>>>>>> Stashed changes
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <ShoreRequest+0x378>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 8002682:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fa0f 	bl	8001aac <PickBit>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	4b42      	ldr	r3, [pc, #264]	; (800279c <ShoreRequest+0x378>)
 8002694:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 8002696:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <ShoreRequest+0x28e>
 80026a4:	4b3d      	ldr	r3, [pc, #244]	; (800279c <ShoreRequest+0x378>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <ShoreRequest+0x28e>
        	stabilizationStart(STAB_DEPTH);
<<<<<<< Updated upstream
 80026ac:	2000      	movs	r0, #0
 80026ae:	f002 f98d 	bl	80049cc <stabilizationStart>
=======
 8002642:	2000      	movs	r0, #0
 8002644:	f002 f9c2 	bl	80049cc <stabilizationStart>
>>>>>>> Stashed changes
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <ShoreRequest+0x378>)
 80026b4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026b8:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 80026bc:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80026c0:	2104      	movs	r1, #4
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f9f2 	bl	8001aac <PickBit>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <ShoreRequest+0x378>)
 80026ce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 80026d2:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <ShoreRequest+0x2cc>
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <ShoreRequest+0x378>)
 80026e2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <ShoreRequest+0x2cc>
        	stabilizationStart(STAB_LAG);
<<<<<<< Updated upstream
 80026ea:	2002      	movs	r0, #2
 80026ec:	f002 f96e 	bl	80049cc <stabilizationStart>
=======
 8002680:	2002      	movs	r0, #2
 8002682:	f002 f9a3 	bl	80049cc <stabilizationStart>
>>>>>>> Stashed changes
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <ShoreRequest+0x378>)
 80026f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026f6:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 80026fa:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80026fe:	2105      	movs	r1, #5
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f9d3 	bl	8001aac <PickBit>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <ShoreRequest+0x378>)
 800270c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8002710:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <ShoreRequest+0x30a>
 800271e:	4b1f      	ldr	r3, [pc, #124]	; (800279c <ShoreRequest+0x378>)
 8002720:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <ShoreRequest+0x30a>
        	stabilizationStart(STAB_MARCH);
<<<<<<< Updated upstream
 8002728:	2001      	movs	r0, #1
 800272a:	f002 f94f 	bl	80049cc <stabilizationStart>
=======
 80026be:	2001      	movs	r0, #1
 80026c0:	f002 f984 	bl	80049cc <stabilizationStart>
>>>>>>> Stashed changes
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <ShoreRequest+0x36c>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	f897 2236 	ldrb.w	r2, [r7, #566]	; 0x236
 8002736:	429a      	cmp	r2, r3
 8002738:	d012      	beq.n	8002760 <ShoreRequest+0x33c>
        	rState.cameraNum = tempCameraNum;
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <ShoreRequest+0x36c>)
 800273c:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8002740:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <ShoreRequest+0x36c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d80a      	bhi.n	8002760 <ShoreRequest+0x33c>
 800274a:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <ShoreRequest+0x32c>)
 800274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002750:	08002761 	.word	0x08002761
 8002754:	08002761 	.word	0x08002761
 8002758:	08002761 	.word	0x08002761
 800275c:	08002761 	.word	0x08002761
        		break;
        	}
        }

        // TODO tuuuupoooo
        formThrustVectors();
<<<<<<< Updated upstream
 8002760:	f002 ff2c 	bl	80055bc <formThrustVectors>
=======
 80026f8:	f002 fef2 	bl	80054e0 <formThrustVectors>
>>>>>>> Stashed changes

        ++uartBus[SHORE_UART].successRxCounter;
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <ShoreRequest+0x37c>)
 8002766:	895b      	ldrh	r3, [r3, #10]
 8002768:	3301      	adds	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <ShoreRequest+0x37c>)
 800276e:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 8002770:	e004      	b.n	800277c <ShoreRequest+0x358>
    	++uartBus[SHORE_UART].brokenRxCounter;
<<<<<<< Updated upstream
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <ShoreRequest+0x37c>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <ShoreRequest+0x37c>)
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20001e40 	.word	0x20001e40
 800278c:	20001e70 	.word	0x20001e70
 8002790:	20001d34 	.word	0x20001d34
 8002794:	20001dd0 	.word	0x20001dd0
 8002798:	20001e3c 	.word	0x20001e3c
 800279c:	20001eb0 	.word	0x20001eb0
 80027a0:	20000194 	.word	0x20000194

080027a4 <ShoreConfigRequest>:
=======
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <ShoreRequest+0x2f8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <ShoreRequest+0x2f8>)
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}
 800271e:	bf00      	nop
 8002720:	20001e48 	.word	0x20001e48
 8002724:	20001e60 	.word	0x20001e60
 8002728:	20001dd0 	.word	0x20001dd0
 800272c:	20001e44 	.word	0x20001e44
 8002730:	20001ea0 	.word	0x20001ea0
 8002734:	20001d34 	.word	0x20001d34
 8002738:	20000194 	.word	0x20000194

0800273c <ShoreConfigRequest>:
>>>>>>> Stashed changes

void ShoreConfigRequest(uint8_t *requestBuf)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b098      	sub	sp, #96	; 0x60
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 80027ac:	2154      	movs	r1, #84	; 0x54
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f89b 	bl	80018ea <IsCrc16ChecksummCorrect>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8158 	beq.w	8002a6c <ShoreConfigRequest+0x2c8>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
<<<<<<< Updated upstream
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4611      	mov	r1, r2
 80027c4:	2254      	movs	r2, #84	; 0x54
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00d fd7a 	bl	80102c0 <memcpy>
=======
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	4611      	mov	r1, r2
 800275c:	2254      	movs	r2, #84	; 0x54
 800275e:	4618      	mov	r0, r3
 8002760:	f00d fd76 	bl	8010250 <memcpy>
>>>>>>> Stashed changes

		rJoySpeed.march = req.march;
 80027cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d8:	4ba9      	ldr	r3, [pc, #676]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 80027da:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 80027de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ea:	4ba5      	ldr	r3, [pc, #660]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 80027ec:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 80027f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fc:	4ba0      	ldr	r3, [pc, #640]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 80027fe:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 8002802:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280e:	4b9c      	ldr	r3, [pc, #624]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 8002810:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 8002814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002820:	4b97      	ldr	r3, [pc, #604]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 8002822:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 8002826:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	4b93      	ldr	r3, [pc, #588]	; (8002a80 <ShoreConfigRequest+0x2dc>)
 8002834:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 8002838:	7a7b      	ldrb	r3, [r7, #9]
 800283a:	4618      	mov	r0, r3
 800283c:	f8d7 2016 	ldr.w	r2, [r7, #22]
 8002840:	4613      	mov	r3, r2
 8002842:	461a      	mov	r2, r3
 8002844:	498f      	ldr	r1, [pc, #572]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002846:	4603      	mov	r3, r0
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4403      	add	r3, r0
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	3304      	adds	r3, #4
 8002852:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 8002854:	7a7b      	ldrb	r3, [r7, #9]
 8002856:	4618      	mov	r0, r3
 8002858:	f8d7 201a 	ldr.w	r2, [r7, #26]
 800285c:	4613      	mov	r3, r2
 800285e:	461a      	mov	r2, r3
 8002860:	4988      	ldr	r1, [pc, #544]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002862:	4603      	mov	r3, r0
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4403      	add	r3, r0
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	3308      	adds	r3, #8
 800286e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 8002870:	7a7b      	ldrb	r3, [r7, #9]
 8002872:	4618      	mov	r0, r3
 8002874:	f8d7 201e 	ldr.w	r2, [r7, #30]
 8002878:	4613      	mov	r3, r2
 800287a:	461a      	mov	r2, r3
 800287c:	4981      	ldr	r1, [pc, #516]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800287e:	4603      	mov	r3, r0
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4403      	add	r3, r0
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	330c      	adds	r3, #12
 800288a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 800288c:	7a7b      	ldrb	r3, [r7, #9]
 800288e:	4618      	mov	r0, r3
 8002890:	f8d7 2022 	ldr.w	r2, [r7, #34]	; 0x22
 8002894:	4613      	mov	r3, r2
 8002896:	461a      	mov	r2, r3
 8002898:	497a      	ldr	r1, [pc, #488]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800289a:	4603      	mov	r3, r0
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4403      	add	r3, r0
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	3310      	adds	r3, #16
 80028a6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 80028a8:	7a7b      	ldrb	r3, [r7, #9]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 80028b0:	4613      	mov	r3, r2
 80028b2:	461a      	mov	r2, r3
 80028b4:	4973      	ldr	r1, [pc, #460]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80028b6:	4603      	mov	r3, r0
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4403      	add	r3, r0
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	3314      	adds	r3, #20
 80028c2:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 80028c4:	7a7b      	ldrb	r3, [r7, #9]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f8d7 202a 	ldr.w	r2, [r7, #42]	; 0x2a
 80028cc:	4613      	mov	r3, r2
 80028ce:	461a      	mov	r2, r3
 80028d0:	496c      	ldr	r1, [pc, #432]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80028d2:	4603      	mov	r3, r0
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4403      	add	r3, r0
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	3318      	adds	r3, #24
 80028de:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 80028e0:	7a7b      	ldrb	r3, [r7, #9]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f8d7 202e 	ldr.w	r2, [r7, #46]	; 0x2e
 80028e8:	4613      	mov	r3, r2
 80028ea:	461a      	mov	r2, r3
 80028ec:	4965      	ldr	r1, [pc, #404]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80028ee:	4603      	mov	r3, r0
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4403      	add	r3, r0
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	331c      	adds	r3, #28
 80028fa:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 80028fc:	7a7b      	ldrb	r3, [r7, #9]
 80028fe:	4618      	mov	r0, r3
 8002900:	f8d7 2032 	ldr.w	r2, [r7, #50]	; 0x32
 8002904:	4613      	mov	r3, r2
 8002906:	461a      	mov	r2, r3
 8002908:	495e      	ldr	r1, [pc, #376]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800290a:	4603      	mov	r3, r0
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4403      	add	r3, r0
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3328      	adds	r3, #40	; 0x28
 8002916:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8002918:	7a7b      	ldrb	r3, [r7, #9]
 800291a:	4618      	mov	r0, r3
 800291c:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8002920:	4613      	mov	r3, r2
 8002922:	461a      	mov	r2, r3
 8002924:	4957      	ldr	r1, [pc, #348]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002926:	4603      	mov	r3, r0
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4403      	add	r3, r0
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	332c      	adds	r3, #44	; 0x2c
 8002932:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8002934:	7a7b      	ldrb	r3, [r7, #9]
 8002936:	4618      	mov	r0, r3
 8002938:	f8d7 203a 	ldr.w	r2, [r7, #58]	; 0x3a
 800293c:	4613      	mov	r3, r2
 800293e:	461a      	mov	r2, r3
 8002940:	4950      	ldr	r1, [pc, #320]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002942:	4603      	mov	r3, r0
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4403      	add	r3, r0
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	3330      	adds	r3, #48	; 0x30
 800294e:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 8002950:	7a7b      	ldrb	r3, [r7, #9]
 8002952:	4618      	mov	r0, r3
 8002954:	f8d7 203e 	ldr.w	r2, [r7, #62]	; 0x3e
 8002958:	4613      	mov	r3, r2
 800295a:	461a      	mov	r2, r3
 800295c:	4949      	ldr	r1, [pc, #292]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800295e:	4603      	mov	r3, r0
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4403      	add	r3, r0
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	3334      	adds	r3, #52	; 0x34
 800296a:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	4618      	mov	r0, r3
 8002970:	f8d7 2042 	ldr.w	r2, [r7, #66]	; 0x42
 8002974:	4613      	mov	r3, r2
 8002976:	461a      	mov	r2, r3
 8002978:	4942      	ldr	r1, [pc, #264]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 800297a:	4603      	mov	r3, r0
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4403      	add	r3, r0
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3338      	adds	r3, #56	; 0x38
 8002986:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 8002988:	7a7b      	ldrb	r3, [r7, #9]
 800298a:	4618      	mov	r0, r3
 800298c:	f8d7 2046 	ldr.w	r2, [r7, #70]	; 0x46
 8002990:	4613      	mov	r3, r2
 8002992:	461a      	mov	r2, r3
 8002994:	493b      	ldr	r1, [pc, #236]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002996:	4603      	mov	r3, r0
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4403      	add	r3, r0
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	333c      	adds	r3, #60	; 0x3c
 80029a2:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 80029a4:	7a7b      	ldrb	r3, [r7, #9]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f8d7 204a 	ldr.w	r2, [r7, #74]	; 0x4a
 80029ac:	4613      	mov	r3, r2
 80029ae:	461a      	mov	r2, r3
 80029b0:	4934      	ldr	r1, [pc, #208]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80029b2:	4603      	mov	r3, r0
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4403      	add	r3, r0
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	3320      	adds	r3, #32
 80029be:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 80029c0:	7a7b      	ldrb	r3, [r7, #9]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f8d7 204e 	ldr.w	r2, [r7, #78]	; 0x4e
 80029c8:	4613      	mov	r3, r2
 80029ca:	461a      	mov	r2, r3
 80029cc:	492d      	ldr	r1, [pc, #180]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80029ce:	4603      	mov	r3, r0
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4403      	add	r3, r0
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	3324      	adds	r3, #36	; 0x24
 80029da:	601a      	str	r2, [r3, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 80029dc:	7a7b      	ldrb	r3, [r7, #9]
 80029de:	4618      	mov	r0, r3
 80029e0:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 80029e4:	4613      	mov	r3, r2
 80029e6:	461a      	mov	r2, r3
 80029e8:	4926      	ldr	r1, [pc, #152]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 80029ea:	4603      	mov	r3, r0
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4403      	add	r3, r0
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3340      	adds	r3, #64	; 0x40
 80029f6:	601a      	str	r2, [r3, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 80029f8:	7a7b      	ldrb	r3, [r7, #9]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f8d7 2056 	ldr.w	r2, [r7, #86]	; 0x56
 8002a00:	4613      	mov	r3, r2
 8002a02:	461a      	mov	r2, r3
 8002a04:	491f      	ldr	r1, [pc, #124]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002a06:	4603      	mov	r3, r0
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4403      	add	r3, r0
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3344      	adds	r3, #68	; 0x44
 8002a12:	601a      	str	r2, [r3, #0]

		if(rState.contourSelected != req.contour) {
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <ShoreConfigRequest+0x2e4>)
 8002a16:	785a      	ldrb	r2, [r3, #1]
 8002a18:	7a7b      	ldrb	r3, [r7, #9]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d01d      	beq.n	8002a5a <ShoreConfigRequest+0x2b6>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a24:	e00e      	b.n	8002a44 <ShoreConfigRequest+0x2a0>
				rStabConstants[i].enable = false;
 8002a26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002a2a:	4916      	ldr	r1, [pc, #88]	; (8002a84 <ShoreConfigRequest+0x2e0>)
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d9ec      	bls.n	8002a26 <ShoreConfigRequest+0x282>
			}
			rState.contourSelected = req.contour;
 8002a4c:	7a7a      	ldrb	r2, [r7, #9]
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <ShoreConfigRequest+0x2e4>)
 8002a50:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
<<<<<<< Updated upstream
 8002a52:	7a7b      	ldrb	r3, [r7, #9]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 ffb9 	bl	80049cc <stabilizationStart>
=======
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 f821 	bl	80049cc <stabilizationStart>
>>>>>>> Stashed changes
		}

		// TODO tuuuupooo
		formThrustVectors();
<<<<<<< Updated upstream
 8002a5a:	f002 fdaf 	bl	80055bc <formThrustVectors>
=======
 800298a:	f002 fda9 	bl	80054e0 <formThrustVectors>
>>>>>>> Stashed changes

		++uartBus[SHORE_UART].successRxCounter;;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a60:	895b      	ldrh	r3, [r3, #10]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a68:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002a6a:	e004      	b.n	8002a76 <ShoreConfigRequest+0x2d2>
		++uartBus[SHORE_UART].brokenRxCounter;
<<<<<<< Updated upstream
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <ShoreConfigRequest+0x2e8>)
 8002a74:	60d3      	str	r3, [r2, #12]
}
 8002a76:	bf00      	nop
 8002a78:	3760      	adds	r7, #96	; 0x60
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20001e40 	.word	0x20001e40
 8002a84:	20001eb0 	.word	0x20001eb0
 8002a88:	20001d34 	.word	0x20001d34
 8002a8c:	20000194 	.word	0x20000194

08002a90 <ShoreDirectRequest>:
=======
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <ShoreConfigRequest+0x280>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <ShoreConfigRequest+0x280>)
 80029a4:	60d3      	str	r3, [r2, #12]
}
 80029a6:	bf00      	nop
 80029a8:	3760      	adds	r7, #96	; 0x60
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20001e48 	.word	0x20001e48
 80029b4:	20001ea0 	.word	0x20001ea0
 80029b8:	20001d34 	.word	0x20001d34
 80029bc:	20000194 	.word	0x20000194

080029c0 <ShoreDirectRequest>:
>>>>>>> Stashed changes

void ShoreDirectRequest(uint8_t *requestBuf)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 8002a98:	2111      	movs	r1, #17
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe ff25 	bl	80018ea <IsCrc16ChecksummCorrect>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 809b 	beq.w	8002bde <ShoreDirectRequest+0x14e>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f107 040c 	add.w	r4, r7, #12
 8002aae:	461d      	mov	r5, r3
 8002ab0:	6828      	ldr	r0, [r5, #0]
 8002ab2:	6869      	ldr	r1, [r5, #4]
 8002ab4:	68aa      	ldr	r2, [r5, #8]
 8002ab6:	68eb      	ldr	r3, [r5, #12]
 8002ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aba:	7c2b      	ldrb	r3, [r5, #16]
 8002abc:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e00b      	b.n	8002adc <ShoreDirectRequest+0x4c>
			rStabConstants[i].enable = false;
 8002ac4:	7ffa      	ldrb	r2, [r7, #31]
 8002ac6:	494a      	ldr	r1, [pc, #296]	; (8002bf0 <ShoreDirectRequest+0x160>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002ad6:	7ffb      	ldrb	r3, [r7, #31]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d9f0      	bls.n	8002ac4 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	77bb      	strb	r3, [r7, #30]
 8002ae6:	e070      	b.n	8002bca <ShoreDirectRequest+0x13a>
			if(i != req.number) {
 8002ae8:	7b7b      	ldrb	r3, [r7, #13]
 8002aea:	7fba      	ldrb	r2, [r7, #30]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d00a      	beq.n	8002b06 <ShoreDirectRequest+0x76>
				rThrusters[i].desiredSpeed = 0;
 8002af0:	7fba      	ldrb	r2, [r7, #30]
 8002af2:	4940      	ldr	r1, [pc, #256]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	3302      	adds	r3, #2
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e05e      	b.n	8002bc4 <ShoreDirectRequest+0x134>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002b0e:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002b20:	7b7b      	ldrb	r3, [r7, #13]
 8002b22:	4619      	mov	r1, r3
 8002b24:	7bb8      	ldrb	r0, [r7, #14]
 8002b26:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b28:	460b      	mov	r3, r1
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	440b      	add	r3, r1
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	4602      	mov	r2, r0
 8002b34:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 8002b36:	7b7b      	ldrb	r3, [r7, #13]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	492c      	ldr	r1, [pc, #176]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b44:	4603      	mov	r3, r0
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4403      	add	r3, r0
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	330c      	adds	r3, #12
 8002b50:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002b52:	7b7b      	ldrb	r3, [r7, #13]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f8d7 2015 	ldr.w	r2, [r7, #21]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4925      	ldr	r1, [pc, #148]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b60:	4603      	mov	r3, r0
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4403      	add	r3, r0
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002b6e:	7b7b      	ldrb	r3, [r7, #13]
 8002b70:	4619      	mov	r1, r3
 8002b72:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b78:	460b      	mov	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	440b      	add	r3, r1
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	3314      	adds	r3, #20
 8002b84:	4602      	mov	r2, r0
 8002b86:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 8002b88:	7b7b      	ldrb	r3, [r7, #13]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f997 001a 	ldrsb.w	r0, [r7, #26]
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002b92:	460b      	mov	r3, r1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3315      	adds	r3, #21
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 8002ba2:	7c3b      	ldrb	r3, [r7, #16]
 8002ba4:	7b7a      	ldrb	r2, [r7, #13]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2d8      	uxtb	r0, r3
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <ShoreDirectRequest+0x164>)
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3316      	adds	r3, #22
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002bc4:	7fbb      	ldrb	r3, [r7, #30]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	77bb      	strb	r3, [r7, #30]
 8002bca:	7fbb      	ldrb	r3, [r7, #30]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d98b      	bls.n	8002ae8 <ShoreDirectRequest+0x58>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002bd2:	895b      	ldrh	r3, [r3, #10]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002bda:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002bdc:	e004      	b.n	8002be8 <ShoreDirectRequest+0x158>
		++uartBus[SHORE_UART].brokenRxCounter;
<<<<<<< Updated upstream
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <ShoreDirectRequest+0x168>)
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf0:	20001eb0 	.word	0x20001eb0
 8002bf4:	20001d40 	.word	0x20001d40
 8002bf8:	20000194 	.word	0x20000194

08002bfc <ShoreResponse>:
=======
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <ShoreDirectRequest+0x168>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <ShoreDirectRequest+0x168>)
 8002b14:	60d3      	str	r3, [r2, #12]
}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20001ea0 	.word	0x20001ea0
 8002b24:	20001d40 	.word	0x20001d40
 8002b28:	20000194 	.word	0x20000194

08002b2c <ShoreResponse>:
>>>>>>> Stashed changes

void ShoreResponse(uint8_t *responseBuf)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b094      	sub	sp, #80	; 0x50
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <ShoreResponse+0x74>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
    res.pitch = rSensors.pitch;
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <ShoreResponse+0x74>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	613b      	str	r3, [r7, #16]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <ShoreResponse+0x74>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	617b      	str	r3, [r7, #20]
    res.rollSpeed = rSensors.rollSpeed;
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <ShoreResponse+0x74>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	61bb      	str	r3, [r7, #24]
    res.pitchSpeed = rSensors.pitchSpeed;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <ShoreResponse+0x74>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	61fb      	str	r3, [r7, #28]
    res.yawSpeed = rSensors.yawSpeed;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <ShoreResponse+0x74>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	623b      	str	r3, [r7, #32]

    res.pressure = rSensors.pressure;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <ShoreResponse+0x74>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24

    res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8002c34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    // TODO do this properly pls
<<<<<<< Updated upstream
    res.dev_errors = 0;//robot->device.errors;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    res.pc_errors = rComputer.errors;
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <ShoreResponse+0x78>)
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH);
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	2246      	movs	r2, #70	; 0x46
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f00d fb30 	bl	80102c0 <memcpy>
=======
   // res.dev_errors = 0;//robot->device.errors;
  //  res.pc_errors = rComputer.errors;

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH-2);
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2212      	movs	r2, #18
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f00d fb77 	bl	8010250 <memcpy>

>>>>>>> Stashed changes
    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002c60:	2146      	movs	r1, #70	; 0x46
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fe61 	bl	800192a <AddCrc16Checksumm>
}
<<<<<<< Updated upstream
 8002c68:	bf00      	nop
 8002c6a:	3750      	adds	r7, #80	; 0x50
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20001dd0 	.word	0x20001dd0
 8002c74:	20001e3c 	.word	0x20001e3c
=======
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20001dd0 	.word	0x20001dd0
>>>>>>> Stashed changes

08002c78 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b09c      	sub	sp, #112	; 0x70
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002c80:	2355      	movs	r3, #85	; 0x55
 8002c82:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 8002c84:	4b74      	ldr	r3, [pc, #464]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 8002c8c:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 8002c94:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 8002c9c:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <ShoreConfigResponse+0x1e0>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002ccc:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002cce:	785b      	ldrb	r3, [r3, #1]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4a63      	ldr	r2, [pc, #396]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002cd4:	2358      	movs	r3, #88	; 0x58
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 8002ce4:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002ce6:	785b      	ldrb	r3, [r3, #1]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4a5d      	ldr	r2, [pc, #372]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002cec:	2358      	movs	r3, #88	; 0x58
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d06:	2358      	movs	r3, #88	; 0x58
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3308      	adds	r3, #8
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d20:	2358      	movs	r3, #88	; 0x58
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	331c      	adds	r3, #28
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	4619      	mov	r1, r3
 8002d36:	4a4a      	ldr	r2, [pc, #296]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d38:	2358      	movs	r3, #88	; 0x58
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3320      	adds	r3, #32
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4a44      	ldr	r2, [pc, #272]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d50:	2358      	movs	r3, #88	; 0x58
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3324      	adds	r3, #36	; 0x24
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002d60:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	4619      	mov	r1, r3
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d68:	2358      	movs	r3, #88	; 0x58
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3328      	adds	r3, #40	; 0x28
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d80:	2358      	movs	r3, #88	; 0x58
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	332c      	adds	r3, #44	; 0x2c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 8002d90:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002d98:	2358      	movs	r3, #88	; 0x58
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3330      	adds	r3, #48	; 0x30
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002db0:	2358      	movs	r3, #88	; 0x58
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002dc8:	2358      	movs	r3, #88	; 0x58
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	333c      	adds	r3, #60	; 0x3c
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002dda:	785b      	ldrb	r3, [r3, #1]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002de0:	2358      	movs	r3, #88	; 0x58
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3340      	adds	r3, #64	; 0x40
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002df8:	2358      	movs	r3, #88	; 0x58
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3334      	adds	r3, #52	; 0x34
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002e10:	2358      	movs	r3, #88	; 0x58
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	334c      	adds	r3, #76	; 0x4c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <ShoreConfigResponse+0x1e4>)
 8002e22:	785b      	ldrb	r3, [r3, #1]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <ShoreConfigResponse+0x1e8>)
 8002e28:	2358      	movs	r3, #88	; 0x58
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3350      	adds	r3, #80	; 0x50
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
<<<<<<< Updated upstream
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2263      	movs	r2, #99	; 0x63
 8002e42:	4619      	mov	r1, r3
 8002e44:	f00d fa3c 	bl	80102c0 <memcpy>
=======
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	2263      	movs	r2, #99	; 0x63
 8002d42:	4619      	mov	r1, r3
 8002d44:	f00d fa84 	bl	8010250 <memcpy>
>>>>>>> Stashed changes

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e48:	2163      	movs	r1, #99	; 0x63
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fd6d 	bl	800192a <AddCrc16Checksumm>
}
<<<<<<< Updated upstream
 8002e50:	bf00      	nop
 8002e52:	3770      	adds	r7, #112	; 0x70
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20001dd0 	.word	0x20001dd0
 8002e5c:	20001d34 	.word	0x20001d34
 8002e60:	20002060 	.word	0x20002060
=======
 8002d50:	bf00      	nop
 8002d52:	3770      	adds	r7, #112	; 0x70
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20001dd0 	.word	0x20001dd0
 8002d5c:	20001d34 	.word	0x20001d34
 8002d60:	20002068 	.word	0x20002068
>>>>>>> Stashed changes

08002e64 <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002e6c:	23ff      	movs	r3, #255	; 0xff
 8002e6e:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002e70:	23aa      	movs	r3, #170	; 0xaa
 8002e72:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 8002e74:	23bb      	movs	r3, #187	; 0xbb
 8002e76:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f107 0308 	add.w	r3, r7, #8
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6010      	str	r0, [r2, #0]
 8002e84:	889b      	ldrh	r3, [r3, #4]
 8002e86:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e88:	2106      	movs	r1, #6
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fd4d 	bl	800192a <AddCrc16Checksumm>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
<<<<<<< Updated upstream
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)&&(ReceiveBuf[1] != 0x01)&&(ReceiveBuf[2] != 0x08)&&(ReceiveBuf[3] != 0x01))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2bfa      	cmp	r3, #250	; 0xfa
 8002ea6:	d00e      	beq.n	8002ec6 <ImuReceive+0x2e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d009      	beq.n	8002ec6 <ImuReceive+0x2e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d004      	beq.n	8002ec6 <ImuReceive+0x2e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3303      	adds	r3, #3
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d152      	bne.n	8002f6c <ImuReceive+0xd4>
		 return;


	 rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	331c      	adds	r3, #28
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	331d      	adds	r3, #29
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <ImuReceive+0xe0>)
 8002ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		 //crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
		 uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	211b      	movs	r1, #27
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f848 	bl	8002f80 <calculateCRC>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	81fb      	strh	r3, [r7, #14]
		 if (rSensors.crc != calculated_crc)
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <ImuReceive+0xe0>)
 8002ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002efa:	89fa      	ldrh	r2, [r7, #14]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d137      	bne.n	8002f70 <ImuReceive+0xd8>
		 return;



  	  memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <ImuReceive+0xe0>)
 8002f0a:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <ImuReceive+0xe0>)
 8002f16:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <ImuReceive+0xe0>)
 8002f22:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.rollSpeed, ReceiveBuf + 16, sizeof(rSensors.yawSpeed));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3310      	adds	r3, #16
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <ImuReceive+0xe0>)
 8002f2e:	61da      	str	r2, [r3, #28]
  	  memcpy(&rSensors.pitchSpeed, ReceiveBuf + 20, sizeof(rSensors.pitchSpeed));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3314      	adds	r3, #20
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <ImuReceive+0xe0>)
 8002f3a:	621a      	str	r2, [r3, #32]
  	  memcpy(&rSensors.yawSpeed, ReceiveBuf + 24, sizeof(rSensors.rollSpeed));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3318      	adds	r3, #24
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <ImuReceive+0xe0>)
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
//
//  	  memcpy(&rSensors.accelX, ReceiveBuf + 28, sizeof(rSensors.accelX));
//  	  memcpy(&rSensors.accelY, ReceiveBuf + 32, sizeof(rSensors.accelY));
//  	  memcpy(&rSensors.accelZ, ReceiveBuf + 36, sizeof(rSensors.accelZ));

    rSensors.LastTick = xTaskGetTickCount();
 8002f48:	f00b fa58 	bl	800e3fc <xTaskGetTickCount>
 8002f4c:	ee07 0a90 	vmov	s15, r0
 8002f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <ImuReceive+0xe0>)
 8002f56:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <ImuReceive+0xe4>)
 8002f5c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002f60:	3301      	adds	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <ImuReceive+0xe4>)
 8002f66:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002f6a:	e002      	b.n	8002f72 <ImuReceive+0xda>
		 return;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <ImuReceive+0xda>
		 return;
 8002f70:	bf00      	nop
}
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20001dd0 	.word	0x20001dd0
 8002f7c:	20000194 	.word	0x20000194

08002f80 <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e030      	b.n	8002ff6 <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 8002f94:	897b      	ldrh	r3, [r7, #10]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	4053      	eors	r3, r2
 8002fb8:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	4053      	eors	r3, r2
 8002fc8:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	031b      	lsls	r3, r3, #12
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fd4:	4053      	eors	r3, r2
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	015b      	lsls	r3, r3, #5
 8002fde:	b21b      	sxth	r3, r3
 8002fe0:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 8002fe4:	b21a      	sxth	r2, r3
 8002fe6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fea:	4053      	eors	r3, r2
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3ca      	bcc.n	8002f94 <calculateCRC+0x14>
    }
    return crc;
 8002ffe:	897b      	ldrh	r3, [r7, #10]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <MX_DMA_Init>:
=======
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	// Check sync byte
	if ((ReceiveBuf[0] != 0xFA)||(ReceiveBuf[1] != 0x01)||(ReceiveBuf[2] != 0x28)||(ReceiveBuf[3] != 0x00))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2bfa      	cmp	r3, #250	; 0xfa
 8002da6:	d10e      	bne.n	8002dc6 <ImuReceive+0x2e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3301      	adds	r3, #1
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d109      	bne.n	8002dc6 <ImuReceive+0x2e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3302      	adds	r3, #2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b28      	cmp	r3, #40	; 0x28
 8002dba:	d104      	bne.n	8002dc6 <ImuReceive+0x2e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <ImuReceive+0x3e>
	{
		++uartBus[IMU_UART].brokenRxCounter;
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <ImuReceive+0xf8>)
 8002dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dcc:	3301      	adds	r3, #1
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <ImuReceive+0xf8>)
 8002dd0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		return;
 8002dd4:	e059      	b.n	8002e8a <ImuReceive+0xf2>
	}

	rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	331c      	adds	r3, #28
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	331d      	adds	r3, #29
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <ImuReceive+0xfc>)
 8002df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	//crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
	uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3301      	adds	r3, #1
 8002df8:	211b      	movs	r1, #27
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f84c 	bl	8002e98 <calculateCRC>
 8002e00:	4603      	mov	r3, r0
 8002e02:	81fb      	strh	r3, [r7, #14]
	if (rSensors.crc != calculated_crc)
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <ImuReceive+0xfc>)
 8002e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e0a:	89fa      	ldrh	r2, [r7, #14]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d007      	beq.n	8002e20 <ImuReceive+0x88>
	{
		++uartBus[IMU_UART].brokenRxCounter;
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <ImuReceive+0xf8>)
 8002e12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <ImuReceive+0xf8>)
 8002e1a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		return;
 8002e1e:	e034      	b.n	8002e8a <ImuReceive+0xf2>
	}



	memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <ImuReceive+0xfc>)
 8002e2a:	609a      	str	r2, [r3, #8]
	memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <ImuReceive+0xfc>)
 8002e36:	605a      	str	r2, [r3, #4]
	memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <ImuReceive+0xfc>)
 8002e42:	601a      	str	r2, [r3, #0]

	memcpy(&rSensors.rollSpeed, ReceiveBuf + 16, sizeof(rSensors.rollSpeed));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3310      	adds	r3, #16
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <ImuReceive+0xfc>)
 8002e4e:	61da      	str	r2, [r3, #28]
	memcpy(&rSensors.pitchSpeed, ReceiveBuf + 20, sizeof(rSensors.pitchSpeed));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3314      	adds	r3, #20
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <ImuReceive+0xfc>)
 8002e5a:	621a      	str	r2, [r3, #32]
	memcpy(&rSensors.yawSpeed, ReceiveBuf + 24, sizeof(rSensors.yawSpeed));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3318      	adds	r3, #24
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <ImuReceive+0xfc>)
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
	//
	//  	  memcpy(&rSensors.accelX, ReceiveBuf + 28, sizeof(rSensors.accelX));
	//  	  memcpy(&rSensors.accelY, ReceiveBuf + 32, sizeof(rSensors.accelY));
	//  	  memcpy(&rSensors.accelZ, ReceiveBuf + 36, sizeof(rSensors.accelZ));

	rSensors.LastTick = xTaskGetTickCount();
 8002e68:	f00b fa92 	bl	800e390 <xTaskGetTickCount>
 8002e6c:	ee07 0a90 	vmov	s15, r0
 8002e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <ImuReceive+0xfc>)
 8002e76:	edc3 7a05 	vstr	s15, [r3, #20]


	++uartBus[IMU_UART].successRxCounter;
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <ImuReceive+0xf8>)
 8002e7c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002e80:	3301      	adds	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <ImuReceive+0xf8>)
 8002e86:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
}
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000194 	.word	0x20000194
 8002e94:	20001dd0 	.word	0x20001dd0

08002e98 <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e030      	b.n	8002f0e <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	b21a      	sxth	r2, r3
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	4053      	eors	r3, r2
 8002ed0:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	4053      	eors	r3, r2
 8002ee0:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	031b      	lsls	r3, r3, #12
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eec:	4053      	eors	r3, r2
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	015b      	lsls	r3, r3, #5
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f02:	4053      	eors	r3, r2
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3ca      	bcc.n	8002eac <calculateCRC+0x14>
    }
    return crc;
 8002f16:	897b      	ldrh	r3, [r7, #10]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <MX_DMA_Init>:
>>>>>>> Stashed changes

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
<<<<<<< Updated upstream
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <MX_DMA_Init+0x68>)
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <MX_DMA_Init+0x68>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6153      	str	r3, [r2, #20]
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <MX_DMA_Init+0x68>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
=======
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <MX_DMA_Init+0x68>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <MX_DMA_Init+0x68>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6153      	str	r3, [r2, #20]
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <MX_DMA_Init+0x68>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
>>>>>>> Stashed changes

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
<<<<<<< Updated upstream
 800302a:	2200      	movs	r2, #0
 800302c:	2105      	movs	r1, #5
 800302e:	200e      	movs	r0, #14
 8003030:	f002 ffd2 	bl	8005fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003034:	200e      	movs	r0, #14
 8003036:	f002 ffeb 	bl	8006010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2105      	movs	r1, #5
 800303e:	200f      	movs	r0, #15
 8003040:	f002 ffca 	bl	8005fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003044:	200f      	movs	r0, #15
 8003046:	f002 ffe3 	bl	8006010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2105      	movs	r1, #5
 800304e:	2010      	movs	r0, #16
 8003050:	f002 ffc2 	bl	8005fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003054:	2010      	movs	r0, #16
 8003056:	f002 ffdb 	bl	8006010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2105      	movs	r1, #5
 800305e:	2011      	movs	r0, #17
 8003060:	f002 ffba 	bl	8005fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003064:	2011      	movs	r0, #17
 8003066:	f002 ffd3 	bl	8006010 <HAL_NVIC_EnableIRQ>

}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000

08003078 <flashReadSettings>:
=======
 8002f42:	2200      	movs	r2, #0
 8002f44:	2105      	movs	r1, #5
 8002f46:	200e      	movs	r0, #14
 8002f48:	f003 f810 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f4c:	200e      	movs	r0, #14
 8002f4e:	f003 f829 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2105      	movs	r1, #5
 8002f56:	200f      	movs	r0, #15
 8002f58:	f003 f808 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f5c:	200f      	movs	r0, #15
 8002f5e:	f003 f821 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2105      	movs	r1, #5
 8002f66:	2010      	movs	r0, #16
 8002f68:	f003 f800 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002f6c:	2010      	movs	r0, #16
 8002f6e:	f003 f819 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2105      	movs	r1, #5
 8002f76:	2011      	movs	r0, #17
 8002f78:	f002 fff8 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002f7c:	2011      	movs	r0, #17
 8002f7e:	f003 f811 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <flashReadSettings>:
>>>>>>> Stashed changes
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
<<<<<<< Updated upstream
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <flashReadSettings+0x44>)
 8003082:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003088:	2300      	movs	r3, #0
 800308a:	81fb      	strh	r3, [r7, #14]
 800308c:	e00c      	b.n	80030a8 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	601a      	str	r2, [r3, #0]
		source_addr++;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3304      	adds	r3, #4
 800309a:	617b      	str	r3, [r7, #20]
		dest_addr++;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	3304      	adds	r3, #4
 80030a0:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030a2:	89fb      	ldrh	r3, [r7, #14]
 80030a4:	3301      	adds	r3, #1
 80030a6:	81fb      	strh	r3, [r7, #14]
 80030a8:	89fb      	ldrh	r3, [r7, #14]
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d9ef      	bls.n	800308e <flashReadSettings+0x16>
	}
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	0803f800 	.word	0x0803f800

080030c0 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 80030c8:	f003 fa58 	bl	800657c <HAL_FLASH_Unlock>
=======
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <flashReadSettings+0x44>)
 8002f9a:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	81fb      	strh	r3, [r7, #14]
 8002fa4:	e00c      	b.n	8002fc0 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	601a      	str	r2, [r3, #0]
		source_addr++;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	617b      	str	r3, [r7, #20]
		dest_addr++;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8002fba:	89fb      	ldrh	r3, [r7, #14]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	81fb      	strh	r3, [r7, #14]
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d9ef      	bls.n	8002fa6 <flashReadSettings+0x16>
	}
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	0803f800 	.word	0x0803f800

08002fd8 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 8002fe0:	f003 fa96 	bl	8006510 <HAL_FLASH_Unlock>
>>>>>>> Stashed changes

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_PAGES; // erase only 1 page
<<<<<<< Updated upstream
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 80030d0:	4b17      	ldr	r3, [pc, #92]	; (8003130 <flashWriteSettings+0x70>)
 80030d2:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 80030d4:	2301      	movs	r3, #1
 80030d6:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 80030d8:	f107 020c 	add.w	r2, r7, #12
 80030dc:	f107 0310 	add.w	r3, r7, #16
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fb0e 	bl	8006704 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 80030ec:	4b10      	ldr	r3, [pc, #64]	; (8003130 <flashWriteSettings+0x70>)
 80030ee:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e013      	b.n	800311e <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 80030f6:	6a39      	ldr	r1, [r7, #32]
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	461c      	mov	r4, r3
 8003100:	4615      	mov	r5, r2
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	2002      	movs	r0, #2
 8003108:	f003 f9c8 	bl	800649c <HAL_FLASH_Program>
		source_addr++;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	3304      	adds	r3, #4
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	3304      	adds	r3, #4
 8003116:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003118:	7ffb      	ldrb	r3, [r7, #31]
 800311a:	3301      	adds	r3, #1
 800311c:	77fb      	strb	r3, [r7, #31]
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b80      	cmp	r3, #128	; 0x80
 8003122:	d9e8      	bls.n	80030f6 <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 8003124:	f003 fa50 	bl	80065c8 <HAL_FLASH_Lock>
}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bdb0      	pop	{r4, r5, r7, pc}
 8003130:	0803f800 	.word	0x0803f800

08003134 <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	22aa      	movs	r2, #170	; 0xaa
 8003140:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e154      	b.n	80033f2 <flashFillStructure+0x2be>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8003148:	7bf9      	ldrb	r1, [r7, #15]
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	48ae      	ldr	r0, [pc, #696]	; (8003408 <flashFillStructure+0x2d4>)
 800314e:	460b      	mov	r3, r1
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4403      	add	r3, r0
 8003158:	3304      	adds	r3, #4
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3301      	adds	r3, #1
 800316a:	4602      	mov	r2, r0
 800316c:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 800316e:	7bf9      	ldrb	r1, [r7, #15]
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	48a5      	ldr	r0, [pc, #660]	; (8003408 <flashFillStructure+0x2d4>)
 8003174:	460b      	mov	r3, r1
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4403      	add	r3, r0
 800317e:	3308      	adds	r3, #8
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3305      	adds	r3, #5
 8003190:	4602      	mov	r2, r0
 8003192:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8003194:	7bf9      	ldrb	r1, [r7, #15]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	489b      	ldr	r0, [pc, #620]	; (8003408 <flashFillStructure+0x2d4>)
 800319a:	460b      	mov	r3, r1
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4403      	add	r3, r0
 80031a4:	330c      	adds	r3, #12
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3308      	adds	r3, #8
 80031b6:	3301      	adds	r3, #1
 80031b8:	4602      	mov	r2, r0
 80031ba:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 80031bc:	7bf9      	ldrb	r1, [r7, #15]
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	4891      	ldr	r0, [pc, #580]	; (8003408 <flashFillStructure+0x2d4>)
 80031c2:	460b      	mov	r3, r1
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4403      	add	r3, r0
 80031cc:	3310      	adds	r3, #16
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3308      	adds	r3, #8
 80031de:	3305      	adds	r3, #5
 80031e0:	4602      	mov	r2, r0
 80031e2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 80031e4:	7bf9      	ldrb	r1, [r7, #15]
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	4887      	ldr	r0, [pc, #540]	; (8003408 <flashFillStructure+0x2d4>)
 80031ea:	460b      	mov	r3, r1
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4403      	add	r3, r0
 80031f4:	3318      	adds	r3, #24
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3310      	adds	r3, #16
 8003206:	3301      	adds	r3, #1
 8003208:	4602      	mov	r2, r0
 800320a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 800320c:	7bf9      	ldrb	r1, [r7, #15]
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	487d      	ldr	r0, [pc, #500]	; (8003408 <flashFillStructure+0x2d4>)
 8003212:	460b      	mov	r3, r1
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4403      	add	r3, r0
 800321c:	3314      	adds	r3, #20
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3310      	adds	r3, #16
 800322e:	3305      	adds	r3, #5
 8003230:	4602      	mov	r2, r0
 8003232:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8003234:	7bf9      	ldrb	r1, [r7, #15]
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	4873      	ldr	r0, [pc, #460]	; (8003408 <flashFillStructure+0x2d4>)
 800323a:	460b      	mov	r3, r1
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4403      	add	r3, r0
 8003244:	331c      	adds	r3, #28
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	3318      	adds	r3, #24
 8003256:	3301      	adds	r3, #1
 8003258:	4602      	mov	r2, r0
 800325a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 800325c:	7bf9      	ldrb	r1, [r7, #15]
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	4869      	ldr	r0, [pc, #420]	; (8003408 <flashFillStructure+0x2d4>)
 8003262:	460b      	mov	r3, r1
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4403      	add	r3, r0
 800326c:	3328      	adds	r3, #40	; 0x28
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	3318      	adds	r3, #24
 800327e:	3305      	adds	r3, #5
 8003280:	4602      	mov	r2, r0
 8003282:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 8003284:	7bf9      	ldrb	r1, [r7, #15]
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	485f      	ldr	r0, [pc, #380]	; (8003408 <flashFillStructure+0x2d4>)
 800328a:	460b      	mov	r3, r1
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4403      	add	r3, r0
 8003294:	332c      	adds	r3, #44	; 0x2c
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3320      	adds	r3, #32
 80032a6:	3301      	adds	r3, #1
 80032a8:	4602      	mov	r2, r0
 80032aa:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 80032ac:	7bf9      	ldrb	r1, [r7, #15]
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	4855      	ldr	r0, [pc, #340]	; (8003408 <flashFillStructure+0x2d4>)
 80032b2:	460b      	mov	r3, r1
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4403      	add	r3, r0
 80032bc:	3330      	adds	r3, #48	; 0x30
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3320      	adds	r3, #32
 80032ce:	3305      	adds	r3, #5
 80032d0:	4602      	mov	r2, r0
 80032d2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 80032d4:	7bf9      	ldrb	r1, [r7, #15]
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	484b      	ldr	r0, [pc, #300]	; (8003408 <flashFillStructure+0x2d4>)
 80032da:	460b      	mov	r3, r1
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4403      	add	r3, r0
 80032e4:	3334      	adds	r3, #52	; 0x34
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3328      	adds	r3, #40	; 0x28
 80032f6:	3301      	adds	r3, #1
 80032f8:	4602      	mov	r2, r0
 80032fa:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 80032fc:	7bf9      	ldrb	r1, [r7, #15]
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	4841      	ldr	r0, [pc, #260]	; (8003408 <flashFillStructure+0x2d4>)
 8003302:	460b      	mov	r3, r1
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4403      	add	r3, r0
 800330c:	3338      	adds	r3, #56	; 0x38
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3328      	adds	r3, #40	; 0x28
 800331e:	3305      	adds	r3, #5
 8003320:	4602      	mov	r2, r0
 8003322:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 8003324:	7bf9      	ldrb	r1, [r7, #15]
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	4837      	ldr	r0, [pc, #220]	; (8003408 <flashFillStructure+0x2d4>)
 800332a:	460b      	mov	r3, r1
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4403      	add	r3, r0
 8003334:	333c      	adds	r3, #60	; 0x3c
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3330      	adds	r3, #48	; 0x30
 8003346:	3301      	adds	r3, #1
 8003348:	4602      	mov	r2, r0
 800334a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 800334c:	7bf9      	ldrb	r1, [r7, #15]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	482d      	ldr	r0, [pc, #180]	; (8003408 <flashFillStructure+0x2d4>)
 8003352:	460b      	mov	r3, r1
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4403      	add	r3, r0
 800335c:	3320      	adds	r3, #32
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3330      	adds	r3, #48	; 0x30
 800336e:	3305      	adds	r3, #5
 8003370:	4602      	mov	r2, r0
 8003372:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 8003374:	7bf9      	ldrb	r1, [r7, #15]
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	4823      	ldr	r0, [pc, #140]	; (8003408 <flashFillStructure+0x2d4>)
 800337a:	460b      	mov	r3, r1
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4403      	add	r3, r0
 8003384:	3324      	adds	r3, #36	; 0x24
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	3338      	adds	r3, #56	; 0x38
 8003396:	3301      	adds	r3, #1
 8003398:	4602      	mov	r2, r0
 800339a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 800339c:	7bf9      	ldrb	r1, [r7, #15]
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	4819      	ldr	r0, [pc, #100]	; (8003408 <flashFillStructure+0x2d4>)
 80033a2:	460b      	mov	r3, r1
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4403      	add	r3, r0
 80033ac:	3340      	adds	r3, #64	; 0x40
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3338      	adds	r3, #56	; 0x38
 80033be:	3305      	adds	r3, #5
 80033c0:	4602      	mov	r2, r0
 80033c2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 80033c4:	7bf9      	ldrb	r1, [r7, #15]
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	480f      	ldr	r0, [pc, #60]	; (8003408 <flashFillStructure+0x2d4>)
 80033ca:	460b      	mov	r3, r1
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4403      	add	r3, r0
 80033d4:	3344      	adds	r3, #68	; 0x44
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3340      	adds	r3, #64	; 0x40
 80033e6:	3301      	adds	r3, #1
 80033e8:	4602      	mov	r2, r0
 80033ea:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3301      	adds	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	f67f aea7 	bls.w	8003148 <flashFillStructure+0x14>
=======
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <flashWriteSettings+0x70>)
 8002fea:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 8002fec:	2301      	movs	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 8002ff0:	f107 020c 	add.w	r2, r7, #12
 8002ff4:	f107 0310 	add.w	r3, r7, #16
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fb4c 	bl	8006698 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <flashWriteSettings+0x70>)
 8003006:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e013      	b.n	8003036 <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	461c      	mov	r4, r3
 8003018:	4615      	mov	r5, r2
 800301a:	4622      	mov	r2, r4
 800301c:	462b      	mov	r3, r5
 800301e:	2002      	movs	r0, #2
 8003020:	f003 fa06 	bl	8006430 <HAL_FLASH_Program>
		source_addr++;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	3304      	adds	r3, #4
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	3304      	adds	r3, #4
 800302e:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	3301      	adds	r3, #1
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d9e8      	bls.n	800300e <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 800303c:	f003 fa8e 	bl	800655c <HAL_FLASH_Lock>
}
 8003040:	bf00      	nop
 8003042:	3728      	adds	r7, #40	; 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bdb0      	pop	{r4, r5, r7, pc}
 8003048:	0803f800 	.word	0x0803f800

0800304c <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	22aa      	movs	r2, #170	; 0xaa
 8003058:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e143      	b.n	80032e8 <flashFillStructure+0x29c>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	49a6      	ldr	r1, [pc, #664]	; (8003300 <flashFillStructure+0x2b4>)
 8003066:	204c      	movs	r0, #76	; 0x4c
 8003068:	fb00 f303 	mul.w	r3, r0, r3
 800306c:	440b      	add	r3, r1
 800306e:	3304      	adds	r3, #4
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3301      	adds	r3, #1
 8003080:	4602      	mov	r2, r0
 8003082:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	499d      	ldr	r1, [pc, #628]	; (8003300 <flashFillStructure+0x2b4>)
 800308a:	204c      	movs	r0, #76	; 0x4c
 800308c:	fb00 f303 	mul.w	r3, r0, r3
 8003090:	440b      	add	r3, r1
 8003092:	3308      	adds	r3, #8
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	3305      	adds	r3, #5
 80030a4:	4602      	mov	r2, r0
 80030a6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	4994      	ldr	r1, [pc, #592]	; (8003300 <flashFillStructure+0x2b4>)
 80030ae:	204c      	movs	r0, #76	; 0x4c
 80030b0:	fb00 f303 	mul.w	r3, r0, r3
 80030b4:	440b      	add	r3, r1
 80030b6:	330c      	adds	r3, #12
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3308      	adds	r3, #8
 80030c8:	3301      	adds	r3, #1
 80030ca:	4602      	mov	r2, r0
 80030cc:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	498b      	ldr	r1, [pc, #556]	; (8003300 <flashFillStructure+0x2b4>)
 80030d4:	204c      	movs	r0, #76	; 0x4c
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	440b      	add	r3, r1
 80030dc:	3310      	adds	r3, #16
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3308      	adds	r3, #8
 80030ee:	3305      	adds	r3, #5
 80030f0:	4602      	mov	r2, r0
 80030f2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	4981      	ldr	r1, [pc, #516]	; (8003300 <flashFillStructure+0x2b4>)
 80030fa:	204c      	movs	r0, #76	; 0x4c
 80030fc:	fb00 f303 	mul.w	r3, r0, r3
 8003100:	440b      	add	r3, r1
 8003102:	3318      	adds	r3, #24
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3310      	adds	r3, #16
 8003114:	3301      	adds	r3, #1
 8003116:	4602      	mov	r2, r0
 8003118:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	4978      	ldr	r1, [pc, #480]	; (8003300 <flashFillStructure+0x2b4>)
 8003120:	204c      	movs	r0, #76	; 0x4c
 8003122:	fb00 f303 	mul.w	r3, r0, r3
 8003126:	440b      	add	r3, r1
 8003128:	3314      	adds	r3, #20
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3310      	adds	r3, #16
 800313a:	3305      	adds	r3, #5
 800313c:	4602      	mov	r2, r0
 800313e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	496e      	ldr	r1, [pc, #440]	; (8003300 <flashFillStructure+0x2b4>)
 8003146:	204c      	movs	r0, #76	; 0x4c
 8003148:	fb00 f303 	mul.w	r3, r0, r3
 800314c:	440b      	add	r3, r1
 800314e:	331c      	adds	r3, #28
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3318      	adds	r3, #24
 8003160:	3301      	adds	r3, #1
 8003162:	4602      	mov	r2, r0
 8003164:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	4965      	ldr	r1, [pc, #404]	; (8003300 <flashFillStructure+0x2b4>)
 800316c:	204c      	movs	r0, #76	; 0x4c
 800316e:	fb00 f303 	mul.w	r3, r0, r3
 8003172:	440b      	add	r3, r1
 8003174:	3328      	adds	r3, #40	; 0x28
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3318      	adds	r3, #24
 8003186:	3305      	adds	r3, #5
 8003188:	4602      	mov	r2, r0
 800318a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	495b      	ldr	r1, [pc, #364]	; (8003300 <flashFillStructure+0x2b4>)
 8003192:	204c      	movs	r0, #76	; 0x4c
 8003194:	fb00 f303 	mul.w	r3, r0, r3
 8003198:	440b      	add	r3, r1
 800319a:	332c      	adds	r3, #44	; 0x2c
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3320      	adds	r3, #32
 80031ac:	3301      	adds	r3, #1
 80031ae:	4602      	mov	r2, r0
 80031b0:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	4952      	ldr	r1, [pc, #328]	; (8003300 <flashFillStructure+0x2b4>)
 80031b8:	204c      	movs	r0, #76	; 0x4c
 80031ba:	fb00 f303 	mul.w	r3, r0, r3
 80031be:	440b      	add	r3, r1
 80031c0:	3330      	adds	r3, #48	; 0x30
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3320      	adds	r3, #32
 80031d2:	3305      	adds	r3, #5
 80031d4:	4602      	mov	r2, r0
 80031d6:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	4948      	ldr	r1, [pc, #288]	; (8003300 <flashFillStructure+0x2b4>)
 80031de:	204c      	movs	r0, #76	; 0x4c
 80031e0:	fb00 f303 	mul.w	r3, r0, r3
 80031e4:	440b      	add	r3, r1
 80031e6:	3334      	adds	r3, #52	; 0x34
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	3328      	adds	r3, #40	; 0x28
 80031f8:	3301      	adds	r3, #1
 80031fa:	4602      	mov	r2, r0
 80031fc:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	493f      	ldr	r1, [pc, #252]	; (8003300 <flashFillStructure+0x2b4>)
 8003204:	204c      	movs	r0, #76	; 0x4c
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	440b      	add	r3, r1
 800320c:	3338      	adds	r3, #56	; 0x38
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3328      	adds	r3, #40	; 0x28
 800321e:	3305      	adds	r3, #5
 8003220:	4602      	mov	r2, r0
 8003222:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	4935      	ldr	r1, [pc, #212]	; (8003300 <flashFillStructure+0x2b4>)
 800322a:	204c      	movs	r0, #76	; 0x4c
 800322c:	fb00 f303 	mul.w	r3, r0, r3
 8003230:	440b      	add	r3, r1
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3330      	adds	r3, #48	; 0x30
 8003244:	3301      	adds	r3, #1
 8003246:	4602      	mov	r2, r0
 8003248:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	492c      	ldr	r1, [pc, #176]	; (8003300 <flashFillStructure+0x2b4>)
 8003250:	204c      	movs	r0, #76	; 0x4c
 8003252:	fb00 f303 	mul.w	r3, r0, r3
 8003256:	440b      	add	r3, r1
 8003258:	3320      	adds	r3, #32
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3330      	adds	r3, #48	; 0x30
 800326a:	3305      	adds	r3, #5
 800326c:	4602      	mov	r2, r0
 800326e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	4922      	ldr	r1, [pc, #136]	; (8003300 <flashFillStructure+0x2b4>)
 8003276:	204c      	movs	r0, #76	; 0x4c
 8003278:	fb00 f303 	mul.w	r3, r0, r3
 800327c:	440b      	add	r3, r1
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3338      	adds	r3, #56	; 0x38
 8003290:	3301      	adds	r3, #1
 8003292:	4602      	mov	r2, r0
 8003294:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	4919      	ldr	r1, [pc, #100]	; (8003300 <flashFillStructure+0x2b4>)
 800329c:	204c      	movs	r0, #76	; 0x4c
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	440b      	add	r3, r1
 80032a4:	3344      	adds	r3, #68	; 0x44
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3338      	adds	r3, #56	; 0x38
 80032b6:	3305      	adds	r3, #5
 80032b8:	4602      	mov	r2, r0
 80032ba:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	490f      	ldr	r1, [pc, #60]	; (8003300 <flashFillStructure+0x2b4>)
 80032c2:	204c      	movs	r0, #76	; 0x4c
 80032c4:	fb00 f303 	mul.w	r3, r0, r3
 80032c8:	440b      	add	r3, r1
 80032ca:	3348      	adds	r3, #72	; 0x48
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3340      	adds	r3, #64	; 0x40
 80032dc:	3301      	adds	r3, #1
 80032de:	4602      	mov	r2, r0
 80032e0:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	3301      	adds	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	f67f aeb8 	bls.w	8003060 <flashFillStructure+0x14>
>>>>>>> Stashed changes
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
<<<<<<< Updated upstream
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20001eb0 	.word	0x20001eb0

0800340c <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	e165      	b.n	80036e6 <flashReadStructure+0x2da>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	7bf9      	ldrb	r1, [r7, #15]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4403      	add	r3, r0
 800342a:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800342e:	4613      	mov	r3, r2
 8003430:	461a      	mov	r2, r3
 8003432:	48b7      	ldr	r0, [pc, #732]	; (8003710 <flashReadStructure+0x304>)
 8003434:	460b      	mov	r3, r1
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4403      	add	r3, r0
 800343e:	3304      	adds	r3, #4
 8003440:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	7bf9      	ldrb	r1, [r7, #15]
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4403      	add	r3, r0
 8003452:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003456:	4613      	mov	r3, r2
 8003458:	461a      	mov	r2, r3
 800345a:	48ad      	ldr	r0, [pc, #692]	; (8003710 <flashReadStructure+0x304>)
 800345c:	460b      	mov	r3, r1
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4403      	add	r3, r0
 8003466:	3308      	adds	r3, #8
 8003468:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	7bf9      	ldrb	r1, [r7, #15]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4403      	add	r3, r0
 800347a:	3308      	adds	r3, #8
 800347c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003480:	4613      	mov	r3, r2
 8003482:	461a      	mov	r2, r3
 8003484:	48a2      	ldr	r0, [pc, #648]	; (8003710 <flashReadStructure+0x304>)
 8003486:	460b      	mov	r3, r1
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4403      	add	r3, r0
 8003490:	330c      	adds	r3, #12
 8003492:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	7bf9      	ldrb	r1, [r7, #15]
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	3308      	adds	r3, #8
 80034a6:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80034aa:	4613      	mov	r3, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4898      	ldr	r0, [pc, #608]	; (8003710 <flashReadStructure+0x304>)
 80034b0:	460b      	mov	r3, r1
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	440b      	add	r3, r1
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4403      	add	r3, r0
 80034ba:	3310      	adds	r3, #16
 80034bc:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	7bf9      	ldrb	r1, [r7, #15]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	3310      	adds	r3, #16
 80034d0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80034d4:	4613      	mov	r3, r2
 80034d6:	461a      	mov	r2, r3
 80034d8:	488d      	ldr	r0, [pc, #564]	; (8003710 <flashReadStructure+0x304>)
 80034da:	460b      	mov	r3, r1
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4403      	add	r3, r0
 80034e4:	3318      	adds	r3, #24
 80034e6:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	7bf9      	ldrb	r1, [r7, #15]
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4403      	add	r3, r0
 80034f8:	3310      	adds	r3, #16
 80034fa:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80034fe:	4613      	mov	r3, r2
 8003500:	461a      	mov	r2, r3
 8003502:	4883      	ldr	r0, [pc, #524]	; (8003710 <flashReadStructure+0x304>)
 8003504:	460b      	mov	r3, r1
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4403      	add	r3, r0
 800350e:	3314      	adds	r3, #20
 8003510:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	7bf9      	ldrb	r1, [r7, #15]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4403      	add	r3, r0
 8003522:	3318      	adds	r3, #24
 8003524:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003528:	4613      	mov	r3, r2
 800352a:	461a      	mov	r2, r3
 800352c:	4878      	ldr	r0, [pc, #480]	; (8003710 <flashReadStructure+0x304>)
 800352e:	460b      	mov	r3, r1
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4403      	add	r3, r0
 8003538:	331c      	adds	r3, #28
 800353a:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	7bf9      	ldrb	r1, [r7, #15]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4403      	add	r3, r0
 800354c:	3318      	adds	r3, #24
 800354e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003552:	4613      	mov	r3, r2
 8003554:	461a      	mov	r2, r3
 8003556:	486e      	ldr	r0, [pc, #440]	; (8003710 <flashReadStructure+0x304>)
 8003558:	460b      	mov	r3, r1
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4403      	add	r3, r0
 8003562:	3328      	adds	r3, #40	; 0x28
 8003564:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	7bf9      	ldrb	r1, [r7, #15]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4403      	add	r3, r0
 8003576:	3320      	adds	r3, #32
 8003578:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800357c:	4613      	mov	r3, r2
 800357e:	461a      	mov	r2, r3
 8003580:	4863      	ldr	r0, [pc, #396]	; (8003710 <flashReadStructure+0x304>)
 8003582:	460b      	mov	r3, r1
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4403      	add	r3, r0
 800358c:	332c      	adds	r3, #44	; 0x2c
 800358e:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	7bf9      	ldrb	r1, [r7, #15]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4403      	add	r3, r0
 80035a0:	3320      	adds	r3, #32
 80035a2:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80035a6:	4613      	mov	r3, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	4859      	ldr	r0, [pc, #356]	; (8003710 <flashReadStructure+0x304>)
 80035ac:	460b      	mov	r3, r1
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4403      	add	r3, r0
 80035b6:	3330      	adds	r3, #48	; 0x30
 80035b8:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	7bf9      	ldrb	r1, [r7, #15]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4403      	add	r3, r0
 80035ca:	3328      	adds	r3, #40	; 0x28
 80035cc:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80035d0:	4613      	mov	r3, r2
 80035d2:	461a      	mov	r2, r3
 80035d4:	484e      	ldr	r0, [pc, #312]	; (8003710 <flashReadStructure+0x304>)
 80035d6:	460b      	mov	r3, r1
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4403      	add	r3, r0
 80035e0:	3334      	adds	r3, #52	; 0x34
 80035e2:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	7bf9      	ldrb	r1, [r7, #15]
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4403      	add	r3, r0
 80035f4:	3328      	adds	r3, #40	; 0x28
 80035f6:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80035fa:	4613      	mov	r3, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4844      	ldr	r0, [pc, #272]	; (8003710 <flashReadStructure+0x304>)
 8003600:	460b      	mov	r3, r1
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	440b      	add	r3, r1
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4403      	add	r3, r0
 800360a:	3338      	adds	r3, #56	; 0x38
 800360c:	601a      	str	r2, [r3, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	7bf9      	ldrb	r1, [r7, #15]
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4403      	add	r3, r0
 800361e:	3330      	adds	r3, #48	; 0x30
 8003620:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003624:	4613      	mov	r3, r2
 8003626:	461a      	mov	r2, r3
 8003628:	4839      	ldr	r0, [pc, #228]	; (8003710 <flashReadStructure+0x304>)
 800362a:	460b      	mov	r3, r1
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	440b      	add	r3, r1
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4403      	add	r3, r0
 8003634:	333c      	adds	r3, #60	; 0x3c
 8003636:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	7bf9      	ldrb	r1, [r7, #15]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4403      	add	r3, r0
 8003648:	3330      	adds	r3, #48	; 0x30
 800364a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800364e:	4613      	mov	r3, r2
 8003650:	461a      	mov	r2, r3
 8003652:	482f      	ldr	r0, [pc, #188]	; (8003710 <flashReadStructure+0x304>)
 8003654:	460b      	mov	r3, r1
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	440b      	add	r3, r1
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4403      	add	r3, r0
 800365e:	3320      	adds	r3, #32
 8003660:	601a      	str	r2, [r3, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	7bf9      	ldrb	r1, [r7, #15]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4403      	add	r3, r0
 8003672:	3338      	adds	r3, #56	; 0x38
 8003674:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8003678:	4613      	mov	r3, r2
 800367a:	461a      	mov	r2, r3
 800367c:	4824      	ldr	r0, [pc, #144]	; (8003710 <flashReadStructure+0x304>)
 800367e:	460b      	mov	r3, r1
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4403      	add	r3, r0
 8003688:	3324      	adds	r3, #36	; 0x24
 800368a:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	7bf9      	ldrb	r1, [r7, #15]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4403      	add	r3, r0
 800369c:	3338      	adds	r3, #56	; 0x38
 800369e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80036a2:	4613      	mov	r3, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	481a      	ldr	r0, [pc, #104]	; (8003710 <flashReadStructure+0x304>)
 80036a8:	460b      	mov	r3, r1
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4403      	add	r3, r0
 80036b2:	3340      	adds	r3, #64	; 0x40
 80036b4:	601a      	str	r2, [r3, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	7bf9      	ldrb	r1, [r7, #15]
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4403      	add	r3, r0
 80036c6:	3340      	adds	r3, #64	; 0x40
 80036c8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80036cc:	4613      	mov	r3, r2
 80036ce:	461a      	mov	r2, r3
 80036d0:	480f      	ldr	r0, [pc, #60]	; (8003710 <flashReadStructure+0x304>)
 80036d2:	460b      	mov	r3, r1
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4403      	add	r3, r0
 80036dc:	3344      	adds	r3, #68	; 0x44
 80036de:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	3301      	adds	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	f67f ae96 	bls.w	800341a <flashReadStructure+0xe>
=======
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20001ea0 	.word	0x20001ea0

08003304 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e132      	b.n	8003578 <flashReadStructure+0x274>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	7bf9      	ldrb	r1, [r7, #15]
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4403      	add	r3, r0
 8003322:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003326:	489f      	ldr	r0, [pc, #636]	; (80035a4 <flashReadStructure+0x2a0>)
 8003328:	224c      	movs	r2, #76	; 0x4c
 800332a:	fb01 f202 	mul.w	r2, r1, r2
 800332e:	4402      	add	r2, r0
 8003330:	3204      	adds	r2, #4
 8003332:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	7bf9      	ldrb	r1, [r7, #15]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4403      	add	r3, r0
 8003344:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003348:	4896      	ldr	r0, [pc, #600]	; (80035a4 <flashReadStructure+0x2a0>)
 800334a:	224c      	movs	r2, #76	; 0x4c
 800334c:	fb01 f202 	mul.w	r2, r1, r2
 8003350:	4402      	add	r2, r0
 8003352:	3208      	adds	r2, #8
 8003354:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	7bf9      	ldrb	r1, [r7, #15]
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	3308      	adds	r3, #8
 8003368:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800336c:	488d      	ldr	r0, [pc, #564]	; (80035a4 <flashReadStructure+0x2a0>)
 800336e:	224c      	movs	r2, #76	; 0x4c
 8003370:	fb01 f202 	mul.w	r2, r1, r2
 8003374:	4402      	add	r2, r0
 8003376:	320c      	adds	r2, #12
 8003378:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	7bf9      	ldrb	r1, [r7, #15]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4403      	add	r3, r0
 800338a:	3308      	adds	r3, #8
 800338c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003390:	4884      	ldr	r0, [pc, #528]	; (80035a4 <flashReadStructure+0x2a0>)
 8003392:	224c      	movs	r2, #76	; 0x4c
 8003394:	fb01 f202 	mul.w	r2, r1, r2
 8003398:	4402      	add	r2, r0
 800339a:	3210      	adds	r2, #16
 800339c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	7bf9      	ldrb	r1, [r7, #15]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4403      	add	r3, r0
 80033ae:	3310      	adds	r3, #16
 80033b0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80033b4:	487b      	ldr	r0, [pc, #492]	; (80035a4 <flashReadStructure+0x2a0>)
 80033b6:	224c      	movs	r2, #76	; 0x4c
 80033b8:	fb01 f202 	mul.w	r2, r1, r2
 80033bc:	4402      	add	r2, r0
 80033be:	3218      	adds	r2, #24
 80033c0:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	7bf9      	ldrb	r1, [r7, #15]
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4403      	add	r3, r0
 80033d2:	3310      	adds	r3, #16
 80033d4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80033d8:	4872      	ldr	r0, [pc, #456]	; (80035a4 <flashReadStructure+0x2a0>)
 80033da:	224c      	movs	r2, #76	; 0x4c
 80033dc:	fb01 f202 	mul.w	r2, r1, r2
 80033e0:	4402      	add	r2, r0
 80033e2:	3214      	adds	r2, #20
 80033e4:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	7bf9      	ldrb	r1, [r7, #15]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4403      	add	r3, r0
 80033f6:	3318      	adds	r3, #24
 80033f8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80033fc:	4869      	ldr	r0, [pc, #420]	; (80035a4 <flashReadStructure+0x2a0>)
 80033fe:	224c      	movs	r2, #76	; 0x4c
 8003400:	fb01 f202 	mul.w	r2, r1, r2
 8003404:	4402      	add	r2, r0
 8003406:	321c      	adds	r2, #28
 8003408:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	7bf9      	ldrb	r1, [r7, #15]
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4403      	add	r3, r0
 800341a:	3318      	adds	r3, #24
 800341c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003420:	4860      	ldr	r0, [pc, #384]	; (80035a4 <flashReadStructure+0x2a0>)
 8003422:	224c      	movs	r2, #76	; 0x4c
 8003424:	fb01 f202 	mul.w	r2, r1, r2
 8003428:	4402      	add	r2, r0
 800342a:	3228      	adds	r2, #40	; 0x28
 800342c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	7bf9      	ldrb	r1, [r7, #15]
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4403      	add	r3, r0
 800343e:	3320      	adds	r3, #32
 8003440:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003444:	4857      	ldr	r0, [pc, #348]	; (80035a4 <flashReadStructure+0x2a0>)
 8003446:	224c      	movs	r2, #76	; 0x4c
 8003448:	fb01 f202 	mul.w	r2, r1, r2
 800344c:	4402      	add	r2, r0
 800344e:	322c      	adds	r2, #44	; 0x2c
 8003450:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	7bf9      	ldrb	r1, [r7, #15]
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4403      	add	r3, r0
 8003462:	3320      	adds	r3, #32
 8003464:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003468:	484e      	ldr	r0, [pc, #312]	; (80035a4 <flashReadStructure+0x2a0>)
 800346a:	224c      	movs	r2, #76	; 0x4c
 800346c:	fb01 f202 	mul.w	r2, r1, r2
 8003470:	4402      	add	r2, r0
 8003472:	3230      	adds	r2, #48	; 0x30
 8003474:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	7bf9      	ldrb	r1, [r7, #15]
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4403      	add	r3, r0
 8003486:	3328      	adds	r3, #40	; 0x28
 8003488:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800348c:	4845      	ldr	r0, [pc, #276]	; (80035a4 <flashReadStructure+0x2a0>)
 800348e:	224c      	movs	r2, #76	; 0x4c
 8003490:	fb01 f202 	mul.w	r2, r1, r2
 8003494:	4402      	add	r2, r0
 8003496:	3234      	adds	r2, #52	; 0x34
 8003498:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	7bf9      	ldrb	r1, [r7, #15]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4403      	add	r3, r0
 80034aa:	3328      	adds	r3, #40	; 0x28
 80034ac:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80034b0:	483c      	ldr	r0, [pc, #240]	; (80035a4 <flashReadStructure+0x2a0>)
 80034b2:	224c      	movs	r2, #76	; 0x4c
 80034b4:	fb01 f202 	mul.w	r2, r1, r2
 80034b8:	4402      	add	r2, r0
 80034ba:	3238      	adds	r2, #56	; 0x38
 80034bc:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	7bf9      	ldrb	r1, [r7, #15]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	3330      	adds	r3, #48	; 0x30
 80034d0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80034d4:	4833      	ldr	r0, [pc, #204]	; (80035a4 <flashReadStructure+0x2a0>)
 80034d6:	224c      	movs	r2, #76	; 0x4c
 80034d8:	fb01 f202 	mul.w	r2, r1, r2
 80034dc:	4402      	add	r2, r0
 80034de:	323c      	adds	r2, #60	; 0x3c
 80034e0:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	7bf9      	ldrb	r1, [r7, #15]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4403      	add	r3, r0
 80034f2:	3330      	adds	r3, #48	; 0x30
 80034f4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80034f8:	482a      	ldr	r0, [pc, #168]	; (80035a4 <flashReadStructure+0x2a0>)
 80034fa:	224c      	movs	r2, #76	; 0x4c
 80034fc:	fb01 f202 	mul.w	r2, r1, r2
 8003500:	4402      	add	r2, r0
 8003502:	3220      	adds	r2, #32
 8003504:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	7bf9      	ldrb	r1, [r7, #15]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4403      	add	r3, r0
 8003516:	3338      	adds	r3, #56	; 0x38
 8003518:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800351c:	4821      	ldr	r0, [pc, #132]	; (80035a4 <flashReadStructure+0x2a0>)
 800351e:	224c      	movs	r2, #76	; 0x4c
 8003520:	fb01 f202 	mul.w	r2, r1, r2
 8003524:	4402      	add	r2, r0
 8003526:	3224      	adds	r2, #36	; 0x24
 8003528:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	7bf9      	ldrb	r1, [r7, #15]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4403      	add	r3, r0
 800353a:	3338      	adds	r3, #56	; 0x38
 800353c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003540:	4818      	ldr	r0, [pc, #96]	; (80035a4 <flashReadStructure+0x2a0>)
 8003542:	224c      	movs	r2, #76	; 0x4c
 8003544:	fb01 f202 	mul.w	r2, r1, r2
 8003548:	4402      	add	r2, r0
 800354a:	3244      	adds	r2, #68	; 0x44
 800354c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	7bf9      	ldrb	r1, [r7, #15]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	3340      	adds	r3, #64	; 0x40
 8003560:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003564:	480f      	ldr	r0, [pc, #60]	; (80035a4 <flashReadStructure+0x2a0>)
 8003566:	224c      	movs	r2, #76	; 0x4c
 8003568:	fb01 f202 	mul.w	r2, r1, r2
 800356c:	4402      	add	r2, r0
 800356e:	3248      	adds	r2, #72	; 0x48
 8003570:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3301      	adds	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b05      	cmp	r3, #5
 800357c:	f67f aec9 	bls.w	8003312 <flashReadStructure+0xe>
>>>>>>> Stashed changes
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
<<<<<<< Updated upstream
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2baa      	cmp	r3, #170	; 0xaa
 80036f4:	d103      	bne.n	80036fe <flashReadStructure+0x2f2>
		rState.flash = true;
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <flashReadStructure+0x308>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	709a      	strb	r2, [r3, #2]
=======
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2baa      	cmp	r3, #170	; 0xaa
 8003586:	d103      	bne.n	8003590 <flashReadStructure+0x28c>
		rState.flash = true;
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <flashReadStructure+0x2a4>)
 800358a:	2201      	movs	r2, #1
 800358c:	709a      	strb	r2, [r3, #2]
>>>>>>> Stashed changes
	}
	else {
		rState.flash = false;
	}
}
<<<<<<< Updated upstream
 80036fc:	e002      	b.n	8003704 <flashReadStructure+0x2f8>
		rState.flash = false;
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <flashReadStructure+0x308>)
 8003700:	2200      	movs	r2, #0
 8003702:	709a      	strb	r2, [r3, #2]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	20001eb0 	.word	0x20001eb0
 8003714:	20001d34 	.word	0x20001d34

08003718 <vApplicationGetIdleTaskMemory>:
=======
 800358e:	e002      	b.n	8003596 <flashReadStructure+0x292>
		rState.flash = false;
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <flashReadStructure+0x2a4>)
 8003592:	2200      	movs	r2, #0
 8003594:	709a      	strb	r2, [r3, #2]
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20001ea0 	.word	0x20001ea0
 80035a8:	20001d34 	.word	0x20001d34

080035ac <vApplicationGetIdleTaskMemory>:
>>>>>>> Stashed changes
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
<<<<<<< Updated upstream
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a07      	ldr	r2, [pc, #28]	; (8003744 <vApplicationGetIdleTaskMemory+0x2c>)
 8003728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4a06      	ldr	r2, [pc, #24]	; (8003748 <vApplicationGetIdleTaskMemory+0x30>)
 800372e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	200015d4 	.word	0x200015d4
 8003748:	20001684 	.word	0x20001684

0800374c <vApplicationGetTimerTaskMemory>:
=======
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80035bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <vApplicationGetIdleTaskMemory+0x30>)
 80035c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	200015d4 	.word	0x200015d4
 80035dc:	20001684 	.word	0x20001684

080035e0 <vApplicationGetTimerTaskMemory>:
>>>>>>> Stashed changes
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
<<<<<<< Updated upstream
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <vApplicationGetTimerTaskMemory+0x2c>)
 800375c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a06      	ldr	r2, [pc, #24]	; (800377c <vApplicationGetTimerTaskMemory+0x30>)
 8003762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	20001884 	.word	0x20001884
 800377c:	20001934 	.word	0x20001934

08003780 <MX_FREERTOS_Init>:
=======
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <vApplicationGetTimerTaskMemory+0x2c>)
 80035f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a06      	ldr	r2, [pc, #24]	; (8003610 <vApplicationGetTimerTaskMemory+0x30>)
 80035f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	20001884 	.word	0x20001884
 8003610:	20001934 	.word	0x20001934

08003614 <MX_FREERTOS_Init>:
>>>>>>> Stashed changes
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
<<<<<<< Updated upstream
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b0bc      	sub	sp, #240	; 0xf0
 8003784:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 8003786:	f7fe fa9b 	bl	8001cc0 <uartBusesInit>
    i2cBusesInit();
 800378a:	f7fe fb97 	bl	8001ebc <i2cBusesInit>
    variableInit();
 800378e:	f7fe f9f7 	bl	8001b80 <variableInit>
    stabilizationInit();
 8003792:	f000 fe1b 	bl	80043cc <stabilizationInit>
=======
 8003614:	b5b0      	push	{r4, r5, r7, lr}
 8003616:	b0bc      	sub	sp, #240	; 0xf0
 8003618:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 800361a:	f7fe fb57 	bl	8001ccc <uartBusesInit>
    i2cBusesInit();
 800361e:	f7fe fc53 	bl	8001ec8 <i2cBusesInit>
    variableInit();
 8003622:	f7fe faad 	bl	8001b80 <variableInit>
    stabilizationInit();
 8003626:	f000 fed1 	bl	80043cc <stabilizationInit>
>>>>>>> Stashed changes


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
<<<<<<< Updated upstream
 8003796:	2300      	movs	r3, #0
 8003798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800379c:	4b75      	ldr	r3, [pc, #468]	; (8003974 <MX_FREERTOS_Init+0x1f4>)
 800379e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 80037a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f009 fb46 	bl	800ce38 <osMutexCreate>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4a72      	ldr	r2, [pc, #456]	; (8003978 <MX_FREERTOS_Init+0x1f8>)
 80037b0:	6013      	str	r3, [r2, #0]
=======
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003630:	4b75      	ldr	r3, [pc, #468]	; (8003808 <MX_FREERTOS_Init+0x1f4>)
 8003632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 8003636:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800363a:	4618      	mov	r0, r3
 800363c:	f009 fbc6 	bl	800cdcc <osMutexCreate>
 8003640:	4603      	mov	r3, r0
 8003642:	4a72      	ldr	r2, [pc, #456]	; (800380c <MX_FREERTOS_Init+0x1f8>)
 8003644:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
<<<<<<< Updated upstream
 80037b2:	4b72      	ldr	r3, [pc, #456]	; (800397c <MX_FREERTOS_Init+0x1fc>)
 80037b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 80037be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80037c2:	2200      	movs	r2, #0
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f009 fb02 	bl	800cdd0 <osTimerCreate>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a6c      	ldr	r2, [pc, #432]	; (8003980 <MX_FREERTOS_Init+0x200>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTimer */
  osTimerDef(tTechCommTimer, tTechCommTimer_callback);
 80037d2:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <MX_FREERTOS_Init+0x204>)
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  tTechCommTimerHandle = osTimerCreate(osTimer(tTechCommTimer), osTimerOnce, NULL);
 80037de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f009 faf2 	bl	800cdd0 <osTimerCreate>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4a66      	ldr	r2, [pc, #408]	; (8003988 <MX_FREERTOS_Init+0x208>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 80037f2:	4b66      	ldr	r3, [pc, #408]	; (800398c <MX_FREERTOS_Init+0x20c>)
 80037f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 80037fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f009 fae2 	bl	800cdd0 <osTimerCreate>
 800380c:	4603      	mov	r3, r0
 800380e:	4a60      	ldr	r2, [pc, #384]	; (8003990 <MX_FREERTOS_Init+0x210>)
 8003810:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8003812:	4b5e      	ldr	r3, [pc, #376]	; (800398c <MX_FREERTOS_Init+0x20c>)
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	2200      	movs	r2, #0
 800381a:	2101      	movs	r1, #1
 800381c:	485d      	ldr	r0, [pc, #372]	; (8003994 <MX_FREERTOS_Init+0x214>)
 800381e:	f00b fbd1 	bl	800efc4 <xTimerCreate>
 8003822:	4603      	mov	r3, r0
 8003824:	4a5c      	ldr	r2, [pc, #368]	; (8003998 <MX_FREERTOS_Init+0x218>)
 8003826:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 8003828:	4b54      	ldr	r3, [pc, #336]	; (800397c <MX_FREERTOS_Init+0x1fc>)
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	2200      	movs	r2, #0
 8003830:	211e      	movs	r1, #30
 8003832:	485a      	ldr	r0, [pc, #360]	; (800399c <MX_FREERTOS_Init+0x21c>)
 8003834:	f00b fbc6 	bl	800efc4 <xTimerCreate>
 8003838:	4603      	mov	r3, r0
 800383a:	4a59      	ldr	r2, [pc, #356]	; (80039a0 <MX_FREERTOS_Init+0x220>)
 800383c:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 800383e:	4b56      	ldr	r3, [pc, #344]	; (8003998 <MX_FREERTOS_Init+0x218>)
 8003840:	681c      	ldr	r4, [r3, #0]
 8003842:	f00a fddb 	bl	800e3fc <xTaskGetTickCount>
 8003846:	4602      	mov	r2, r0
 8003848:	230a      	movs	r3, #10
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	2101      	movs	r1, #1
 8003850:	4620      	mov	r0, r4
 8003852:	f00b fc47 	bl	800f0e4 <xTimerGenericCommand>
=======
 8003646:	4b72      	ldr	r3, [pc, #456]	; (8003810 <MX_FREERTOS_Init+0x1fc>)
 8003648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 8003652:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003656:	2200      	movs	r2, #0
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f009 fb82 	bl	800cd64 <osTimerCreate>
 8003660:	4603      	mov	r3, r0
 8003662:	4a6c      	ldr	r2, [pc, #432]	; (8003814 <MX_FREERTOS_Init+0x200>)
 8003664:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTimer */
  osTimerDef(tTechCommTimer, tTechCommTimer_callback);
 8003666:	4b6c      	ldr	r3, [pc, #432]	; (8003818 <MX_FREERTOS_Init+0x204>)
 8003668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  tTechCommTimerHandle = osTimerCreate(osTimer(tTechCommTimer), osTimerOnce, NULL);
 8003672:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003676:	2200      	movs	r2, #0
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f009 fb72 	bl	800cd64 <osTimerCreate>
 8003680:	4603      	mov	r3, r0
 8003682:	4a66      	ldr	r2, [pc, #408]	; (800381c <MX_FREERTOS_Init+0x208>)
 8003684:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 8003686:	4b66      	ldr	r3, [pc, #408]	; (8003820 <MX_FREERTOS_Init+0x20c>)
 8003688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 8003692:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f009 fb62 	bl	800cd64 <osTimerCreate>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4a60      	ldr	r2, [pc, #384]	; (8003824 <MX_FREERTOS_Init+0x210>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 80036a6:	4b5e      	ldr	r3, [pc, #376]	; (8003820 <MX_FREERTOS_Init+0x20c>)
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	2200      	movs	r2, #0
 80036ae:	2101      	movs	r1, #1
 80036b0:	485d      	ldr	r0, [pc, #372]	; (8003828 <MX_FREERTOS_Init+0x214>)
 80036b2:	f00b fc51 	bl	800ef58 <xTimerCreate>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4a5c      	ldr	r2, [pc, #368]	; (800382c <MX_FREERTOS_Init+0x218>)
 80036ba:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 80036bc:	4b54      	ldr	r3, [pc, #336]	; (8003810 <MX_FREERTOS_Init+0x1fc>)
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2300      	movs	r3, #0
 80036c2:	2200      	movs	r2, #0
 80036c4:	211e      	movs	r1, #30
 80036c6:	485a      	ldr	r0, [pc, #360]	; (8003830 <MX_FREERTOS_Init+0x21c>)
 80036c8:	f00b fc46 	bl	800ef58 <xTimerCreate>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4a59      	ldr	r2, [pc, #356]	; (8003834 <MX_FREERTOS_Init+0x220>)
 80036d0:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 80036d2:	4b56      	ldr	r3, [pc, #344]	; (800382c <MX_FREERTOS_Init+0x218>)
 80036d4:	681c      	ldr	r4, [r3, #0]
 80036d6:	f00a fe5b 	bl	800e390 <xTaskGetTickCount>
 80036da:	4602      	mov	r2, r0
 80036dc:	230a      	movs	r3, #10
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	2101      	movs	r1, #1
 80036e4:	4620      	mov	r0, r4
 80036e6:	f00b fcc7 	bl	800f078 <xTimerGenericCommand>
>>>>>>> Stashed changes
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
<<<<<<< Updated upstream
 8003856:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <MX_FREERTOS_Init+0x224>)
 8003858:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800385c:	461d      	mov	r5, r3
 800385e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 800386a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f009 fa4d 	bl	800cd10 <osThreadCreate>
 8003876:	4603      	mov	r3, r0
 8003878:	4a4b      	ldr	r2, [pc, #300]	; (80039a8 <MX_FREERTOS_Init+0x228>)
 800387a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <MX_FREERTOS_Init+0x22c>)
 800387e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003882:	461d      	mov	r5, r3
 8003884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003888:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800388c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 8003890:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f009 fa3a 	bl	800cd10 <osThreadCreate>
 800389c:	4603      	mov	r3, r0
 800389e:	4a44      	ldr	r2, [pc, #272]	; (80039b0 <MX_FREERTOS_Init+0x230>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <MX_FREERTOS_Init+0x234>)
 80038a4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80038a8:	461d      	mov	r5, r3
 80038aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 80038b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f009 fa27 	bl	800cd10 <osThreadCreate>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4a3c      	ldr	r2, [pc, #240]	; (80039b8 <MX_FREERTOS_Init+0x238>)
 80038c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityIdle, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 80038c8:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <MX_FREERTOS_Init+0x23c>)
 80038ca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80038ce:	461d      	mov	r5, r3
 80038d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 80038dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f009 fa14 	bl	800cd10 <osThreadCreate>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <MX_FREERTOS_Init+0x240>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityIdle, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 80038ee:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <MX_FREERTOS_Init+0x244>)
 80038f0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80038f4:	461d      	mov	r5, r3
 80038f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 8003902:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f009 fa01 	bl	800cd10 <osThreadCreate>
 800390e:	4603      	mov	r3, r0
 8003910:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <MX_FREERTOS_Init+0x248>)
 8003912:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 8003914:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <MX_FREERTOS_Init+0x24c>)
 8003916:	f107 0420 	add.w	r4, r7, #32
 800391a:	461d      	mov	r5, r3
 800391c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 8003928:	f107 0320 	add.w	r3, r7, #32
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f009 f9ee 	bl	800cd10 <osThreadCreate>
 8003934:	4603      	mov	r3, r0
 8003936:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <MX_FREERTOS_Init+0x250>)
 8003938:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityHigh, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <MX_FREERTOS_Init+0x254>)
 800393c:	1d3c      	adds	r4, r7, #4
 800393e:	461d      	mov	r5, r3
 8003940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f009 f9dd 	bl	800cd10 <osThreadCreate>
 8003956:	4603      	mov	r3, r0
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <MX_FREERTOS_Init+0x258>)
 800395a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 800395c:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <MX_FREERTOS_Init+0x25c>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <MX_FREERTOS_Init+0x25c>)
 8003962:	6811      	ldr	r1, [r2, #0]
 8003964:	2201      	movs	r2, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f007 fa94 	bl	800ae94 <HAL_UART_Receive_IT>
=======
 80036ea:	4b53      	ldr	r3, [pc, #332]	; (8003838 <MX_FREERTOS_Init+0x224>)
 80036ec:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80036f0:	461d      	mov	r5, r3
 80036f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 80036fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f009 facd 	bl	800cca4 <osThreadCreate>
 800370a:	4603      	mov	r3, r0
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <MX_FREERTOS_Init+0x228>)
 800370e:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 8003710:	4b4b      	ldr	r3, [pc, #300]	; (8003840 <MX_FREERTOS_Init+0x22c>)
 8003712:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003716:	461d      	mov	r5, r3
 8003718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800371a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800371c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 8003724:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f009 faba 	bl	800cca4 <osThreadCreate>
 8003730:	4603      	mov	r3, r0
 8003732:	4a44      	ldr	r2, [pc, #272]	; (8003844 <MX_FREERTOS_Init+0x230>)
 8003734:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 8003736:	4b44      	ldr	r3, [pc, #272]	; (8003848 <MX_FREERTOS_Init+0x234>)
 8003738:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800373c:	461d      	mov	r5, r3
 800373e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 800374a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f009 faa7 	bl	800cca4 <osThreadCreate>
 8003756:	4603      	mov	r3, r0
 8003758:	4a3c      	ldr	r2, [pc, #240]	; (800384c <MX_FREERTOS_Init+0x238>)
 800375a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityIdle, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 800375c:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <MX_FREERTOS_Init+0x23c>)
 800375e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003762:	461d      	mov	r5, r3
 8003764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800376c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 8003770:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f009 fa94 	bl	800cca4 <osThreadCreate>
 800377c:	4603      	mov	r3, r0
 800377e:	4a35      	ldr	r2, [pc, #212]	; (8003854 <MX_FREERTOS_Init+0x240>)
 8003780:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityIdle, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 8003782:	4b35      	ldr	r3, [pc, #212]	; (8003858 <MX_FREERTOS_Init+0x244>)
 8003784:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003788:	461d      	mov	r5, r3
 800378a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800378c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800378e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 8003796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f009 fa81 	bl	800cca4 <osThreadCreate>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4a2d      	ldr	r2, [pc, #180]	; (800385c <MX_FREERTOS_Init+0x248>)
 80037a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <MX_FREERTOS_Init+0x24c>)
 80037aa:	f107 0420 	add.w	r4, r7, #32
 80037ae:	461d      	mov	r5, r3
 80037b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 80037bc:	f107 0320 	add.w	r3, r7, #32
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f009 fa6e 	bl	800cca4 <osThreadCreate>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4a26      	ldr	r2, [pc, #152]	; (8003864 <MX_FREERTOS_Init+0x250>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityHigh, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <MX_FREERTOS_Init+0x254>)
 80037d0:	1d3c      	adds	r4, r7, #4
 80037d2:	461d      	mov	r5, r3
 80037d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f009 fa5d 	bl	800cca4 <osThreadCreate>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <MX_FREERTOS_Init+0x258>)
 80037ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 80037f0:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <MX_FREERTOS_Init+0x25c>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <MX_FREERTOS_Init+0x25c>)
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f007 fb14 	bl	800ae28 <HAL_UART_Receive_IT>
>>>>>>> Stashed changes
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
<<<<<<< Updated upstream
 800396c:	bf00      	nop
 800396e:	37e8      	adds	r7, #232	; 0xe8
 8003970:	46bd      	mov	sp, r7
 8003972:	bdb0      	pop	{r4, r5, r7, pc}
 8003974:	2000158c 	.word	0x2000158c
 8003978:	20001588 	.word	0x20001588
 800397c:	08003df5 	.word	0x08003df5
 8003980:	2000157c 	.word	0x2000157c
 8003984:	08003f01 	.word	0x08003f01
 8003988:	20001580 	.word	0x20001580
 800398c:	08003f15 	.word	0x08003f15
 8003990:	20001584 	.word	0x20001584
 8003994:	08011838 	.word	0x08011838
 8003998:	2000028c 	.word	0x2000028c
 800399c:	08011840 	.word	0x08011840
 80039a0:	20000288 	.word	0x20000288
 80039a4:	0801185c 	.word	0x0801185c
 80039a8:	20000290 	.word	0x20000290
 80039ac:	08011888 	.word	0x08011888
 80039b0:	20000544 	.word	0x20000544
 80039b4:	080118b4 	.word	0x080118b4
 80039b8:	200007f8 	.word	0x200007f8
 80039bc:	080118e4 	.word	0x080118e4
 80039c0:	20000aac 	.word	0x20000aac
 80039c4:	08011910 	.word	0x08011910
 80039c8:	20000d60 	.word	0x20000d60
 80039cc:	0801193c 	.word	0x0801193c
 80039d0:	20001014 	.word	0x20001014
 80039d4:	08011964 	.word	0x08011964
 80039d8:	200012c8 	.word	0x200012c8
 80039dc:	20000194 	.word	0x20000194

080039e0 <func_tLedBlinkingTask>:
=======
 8003800:	bf00      	nop
 8003802:	37e8      	adds	r7, #232	; 0xe8
 8003804:	46bd      	mov	sp, r7
 8003806:	bdb0      	pop	{r4, r5, r7, pc}
 8003808:	2000158c 	.word	0x2000158c
 800380c:	20001588 	.word	0x20001588
 8003810:	08003cf5 	.word	0x08003cf5
 8003814:	2000157c 	.word	0x2000157c
 8003818:	08003e01 	.word	0x08003e01
 800381c:	20001580 	.word	0x20001580
 8003820:	08003e15 	.word	0x08003e15
 8003824:	20001584 	.word	0x20001584
 8003828:	080117c8 	.word	0x080117c8
 800382c:	2000028c 	.word	0x2000028c
 8003830:	080117d0 	.word	0x080117d0
 8003834:	20000288 	.word	0x20000288
 8003838:	080117ec 	.word	0x080117ec
 800383c:	20000290 	.word	0x20000290
 8003840:	08011818 	.word	0x08011818
 8003844:	20000544 	.word	0x20000544
 8003848:	08011844 	.word	0x08011844
 800384c:	200007f8 	.word	0x200007f8
 8003850:	08011874 	.word	0x08011874
 8003854:	20000aac 	.word	0x20000aac
 8003858:	080118a0 	.word	0x080118a0
 800385c:	20000d60 	.word	0x20000d60
 8003860:	080118cc 	.word	0x080118cc
 8003864:	20001014 	.word	0x20001014
 8003868:	080118f4 	.word	0x080118f4
 800386c:	200012c8 	.word	0x200012c8
 8003870:	20000194 	.word	0x20000194

08003874 <func_tLedBlinkingTask>:
>>>>>>> Stashed changes
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
<<<<<<< Updated upstream
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 80039e8:	f009 f982 	bl	800ccf0 <osKernelSysTick>
 80039ec:	4603      	mov	r3, r0
 80039ee:	60fb      	str	r3, [r7, #12]
=======
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 800387c:	f009 fa02 	bl	800cc84 <osKernelSysTick>
 8003880:	4603      	mov	r3, r0
 8003882:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  /* Infinite loop */
  for(;;)
  {
	  toggle_counter++;
<<<<<<< Updated upstream
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <func_tLedBlinkingTask+0x60>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <func_tLedBlinkingTask+0x60>)
 80039f8:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 80039fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039fe:	4811      	ldr	r0, [pc, #68]	; (8003a44 <func_tLedBlinkingTask+0x64>)
 8003a00:	f003 f8b6 	bl	8006b70 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a04:	f107 030c 	add.w	r3, r7, #12
 8003a08:	2164      	movs	r1, #100	; 0x64
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f009 fa2c 	bl	800ce68 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8003a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a14:	480b      	ldr	r0, [pc, #44]	; (8003a44 <func_tLedBlinkingTask+0x64>)
 8003a16:	f003 f8ab 	bl	8006b70 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a1a:	f107 030c 	add.w	r3, r7, #12
 8003a1e:	2164      	movs	r1, #100	; 0x64
 8003a20:	4618      	mov	r0, r3
 8003a22:	f009 fa21 	bl	800ce68 <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 8003a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a2a:	4806      	ldr	r0, [pc, #24]	; (8003a44 <func_tLedBlinkingTask+0x64>)
 8003a2c:	f003 f8a0 	bl	8006b70 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003a30:	f107 030c 	add.w	r3, r7, #12
 8003a34:	2164      	movs	r1, #100	; 0x64
 8003a36:	4618      	mov	r0, r3
 8003a38:	f009 fa16 	bl	800ce68 <osDelayUntil>
	  toggle_counter++;
 8003a3c:	e7d8      	b.n	80039f0 <func_tLedBlinkingTask+0x10>
 8003a3e:	bf00      	nop
 8003a40:	20000284 	.word	0x20000284
 8003a44:	48000400 	.word	0x48000400

08003a48 <func_tVmaCommTask>:
=======
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <func_tLedBlinkingTask+0x60>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <func_tLedBlinkingTask+0x60>)
 800388c:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 800388e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003892:	4811      	ldr	r0, [pc, #68]	; (80038d8 <func_tLedBlinkingTask+0x64>)
 8003894:	f003 f936 	bl	8006b04 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003898:	f107 030c 	add.w	r3, r7, #12
 800389c:	2164      	movs	r1, #100	; 0x64
 800389e:	4618      	mov	r0, r3
 80038a0:	f009 faac 	bl	800cdfc <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 80038a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <func_tLedBlinkingTask+0x64>)
 80038aa:	f003 f92b 	bl	8006b04 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	2164      	movs	r1, #100	; 0x64
 80038b4:	4618      	mov	r0, r3
 80038b6:	f009 faa1 	bl	800cdfc <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 80038ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038be:	4806      	ldr	r0, [pc, #24]	; (80038d8 <func_tLedBlinkingTask+0x64>)
 80038c0:	f003 f920 	bl	8006b04 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	2164      	movs	r1, #100	; 0x64
 80038ca:	4618      	mov	r0, r3
 80038cc:	f009 fa96 	bl	800cdfc <osDelayUntil>
	  toggle_counter++;
 80038d0:	e7d8      	b.n	8003884 <func_tLedBlinkingTask+0x10>
 80038d2:	bf00      	nop
 80038d4:	20000284 	.word	0x20000284
 80038d8:	48000400 	.word	0x48000400

080038dc <func_tVmaCommTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
<<<<<<< Updated upstream
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003a50:	f009 f94e 	bl	800ccf0 <osKernelSysTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a66:	f003 f86b 	bl	8006b40 <HAL_GPIO_WritePin>
=======
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 80038e4:	f009 f9ce 	bl	800cc84 <osKernelSysTick>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 80038f0:	2201      	movs	r2, #1
 80038f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038fa:	f003 f8eb 	bl	8006ad4 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
<<<<<<< Updated upstream
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <func_tVmaCommTask+0xdc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2114      	movs	r1, #20
 8003a70:	4618      	mov	r0, r3
 8003a72:	f009 fec3 	bl	800d7fc <xQueueSemaphoreTake>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10b      	bne.n	8003a94 <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4829      	ldr	r0, [pc, #164]	; (8003b28 <func_tVmaCommTask+0xe0>)
 8003a82:	f001 fce9 	bl	8005458 <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 8003a86:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <func_tVmaCommTask+0xdc>)
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f009 fc3e 	bl	800d310 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <func_tVmaCommTask+0xe4>)
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <func_tVmaCommTask+0xe0>)
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <func_tVmaCommTask+0xe4>)
 8003a9c:	220b      	movs	r2, #11
 8003a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <func_tVmaCommTask+0xe8>)
 8003aac:	4413      	add	r3, r2
 8003aae:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <func_tVmaCommTask+0xe4>)
 8003ab0:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <func_tVmaCommTask+0xe4>)
 8003ab4:	2209      	movs	r2, #9
 8003ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8003aba:	2100      	movs	r1, #0
 8003abc:	481d      	ldr	r0, [pc, #116]	; (8003b34 <func_tVmaCommTask+0xec>)
 8003abe:	f7fe fa75 	bl	8001fac <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <func_tVmaCommTask+0xdc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2114      	movs	r1, #20
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f009 fe97 	bl	800d7fc <xQueueSemaphoreTake>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d111      	bne.n	8003af8 <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <func_tVmaCommTask+0xe8>)
 8003ade:	4413      	add	r3, r2
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 fd2d 	bl	8005544 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <func_tVmaCommTask+0xdc>)
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	f009 fc0c 	bl	800d310 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <func_tVmaCommTask+0xf0>)
 8003afe:	fb83 3102 	smull	r3, r1, r3, r2
 8003b02:	17d3      	asrs	r3, r2, #31
 8003b04:	1ac9      	subs	r1, r1, r3
 8003b06:	460b      	mov	r3, r1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	440b      	add	r3, r1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	1ad1      	subs	r1, r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 8003b14:	f107 0308 	add.w	r3, r7, #8
 8003b18:	2114      	movs	r1, #20
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f009 f9a4 	bl	800ce68 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003b20:	e7a3      	b.n	8003a6a <func_tVmaCommTask+0x22>
 8003b22:	bf00      	nop
 8003b24:	20001588 	.word	0x20001588
 8003b28:	20002348 	.word	0x20002348
 8003b2c:	20000194 	.word	0x20000194
 8003b30:	20002354 	.word	0x20002354
 8003b34:	200001cc 	.word	0x200001cc
 8003b38:	2aaaaaab 	.word	0x2aaaaaab

08003b3c <func_tImuCommTask>:
=======
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <func_tVmaCommTask+0xdc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2114      	movs	r1, #20
 8003904:	4618      	mov	r0, r3
 8003906:	f009 ff43 	bl	800d790 <xQueueSemaphoreTake>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10b      	bne.n	8003928 <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	4619      	mov	r1, r3
 8003914:	4829      	ldr	r0, [pc, #164]	; (80039bc <func_tVmaCommTask+0xe0>)
 8003916:	f001 fd67 	bl	80053e8 <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 800391a:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <func_tVmaCommTask+0xdc>)
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	2200      	movs	r2, #0
 8003922:	2100      	movs	r1, #0
 8003924:	f009 fcbe 	bl	800d2a4 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <func_tVmaCommTask+0xe4>)
 800392a:	4a24      	ldr	r2, [pc, #144]	; (80039bc <func_tVmaCommTask+0xe0>)
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <func_tVmaCommTask+0xe4>)
 8003930:	220b      	movs	r2, #11
 8003932:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	4a21      	ldr	r2, [pc, #132]	; (80039c4 <func_tVmaCommTask+0xe8>)
 8003940:	4413      	add	r3, r2
 8003942:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <func_tVmaCommTask+0xe4>)
 8003944:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <func_tVmaCommTask+0xe4>)
 8003948:	2209      	movs	r2, #9
 800394a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 800394e:	2100      	movs	r1, #0
 8003950:	481d      	ldr	r0, [pc, #116]	; (80039c8 <func_tVmaCommTask+0xec>)
 8003952:	f7fe fb31 	bl	8001fb8 <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003956:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <func_tVmaCommTask+0xdc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2114      	movs	r1, #20
 800395c:	4618      	mov	r0, r3
 800395e:	f009 ff17 	bl	800d790 <xQueueSemaphoreTake>
 8003962:	4603      	mov	r3, r0
 8003964:	2b01      	cmp	r3, #1
 8003966:	d111      	bne.n	800398c <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <func_tVmaCommTask+0xe8>)
 8003972:	4413      	add	r3, r2
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fd75 	bl	8005468 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 800397e:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <func_tVmaCommTask+0xdc>)
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	2300      	movs	r3, #0
 8003984:	2200      	movs	r2, #0
 8003986:	2100      	movs	r1, #0
 8003988:	f009 fc8c 	bl	800d2a4 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <func_tVmaCommTask+0xf0>)
 8003992:	fb83 3102 	smull	r3, r1, r3, r2
 8003996:	17d3      	asrs	r3, r2, #31
 8003998:	1ac9      	subs	r1, r1, r3
 800399a:	460b      	mov	r3, r1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	440b      	add	r3, r1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	1ad1      	subs	r1, r2, r3
 80039a4:	460b      	mov	r3, r1
 80039a6:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	2114      	movs	r1, #20
 80039ae:	4618      	mov	r0, r3
 80039b0:	f009 fa24 	bl	800cdfc <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 80039b4:	e7a3      	b.n	80038fe <func_tVmaCommTask+0x22>
 80039b6:	bf00      	nop
 80039b8:	20001588 	.word	0x20001588
 80039bc:	20002350 	.word	0x20002350
 80039c0:	20000194 	.word	0x20000194
 80039c4:	2000235c 	.word	0x2000235c
 80039c8:	200001cc 	.word	0x200001cc
 80039cc:	2aaaaaab 	.word	0x2aaaaaab

080039d0 <func_tImuCommTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
<<<<<<< Updated upstream
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003b44:	f009 f8d4 	bl	800ccf0 <osKernelSysTick>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	60fb      	str	r3, [r7, #12]
=======
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 80039d8:	f009 f954 	bl	800cc84 <osKernelSysTick>
 80039dc:	4603      	mov	r3, r0
 80039de:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.startIMU) {
<<<<<<< Updated upstream
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <func_tImuCommTask+0xc8>)
 8003b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d020      	beq.n	8003b98 <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <func_tImuCommTask+0xd0>)
 8003b5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003b60:	2214      	movs	r2, #20
 8003b62:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003b66:	2100      	movs	r1, #0
 8003b68:	4829      	ldr	r0, [pc, #164]	; (8003c10 <func_tImuCommTask+0xd4>)
 8003b6a:	f7fe f9b5 	bl	8001ed8 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8003b6e:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003b70:	4a28      	ldr	r2, [pc, #160]	; (8003c14 <func_tImuCommTask+0xd8>)
 8003b72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003b78:	221b      	movs	r2, #27
 8003b7a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4823      	ldr	r0, [pc, #140]	; (8003c10 <func_tImuCommTask+0xd4>)
 8003b82:	f7fe f9a9 	bl	8001ed8 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <func_tImuCommTask+0xc8>)
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <func_tImuCommTask+0xc8>)
 8003b8c:	65d3      	str	r3, [r2, #92]	; 0x5c
	  		rSensors.startIMU = false;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <func_tImuCommTask+0xc8>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b96:	e02d      	b.n	8003bf4 <func_tImuCommTask+0xb8>
=======
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <func_tImuCommTask+0xc8>)
 80039e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d020      	beq.n	8003a2c <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 80039ea:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <func_tImuCommTask+0xcc>)
 80039ec:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <func_tImuCommTask+0xd0>)
 80039ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <func_tImuCommTask+0xcc>)
 80039f4:	2214      	movs	r2, #20
 80039f6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 80039fa:	2100      	movs	r1, #0
 80039fc:	4829      	ldr	r0, [pc, #164]	; (8003aa4 <func_tImuCommTask+0xd4>)
 80039fe:	f7fe fa71 	bl	8001ee4 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <func_tImuCommTask+0xcc>)
 8003a04:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <func_tImuCommTask+0xd8>)
 8003a06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <func_tImuCommTask+0xcc>)
 8003a0c:	221b      	movs	r2, #27
 8003a0e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003a12:	2100      	movs	r1, #0
 8003a14:	4823      	ldr	r0, [pc, #140]	; (8003aa4 <func_tImuCommTask+0xd4>)
 8003a16:	f7fe fa65 	bl	8001ee4 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <func_tImuCommTask+0xc8>)
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <func_tImuCommTask+0xc8>)
 8003a20:	6613      	str	r3, [r2, #96]	; 0x60
	  		rSensors.startIMU = false;
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <func_tImuCommTask+0xc8>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a2a:	e02d      	b.n	8003a88 <func_tImuCommTask+0xb8>
>>>>>>> Stashed changes
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
<<<<<<< Updated upstream
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <func_tImuCommTask+0xdc>)
 8003b9c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003ba2:	221e      	movs	r2, #30
 8003ba4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003baa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003bb0:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003bb4:	4a14      	ldr	r2, [pc, #80]	; (8003c08 <func_tImuCommTask+0xcc>)
 8003bb6:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f007 f969 	bl	800ae94 <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003bc2:	f107 030c 	add.w	r3, r7, #12
 8003bc6:	210a      	movs	r1, #10
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f009 f94d 	bl	800ce68 <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <func_tImuCommTask+0xe0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	210a      	movs	r1, #10
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f009 fe11 	bl	800d7fc <xQueueSemaphoreTake>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d109      	bne.n	8003bf4 <func_tImuCommTask+0xb8>
	  			ImuReceive(ImuResponseBuffer);
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <func_tImuCommTask+0xdc>)
 8003be2:	f7ff f959 	bl	8002e98 <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <func_tImuCommTask+0xe0>)
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	2300      	movs	r3, #0
 8003bec:	2200      	movs	r2, #0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f009 fb8e 	bl	800d310 <xQueueGenericSend>
=======
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <func_tImuCommTask+0xcc>)
 8003a2e:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <func_tImuCommTask+0xdc>)
 8003a30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <func_tImuCommTask+0xcc>)
 8003a36:	221e      	movs	r2, #30
 8003a38:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <func_tImuCommTask+0xcc>)
 8003a3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <func_tImuCommTask+0xcc>)
 8003a44:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <func_tImuCommTask+0xcc>)
 8003a4a:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f007 f9e9 	bl	800ae28 <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003a56:	f107 030c 	add.w	r3, r7, #12
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f009 f9cd 	bl	800cdfc <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <func_tImuCommTask+0xe0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f009 fe91 	bl	800d790 <xQueueSemaphoreTake>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d109      	bne.n	8003a88 <func_tImuCommTask+0xb8>
	  			ImuReceive(ImuResponseBuffer);
 8003a74:	480d      	ldr	r0, [pc, #52]	; (8003aac <func_tImuCommTask+0xdc>)
 8003a76:	f7ff f98f 	bl	8002d98 <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <func_tImuCommTask+0xe0>)
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2200      	movs	r2, #0
 8003a82:	2100      	movs	r1, #0
 8003a84:	f009 fc0e 	bl	800d2a4 <xQueueGenericSend>
>>>>>>> Stashed changes
	  		}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
<<<<<<< Updated upstream
 8003bf4:	f107 030c 	add.w	r3, r7, #12
 8003bf8:	210a      	movs	r1, #10
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f009 f934 	bl	800ce68 <osDelayUntil>
	  	if(rSensors.startIMU) {
 8003c00:	e7a4      	b.n	8003b4c <func_tImuCommTask+0x10>
 8003c02:	bf00      	nop
 8003c04:	20001dd0 	.word	0x20001dd0
 8003c08:	20000194 	.word	0x20000194
 8003c0c:	20000024 	.word	0x20000024
 8003c10:	2000023c 	.word	0x2000023c
 8003c14:	20000008 	.word	0x20000008
 8003c18:	20002328 	.word	0x20002328
 8003c1c:	20001588 	.word	0x20001588

08003c20 <func_tStabilizationTask>:
=======
 8003a88:	f107 030c 	add.w	r3, r7, #12
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f009 f9b4 	bl	800cdfc <osDelayUntil>
	  	if(rSensors.startIMU) {
 8003a94:	e7a4      	b.n	80039e0 <func_tImuCommTask+0x10>
 8003a96:	bf00      	nop
 8003a98:	20001dd0 	.word	0x20001dd0
 8003a9c:	20000194 	.word	0x20000194
 8003aa0:	20000024 	.word	0x20000024
 8003aa4:	2000023c 	.word	0x2000023c
 8003aa8:	20000008 	.word	0x20000008
 8003aac:	20002330 	.word	0x20002330
 8003ab0:	20001588 	.word	0x20001588

08003ab4 <func_tStabilizationTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
<<<<<<< Updated upstream
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003c28:	f009 f862 	bl	800ccf0 <osKernelSysTick>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	60bb      	str	r3, [r7, #8]
=======
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003abc:	f009 f8e2 	bl	800cc84 <osKernelSysTick>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
<<<<<<< Updated upstream
 8003c30:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <func_tStabilizationTask+0x6c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	210a      	movs	r1, #10
 8003c36:	4618      	mov	r0, r3
 8003c38:	f009 fde0 	bl	800d7fc <xQueueSemaphoreTake>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d11d      	bne.n	8003c7e <func_tStabilizationTask+0x5e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e010      	b.n	8003c6a <func_tStabilizationTask+0x4a>
				if (rStabConstants[i].enable) {
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	4911      	ldr	r1, [pc, #68]	; (8003c90 <func_tStabilizationTask+0x70>)
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <func_tStabilizationTask+0x44>
					stabilizationUpdate(i);
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ffa2 	bl	8004ba8 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	3301      	adds	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d9eb      	bls.n	8003c48 <func_tStabilizationTask+0x28>
				}
			}
			//formThrustVectors();
			xSemaphoreGive(mutDataHandle);
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <func_tStabilizationTask+0x6c>)
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	2300      	movs	r3, #0
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	f009 fb49 	bl	800d310 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	210a      	movs	r1, #10
 8003c84:	4618      	mov	r0, r3
 8003c86:	f009 f8ef 	bl	800ce68 <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003c8a:	e7d1      	b.n	8003c30 <func_tStabilizationTask+0x10>
 8003c8c:	20001588 	.word	0x20001588
 8003c90:	20001eb0 	.word	0x20001eb0

08003c94 <func_tDevCommTask>:
=======
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <func_tStabilizationTask+0x70>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	210a      	movs	r1, #10
 8003aca:	4618      	mov	r0, r3
 8003acc:	f009 fe60 	bl	800d790 <xQueueSemaphoreTake>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d11e      	bne.n	8003b14 <func_tStabilizationTask+0x60>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e00f      	b.n	8003afc <func_tStabilizationTask+0x48>
				if (rStabConstants[i].enable) {
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <func_tStabilizationTask+0x74>)
 8003ae0:	214c      	movs	r1, #76	; 0x4c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <func_tStabilizationTask+0x42>
					stabilizationUpdate(i);
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 f857 	bl	8004ba4 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3301      	adds	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d9ec      	bls.n	8003adc <func_tStabilizationTask+0x28>
				}
			}
			formThrustVectors();
 8003b02:	f001 fced 	bl	80054e0 <formThrustVectors>
			xSemaphoreGive(mutDataHandle);
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <func_tStabilizationTask+0x70>)
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f009 fbc8 	bl	800d2a4 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003b14:	f107 0308 	add.w	r3, r7, #8
 8003b18:	210a      	movs	r1, #10
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f009 f96e 	bl	800cdfc <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003b20:	e7d0      	b.n	8003ac4 <func_tStabilizationTask+0x10>
 8003b22:	bf00      	nop
 8003b24:	20001588 	.word	0x20001588
 8003b28:	20001ea0 	.word	0x20001ea0

08003b2c <func_tDevCommTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
<<<<<<< Updated upstream
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003c9c:	f009 f828 	bl	800ccf0 <osKernelSysTick>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	73fb      	strb	r3, [r7, #15]
=======
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003b34:	f009 f8a6 	bl	800cc84 <osKernelSysTick>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
<<<<<<< Updated upstream
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <func_tDevCommTask+0xd0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	210a      	movs	r1, #10
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f009 fda4 	bl	800d7fc <xQueueSemaphoreTake>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10b      	bne.n	8003cd2 <func_tDevCommTask+0x3e>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	482a      	ldr	r0, [pc, #168]	; (8003d68 <func_tDevCommTask+0xd4>)
 8003cc0:	f7fe fb0e 	bl	80022e0 <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <func_tDevCommTask+0xd0>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f009 fb1f 	bl	800d310 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <func_tDevCommTask+0xd8>)
 8003cd4:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <func_tDevCommTask+0xd4>)
 8003cd6:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <func_tDevCommTask+0xd8>)
 8003cda:	2207      	movs	r2, #7
 8003cdc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <func_tDevCommTask+0xdc>)
 8003cec:	4413      	add	r3, r2
 8003cee:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <func_tDevCommTask+0xd8>)
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <func_tDevCommTask+0xd8>)
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	481d      	ldr	r0, [pc, #116]	; (8003d74 <func_tDevCommTask+0xe0>)
 8003cfe:	f7fe f955 	bl	8001fac <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <func_tDevCommTask+0xd0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	210a      	movs	r1, #10
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f009 fd77 	bl	800d7fc <xQueueSemaphoreTake>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d112      	bne.n	8003d3a <func_tDevCommTask+0xa6>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <func_tDevCommTask+0xdc>)
 8003d20:	4413      	add	r3, r2
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fb14 	bl	8002354 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003d2c:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <func_tDevCommTask+0xd0>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	2200      	movs	r2, #0
 8003d34:	2100      	movs	r1, #0
 8003d36:	f009 faeb 	bl	800d310 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <func_tDevCommTask+0xe4>)
 8003d40:	fb83 3102 	smull	r3, r1, r3, r2
 8003d44:	17d3      	asrs	r3, r2, #31
 8003d46:	1ac9      	subs	r1, r1, r3
 8003d48:	460b      	mov	r3, r1
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	440b      	add	r3, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	1ad1      	subs	r1, r2, r3
 8003d52:	460b      	mov	r3, r1
 8003d54:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	210a      	movs	r1, #10
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f009 f883 	bl	800ce68 <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003d62:	e7a1      	b.n	8003ca8 <func_tDevCommTask+0x14>
 8003d64:	20001588 	.word	0x20001588
 8003d68:	2000238c 	.word	0x2000238c
 8003d6c:	20000194 	.word	0x20000194
 8003d70:	20002394 	.word	0x20002394
 8003d74:	20000204 	.word	0x20000204
 8003d78:	2aaaaaab 	.word	0x2aaaaaab

08003d7c <func_tSensCommTask>:
=======
 8003b40:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <func_tDevCommTask+0xd8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f009 fe21 	bl	800d790 <xQueueSemaphoreTake>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10b      	bne.n	8003b6c <func_tDevCommTask+0x40>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	4619      	mov	r1, r3
 8003b58:	482b      	ldr	r0, [pc, #172]	; (8003c08 <func_tDevCommTask+0xdc>)
 8003b5a:	f7fe fbcf 	bl	80022fc <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003b5e:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <func_tDevCommTask+0xd8>)
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	2300      	movs	r3, #0
 8003b64:	2200      	movs	r2, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	f009 fb9c 	bl	800d2a4 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <func_tDevCommTask+0xe0>)
 8003b6e:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <func_tDevCommTask+0xdc>)
 8003b70:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003b72:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <func_tDevCommTask+0xe0>)
 8003b74:	2207      	movs	r2, #7
 8003b76:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <func_tDevCommTask+0xe4>)
 8003b86:	4413      	add	r3, r2
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <func_tDevCommTask+0xe0>)
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <func_tDevCommTask+0xe0>)
 8003b8e:	220a      	movs	r2, #10
 8003b90:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8003b94:	2100      	movs	r1, #0
 8003b96:	481f      	ldr	r0, [pc, #124]	; (8003c14 <func_tDevCommTask+0xe8>)
 8003b98:	f7fe fa0e 	bl	8001fb8 <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <func_tDevCommTask+0xd8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f009 fdf3 	bl	800d790 <xQueueSemaphoreTake>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d112      	bne.n	8003bd6 <func_tDevCommTask+0xaa>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <func_tDevCommTask+0xe4>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fbd4 	bl	8002370 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <func_tDevCommTask+0xd8>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f009 fb67 	bl	800d2a4 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <func_tDevCommTask+0xec>)
 8003bdc:	fb83 3102 	smull	r3, r1, r3, r2
 8003be0:	17d3      	asrs	r3, r2, #31
 8003be2:	1ac9      	subs	r1, r1, r3
 8003be4:	460b      	mov	r3, r1
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	440b      	add	r3, r1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	1ad1      	subs	r1, r2, r3
 8003bee:	460b      	mov	r3, r1
 8003bf0:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f009 f8fe 	bl	800cdfc <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003c00:	e79e      	b.n	8003b40 <func_tDevCommTask+0x14>
 8003c02:	bf00      	nop
 8003c04:	20001588 	.word	0x20001588
 8003c08:	20002394 	.word	0x20002394
 8003c0c:	20000194 	.word	0x20000194
 8003c10:	2000239c 	.word	0x2000239c
 8003c14:	20000204 	.word	0x20000204
 8003c18:	2aaaaaab 	.word	0x2aaaaaab

08003c1c <func_tSensCommTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
<<<<<<< Updated upstream
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003d84:	f008 ffb4 	bl	800ccf0 <osKernelSysTick>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	60fb      	str	r3, [r7, #12]
=======
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003c24:	f009 f82e 	bl	800cc84 <osKernelSysTick>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
<<<<<<< Updated upstream
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <func_tSensCommTask+0x50>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2164      	movs	r1, #100	; 0x64
 8003d92:	4618      	mov	r0, r3
 8003d94:	f009 fd32 	bl	800d7fc <xQueueSemaphoreTake>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10f      	bne.n	8003dbe <func_tSensCommTask+0x42>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
      rSensors.pressure = MS5837_02BA_get_actual_pressure();
 8003d9e:	f7fd f98b 	bl	80010b8 <MS5837_02BA_get_actual_pressure>
 8003da2:	ee07 0a90 	vmov	s15, r0
 8003da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <func_tSensCommTask+0x54>)
 8003dac:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      xSemaphoreGive(mutDataHandle);
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <func_tSensCommTask+0x50>)
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	2300      	movs	r3, #0
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	f009 faa9 	bl	800d310 <xQueueGenericSend>
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // �?справленная задержка
 8003dbe:	f107 030c 	add.w	r3, r7, #12
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f009 f84f 	bl	800ce68 <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003dca:	e7df      	b.n	8003d8c <func_tSensCommTask+0x10>
 8003dcc:	20001588 	.word	0x20001588
 8003dd0:	20001dd0 	.word	0x20001dd0

08003dd4 <func_tPcCommTask>:
=======
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <func_tSensCommTask+0xa4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	210a      	movs	r1, #10
 8003c32:	4618      	mov	r0, r3
 8003c34:	f009 fdac 	bl	800d790 <xQueueSemaphoreTake>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d139      	bne.n	8003cb2 <func_tSensCommTask+0x96>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
    	rSensors.pressure_raw = MS5837_02BA_get_actual_pressure();
 8003c3e:	f7fd fa3b 	bl	80010b8 <MS5837_02BA_get_actual_pressure>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4a1f      	ldr	r2, [pc, #124]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003c46:	6593      	str	r3, [r2, #88]	; 0x58
    	float pressure = movingAverageIterate(&pressure_filter, rSensors.pressure_raw);
 8003c48:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c54:	eeb0 0a67 	vmov.f32	s0, s15
 8003c58:	481b      	ldr	r0, [pc, #108]	; (8003cc8 <func_tSensCommTask+0xac>)
 8003c5a:	f000 fb5d 	bl	8004318 <movingAverageIterate>
 8003c5e:	ed87 0a03 	vstr	s0, [r7, #12]
    	rSensors.last_pressure = rSensors.pressure;
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003c68:	6653      	str	r3, [r2, #100]	; 0x64
		rSensors.pressure = pressure;
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	65d3      	str	r3, [r2, #92]	; 0x5c
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
				(rSensors.pressure - rSensors.last_pressure)*1000/DELAY_SENSOR_TASK);
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003c72:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003c78:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c80:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003ccc <func_tSensCommTask+0xb0>
 8003c84:	ee67 7a87 	vmul.f32	s15, s15, s14
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
 8003c88:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c90:	eeb0 0a47 	vmov.f32	s0, s14
 8003c94:	480e      	ldr	r0, [pc, #56]	; (8003cd0 <func_tSensCommTask+0xb4>)
 8003c96:	f000 fb3f 	bl	8004318 <movingAverageIterate>
 8003c9a:	eef0 7a40 	vmov.f32	s15, s0
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <func_tSensCommTask+0xa8>)
 8003ca0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		xSemaphoreGive(mutDataHandle);
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <func_tSensCommTask+0xa4>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	f009 faf9 	bl	800d2a4 <xQueueGenericSend>
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // �?справленная задержка
 8003cb2:	f107 0308 	add.w	r3, r7, #8
 8003cb6:	210a      	movs	r1, #10
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f009 f89f 	bl	800cdfc <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003cbe:	e7b5      	b.n	8003c2c <func_tSensCommTask+0x10>
 8003cc0:	20001588 	.word	0x20001588
 8003cc4:	20001dd0 	.word	0x20001dd0
 8003cc8:	20002434 	.word	0x20002434
 8003ccc:	447a0000 	.word	0x447a0000
 8003cd0:	20002504 	.word	0x20002504

08003cd4 <func_tPcCommTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
<<<<<<< Updated upstream
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003ddc:	f008 ff88 	bl	800ccf0 <osKernelSysTick>
 8003de0:	4603      	mov	r3, r0
 8003de2:	60fb      	str	r3, [r7, #12]
=======
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003cdc:	f008 ffd2 	bl	800cc84 <osKernelSysTick>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
<<<<<<< Updated upstream
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	210a      	movs	r1, #10
 8003dea:	4618      	mov	r0, r3
 8003dec:	f009 f83c 	bl	800ce68 <osDelayUntil>
 8003df0:	e7f8      	b.n	8003de4 <func_tPcCommTask+0x10>
	...

08003df4 <func_tUartTimer>:
=======
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	210a      	movs	r1, #10
 8003cea:	4618      	mov	r0, r3
 8003cec:	f009 f886 	bl	800cdfc <osDelayUntil>
 8003cf0:	e7f8      	b.n	8003ce4 <func_tPcCommTask+0x10>
	...

08003cf4 <func_tUartTimer>:
>>>>>>> Stashed changes
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
<<<<<<< Updated upstream
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <func_tUartTimer+0x100>)
 8003dfe:	7a1b      	ldrb	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d05a      	beq.n	8003eba <func_tUartTimer+0xc6>
		bool package = true;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <func_tUartTimer+0x104>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2105      	movs	r1, #5
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f009 fcf4 	bl	800d7fc <xQueueSemaphoreTake>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d140      	bne.n	8003e9c <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003e1a:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2baa      	cmp	r3, #170	; 0xaa
 8003e22:	d023      	beq.n	8003e6c <func_tUartTimer+0x78>
 8003e24:	2baa      	cmp	r3, #170	; 0xaa
 8003e26:	dc30      	bgt.n	8003e8a <func_tUartTimer+0x96>
 8003e28:	2b55      	cmp	r3, #85	; 0x55
 8003e2a:	d010      	beq.n	8003e4e <func_tUartTimer+0x5a>
 8003e2c:	2ba5      	cmp	r3, #165	; 0xa5
 8003e2e:	d12c      	bne.n	8003e8a <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003e30:	4b30      	ldr	r3, [pc, #192]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe faf5 	bl	8002424 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003e3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fedc 	bl	8002bfc <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e46:	2246      	movs	r2, #70	; 0x46
 8003e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e4c:	e01f      	b.n	8003e8e <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fca6 	bl	80027a4 <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003e58:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe ff0b 	bl	8002c78 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e64:	2263      	movs	r2, #99	; 0x63
 8003e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e6a:	e010      	b.n	8003e8e <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe fe0d 	bl	8002a90 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003e76:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fff2 	bl	8002e64 <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <func_tUartTimer+0x100>)
 8003e82:	2206      	movs	r2, #6
 8003e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e88:	e001      	b.n	8003e8e <func_tUartTimer+0x9a>
				default:
					package = false;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <func_tUartTimer+0x104>)
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	2200      	movs	r2, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	f009 fa3a 	bl	800d310 <xQueueGenericSend>
		}
		if(package) {
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <func_tUartTimer+0x100>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <func_tUartTimer+0x100>)
 8003ea8:	6851      	ldr	r1, [r2, #4]
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <func_tUartTimer+0x100>)
 8003eac:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f006 ff90 	bl	800add8 <HAL_UART_Transmit_IT>
 8003eb8:	e004      	b.n	8003ec4 <func_tUartTimer+0xd0>
=======
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003cfc:	4b3d      	ldr	r3, [pc, #244]	; (8003df4 <func_tUartTimer+0x100>)
 8003cfe:	7a1b      	ldrb	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05a      	beq.n	8003dba <func_tUartTimer+0xc6>
		bool package = true;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003d08:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <func_tUartTimer+0x104>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2105      	movs	r1, #5
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f009 fd3e 	bl	800d790 <xQueueSemaphoreTake>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d140      	bne.n	8003d9c <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <func_tUartTimer+0x100>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2baa      	cmp	r3, #170	; 0xaa
 8003d22:	d023      	beq.n	8003d6c <func_tUartTimer+0x78>
 8003d24:	2baa      	cmp	r3, #170	; 0xaa
 8003d26:	dc30      	bgt.n	8003d8a <func_tUartTimer+0x96>
 8003d28:	2b55      	cmp	r3, #85	; 0x55
 8003d2a:	d010      	beq.n	8003d4e <func_tUartTimer+0x5a>
 8003d2c:	2ba5      	cmp	r3, #165	; 0xa5
 8003d2e:	d12c      	bne.n	8003d8a <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003d30:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <func_tUartTimer+0x100>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fb83 	bl	8002440 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <func_tUartTimer+0x100>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fef4 	bl	8002b2c <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <func_tUartTimer+0x100>)
 8003d46:	2214      	movs	r2, #20
 8003d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003d4c:	e01f      	b.n	8003d8e <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003d4e:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <func_tUartTimer+0x100>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fcf2 	bl	800273c <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <func_tUartTimer+0x100>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe ff0b 	bl	8002b78 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <func_tUartTimer+0x100>)
 8003d64:	2263      	movs	r2, #99	; 0x63
 8003d66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003d6a:	e010      	b.n	8003d8e <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <func_tUartTimer+0x100>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fe25 	bl	80029c0 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003d76:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <func_tUartTimer+0x100>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fff2 	bl	8002d64 <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003d80:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <func_tUartTimer+0x100>)
 8003d82:	2206      	movs	r2, #6
 8003d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003d88:	e001      	b.n	8003d8e <func_tUartTimer+0x9a>
				default:
					package = false;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <func_tUartTimer+0x104>)
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	2200      	movs	r2, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	f009 fa84 	bl	800d2a4 <xQueueGenericSend>
		}
		if(package) {
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <func_tUartTimer+0x100>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <func_tUartTimer+0x100>)
 8003da8:	6851      	ldr	r1, [r2, #4]
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <func_tUartTimer+0x100>)
 8003dac:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003db0:	b292      	uxth	r2, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f006 ffda 	bl	800ad6c <HAL_UART_Transmit_IT>
 8003db8:	e004      	b.n	8003dc4 <func_tUartTimer+0xd0>
>>>>>>> Stashed changes
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
<<<<<<< Updated upstream
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <func_tUartTimer+0x100>)
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <func_tUartTimer+0x100>)
 8003ec2:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <func_tUartTimer+0x108>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <func_tUartTimer+0x100>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <func_tUartTimer+0x100>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f007 f959 	bl	800b18c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <func_tUartTimer+0x100>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <func_tUartTimer+0x100>)
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f006 ffd5 	bl	800ae94 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000194 	.word	0x20000194
 8003ef8:	20001588 	.word	0x20001588
 8003efc:	2000027c 	.word	0x2000027c

08003f00 <tTechCommTimer_callback>:
=======
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <func_tUartTimer+0x100>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <func_tUartTimer+0x100>)
 8003dc2:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <func_tUartTimer+0x108>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <func_tUartTimer+0x100>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <func_tUartTimer+0x100>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f007 f9a3 	bl	800b120 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <func_tUartTimer+0x100>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <func_tUartTimer+0x100>)
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f007 f81f 	bl	800ae28 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000194 	.word	0x20000194
 8003df8:	20001588 	.word	0x20001588
 8003dfc:	2000027c 	.word	0x2000027c

08003e00 <tTechCommTimer_callback>:
>>>>>>> Stashed changes

/* tTechCommTimer_callback function */
void tTechCommTimer_callback(void const * argument)
{
<<<<<<< Updated upstream
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
=======
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN tTechCommTimer_callback */

  /* USER CODE END tTechCommTimer_callback */
}
<<<<<<< Updated upstream
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <tSilence_func>:
=======
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <tSilence_func>:
>>>>>>> Stashed changes

/* tSilence_func function */
void tSilence_func(void const * argument)
{
<<<<<<< Updated upstream
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	6078      	str	r0, [r7, #4]
=======
 8003e14:	b5b0      	push	{r4, r5, r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN tSilence_func */
	input_value = alpha*sin(sin_counter * omega/1000.0);
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <tSilence_func+0x108>)
 8003e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fb26 	bl	8000474 <__aeabi_i2d>
 8003e28:	4604      	mov	r4, r0
 8003e2a:	460d      	mov	r5, r1
 8003e2c:	4b3c      	ldr	r3, [pc, #240]	; (8003f20 <tSilence_func+0x10c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e38:	4b3a      	ldr	r3, [pc, #232]	; (8003f24 <tSilence_func+0x110>)
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e42:	ee17 0a90 	vmov	r0, s15
 8003e46:	f7fc fb27 	bl	8000498 <__aeabi_f2d>
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <tSilence_func+0x114>)
 8003e50:	f7fc fca4 	bl	800079c <__aeabi_ddiv>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	ec43 2b17 	vmov	d7, r2, r3
 8003e5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e60:	eef0 0a67 	vmov.f32	s1, s15
 8003e64:	f00c faa4 	bl	80103b0 <sin>
 8003e68:	ec53 2b10 	vmov	r2, r3, d0
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	4629      	mov	r1, r5
 8003e70:	f7fc fb6a 	bl	8000548 <__aeabi_dmul>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc fdfe 	bl	8000a7c <__aeabi_d2iz>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b21a      	sxth	r2, r3
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <tSilence_func+0x118>)
 8003e86:	801a      	strh	r2, [r3, #0]
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
<<<<<<< Updated upstream
 8003f1c:	f00a fa6e 	bl	800e3fc <xTaskGetTickCount>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd f846 	bl	8000fb4 <fromTickToMs>
 8003f28:	eeb0 7a40 	vmov.f32	s14, s0
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <tSilence_func+0x104>)
 8003f2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f36:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800401c <tSilence_func+0x108>
 8003f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	dd54      	ble.n	8003fee <tSilence_func+0xda>
 8003f44:	4b36      	ldr	r3, [pc, #216]	; (8004020 <tSilence_func+0x10c>)
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d150      	bne.n	8003fee <tSilence_func+0xda>
		input_value = alpha*sin(sin_counter * omega/1000.0);
 8003f4c:	4b35      	ldr	r3, [pc, #212]	; (8004024 <tSilence_func+0x110>)
 8003f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc fa8e 	bl	8000474 <__aeabi_i2d>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	460d      	mov	r5, r1
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <tSilence_func+0x114>)
 8003f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <tSilence_func+0x118>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc fa71 	bl	8000454 <__aeabi_ui2d>
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <tSilence_func+0x11c>)
 8003f78:	f7fc fc10 	bl	800079c <__aeabi_ddiv>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	ec43 2b17 	vmov	d7, r2, r3
 8003f84:	eeb0 0a47 	vmov.f32	s0, s14
 8003f88:	eef0 0a67 	vmov.f32	s1, s15
 8003f8c:	f00c fa48 	bl	8010420 <sin>
 8003f90:	ec53 2b10 	vmov	r2, r3, d0
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc fad6 	bl	8000548 <__aeabi_dmul>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7fc fd6a 	bl	8000a7c <__aeabi_d2iz>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	b21a      	sxth	r2, r3
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <tSilence_func+0x120>)
 8003fae:	801a      	strh	r2, [r3, #0]
=======
 8003e88:	f00a fa82 	bl	800e390 <xTaskGetTickCount>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd f890 	bl	8000fb4 <fromTickToMs>
 8003e94:	eeb0 7a40 	vmov.f32	s14, s0
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <tSilence_func+0x11c>)
 8003e9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003f34 <tSilence_func+0x120>
 8003ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	dd20      	ble.n	8003ef2 <tSilence_func+0xde>
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <tSilence_func+0x124>)
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11c      	bne.n	8003ef2 <tSilence_func+0xde>
>>>>>>> Stashed changes
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
<<<<<<< Updated upstream
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <tSilence_func+0x104>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f007 f8e9 	bl	800b18c <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <tSilence_func+0x104>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a16      	ldr	r2, [pc, #88]	; (8004018 <tSilence_func+0x104>)
 8003fc0:	6811      	ldr	r1, [r2, #0]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f006 ff65 	bl	800ae94 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <tSilence_func+0x124>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2105      	movs	r1, #5
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f009 fc13 	bl	800d7fc <xQueueSemaphoreTake>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d108      	bne.n	8003fee <tSilence_func+0xda>
			resetThrusters();
 8003fdc:	f001 fa02 	bl	80053e4 <resetThrusters>
=======
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <tSilence_func+0x11c>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f007 f92f 	bl	800b120 <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <tSilence_func+0x11c>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <tSilence_func+0x11c>)
 8003ec8:	6811      	ldr	r1, [r2, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f006 ffab 	bl	800ae28 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <tSilence_func+0x128>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2105      	movs	r1, #5
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f009 fc59 	bl	800d790 <xQueueSemaphoreTake>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <tSilence_func+0xde>
//			resetThrusters();
>>>>>>> Stashed changes
//			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
//				rStabConstants[i].enable = false;
//			}

			xSemaphoreGive(mutDataHandle);
<<<<<<< Updated upstream
 8003fe0:	4b15      	ldr	r3, [pc, #84]	; (8004038 <tSilence_func+0x124>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2100      	movs	r1, #0
 8003fea:	f009 f991 	bl	800d310 <xQueueGenericSend>
=======
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <tSilence_func+0x128>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2200      	movs	r2, #0
 8003eec:	2100      	movs	r1, #0
 8003eee:	f009 f9d9 	bl	800d2a4 <xQueueGenericSend>
//			break;
>>>>>>> Stashed changes
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF
<<<<<<< Updated upstream

	xTimerStart(SilenceTimer, 1);
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <tSilence_func+0x128>)
 8003ff0:	681c      	ldr	r4, [r3, #0]
 8003ff2:	f00a fa03 	bl	800e3fc <xTaskGetTickCount>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2101      	movs	r1, #1
 8004000:	4620      	mov	r0, r4
 8004002:	f00b f86f 	bl	800f0e4 <xTimerGenericCommand>
	sin_counter+=1;
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <tSilence_func+0x118>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	4a07      	ldr	r2, [pc, #28]	; (800402c <tSilence_func+0x118>)
 800400e:	6013      	str	r3, [r2, #0]
  /* USER CODE END tSilence_func */
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bdb0      	pop	{r4, r5, r7, pc}
 8004018:	20000194 	.word	0x20000194
 800401c:	447a0000 	.word	0x447a0000
 8004020:	2000027c 	.word	0x2000027c
 8004024:	20000038 	.word	0x20000038
 8004028:	2000003a 	.word	0x2000003a
 800402c:	200023d4 	.word	0x200023d4
 8004030:	408f4000 	.word	0x408f4000
 8004034:	200023d0 	.word	0x200023d0
 8004038:	20001588 	.word	0x20001588
 800403c:	2000028c 	.word	0x2000028c

08004040 <MX_GPIO_Init>:
=======
	sin_counter++;
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <tSilence_func+0x10c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <tSilence_func+0x10c>)
 8003efa:	6013      	str	r3, [r2, #0]
	xTimerStart(SilenceTimer, 50);
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <tSilence_func+0x12c>)
 8003efe:	681c      	ldr	r4, [r3, #0]
 8003f00:	f00a fa46 	bl	800e390 <xTaskGetTickCount>
 8003f04:	4602      	mov	r2, r0
 8003f06:	2332      	movs	r3, #50	; 0x32
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f00b f8b2 	bl	800f078 <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f1c:	20000038 	.word	0x20000038
 8003f20:	200023dc 	.word	0x200023dc
 8003f24:	2000003c 	.word	0x2000003c
 8003f28:	408f4000 	.word	0x408f4000
 8003f2c:	200023d8 	.word	0x200023d8
 8003f30:	20000194 	.word	0x20000194
 8003f34:	447a0000 	.word	0x447a0000
 8003f38:	2000027c 	.word	0x2000027c
 8003f3c:	20001588 	.word	0x20001588
 8003f40:	2000028c 	.word	0x2000028c

08003f44 <MX_GPIO_Init>:
>>>>>>> Stashed changes
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	60da      	str	r2, [r3, #12]
 8004054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004056:	4b40      	ldr	r3, [pc, #256]	; (8004158 <MX_GPIO_Init+0x118>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4a3f      	ldr	r2, [pc, #252]	; (8004158 <MX_GPIO_Init+0x118>)
 800405c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004060:	6153      	str	r3, [r2, #20]
 8004062:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <MX_GPIO_Init+0x118>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800406e:	4b3a      	ldr	r3, [pc, #232]	; (8004158 <MX_GPIO_Init+0x118>)
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4a39      	ldr	r2, [pc, #228]	; (8004158 <MX_GPIO_Init+0x118>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	6153      	str	r3, [r2, #20]
 800407a:	4b37      	ldr	r3, [pc, #220]	; (8004158 <MX_GPIO_Init+0x118>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <MX_GPIO_Init+0x118>)
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	4a33      	ldr	r2, [pc, #204]	; (8004158 <MX_GPIO_Init+0x118>)
 800408c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004090:	6153      	str	r3, [r2, #20]
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <MX_GPIO_Init+0x118>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <MX_GPIO_Init+0x118>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <MX_GPIO_Init+0x118>)
 80040a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a8:	6153      	str	r3, [r2, #20]
 80040aa:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <MX_GPIO_Init+0x118>)
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <MX_GPIO_Init+0x118>)
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4a27      	ldr	r2, [pc, #156]	; (8004158 <MX_GPIO_Init+0x118>)
 80040bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040c0:	6153      	str	r3, [r2, #20]
 80040c2:	4b25      	ldr	r3, [pc, #148]	; (8004158 <MX_GPIO_Init+0x118>)
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 80040ce:	2200      	movs	r2, #0
 80040d0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80040d4:	4821      	ldr	r0, [pc, #132]	; (800415c <MX_GPIO_Init+0x11c>)
 80040d6:	f002 fd33 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);
 80040da:	2200      	movs	r2, #0
 80040dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e0:	481f      	ldr	r0, [pc, #124]	; (8004160 <MX_GPIO_Init+0x120>)
 80040e2:	f002 fd2d 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 80040e6:	2200      	movs	r2, #0
 80040e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f0:	f002 fd26 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 80040f4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80040f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004102:	2300      	movs	r3, #0
 8004104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	4619      	mov	r1, r3
 800410c:	4813      	ldr	r0, [pc, #76]	; (800415c <MX_GPIO_Init+0x11c>)
 800410e:	f002 fb9d 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 8004112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004118:	2301      	movs	r3, #1
 800411a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004120:	2300      	movs	r3, #0
 8004122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 8004124:	f107 0314 	add.w	r3, r7, #20
 8004128:	4619      	mov	r1, r3
 800412a:	480d      	ldr	r0, [pc, #52]	; (8004160 <MX_GPIO_Init+0x120>)
 800412c:	f002 fb8e 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8004130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004136:	2301      	movs	r3, #1
 8004138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413e:	2300      	movs	r3, #0
 8004140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	4619      	mov	r1, r3
 8004148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800414c:	f002 fb7e 	bl	800684c <HAL_GPIO_Init>

}
 8004150:	bf00      	nop
 8004152:	3728      	adds	r7, #40	; 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	48000400 	.word	0x48000400
 8004160:	48000c00 	.word	0x48000c00

08004164 <MX_I2C1_Init>:
=======
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f5a:	4b40      	ldr	r3, [pc, #256]	; (800405c <MX_GPIO_Init+0x118>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <MX_GPIO_Init+0x118>)
 8003f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f64:	6153      	str	r3, [r2, #20]
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <MX_GPIO_Init+0x118>)
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	4b3a      	ldr	r3, [pc, #232]	; (800405c <MX_GPIO_Init+0x118>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4a39      	ldr	r2, [pc, #228]	; (800405c <MX_GPIO_Init+0x118>)
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7c:	6153      	str	r3, [r2, #20]
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <MX_GPIO_Init+0x118>)
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <MX_GPIO_Init+0x118>)
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	4a33      	ldr	r2, [pc, #204]	; (800405c <MX_GPIO_Init+0x118>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6153      	str	r3, [r2, #20]
 8003f96:	4b31      	ldr	r3, [pc, #196]	; (800405c <MX_GPIO_Init+0x118>)
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	; (800405c <MX_GPIO_Init+0x118>)
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	; (800405c <MX_GPIO_Init+0x118>)
 8003fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fac:	6153      	str	r3, [r2, #20]
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <MX_GPIO_Init+0x118>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <MX_GPIO_Init+0x118>)
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4a27      	ldr	r2, [pc, #156]	; (800405c <MX_GPIO_Init+0x118>)
 8003fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fc4:	6153      	str	r3, [r2, #20]
 8003fc6:	4b25      	ldr	r3, [pc, #148]	; (800405c <MX_GPIO_Init+0x118>)
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003fd8:	4821      	ldr	r0, [pc, #132]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003fda:	f002 fd7b 	bl	8006ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe4:	481f      	ldr	r0, [pc, #124]	; (8004064 <MX_GPIO_Init+0x120>)
 8003fe6:	f002 fd75 	bl	8006ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff4:	f002 fd6e 	bl	8006ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 8003ff8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004006:	2300      	movs	r3, #0
 8004008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	4619      	mov	r1, r3
 8004010:	4813      	ldr	r0, [pc, #76]	; (8004060 <MX_GPIO_Init+0x11c>)
 8004012:	f002 fbe5 	bl	80067e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 8004016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800401a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401c:	2301      	movs	r3, #1
 800401e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004024:	2300      	movs	r3, #0
 8004026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	4619      	mov	r1, r3
 800402e:	480d      	ldr	r0, [pc, #52]	; (8004064 <MX_GPIO_Init+0x120>)
 8004030:	f002 fbd6 	bl	80067e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8004034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403a:	2301      	movs	r3, #1
 800403c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004042:	2300      	movs	r3, #0
 8004044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	4619      	mov	r1, r3
 800404c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004050:	f002 fbc6 	bl	80067e0 <HAL_GPIO_Init>

}
 8004054:	bf00      	nop
 8004056:	3728      	adds	r7, #40	; 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	48000400 	.word	0x48000400
 8004064:	48000c00 	.word	0x48000c00

08004068 <MX_I2C1_Init>:
>>>>>>> Stashed changes

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
<<<<<<< Updated upstream
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
=======
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< Updated upstream
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <MX_I2C1_Init+0x74>)
 800416a:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <MX_I2C1_Init+0x78>)
 800416c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <MX_I2C1_Init+0x74>)
 8004170:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <MX_I2C1_Init+0x7c>)
 8004172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <MX_I2C1_Init+0x74>)
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <MX_I2C1_Init+0x74>)
 800417c:	2201      	movs	r2, #1
 800417e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <MX_I2C1_Init+0x74>)
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <MX_I2C1_Init+0x74>)
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <MX_I2C1_Init+0x74>)
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <MX_I2C1_Init+0x74>)
 8004194:	2200      	movs	r2, #0
 8004196:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <MX_I2C1_Init+0x74>)
 800419a:	2200      	movs	r2, #0
 800419c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800419e:	480e      	ldr	r0, [pc, #56]	; (80041d8 <MX_I2C1_Init+0x74>)
 80041a0:	f002 fd00 	bl	8006ba4 <HAL_I2C_Init>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041aa:	f000 f909 	bl	80043c0 <Error_Handler>
=======
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <MX_I2C1_Init+0x74>)
 800406e:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <MX_I2C1_Init+0x78>)
 8004070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <MX_I2C1_Init+0x74>)
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <MX_I2C1_Init+0x7c>)
 8004076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <MX_I2C1_Init+0x74>)
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <MX_I2C1_Init+0x74>)
 8004080:	2201      	movs	r2, #1
 8004082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <MX_I2C1_Init+0x74>)
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <MX_I2C1_Init+0x74>)
 800408c:	2200      	movs	r2, #0
 800408e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <MX_I2C1_Init+0x74>)
 8004092:	2200      	movs	r2, #0
 8004094:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <MX_I2C1_Init+0x74>)
 8004098:	2200      	movs	r2, #0
 800409a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <MX_I2C1_Init+0x74>)
 800409e:	2200      	movs	r2, #0
 80040a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040a2:	480e      	ldr	r0, [pc, #56]	; (80040dc <MX_I2C1_Init+0x74>)
 80040a4:	f002 fd48 	bl	8006b38 <HAL_I2C_Init>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040ae:	f000 f905 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< Updated upstream
 80041ae:	2100      	movs	r1, #0
 80041b0:	4809      	ldr	r0, [pc, #36]	; (80041d8 <MX_I2C1_Init+0x74>)
 80041b2:	f004 fd9b 	bl	8008cec <HAL_I2CEx_ConfigAnalogFilter>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80041bc:	f000 f900 	bl	80043c0 <Error_Handler>
=======
 80040b2:	2100      	movs	r1, #0
 80040b4:	4809      	ldr	r0, [pc, #36]	; (80040dc <MX_I2C1_Init+0x74>)
 80040b6:	f004 fde3 	bl	8008c80 <HAL_I2CEx_ConfigAnalogFilter>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80040c0:	f000 f8fc 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< Updated upstream
 80041c0:	2100      	movs	r1, #0
 80041c2:	4805      	ldr	r0, [pc, #20]	; (80041d8 <MX_I2C1_Init+0x74>)
 80041c4:	f004 fddd 	bl	8008d82 <HAL_I2CEx_ConfigDigitalFilter>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80041ce:	f000 f8f7 	bl	80043c0 <Error_Handler>
=======
 80040c4:	2100      	movs	r1, #0
 80040c6:	4805      	ldr	r0, [pc, #20]	; (80040dc <MX_I2C1_Init+0x74>)
 80040c8:	f004 fe25 	bl	8008d16 <HAL_I2CEx_ConfigDigitalFilter>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80040d2:	f000 f8f3 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< Updated upstream
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	200023d8 	.word	0x200023d8
 80041dc:	40005400 	.word	0x40005400
 80041e0:	2000090e 	.word	0x2000090e

080041e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_I2C_MspInit+0x8c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d12f      	bne.n	8004266 <HAL_I2C_MspInit+0x82>
=======
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200023e0 	.word	0x200023e0
 80040e0:	40005400 	.word	0x40005400
 80040e4:	2000090e 	.word	0x2000090e

080040e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_I2C_MspInit+0x8c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d12f      	bne.n	800416a <HAL_I2C_MspInit+0x82>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< Updated upstream
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_I2C_MspInit+0x90>)
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <HAL_I2C_MspInit+0x90>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004210:	6153      	str	r3, [r2, #20]
 8004212:	4b18      	ldr	r3, [pc, #96]	; (8004274 <HAL_I2C_MspInit+0x90>)
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
=======
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_I2C_MspInit+0x90>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <HAL_I2C_MspInit+0x90>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004114:	6153      	str	r3, [r2, #20]
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_I2C_MspInit+0x90>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
 800421e:	23c0      	movs	r3, #192	; 0xc0
 8004220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004222:	2312      	movs	r3, #18
 8004224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800422a:	2303      	movs	r3, #3
 800422c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800422e:	2304      	movs	r3, #4
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4619      	mov	r1, r3
 8004238:	480f      	ldr	r0, [pc, #60]	; (8004278 <HAL_I2C_MspInit+0x94>)
 800423a:	f002 fb07 	bl	800684c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <HAL_I2C_MspInit+0x90>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <HAL_I2C_MspInit+0x90>)
 8004244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004248:	61d3      	str	r3, [r2, #28]
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_I2C_MspInit+0x90>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004256:	2200      	movs	r2, #0
 8004258:	2105      	movs	r1, #5
 800425a:	201f      	movs	r0, #31
 800425c:	f001 febc 	bl	8005fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004260:	201f      	movs	r0, #31
 8004262:	f001 fed5 	bl	8006010 <HAL_NVIC_EnableIRQ>
=======
 8004122:	23c0      	movs	r3, #192	; 0xc0
 8004124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004126:	2312      	movs	r3, #18
 8004128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800412e:	2303      	movs	r3, #3
 8004130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004132:	2304      	movs	r3, #4
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	4619      	mov	r1, r3
 800413c:	480f      	ldr	r0, [pc, #60]	; (800417c <HAL_I2C_MspInit+0x94>)
 800413e:	f002 fb4f 	bl	80067e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_I2C_MspInit+0x90>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <HAL_I2C_MspInit+0x90>)
 8004148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800414c:	61d3      	str	r3, [r2, #28]
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_I2C_MspInit+0x90>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800415a:	2200      	movs	r2, #0
 800415c:	2105      	movs	r1, #5
 800415e:	201f      	movs	r0, #31
 8004160:	f001 ff04 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004164:	201f      	movs	r0, #31
 8004166:	f001 ff1d 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8004266:	bf00      	nop
 8004268:	3728      	adds	r7, #40	; 0x28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40005400 	.word	0x40005400
 8004274:	40021000 	.word	0x40021000
 8004278:	48000400 	.word	0x48000400

0800427c <main>:
=======
 800416a:	bf00      	nop
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40005400 	.word	0x40005400
 8004178:	40021000 	.word	0x40021000
 800417c:	48000400 	.word	0x48000400

08004180 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
=======
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8004282:	f001 fd97 	bl	8005db4 <HAL_Init>
=======
 8004184:	f001 fde0 	bl	8005d48 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8004286:	f000 f82b 	bl	80042e0 <SystemClock_Config>
=======
 8004188:	f000 f828 	bl	80041dc <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 800428a:	f7ff fed9 	bl	8004040 <MX_GPIO_Init>
  MX_DMA_Init();
 800428e:	f7fe febd 	bl	800300c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004292:	f001 fb27 	bl	80058e4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004296:	f7ff ff65 	bl	8004164 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800429a:	f001 fb53 	bl	8005944 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800429e:	f001 fb85 	bl	80059ac <MX_USART3_UART_Init>
  MX_UART4_Init();
 80042a2:	f001 faef 	bl	8005884 <MX_UART4_Init>
  MX_TIM7_Init();
 80042a6:	f001 fa97 	bl	80057d8 <MX_TIM7_Init>
=======
 800418c:	f7ff feda 	bl	8003f44 <MX_GPIO_Init>
  MX_DMA_Init();
 8004190:	f7fe fec8 	bl	8002f24 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004194:	f001 fb70 	bl	8005878 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004198:	f7ff ff66 	bl	8004068 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800419c:	f001 fb9c 	bl	80058d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80041a0:	f001 fbce 	bl	8005940 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80041a4:	f001 fb38 	bl	8005818 <MX_UART4_Init>
  MX_TIM7_Init();
 80041a8:	f001 fae0 	bl	800576c <MX_TIM7_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN 2 */

//  HAL_Delay(30e3); //30 seconds delay to start PC
  MS5837_02BA_init(&hi2c1);
<<<<<<< Updated upstream
 80042aa:	480c      	ldr	r0, [pc, #48]	; (80042dc <main+0x60>)
 80042ac:	f7fc feae 	bl	800100c <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 80042b0:	f7fd f87e 	bl	80013b0 <MS5837_02BA_reset_pressure>
=======
 80041ac:	4808      	ldr	r0, [pc, #32]	; (80041d0 <main+0x50>)
 80041ae:	f7fc ff2d 	bl	800100c <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 80041b2:	f7fd f8fd 	bl	80013b0 <MS5837_02BA_reset_pressure>

  movingAverageInit(&pressure_filter, 50);
 80041b6:	2132      	movs	r1, #50	; 0x32
 80041b8:	4806      	ldr	r0, [pc, #24]	; (80041d4 <main+0x54>)
 80041ba:	f000 f884 	bl	80042c6 <movingAverageInit>
  movingAverageInit(&velocity_pressure_filter, 50);
 80041be:	2132      	movs	r1, #50	; 0x32
 80041c0:	4805      	ldr	r0, [pc, #20]	; (80041d8 <main+0x58>)
 80041c2:	f000 f880 	bl	80042c6 <movingAverageInit>
>>>>>>> Stashed changes

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
<<<<<<< Updated upstream
 80042b4:	f7ff fa64 	bl	8003780 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80042b8:	f008 fd13 	bl	800cce2 <osKernelStart>
=======
 80041c6:	f7ff fa25 	bl	8003614 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80041ca:	f008 fd54 	bl	800cc76 <osKernelStart>
>>>>>>> Stashed changes

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 uint8_t buffer[30]={0};
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	f107 030c 	add.w	r3, r7, #12
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	611a      	str	r2, [r3, #16]
 80042d0:	615a      	str	r2, [r3, #20]
 80042d2:	831a      	strh	r2, [r3, #24]
 uint8_t buffer1[1]={0xAA};
 80042d4:	23aa      	movs	r3, #170	; 0xaa
 80042d6:	713b      	strb	r3, [r7, #4]

  while (1)
<<<<<<< Updated upstream
 80042d8:	e7fe      	b.n	80042d8 <main+0x5c>
 80042da:	bf00      	nop
 80042dc:	200023d8 	.word	0x200023d8

080042e0 <SystemClock_Config>:
=======
 80041ce:	e7fe      	b.n	80041ce <main+0x4e>
 80041d0:	200023e0 	.word	0x200023e0
 80041d4:	20002434 	.word	0x20002434
 80041d8:	20002504 	.word	0x20002504

080041dc <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b09e      	sub	sp, #120	; 0x78
 80042e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042ea:	2228      	movs	r2, #40	; 0x28
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f00b ff5c 	bl	80101ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004304:	463b      	mov	r3, r7
 8004306:	223c      	movs	r2, #60	; 0x3c
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f00b ff4e 	bl	80101ac <memset>
=======
 80041dc:	b580      	push	{r7, lr}
 80041de:	b09e      	sub	sp, #120	; 0x78
 80041e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041e6:	2228      	movs	r2, #40	; 0x28
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f00b ffa6 	bl	801013c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004200:	463b      	mov	r3, r7
 8004202:	223c      	movs	r2, #60	; 0x3c
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f00b ff98 	bl	801013c <memset>
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< Updated upstream
 8004310:	2302      	movs	r3, #2
 8004312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004314:	2301      	movs	r3, #1
 8004316:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004318:	2310      	movs	r3, #16
 800431a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800431c:	2302      	movs	r3, #2
 800431e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004320:	2300      	movs	r3, #0
 8004322:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004324:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8004328:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800432a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800432e:	4618      	mov	r0, r3
 8004330:	f004 fd74 	bl	8008e1c <HAL_RCC_OscConfig>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800433a:	f000 f841 	bl	80043c0 <Error_Handler>
=======
 800420c:	2302      	movs	r3, #2
 800420e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004210:	2301      	movs	r3, #1
 8004212:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004214:	2310      	movs	r3, #16
 8004216:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004218:	2302      	movs	r3, #2
 800421a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800421c:	2300      	movs	r3, #0
 800421e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004220:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8004224:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004226:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fdc0 	bl	8008db0 <HAL_RCC_OscConfig>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004236:	f000 f841 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 800433e:	230f      	movs	r3, #15
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004342:	2302      	movs	r3, #2
 8004344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004346:	2300      	movs	r3, #0
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800434a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004350:	2300      	movs	r3, #0
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f005 fd9c 	bl	8009e98 <HAL_RCC_ClockConfig>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004366:	f000 f82b 	bl	80043c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800436a:	232f      	movs	r3, #47	; 0x2f
 800436c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004382:	463b      	mov	r3, r7
 8004384:	4618      	mov	r0, r3
 8004386:	f005 fff1 	bl	800a36c <HAL_RCCEx_PeriphCLKConfig>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004390:	f000 f816 	bl	80043c0 <Error_Handler>
  }
}
 8004394:	bf00      	nop
 8004396:	3778      	adds	r7, #120	; 0x78
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_PeriodElapsedCallback>:
=======
 800423a:	230f      	movs	r3, #15
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800423e:	2302      	movs	r3, #2
 8004240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004242:	2300      	movs	r3, #0
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800424a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800424c:	2300      	movs	r3, #0
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004250:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f005 fde8 	bl	8009e2c <HAL_RCC_ClockConfig>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004262:	f000 f82b 	bl	80042bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004266:	232f      	movs	r3, #47	; 0x2f
 8004268:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800427e:	463b      	mov	r3, r7
 8004280:	4618      	mov	r0, r3
 8004282:	f006 f83d 	bl	800a300 <HAL_RCCEx_PeriphCLKConfig>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800428c:	f000 f816 	bl	80042bc <Error_Handler>
  }
}
 8004290:	bf00      	nop
 8004292:	3778      	adds	r7, #120	; 0x78
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
=======
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
<<<<<<< Updated upstream
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043ae:	f001 fd17 	bl	8005de0 <HAL_IncTick>
=======
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80042aa:	f001 fd63 	bl	8005d74 <HAL_IncTick>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< Updated upstream
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40012c00 	.word	0x40012c00

080043c0 <Error_Handler>:
=======
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00

080042bc <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
=======
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 80043c4:	b672      	cpsid	i
}
 80043c6:	bf00      	nop
=======
 80042c0:	b672      	cpsid	i
}
 80042c2:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 80043c8:	e7fe      	b.n	80043c8 <Error_Handler+0x8>
	...
=======
 80042c4:	e7fe      	b.n	80042c4 <Error_Handler+0x8>

080042c6 <movingAverageInit>:
#include "moving_average.h"

void movingAverageInit(Moving_Average_filter* filter, uint8_t order)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	70fb      	strb	r3, [r7, #3]
	filter->order = order;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
 80042de:	e009      	b.n	80042f4 <movingAverageInit+0x2e>
		filter->data[i] = 0;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	3301      	adds	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b31      	cmp	r3, #49	; 0x31
 80042f8:	d9f2      	bls.n	80042e0 <movingAverageInit+0x1a>
	filter->current_element = 0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	filter->average = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <movingAverageIterate>:

float movingAverageIterate(Moving_Average_filter* filter, float value)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	ed87 0a00 	vstr	s0, [r7]
	int32_t last_value = filter->data[filter->current_element];
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	edd3 7a00 	vldr	s15, [r3]
 8004334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004338:	ee17 3a90 	vmov	r3, s15
 800433c:	60fb      	str	r3, [r7, #12]
	filter->data[filter->current_element] = value;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	601a      	str	r2, [r3, #0]
	filter->average = (filter->average * filter->order - last_value + value) / (float)filter->order;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004374:	edd7 7a00 	vldr	s15, [r7]
 8004378:	ee77 6a27 	vadd.f32	s13, s14, s15
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800438a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	filter->current_element = (filter->current_element+1)%filter->order;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800439a:	3301      	adds	r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 80043a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80043a6:	fb01 f202 	mul.w	r2, r1, r2
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	return filter->average;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80043ba:	ee07 3a90 	vmov	s15, r3
}
 80043be:	eeb0 0a67 	vmov.f32	s0, s15
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
>>>>>>> Stashed changes

080043cc <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80043d2:	2300      	movs	r3, #0
 80043d4:	71fb      	strb	r3, [r7, #7]
<<<<<<< Updated upstream
 80043d6:	e16d      	b.n	80046b4 <stabilizationInit+0x2e8>
		rStabConstants[i].enable = false;
 80043d8:	79fa      	ldrb	r2, [r7, #7]
 80043da:	49c1      	ldr	r1, [pc, #772]	; (80046e0 <stabilizationInit+0x314>)
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	4abd      	ldr	r2, [pc, #756]	; (80046e4 <stabilizationInit+0x318>)
 80043ee:	2158      	movs	r1, #88	; 0x58
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	330c      	adds	r3, #12
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	4ab8      	ldr	r2, [pc, #736]	; (80046e4 <stabilizationInit+0x318>)
 8004402:	2158      	movs	r1, #88	; 0x58
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	3310      	adds	r3, #16
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	4ab3      	ldr	r2, [pc, #716]	; (80046e4 <stabilizationInit+0x318>)
 8004416:	2158      	movs	r1, #88	; 0x58
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	3314      	adds	r3, #20
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	4aae      	ldr	r2, [pc, #696]	; (80046e4 <stabilizationInit+0x318>)
 800442a:	2158      	movs	r1, #88	; 0x58
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	3318      	adds	r3, #24
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	4aa9      	ldr	r2, [pc, #676]	; (80046e4 <stabilizationInit+0x318>)
 800443e:	2158      	movs	r1, #88	; 0x58
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	331c      	adds	r3, #28
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	4aa4      	ldr	r2, [pc, #656]	; (80046e4 <stabilizationInit+0x318>)
 8004452:	2158      	movs	r1, #88	; 0x58
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	3320      	adds	r3, #32
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	4a9f      	ldr	r2, [pc, #636]	; (80046e4 <stabilizationInit+0x318>)
 8004466:	2158      	movs	r1, #88	; 0x58
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	3324      	adds	r3, #36	; 0x24
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	4a9a      	ldr	r2, [pc, #616]	; (80046e4 <stabilizationInit+0x318>)
 800447a:	2158      	movs	r1, #88	; 0x58
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	3328      	adds	r3, #40	; 0x28
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	4a95      	ldr	r2, [pc, #596]	; (80046e4 <stabilizationInit+0x318>)
 800448e:	2158      	movs	r1, #88	; 0x58
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	332c      	adds	r3, #44	; 0x2c
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	4a90      	ldr	r2, [pc, #576]	; (80046e4 <stabilizationInit+0x318>)
 80044a2:	2158      	movs	r1, #88	; 0x58
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3330      	adds	r3, #48	; 0x30
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	4a8b      	ldr	r2, [pc, #556]	; (80046e4 <stabilizationInit+0x318>)
 80044b6:	2158      	movs	r1, #88	; 0x58
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	3334      	adds	r3, #52	; 0x34
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	4a86      	ldr	r2, [pc, #536]	; (80046e4 <stabilizationInit+0x318>)
 80044ca:	2158      	movs	r1, #88	; 0x58
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3338      	adds	r3, #56	; 0x38
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	4a81      	ldr	r2, [pc, #516]	; (80046e4 <stabilizationInit+0x318>)
 80044de:	2158      	movs	r1, #88	; 0x58
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	333c      	adds	r3, #60	; 0x3c
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4a7c      	ldr	r2, [pc, #496]	; (80046e4 <stabilizationInit+0x318>)
 80044f2:	2158      	movs	r1, #88	; 0x58
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	3340      	adds	r3, #64	; 0x40
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4a77      	ldr	r2, [pc, #476]	; (80046e4 <stabilizationInit+0x318>)
 8004506:	2158      	movs	r1, #88	; 0x58
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3344      	adds	r3, #68	; 0x44
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	4a72      	ldr	r2, [pc, #456]	; (80046e4 <stabilizationInit+0x318>)
 800451a:	2158      	movs	r1, #88	; 0x58
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	3348      	adds	r3, #72	; 0x48
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	4a6d      	ldr	r2, [pc, #436]	; (80046e4 <stabilizationInit+0x318>)
 800452e:	2158      	movs	r1, #88	; 0x58
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	334c      	adds	r3, #76	; 0x4c
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4a68      	ldr	r2, [pc, #416]	; (80046e4 <stabilizationInit+0x318>)
 8004542:	2158      	movs	r1, #88	; 0x58
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	3350      	adds	r3, #80	; 0x50
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4a63      	ldr	r2, [pc, #396]	; (80046e4 <stabilizationInit+0x318>)
 8004556:	2158      	movs	r1, #88	; 0x58
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3354      	adds	r3, #84	; 0x54
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 8004566:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <stabilizationInit+0x31c>)
 8004568:	789b      	ldrb	r3, [r3, #2]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 809f 	bne.w	80046ae <stabilizationInit+0x2e2>
			rStabConstants[i].pJoyUnitCast = 1;
 8004570:	79fa      	ldrb	r2, [r7, #7]
 8004572:	495b      	ldr	r1, [pc, #364]	; (80046e0 <stabilizationInit+0x314>)
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	440b      	add	r3, r1
 800457e:	3304      	adds	r3, #4
 8004580:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004584:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 8004586:	79fa      	ldrb	r2, [r7, #7]
 8004588:	4955      	ldr	r1, [pc, #340]	; (80046e0 <stabilizationInit+0x314>)
 800458a:	4613      	mov	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	440b      	add	r3, r1
 8004594:	3308      	adds	r3, #8
 8004596:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800459a:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 800459c:	79fa      	ldrb	r2, [r7, #7]
 800459e:	4950      	ldr	r1, [pc, #320]	; (80046e0 <stabilizationInit+0x314>)
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4413      	add	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	440b      	add	r3, r1
 80045aa:	330c      	adds	r3, #12
 80045ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045b0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 80045b2:	79fa      	ldrb	r2, [r7, #7]
 80045b4:	494a      	ldr	r1, [pc, #296]	; (80046e0 <stabilizationInit+0x314>)
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	440b      	add	r3, r1
 80045c0:	3318      	adds	r3, #24
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 80045c8:	79fa      	ldrb	r2, [r7, #7]
 80045ca:	4945      	ldr	r1, [pc, #276]	; (80046e0 <stabilizationInit+0x314>)
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	440b      	add	r3, r1
 80045d6:	331c      	adds	r3, #28
 80045d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045dc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 80045de:	79fa      	ldrb	r2, [r7, #7]
 80045e0:	493f      	ldr	r1, [pc, #252]	; (80046e0 <stabilizationInit+0x314>)
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	440b      	add	r3, r1
 80045ec:	3310      	adds	r3, #16
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 80045f4:	79fa      	ldrb	r2, [r7, #7]
 80045f6:	493a      	ldr	r1, [pc, #232]	; (80046e0 <stabilizationInit+0x314>)
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	440b      	add	r3, r1
 8004602:	3314      	adds	r3, #20
 8004604:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004608:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 800460a:	79fa      	ldrb	r2, [r7, #7]
 800460c:	4934      	ldr	r1, [pc, #208]	; (80046e0 <stabilizationInit+0x314>)
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	440b      	add	r3, r1
 8004618:	3328      	adds	r3, #40	; 0x28
 800461a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800461e:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 8004620:	79fa      	ldrb	r2, [r7, #7]
 8004622:	492f      	ldr	r1, [pc, #188]	; (80046e0 <stabilizationInit+0x314>)
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	440b      	add	r3, r1
 800462e:	332c      	adds	r3, #44	; 0x2c
 8004630:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004634:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 8004636:	79fa      	ldrb	r2, [r7, #7]
 8004638:	4929      	ldr	r1, [pc, #164]	; (80046e0 <stabilizationInit+0x314>)
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	440b      	add	r3, r1
 8004644:	3330      	adds	r3, #48	; 0x30
 8004646:	4a29      	ldr	r2, [pc, #164]	; (80046ec <stabilizationInit+0x320>)
 8004648:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 800464a:	79fa      	ldrb	r2, [r7, #7]
 800464c:	4924      	ldr	r1, [pc, #144]	; (80046e0 <stabilizationInit+0x314>)
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	440b      	add	r3, r1
 8004658:	3334      	adds	r3, #52	; 0x34
 800465a:	4a25      	ldr	r2, [pc, #148]	; (80046f0 <stabilizationInit+0x324>)
 800465c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 800465e:	79fa      	ldrb	r2, [r7, #7]
 8004660:	491f      	ldr	r1, [pc, #124]	; (80046e0 <stabilizationInit+0x314>)
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	440b      	add	r3, r1
 800466c:	333c      	adds	r3, #60	; 0x3c
 800466e:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <stabilizationInit+0x328>)
 8004670:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8004672:	79fa      	ldrb	r2, [r7, #7]
 8004674:	491a      	ldr	r1, [pc, #104]	; (80046e0 <stabilizationInit+0x314>)
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	440b      	add	r3, r1
 8004680:	3338      	adds	r3, #56	; 0x38
 8004682:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <stabilizationInit+0x32c>)
 8004684:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 8004686:	79fa      	ldrb	r2, [r7, #7]
 8004688:	4915      	ldr	r1, [pc, #84]	; (80046e0 <stabilizationInit+0x314>)
 800468a:	4613      	mov	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	440b      	add	r3, r1
 8004694:	3340      	adds	r3, #64	; 0x40
 8004696:	4a19      	ldr	r2, [pc, #100]	; (80046fc <stabilizationInit+0x330>)
 8004698:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 800469a:	79fa      	ldrb	r2, [r7, #7]
 800469c:	4910      	ldr	r1, [pc, #64]	; (80046e0 <stabilizationInit+0x314>)
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	440b      	add	r3, r1
 80046a8:	3344      	adds	r3, #68	; 0x44
 80046aa:	4a15      	ldr	r2, [pc, #84]	; (8004700 <stabilizationInit+0x334>)
 80046ac:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	3301      	adds	r3, #1
 80046b2:	71fb      	strb	r3, [r7, #7]
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	f67f ae8e 	bls.w	80043d8 <stabilizationInit+0xc>
=======
 80043d6:	e15d      	b.n	8004694 <stabilizationInit+0x2c8>
		rStabConstants[i].enable = false;
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	4abf      	ldr	r2, [pc, #764]	; (80046d8 <stabilizationInit+0x30c>)
 80043dc:	214c      	movs	r1, #76	; 0x4c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	4abc      	ldr	r2, [pc, #752]	; (80046dc <stabilizationInit+0x310>)
 80043ec:	2158      	movs	r1, #88	; 0x58
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	330c      	adds	r3, #12
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	4ab7      	ldr	r2, [pc, #732]	; (80046dc <stabilizationInit+0x310>)
 8004400:	2158      	movs	r1, #88	; 0x58
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	3310      	adds	r3, #16
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	4ab2      	ldr	r2, [pc, #712]	; (80046dc <stabilizationInit+0x310>)
 8004414:	2158      	movs	r1, #88	; 0x58
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	3314      	adds	r3, #20
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4aad      	ldr	r2, [pc, #692]	; (80046dc <stabilizationInit+0x310>)
 8004428:	2158      	movs	r1, #88	; 0x58
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	3318      	adds	r3, #24
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	4aa8      	ldr	r2, [pc, #672]	; (80046dc <stabilizationInit+0x310>)
 800443c:	2158      	movs	r1, #88	; 0x58
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	331c      	adds	r3, #28
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	4aa3      	ldr	r2, [pc, #652]	; (80046dc <stabilizationInit+0x310>)
 8004450:	2158      	movs	r1, #88	; 0x58
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	3320      	adds	r3, #32
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4a9e      	ldr	r2, [pc, #632]	; (80046dc <stabilizationInit+0x310>)
 8004464:	2158      	movs	r1, #88	; 0x58
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	3324      	adds	r3, #36	; 0x24
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4a99      	ldr	r2, [pc, #612]	; (80046dc <stabilizationInit+0x310>)
 8004478:	2158      	movs	r1, #88	; 0x58
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3328      	adds	r3, #40	; 0x28
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	4a94      	ldr	r2, [pc, #592]	; (80046dc <stabilizationInit+0x310>)
 800448c:	2158      	movs	r1, #88	; 0x58
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	332c      	adds	r3, #44	; 0x2c
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	4a8f      	ldr	r2, [pc, #572]	; (80046dc <stabilizationInit+0x310>)
 80044a0:	2158      	movs	r1, #88	; 0x58
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	3330      	adds	r3, #48	; 0x30
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	4a8a      	ldr	r2, [pc, #552]	; (80046dc <stabilizationInit+0x310>)
 80044b4:	2158      	movs	r1, #88	; 0x58
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3334      	adds	r3, #52	; 0x34
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	4a85      	ldr	r2, [pc, #532]	; (80046dc <stabilizationInit+0x310>)
 80044c8:	2158      	movs	r1, #88	; 0x58
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	3338      	adds	r3, #56	; 0x38
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	4a80      	ldr	r2, [pc, #512]	; (80046dc <stabilizationInit+0x310>)
 80044dc:	2158      	movs	r1, #88	; 0x58
 80044de:	fb01 f303 	mul.w	r3, r1, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	333c      	adds	r3, #60	; 0x3c
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	4a7b      	ldr	r2, [pc, #492]	; (80046dc <stabilizationInit+0x310>)
 80044f0:	2158      	movs	r1, #88	; 0x58
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	3340      	adds	r3, #64	; 0x40
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	4a76      	ldr	r2, [pc, #472]	; (80046dc <stabilizationInit+0x310>)
 8004504:	2158      	movs	r1, #88	; 0x58
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	4413      	add	r3, r2
 800450c:	3344      	adds	r3, #68	; 0x44
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	4a71      	ldr	r2, [pc, #452]	; (80046dc <stabilizationInit+0x310>)
 8004518:	2158      	movs	r1, #88	; 0x58
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3348      	adds	r3, #72	; 0x48
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	4a6c      	ldr	r2, [pc, #432]	; (80046dc <stabilizationInit+0x310>)
 800452c:	2158      	movs	r1, #88	; 0x58
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	4413      	add	r3, r2
 8004534:	334c      	adds	r3, #76	; 0x4c
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	4a67      	ldr	r2, [pc, #412]	; (80046dc <stabilizationInit+0x310>)
 8004540:	2158      	movs	r1, #88	; 0x58
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3350      	adds	r3, #80	; 0x50
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	4a62      	ldr	r2, [pc, #392]	; (80046dc <stabilizationInit+0x310>)
 8004554:	2158      	movs	r1, #88	; 0x58
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	3354      	adds	r3, #84	; 0x54
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 8004564:	4b5e      	ldr	r3, [pc, #376]	; (80046e0 <stabilizationInit+0x314>)
 8004566:	789b      	ldrb	r3, [r3, #2]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f040 8090 	bne.w	800468e <stabilizationInit+0x2c2>
			rStabConstants[i].pJoyUnitCast = 1;
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	4a59      	ldr	r2, [pc, #356]	; (80046d8 <stabilizationInit+0x30c>)
 8004572:	214c      	movs	r1, #76	; 0x4c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	3304      	adds	r3, #4
 800457c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004580:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	4a54      	ldr	r2, [pc, #336]	; (80046d8 <stabilizationInit+0x30c>)
 8004586:	214c      	movs	r1, #76	; 0x4c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3308      	adds	r3, #8
 8004590:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004594:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	4a4f      	ldr	r2, [pc, #316]	; (80046d8 <stabilizationInit+0x30c>)
 800459a:	214c      	movs	r1, #76	; 0x4c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	330c      	adds	r3, #12
 80045a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045a8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <stabilizationInit+0x30c>)
 80045ae:	214c      	movs	r1, #76	; 0x4c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3318      	adds	r3, #24
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	4a45      	ldr	r2, [pc, #276]	; (80046d8 <stabilizationInit+0x30c>)
 80045c2:	214c      	movs	r1, #76	; 0x4c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	331c      	adds	r3, #28
 80045cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045d0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4a40      	ldr	r2, [pc, #256]	; (80046d8 <stabilizationInit+0x30c>)
 80045d6:	214c      	movs	r1, #76	; 0x4c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	3310      	adds	r3, #16
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <stabilizationInit+0x30c>)
 80045ea:	214c      	movs	r1, #76	; 0x4c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3314      	adds	r3, #20
 80045f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045f8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	4a36      	ldr	r2, [pc, #216]	; (80046d8 <stabilizationInit+0x30c>)
 80045fe:	214c      	movs	r1, #76	; 0x4c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	3328      	adds	r3, #40	; 0x28
 8004608:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800460c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <stabilizationInit+0x30c>)
 8004612:	214c      	movs	r1, #76	; 0x4c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	332c      	adds	r3, #44	; 0x2c
 800461c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004620:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <stabilizationInit+0x30c>)
 8004626:	214c      	movs	r1, #76	; 0x4c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	3330      	adds	r3, #48	; 0x30
 8004630:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <stabilizationInit+0x318>)
 8004632:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	4a28      	ldr	r2, [pc, #160]	; (80046d8 <stabilizationInit+0x30c>)
 8004638:	214c      	movs	r1, #76	; 0x4c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	3334      	adds	r3, #52	; 0x34
 8004642:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <stabilizationInit+0x31c>)
 8004644:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <stabilizationInit+0x30c>)
 800464a:	214c      	movs	r1, #76	; 0x4c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	333c      	adds	r3, #60	; 0x3c
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <stabilizationInit+0x320>)
 8004656:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <stabilizationInit+0x30c>)
 800465c:	214c      	movs	r1, #76	; 0x4c
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	4413      	add	r3, r2
 8004664:	3338      	adds	r3, #56	; 0x38
 8004666:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <stabilizationInit+0x324>)
 8004668:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <stabilizationInit+0x30c>)
 800466e:	214c      	movs	r1, #76	; 0x4c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	3344      	adds	r3, #68	; 0x44
 8004678:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <stabilizationInit+0x328>)
 800467a:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <stabilizationInit+0x30c>)
 8004680:	214c      	movs	r1, #76	; 0x4c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3348      	adds	r3, #72	; 0x48
 800468a:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <stabilizationInit+0x32c>)
 800468c:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	3301      	adds	r3, #1
 8004692:	71fb      	strb	r3, [r7, #7]
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	2b05      	cmp	r3, #5
 8004698:	f67f ae9e 	bls.w	80043d8 <stabilizationInit+0xc>
>>>>>>> Stashed changes
		}
	}

	/////////DEBUG!!!!////////////////////////////////////////////
<<<<<<< Updated upstream
	rStabConstants[STAB_YAW].enable = true;
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <stabilizationInit+0x314>)
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	//////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rMonitorInput.roll;
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <stabilizationInit+0x318>)
 80046c6:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <stabilizationInit+0x338>)
 80046c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <stabilizationInit+0x318>)
 80046ce:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <stabilizationInit+0x33c>)
 80046d0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <stabilizationInit+0x318>)
 80046d6:	4a0d      	ldr	r2, [pc, #52]	; (800470c <stabilizationInit+0x340>)
 80046d8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80046dc:	e018      	b.n	8004710 <stabilizationInit+0x344>
 80046de:	bf00      	nop
 80046e0:	20001eb0 	.word	0x20001eb0
 80046e4:	20002060 	.word	0x20002060
 80046e8:	20001d34 	.word	0x20001d34
 80046ec:	c47a0000 	.word	0xc47a0000
 80046f0:	447a0000 	.word	0x447a0000
 80046f4:	459c4000 	.word	0x459c4000
 80046f8:	c59c4000 	.word	0xc59c4000
 80046fc:	46fa0000 	.word	0x46fa0000
 8004700:	c6fa0000 	.word	0xc6fa0000
 8004704:	20001e64 	.word	0x20001e64
 8004708:	20001dec 	.word	0x20001dec
 800470c:	20001dd0 	.word	0x20001dd0
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8004710:	4b8b      	ldr	r3, [pc, #556]	; (8004940 <stabilizationInit+0x574>)
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rMonitorInput.pitch;
 8004718:	4b8a      	ldr	r3, [pc, #552]	; (8004944 <stabilizationInit+0x578>)
 800471a:	4a8b      	ldr	r2, [pc, #556]	; (8004948 <stabilizationInit+0x57c>)
 800471c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 8004720:	4b88      	ldr	r3, [pc, #544]	; (8004944 <stabilizationInit+0x578>)
 8004722:	4a8a      	ldr	r2, [pc, #552]	; (800494c <stabilizationInit+0x580>)
 8004724:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 8004728:	4b86      	ldr	r3, [pc, #536]	; (8004944 <stabilizationInit+0x578>)
 800472a:	4a89      	ldr	r2, [pc, #548]	; (8004950 <stabilizationInit+0x584>)
 800472c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 8004730:	4b83      	ldr	r3, [pc, #524]	; (8004940 <stabilizationInit+0x574>)
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rMonitorInput.yaw;
 8004738:	4b82      	ldr	r3, [pc, #520]	; (8004944 <stabilizationInit+0x578>)
 800473a:	4a86      	ldr	r2, [pc, #536]	; (8004954 <stabilizationInit+0x588>)
 800473c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 8004740:	4b80      	ldr	r3, [pc, #512]	; (8004944 <stabilizationInit+0x578>)
 8004742:	4a85      	ldr	r2, [pc, #532]	; (8004958 <stabilizationInit+0x58c>)
 8004744:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 8004748:	4b7e      	ldr	r3, [pc, #504]	; (8004944 <stabilizationInit+0x578>)
 800474a:	4a84      	ldr	r2, [pc, #528]	; (800495c <stabilizationInit+0x590>)
 800474c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 8004750:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <stabilizationInit+0x574>)
 8004752:	2201      	movs	r2, #1
 8004754:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rMonitorInput.depth;
 8004758:	4b7a      	ldr	r3, [pc, #488]	; (8004944 <stabilizationInit+0x578>)
 800475a:	4a81      	ldr	r2, [pc, #516]	; (8004960 <stabilizationInit+0x594>)
 800475c:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 800475e:	4b79      	ldr	r3, [pc, #484]	; (8004944 <stabilizationInit+0x578>)
 8004760:	4a80      	ldr	r2, [pc, #512]	; (8004964 <stabilizationInit+0x598>)
 8004762:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8004764:	4b77      	ldr	r3, [pc, #476]	; (8004944 <stabilizationInit+0x578>)
 8004766:	4a80      	ldr	r2, [pc, #512]	; (8004968 <stabilizationInit+0x59c>)
 8004768:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 800476a:	4b75      	ldr	r3, [pc, #468]	; (8004940 <stabilizationInit+0x574>)
 800476c:	2200      	movs	r2, #0
 800476e:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rMonitorInput.lag;
 8004770:	4b74      	ldr	r3, [pc, #464]	; (8004944 <stabilizationInit+0x578>)
 8004772:	4a7e      	ldr	r2, [pc, #504]	; (800496c <stabilizationInit+0x5a0>)
 8004774:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8004778:	4b72      	ldr	r3, [pc, #456]	; (8004944 <stabilizationInit+0x578>)
 800477a:	4a7d      	ldr	r2, [pc, #500]	; (8004970 <stabilizationInit+0x5a4>)
 800477c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 8004780:	4b70      	ldr	r3, [pc, #448]	; (8004944 <stabilizationInit+0x578>)
 8004782:	4a7c      	ldr	r2, [pc, #496]	; (8004974 <stabilizationInit+0x5a8>)
 8004784:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8004788:	4b6d      	ldr	r3, [pc, #436]	; (8004940 <stabilizationInit+0x574>)
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rMonitorInput.march;
 8004790:	4b6c      	ldr	r3, [pc, #432]	; (8004944 <stabilizationInit+0x578>)
 8004792:	4a79      	ldr	r2, [pc, #484]	; (8004978 <stabilizationInit+0x5ac>)
 8004794:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8004796:	4b6b      	ldr	r3, [pc, #428]	; (8004944 <stabilizationInit+0x578>)
 8004798:	4a78      	ldr	r2, [pc, #480]	; (800497c <stabilizationInit+0x5b0>)
 800479a:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 800479c:	4b69      	ldr	r3, [pc, #420]	; (8004944 <stabilizationInit+0x578>)
 800479e:	4a78      	ldr	r2, [pc, #480]	; (8004980 <stabilizationInit+0x5b4>)
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 80047a2:	4b67      	ldr	r3, [pc, #412]	; (8004940 <stabilizationInit+0x574>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
=======
	rStabConstants[STAB_YAW].enable = false;
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <stabilizationInit+0x30c>)
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_ROLL].enable = false;
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <stabilizationInit+0x30c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	rStabConstants[STAB_DEPTH].enable = false;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <stabilizationInit+0x30c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
	rStabConstants[STAB_MARCH].enable = false;
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <stabilizationInit+0x30c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rStabConstants[STAB_LAG].enable = false;
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <stabilizationInit+0x30c>)
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rStabConstants[STAB_PITCH].enable = false;
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <stabilizationInit+0x30c>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
	//////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <stabilizationInit+0x310>)
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <stabilizationInit+0x330>)
 80046ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 80046d2:	4b02      	ldr	r3, [pc, #8]	; (80046dc <stabilizationInit+0x310>)
 80046d4:	e014      	b.n	8004700 <stabilizationInit+0x334>
 80046d6:	bf00      	nop
 80046d8:	20001ea0 	.word	0x20001ea0
 80046dc:	20002068 	.word	0x20002068
 80046e0:	20001d34 	.word	0x20001d34
 80046e4:	c47a0000 	.word	0xc47a0000
 80046e8:	447a0000 	.word	0x447a0000
 80046ec:	459c4000 	.word	0x459c4000
 80046f0:	c59c4000 	.word	0xc59c4000
 80046f4:	46fa0000 	.word	0x46fa0000
 80046f8:	c6fa0000 	.word	0xc6fa0000
 80046fc:	20001e54 	.word	0x20001e54
 8004700:	4a96      	ldr	r2, [pc, #600]	; (800495c <stabilizationInit+0x590>)
 8004702:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 8004706:	4b96      	ldr	r3, [pc, #600]	; (8004960 <stabilizationInit+0x594>)
 8004708:	4a96      	ldr	r2, [pc, #600]	; (8004964 <stabilizationInit+0x598>)
 800470a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 800470e:	4b96      	ldr	r3, [pc, #600]	; (8004968 <stabilizationInit+0x59c>)
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 8004716:	4b92      	ldr	r3, [pc, #584]	; (8004960 <stabilizationInit+0x594>)
 8004718:	4a94      	ldr	r2, [pc, #592]	; (800496c <stabilizationInit+0x5a0>)
 800471a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 800471e:	4b90      	ldr	r3, [pc, #576]	; (8004960 <stabilizationInit+0x594>)
 8004720:	4a93      	ldr	r2, [pc, #588]	; (8004970 <stabilizationInit+0x5a4>)
 8004722:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 8004726:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <stabilizationInit+0x594>)
 8004728:	4a92      	ldr	r2, [pc, #584]	; (8004974 <stabilizationInit+0x5a8>)
 800472a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 800472e:	4b8e      	ldr	r3, [pc, #568]	; (8004968 <stabilizationInit+0x59c>)
 8004730:	2201      	movs	r2, #1
 8004732:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 8004736:	4b8a      	ldr	r3, [pc, #552]	; (8004960 <stabilizationInit+0x594>)
 8004738:	4a8f      	ldr	r2, [pc, #572]	; (8004978 <stabilizationInit+0x5ac>)
 800473a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 800473e:	4b88      	ldr	r3, [pc, #544]	; (8004960 <stabilizationInit+0x594>)
 8004740:	4a8e      	ldr	r2, [pc, #568]	; (800497c <stabilizationInit+0x5b0>)
 8004742:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 8004746:	4b86      	ldr	r3, [pc, #536]	; (8004960 <stabilizationInit+0x594>)
 8004748:	4a8d      	ldr	r2, [pc, #564]	; (8004980 <stabilizationInit+0x5b4>)
 800474a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 800474e:	4b86      	ldr	r3, [pc, #536]	; (8004968 <stabilizationInit+0x59c>)
 8004750:	2201      	movs	r2, #1
 8004752:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 8004756:	4b82      	ldr	r3, [pc, #520]	; (8004960 <stabilizationInit+0x594>)
 8004758:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <stabilizationInit+0x5b8>)
 800475a:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 800475c:	4b80      	ldr	r3, [pc, #512]	; (8004960 <stabilizationInit+0x594>)
 800475e:	4a8a      	ldr	r2, [pc, #552]	; (8004988 <stabilizationInit+0x5bc>)
 8004760:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8004762:	4b7f      	ldr	r3, [pc, #508]	; (8004960 <stabilizationInit+0x594>)
 8004764:	4a89      	ldr	r2, [pc, #548]	; (800498c <stabilizationInit+0x5c0>)
 8004766:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 8004768:	4b7f      	ldr	r3, [pc, #508]	; (8004968 <stabilizationInit+0x59c>)
 800476a:	2200      	movs	r2, #0
 800476c:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 800476e:	4b7c      	ldr	r3, [pc, #496]	; (8004960 <stabilizationInit+0x594>)
 8004770:	4a87      	ldr	r2, [pc, #540]	; (8004990 <stabilizationInit+0x5c4>)
 8004772:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 8004776:	4b7a      	ldr	r3, [pc, #488]	; (8004960 <stabilizationInit+0x594>)
 8004778:	4a86      	ldr	r2, [pc, #536]	; (8004994 <stabilizationInit+0x5c8>)
 800477a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 800477e:	4b78      	ldr	r3, [pc, #480]	; (8004960 <stabilizationInit+0x594>)
 8004780:	4a85      	ldr	r2, [pc, #532]	; (8004998 <stabilizationInit+0x5cc>)
 8004782:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 8004786:	4b78      	ldr	r3, [pc, #480]	; (8004968 <stabilizationInit+0x59c>)
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 800478e:	4b74      	ldr	r3, [pc, #464]	; (8004960 <stabilizationInit+0x594>)
 8004790:	4a82      	ldr	r2, [pc, #520]	; (800499c <stabilizationInit+0x5d0>)
 8004792:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8004794:	4b72      	ldr	r3, [pc, #456]	; (8004960 <stabilizationInit+0x594>)
 8004796:	4a82      	ldr	r2, [pc, #520]	; (80049a0 <stabilizationInit+0x5d4>)
 8004798:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 800479a:	4b71      	ldr	r3, [pc, #452]	; (8004960 <stabilizationInit+0x594>)
 800479c:	4a7f      	ldr	r2, [pc, #508]	; (800499c <stabilizationInit+0x5d0>)
 800479e:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 80047a0:	4b71      	ldr	r3, [pc, #452]	; (8004968 <stabilizationInit+0x59c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
>>>>>>> Stashed changes


    //upload coef
	rStabConstants[STAB_YAW].enable = true;
 80047aa:	4b65      	ldr	r3, [pc, #404]	; (8004940 <stabilizationInit+0x574>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
<<<<<<< Updated upstream
 80047b2:	4b63      	ldr	r3, [pc, #396]	; (8004940 <stabilizationInit+0x574>)
 80047b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 80047bc:	4b60      	ldr	r3, [pc, #384]	; (8004940 <stabilizationInit+0x574>)
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	rStabConstants[STAB_YAW].pErrGain = 1;
 80047c6:	4b5e      	ldr	r3, [pc, #376]	; (8004940 <stabilizationInit+0x574>)
 80047c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047cc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 80047d0:	4b5b      	ldr	r3, [pc, #364]	; (8004940 <stabilizationInit+0x574>)
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 1;
 80047da:	4b59      	ldr	r3, [pc, #356]	; (8004940 <stabilizationInit+0x574>)
 80047dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047e0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 80047e4:	4b56      	ldr	r3, [pc, #344]	; (8004940 <stabilizationInit+0x574>)
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 80047ee:	4b54      	ldr	r3, [pc, #336]	; (8004940 <stabilizationInit+0x574>)
 80047f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047f4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pid.pGain = 25;
 80047f8:	4b51      	ldr	r3, [pc, #324]	; (8004940 <stabilizationInit+0x574>)
 80047fa:	4a62      	ldr	r2, [pc, #392]	; (8004984 <stabilizationInit+0x5b8>)
 80047fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].pid.iGain = 0;
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <stabilizationInit+0x574>)
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rStabConstants[STAB_YAW].pid.iMax = 3000;
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <stabilizationInit+0x574>)
 800480c:	4a5e      	ldr	r2, [pc, #376]	; (8004988 <stabilizationInit+0x5bc>)
 800480e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	rStabConstants[STAB_YAW].pid.iMin = -3000;
 8004812:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <stabilizationInit+0x574>)
 8004814:	4a5d      	ldr	r2, [pc, #372]	; (800498c <stabilizationInit+0x5c0>)
 8004816:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pThrustersMax = 20000;
 800481a:	4b49      	ldr	r3, [pc, #292]	; (8004940 <stabilizationInit+0x574>)
 800481c:	4a5c      	ldr	r2, [pc, #368]	; (8004990 <stabilizationInit+0x5c4>)
 800481e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pThrustersMin = -20000;
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <stabilizationInit+0x574>)
 8004824:	4a5b      	ldr	r2, [pc, #364]	; (8004994 <stabilizationInit+0x5c8>)
 8004826:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 800482a:	4b45      	ldr	r3, [pc, #276]	; (8004940 <stabilizationInit+0x574>)
 800482c:	4a5a      	ldr	r2, [pc, #360]	; (8004998 <stabilizationInit+0x5cc>)
 800482e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 8004832:	4b43      	ldr	r3, [pc, #268]	; (8004940 <stabilizationInit+0x574>)
 8004834:	4a59      	ldr	r2, [pc, #356]	; (800499c <stabilizationInit+0x5d0>)
 8004836:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    rStabConstants[STAB_YAW].joyIntegration = false;
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <stabilizationInit+0x574>)
 800483c:	2200      	movs	r2, #0
 800483e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
=======
 80047a8:	4b6f      	ldr	r3, [pc, #444]	; (8004968 <stabilizationInit+0x59c>)
 80047aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <stabilizationInit+0x59c>)
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pErrGain = 1;
 80047bc:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <stabilizationInit+0x59c>)
 80047be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 80047c6:	4b68      	ldr	r3, [pc, #416]	; (8004968 <stabilizationInit+0x59c>)
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 1;
 80047d0:	4b65      	ldr	r3, [pc, #404]	; (8004968 <stabilizationInit+0x59c>)
 80047d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <stabilizationInit+0x59c>)
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 80047e4:	4b60      	ldr	r3, [pc, #384]	; (8004968 <stabilizationInit+0x59c>)
 80047e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	rStabConstants[STAB_YAW].pid.pGain = 0.1;
 80047ee:	4b5e      	ldr	r3, [pc, #376]	; (8004968 <stabilizationInit+0x59c>)
 80047f0:	4a6c      	ldr	r2, [pc, #432]	; (80049a4 <stabilizationInit+0x5d8>)
 80047f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pid.iGain = 0;
 80047f6:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <stabilizationInit+0x59c>)
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].pid.iMax = 90;
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <stabilizationInit+0x59c>)
 8004802:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <stabilizationInit+0x5dc>)
 8004804:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pid.iMin = -90;
 8004808:	4b57      	ldr	r3, [pc, #348]	; (8004968 <stabilizationInit+0x59c>)
 800480a:	4a68      	ldr	r2, [pc, #416]	; (80049ac <stabilizationInit+0x5e0>)
 800480c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].pThrustersCast = 45;
 8004810:	4b55      	ldr	r3, [pc, #340]	; (8004968 <stabilizationInit+0x59c>)
 8004812:	4a67      	ldr	r2, [pc, #412]	; (80049b0 <stabilizationInit+0x5e4>)
 8004814:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	rStabConstants[STAB_YAW].pThrustersMax = 90;
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <stabilizationInit+0x59c>)
 800481a:	4a63      	ldr	r2, [pc, #396]	; (80049a8 <stabilizationInit+0x5dc>)
 800481c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	rStabConstants[STAB_YAW].pThrustersMin = -90;
 8004820:	4b51      	ldr	r3, [pc, #324]	; (8004968 <stabilizationInit+0x59c>)
 8004822:	4a62      	ldr	r2, [pc, #392]	; (80049ac <stabilizationInit+0x5e0>)
 8004824:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 8004828:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <stabilizationInit+0x59c>)
 800482a:	4a62      	ldr	r2, [pc, #392]	; (80049b4 <stabilizationInit+0x5e8>)
 800482c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 8004830:	4b4d      	ldr	r3, [pc, #308]	; (8004968 <stabilizationInit+0x59c>)
 8004832:	4a61      	ldr	r2, [pc, #388]	; (80049b8 <stabilizationInit+0x5ec>)
 8004834:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    rStabConstants[STAB_YAW].joyIntegration = false;
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <stabilizationInit+0x59c>)
 800483a:	2200      	movs	r2, #0
 800483c:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
>>>>>>> Stashed changes

	//rStabConstants[STAB_DEPTH].enable = true;

<<<<<<< Updated upstream
	rStabConstants[STAB_DEPTH].pJoyUnitCast = -1;
 8004842:	4b3f      	ldr	r3, [pc, #252]	; (8004940 <stabilizationInit+0x574>)
 8004844:	4a56      	ldr	r2, [pc, #344]	; (80049a0 <stabilizationInit+0x5d4>)
 8004846:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 8004848:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <stabilizationInit+0x574>)
 800484a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800484e:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 8004850:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <stabilizationInit+0x574>)
 8004852:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004856:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 80;
 8004858:	4b39      	ldr	r3, [pc, #228]	; (8004940 <stabilizationInit+0x574>)
 800485a:	4a52      	ldr	r2, [pc, #328]	; (80049a4 <stabilizationInit+0x5d8>)
 800485c:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = -15;
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <stabilizationInit+0x574>)
 8004860:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <stabilizationInit+0x5dc>)
 8004862:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8004864:	4b36      	ldr	r3, [pc, #216]	; (8004940 <stabilizationInit+0x574>)
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = -1;
 800486c:	4b34      	ldr	r3, [pc, #208]	; (8004940 <stabilizationInit+0x574>)
 800486e:	4a4c      	ldr	r2, [pc, #304]	; (80049a0 <stabilizationInit+0x5d4>)
 8004870:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 30;
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <stabilizationInit+0x574>)
 8004874:	4a4d      	ldr	r2, [pc, #308]	; (80049ac <stabilizationInit+0x5e0>)
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 5;
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <stabilizationInit+0x574>)
 800487a:	4a4d      	ldr	r2, [pc, #308]	; (80049b0 <stabilizationInit+0x5e4>)
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 40;
 800487e:	4b30      	ldr	r3, [pc, #192]	; (8004940 <stabilizationInit+0x574>)
 8004880:	4a4c      	ldr	r2, [pc, #304]	; (80049b4 <stabilizationInit+0x5e8>)
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -40;
 8004884:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <stabilizationInit+0x574>)
 8004886:	4a4c      	ldr	r2, [pc, #304]	; (80049b8 <stabilizationInit+0x5ec>)
 8004888:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersMax = 32000;
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <stabilizationInit+0x574>)
 800488c:	4a42      	ldr	r2, [pc, #264]	; (8004998 <stabilizationInit+0x5cc>)
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -32000;
 8004890:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <stabilizationInit+0x574>)
 8004892:	4a42      	ldr	r2, [pc, #264]	; (800499c <stabilizationInit+0x5d0>)
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 8004896:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <stabilizationInit+0x574>)
 8004898:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <stabilizationInit+0x5cc>)
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <stabilizationInit+0x574>)
 800489e:	4a3f      	ldr	r2, [pc, #252]	; (800499c <stabilizationInit+0x5d0>)
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 80048a2:	4b27      	ldr	r3, [pc, #156]	; (8004940 <stabilizationInit+0x574>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_PITCH].pJoyUnitCast = -1;
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <stabilizationInit+0x574>)
 80048aa:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <stabilizationInit+0x5d4>)
 80048ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_PITCH].pSpeedDyn = 0;
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <stabilizationInit+0x574>)
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_PITCH].pErrGain = 1;
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <stabilizationInit+0x574>)
 80048bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048c0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].T = 0;
 80048c4:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <stabilizationInit+0x574>)
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rStabConstants[STAB_PITCH].aFilter[SPEED_FILTER].K = 1;
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <stabilizationInit+0x574>)
 80048d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048d4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].T = 0;
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <stabilizationInit+0x574>)
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	rStabConstants[STAB_PITCH].aFilter[POS_FILTER].K = -100;
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <stabilizationInit+0x574>)
 80048e4:	4a35      	ldr	r2, [pc, #212]	; (80049bc <stabilizationInit+0x5f0>)
 80048e6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	rStabConstants[STAB_PITCH].pid.pGain = 25;
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <stabilizationInit+0x574>)
 80048ec:	4a25      	ldr	r2, [pc, #148]	; (8004984 <stabilizationInit+0x5b8>)
 80048ee:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	rStabConstants[STAB_PITCH].pid.iGain = 60;
 80048f2:	4b13      	ldr	r3, [pc, #76]	; (8004940 <stabilizationInit+0x574>)
 80048f4:	4a32      	ldr	r2, [pc, #200]	; (80049c0 <stabilizationInit+0x5f4>)
 80048f6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	rStabConstants[STAB_PITCH].pid.iMax = 50;
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <stabilizationInit+0x574>)
 80048fc:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <stabilizationInit+0x5f8>)
 80048fe:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	rStabConstants[STAB_PITCH].pid.iMin = -50;
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <stabilizationInit+0x574>)
 8004904:	4a30      	ldr	r2, [pc, #192]	; (80049c8 <stabilizationInit+0x5fc>)
 8004906:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	rStabConstants[STAB_PITCH].pThrustersMax = 32000;
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <stabilizationInit+0x574>)
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <stabilizationInit+0x5cc>)
 800490e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	rStabConstants[STAB_PITCH].pThrustersMin = -32000;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <stabilizationInit+0x574>)
 8004914:	4a21      	ldr	r2, [pc, #132]	; (800499c <stabilizationInit+0x5d0>)
 8004916:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	rStabConstants[STAB_PITCH].sOutSummatorMax = 32000;
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <stabilizationInit+0x574>)
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <stabilizationInit+0x5cc>)
 800491e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	rStabConstants[STAB_PITCH].sOutSummatorMin = -32000;
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <stabilizationInit+0x574>)
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <stabilizationInit+0x5d0>)
 8004926:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    rStabConstants[STAB_PITCH].joyIntegration = false;
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <stabilizationInit+0x574>)
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169


}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20001eb0 	.word	0x20001eb0
 8004944:	20002060 	.word	0x20002060
 8004948:	20001e68 	.word	0x20001e68
 800494c:	20001df0 	.word	0x20001df0
 8004950:	20001dd4 	.word	0x20001dd4
 8004954:	20001e6c 	.word	0x20001e6c
 8004958:	20001df4 	.word	0x20001df4
 800495c:	20001dd8 	.word	0x20001dd8
 8004960:	20001e60 	.word	0x20001e60
 8004964:	20001e30 	.word	0x20001e30
 8004968:	20001e28 	.word	0x20001e28
 800496c:	20001e5c 	.word	0x20001e5c
 8004970:	20002120 	.word	0x20002120
 8004974:	20001d3c 	.word	0x20001d3c
 8004978:	20001e58 	.word	0x20001e58
 800497c:	200020c8 	.word	0x200020c8
 8004980:	20001e40 	.word	0x20001e40
 8004984:	41c80000 	.word	0x41c80000
 8004988:	453b8000 	.word	0x453b8000
 800498c:	c53b8000 	.word	0xc53b8000
 8004990:	469c4000 	.word	0x469c4000
 8004994:	c69c4000 	.word	0xc69c4000
 8004998:	46fa0000 	.word	0x46fa0000
 800499c:	c6fa0000 	.word	0xc6fa0000
 80049a0:	bf800000 	.word	0xbf800000
 80049a4:	42a00000 	.word	0x42a00000
 80049a8:	c1700000 	.word	0xc1700000
 80049ac:	41f00000 	.word	0x41f00000
 80049b0:	40a00000 	.word	0x40a00000
 80049b4:	42200000 	.word	0x42200000
 80049b8:	c2200000 	.word	0xc2200000
 80049bc:	c2c80000 	.word	0xc2c80000
 80049c0:	42700000 	.word	0x42700000
 80049c4:	42480000 	.word	0x42480000
 80049c8:	c2480000 	.word	0xc2480000
=======
	rStabConstants[STAB_DEPTH].pJoyUnitCast = 1;
 8004840:	4b49      	ldr	r3, [pc, #292]	; (8004968 <stabilizationInit+0x59c>)
 8004842:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004846:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 8004848:	4b47      	ldr	r3, [pc, #284]	; (8004968 <stabilizationInit+0x59c>)
 800484a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800484e:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 8004850:	4b45      	ldr	r3, [pc, #276]	; (8004968 <stabilizationInit+0x59c>)
 8004852:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004856:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 0;//0.02;
 8004858:	4b43      	ldr	r3, [pc, #268]	; (8004968 <stabilizationInit+0x59c>)
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = 1;//25;
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <stabilizationInit+0x59c>)
 8004862:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004866:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <stabilizationInit+0x59c>)
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = 1;
 8004870:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <stabilizationInit+0x59c>)
 8004872:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004876:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 2;
 8004878:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <stabilizationInit+0x59c>)
 800487a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 0;
 8004880:	4b39      	ldr	r3, [pc, #228]	; (8004968 <stabilizationInit+0x59c>)
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 90;
 8004888:	4b37      	ldr	r3, [pc, #220]	; (8004968 <stabilizationInit+0x59c>)
 800488a:	4a47      	ldr	r2, [pc, #284]	; (80049a8 <stabilizationInit+0x5dc>)
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -90;
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <stabilizationInit+0x59c>)
 8004890:	4a46      	ldr	r2, [pc, #280]	; (80049ac <stabilizationInit+0x5e0>)
 8004892:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersCast = 0.3;
 8004894:	4b34      	ldr	r3, [pc, #208]	; (8004968 <stabilizationInit+0x59c>)
 8004896:	4a49      	ldr	r2, [pc, #292]	; (80049bc <stabilizationInit+0x5f0>)
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].pThrustersMax = 90;
 800489a:	4b33      	ldr	r3, [pc, #204]	; (8004968 <stabilizationInit+0x59c>)
 800489c:	4a42      	ldr	r2, [pc, #264]	; (80049a8 <stabilizationInit+0x5dc>)
 800489e:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -90;
 80048a0:	4b31      	ldr	r3, [pc, #196]	; (8004968 <stabilizationInit+0x59c>)
 80048a2:	4a42      	ldr	r2, [pc, #264]	; (80049ac <stabilizationInit+0x5e0>)
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <stabilizationInit+0x59c>)
 80048a8:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <stabilizationInit+0x5e8>)
 80048aa:	645a      	str	r2, [r3, #68]	; 0x44
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 80048ac:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <stabilizationInit+0x59c>)
 80048ae:	4a42      	ldr	r2, [pc, #264]	; (80049b8 <stabilizationInit+0x5ec>)
 80048b0:	649a      	str	r2, [r3, #72]	; 0x48
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <stabilizationInit+0x59c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_ROLL].pJoyUnitCast = 1;
 80048b8:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <stabilizationInit+0x59c>)
 80048ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	rStabConstants[STAB_ROLL].pSpeedDyn = 0;
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <stabilizationInit+0x59c>)
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	rStabConstants[STAB_ROLL].pErrGain = 1;
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <stabilizationInit+0x59c>)
 80048ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048d2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].T = 0;
 80048d6:	4b24      	ldr	r3, [pc, #144]	; (8004968 <stabilizationInit+0x59c>)
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].K = 1;
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <stabilizationInit+0x59c>)
 80048e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048e6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].T = 0;
 80048ea:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <stabilizationInit+0x59c>)
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].K = 1;
 80048f4:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <stabilizationInit+0x59c>)
 80048f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048fa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	rStabConstants[STAB_ROLL].pid.pGain = 0.1;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <stabilizationInit+0x59c>)
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <stabilizationInit+0x5d8>)
 8004902:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	rStabConstants[STAB_ROLL].pid.iGain = 0;
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <stabilizationInit+0x59c>)
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	rStabConstants[STAB_ROLL].pid.iMax = 50;
 8004910:	4b15      	ldr	r3, [pc, #84]	; (8004968 <stabilizationInit+0x59c>)
 8004912:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <stabilizationInit+0x5f4>)
 8004914:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	rStabConstants[STAB_ROLL].pid.iMin = -50;
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <stabilizationInit+0x59c>)
 800491a:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <stabilizationInit+0x5f8>)
 800491c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	rStabConstants[STAB_ROLL].pThrustersCast = 40;
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <stabilizationInit+0x59c>)
 8004922:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <stabilizationInit+0x5fc>)
 8004924:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_ROLL].pThrustersMax = 90;
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <stabilizationInit+0x59c>)
 800492a:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <stabilizationInit+0x5dc>)
 800492c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_ROLL].pThrustersMin = -90;
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <stabilizationInit+0x59c>)
 8004932:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <stabilizationInit+0x5e0>)
 8004934:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	rStabConstants[STAB_ROLL].sOutSummatorMax = 32000;
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <stabilizationInit+0x59c>)
 800493a:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <stabilizationInit+0x5e8>)
 800493c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_ROLL].sOutSummatorMin = -32000;
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <stabilizationInit+0x59c>)
 8004942:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <stabilizationInit+0x5ec>)
 8004944:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <stabilizationInit+0x59c>)
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131


}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20001dec 	.word	0x20001dec
 8004960:	20002068 	.word	0x20002068
 8004964:	20001dd0 	.word	0x20001dd0
 8004968:	20001ea0 	.word	0x20001ea0
 800496c:	20001e58 	.word	0x20001e58
 8004970:	20001df0 	.word	0x20001df0
 8004974:	20001dd4 	.word	0x20001dd4
 8004978:	20001e5c 	.word	0x20001e5c
 800497c:	20001df4 	.word	0x20001df4
 8004980:	20001dd8 	.word	0x20001dd8
 8004984:	20001e50 	.word	0x20001e50
 8004988:	20001e38 	.word	0x20001e38
 800498c:	20001e2c 	.word	0x20001e2c
 8004990:	20001e4c 	.word	0x20001e4c
 8004994:	20002128 	.word	0x20002128
 8004998:	20001d3c 	.word	0x20001d3c
 800499c:	20001e48 	.word	0x20001e48
 80049a0:	200020d0 	.word	0x200020d0
 80049a4:	3dcccccd 	.word	0x3dcccccd
 80049a8:	42b40000 	.word	0x42b40000
 80049ac:	c2b40000 	.word	0xc2b40000
 80049b0:	42340000 	.word	0x42340000
 80049b4:	46fa0000 	.word	0x46fa0000
 80049b8:	c6fa0000 	.word	0xc6fa0000
 80049bc:	3e99999a 	.word	0x3e99999a
 80049c0:	42480000 	.word	0x42480000
 80049c4:	c2480000 	.word	0xc2480000
 80049c8:	42200000 	.word	0x42200000
>>>>>>> Stashed changes

080049cc <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
<<<<<<< Updated upstream
 80049d6:	79fa      	ldrb	r2, [r7, #7]
 80049d8:	4970      	ldr	r1, [pc, #448]	; (8004b9c <stabilizationStart+0x1d0>)
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	4a6d      	ldr	r2, [pc, #436]	; (8004ba0 <stabilizationStart+0x1d4>)
 80049ec:	2158      	movs	r1, #88	; 0x58
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	4968      	ldr	r1, [pc, #416]	; (8004ba0 <stabilizationStart+0x1d4>)
 80049fe:	2058      	movs	r0, #88	; 0x58
 8004a00:	fb00 f303 	mul.w	r3, r0, r3
 8004a04:	440b      	add	r3, r1
 8004a06:	3314      	adds	r3, #20
 8004a08:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	4a64      	ldr	r2, [pc, #400]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a0e:	2158      	movs	r1, #88	; 0x58
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3308      	adds	r3, #8
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4960      	ldr	r1, [pc, #384]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a20:	2058      	movs	r0, #88	; 0x58
 8004a22:	fb00 f303 	mul.w	r3, r0, r3
 8004a26:	440b      	add	r3, r1
 8004a28:	3318      	adds	r3, #24
 8004a2a:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	4a5c      	ldr	r2, [pc, #368]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a30:	2158      	movs	r1, #88	; 0x58
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	3310      	adds	r3, #16
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d103      	bne.n	8004a4e <stabilizationStart+0x82>
{
	rSensors.yaw =0;
 8004a46:	4b57      	ldr	r3, [pc, #348]	; (8004ba4 <stabilizationStart+0x1d8>)
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	4a53      	ldr	r2, [pc, #332]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a52:	2158      	movs	r1, #88	; 0x58
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	331c      	adds	r3, #28
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	4a4e      	ldr	r2, [pc, #312]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a66:	2158      	movs	r1, #88	; 0x58
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3308      	adds	r3, #8
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	494a      	ldr	r1, [pc, #296]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a78:	2058      	movs	r0, #88	; 0x58
 8004a7a:	fb00 f303 	mul.w	r3, r0, r3
 8004a7e:	440b      	add	r3, r1
 8004a80:	3320      	adds	r3, #32
 8004a82:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	4a46      	ldr	r2, [pc, #280]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a88:	2158      	movs	r1, #88	; 0x58
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	3324      	adds	r3, #36	; 0x24
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	4a41      	ldr	r2, [pc, #260]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a9c:	2158      	movs	r1, #88	; 0x58
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3328      	adds	r3, #40	; 0x28
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004ab0:	2158      	movs	r1, #88	; 0x58
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	332c      	adds	r3, #44	; 0x2c
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004ac4:	2158      	movs	r1, #88	; 0x58
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	3330      	adds	r3, #48	; 0x30
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	4a32      	ldr	r2, [pc, #200]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004ad8:	2158      	movs	r1, #88	; 0x58
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	3334      	adds	r3, #52	; 0x34
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004aec:	2158      	movs	r1, #88	; 0x58
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	3338      	adds	r3, #56	; 0x38
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	4a28      	ldr	r2, [pc, #160]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004b00:	2158      	movs	r1, #88	; 0x58
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	4413      	add	r3, r2
 8004b08:	333c      	adds	r3, #60	; 0x3c
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004b14:	2158      	movs	r1, #88	; 0x58
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004b28:	2158      	movs	r1, #88	; 0x58
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	3344      	adds	r3, #68	; 0x44
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004b3c:	2158      	movs	r1, #88	; 0x58
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	4413      	add	r3, r2
 8004b44:	3348      	adds	r3, #72	; 0x48
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004b50:	2158      	movs	r1, #88	; 0x58
 8004b52:	fb01 f303 	mul.w	r3, r1, r3
 8004b56:	4413      	add	r3, r2
 8004b58:	334c      	adds	r3, #76	; 0x4c
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004b64:	2158      	movs	r1, #88	; 0x58
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3350      	adds	r3, #80	; 0x50
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8004b74:	f009 fc42 	bl	800e3fc <xTaskGetTickCount>
 8004b78:	ee07 0a90 	vmov	s15, r0
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004b84:	2158      	movs	r1, #88	; 0x58
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3354      	adds	r3, #84	; 0x54
 8004b8e:	edc3 7a00 	vstr	s15, [r3]
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20001eb0 	.word	0x20001eb0
 8004ba0:	20002060 	.word	0x20002060
 8004ba4:	20001dd0 	.word	0x20001dd0

08004ba8 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8004ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8004bb4:	79fa      	ldrb	r2, [r7, #7]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4ac8      	ldr	r2, [pc, #800]	; (8004ee0 <stabilizationUpdate+0x338>)
 8004bc0:	4413      	add	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2258      	movs	r2, #88	; 0x58
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	4ac5      	ldr	r2, [pc, #788]	; (8004ee4 <stabilizationUpdate+0x33c>)
 8004bce:	4413      	add	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004bd2:	f009 fc13 	bl	800e3fc <xTaskGetTickCount>
 8004bd6:	ee07 0a90 	vmov	s15, r0
 8004bda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bec:	ee17 0a90 	vmov	r0, s15
 8004bf0:	f7fc f9e0 	bl	8000fb4 <fromTickToMs>
 8004bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8004bf8:	eddf 6abb 	vldr	s13, [pc, #748]	; 8004ee8 <stabilizationUpdate+0x340>
 8004bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c00:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004c04:	f009 fbfa 	bl	800e3fc <xTaskGetTickCount>
 8004c08:	ee07 0a90 	vmov	s15, r0
 8004c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3318      	adds	r3, #24
 8004c1a:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	edd3 7a00 	vldr	s15, [r3]
 8004c22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2a:	d02b      	beq.n	8004c84 <stabilizationUpdate+0xdc>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	edd3 6a00 	vldr	s13, [r3]
 8004c38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c3c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004c40:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004ef8 <stabilizationUpdate+0x350>
 8004c44:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	ed93 6a00 	vldr	s12, [r3]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004c62:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 8004eec <stabilizationUpdate+0x344>
 8004c66:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004c82:	e01f      	b.n	8004cc4 <stabilizationUpdate+0x11c>
	}
	else {
		if(contour==STAB_PITCH)
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d110      	bne.n	8004cac <stabilizationUpdate+0x104>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	ed93 7a00 	vldr	s14, [r3]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004ef0 <stabilizationUpdate+0x348>
 8004ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004caa:	e00b      	b.n	8004cc4 <stabilizationUpdate+0x11c>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K;//*10;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	ed93 7a00 	vldr	s14, [r3]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3310      	adds	r3, #16
 8004cd0:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	edd3 7a00 	vldr	s15, [r3]
 8004cd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	d061      	beq.n	8004da6 <stabilizationUpdate+0x1fe>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fb fbd6 	bl	8000498 <__aeabi_f2d>
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf4:	eeb1 7a67 	vneg.f32	s14, s15
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	edd3 7a00 	vldr	s15, [r3]
 8004cfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d02:	ee16 0a90 	vmov	r0, s13
 8004d06:	f7fb fbc7 	bl	8000498 <__aeabi_f2d>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	ec43 2b10 	vmov	d0, r2, r3
 8004d12:	f00b fb3d 	bl	8010390 <exp>
 8004d16:	ec53 2b10 	vmov	r2, r3, d0
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	f7fb fc13 	bl	8000548 <__aeabi_dmul>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4690      	mov	r8, r2
 8004d28:	4699      	mov	r9, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	ee17 0a90 	vmov	r0, s15
 8004d3e:	f7fb fbab 	bl	8000498 <__aeabi_f2d>
 8004d42:	4604      	mov	r4, r0
 8004d44:	460d      	mov	r5, r1
 8004d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d4a:	eeb1 7a67 	vneg.f32	s14, s15
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	edd3 7a00 	vldr	s15, [r3]
 8004d54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d58:	ee16 0a90 	vmov	r0, s13
 8004d5c:	f7fb fb9c 	bl	8000498 <__aeabi_f2d>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	ec43 2b10 	vmov	d0, r2, r3
 8004d68:	f00b fb12 	bl	8010390 <exp>
 8004d6c:	ec53 2b10 	vmov	r2, r3, d0
 8004d70:	f04f 0000 	mov.w	r0, #0
 8004d74:	495f      	ldr	r1, [pc, #380]	; (8004ef4 <stabilizationUpdate+0x34c>)
 8004d76:	f7fb fa2f 	bl	80001d8 <__aeabi_dsub>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4620      	mov	r0, r4
 8004d80:	4629      	mov	r1, r5
 8004d82:	f7fb fbe1 	bl	8000548 <__aeabi_dmul>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	f7fb fa25 	bl	80001dc <__adddf3>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7fb fe97 	bl	8000acc <__aeabi_d2f>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
 8004da4:	e00b      	b.n	8004dbe <stabilizationUpdate+0x216>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	ed93 7a00 	vldr	s14, [r3]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	ed93 7a03 	vldr	s14, [r3, #12]
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	edd3 6a00 	vldr	s13, [r3]
 8004dd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004df4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004df8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	edd3 7a00 	vldr	s15, [r3]
 8004e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00f      	beq.n	8004e4e <stabilizationUpdate+0x2a6>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	ed93 7a08 	vldr	s14, [r3, #32]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	edd3 6a07 	vldr	s13, [r3, #28]
 8004e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	edc3 7a08 	vstr	s15, [r3, #32]
 8004e4c:	e003      	b.n	8004e56 <stabilizationUpdate+0x2ae>
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
=======
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	4a6f      	ldr	r2, [pc, #444]	; (8004b98 <stabilizationStart+0x1cc>)
 80049da:	214c      	movs	r1, #76	; 0x4c
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	4413      	add	r3, r2
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	4a6c      	ldr	r2, [pc, #432]	; (8004b9c <stabilizationStart+0x1d0>)
 80049ea:	2158      	movs	r1, #88	; 0x58
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3304      	adds	r3, #4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	4968      	ldr	r1, [pc, #416]	; (8004b9c <stabilizationStart+0x1d0>)
 80049fc:	2058      	movs	r0, #88	; 0x58
 80049fe:	fb00 f303 	mul.w	r3, r0, r3
 8004a02:	440b      	add	r3, r1
 8004a04:	3314      	adds	r3, #20
 8004a06:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	4a64      	ldr	r2, [pc, #400]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a0c:	2158      	movs	r1, #88	; 0x58
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	3308      	adds	r3, #8
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	495f      	ldr	r1, [pc, #380]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a1e:	2058      	movs	r0, #88	; 0x58
 8004a20:	fb00 f303 	mul.w	r3, r0, r3
 8004a24:	440b      	add	r3, r1
 8004a26:	3318      	adds	r3, #24
 8004a28:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	4a5b      	ldr	r2, [pc, #364]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a2e:	2158      	movs	r1, #88	; 0x58
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	3310      	adds	r3, #16
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d103      	bne.n	8004a4c <stabilizationStart+0x80>
{
	rSensors.yaw =0;
 8004a44:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <stabilizationStart+0x1d4>)
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	4a53      	ldr	r2, [pc, #332]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a50:	2158      	movs	r1, #88	; 0x58
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	331c      	adds	r3, #28
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	4a4e      	ldr	r2, [pc, #312]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a64:	2158      	movs	r1, #88	; 0x58
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	4949      	ldr	r1, [pc, #292]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a76:	2058      	movs	r0, #88	; 0x58
 8004a78:	fb00 f303 	mul.w	r3, r0, r3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3320      	adds	r3, #32
 8004a80:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	4a45      	ldr	r2, [pc, #276]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a86:	2158      	movs	r1, #88	; 0x58
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3324      	adds	r3, #36	; 0x24
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	4a40      	ldr	r2, [pc, #256]	; (8004b9c <stabilizationStart+0x1d0>)
 8004a9a:	2158      	movs	r1, #88	; 0x58
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3328      	adds	r3, #40	; 0x28
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4a3b      	ldr	r2, [pc, #236]	; (8004b9c <stabilizationStart+0x1d0>)
 8004aae:	2158      	movs	r1, #88	; 0x58
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	332c      	adds	r3, #44	; 0x2c
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	4a36      	ldr	r2, [pc, #216]	; (8004b9c <stabilizationStart+0x1d0>)
 8004ac2:	2158      	movs	r1, #88	; 0x58
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	3330      	adds	r3, #48	; 0x30
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4a31      	ldr	r2, [pc, #196]	; (8004b9c <stabilizationStart+0x1d0>)
 8004ad6:	2158      	movs	r1, #88	; 0x58
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	3334      	adds	r3, #52	; 0x34
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <stabilizationStart+0x1d0>)
 8004aea:	2158      	movs	r1, #88	; 0x58
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	3338      	adds	r3, #56	; 0x38
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <stabilizationStart+0x1d0>)
 8004afe:	2158      	movs	r1, #88	; 0x58
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	333c      	adds	r3, #60	; 0x3c
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	4a22      	ldr	r2, [pc, #136]	; (8004b9c <stabilizationStart+0x1d0>)
 8004b12:	2158      	movs	r1, #88	; 0x58
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	3340      	adds	r3, #64	; 0x40
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	4a1d      	ldr	r2, [pc, #116]	; (8004b9c <stabilizationStart+0x1d0>)
 8004b26:	2158      	movs	r1, #88	; 0x58
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3344      	adds	r3, #68	; 0x44
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <stabilizationStart+0x1d0>)
 8004b3a:	2158      	movs	r1, #88	; 0x58
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3348      	adds	r3, #72	; 0x48
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <stabilizationStart+0x1d0>)
 8004b4e:	2158      	movs	r1, #88	; 0x58
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	334c      	adds	r3, #76	; 0x4c
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <stabilizationStart+0x1d0>)
 8004b62:	2158      	movs	r1, #88	; 0x58
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	3350      	adds	r3, #80	; 0x50
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8004b72:	f009 fc0d 	bl	800e390 <xTaskGetTickCount>
 8004b76:	ee07 0a90 	vmov	s15, r0
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b80:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <stabilizationStart+0x1d0>)
 8004b82:	2158      	movs	r1, #88	; 0x58
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3354      	adds	r3, #84	; 0x54
 8004b8c:	edc3 7a00 	vstr	s15, [r3]
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20001ea0 	.word	0x20001ea0
 8004b9c:	20002068 	.word	0x20002068
 8004ba0:	20001dd0 	.word	0x20001dd0

08004ba4 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8004ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	224c      	movs	r2, #76	; 0x4c
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	4ac7      	ldr	r2, [pc, #796]	; (8004ed8 <stabilizationUpdate+0x334>)
 8004bba:	4413      	add	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2258      	movs	r2, #88	; 0x58
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	4ac5      	ldr	r2, [pc, #788]	; (8004edc <stabilizationUpdate+0x338>)
 8004bc8:	4413      	add	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004bcc:	f009 fbe0 	bl	800e390 <xTaskGetTickCount>
 8004bd0:	ee07 0a90 	vmov	s15, r0
 8004bd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be6:	ee17 0a90 	vmov	r0, s15
 8004bea:	f7fc f9e3 	bl	8000fb4 <fromTickToMs>
 8004bee:	eeb0 7a40 	vmov.f32	s14, s0
 8004bf2:	eddf 6abb 	vldr	s13, [pc, #748]	; 8004ee0 <stabilizationUpdate+0x33c>
 8004bf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bfa:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004bfe:	f009 fbc7 	bl	800e390 <xTaskGetTickCount>
 8004c02:	ee07 0a90 	vmov	s15, r0
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3318      	adds	r3, #24
 8004c14:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	edd3 7a00 	vldr	s15, [r3]
 8004c1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c24:	d02b      	beq.n	8004c7e <stabilizationUpdate+0xda>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	edd3 6a00 	vldr	s13, [r3]
 8004c32:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c36:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004c3a:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004ef0 <stabilizationUpdate+0x34c>
 8004c3e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	ed93 6a00 	vldr	s12, [r3]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004c5c:	ed9f 6aa1 	vldr	s12, [pc, #644]	; 8004ee4 <stabilizationUpdate+0x340>
 8004c60:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004c7c:	e01f      	b.n	8004cbe <stabilizationUpdate+0x11a>
	}
	else {
		if(contour==STAB_PITCH)
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d110      	bne.n	8004ca6 <stabilizationUpdate+0x102>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	ed93 7a00 	vldr	s14, [r3]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c96:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004ee8 <stabilizationUpdate+0x344>
 8004c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004ca4:	e00b      	b.n	8004cbe <stabilizationUpdate+0x11a>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K;//*10;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	ed93 7a00 	vldr	s14, [r3]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	3310      	adds	r3, #16
 8004cca:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	edd3 7a00 	vldr	s15, [r3]
 8004cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	d061      	beq.n	8004da0 <stabilizationUpdate+0x1fc>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fb fbd9 	bl	8000498 <__aeabi_f2d>
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	460d      	mov	r5, r1
 8004cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cee:	eeb1 7a67 	vneg.f32	s14, s15
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	edd3 7a00 	vldr	s15, [r3]
 8004cf8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cfc:	ee16 0a90 	vmov	r0, s13
 8004d00:	f7fb fbca 	bl	8000498 <__aeabi_f2d>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	ec43 2b10 	vmov	d0, r2, r3
 8004d0c:	f00b fb08 	bl	8010320 <exp>
 8004d10:	ec53 2b10 	vmov	r2, r3, d0
 8004d14:	4620      	mov	r0, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7fb fc16 	bl	8000548 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4690      	mov	r8, r2
 8004d22:	4699      	mov	r9, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	ed93 7a06 	vldr	s14, [r3, #24]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d34:	ee17 0a90 	vmov	r0, s15
 8004d38:	f7fb fbae 	bl	8000498 <__aeabi_f2d>
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	460d      	mov	r5, r1
 8004d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d44:	eeb1 7a67 	vneg.f32	s14, s15
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	edd3 7a00 	vldr	s15, [r3]
 8004d4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d52:	ee16 0a90 	vmov	r0, s13
 8004d56:	f7fb fb9f 	bl	8000498 <__aeabi_f2d>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	ec43 2b10 	vmov	d0, r2, r3
 8004d62:	f00b fadd 	bl	8010320 <exp>
 8004d66:	ec53 2b10 	vmov	r2, r3, d0
 8004d6a:	f04f 0000 	mov.w	r0, #0
 8004d6e:	495f      	ldr	r1, [pc, #380]	; (8004eec <stabilizationUpdate+0x348>)
 8004d70:	f7fb fa32 	bl	80001d8 <__aeabi_dsub>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f7fb fbe4 	bl	8000548 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	f7fb fa28 	bl	80001dc <__adddf3>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	f7fb fe9a 	bl	8000acc <__aeabi_d2f>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d9e:	e00b      	b.n	8004db8 <stabilizationUpdate+0x214>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	ed93 7a00 	vldr	s14, [r3]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	edd3 6a00 	vldr	s13, [r3]
 8004dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004dee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004df2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	edd3 7a00 	vldr	s15, [r3]
 8004e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00f      	beq.n	8004e48 <stabilizationUpdate+0x2a4>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	ed93 7a08 	vldr	s14, [r3, #32]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	edd3 6a07 	vldr	s13, [r3, #28]
 8004e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	edc3 7a08 	vstr	s15, [r3, #32]
 8004e46:	e003      	b.n	8004e50 <stabilizationUpdate+0x2ac>
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
<<<<<<< Updated upstream
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	ed93 7a08 	vldr	s14, [r3, #32]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004eb6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8004ef8 <stabilizationUpdate+0x350>
 8004eba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec6:	dd19      	ble.n	8004efc <stabilizationUpdate+0x354>
    	state->pid_iValue = constants->pid.iMax*100;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004ece:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004ef8 <stabilizationUpdate+0x350>
 8004ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004edc:	e027      	b.n	8004f2e <stabilizationUpdate+0x386>
 8004ede:	bf00      	nop
 8004ee0:	20001eb0 	.word	0x20001eb0
 8004ee4:	20002060 	.word	0x20002060
 8004ee8:	447a0000 	.word	0x447a0000
 8004eec:	428c0000 	.word	0x428c0000
 8004ef0:	437a0000 	.word	0x437a0000
 8004ef4:	3ff00000 	.word	0x3ff00000
 8004ef8:	42c80000 	.word	0x42c80000
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004f08:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8004ef8 <stabilizationUpdate+0x350>
 8004f0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	d509      	bpl.n	8004f2e <stabilizationUpdate+0x386>
    	state->pid_iValue = constants->pid.iMin*100;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004f20:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8004ef8 <stabilizationUpdate+0x350>
 8004f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
=======
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	ed93 7a08 	vldr	s14, [r3, #32]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004eb0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004ef0 <stabilizationUpdate+0x34c>
 8004eb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	dd18      	ble.n	8004ef4 <stabilizationUpdate+0x350>
    	state->pid_iValue = constants->pid.iMax*100;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004ec8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004ef0 <stabilizationUpdate+0x34c>
 8004ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004ed6:	e026      	b.n	8004f26 <stabilizationUpdate+0x382>
 8004ed8:	20001ea0 	.word	0x20001ea0
 8004edc:	20002068 	.word	0x20002068
 8004ee0:	447a0000 	.word	0x447a0000
 8004ee4:	428c0000 	.word	0x428c0000
 8004ee8:	437a0000 	.word	0x437a0000
 8004eec:	3ff00000 	.word	0x3ff00000
 8004ef0:	42c80000 	.word	0x42c80000
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004f00:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8004ef0 <stabilizationUpdate+0x34c>
 8004f04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	d509      	bpl.n	8004f26 <stabilizationUpdate+0x382>
    	state->pid_iValue = constants->pid.iMin*100;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004f18:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8004ef0 <stabilizationUpdate+0x34c>
 8004f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
>>>>>>> Stashed changes
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
<<<<<<< Updated upstream
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	edd3 6a00 	vldr	s13, [r3]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	3320      	adds	r3, #32
 8004f8a:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	edd3 7a00 	vldr	s15, [r3]
 8004f92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9a:	d061      	beq.n	8005060 <stabilizationUpdate+0x4b8>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb fa79 	bl	8000498 <__aeabi_f2d>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460d      	mov	r5, r1
 8004faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fae:	eeb1 7a67 	vneg.f32	s14, s15
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	edd3 7a00 	vldr	s15, [r3]
 8004fb8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004fbc:	ee16 0a90 	vmov	r0, s13
 8004fc0:	f7fb fa6a 	bl	8000498 <__aeabi_f2d>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	ec43 2b10 	vmov	d0, r2, r3
 8004fcc:	f00b f9e0 	bl	8010390 <exp>
 8004fd0:	ec53 2b10 	vmov	r2, r3, d0
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	f7fb fab6 	bl	8000548 <__aeabi_dmul>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4690      	mov	r8, r2
 8004fe2:	4699      	mov	r9, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff4:	ee17 0a90 	vmov	r0, s15
 8004ff8:	f7fb fa4e 	bl	8000498 <__aeabi_f2d>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	460d      	mov	r5, r1
 8005000:	edd7 7a03 	vldr	s15, [r7, #12]
 8005004:	eeb1 7a67 	vneg.f32	s14, s15
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	edd3 7a00 	vldr	s15, [r3]
 800500e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005012:	ee16 0a90 	vmov	r0, s13
 8005016:	f7fb fa3f 	bl	8000498 <__aeabi_f2d>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	ec43 2b10 	vmov	d0, r2, r3
 8005022:	f00b f9b5 	bl	8010390 <exp>
 8005026:	ec53 2b10 	vmov	r2, r3, d0
 800502a:	f04f 0000 	mov.w	r0, #0
 800502e:	492a      	ldr	r1, [pc, #168]	; (80050d8 <stabilizationUpdate+0x530>)
 8005030:	f7fb f8d2 	bl	80001d8 <__aeabi_dsub>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4620      	mov	r0, r4
 800503a:	4629      	mov	r1, r5
 800503c:	f7fb fa84 	bl	8000548 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4640      	mov	r0, r8
 8005046:	4649      	mov	r1, r9
 8005048:	f7fb f8c8 	bl	80001dc <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4610      	mov	r0, r2
 8005052:	4619      	mov	r1, r3
 8005054:	f7fb fd3a 	bl	8000acc <__aeabi_d2f>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	64da      	str	r2, [r3, #76]	; 0x4c
 800505e:	e00a      	b.n	8005076 <stabilizationUpdate+0x4ce>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	edd3 7a01 	vldr	s15, [r3, #4]
 800506c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	649a      	str	r2, [r3, #72]	; 0x48

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800508a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	dd04      	ble.n	800509e <stabilizationUpdate+0x4f6>
    	state->thrustersFiltered = constants->pThrustersMax;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	64da      	str	r2, [r3, #76]	; 0x4c
 800509c:	e00e      	b.n	80050bc <stabilizationUpdate+0x514>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80050aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	d503      	bpl.n	80050bc <stabilizationUpdate+0x514>
    	state->thrustersFiltered = constants->pThrustersMin;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = -1*state->speedError;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80050c2:	eef1 7a67 	vneg.f32	s15, s15
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 80050cc:	bf00      	nop
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050d6:	bf00      	nop
 80050d8:	3ff00000 	.word	0x3ff00000

080050dc <HAL_MspInit>:
=======
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	edd3 6a00 	vldr	s13, [r3]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	3320      	adds	r3, #32
 8004f82:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	edd3 7a00 	vldr	s15, [r3]
 8004f8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f92:	d061      	beq.n	8005058 <stabilizationUpdate+0x4b4>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb fa7d 	bl	8000498 <__aeabi_f2d>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fa6:	eeb1 7a67 	vneg.f32	s14, s15
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	edd3 7a00 	vldr	s15, [r3]
 8004fb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004fb4:	ee16 0a90 	vmov	r0, s13
 8004fb8:	f7fb fa6e 	bl	8000498 <__aeabi_f2d>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	ec43 2b10 	vmov	d0, r2, r3
 8004fc4:	f00b f9ac 	bl	8010320 <exp>
 8004fc8:	ec53 2b10 	vmov	r2, r3, d0
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f7fb faba 	bl	8000548 <__aeabi_dmul>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4690      	mov	r8, r2
 8004fda:	4699      	mov	r9, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fec:	ee17 0a90 	vmov	r0, s15
 8004ff0:	f7fb fa52 	bl	8000498 <__aeabi_f2d>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ffc:	eeb1 7a67 	vneg.f32	s14, s15
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	edd3 7a00 	vldr	s15, [r3]
 8005006:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800500a:	ee16 0a90 	vmov	r0, s13
 800500e:	f7fb fa43 	bl	8000498 <__aeabi_f2d>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	ec43 2b10 	vmov	d0, r2, r3
 800501a:	f00b f981 	bl	8010320 <exp>
 800501e:	ec53 2b10 	vmov	r2, r3, d0
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	492d      	ldr	r1, [pc, #180]	; (80050dc <stabilizationUpdate+0x538>)
 8005028:	f7fb f8d6 	bl	80001d8 <__aeabi_dsub>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4620      	mov	r0, r4
 8005032:	4629      	mov	r1, r5
 8005034:	f7fb fa88 	bl	8000548 <__aeabi_dmul>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4640      	mov	r0, r8
 800503e:	4649      	mov	r1, r9
 8005040:	f7fb f8cc 	bl	80001dc <__adddf3>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	f7fb fd3e 	bl	8000acc <__aeabi_d2f>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	64da      	str	r2, [r3, #76]	; 0x4c
 8005056:	e00a      	b.n	800506e <stabilizationUpdate+0x4ca>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	edd3 7a01 	vldr	s15, [r3, #4]
 8005064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	649a      	str	r2, [r3, #72]	; 0x48

    state->thrustersFiltered = constants->pThrustersCast*state->speedError;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

    if(state->thrustersFiltered > constants->pThrustersMax) {
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a0:	dd04      	ble.n	80050ac <stabilizationUpdate+0x508>
    	state->thrustersFiltered = constants->pThrustersMax;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80050aa:	e00e      	b.n	80050ca <stabilizationUpdate+0x526>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80050b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c0:	d503      	bpl.n	80050ca <stabilizationUpdate+0x526>
    	state->thrustersFiltered = constants->pThrustersMin;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = state->thrustersFiltered;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050d2:	bf00      	nop
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050dc:	3ff00000 	.word	0x3ff00000

080050e0 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
=======
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_MspInit+0x4c>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	4a10      	ldr	r2, [pc, #64]	; (8005128 <HAL_MspInit+0x4c>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6193      	str	r3, [r2, #24]
 80050ee:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <HAL_MspInit+0x4c>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_MspInit+0x4c>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <HAL_MspInit+0x4c>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005104:	61d3      	str	r3, [r2, #28]
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_MspInit+0x4c>)
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
=======
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <HAL_MspInit+0x4c>)
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	4a10      	ldr	r2, [pc, #64]	; (800512c <HAL_MspInit+0x4c>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	6193      	str	r3, [r2, #24]
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <HAL_MspInit+0x4c>)
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <HAL_MspInit+0x4c>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	4a0a      	ldr	r2, [pc, #40]	; (800512c <HAL_MspInit+0x4c>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005108:	61d3      	str	r3, [r2, #28]
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_MspInit+0x4c>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< Updated upstream
 8005112:	2200      	movs	r2, #0
 8005114:	210f      	movs	r1, #15
 8005116:	f06f 0001 	mvn.w	r0, #1
 800511a:	f000 ff5d 	bl	8005fd8 <HAL_NVIC_SetPriority>
=======
 8005116:	2200      	movs	r2, #0
 8005118:	210f      	movs	r1, #15
 800511a:	f06f 0001 	mvn.w	r0, #1
 800511e:	f000 ff25 	bl	8005f6c <HAL_NVIC_SetPriority>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000

0800512c <HAL_InitTick>:
=======
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000

08005130 <HAL_InitTick>:
>>>>>>> Stashed changes
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	; 0x30
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 800513c:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <HAL_InitTick+0xcc>)
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <HAL_InitTick+0xcc>)
 8005142:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005146:	6193      	str	r3, [r2, #24]
 8005148:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <HAL_InitTick+0xcc>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005154:	f107 020c 	add.w	r2, r7, #12
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f005 f8d2 	bl	800a308 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005164:	f005 f8ae 	bl	800a2c4 <HAL_RCC_GetPCLK2Freq>
 8005168:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	4a23      	ldr	r2, [pc, #140]	; (80051fc <HAL_InitTick+0xd0>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0c9b      	lsrs	r3, r3, #18
 8005174:	3b01      	subs	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005178:	4b21      	ldr	r3, [pc, #132]	; (8005200 <HAL_InitTick+0xd4>)
 800517a:	4a22      	ldr	r2, [pc, #136]	; (8005204 <HAL_InitTick+0xd8>)
 800517c:	601a      	str	r2, [r3, #0]
=======
 8005140:	4b2e      	ldr	r3, [pc, #184]	; (80051fc <HAL_InitTick+0xcc>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <HAL_InitTick+0xcc>)
 8005146:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800514a:	6193      	str	r3, [r2, #24]
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_InitTick+0xcc>)
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005158:	f107 020c 	add.w	r2, r7, #12
 800515c:	f107 0310 	add.w	r3, r7, #16
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f005 f89a 	bl	800a29c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005168:	f005 f876 	bl	800a258 <HAL_RCC_GetPCLK2Freq>
 800516c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_InitTick+0xd0>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	0c9b      	lsrs	r3, r3, #18
 8005178:	3b01      	subs	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800517c:	4b21      	ldr	r3, [pc, #132]	; (8005204 <HAL_InitTick+0xd4>)
 800517e:	4a22      	ldr	r2, [pc, #136]	; (8005208 <HAL_InitTick+0xd8>)
 8005180:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< Updated upstream
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_InitTick+0xd4>)
 8005180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005184:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005186:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <HAL_InitTick+0xd4>)
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800518c:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <HAL_InitTick+0xd4>)
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_InitTick+0xd4>)
 8005194:	2200      	movs	r2, #0
 8005196:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005198:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_InitTick+0xd4>)
 800519a:	2200      	movs	r2, #0
 800519c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800519e:	4818      	ldr	r0, [pc, #96]	; (8005200 <HAL_InitTick+0xd4>)
 80051a0:	f005 fa94 	bl	800a6cc <HAL_TIM_Base_Init>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80051aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11b      	bne.n	80051ea <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80051b2:	4813      	ldr	r0, [pc, #76]	; (8005200 <HAL_InitTick+0xd4>)
 80051b4:	f005 fae2 	bl	800a77c <HAL_TIM_Base_Start_IT>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80051be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d111      	bne.n	80051ea <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80051c6:	2019      	movs	r0, #25
 80051c8:	f000 ff22 	bl	8006010 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	d808      	bhi.n	80051e4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80051d2:	2200      	movs	r2, #0
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	2019      	movs	r0, #25
 80051d8:	f000 fefe 	bl	8005fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <HAL_InitTick+0xdc>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e002      	b.n	80051ea <HAL_InitTick+0xbe>
=======
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <HAL_InitTick+0xd4>)
 8005184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005188:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_InitTick+0xd4>)
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005190:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <HAL_InitTick+0xd4>)
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <HAL_InitTick+0xd4>)
 8005198:	2200      	movs	r2, #0
 800519a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_InitTick+0xd4>)
 800519e:	2200      	movs	r2, #0
 80051a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80051a2:	4818      	ldr	r0, [pc, #96]	; (8005204 <HAL_InitTick+0xd4>)
 80051a4:	f005 fa5c 	bl	800a660 <HAL_TIM_Base_Init>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80051ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d11b      	bne.n	80051ee <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80051b6:	4813      	ldr	r0, [pc, #76]	; (8005204 <HAL_InitTick+0xd4>)
 80051b8:	f005 faaa 	bl	800a710 <HAL_TIM_Base_Start_IT>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80051c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d111      	bne.n	80051ee <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80051ca:	2019      	movs	r0, #25
 80051cc:	f000 feea 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	d808      	bhi.n	80051e8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80051d6:	2200      	movs	r2, #0
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	2019      	movs	r0, #25
 80051dc:	f000 fec6 	bl	8005f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <HAL_InitTick+0xdc>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e002      	b.n	80051ee <HAL_InitTick+0xbe>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> Stashed changes
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< Updated upstream
 80051ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3730      	adds	r7, #48	; 0x30
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	431bde83 	.word	0x431bde83
 8005200:	2000242c 	.word	0x2000242c
 8005204:	40012c00 	.word	0x40012c00
 8005208:	200000b8 	.word	0x200000b8

0800520c <NMI_Handler>:
=======
 80051ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3730      	adds	r7, #48	; 0x30
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
 8005200:	431bde83 	.word	0x431bde83
 8005204:	200025d4 	.word	0x200025d4
 8005208:	40012c00 	.word	0x40012c00
 800520c:	200000bc 	.word	0x200000bc

08005210 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
=======
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8005210:	e7fe      	b.n	8005210 <NMI_Handler+0x4>

08005212 <HardFault_Handler>:
=======
 8005214:	e7fe      	b.n	8005214 <NMI_Handler+0x4>

08005216 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8005212:	b480      	push	{r7}
 8005214:	af00      	add	r7, sp, #0
=======
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8005216:	e7fe      	b.n	8005216 <HardFault_Handler+0x4>

08005218 <MemManage_Handler>:
=======
 800521a:	e7fe      	b.n	800521a <HardFault_Handler+0x4>

0800521c <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
=======
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800521c:	e7fe      	b.n	800521c <MemManage_Handler+0x4>

0800521e <BusFault_Handler>:
=======
 8005220:	e7fe      	b.n	8005220 <MemManage_Handler+0x4>

08005222 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0
=======
 8005222:	b480      	push	{r7}
 8005224:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8005222:	e7fe      	b.n	8005222 <BusFault_Handler+0x4>

08005224 <UsageFault_Handler>:
=======
 8005226:	e7fe      	b.n	8005226 <BusFault_Handler+0x4>

08005228 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
=======
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8005228:	e7fe      	b.n	8005228 <UsageFault_Handler+0x4>

0800522a <DebugMon_Handler>:
=======
 800522c:	e7fe      	b.n	800522c <UsageFault_Handler+0x4>

0800522e <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0
=======
 800522e:	b480      	push	{r7}
 8005230:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 800522e:	bf00      	nop
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <DMA1_Channel4_IRQHandler>:
=======
 8005232:	bf00      	nop
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <DMA1_Channel4_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
<<<<<<< Updated upstream
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
=======
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
<<<<<<< Updated upstream
 800523c:	4802      	ldr	r0, [pc, #8]	; (8005248 <DMA1_Channel4_IRQHandler+0x10>)
 800523e:	f001 f812 	bl	8006266 <HAL_DMA_IRQHandler>
=======
 8005240:	4802      	ldr	r0, [pc, #8]	; (800524c <DMA1_Channel4_IRQHandler+0x10>)
 8005242:	f000 ffda 	bl	80061fa <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
<<<<<<< Updated upstream
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200026e4 	.word	0x200026e4

0800524c <DMA1_Channel5_IRQHandler>:
=======
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20002890 	.word	0x20002890

08005250 <DMA1_Channel5_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
<<<<<<< Updated upstream
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
=======
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
<<<<<<< Updated upstream
 8005250:	4802      	ldr	r0, [pc, #8]	; (800525c <DMA1_Channel5_IRQHandler+0x10>)
 8005252:	f001 f808 	bl	8006266 <HAL_DMA_IRQHandler>
=======
 8005254:	4802      	ldr	r0, [pc, #8]	; (8005260 <DMA1_Channel5_IRQHandler+0x10>)
 8005256:	f000 ffd0 	bl	80061fa <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
<<<<<<< Updated upstream
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20002728 	.word	0x20002728

08005260 <DMA1_Channel6_IRQHandler>:
=======
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	200028d4 	.word	0x200028d4

08005264 <DMA1_Channel6_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
<<<<<<< Updated upstream
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
=======
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
<<<<<<< Updated upstream
 8005264:	4802      	ldr	r0, [pc, #8]	; (8005270 <DMA1_Channel6_IRQHandler+0x10>)
 8005266:	f000 fffe 	bl	8006266 <HAL_DMA_IRQHandler>
=======
 8005268:	4802      	ldr	r0, [pc, #8]	; (8005274 <DMA1_Channel6_IRQHandler+0x10>)
 800526a:	f000 ffc6 	bl	80061fa <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
<<<<<<< Updated upstream
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	2000276c 	.word	0x2000276c

08005274 <DMA1_Channel7_IRQHandler>:
=======
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20002918 	.word	0x20002918

08005278 <DMA1_Channel7_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
<<<<<<< Updated upstream
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
=======
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
<<<<<<< Updated upstream
 8005278:	4802      	ldr	r0, [pc, #8]	; (8005284 <DMA1_Channel7_IRQHandler+0x10>)
 800527a:	f000 fff4 	bl	8006266 <HAL_DMA_IRQHandler>
=======
 800527c:	4802      	ldr	r0, [pc, #8]	; (8005288 <DMA1_Channel7_IRQHandler+0x10>)
 800527e:	f000 ffbc 	bl	80061fa <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
<<<<<<< Updated upstream
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200027b0 	.word	0x200027b0

08005288 <TIM1_UP_TIM16_IRQHandler>:
=======
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	2000295c 	.word	0x2000295c

0800528c <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< Updated upstream
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
=======
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< Updated upstream
 800528c:	4802      	ldr	r0, [pc, #8]	; (8005298 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800528e:	f005 fadf 	bl	800a850 <HAL_TIM_IRQHandler>
=======
 8005290:	4802      	ldr	r0, [pc, #8]	; (800529c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005292:	f005 faa7 	bl	800a7e4 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< Updated upstream
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2000242c 	.word	0x2000242c

0800529c <I2C1_EV_IRQHandler>:
=======
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200025d4 	.word	0x200025d4

080052a0 <I2C1_EV_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
<<<<<<< Updated upstream
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
=======
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
<<<<<<< Updated upstream
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <I2C1_EV_IRQHandler+0x10>)
 80052a2:	f001 ffd9 	bl	8007258 <HAL_I2C_EV_IRQHandler>
=======
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <I2C1_EV_IRQHandler+0x10>)
 80052a6:	f001 ffa1 	bl	80071ec <HAL_I2C_EV_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
<<<<<<< Updated upstream
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	200023d8 	.word	0x200023d8

080052b0 <USART1_IRQHandler>:
=======
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200023e0 	.word	0x200023e0

080052b4 <USART1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
<<<<<<< Updated upstream
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
=======
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< Updated upstream
 80052b4:	4802      	ldr	r0, [pc, #8]	; (80052c0 <USART1_IRQHandler+0x10>)
 80052b6:	f006 f831 	bl	800b31c <HAL_UART_IRQHandler>
=======
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <USART1_IRQHandler+0x10>)
 80052ba:	f005 fff9 	bl	800b2b0 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< Updated upstream
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	2000254c 	.word	0x2000254c

080052c4 <USART2_IRQHandler>:
=======
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200026f8 	.word	0x200026f8

080052c8 <USART2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
<<<<<<< Updated upstream
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
=======
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< Updated upstream
 80052c8:	4802      	ldr	r0, [pc, #8]	; (80052d4 <USART2_IRQHandler+0x10>)
 80052ca:	f006 f827 	bl	800b31c <HAL_UART_IRQHandler>
=======
 80052cc:	4802      	ldr	r0, [pc, #8]	; (80052d8 <USART2_IRQHandler+0x10>)
 80052ce:	f005 ffef 	bl	800b2b0 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< Updated upstream
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200025d4 	.word	0x200025d4

080052d8 <USART3_IRQHandler>:
=======
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20002780 	.word	0x20002780

080052dc <USART3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
<<<<<<< Updated upstream
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
=======
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< Updated upstream
 80052dc:	4802      	ldr	r0, [pc, #8]	; (80052e8 <USART3_IRQHandler+0x10>)
 80052de:	f006 f81d 	bl	800b31c <HAL_UART_IRQHandler>
=======
 80052e0:	4802      	ldr	r0, [pc, #8]	; (80052ec <USART3_IRQHandler+0x10>)
 80052e2:	f005 ffe5 	bl	800b2b0 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< Updated upstream
 80052e2:	bf00      	nop
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	2000265c 	.word	0x2000265c

080052ec <UART4_IRQHandler>:
=======
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20002808 	.word	0x20002808

080052f0 <UART4_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
<<<<<<< Updated upstream
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
=======
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
<<<<<<< Updated upstream
 80052f0:	4802      	ldr	r0, [pc, #8]	; (80052fc <UART4_IRQHandler+0x10>)
 80052f2:	f006 f813 	bl	800b31c <HAL_UART_IRQHandler>
=======
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <UART4_IRQHandler+0x10>)
 80052f6:	f005 ffdb 	bl	800b2b0 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
<<<<<<< Updated upstream
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200024c4 	.word	0x200024c4

08005300 <SystemInit>:
=======
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20002670 	.word	0x20002670

08005304 <SystemInit>:
>>>>>>> Stashed changes
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <SystemInit+0x20>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	4a05      	ldr	r2, [pc, #20]	; (8005320 <SystemInit+0x20>)
 800530c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <SystemInit+0x20>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	4a05      	ldr	r2, [pc, #20]	; (8005324 <SystemInit+0x20>)
 8005310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <thrustersInit>:
=======
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	e000ed00 	.word	0xe000ed00

08005328 <thrustersInit>:
>>>>>>> Stashed changes
    {0.0, 0.0, 1.0, 0.0, -1.0},
    {1.0, 1.0, 0.0, -1.0, 0.0}
};

void thrustersInit()
{
<<<<<<< Updated upstream
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
  rThrusters[FDR].address = 1; //Forward Left
 800532a:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <thrustersInit+0xb8>)
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 8005330:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <thrustersInit+0xb8>)
 8005332:	2202      	movs	r2, #2
 8005334:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 8005336:	4b29      	ldr	r3, [pc, #164]	; (80053dc <thrustersInit+0xb8>)
 8005338:	2203      	movs	r2, #3
 800533a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 800533e:	4b27      	ldr	r3, [pc, #156]	; (80053dc <thrustersInit+0xb8>)
 8005340:	2204      	movs	r2, #4
 8005342:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 8005346:	4b25      	ldr	r3, [pc, #148]	; (80053dc <thrustersInit+0xb8>)
 8005348:	2205      	movs	r2, #5
 800534a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <thrustersInit+0xb8>)
 8005350:	2206      	movs	r2, #6
 8005352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
=======
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
  rThrusters[FDR].address = 1; //Forward Left
 800532e:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <thrustersInit+0xb8>)
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <thrustersInit+0xb8>)
 8005336:	2202      	movs	r2, #2
 8005338:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 800533a:	4b29      	ldr	r3, [pc, #164]	; (80053e0 <thrustersInit+0xb8>)
 800533c:	2203      	movs	r2, #3
 800533e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 8005342:	4b27      	ldr	r3, [pc, #156]	; (80053e0 <thrustersInit+0xb8>)
 8005344:	2204      	movs	r2, #4
 8005346:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 800534a:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <thrustersInit+0xb8>)
 800534c:	2205      	movs	r2, #5
 800534e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 8005352:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <thrustersInit+0xb8>)
 8005354:	2206      	movs	r2, #6
 8005356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes
//  rThrusters[BUR].address = 7; //Back Up Right
//  rThrusters[BUL].address = 8; //Back Up Left

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
<<<<<<< Updated upstream
 8005356:	2300      	movs	r3, #0
 8005358:	71fb      	strb	r3, [r7, #7]
 800535a:	e034      	b.n	80053c6 <thrustersInit+0xa2>
    rThrusters[i].desiredSpeed = 0;
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	491f      	ldr	r1, [pc, #124]	; (80053dc <thrustersInit+0xb8>)
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	3302      	adds	r3, #2
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 8005370:	79fa      	ldrb	r2, [r7, #7]
 8005372:	491a      	ldr	r1, [pc, #104]	; (80053dc <thrustersInit+0xb8>)
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	330c      	adds	r3, #12
 8005380:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <thrustersInit+0xbc>)
 8005382:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 8005384:	79fa      	ldrb	r2, [r7, #7]
 8005386:	4915      	ldr	r1, [pc, #84]	; (80053dc <thrustersInit+0xb8>)
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	440b      	add	r3, r1
 8005392:	3310      	adds	r3, #16
 8005394:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <thrustersInit+0xbc>)
 8005396:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 8005398:	79fa      	ldrb	r2, [r7, #7]
 800539a:	4910      	ldr	r1, [pc, #64]	; (80053dc <thrustersInit+0xb8>)
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	3314      	adds	r3, #20
 80053a8:	227f      	movs	r2, #127	; 0x7f
 80053aa:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 80053ac:	79fa      	ldrb	r2, [r7, #7]
 80053ae:	490b      	ldr	r1, [pc, #44]	; (80053dc <thrustersInit+0xb8>)
 80053b0:	4613      	mov	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	3315      	adds	r3, #21
 80053bc:	227f      	movs	r2, #127	; 0x7f
 80053be:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	3301      	adds	r3, #1
 80053c4:	71fb      	strb	r3, [r7, #7]
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d9c7      	bls.n	800535c <thrustersInit+0x38>
  }

}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20001d40 	.word	0x20001d40
 80053e0:	3f333333 	.word	0x3f333333

080053e4 <resetThrusters>:

void resetThrusters()
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
  rJoySpeed.depth = 0;
 80053ea:	4b19      	ldr	r3, [pc, #100]	; (8005450 <resetThrusters+0x6c>)
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	609a      	str	r2, [r3, #8]
  rJoySpeed.lag = 0;
 80053f2:	4b17      	ldr	r3, [pc, #92]	; (8005450 <resetThrusters+0x6c>)
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
  rJoySpeed.march = 0;
 80053fa:	4b15      	ldr	r3, [pc, #84]	; (8005450 <resetThrusters+0x6c>)
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
  rJoySpeed.pitch = 0;
 8005402:	4b13      	ldr	r3, [pc, #76]	; (8005450 <resetThrusters+0x6c>)
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  rJoySpeed.roll = 0;
 800540a:	4b11      	ldr	r3, [pc, #68]	; (8005450 <resetThrusters+0x6c>)
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	60da      	str	r2, [r3, #12]
  rJoySpeed.yaw = 0;
 8005412:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <resetThrusters+0x6c>)
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	615a      	str	r2, [r3, #20]

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800541a:	2300      	movs	r3, #0
 800541c:	71fb      	strb	r3, [r7, #7]
 800541e:	e00c      	b.n	800543a <resetThrusters+0x56>
    rThrusters[i].desiredSpeed = 0;
 8005420:	79fa      	ldrb	r2, [r7, #7]
 8005422:	490c      	ldr	r1, [pc, #48]	; (8005454 <resetThrusters+0x70>)
 8005424:	4613      	mov	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	3302      	adds	r3, #2
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	3301      	adds	r3, #1
 8005438:	71fb      	strb	r3, [r7, #7]
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b05      	cmp	r3, #5
 800543e:	d9ef      	bls.n	8005420 <resetThrusters+0x3c>
=======
 800535a:	2300      	movs	r3, #0
 800535c:	71fb      	strb	r3, [r7, #7]
 800535e:	e034      	b.n	80053ca <thrustersInit+0xa2>
    rThrusters[i].desiredSpeed = 0;
 8005360:	79fa      	ldrb	r2, [r7, #7]
 8005362:	491f      	ldr	r1, [pc, #124]	; (80053e0 <thrustersInit+0xb8>)
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	440b      	add	r3, r1
 800536e:	3302      	adds	r3, #2
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 8005374:	79fa      	ldrb	r2, [r7, #7]
 8005376:	491a      	ldr	r1, [pc, #104]	; (80053e0 <thrustersInit+0xb8>)
 8005378:	4613      	mov	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4413      	add	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	440b      	add	r3, r1
 8005382:	330c      	adds	r3, #12
 8005384:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <thrustersInit+0xbc>)
 8005386:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 8005388:	79fa      	ldrb	r2, [r7, #7]
 800538a:	4915      	ldr	r1, [pc, #84]	; (80053e0 <thrustersInit+0xb8>)
 800538c:	4613      	mov	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	440b      	add	r3, r1
 8005396:	3310      	adds	r3, #16
 8005398:	4a12      	ldr	r2, [pc, #72]	; (80053e4 <thrustersInit+0xbc>)
 800539a:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 800539c:	79fa      	ldrb	r2, [r7, #7]
 800539e:	4910      	ldr	r1, [pc, #64]	; (80053e0 <thrustersInit+0xb8>)
 80053a0:	4613      	mov	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4413      	add	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	440b      	add	r3, r1
 80053aa:	3314      	adds	r3, #20
 80053ac:	227f      	movs	r2, #127	; 0x7f
 80053ae:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 80053b0:	79fa      	ldrb	r2, [r7, #7]
 80053b2:	490b      	ldr	r1, [pc, #44]	; (80053e0 <thrustersInit+0xb8>)
 80053b4:	4613      	mov	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	440b      	add	r3, r1
 80053be:	3315      	adds	r3, #21
 80053c0:	227f      	movs	r2, #127	; 0x7f
 80053c2:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	3301      	adds	r3, #1
 80053c8:	71fb      	strb	r3, [r7, #7]
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	d9c7      	bls.n	8005360 <thrustersInit+0x38>
  }

}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20001d40 	.word	0x20001d40
 80053e4:	3f333333 	.word	0x3f333333

080053e8 <fillThrustersRequest>:
>>>>>>> Stashed changes
  }

}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20001e40 	.word	0x20001e40
 8005454:	20001d40 	.word	0x20001d40

08005458 <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
<<<<<<< Updated upstream
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 8005464:	23aa      	movs	r3, #170	; 0xaa
 8005466:	733b      	strb	r3, [r7, #12]
    res.type = 0x01;
 8005468:	2301      	movs	r3, #1
 800546a:	737b      	strb	r3, [r7, #13]
    res.address = 0xAF;
 800546c:	23af      	movs	r3, #175	; 0xaf
 800546e:	73bb      	strb	r3, [r7, #14]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e04c      	b.n	8005510 <fillThrustersRequest+0xb8>
    	int16_t velocity = rThrusters[i].desiredSpeed;
 8005476:	4931      	ldr	r1, [pc, #196]	; (800553c <fillThrustersRequest+0xe4>)
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	440b      	add	r3, r1
 8005484:	3302      	adds	r3, #2
 8005486:	f993 3000 	ldrsb.w	r3, [r3]
 800548a:	837b      	strh	r3, [r7, #26]
    	if(rThrusters[i].inverse) {
//    		velocity *= -1;
    	}

    	// Multiplier constants
    	if(velocity > 0) {
 800548c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005490:	2b00      	cmp	r3, #0
 8005492:	dd17      	ble.n	80054c4 <fillThrustersRequest+0x6c>
    		velocity = (int16_t) ( (float) (velocity) * rThrusters[i].kForward);
 8005494:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054a0:	4926      	ldr	r1, [pc, #152]	; (800553c <fillThrustersRequest+0xe4>)
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	440b      	add	r3, r1
 80054ae:	330c      	adds	r3, #12
 80054b0:	edd3 7a00 	vldr	s15, [r3]
 80054b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054bc:	ee17 3a90 	vmov	r3, s15
 80054c0:	837b      	strh	r3, [r7, #26]
 80054c2:	e01a      	b.n	80054fa <fillThrustersRequest+0xa2>
    	}
    	else if(velocity < 0) {
 80054c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da16      	bge.n	80054fa <fillThrustersRequest+0xa2>
    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
 80054cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054d8:	4918      	ldr	r1, [pc, #96]	; (800553c <fillThrustersRequest+0xe4>)
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	4613      	mov	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	440b      	add	r3, r1
 80054e6:	3310      	adds	r3, #16
 80054e8:	edd3 7a00 	vldr	s15, [r3]
 80054ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f4:	ee17 3a90 	vmov	r3, s15
 80054f8:	837b      	strh	r3, [r7, #26]
    	}

    	res.velocity[i] = velocity;
 80054fa:	8b7b      	ldrh	r3, [r7, #26]
 80054fc:	b259      	sxtb	r1, r3
 80054fe:	f107 020f 	add.w	r2, r7, #15
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	460a      	mov	r2, r1
 8005508:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b05      	cmp	r3, #5
 8005514:	ddaf      	ble.n	8005476 <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <fillThrustersRequest+0xe8>)
 8005518:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800551c:	75fb      	strb	r3, [r7, #23]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 800551e:	f107 030c 	add.w	r3, r7, #12
 8005522:	220b      	movs	r2, #11
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f00a feca 	bl	80102c0 <memcpy>
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 800552c:	210b      	movs	r1, #11
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fa96 	bl	8001a60 <AddChecksumm8bVma>
}
 8005534:	bf00      	nop
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20001d40 	.word	0x20001d40
 8005540:	20001e70 	.word	0x20001e70

08005544 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8005550:	2109      	movs	r1, #9
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fc fa57 	bl	8001a06 <IsChecksumm8bCorrectVma>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01f      	beq.n	800559e <fillThrustersResponse+0x5a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01b      	beq.n	800559e <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	f107 030c 	add.w	r3, r7, #12
 800556c:	6810      	ldr	r0, [r2, #0]
 800556e:	6851      	ldr	r1, [r2, #4]
 8005570:	c303      	stmia	r3!, {r0, r1}
 8005572:	7a12      	ldrb	r2, [r2, #8]
 8005574:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	8a38      	ldrh	r0, [r7, #16]
 800557a:	490e      	ldr	r1, [pc, #56]	; (80055b4 <fillThrustersResponse+0x70>)
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	3304      	adds	r3, #4
 8005588:	4602      	mov	r2, r0
 800558a:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <fillThrustersResponse+0x74>)
 800558e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005592:	3301      	adds	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <fillThrustersResponse+0x74>)
 8005598:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 800559c:	e005      	b.n	80055aa <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <fillThrustersResponse+0x74>)
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	3301      	adds	r3, #1
 80055a4:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <fillThrustersResponse+0x74>)
 80055a6:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20001d40 	.word	0x20001d40
 80055b8:	20000194 	.word	0x20000194

080055bc <formThrustVectors>:

void formThrustVectors()
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08e      	sub	sp, #56	; 0x38
 80055c0:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055c8:	e00d      	b.n	80055e6 <formThrustVectors+0x2a>
    velocity[i] = 0;
 80055ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	3338      	adds	r3, #56	; 0x38
 80055d2:	443b      	add	r3, r7
 80055d4:	3b34      	subs	r3, #52	; 0x34
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80055dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055e0:	3301      	adds	r3, #1
 80055e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d9ed      	bls.n	80055ca <formThrustVectors+0xe>
  float Uz;
  float Ugamma;
  float Uteta;
  float Upsi;

  Ux = rJoySpeed.march;
 80055ee:	4b5f      	ldr	r3, [pc, #380]	; (800576c <formThrustVectors+0x1b0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
  Uy = rJoySpeed.lag;
 80055f4:	4b5d      	ldr	r3, [pc, #372]	; (800576c <formThrustVectors+0x1b0>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Uz = input_value;//rStabState[STAB_DEPTH].outputSignal;
 80055fa:	4b5d      	ldr	r3, [pc, #372]	; (8005770 <formThrustVectors+0x1b4>)
 80055fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005608:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  Upsi = rStabState[STAB_YAW].outputSignal;
 800560c:	4b59      	ldr	r3, [pc, #356]	; (8005774 <formThrustVectors+0x1b8>)
 800560e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
  Ugamma = rStabState[STAB_ROLL].outputSignal;
 8005614:	4b57      	ldr	r3, [pc, #348]	; (8005774 <formThrustVectors+0x1b8>)
 8005616:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800561a:	623b      	str	r3, [r7, #32]
  Uteta = rJoySpeed.pitch;
 800561c:	4b53      	ldr	r3, [pc, #332]	; (800576c <formThrustVectors+0x1b0>)
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	61fb      	str	r3, [r7, #28]

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8005622:	2300      	movs	r3, #0
 8005624:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005628:	e095      	b.n	8005756 <formThrustVectors+0x19a>
  {
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 800562a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800562e:	4952      	ldr	r1, [pc, #328]	; (8005778 <formThrustVectors+0x1bc>)
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	ed93 7a00 	vldr	s14, [r3]
 800563e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005646:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800564a:	494b      	ldr	r1, [pc, #300]	; (8005778 <formThrustVectors+0x1bc>)
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3304      	adds	r3, #4
 8005658:	edd3 6a00 	vldr	s13, [r3]
 800565c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005668:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800566c:	4942      	ldr	r1, [pc, #264]	; (8005778 <formThrustVectors+0x1bc>)
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	3308      	adds	r3, #8
 800567a:	edd3 6a00 	vldr	s13, [r3]
 800567e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005686:	ee37 7a27 	vadd.f32	s14, s14, s15
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 800568a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800568e:	493a      	ldr	r1, [pc, #232]	; (8005778 <formThrustVectors+0x1bc>)
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	330c      	adds	r3, #12
 800569c:	edd3 6a00 	vldr	s13, [r3]
 80056a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80056a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80056b0:	4931      	ldr	r1, [pc, #196]	; (8005778 <formThrustVectors+0x1bc>)
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	3310      	adds	r3, #16
 80056be:	edd3 6a00 	vldr	s13, [r3]
 80056c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80056c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056d2:	4929      	ldr	r1, [pc, #164]	; (8005778 <formThrustVectors+0x1bc>)
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	edd3 6a00 	vldr	s13, [r3]
 80056e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80056e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056f0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80056f4:	4920      	ldr	r1, [pc, #128]	; (8005778 <formThrustVectors+0x1bc>)
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	3318      	adds	r3, #24
 8005702:	edd3 7a00 	vldr	s15, [r3]
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 8005706:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
        + KVMA[i][3]*Ugamma + KVMA[i][4]*Uteta + KVMA[i][5]*Upsi)*KVMA[i][6];
 800570a:	ee67 7a27 	vmul.f32	s15, s14, s15
    velocity[i] = (KVMA[i][0]*Ux + KVMA[i][1]*Uy + KVMA[i][2]*Uz
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	3338      	adds	r3, #56	; 0x38
 8005712:	443b      	add	r3, r7
 8005714:	3b34      	subs	r3, #52	; 0x34
 8005716:	edc3 7a00 	vstr	s15, [r3]
    rThrusters[i].desiredSpeed = resizeFloatToUint8(velocity[i]);
 800571a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	3338      	adds	r3, #56	; 0x38
 8005722:	443b      	add	r3, r7
 8005724:	3b34      	subs	r3, #52	; 0x34
 8005726:	edd3 7a00 	vldr	s15, [r3]
 800572a:	eeb0 0a67 	vmov.f32	s0, s15
 800572e:	f000 f827 	bl	8005780 <resizeFloatToUint8>
 8005732:	4603      	mov	r3, r0
 8005734:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005738:	b258      	sxtb	r0, r3
 800573a:	4910      	ldr	r1, [pc, #64]	; (800577c <formThrustVectors+0x1c0>)
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	440b      	add	r3, r1
 8005746:	3302      	adds	r3, #2
 8005748:	4602      	mov	r2, r0
 800574a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 800574c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005750:	3301      	adds	r3, #1
 8005752:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005756:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800575a:	2b05      	cmp	r3, #5
 800575c:	f67f af65 	bls.w	800562a <formThrustVectors+0x6e>
  }

}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	3738      	adds	r7, #56	; 0x38
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20001e40 	.word	0x20001e40
 8005770:	200023d0 	.word	0x200023d0
 8005774:	20002060 	.word	0x20002060
 8005778:	20000040 	.word	0x20000040
 800577c:	20001d40 	.word	0x20001d40

08005780 <resizeFloatToUint8>:
=======
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 80053f4:	23aa      	movs	r3, #170	; 0xaa
 80053f6:	723b      	strb	r3, [r7, #8]
    res.type = 0x01;
 80053f8:	2301      	movs	r3, #1
 80053fa:	727b      	strb	r3, [r7, #9]
    res.address = 0xAF;
 80053fc:	23af      	movs	r3, #175	; 0xaf
 80053fe:	72bb      	strb	r3, [r7, #10]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e012      	b.n	800542c <fillThrustersRequest+0x44>
//    	}
//    	else if(velocity < 0) {
//    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
//    	}

    	res.velocity[i] = rThrusters[i].desiredSpeed;
 8005406:	4916      	ldr	r1, [pc, #88]	; (8005460 <fillThrustersRequest+0x78>)
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	440b      	add	r3, r1
 8005414:	3302      	adds	r3, #2
 8005416:	f993 1000 	ldrsb.w	r1, [r3]
 800541a:	f107 020b 	add.w	r2, r7, #11
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	4413      	add	r3, r2
 8005422:	460a      	mov	r2, r1
 8005424:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	3301      	adds	r3, #1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b05      	cmp	r3, #5
 8005430:	dde9      	ble.n	8005406 <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <fillThrustersRequest+0x7c>)
 8005434:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8005438:	747b      	strb	r3, [r7, #17]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	461a      	mov	r2, r3
 800543e:	f107 0308 	add.w	r3, r7, #8
 8005442:	cb03      	ldmia	r3!, {r0, r1}
 8005444:	6010      	str	r0, [r2, #0]
 8005446:	6051      	str	r1, [r2, #4]
 8005448:	8819      	ldrh	r1, [r3, #0]
 800544a:	789b      	ldrb	r3, [r3, #2]
 800544c:	8111      	strh	r1, [r2, #8]
 800544e:	7293      	strb	r3, [r2, #10]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 8005450:	210b      	movs	r1, #11
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc fb04 	bl	8001a60 <AddChecksumm8bVma>
}
 8005458:	bf00      	nop
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20001d40 	.word	0x20001d40
 8005464:	20001e60 	.word	0x20001e60

08005468 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8005474:	2109      	movs	r1, #9
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc fac5 	bl	8001a06 <IsChecksumm8bCorrectVma>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01f      	beq.n	80054c2 <fillThrustersResponse+0x5a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01b      	beq.n	80054c2 <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	6810      	ldr	r0, [r2, #0]
 8005492:	6851      	ldr	r1, [r2, #4]
 8005494:	c303      	stmia	r3!, {r0, r1}
 8005496:	7a12      	ldrb	r2, [r2, #8]
 8005498:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	8a38      	ldrh	r0, [r7, #16]
 800549e:	490e      	ldr	r1, [pc, #56]	; (80054d8 <fillThrustersResponse+0x70>)
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	440b      	add	r3, r1
 80054aa:	3304      	adds	r3, #4
 80054ac:	4602      	mov	r2, r0
 80054ae:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <fillThrustersResponse+0x74>)
 80054b2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80054b6:	3301      	adds	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	4b08      	ldr	r3, [pc, #32]	; (80054dc <fillThrustersResponse+0x74>)
 80054bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 80054c0:	e005      	b.n	80054ce <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <fillThrustersResponse+0x74>)
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a04      	ldr	r2, [pc, #16]	; (80054dc <fillThrustersResponse+0x74>)
 80054ca:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20001d40 	.word	0x20001d40
 80054dc:	20000194 	.word	0x20000194

080054e0 <formThrustVectors>:

void formThrustVectors()
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b08f      	sub	sp, #60	; 0x3c
 80054e4:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80054ec:	e00d      	b.n	800550a <formThrustVectors+0x2a>
    velocity[i] = 0;
 80054ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	3338      	adds	r3, #56	; 0x38
 80054f6:	443b      	add	r3, r7
 80054f8:	3b1c      	subs	r3, #28
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005500:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005504:	3301      	adds	r3, #1
 8005506:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800550a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800550e:	2b05      	cmp	r3, #5
 8005510:	d9ed      	bls.n	80054ee <formThrustVectors+0xe>
//  Uz = rStabState[STAB_DEPTH].outputSignal;
//  Upsi = rStabState[STAB_YAW].outputSignal;
//  Ugamma = rStabState[STAB_ROLL].outputSignal;
//  Uteta = rJoySpeed.pitch;

  U[STAB_MARCH] = rJoySpeed.march;
 8005512:	4b7e      	ldr	r3, [pc, #504]	; (800570c <formThrustVectors+0x22c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60bb      	str	r3, [r7, #8]
  U[STAB_LAG] = rJoySpeed.lag;
 8005518:	4b7c      	ldr	r3, [pc, #496]	; (800570c <formThrustVectors+0x22c>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	60fb      	str	r3, [r7, #12]
//  U[STAB_DEPTH] = rJoySpeed.depth;
  U[STAB_DEPTH] = input_value;
 800551e:	4b7c      	ldr	r3, [pc, #496]	; (8005710 <formThrustVectors+0x230>)
 8005520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800552c:	edc7 7a01 	vstr	s15, [r7, #4]
  U[STAB_YAW] = rJoySpeed.yaw;
 8005530:	4b76      	ldr	r3, [pc, #472]	; (800570c <formThrustVectors+0x22c>)
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	613b      	str	r3, [r7, #16]
  U[STAB_ROLL] = rJoySpeed.roll;
 8005536:	4b75      	ldr	r3, [pc, #468]	; (800570c <formThrustVectors+0x22c>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	617b      	str	r3, [r7, #20]
  U[STAB_PITCH] = rJoySpeed.pitch;
 800553c:	4b73      	ldr	r3, [pc, #460]	; (800570c <formThrustVectors+0x22c>)
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	61bb      	str	r3, [r7, #24]

  for(uint8_t i = 0; i < 6; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005548:	e01e      	b.n	8005588 <formThrustVectors+0xa8>
  {
	if(rStabConstants[i].enable)
 800554a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800554e:	4a71      	ldr	r2, [pc, #452]	; (8005714 <formThrustVectors+0x234>)
 8005550:	214c      	movs	r1, #76	; 0x4c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00f      	beq.n	800557e <formThrustVectors+0x9e>
		U[i] = rStabState[i].outputSignal;
 800555e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005562:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005566:	496c      	ldr	r1, [pc, #432]	; (8005718 <formThrustVectors+0x238>)
 8005568:	2058      	movs	r0, #88	; 0x58
 800556a:	fb00 f202 	mul.w	r2, r0, r2
 800556e:	440a      	add	r2, r1
 8005570:	3250      	adds	r2, #80	; 0x50
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	3338      	adds	r3, #56	; 0x38
 8005578:	443b      	add	r3, r7
 800557a:	3b34      	subs	r3, #52	; 0x34
 800557c:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < 6; i++)
 800557e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005582:	3301      	adds	r3, #1
 8005584:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005588:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800558c:	2b05      	cmp	r3, #5
 800558e:	d9dc      	bls.n	800554a <formThrustVectors+0x6a>
  }

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005596:	e0ae      	b.n	80056f6 <formThrustVectors+0x216>
  {
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 8005598:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800559c:	495f      	ldr	r1, [pc, #380]	; (800571c <formThrustVectors+0x23c>)
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	ed93 7a00 	vldr	s14, [r3]
 80055ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80055b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055b4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80055b8:	4958      	ldr	r1, [pc, #352]	; (800571c <formThrustVectors+0x23c>)
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3304      	adds	r3, #4
 80055c6:	edd3 6a00 	vldr	s13, [r3]
 80055ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80055ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055d6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80055da:	4950      	ldr	r1, [pc, #320]	; (800571c <formThrustVectors+0x23c>)
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	3308      	adds	r3, #8
 80055e8:	edd3 6a00 	vldr	s13, [r3]
 80055ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80055f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055f4:	ee37 7a27 	vadd.f32	s14, s14, s15
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 80055f8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80055fc:	4947      	ldr	r1, [pc, #284]	; (800571c <formThrustVectors+0x23c>)
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	330c      	adds	r3, #12
 800560a:	edd3 6a00 	vldr	s13, [r3]
 800560e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800561a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800561e:	493f      	ldr	r1, [pc, #252]	; (800571c <formThrustVectors+0x23c>)
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	3310      	adds	r3, #16
 800562c:	edd3 6a00 	vldr	s13, [r3]
 8005630:	edd7 7a05 	vldr	s15, [r7, #20]
 8005634:	ee66 7aa7 	vmul.f32	s15, s13, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 8005638:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 800563c:	ee77 7a27 	vadd.f32	s15, s14, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	3338      	adds	r3, #56	; 0x38
 8005644:	443b      	add	r3, r7
 8005646:	3b1c      	subs	r3, #28
 8005648:	edc3 7a00 	vstr	s15, [r3]
    if(velocity[i]<=12 && velocity[i]>=-12) //Thrusters dead zone asymmetric, +3 ... -11~-12
 800564c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	3338      	adds	r3, #56	; 0x38
 8005654:	443b      	add	r3, r7
 8005656:	3b1c      	subs	r3, #28
 8005658:	edd3 7a00 	vldr	s15, [r3]
 800565c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8005660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005668:	d817      	bhi.n	800569a <formThrustVectors+0x1ba>
 800566a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	3338      	adds	r3, #56	; 0x38
 8005672:	443b      	add	r3, r7
 8005674:	3b1c      	subs	r3, #28
 8005676:	edd3 7a00 	vldr	s15, [r3]
 800567a:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 800567e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005686:	db08      	blt.n	800569a <formThrustVectors+0x1ba>
    	velocity[i] = 0;
 8005688:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	3338      	adds	r3, #56	; 0x38
 8005690:	443b      	add	r3, r7
 8005692:	3b1c      	subs	r3, #28
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    if(!thruster_init)
 800569a:	4b21      	ldr	r3, [pc, #132]	; (8005720 <formThrustVectors+0x240>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d119      	bne.n	80056d6 <formThrustVectors+0x1f6>
    {
    	rThrusters[i].desiredSpeed = resizeFloatToInt8(velocity[i]);
 80056a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	3338      	adds	r3, #56	; 0x38
 80056aa:	443b      	add	r3, r7
 80056ac:	3b1c      	subs	r3, #28
 80056ae:	edd3 7a00 	vldr	s15, [r3]
 80056b2:	f897 4035 	ldrb.w	r4, [r7, #53]	; 0x35
 80056b6:	eeb0 0a67 	vmov.f32	s0, s15
 80056ba:	f000 f835 	bl	8005728 <resizeFloatToInt8>
 80056be:	4603      	mov	r3, r0
 80056c0:	4619      	mov	r1, r3
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <formThrustVectors+0x244>)
 80056c4:	4623      	mov	r3, r4
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4423      	add	r3, r4
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	3302      	adds	r3, #2
 80056d0:	460a      	mov	r2, r1
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e00a      	b.n	80056ec <formThrustVectors+0x20c>
    }
    else
    	rThrusters[i].desiredSpeed = 0;
 80056d6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80056da:	4912      	ldr	r1, [pc, #72]	; (8005724 <formThrustVectors+0x244>)
 80056dc:	4613      	mov	r3, r2
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	3302      	adds	r3, #2
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 80056ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80056f0:	3301      	adds	r3, #1
 80056f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80056f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	f67f af4c 	bls.w	8005598 <formThrustVectors+0xb8>
  	}

}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	373c      	adds	r7, #60	; 0x3c
 8005706:	46bd      	mov	sp, r7
 8005708:	bd90      	pop	{r4, r7, pc}
 800570a:	bf00      	nop
 800570c:	20001e48 	.word	0x20001e48
 8005710:	200023d8 	.word	0x200023d8
 8005714:	20001ea0 	.word	0x20001ea0
 8005718:	20002068 	.word	0x20002068
 800571c:	20000044 	.word	0x20000044
 8005720:	20002620 	.word	0x20002620
 8005724:	20001d40 	.word	0x20001d40

08005728 <resizeFloatToInt8>:
>>>>>>> Stashed changes

uint8_t resizeFloatToUint8(float input)
{
<<<<<<< Updated upstream
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 800578a:	edd7 7a01 	vldr	s15, [r7, #4]
 800578e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005792:	ee17 3a90 	vmov	r3, s15
 8005796:	60fb      	str	r3, [r7, #12]
  cast = cast / 0xFF;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <resizeFloatToUint8+0x54>)
 800579c:	fb82 1203 	smull	r1, r2, r2, r3
 80057a0:	441a      	add	r2, r3
 80057a2:	11d2      	asrs	r2, r2, #7
 80057a4:	17db      	asrs	r3, r3, #31
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	60fb      	str	r3, [r7, #12]
  if (cast > 127) {
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b7f      	cmp	r3, #127	; 0x7f
 80057ae:	dd02      	ble.n	80057b6 <resizeFloatToUint8+0x36>
    cast = 127;
 80057b0:	237f      	movs	r3, #127	; 0x7f
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e006      	b.n	80057c4 <resizeFloatToUint8+0x44>
  }
  else if(cast < -127) {
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80057bc:	da02      	bge.n	80057c4 <resizeFloatToUint8+0x44>
    cast = -127;
 80057be:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80057c2:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	b2db      	uxtb	r3, r3
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	80808081 	.word	0x80808081

080057d8 <MX_TIM7_Init>:
=======
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 8005732:	edd7 7a01 	vldr	s15, [r7, #4]
 8005736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800573a:	ee17 3a90 	vmov	r3, s15
 800573e:	60fb      	str	r3, [r7, #12]
//  cast = cast / 0xFF;
  if (cast > 127) {
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b7f      	cmp	r3, #127	; 0x7f
 8005744:	dd02      	ble.n	800574c <resizeFloatToInt8+0x24>
    cast = 127;
 8005746:	237f      	movs	r3, #127	; 0x7f
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e006      	b.n	800575a <resizeFloatToInt8+0x32>
  }
  else if(cast < -127) {
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8005752:	da02      	bge.n	800575a <resizeFloatToInt8+0x32>
    cast = -127;
 8005754:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8005758:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	b25b      	sxtb	r3, r3
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <MX_TIM7_Init>:
>>>>>>> Stashed changes

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
<<<<<<< Updated upstream
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
=======
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< Updated upstream
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	609a      	str	r2, [r3, #8]
=======
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
<<<<<<< Updated upstream
 80057e8:	4b14      	ldr	r3, [pc, #80]	; (800583c <MX_TIM7_Init+0x64>)
 80057ea:	4a15      	ldr	r2, [pc, #84]	; (8005840 <MX_TIM7_Init+0x68>)
 80057ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80057ee:	4b13      	ldr	r3, [pc, #76]	; (800583c <MX_TIM7_Init+0x64>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f4:	4b11      	ldr	r3, [pc, #68]	; (800583c <MX_TIM7_Init+0x64>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <MX_TIM7_Init+0x64>)
 80057fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005800:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005802:	4b0e      	ldr	r3, [pc, #56]	; (800583c <MX_TIM7_Init+0x64>)
 8005804:	2200      	movs	r2, #0
 8005806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005808:	480c      	ldr	r0, [pc, #48]	; (800583c <MX_TIM7_Init+0x64>)
 800580a:	f004 ff5f 	bl	800a6cc <HAL_TIM_Base_Init>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005814:	f7fe fdd4 	bl	80043c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005818:	2300      	movs	r3, #0
 800581a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005820:	1d3b      	adds	r3, r7, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4805      	ldr	r0, [pc, #20]	; (800583c <MX_TIM7_Init+0x64>)
 8005826:	f005 f9eb 	bl	800ac00 <HAL_TIMEx_MasterConfigSynchronization>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005830:	f7fe fdc6 	bl	80043c0 <Error_Handler>
=======
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <MX_TIM7_Init+0x64>)
 800577e:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <MX_TIM7_Init+0x68>)
 8005780:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <MX_TIM7_Init+0x64>)
 8005784:	2200      	movs	r2, #0
 8005786:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <MX_TIM7_Init+0x64>)
 800578a:	2200      	movs	r2, #0
 800578c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800578e:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <MX_TIM7_Init+0x64>)
 8005790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005794:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <MX_TIM7_Init+0x64>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800579c:	480c      	ldr	r0, [pc, #48]	; (80057d0 <MX_TIM7_Init+0x64>)
 800579e:	f004 ff5f 	bl	800a660 <HAL_TIM_Base_Init>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80057a8:	f7fe fd88 	bl	80042bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ac:	2300      	movs	r3, #0
 80057ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4805      	ldr	r0, [pc, #20]	; (80057d0 <MX_TIM7_Init+0x64>)
 80057ba:	f005 f9eb 	bl	800ab94 <HAL_TIMEx_MasterConfigSynchronization>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80057c4:	f7fe fd7a 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
<<<<<<< Updated upstream
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20002478 	.word	0x20002478
 8005840:	40001400 	.word	0x40001400

08005844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a0a      	ldr	r2, [pc, #40]	; (800587c <HAL_TIM_Base_MspInit+0x38>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10b      	bne.n	800586e <HAL_TIM_Base_MspInit+0x2a>
=======
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20002624 	.word	0x20002624
 80057d4:	40001400 	.word	0x40001400

080057d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <HAL_TIM_Base_MspInit+0x38>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10b      	bne.n	8005802 <HAL_TIM_Base_MspInit+0x2a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
<<<<<<< Updated upstream
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <HAL_TIM_Base_MspInit+0x3c>)
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	4a09      	ldr	r2, [pc, #36]	; (8005880 <HAL_TIM_Base_MspInit+0x3c>)
 800585c:	f043 0320 	orr.w	r3, r3, #32
 8005860:	61d3      	str	r3, [r2, #28]
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <HAL_TIM_Base_MspInit+0x3c>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
=======
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <HAL_TIM_Base_MspInit+0x3c>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_TIM_Base_MspInit+0x3c>)
 80057f0:	f043 0320 	orr.w	r3, r3, #32
 80057f4:	61d3      	str	r3, [r2, #28]
 80057f6:	4b07      	ldr	r3, [pc, #28]	; (8005814 <HAL_TIM_Base_MspInit+0x3c>)
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40001400 	.word	0x40001400
 8005880:	40021000 	.word	0x40021000

08005884 <MX_UART4_Init>:
=======
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40001400 	.word	0x40001400
 8005814:	40021000 	.word	0x40021000

08005818 <MX_UART4_Init>:
>>>>>>> Stashed changes
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
<<<<<<< Updated upstream
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
=======
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
<<<<<<< Updated upstream
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <MX_UART4_Init+0x58>)
 800588a:	4a15      	ldr	r2, [pc, #84]	; (80058e0 <MX_UART4_Init+0x5c>)
 800588c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800588e:	4b13      	ldr	r3, [pc, #76]	; (80058dc <MX_UART4_Init+0x58>)
 8005890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005894:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <MX_UART4_Init+0x58>)
 8005898:	2200      	movs	r2, #0
 800589a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <MX_UART4_Init+0x58>)
 800589e:	2200      	movs	r2, #0
 80058a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80058a2:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <MX_UART4_Init+0x58>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <MX_UART4_Init+0x58>)
 80058aa:	220c      	movs	r2, #12
 80058ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <MX_UART4_Init+0x58>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <MX_UART4_Init+0x58>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <MX_UART4_Init+0x58>)
 80058bc:	2200      	movs	r2, #0
 80058be:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <MX_UART4_Init+0x58>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80058c6:	4805      	ldr	r0, [pc, #20]	; (80058dc <MX_UART4_Init+0x58>)
 80058c8:	f005 fa38 	bl	800ad3c <HAL_UART_Init>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80058d2:	f7fe fd75 	bl	80043c0 <Error_Handler>
=======
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <MX_UART4_Init+0x58>)
 800581e:	4a15      	ldr	r2, [pc, #84]	; (8005874 <MX_UART4_Init+0x5c>)
 8005820:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <MX_UART4_Init+0x58>)
 8005824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005828:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <MX_UART4_Init+0x58>)
 800582c:	2200      	movs	r2, #0
 800582e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <MX_UART4_Init+0x58>)
 8005832:	2200      	movs	r2, #0
 8005834:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005836:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <MX_UART4_Init+0x58>)
 8005838:	2200      	movs	r2, #0
 800583a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <MX_UART4_Init+0x58>)
 800583e:	220c      	movs	r2, #12
 8005840:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005842:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <MX_UART4_Init+0x58>)
 8005844:	2200      	movs	r2, #0
 8005846:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <MX_UART4_Init+0x58>)
 800584a:	2200      	movs	r2, #0
 800584c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800584e:	4b08      	ldr	r3, [pc, #32]	; (8005870 <MX_UART4_Init+0x58>)
 8005850:	2200      	movs	r2, #0
 8005852:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <MX_UART4_Init+0x58>)
 8005856:	2200      	movs	r2, #0
 8005858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800585a:	4805      	ldr	r0, [pc, #20]	; (8005870 <MX_UART4_Init+0x58>)
 800585c:	f005 fa38 	bl	800acd0 <HAL_UART_Init>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005866:	f7fe fd29 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
<<<<<<< Updated upstream
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200024c4 	.word	0x200024c4
 80058e0:	40004c00 	.word	0x40004c00

080058e4 <MX_USART1_UART_Init>:
=======
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20002670 	.word	0x20002670
 8005874:	40004c00 	.word	0x40004c00

08005878 <MX_USART1_UART_Init>:
>>>>>>> Stashed changes
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< Updated upstream
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
=======
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< Updated upstream
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <MX_USART1_UART_Init+0x58>)
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <MX_USART1_UART_Init+0x5c>)
 80058ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <MX_USART1_UART_Init+0x58>)
 80058f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058f6:	4b11      	ldr	r3, [pc, #68]	; (800593c <MX_USART1_UART_Init+0x58>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <MX_USART1_UART_Init+0x58>)
 80058fe:	2200      	movs	r2, #0
 8005900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005902:	4b0e      	ldr	r3, [pc, #56]	; (800593c <MX_USART1_UART_Init+0x58>)
 8005904:	2200      	movs	r2, #0
 8005906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <MX_USART1_UART_Init+0x58>)
 800590a:	220c      	movs	r2, #12
 800590c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <MX_USART1_UART_Init+0x58>)
 8005910:	2200      	movs	r2, #0
 8005912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <MX_USART1_UART_Init+0x58>)
 8005916:	2200      	movs	r2, #0
 8005918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <MX_USART1_UART_Init+0x58>)
 800591c:	2200      	movs	r2, #0
 800591e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <MX_USART1_UART_Init+0x58>)
 8005922:	2200      	movs	r2, #0
 8005924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005926:	4805      	ldr	r0, [pc, #20]	; (800593c <MX_USART1_UART_Init+0x58>)
 8005928:	f005 fa08 	bl	800ad3c <HAL_UART_Init>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005932:	f7fe fd45 	bl	80043c0 <Error_Handler>
=======
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 800587e:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <MX_USART1_UART_Init+0x5c>)
 8005880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 8005884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 800588c:	2200      	movs	r2, #0
 800588e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005890:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 8005892:	2200      	movs	r2, #0
 8005894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005896:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 8005898:	2200      	movs	r2, #0
 800589a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 800589e:	220c      	movs	r2, #12
 80058a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058ba:	4805      	ldr	r0, [pc, #20]	; (80058d0 <MX_USART1_UART_Init+0x58>)
 80058bc:	f005 fa08 	bl	800acd0 <HAL_UART_Init>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80058c6:	f7fe fcf9 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< Updated upstream
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	2000254c 	.word	0x2000254c
 8005940:	40013800 	.word	0x40013800

08005944 <MX_USART2_UART_Init>:
=======
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200026f8 	.word	0x200026f8
 80058d4:	40013800 	.word	0x40013800

080058d8 <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
=======
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< Updated upstream
 8005948:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 800594a:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <MX_USART2_UART_Init+0x64>)
 800594c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800594e:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005956:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005958:	2200      	movs	r2, #0
 800595a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 800595e:	2200      	movs	r2, #0
 8005960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005968:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 800596a:	220c      	movs	r2, #12
 800596c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005970:	2200      	movs	r2, #0
 8005972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005976:	2200      	movs	r2, #0
 8005978:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 800597c:	2200      	movs	r2, #0
 800597e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005982:	2220      	movs	r2, #32
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005988:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800598c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800598e:	4805      	ldr	r0, [pc, #20]	; (80059a4 <MX_USART2_UART_Init+0x60>)
 8005990:	f005 f9d4 	bl	800ad3c <HAL_UART_Init>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800599a:	f7fe fd11 	bl	80043c0 <Error_Handler>
=======
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <MX_USART2_UART_Init+0x60>)
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <MX_USART2_UART_Init+0x64>)
 80058e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80058e2:	4b15      	ldr	r3, [pc, #84]	; (8005938 <MX_USART2_UART_Init+0x60>)
 80058e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <MX_USART2_UART_Init+0x60>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <MX_USART2_UART_Init+0x60>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <MX_USART2_UART_Init+0x60>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <MX_USART2_UART_Init+0x60>)
 80058fe:	220c      	movs	r2, #12
 8005900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <MX_USART2_UART_Init+0x60>)
 8005904:	2200      	movs	r2, #0
 8005906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <MX_USART2_UART_Init+0x60>)
 800590a:	2200      	movs	r2, #0
 800590c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <MX_USART2_UART_Init+0x60>)
 8005910:	2200      	movs	r2, #0
 8005912:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <MX_USART2_UART_Init+0x60>)
 8005916:	2220      	movs	r2, #32
 8005918:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <MX_USART2_UART_Init+0x60>)
 800591c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005920:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005922:	4805      	ldr	r0, [pc, #20]	; (8005938 <MX_USART2_UART_Init+0x60>)
 8005924:	f005 f9d4 	bl	800acd0 <HAL_UART_Init>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800592e:	f7fe fcc5 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< Updated upstream
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200025d4 	.word	0x200025d4
 80059a8:	40004400 	.word	0x40004400

080059ac <MX_USART3_UART_Init>:
=======
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20002780 	.word	0x20002780
 800593c:	40004400 	.word	0x40004400

08005940 <MX_USART3_UART_Init>:
>>>>>>> Stashed changes
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< Updated upstream
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
=======
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< Updated upstream
 80059b0:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <MX_USART3_UART_Init+0x5c>)
 80059b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80059ca:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059d2:	220c      	movs	r2, #12
 80059d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059d8:	2200      	movs	r2, #0
 80059da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059de:	2200      	movs	r2, #0
 80059e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80059ee:	4805      	ldr	r0, [pc, #20]	; (8005a04 <MX_USART3_UART_Init+0x58>)
 80059f0:	f005 f9a4 	bl	800ad3c <HAL_UART_Init>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80059fa:	f7fe fce1 	bl	80043c0 <Error_Handler>
=======
 8005944:	4b14      	ldr	r3, [pc, #80]	; (8005998 <MX_USART3_UART_Init+0x58>)
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <MX_USART3_UART_Init+0x5c>)
 8005948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800594a:	4b13      	ldr	r3, [pc, #76]	; (8005998 <MX_USART3_UART_Init+0x58>)
 800594c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005952:	4b11      	ldr	r3, [pc, #68]	; (8005998 <MX_USART3_UART_Init+0x58>)
 8005954:	2200      	movs	r2, #0
 8005956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <MX_USART3_UART_Init+0x58>)
 800595a:	2200      	movs	r2, #0
 800595c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <MX_USART3_UART_Init+0x58>)
 8005960:	2200      	movs	r2, #0
 8005962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <MX_USART3_UART_Init+0x58>)
 8005966:	220c      	movs	r2, #12
 8005968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <MX_USART3_UART_Init+0x58>)
 800596c:	2200      	movs	r2, #0
 800596e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <MX_USART3_UART_Init+0x58>)
 8005972:	2200      	movs	r2, #0
 8005974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <MX_USART3_UART_Init+0x58>)
 8005978:	2200      	movs	r2, #0
 800597a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <MX_USART3_UART_Init+0x58>)
 800597e:	2200      	movs	r2, #0
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005982:	4805      	ldr	r0, [pc, #20]	; (8005998 <MX_USART3_UART_Init+0x58>)
 8005984:	f005 f9a4 	bl	800acd0 <HAL_UART_Init>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800598e:	f7fe fc95 	bl	80042bc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< Updated upstream
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	2000265c 	.word	0x2000265c
 8005a08:	40004800 	.word	0x40004800

08005a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b090      	sub	sp, #64	; 0x40
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4aa0      	ldr	r2, [pc, #640]	; (8005cac <HAL_UART_MspInit+0x2a0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d131      	bne.n	8005a92 <HAL_UART_MspInit+0x86>
=======
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20002808 	.word	0x20002808
 800599c:	40004800 	.word	0x40004800

080059a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b090      	sub	sp, #64	; 0x40
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4aa0      	ldr	r2, [pc, #640]	; (8005c40 <HAL_UART_MspInit+0x2a0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d131      	bne.n	8005a26 <HAL_UART_MspInit+0x86>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
<<<<<<< Updated upstream
 8005a2e:	4ba0      	ldr	r3, [pc, #640]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4a9f      	ldr	r2, [pc, #636]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a38:	61d3      	str	r3, [r2, #28]
 8005a3a:	4b9d      	ldr	r3, [pc, #628]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a46:	4b9a      	ldr	r3, [pc, #616]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	4a99      	ldr	r2, [pc, #612]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a50:	6153      	str	r3, [r2, #20]
 8005a52:	4b97      	ldr	r3, [pc, #604]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
=======
 80059c2:	4ba0      	ldr	r3, [pc, #640]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4a9f      	ldr	r2, [pc, #636]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 80059c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059cc:	61d3      	str	r3, [r2, #28]
 80059ce:	4b9d      	ldr	r3, [pc, #628]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059da:	4b9a      	ldr	r3, [pc, #616]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	4a99      	ldr	r2, [pc, #612]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 80059e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e4:	6153      	str	r3, [r2, #20]
 80059e6:	4b97      	ldr	r3, [pc, #604]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< Updated upstream
 8005a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a64:	2302      	movs	r3, #2
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005a70:	2305      	movs	r3, #5
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a78:	4619      	mov	r1, r3
 8005a7a:	488e      	ldr	r0, [pc, #568]	; (8005cb4 <HAL_UART_MspInit+0x2a8>)
 8005a7c:	f000 fee6 	bl	800684c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005a80:	2200      	movs	r2, #0
 8005a82:	2105      	movs	r1, #5
 8005a84:	2034      	movs	r0, #52	; 0x34
 8005a86:	f000 faa7 	bl	8005fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005a8a:	2034      	movs	r0, #52	; 0x34
 8005a8c:	f000 fac0 	bl	8006010 <HAL_NVIC_EnableIRQ>
=======
 80059f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f8:	2302      	movs	r3, #2
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a00:	2303      	movs	r3, #3
 8005a02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005a04:	2305      	movs	r3, #5
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	488e      	ldr	r0, [pc, #568]	; (8005c48 <HAL_UART_MspInit+0x2a8>)
 8005a10:	f000 fee6 	bl	80067e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005a14:	2200      	movs	r2, #0
 8005a16:	2105      	movs	r1, #5
 8005a18:	2034      	movs	r0, #52	; 0x34
 8005a1a:	f000 faa7 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005a1e:	2034      	movs	r0, #52	; 0x34
 8005a20:	f000 fac0 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8005a90:	e15c      	b.n	8005d4c <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART1)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a88      	ldr	r2, [pc, #544]	; (8005cb8 <HAL_UART_MspInit+0x2ac>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	f040 8081 	bne.w	8005ba0 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a9e:	4b84      	ldr	r3, [pc, #528]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	4a83      	ldr	r2, [pc, #524]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aa8:	6193      	str	r3, [r2, #24]
 8005aaa:	4b81      	ldr	r3, [pc, #516]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab6:	4b7e      	ldr	r3, [pc, #504]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	4a7d      	ldr	r2, [pc, #500]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac0:	6153      	str	r3, [r2, #20]
 8005ac2:	4b7b      	ldr	r3, [pc, #492]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005adc:	2303      	movs	r3, #3
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ae0:	2307      	movs	r3, #7
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aee:	f000 fead 	bl	800684c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005af2:	4b72      	ldr	r3, [pc, #456]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005af4:	4a72      	ldr	r2, [pc, #456]	; (8005cc0 <HAL_UART_MspInit+0x2b4>)
 8005af6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005af8:	4b70      	ldr	r3, [pc, #448]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005afa:	2210      	movs	r2, #16
 8005afc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005afe:	4b6f      	ldr	r3, [pc, #444]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b04:	4b6d      	ldr	r3, [pc, #436]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b0a:	4b6c      	ldr	r3, [pc, #432]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b10:	4b6a      	ldr	r3, [pc, #424]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005b16:	4b69      	ldr	r3, [pc, #420]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005b1c:	4b67      	ldr	r3, [pc, #412]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b1e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005b22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005b24:	4865      	ldr	r0, [pc, #404]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b26:	f000 fa81 	bl	800602c <HAL_DMA_Init>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005b30:	f7fe fc46 	bl	80043c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a61      	ldr	r2, [pc, #388]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b38:	671a      	str	r2, [r3, #112]	; 0x70
 8005b3a:	4a60      	ldr	r2, [pc, #384]	; (8005cbc <HAL_UART_MspInit+0x2b0>)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005b40:	4b60      	ldr	r3, [pc, #384]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b42:	4a61      	ldr	r2, [pc, #388]	; (8005cc8 <HAL_UART_MspInit+0x2bc>)
 8005b44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b46:	4b5f      	ldr	r3, [pc, #380]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b4c:	4b5d      	ldr	r3, [pc, #372]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b52:	4b5c      	ldr	r3, [pc, #368]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b58:	4b5a      	ldr	r3, [pc, #360]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b5e:	4b59      	ldr	r3, [pc, #356]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005b64:	4b57      	ldr	r3, [pc, #348]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b6c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005b70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005b72:	4854      	ldr	r0, [pc, #336]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b74:	f000 fa5a 	bl	800602c <HAL_DMA_Init>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8005b7e:	f7fe fc1f 	bl	80043c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a4f      	ldr	r2, [pc, #316]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b86:	675a      	str	r2, [r3, #116]	; 0x74
 8005b88:	4a4e      	ldr	r2, [pc, #312]	; (8005cc4 <HAL_UART_MspInit+0x2b8>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2105      	movs	r1, #5
 8005b92:	2025      	movs	r0, #37	; 0x25
 8005b94:	f000 fa20 	bl	8005fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b98:	2025      	movs	r0, #37	; 0x25
 8005b9a:	f000 fa39 	bl	8006010 <HAL_NVIC_EnableIRQ>
}
 8005b9e:	e0d5      	b.n	8005d4c <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a49      	ldr	r2, [pc, #292]	; (8005ccc <HAL_UART_MspInit+0x2c0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f040 809a 	bne.w	8005ce0 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bac:	4b40      	ldr	r3, [pc, #256]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	4a3f      	ldr	r2, [pc, #252]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb6:	61d3      	str	r3, [r2, #28]
 8005bb8:	4b3d      	ldr	r3, [pc, #244]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc4:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	4a39      	ldr	r2, [pc, #228]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bce:	6153      	str	r3, [r2, #20]
 8005bd0:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <HAL_UART_MspInit+0x2a4>)
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005bdc:	230c      	movs	r3, #12
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be0:	2302      	movs	r3, #2
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005be8:	2303      	movs	r3, #3
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bec:	2307      	movs	r3, #7
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bfa:	f000 fe27 	bl	800684c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005bfe:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c00:	4a34      	ldr	r2, [pc, #208]	; (8005cd4 <HAL_UART_MspInit+0x2c8>)
 8005c02:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c04:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c0a:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c10:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c12:	2280      	movs	r2, #128	; 0x80
 8005c14:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c16:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c1c:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005c22:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005c28:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005c2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005c30:	4827      	ldr	r0, [pc, #156]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c32:	f000 f9fb 	bl	800602c <HAL_DMA_Init>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8005c3c:	f7fe fbc0 	bl	80043c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c44:	675a      	str	r2, [r3, #116]	; 0x74
 8005c46:	4a22      	ldr	r2, [pc, #136]	; (8005cd0 <HAL_UART_MspInit+0x2c4>)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005c4c:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c4e:	4a23      	ldr	r2, [pc, #140]	; (8005cdc <HAL_UART_MspInit+0x2d0>)
 8005c50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c52:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c54:	2210      	movs	r2, #16
 8005c56:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c58:	4b1f      	ldr	r3, [pc, #124]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c60:	2280      	movs	r2, #128	; 0x80
 8005c62:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c64:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c70:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c76:	4b18      	ldr	r3, [pc, #96]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c7e:	4816      	ldr	r0, [pc, #88]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c80:	f000 f9d4 	bl	800602c <HAL_DMA_Init>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_UART_MspInit+0x282>
      Error_Handler();
 8005c8a:	f7fe fb99 	bl	80043c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c92:	671a      	str	r2, [r3, #112]	; 0x70
 8005c94:	4a10      	ldr	r2, [pc, #64]	; (8005cd8 <HAL_UART_MspInit+0x2cc>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2105      	movs	r1, #5
 8005c9e:	2026      	movs	r0, #38	; 0x26
 8005ca0:	f000 f99a 	bl	8005fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ca4:	2026      	movs	r0, #38	; 0x26
 8005ca6:	f000 f9b3 	bl	8006010 <HAL_NVIC_EnableIRQ>
}
 8005caa:	e04f      	b.n	8005d4c <HAL_UART_MspInit+0x340>
 8005cac:	40004c00 	.word	0x40004c00
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	48000800 	.word	0x48000800
 8005cb8:	40013800 	.word	0x40013800
 8005cbc:	200026e4 	.word	0x200026e4
 8005cc0:	40020044 	.word	0x40020044
 8005cc4:	20002728 	.word	0x20002728
 8005cc8:	40020058 	.word	0x40020058
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	2000276c 	.word	0x2000276c
 8005cd4:	4002006c 	.word	0x4002006c
 8005cd8:	200027b0 	.word	0x200027b0
 8005cdc:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1b      	ldr	r2, [pc, #108]	; (8005d54 <HAL_UART_MspInit+0x348>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d130      	bne.n	8005d4c <HAL_UART_MspInit+0x340>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005cea:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <HAL_UART_MspInit+0x34c>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	4a1a      	ldr	r2, [pc, #104]	; (8005d58 <HAL_UART_MspInit+0x34c>)
 8005cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cf4:	61d3      	str	r3, [r2, #28]
 8005cf6:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <HAL_UART_MspInit+0x34c>)
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <HAL_UART_MspInit+0x34c>)
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	4a14      	ldr	r2, [pc, #80]	; (8005d58 <HAL_UART_MspInit+0x34c>)
 8005d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d0c:	6153      	str	r3, [r2, #20]
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <HAL_UART_MspInit+0x34c>)
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005d1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d20:	2302      	movs	r3, #2
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d2c:	2307      	movs	r3, #7
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d34:	4619      	mov	r1, r3
 8005d36:	4809      	ldr	r0, [pc, #36]	; (8005d5c <HAL_UART_MspInit+0x350>)
 8005d38:	f000 fd88 	bl	800684c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2105      	movs	r1, #5
 8005d40:	2027      	movs	r0, #39	; 0x27
 8005d42:	f000 f949 	bl	8005fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005d46:	2027      	movs	r0, #39	; 0x27
 8005d48:	f000 f962 	bl	8006010 <HAL_NVIC_EnableIRQ>
}
 8005d4c:	bf00      	nop
 8005d4e:	3740      	adds	r7, #64	; 0x40
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40004800 	.word	0x40004800
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	48000400 	.word	0x48000400

08005d60 <Reset_Handler>:
=======
 8005a24:	e15c      	b.n	8005ce0 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a88      	ldr	r2, [pc, #544]	; (8005c4c <HAL_UART_MspInit+0x2ac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	f040 8081 	bne.w	8005b34 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a32:	4b84      	ldr	r3, [pc, #528]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	4a83      	ldr	r2, [pc, #524]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a3c:	6193      	str	r3, [r2, #24]
 8005a3e:	4b81      	ldr	r3, [pc, #516]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a4a:	4b7e      	ldr	r3, [pc, #504]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a54:	6153      	str	r3, [r2, #20]
 8005a56:	4b7b      	ldr	r3, [pc, #492]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a70:	2303      	movs	r3, #3
 8005a72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a74:	2307      	movs	r3, #7
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a82:	f000 fead 	bl	80067e0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005a86:	4b72      	ldr	r3, [pc, #456]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005a88:	4a72      	ldr	r2, [pc, #456]	; (8005c54 <HAL_UART_MspInit+0x2b4>)
 8005a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a8c:	4b70      	ldr	r3, [pc, #448]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005a8e:	2210      	movs	r2, #16
 8005a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a92:	4b6f      	ldr	r3, [pc, #444]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a98:	4b6d      	ldr	r3, [pc, #436]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a9e:	4b6c      	ldr	r3, [pc, #432]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aa4:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005aaa:	4b69      	ldr	r3, [pc, #420]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ab0:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005ab2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005ab6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005ab8:	4865      	ldr	r0, [pc, #404]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005aba:	f000 fa81 	bl	8005fc0 <HAL_DMA_Init>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005ac4:	f7fe fbfa 	bl	80042bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a61      	ldr	r2, [pc, #388]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005acc:	671a      	str	r2, [r3, #112]	; 0x70
 8005ace:	4a60      	ldr	r2, [pc, #384]	; (8005c50 <HAL_UART_MspInit+0x2b0>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005ad4:	4b60      	ldr	r3, [pc, #384]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005ad6:	4a61      	ldr	r2, [pc, #388]	; (8005c5c <HAL_UART_MspInit+0x2bc>)
 8005ad8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ada:	4b5f      	ldr	r3, [pc, #380]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ae0:	4b5d      	ldr	r3, [pc, #372]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ae6:	4b5c      	ldr	r3, [pc, #368]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005ae8:	2280      	movs	r2, #128	; 0x80
 8005aea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aec:	4b5a      	ldr	r3, [pc, #360]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005af2:	4b59      	ldr	r3, [pc, #356]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005af8:	4b57      	ldr	r3, [pc, #348]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005afe:	4b56      	ldr	r3, [pc, #344]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005b00:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005b04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005b06:	4854      	ldr	r0, [pc, #336]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005b08:	f000 fa5a 	bl	8005fc0 <HAL_DMA_Init>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8005b12:	f7fe fbd3 	bl	80042bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a4f      	ldr	r2, [pc, #316]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005b1a:	675a      	str	r2, [r3, #116]	; 0x74
 8005b1c:	4a4e      	ldr	r2, [pc, #312]	; (8005c58 <HAL_UART_MspInit+0x2b8>)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005b22:	2200      	movs	r2, #0
 8005b24:	2105      	movs	r1, #5
 8005b26:	2025      	movs	r0, #37	; 0x25
 8005b28:	f000 fa20 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b2c:	2025      	movs	r0, #37	; 0x25
 8005b2e:	f000 fa39 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 8005b32:	e0d5      	b.n	8005ce0 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a49      	ldr	r2, [pc, #292]	; (8005c60 <HAL_UART_MspInit+0x2c0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f040 809a 	bne.w	8005c74 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b40:	4b40      	ldr	r3, [pc, #256]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	4a3f      	ldr	r2, [pc, #252]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4a:	61d3      	str	r3, [r2, #28]
 8005b4c:	4b3d      	ldr	r3, [pc, #244]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b58:	4b3a      	ldr	r3, [pc, #232]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	4a39      	ldr	r2, [pc, #228]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b62:	6153      	str	r3, [r2, #20]
 8005b64:	4b37      	ldr	r3, [pc, #220]	; (8005c44 <HAL_UART_MspInit+0x2a4>)
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b70:	230c      	movs	r3, #12
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b74:	2302      	movs	r3, #2
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b80:	2307      	movs	r3, #7
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b8e:	f000 fe27 	bl	80067e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005b92:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005b94:	4a34      	ldr	r2, [pc, #208]	; (8005c68 <HAL_UART_MspInit+0x2c8>)
 8005b96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b98:	4b32      	ldr	r3, [pc, #200]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ba4:	4b2f      	ldr	r3, [pc, #188]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005ba6:	2280      	movs	r2, #128	; 0x80
 8005ba8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005baa:	4b2e      	ldr	r3, [pc, #184]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bb0:	4b2c      	ldr	r3, [pc, #176]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005bb6:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005bbc:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005bbe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005bc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005bc4:	4827      	ldr	r0, [pc, #156]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005bc6:	f000 f9fb 	bl	8005fc0 <HAL_DMA_Init>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8005bd0:	f7fe fb74 	bl	80042bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005bd8:	675a      	str	r2, [r3, #116]	; 0x74
 8005bda:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <HAL_UART_MspInit+0x2c4>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005be0:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005be2:	4a23      	ldr	r2, [pc, #140]	; (8005c70 <HAL_UART_MspInit+0x2d0>)
 8005be4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005be6:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005be8:	2210      	movs	r2, #16
 8005bea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bec:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c04:	4b19      	ldr	r3, [pc, #100]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c0a:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005c0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c12:	4816      	ldr	r0, [pc, #88]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005c14:	f000 f9d4 	bl	8005fc0 <HAL_DMA_Init>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <HAL_UART_MspInit+0x282>
      Error_Handler();
 8005c1e:	f7fe fb4d 	bl	80042bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005c26:	671a      	str	r2, [r3, #112]	; 0x70
 8005c28:	4a10      	ldr	r2, [pc, #64]	; (8005c6c <HAL_UART_MspInit+0x2cc>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2105      	movs	r1, #5
 8005c32:	2026      	movs	r0, #38	; 0x26
 8005c34:	f000 f99a 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c38:	2026      	movs	r0, #38	; 0x26
 8005c3a:	f000 f9b3 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 8005c3e:	e04f      	b.n	8005ce0 <HAL_UART_MspInit+0x340>
 8005c40:	40004c00 	.word	0x40004c00
 8005c44:	40021000 	.word	0x40021000
 8005c48:	48000800 	.word	0x48000800
 8005c4c:	40013800 	.word	0x40013800
 8005c50:	20002890 	.word	0x20002890
 8005c54:	40020044 	.word	0x40020044
 8005c58:	200028d4 	.word	0x200028d4
 8005c5c:	40020058 	.word	0x40020058
 8005c60:	40004400 	.word	0x40004400
 8005c64:	20002918 	.word	0x20002918
 8005c68:	4002006c 	.word	0x4002006c
 8005c6c:	2000295c 	.word	0x2000295c
 8005c70:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <HAL_UART_MspInit+0x348>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d130      	bne.n	8005ce0 <HAL_UART_MspInit+0x340>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c7e:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <HAL_UART_MspInit+0x34c>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <HAL_UART_MspInit+0x34c>)
 8005c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c88:	61d3      	str	r3, [r2, #28]
 8005c8a:	4b18      	ldr	r3, [pc, #96]	; (8005cec <HAL_UART_MspInit+0x34c>)
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_UART_MspInit+0x34c>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	4a14      	ldr	r2, [pc, #80]	; (8005cec <HAL_UART_MspInit+0x34c>)
 8005c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ca0:	6153      	str	r3, [r2, #20]
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_UART_MspInit+0x34c>)
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005cae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005cc0:	2307      	movs	r3, #7
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4809      	ldr	r0, [pc, #36]	; (8005cf0 <HAL_UART_MspInit+0x350>)
 8005ccc:	f000 fd88 	bl	80067e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2105      	movs	r1, #5
 8005cd4:	2027      	movs	r0, #39	; 0x27
 8005cd6:	f000 f949 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005cda:	2027      	movs	r0, #39	; 0x27
 8005cdc:	f000 f962 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 8005ce0:	bf00      	nop
 8005ce2:	3740      	adds	r7, #64	; 0x40
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40004800 	.word	0x40004800
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	48000400 	.word	0x48000400

08005cf4 <Reset_Handler>:
>>>>>>> Stashed changes

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
<<<<<<< Updated upstream
 8005d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d98 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005d64:	f7ff facc 	bl	8005300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d68:	480c      	ldr	r0, [pc, #48]	; (8005d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8005d6a:	490d      	ldr	r1, [pc, #52]	; (8005da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005d6c:	4a0d      	ldr	r2, [pc, #52]	; (8005da4 <LoopForever+0xe>)
  movs r3, #0
 8005d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d70:	e002      	b.n	8005d78 <LoopCopyDataInit>

08005d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d76:	3304      	adds	r3, #4

08005d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d7c:	d3f9      	bcc.n	8005d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005d80:	4c0a      	ldr	r4, [pc, #40]	; (8005dac <LoopForever+0x16>)
  movs r3, #0
 8005d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d84:	e001      	b.n	8005d8a <LoopFillZerobss>

08005d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d88:	3204      	adds	r2, #4

08005d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d8c:	d3fb      	bcc.n	8005d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d8e:	f00a fa71 	bl	8010274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d92:	f7fe fa73 	bl	800427c <main>

08005d96 <LoopForever>:

LoopForever:
    b LoopForever
 8005d96:	e7fe      	b.n	8005d96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d98:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005da0:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8005da4:	08011bf0 	.word	0x08011bf0
  ldr r2, =_sbss
 8005da8:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8005dac:	20002fe0 	.word	0x20002fe0

08005db0 <ADC1_2_IRQHandler>:
=======
 8005cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d2c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005cf8:	f7ff fb04 	bl	8005304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cfc:	480c      	ldr	r0, [pc, #48]	; (8005d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cfe:	490d      	ldr	r1, [pc, #52]	; (8005d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005d00:	4a0d      	ldr	r2, [pc, #52]	; (8005d38 <LoopForever+0xe>)
  movs r3, #0
 8005d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d04:	e002      	b.n	8005d0c <LoopCopyDataInit>

08005d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d0a:	3304      	adds	r3, #4

08005d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d10:	d3f9      	bcc.n	8005d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d12:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005d14:	4c0a      	ldr	r4, [pc, #40]	; (8005d40 <LoopForever+0x16>)
  movs r3, #0
 8005d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d18:	e001      	b.n	8005d1e <LoopFillZerobss>

08005d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d1c:	3204      	adds	r2, #4

08005d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d20:	d3fb      	bcc.n	8005d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d22:	f00a fa6f 	bl	8010204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d26:	f7fe fa2b 	bl	8004180 <main>

08005d2a <LoopForever>:

LoopForever:
    b LoopForever
 8005d2a:	e7fe      	b.n	8005d2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d2c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d34:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8005d38:	08011b88 	.word	0x08011b88
  ldr r2, =_sbss
 8005d3c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8005d40:	20003190 	.word	0x20003190

08005d44 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< Updated upstream
 8005db0:	e7fe      	b.n	8005db0 <ADC1_2_IRQHandler>
	...

08005db4 <HAL_Init>:
=======
 8005d44:	e7fe      	b.n	8005d44 <ADC1_2_IRQHandler>
	...

08005d48 <HAL_Init>:
>>>>>>> Stashed changes
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005db8:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <HAL_Init+0x28>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a07      	ldr	r2, [pc, #28]	; (8005ddc <HAL_Init+0x28>)
 8005dbe:	f043 0310 	orr.w	r3, r3, #16
 8005dc2:	6013      	str	r3, [r2, #0]
=======
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d4c:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <HAL_Init+0x28>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a07      	ldr	r2, [pc, #28]	; (8005d70 <HAL_Init+0x28>)
 8005d52:	f043 0310 	orr.w	r3, r3, #16
 8005d56:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8005dc4:	2003      	movs	r0, #3
 8005dc6:	f000 f8fc 	bl	8005fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dca:	200f      	movs	r0, #15
 8005dcc:	f7ff f9ae 	bl	800512c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005dd0:	f7ff f984 	bl	80050dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40022000 	.word	0x40022000

08005de0 <HAL_IncTick>:
=======
 8005d58:	2003      	movs	r0, #3
 8005d5a:	f000 f8fc 	bl	8005f56 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d5e:	200f      	movs	r0, #15
 8005d60:	f7ff f9e6 	bl	8005130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d64:	f7ff f9bc 	bl	80050e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40022000 	.word	0x40022000

08005d74 <HAL_IncTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_IncTick+0x20>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_IncTick+0x24>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <HAL_IncTick+0x24>)
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200000bc 	.word	0x200000bc
 8005e04:	200027f4 	.word	0x200027f4

08005e08 <HAL_GetTick>:
=======
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_IncTick+0x20>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_IncTick+0x24>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <HAL_IncTick+0x24>)
 8005d86:	6013      	str	r3, [r2, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200000c0 	.word	0x200000c0
 8005d98:	200029a0 	.word	0x200029a0

08005d9c <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <HAL_GetTick+0x14>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200027f4 	.word	0x200027f4

08005e20 <HAL_Delay>:
=======
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8005da0:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <HAL_GetTick+0x14>)
 8005da2:	681b      	ldr	r3, [r3, #0]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	200029a0 	.word	0x200029a0

08005db4 <HAL_Delay>:
>>>>>>> Stashed changes
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e28:	f7ff ffee 	bl	8005e08 <HAL_GetTick>
 8005e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d005      	beq.n	8005e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_Delay+0x44>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005e46:	bf00      	nop
 8005e48:	f7ff ffde 	bl	8005e08 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d8f7      	bhi.n	8005e48 <HAL_Delay+0x28>
  {
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200000bc 	.word	0x200000bc

08005e68 <__NVIC_SetPriorityGrouping>:
=======
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dbc:	f7ff ffee 	bl	8005d9c <HAL_GetTick>
 8005dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d005      	beq.n	8005dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_Delay+0x44>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005dda:	bf00      	nop
 8005ddc:	f7ff ffde 	bl	8005d9c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d8f7      	bhi.n	8005ddc <HAL_Delay+0x28>
  {
  }
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200000c0 	.word	0x200000c0

08005dfc <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <__NVIC_SetPriorityGrouping+0x44>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e84:	4013      	ands	r3, r2
 8005e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e9a:	4a04      	ldr	r2, [pc, #16]	; (8005eac <__NVIC_SetPriorityGrouping+0x44>)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	60d3      	str	r3, [r2, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	e000ed00 	.word	0xe000ed00

08005eb0 <__NVIC_GetPriorityGrouping>:
=======
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <__NVIC_SetPriorityGrouping+0x44>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e2e:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <__NVIC_SetPriorityGrouping+0x44>)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	60d3      	str	r3, [r2, #12]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	e000ed00 	.word	0xe000ed00

08005e44 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f003 0307 	and.w	r3, r3, #7
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <__NVIC_EnableIRQ>:
=======
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <__NVIC_GetPriorityGrouping+0x18>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0307 	and.w	r3, r3, #7
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db0b      	blt.n	8005ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	f003 021f 	and.w	r2, r3, #31
 8005ee4:	4907      	ldr	r1, [pc, #28]	; (8005f04 <__NVIC_EnableIRQ+0x38>)
 8005ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2001      	movs	r0, #1
 8005eee:	fa00 f202 	lsl.w	r2, r0, r2
 8005ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	e000e100 	.word	0xe000e100

08005f08 <__NVIC_SetPriority>:
=======
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	db0b      	blt.n	8005e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	f003 021f 	and.w	r2, r3, #31
 8005e78:	4907      	ldr	r1, [pc, #28]	; (8005e98 <__NVIC_EnableIRQ+0x38>)
 8005e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	2001      	movs	r0, #1
 8005e82:	fa00 f202 	lsl.w	r2, r0, r2
 8005e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	e000e100 	.word	0xe000e100

08005e9c <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db0a      	blt.n	8005f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	490c      	ldr	r1, [pc, #48]	; (8005f54 <__NVIC_SetPriority+0x4c>)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	0112      	lsls	r2, r2, #4
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	6039      	str	r1, [r7, #0]
 8005ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	db0a      	blt.n	8005ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	490c      	ldr	r1, [pc, #48]	; (8005ee8 <__NVIC_SetPriority+0x4c>)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8005f30:	e00a      	b.n	8005f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4908      	ldr	r1, [pc, #32]	; (8005f58 <__NVIC_SetPriority+0x50>)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	0112      	lsls	r2, r2, #4
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	440b      	add	r3, r1
 8005f46:	761a      	strb	r2, [r3, #24]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	e000e100 	.word	0xe000e100
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <NVIC_EncodePriority>:
=======
 8005ec4:	e00a      	b.n	8005edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	4908      	ldr	r1, [pc, #32]	; (8005eec <__NVIC_SetPriority+0x50>)
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	0112      	lsls	r2, r2, #4
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	440b      	add	r3, r1
 8005eda:	761a      	strb	r2, [r3, #24]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000e100 	.word	0xe000e100
 8005eec:	e000ed00 	.word	0xe000ed00

08005ef0 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	61fb      	str	r3, [r7, #28]
=======
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f1c3 0307 	rsb	r3, r3, #7
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	bf28      	it	cs
 8005f7a:	2304      	movcs	r3, #4
 8005f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3304      	adds	r3, #4
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d902      	bls.n	8005f8c <NVIC_EncodePriority+0x30>
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3b03      	subs	r3, #3
 8005f8a:	e000      	b.n	8005f8e <NVIC_EncodePriority+0x32>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	fa01 f303 	lsl.w	r3, r1, r3
 8005fae:	43d9      	mvns	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb4:	4313      	orrs	r3, r2
         );
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_NVIC_SetPriorityGrouping>:
=======
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f1c3 0307 	rsb	r3, r3, #7
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	bf28      	it	cs
 8005f0e:	2304      	movcs	r3, #4
 8005f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	3304      	adds	r3, #4
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d902      	bls.n	8005f20 <NVIC_EncodePriority+0x30>
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3b03      	subs	r3, #3
 8005f1e:	e000      	b.n	8005f22 <NVIC_EncodePriority+0x32>
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	401a      	ands	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f38:	f04f 31ff 	mov.w	r1, #4294967295
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	43d9      	mvns	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f48:	4313      	orrs	r3, r2
         );
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	; 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
=======
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff ff4c 	bl	8005e68 <__NVIC_SetPriorityGrouping>
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_NVIC_SetPriority>:
=======
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff ff4c 	bl	8005dfc <__NVIC_SetPriorityGrouping>
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
=======
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8005fea:	f7ff ff61 	bl	8005eb0 <__NVIC_GetPriorityGrouping>
 8005fee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	6978      	ldr	r0, [r7, #20]
 8005ff6:	f7ff ffb1 	bl	8005f5c <NVIC_EncodePriority>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006000:	4611      	mov	r1, r2
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff ff80 	bl	8005f08 <__NVIC_SetPriority>
}
 8006008:	bf00      	nop
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_NVIC_EnableIRQ>:
=======
 8005f7e:	f7ff ff61 	bl	8005e44 <__NVIC_GetPriorityGrouping>
 8005f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	6978      	ldr	r0, [r7, #20]
 8005f8a:	f7ff ffb1 	bl	8005ef0 <NVIC_EncodePriority>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ff80 	bl	8005e9c <__NVIC_SetPriority>
}
 8005f9c:	bf00      	nop
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
=======
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 800601a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff ff54 	bl	8005ecc <__NVIC_EnableIRQ>
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_DMA_Init>:
=======
 8005fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff ff54 	bl	8005e60 <__NVIC_EnableIRQ>
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
<<<<<<< Updated upstream
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e037      	b.n	80060b2 <HAL_DMA_Init+0x86>
=======
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e037      	b.n	8006046 <HAL_DMA_Init+0x86>
>>>>>>> Stashed changes
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< Updated upstream
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006058:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800605c:	60fb      	str	r3, [r7, #12]
=======
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005fec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005ff0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< Updated upstream
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800607e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	601a      	str	r2, [r3, #0]
=======
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f9c5 	bl	8006424 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}  
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_DMA_Start_IT>:
=======
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f9c5 	bl	80063b8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}  
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	75fb      	strb	r3, [r7, #23]
=======
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_DMA_Start_IT+0x20>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e04a      	b.n	8006170 <HAL_DMA_Start_IT+0xb6>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d13a      	bne.n	8006162 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f958 	bl	80063c6 <DMA_SetConfig>
=======
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_DMA_Start_IT+0x20>
 800606a:	2302      	movs	r3, #2
 800606c:	e04a      	b.n	8006104 <HAL_DMA_Start_IT+0xb6>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800607c:	2b01      	cmp	r3, #1
 800607e:	d13a      	bne.n	80060f6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f958 	bl	800635a <DMA_SetConfig>
>>>>>>> Stashed changes
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
<<<<<<< Updated upstream
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 020e 	orr.w	r2, r2, #14
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e00f      	b.n	8006150 <HAL_DMA_Start_IT+0x96>
=======
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 020e 	orr.w	r2, r2, #14
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e00f      	b.n	80060e4 <HAL_DMA_Start_IT+0x96>
>>>>>>> Stashed changes
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
<<<<<<< Updated upstream
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 020a 	orr.w	r2, r2, #10
 800613e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0204 	bic.w	r2, r2, #4
 800614e:	601a      	str	r2, [r3, #0]
=======
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 020a 	orr.w	r2, r2, #10
 80060d2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0204 	bic.w	r2, r2, #4
 80060e2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
<<<<<<< Updated upstream
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	e005      	b.n	800616e <HAL_DMA_Start_IT+0xb4>
=======
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e005      	b.n	8006102 <HAL_DMA_Start_IT+0xb4>
>>>>>>> Stashed changes
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
<<<<<<< Updated upstream
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800616a:	2302      	movs	r3, #2
 800616c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800616e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_DMA_Abort>:
=======
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
 8006100:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006102:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006186:	2b02      	cmp	r3, #2
 8006188:	d008      	beq.n	800619c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e020      	b.n	80061de <HAL_DMA_Abort+0x66>
=======
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800611a:	2b02      	cmp	r3, #2
 800611c:	d008      	beq.n	8006130 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2204      	movs	r2, #4
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e020      	b.n	8006172 <HAL_DMA_Abort+0x66>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
<<<<<<< Updated upstream
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 020e 	bic.w	r2, r2, #14
 80061aa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_DMA_Abort_IT>:
=======
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 020e 	bic.w	r2, r2, #14
 800613e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f202 	lsl.w	r2, r1, r2
 800615e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< Updated upstream
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d005      	beq.n	800620c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2204      	movs	r2, #4
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	73fb      	strb	r3, [r7, #15]
 800620a:	e027      	b.n	800625c <HAL_DMA_Abort_IT+0x72>
=======
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006190:	2b02      	cmp	r3, #2
 8006192:	d005      	beq.n	80061a0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2204      	movs	r2, #4
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	e027      	b.n	80061f0 <HAL_DMA_Abort_IT+0x72>
>>>>>>> Stashed changes
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
<<<<<<< Updated upstream
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 020e 	bic.w	r2, r2, #14
 800621a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	2101      	movs	r1, #1
 8006236:	fa01 f202 	lsl.w	r2, r1, r2
 800623a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
    } 
  }
  return status;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_DMA_IRQHandler>:
=======
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 020e 	bic.w	r2, r2, #14
 80061ae:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f202 	lsl.w	r2, r1, r2
 80061ce:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
    } 
  }
  return status;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	2204      	movs	r2, #4
 8006284:	409a      	lsls	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d024      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x72>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01f      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d107      	bne.n	80062b6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0204 	bic.w	r2, r2, #4
 80062b4:	601a      	str	r2, [r3, #0]
=======
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2204      	movs	r2, #4
 8006218:	409a      	lsls	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d024      	beq.n	800626c <HAL_DMA_IRQHandler+0x72>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01f      	beq.n	800626c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d107      	bne.n	800624a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0204 	bic.w	r2, r2, #4
 8006248:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
<<<<<<< Updated upstream
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	2104      	movs	r1, #4
 80062c0:	fa01 f202 	lsl.w	r2, r1, r2
 80062c4:	605a      	str	r2, [r3, #4]
=======
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	2104      	movs	r1, #4
 8006254:	fa01 f202 	lsl.w	r2, r1, r2
 8006258:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< Updated upstream
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d06a      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80062d6:	e065      	b.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
=======
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d06a      	beq.n	8006338 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800626a:	e065      	b.n	8006338 <HAL_DMA_IRQHandler+0x13e>
>>>>>>> Stashed changes
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
<<<<<<< Updated upstream
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	2202      	movs	r2, #2
 80062de:	409a      	lsls	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d02c      	beq.n	8006342 <HAL_DMA_IRQHandler+0xdc>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d027      	beq.n	8006342 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <HAL_DMA_IRQHandler+0xb2>
=======
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	2202      	movs	r2, #2
 8006272:	409a      	lsls	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d02c      	beq.n	80062d6 <HAL_DMA_IRQHandler+0xdc>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d027      	beq.n	80062d6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <HAL_DMA_IRQHandler+0xb2>
>>>>>>> Stashed changes
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
<<<<<<< Updated upstream
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 020a 	bic.w	r2, r2, #10
 800630e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
=======
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 020a 	bic.w	r2, r2, #10
 80062a2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
>>>>>>> Stashed changes
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
<<<<<<< Updated upstream
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	2102      	movs	r1, #2
 8006322:	fa01 f202 	lsl.w	r2, r1, r2
 8006326:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	2b00      	cmp	r3, #0
 8006336:	d035      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006340:	e030      	b.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
=======
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	2102      	movs	r1, #2
 80062b6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ba:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d035      	beq.n	8006338 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80062d4:	e030      	b.n	8006338 <HAL_DMA_IRQHandler+0x13e>
>>>>>>> Stashed changes
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
<<<<<<< Updated upstream
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	2208      	movs	r2, #8
 8006348:	409a      	lsls	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4013      	ands	r3, r2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d028      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d023      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
=======
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	2208      	movs	r2, #8
 80062dc:	409a      	lsls	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d028      	beq.n	8006338 <HAL_DMA_IRQHandler+0x13e>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d023      	beq.n	8006338 <HAL_DMA_IRQHandler+0x13e>
>>>>>>> Stashed changes
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
<<<<<<< Updated upstream
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 020e 	bic.w	r2, r2, #14
 800636a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006374:	2101      	movs	r1, #1
 8006376:	fa01 f202 	lsl.w	r2, r1, r2
 800637a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
    }
  }
}  
 80063a2:	e7ff      	b.n	80063a4 <HAL_DMA_IRQHandler+0x13e>
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_DMA_GetState>:
=======
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 020e 	bic.w	r2, r2, #14
 80062fe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006308:	2101      	movs	r1, #1
 800630a:	fa01 f202 	lsl.w	r2, r1, r2
 800630e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
    }
  }
}  
 8006336:	e7ff      	b.n	8006338 <HAL_DMA_IRQHandler+0x13e>
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_DMA_GetState>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <DMA_SetConfig>:
=======
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	607a      	str	r2, [r7, #4]
 80063d2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063dc:	2101      	movs	r1, #1
 80063de:	fa01 f202 	lsl.w	r2, r1, r2
 80063e2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b10      	cmp	r3, #16
 80063f2:	d108      	bne.n	8006406 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	60da      	str	r2, [r3, #12]
=======
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006370:	2101      	movs	r1, #1
 8006372:	fa01 f202 	lsl.w	r2, r1, r2
 8006376:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b10      	cmp	r3, #16
 8006386:	d108      	bne.n	800639a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< Updated upstream
 8006404:	e007      	b.n	8006416 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	60da      	str	r2, [r3, #12]
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <DMA_CalcBaseAndBitshift>:
=======
 8006398:	e007      	b.n	80063aa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	60da      	str	r2, [r3, #12]
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
	...

080063b8 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	4b14      	ldr	r3, [pc, #80]	; (8006484 <DMA_CalcBaseAndBitshift+0x60>)
 8006434:	429a      	cmp	r2, r3
 8006436:	d80f      	bhi.n	8006458 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <DMA_CalcBaseAndBitshift+0x64>)
 8006440:	4413      	add	r3, r2
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <DMA_CalcBaseAndBitshift+0x68>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	091b      	lsrs	r3, r3, #4
 800644a:	009a      	lsls	r2, r3, #2
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <DMA_CalcBaseAndBitshift+0x6c>)
 8006454:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	4b14      	ldr	r3, [pc, #80]	; (8006418 <DMA_CalcBaseAndBitshift+0x60>)
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d80f      	bhi.n	80063ec <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <DMA_CalcBaseAndBitshift+0x64>)
 80063d4:	4413      	add	r3, r2
 80063d6:	4a12      	ldr	r2, [pc, #72]	; (8006420 <DMA_CalcBaseAndBitshift+0x68>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	009a      	lsls	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a0f      	ldr	r2, [pc, #60]	; (8006424 <DMA_CalcBaseAndBitshift+0x6c>)
 80063e8:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
<<<<<<< Updated upstream
 8006456:	e00e      	b.n	8006476 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <DMA_CalcBaseAndBitshift+0x70>)
 8006460:	4413      	add	r3, r2
 8006462:	4a0a      	ldr	r2, [pc, #40]	; (800648c <DMA_CalcBaseAndBitshift+0x68>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	009a      	lsls	r2, r3, #2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a09      	ldr	r2, [pc, #36]	; (8006498 <DMA_CalcBaseAndBitshift+0x74>)
 8006474:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40020407 	.word	0x40020407
 8006488:	bffdfff8 	.word	0xbffdfff8
 800648c:	cccccccd 	.word	0xcccccccd
 8006490:	40020000 	.word	0x40020000
 8006494:	bffdfbf8 	.word	0xbffdfbf8
 8006498:	40020400 	.word	0x40020400

0800649c <HAL_FLASH_Program>:
=======
 80063ea:	e00e      	b.n	800640a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <DMA_CalcBaseAndBitshift+0x70>)
 80063f4:	4413      	add	r3, r2
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <DMA_CalcBaseAndBitshift+0x68>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	009a      	lsls	r2, r3, #2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <DMA_CalcBaseAndBitshift+0x74>)
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40020407 	.word	0x40020407
 800641c:	bffdfff8 	.word	0xbffdfff8
 8006420:	cccccccd 	.word	0xcccccccd
 8006424:	40020000 	.word	0x40020000
 8006428:	bffdfbf8 	.word	0xbffdfbf8
 800642c:	40020400 	.word	0x40020400

08006430 <HAL_FLASH_Program>:
>>>>>>> Stashed changes
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
<<<<<<< Updated upstream
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <HAL_FLASH_Program+0xd8>)
 80064b8:	7e1b      	ldrb	r3, [r3, #24]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_FLASH_Program+0x26>
 80064be:	2302      	movs	r3, #2
 80064c0:	e054      	b.n	800656c <HAL_FLASH_Program+0xd0>
 80064c2:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <HAL_FLASH_Program+0xd8>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	761a      	strb	r2, [r3, #24]
=======
 8006430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800644a:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <HAL_FLASH_Program+0xd8>)
 800644c:	7e1b      	ldrb	r3, [r3, #24]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_FLASH_Program+0x26>
 8006452:	2302      	movs	r3, #2
 8006454:	e054      	b.n	8006500 <HAL_FLASH_Program+0xd0>
 8006456:	4b2c      	ldr	r3, [pc, #176]	; (8006508 <HAL_FLASH_Program+0xd8>)
 8006458:	2201      	movs	r2, #1
 800645a:	761a      	strb	r2, [r3, #24]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
<<<<<<< Updated upstream
 80064c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064cc:	f000 f8a8 	bl	8006620 <FLASH_WaitForLastOperation>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d144      	bne.n	8006564 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d102      	bne.n	80064e6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80064e0:	2301      	movs	r3, #1
 80064e2:	757b      	strb	r3, [r7, #21]
 80064e4:	e007      	b.n	80064f6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d102      	bne.n	80064f2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80064ec:	2302      	movs	r3, #2
 80064ee:	757b      	strb	r3, [r7, #21]
 80064f0:	e001      	b.n	80064f6 <HAL_FLASH_Program+0x5a>
=======
 800645c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006460:	f000 f8a8 	bl	80065b4 <FLASH_WaitForLastOperation>
 8006464:	4603      	mov	r3, r0
 8006466:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d144      	bne.n	80064f8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d102      	bne.n	800647a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006474:	2301      	movs	r3, #1
 8006476:	757b      	strb	r3, [r7, #21]
 8006478:	e007      	b.n	800648a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d102      	bne.n	8006486 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006480:	2302      	movs	r3, #2
 8006482:	757b      	strb	r3, [r7, #21]
 8006484:	e001      	b.n	800648a <HAL_FLASH_Program+0x5a>
>>>>>>> Stashed changes
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
<<<<<<< Updated upstream
 80064f2:	2304      	movs	r3, #4
 80064f4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80064f6:	2300      	movs	r3, #0
 80064f8:	75bb      	strb	r3, [r7, #22]
 80064fa:	e02d      	b.n	8006558 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80064fc:	7dbb      	ldrb	r3, [r7, #22]
 80064fe:	005a      	lsls	r2, r3, #1
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	eb02 0c03 	add.w	ip, r2, r3
 8006506:	7dbb      	ldrb	r3, [r7, #22]
 8006508:	0119      	lsls	r1, r3, #4
 800650a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650e:	f1c1 0620 	rsb	r6, r1, #32
 8006512:	f1a1 0020 	sub.w	r0, r1, #32
 8006516:	fa22 f401 	lsr.w	r4, r2, r1
 800651a:	fa03 f606 	lsl.w	r6, r3, r6
 800651e:	4334      	orrs	r4, r6
 8006520:	fa23 f000 	lsr.w	r0, r3, r0
 8006524:	4304      	orrs	r4, r0
 8006526:	fa23 f501 	lsr.w	r5, r3, r1
 800652a:	b2a3      	uxth	r3, r4
 800652c:	4619      	mov	r1, r3
 800652e:	4660      	mov	r0, ip
 8006530:	f000 f85a 	bl	80065e8 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006534:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006538:	f000 f872 	bl	8006620 <FLASH_WaitForLastOperation>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006540:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <HAL_FLASH_Program+0xdc>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	4a0c      	ldr	r2, [pc, #48]	; (8006578 <HAL_FLASH_Program+0xdc>)
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d107      	bne.n	8006562 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006552:	7dbb      	ldrb	r3, [r7, #22]
 8006554:	3301      	adds	r3, #1
 8006556:	75bb      	strb	r3, [r7, #22]
 8006558:	7dba      	ldrb	r2, [r7, #22]
 800655a:	7d7b      	ldrb	r3, [r7, #21]
 800655c:	429a      	cmp	r2, r3
 800655e:	d3cd      	bcc.n	80064fc <HAL_FLASH_Program+0x60>
 8006560:	e000      	b.n	8006564 <HAL_FLASH_Program+0xc8>
      {
        break;
 8006562:	bf00      	nop
=======
 8006486:	2304      	movs	r3, #4
 8006488:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800648a:	2300      	movs	r3, #0
 800648c:	75bb      	strb	r3, [r7, #22]
 800648e:	e02d      	b.n	80064ec <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	005a      	lsls	r2, r3, #1
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	eb02 0c03 	add.w	ip, r2, r3
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	0119      	lsls	r1, r3, #4
 800649e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a2:	f1c1 0620 	rsb	r6, r1, #32
 80064a6:	f1a1 0020 	sub.w	r0, r1, #32
 80064aa:	fa22 f401 	lsr.w	r4, r2, r1
 80064ae:	fa03 f606 	lsl.w	r6, r3, r6
 80064b2:	4334      	orrs	r4, r6
 80064b4:	fa23 f000 	lsr.w	r0, r3, r0
 80064b8:	4304      	orrs	r4, r0
 80064ba:	fa23 f501 	lsr.w	r5, r3, r1
 80064be:	b2a3      	uxth	r3, r4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4660      	mov	r0, ip
 80064c4:	f000 f85a 	bl	800657c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064cc:	f000 f872 	bl	80065b4 <FLASH_WaitForLastOperation>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80064d4:	4b0d      	ldr	r3, [pc, #52]	; (800650c <HAL_FLASH_Program+0xdc>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	4a0c      	ldr	r2, [pc, #48]	; (800650c <HAL_FLASH_Program+0xdc>)
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80064e6:	7dbb      	ldrb	r3, [r7, #22]
 80064e8:	3301      	adds	r3, #1
 80064ea:	75bb      	strb	r3, [r7, #22]
 80064ec:	7dba      	ldrb	r2, [r7, #22]
 80064ee:	7d7b      	ldrb	r3, [r7, #21]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d3cd      	bcc.n	8006490 <HAL_FLASH_Program+0x60>
 80064f4:	e000      	b.n	80064f8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80064f6:	bf00      	nop
>>>>>>> Stashed changes
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
<<<<<<< Updated upstream
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_FLASH_Program+0xd8>)
 8006566:	2200      	movs	r2, #0
 8006568:	761a      	strb	r2, [r3, #24]

  return status;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
}
 800656c:	4618      	mov	r0, r3
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006574:	200027f8 	.word	0x200027f8
 8006578:	40022000 	.word	0x40022000

0800657c <HAL_FLASH_Unlock>:
=======
 80064f8:	4b03      	ldr	r3, [pc, #12]	; (8006508 <HAL_FLASH_Program+0xd8>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	761a      	strb	r2, [r3, #24]

  return status;
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006500:	4618      	mov	r0, r3
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006508:	200029a8 	.word	0x200029a8
 800650c:	40022000 	.word	0x40022000

08006510 <HAL_FLASH_Unlock>:
>>>>>>> Stashed changes
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
<<<<<<< Updated upstream
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <HAL_FLASH_Unlock+0x40>)
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006592:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <HAL_FLASH_Unlock+0x40>)
 8006594:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <HAL_FLASH_Unlock+0x44>)
 8006596:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006598:	4b08      	ldr	r3, [pc, #32]	; (80065bc <HAL_FLASH_Unlock+0x40>)
 800659a:	4a0a      	ldr	r2, [pc, #40]	; (80065c4 <HAL_FLASH_Unlock+0x48>)
 800659c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800659e:	4b07      	ldr	r3, [pc, #28]	; (80065bc <HAL_FLASH_Unlock+0x40>)
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	71fb      	strb	r3, [r7, #7]
=======
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800651a:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <HAL_FLASH_Unlock+0x40>)
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00d      	beq.n	8006542 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <HAL_FLASH_Unlock+0x40>)
 8006528:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <HAL_FLASH_Unlock+0x44>)
 800652a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800652c:	4b08      	ldr	r3, [pc, #32]	; (8006550 <HAL_FLASH_Unlock+0x40>)
 800652e:	4a0a      	ldr	r2, [pc, #40]	; (8006558 <HAL_FLASH_Unlock+0x48>)
 8006530:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <HAL_FLASH_Unlock+0x40>)
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
    }
  }

  return status;
<<<<<<< Updated upstream
 80065ae:	79fb      	ldrb	r3, [r7, #7]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	40022000 	.word	0x40022000
 80065c0:	45670123 	.word	0x45670123
 80065c4:	cdef89ab 	.word	0xcdef89ab

080065c8 <HAL_FLASH_Lock>:
=======
 8006542:	79fb      	ldrb	r3, [r7, #7]
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40022000 	.word	0x40022000
 8006554:	45670123 	.word	0x45670123
 8006558:	cdef89ab 	.word	0xcdef89ab

0800655c <HAL_FLASH_Lock>:
>>>>>>> Stashed changes
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
<<<<<<< Updated upstream
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <HAL_FLASH_Lock+0x1c>)
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	4a04      	ldr	r2, [pc, #16]	; (80065e4 <HAL_FLASH_Lock+0x1c>)
 80065d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	40022000 	.word	0x40022000

080065e8 <FLASH_Program_HalfWord>:
=======
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <HAL_FLASH_Lock+0x1c>)
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	4a04      	ldr	r2, [pc, #16]	; (8006578 <HAL_FLASH_Lock+0x1c>)
 8006566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40022000 	.word	0x40022000

0800657c <FLASH_Program_HalfWord>:
>>>>>>> Stashed changes
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
<<<<<<< Updated upstream
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <FLASH_Program_HalfWord+0x30>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <FLASH_Program_HalfWord+0x34>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	4a07      	ldr	r2, [pc, #28]	; (800661c <FLASH_Program_HalfWord+0x34>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	887a      	ldrh	r2, [r7, #2]
 800660a:	801a      	strh	r2, [r3, #0]
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	200027f8 	.word	0x200027f8
 800661c:	40022000 	.word	0x40022000

08006620 <FLASH_WaitForLastOperation>:
=======
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006588:	4b08      	ldr	r3, [pc, #32]	; (80065ac <FLASH_Program_HalfWord+0x30>)
 800658a:	2200      	movs	r2, #0
 800658c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800658e:	4b08      	ldr	r3, [pc, #32]	; (80065b0 <FLASH_Program_HalfWord+0x34>)
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	4a07      	ldr	r2, [pc, #28]	; (80065b0 <FLASH_Program_HalfWord+0x34>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	887a      	ldrh	r2, [r7, #2]
 800659e:	801a      	strh	r2, [r3, #0]
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	200029a8 	.word	0x200029a8
 80065b0:	40022000 	.word	0x40022000

080065b4 <FLASH_WaitForLastOperation>:
>>>>>>> Stashed changes
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
=======
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8006628:	f7ff fbee 	bl	8005e08 <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800662e:	e010      	b.n	8006652 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d00c      	beq.n	8006652 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <FLASH_WaitForLastOperation+0x2e>
 800663e:	f7ff fbe3 	bl	8005e08 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d201      	bcs.n	8006652 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e01f      	b.n	8006692 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006652:	4b12      	ldr	r3, [pc, #72]	; (800669c <FLASH_WaitForLastOperation+0x7c>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b01      	cmp	r3, #1
 800665c:	d0e8      	beq.n	8006630 <FLASH_WaitForLastOperation+0x10>
=======
 80065bc:	f7ff fbee 	bl	8005d9c <HAL_GetTick>
 80065c0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80065c2:	e010      	b.n	80065e6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d00c      	beq.n	80065e6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <FLASH_WaitForLastOperation+0x2e>
 80065d2:	f7ff fbe3 	bl	8005d9c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d201      	bcs.n	80065e6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e01f      	b.n	8006626 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80065e6:	4b12      	ldr	r3, [pc, #72]	; (8006630 <FLASH_WaitForLastOperation+0x7c>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d0e8      	beq.n	80065c4 <FLASH_WaitForLastOperation+0x10>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
<<<<<<< Updated upstream
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <FLASH_WaitForLastOperation+0x7c>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b20      	cmp	r3, #32
 8006668:	d102      	bne.n	8006670 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800666a:	4b0c      	ldr	r3, [pc, #48]	; (800669c <FLASH_WaitForLastOperation+0x7c>)
 800666c:	2220      	movs	r2, #32
 800666e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <FLASH_WaitForLastOperation+0x7c>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b10      	cmp	r3, #16
 800667a:	d005      	beq.n	8006688 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800667c:	4b07      	ldr	r3, [pc, #28]	; (800669c <FLASH_WaitForLastOperation+0x7c>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006684:	2b04      	cmp	r3, #4
 8006686:	d103      	bne.n	8006690 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006688:	f000 f80a 	bl	80066a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e000      	b.n	8006692 <FLASH_WaitForLastOperation+0x72>
=======
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <FLASH_WaitForLastOperation+0x7c>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d102      	bne.n	8006604 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80065fe:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <FLASH_WaitForLastOperation+0x7c>)
 8006600:	2220      	movs	r2, #32
 8006602:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <FLASH_WaitForLastOperation+0x7c>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b10      	cmp	r3, #16
 800660e:	d005      	beq.n	800661c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <FLASH_WaitForLastOperation+0x7c>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006618:	2b04      	cmp	r3, #4
 800661a:	d103      	bne.n	8006624 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800661c:	f000 f80a 	bl	8006634 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <FLASH_WaitForLastOperation+0x72>
>>>>>>> Stashed changes
  }

  /* There is no error flag set */
  return HAL_OK;
<<<<<<< Updated upstream
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40022000 	.word	0x40022000

080066a0 <FLASH_SetErrorCode>:
=======
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40022000 	.word	0x40022000

08006634 <FLASH_SetErrorCode>:
>>>>>>> Stashed changes
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
<<<<<<< Updated upstream
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80066aa:	4b14      	ldr	r3, [pc, #80]	; (80066fc <FLASH_SetErrorCode+0x5c>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f003 0310 	and.w	r3, r3, #16
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d109      	bne.n	80066ca <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <FLASH_SetErrorCode+0x60>)
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f043 0302 	orr.w	r3, r3, #2
 80066be:	4a10      	ldr	r2, [pc, #64]	; (8006700 <FLASH_SetErrorCode+0x60>)
 80066c0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f043 0310 	orr.w	r3, r3, #16
 80066c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80066ca:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <FLASH_SetErrorCode+0x5c>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d109      	bne.n	80066ea <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <FLASH_SetErrorCode+0x60>)
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	4a08      	ldr	r2, [pc, #32]	; (8006700 <FLASH_SetErrorCode+0x60>)
 80066e0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f043 0304 	orr.w	r3, r3, #4
 80066e8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80066ea:	4a04      	ldr	r2, [pc, #16]	; (80066fc <FLASH_SetErrorCode+0x5c>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60d3      	str	r3, [r2, #12]
}  
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40022000 	.word	0x40022000
 8006700:	200027f8 	.word	0x200027f8

08006704 <HAL_FLASHEx_Erase>:
=======
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <FLASH_SetErrorCode+0x5c>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b10      	cmp	r3, #16
 8006648:	d109      	bne.n	800665e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <FLASH_SetErrorCode+0x60>)
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f043 0302 	orr.w	r3, r3, #2
 8006652:	4a10      	ldr	r2, [pc, #64]	; (8006694 <FLASH_SetErrorCode+0x60>)
 8006654:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f043 0310 	orr.w	r3, r3, #16
 800665c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800665e:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <FLASH_SetErrorCode+0x5c>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b04      	cmp	r3, #4
 8006668:	d109      	bne.n	800667e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <FLASH_SetErrorCode+0x60>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	4a08      	ldr	r2, [pc, #32]	; (8006694 <FLASH_SetErrorCode+0x60>)
 8006674:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f043 0304 	orr.w	r3, r3, #4
 800667c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800667e:	4a04      	ldr	r2, [pc, #16]	; (8006690 <FLASH_SetErrorCode+0x5c>)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60d3      	str	r3, [r2, #12]
}  
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	40022000 	.word	0x40022000
 8006694:	200029a8 	.word	0x200029a8

08006698 <HAL_FLASHEx_Erase>:
>>>>>>> Stashed changes
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
<<<<<<< Updated upstream
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006716:	4b2e      	ldr	r3, [pc, #184]	; (80067d0 <HAL_FLASHEx_Erase+0xcc>)
 8006718:	7e1b      	ldrb	r3, [r3, #24]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_FLASHEx_Erase+0x1e>
 800671e:	2302      	movs	r3, #2
 8006720:	e052      	b.n	80067c8 <HAL_FLASHEx_Erase+0xc4>
 8006722:	4b2b      	ldr	r3, [pc, #172]	; (80067d0 <HAL_FLASHEx_Erase+0xcc>)
 8006724:	2201      	movs	r2, #1
 8006726:	761a      	strb	r2, [r3, #24]
=======
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80066aa:	4b2e      	ldr	r3, [pc, #184]	; (8006764 <HAL_FLASHEx_Erase+0xcc>)
 80066ac:	7e1b      	ldrb	r3, [r3, #24]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_FLASHEx_Erase+0x1e>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e052      	b.n	800675c <HAL_FLASHEx_Erase+0xc4>
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <HAL_FLASHEx_Erase+0xcc>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	761a      	strb	r2, [r3, #24]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
<<<<<<< Updated upstream
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d115      	bne.n	800675c <HAL_FLASHEx_Erase+0x58>
=======
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d115      	bne.n	80066f0 <HAL_FLASHEx_Erase+0x58>
>>>>>>> Stashed changes
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
<<<<<<< Updated upstream
 8006730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006734:	f7ff ff74 	bl	8006620 <FLASH_WaitForLastOperation>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d140      	bne.n	80067c0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800673e:	f000 f84b 	bl	80067d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006742:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006746:	f7ff ff6b 	bl	8006620 <FLASH_WaitForLastOperation>
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800674e:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <HAL_FLASHEx_Erase+0xd0>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <HAL_FLASHEx_Erase+0xd0>)
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	6113      	str	r3, [r2, #16]
 800675a:	e031      	b.n	80067c0 <HAL_FLASHEx_Erase+0xbc>
=======
 80066c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80066c8:	f7ff ff74 	bl	80065b4 <FLASH_WaitForLastOperation>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d140      	bne.n	8006754 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80066d2:	f000 f84b 	bl	800676c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80066d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80066da:	f7ff ff6b 	bl	80065b4 <FLASH_WaitForLastOperation>
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80066e2:	4b21      	ldr	r3, [pc, #132]	; (8006768 <HAL_FLASHEx_Erase+0xd0>)
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	4a20      	ldr	r2, [pc, #128]	; (8006768 <HAL_FLASHEx_Erase+0xd0>)
 80066e8:	f023 0304 	bic.w	r3, r3, #4
 80066ec:	6113      	str	r3, [r2, #16]
 80066ee:	e031      	b.n	8006754 <HAL_FLASHEx_Erase+0xbc>
>>>>>>> Stashed changes
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
<<<<<<< Updated upstream
 800675c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006760:	f7ff ff5e 	bl	8006620 <FLASH_WaitForLastOperation>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d12a      	bne.n	80067c0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60bb      	str	r3, [r7, #8]
 8006778:	e019      	b.n	80067ae <HAL_FLASHEx_Erase+0xaa>
=======
 80066f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80066f4:	f7ff ff5e 	bl	80065b4 <FLASH_WaitForLastOperation>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d12a      	bne.n	8006754 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f04f 32ff 	mov.w	r2, #4294967295
 8006704:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	60bb      	str	r3, [r7, #8]
 800670c:	e019      	b.n	8006742 <HAL_FLASHEx_Erase+0xaa>
>>>>>>> Stashed changes
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
<<<<<<< Updated upstream
 800677a:	68b8      	ldr	r0, [r7, #8]
 800677c:	f000 f846 	bl	800680c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006780:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006784:	f7ff ff4c 	bl	8006620 <FLASH_WaitForLastOperation>
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800678c:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <HAL_FLASHEx_Erase+0xd0>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <HAL_FLASHEx_Erase+0xd0>)
 8006792:	f023 0302 	bic.w	r3, r3, #2
 8006796:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	601a      	str	r2, [r3, #0]
            break;
 80067a4:	e00c      	b.n	80067c0 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ac:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	02da      	lsls	r2, r3, #11
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d3dc      	bcc.n	800677a <HAL_FLASHEx_Erase+0x76>
=======
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	f000 f846 	bl	80067a0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006714:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006718:	f7ff ff4c 	bl	80065b4 <FLASH_WaitForLastOperation>
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006720:	4b11      	ldr	r3, [pc, #68]	; (8006768 <HAL_FLASHEx_Erase+0xd0>)
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	4a10      	ldr	r2, [pc, #64]	; (8006768 <HAL_FLASHEx_Erase+0xd0>)
 8006726:	f023 0302 	bic.w	r3, r3, #2
 800672a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	601a      	str	r2, [r3, #0]
            break;
 8006738:	e00c      	b.n	8006754 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006740:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	02da      	lsls	r2, r3, #11
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4413      	add	r3, r2
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	d3dc      	bcc.n	800670e <HAL_FLASHEx_Erase+0x76>
>>>>>>> Stashed changes
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
<<<<<<< Updated upstream
 80067c0:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <HAL_FLASHEx_Erase+0xcc>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	761a      	strb	r2, [r3, #24]

  return status;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	200027f8 	.word	0x200027f8
 80067d4:	40022000 	.word	0x40022000

080067d8 <FLASH_MassErase>:
=======
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <HAL_FLASHEx_Erase+0xcc>)
 8006756:	2200      	movs	r2, #0
 8006758:	761a      	strb	r2, [r3, #24]

  return status;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200029a8 	.word	0x200029a8
 8006768:	40022000 	.word	0x40022000

0800676c <FLASH_MassErase>:
>>>>>>> Stashed changes
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
<<<<<<< Updated upstream
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <FLASH_MassErase+0x2c>)
 80067de:	2200      	movs	r2, #0
 80067e0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <FLASH_MassErase+0x30>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <FLASH_MassErase+0x30>)
 80067e8:	f043 0304 	orr.w	r3, r3, #4
 80067ec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <FLASH_MassErase+0x30>)
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	4a05      	ldr	r2, [pc, #20]	; (8006808 <FLASH_MassErase+0x30>)
 80067f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f8:	6113      	str	r3, [r2, #16]
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	200027f8 	.word	0x200027f8
 8006808:	40022000 	.word	0x40022000

0800680c <FLASH_PageErase>:
=======
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <FLASH_MassErase+0x2c>)
 8006772:	2200      	movs	r2, #0
 8006774:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <FLASH_MassErase+0x30>)
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	4a08      	ldr	r2, [pc, #32]	; (800679c <FLASH_MassErase+0x30>)
 800677c:	f043 0304 	orr.w	r3, r3, #4
 8006780:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <FLASH_MassErase+0x30>)
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	4a05      	ldr	r2, [pc, #20]	; (800679c <FLASH_MassErase+0x30>)
 8006788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800678c:	6113      	str	r3, [r2, #16]
}
 800678e:	bf00      	nop
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	200029a8 	.word	0x200029a8
 800679c:	40022000 	.word	0x40022000

080067a0 <FLASH_PageErase>:
>>>>>>> Stashed changes
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
<<<<<<< Updated upstream
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <FLASH_PageErase+0x38>)
 8006816:	2200      	movs	r2, #0
 8006818:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <FLASH_PageErase+0x3c>)
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <FLASH_PageErase+0x3c>)
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006826:	4a08      	ldr	r2, [pc, #32]	; (8006848 <FLASH_PageErase+0x3c>)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <FLASH_PageErase+0x3c>)
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	4a05      	ldr	r2, [pc, #20]	; (8006848 <FLASH_PageErase+0x3c>)
 8006832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006836:	6113      	str	r3, [r2, #16]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	200027f8 	.word	0x200027f8
 8006848:	40022000 	.word	0x40022000

0800684c <HAL_GPIO_Init>:
=======
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <FLASH_PageErase+0x38>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <FLASH_PageErase+0x3c>)
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	4a0a      	ldr	r2, [pc, #40]	; (80067dc <FLASH_PageErase+0x3c>)
 80067b4:	f043 0302 	orr.w	r3, r3, #2
 80067b8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80067ba:	4a08      	ldr	r2, [pc, #32]	; (80067dc <FLASH_PageErase+0x3c>)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <FLASH_PageErase+0x3c>)
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	4a05      	ldr	r2, [pc, #20]	; (80067dc <FLASH_PageErase+0x3c>)
 80067c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ca:	6113      	str	r3, [r2, #16]
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	200029a8 	.word	0x200029a8
 80067dc:	40022000 	.word	0x40022000

080067e0 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
=======
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< Updated upstream
 800685a:	e154      	b.n	8006b06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	2101      	movs	r1, #1
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	fa01 f303 	lsl.w	r3, r1, r3
 8006868:	4013      	ands	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 8146 	beq.w	8006b00 <HAL_GPIO_Init+0x2b4>
=======
 80067ee:	e154      	b.n	8006a9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	2101      	movs	r1, #1
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	fa01 f303 	lsl.w	r3, r1, r3
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8146 	beq.w	8006a94 <HAL_GPIO_Init+0x2b4>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	2b01      	cmp	r3, #1
 800687e:	d005      	beq.n	800688c <HAL_GPIO_Init+0x40>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d130      	bne.n	80068ee <HAL_GPIO_Init+0xa2>
=======
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d005      	beq.n	8006820 <HAL_GPIO_Init+0x40>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d130      	bne.n	8006882 <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	2203      	movs	r2, #3
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4013      	ands	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068c2:	2201      	movs	r2, #1
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	43db      	mvns	r3, r3
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4013      	ands	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	f003 0201 	and.w	r2, r3, #1
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d017      	beq.n	800692a <HAL_GPIO_Init+0xde>
=======
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	2203      	movs	r2, #3
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	43db      	mvns	r3, r3
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4013      	ands	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006856:	2201      	movs	r2, #1
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	43db      	mvns	r3, r3
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4013      	ands	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	f003 0201 	and.w	r2, r3, #1
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b03      	cmp	r3, #3
 800688c:	d017      	beq.n	80068be <HAL_GPIO_Init+0xde>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	2203      	movs	r2, #3
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43db      	mvns	r3, r3
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4013      	ands	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	60da      	str	r2, [r3, #12]
=======
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	2203      	movs	r2, #3
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43db      	mvns	r3, r3
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4013      	ands	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d123      	bne.n	800697e <HAL_GPIO_Init+0x132>
=======
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d123      	bne.n	8006912 <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< Updated upstream
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	08da      	lsrs	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3208      	adds	r2, #8
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	220f      	movs	r2, #15
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	43db      	mvns	r3, r3
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4013      	ands	r3, r2
 8006958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	08da      	lsrs	r2, r3, #3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3208      	adds	r2, #8
 8006978:	6939      	ldr	r1, [r7, #16]
 800697a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	08da      	lsrs	r2, r3, #3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3208      	adds	r2, #8
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	220f      	movs	r2, #15
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43db      	mvns	r3, r3
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4013      	ands	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	08da      	lsrs	r2, r3, #3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3208      	adds	r2, #8
 800690c:	6939      	ldr	r1, [r7, #16]
 800690e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	2203      	movs	r2, #3
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	43db      	mvns	r3, r3
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4013      	ands	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f003 0203 	and.w	r2, r3, #3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	601a      	str	r2, [r3, #0]
=======
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	2203      	movs	r2, #3
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43db      	mvns	r3, r3
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4013      	ands	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f003 0203 	and.w	r2, r3, #3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80a0 	beq.w	8006b00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069c0:	4b58      	ldr	r3, [pc, #352]	; (8006b24 <HAL_GPIO_Init+0x2d8>)
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	4a57      	ldr	r2, [pc, #348]	; (8006b24 <HAL_GPIO_Init+0x2d8>)
 80069c6:	f043 0301 	orr.w	r3, r3, #1
 80069ca:	6193      	str	r3, [r2, #24]
 80069cc:	4b55      	ldr	r3, [pc, #340]	; (8006b24 <HAL_GPIO_Init+0x2d8>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80069d8:	4a53      	ldr	r2, [pc, #332]	; (8006b28 <HAL_GPIO_Init+0x2dc>)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	089b      	lsrs	r3, r3, #2
 80069de:	3302      	adds	r3, #2
 80069e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	220f      	movs	r2, #15
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	43db      	mvns	r3, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a02:	d019      	beq.n	8006a38 <HAL_GPIO_Init+0x1ec>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a49      	ldr	r2, [pc, #292]	; (8006b2c <HAL_GPIO_Init+0x2e0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d013      	beq.n	8006a34 <HAL_GPIO_Init+0x1e8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a48      	ldr	r2, [pc, #288]	; (8006b30 <HAL_GPIO_Init+0x2e4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00d      	beq.n	8006a30 <HAL_GPIO_Init+0x1e4>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a47      	ldr	r2, [pc, #284]	; (8006b34 <HAL_GPIO_Init+0x2e8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <HAL_GPIO_Init+0x1e0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a46      	ldr	r2, [pc, #280]	; (8006b38 <HAL_GPIO_Init+0x2ec>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d101      	bne.n	8006a28 <HAL_GPIO_Init+0x1dc>
 8006a24:	2304      	movs	r3, #4
 8006a26:	e008      	b.n	8006a3a <HAL_GPIO_Init+0x1ee>
 8006a28:	2305      	movs	r3, #5
 8006a2a:	e006      	b.n	8006a3a <HAL_GPIO_Init+0x1ee>
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e004      	b.n	8006a3a <HAL_GPIO_Init+0x1ee>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e002      	b.n	8006a3a <HAL_GPIO_Init+0x1ee>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <HAL_GPIO_Init+0x1ee>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	f002 0203 	and.w	r2, r2, #3
 8006a40:	0092      	lsls	r2, r2, #2
 8006a42:	4093      	lsls	r3, r2
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006a4a:	4937      	ldr	r1, [pc, #220]	; (8006b28 <HAL_GPIO_Init+0x2dc>)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	089b      	lsrs	r3, r3, #2
 8006a50:	3302      	adds	r3, #2
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a58:	4b38      	ldr	r3, [pc, #224]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4013      	ands	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006a7c:	4a2f      	ldr	r2, [pc, #188]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a82:	4b2e      	ldr	r3, [pc, #184]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006aa6:	4a25      	ldr	r2, [pc, #148]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006aac:	4b23      	ldr	r3, [pc, #140]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006ad0:	4a1a      	ldr	r2, [pc, #104]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006afa:	4a10      	ldr	r2, [pc, #64]	; (8006b3c <HAL_GPIO_Init+0x2f0>)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6013      	str	r3, [r2, #0]
=======
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80a0 	beq.w	8006a94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006954:	4b58      	ldr	r3, [pc, #352]	; (8006ab8 <HAL_GPIO_Init+0x2d8>)
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	4a57      	ldr	r2, [pc, #348]	; (8006ab8 <HAL_GPIO_Init+0x2d8>)
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	6193      	str	r3, [r2, #24]
 8006960:	4b55      	ldr	r3, [pc, #340]	; (8006ab8 <HAL_GPIO_Init+0x2d8>)
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800696c:	4a53      	ldr	r2, [pc, #332]	; (8006abc <HAL_GPIO_Init+0x2dc>)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	089b      	lsrs	r3, r3, #2
 8006972:	3302      	adds	r3, #2
 8006974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	220f      	movs	r2, #15
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	43db      	mvns	r3, r3
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4013      	ands	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006996:	d019      	beq.n	80069cc <HAL_GPIO_Init+0x1ec>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a49      	ldr	r2, [pc, #292]	; (8006ac0 <HAL_GPIO_Init+0x2e0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_GPIO_Init+0x1e8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a48      	ldr	r2, [pc, #288]	; (8006ac4 <HAL_GPIO_Init+0x2e4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00d      	beq.n	80069c4 <HAL_GPIO_Init+0x1e4>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a47      	ldr	r2, [pc, #284]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <HAL_GPIO_Init+0x1e0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a46      	ldr	r2, [pc, #280]	; (8006acc <HAL_GPIO_Init+0x2ec>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d101      	bne.n	80069bc <HAL_GPIO_Init+0x1dc>
 80069b8:	2304      	movs	r3, #4
 80069ba:	e008      	b.n	80069ce <HAL_GPIO_Init+0x1ee>
 80069bc:	2305      	movs	r3, #5
 80069be:	e006      	b.n	80069ce <HAL_GPIO_Init+0x1ee>
 80069c0:	2303      	movs	r3, #3
 80069c2:	e004      	b.n	80069ce <HAL_GPIO_Init+0x1ee>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e002      	b.n	80069ce <HAL_GPIO_Init+0x1ee>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <HAL_GPIO_Init+0x1ee>
 80069cc:	2300      	movs	r3, #0
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	f002 0203 	and.w	r2, r2, #3
 80069d4:	0092      	lsls	r2, r2, #2
 80069d6:	4093      	lsls	r3, r2
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80069de:	4937      	ldr	r1, [pc, #220]	; (8006abc <HAL_GPIO_Init+0x2dc>)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	089b      	lsrs	r3, r3, #2
 80069e4:	3302      	adds	r3, #2
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069ec:	4b38      	ldr	r3, [pc, #224]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	43db      	mvns	r3, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006a10:	4a2f      	ldr	r2, [pc, #188]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a16:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006a3a:	4a25      	ldr	r2, [pc, #148]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a40:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006a64:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a6a:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	43db      	mvns	r3, r3
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4013      	ands	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006a8e:	4a10      	ldr	r2, [pc, #64]	; (8006ad0 <HAL_GPIO_Init+0x2f0>)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	3301      	adds	r3, #1
 8006b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f47f aea3 	bne.w	800685c <HAL_GPIO_Init+0x10>
  }
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	40021000 	.word	0x40021000
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	48000400 	.word	0x48000400
 8006b30:	48000800 	.word	0x48000800
 8006b34:	48000c00 	.word	0x48000c00
 8006b38:	48001000 	.word	0x48001000
 8006b3c:	40010400 	.word	0x40010400

08006b40 <HAL_GPIO_WritePin>:
=======
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f47f aea3 	bne.w	80067f0 <HAL_GPIO_Init+0x10>
  }
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	48000400 	.word	0x48000400
 8006ac4:	48000800 	.word	0x48000800
 8006ac8:	48000c00 	.word	0x48000c00
 8006acc:	48001000 	.word	0x48001000
 8006ad0:	40010400 	.word	0x40010400

08006ad4 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	807b      	strh	r3, [r7, #2]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	707b      	strb	r3, [r7, #1]
=======
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	807b      	strh	r3, [r7, #2]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8006b50:	787b      	ldrb	r3, [r7, #1]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	619a      	str	r2, [r3, #24]
=======
 8006ae4:	787b      	ldrb	r3, [r7, #1]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006aea:	887a      	ldrh	r2, [r7, #2]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 8006b5c:	e002      	b.n	8006b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b5e:	887a      	ldrh	r2, [r7, #2]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_GPIO_TogglePin>:
=======
 8006af0:	e002      	b.n	8006af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006af2:	887a      	ldrh	r2, [r7, #2]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_GPIO_TogglePin>:
>>>>>>> Stashed changes
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	807b      	strh	r3, [r7, #2]
=======
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< Updated upstream
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b82:	887a      	ldrh	r2, [r7, #2]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4013      	ands	r3, r2
 8006b88:	041a      	lsls	r2, r3, #16
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	43d9      	mvns	r1, r3
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	400b      	ands	r3, r1
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	619a      	str	r2, [r3, #24]
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_I2C_Init>:
=======
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b16:	887a      	ldrh	r2, [r7, #2]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	041a      	lsls	r2, r3, #16
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	43d9      	mvns	r1, r3
 8006b22:	887b      	ldrh	r3, [r7, #2]
 8006b24:	400b      	ands	r3, r1
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	619a      	str	r2, [r3, #24]
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_I2C_Init>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e081      	b.n	8006cba <HAL_I2C_Init+0x116>
=======
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e081      	b.n	8006c4e <HAL_I2C_Init+0x116>
>>>>>>> Stashed changes
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< Updated upstream
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< Updated upstream
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fd fb0a 	bl	80041e4 <HAL_I2C_MspInit>
=======
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fd fac2 	bl	80040e8 <HAL_I2C_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2224      	movs	r2, #36	; 0x24
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
=======
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2224      	movs	r2, #36	; 0x24
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0201 	bic.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< Updated upstream
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bf4:	611a      	str	r2, [r3, #16]
=======
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b88:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< Updated upstream
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d107      	bne.n	8006c1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c1a:	609a      	str	r2, [r3, #8]
 8006c1c:	e006      	b.n	8006c2c <HAL_I2C_Init+0x88>
=======
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d107      	bne.n	8006bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	e006      	b.n	8006bc0 <HAL_I2C_Init+0x88>
>>>>>>> Stashed changes
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< Updated upstream
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c2a:	609a      	str	r2, [r3, #8]
=======
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006bbe:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< Updated upstream
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d104      	bne.n	8006c3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c50:	6053      	str	r3, [r2, #4]
=======
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d104      	bne.n	8006bd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be4:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< Updated upstream
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	60da      	str	r2, [r3, #12]
=======
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< Updated upstream
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1a      	ldr	r2, [r3, #32]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <HAL_I2C_Master_Transmit>:
=======
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69d9      	ldr	r1, [r3, #28]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_I2C_Master_Transmit>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	607a      	str	r2, [r7, #4]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	817b      	strh	r3, [r7, #10]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	f040 80da 	bne.w	8006e9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_I2C_Master_Transmit+0x30>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e0d3      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cfc:	f7ff f884 	bl	8005e08 <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	2319      	movs	r3, #25
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f001 fc99 	bl	8008646 <I2C_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e0be      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2221      	movs	r2, #33	; 0x21
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2210      	movs	r2, #16
 8006d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	893a      	ldrh	r2, [r7, #8]
 8006d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	461a      	mov	r2, r3
 8006c64:	460b      	mov	r3, r1
 8006c66:	817b      	strh	r3, [r7, #10]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	f040 80da 	bne.w	8006e2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_I2C_Master_Transmit+0x30>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e0d3      	b.n	8006e30 <HAL_I2C_Master_Transmit+0x1d8>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c90:	f7ff f884 	bl	8005d9c <HAL_GetTick>
 8006c94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	2319      	movs	r3, #25
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f001 fc99 	bl	80085da <I2C_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e0be      	b.n	8006e30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2221      	movs	r2, #33	; 0x21
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	893a      	ldrh	r2, [r7, #8]
 8006cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2bff      	cmp	r3, #255	; 0xff
 8006d4e:	d90e      	bls.n	8006d6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	8979      	ldrh	r1, [r7, #10]
 8006d5e:	4b51      	ldr	r3, [pc, #324]	; (8006ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f001 fea8 	bl	8008abc <I2C_TransferConfig>
 8006d6c:	e06c      	b.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
=======
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2bff      	cmp	r3, #255	; 0xff
 8006ce2:	d90e      	bls.n	8006d02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	22ff      	movs	r2, #255	; 0xff
 8006ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	8979      	ldrh	r1, [r7, #10]
 8006cf2:	4b51      	ldr	r3, [pc, #324]	; (8006e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f001 fea8 	bl	8008a50 <I2C_TransferConfig>
 8006d00:	e06c      	b.n	8006ddc <HAL_I2C_Master_Transmit+0x184>
>>>>>>> Stashed changes
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	8979      	ldrh	r1, [r7, #10]
 8006d80:	4b48      	ldr	r3, [pc, #288]	; (8006ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f001 fe97 	bl	8008abc <I2C_TransferConfig>
=======
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	8979      	ldrh	r1, [r7, #10]
 8006d14:	4b48      	ldr	r3, [pc, #288]	; (8006e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f001 fe97 	bl	8008a50 <I2C_TransferConfig>
>>>>>>> Stashed changes
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
<<<<<<< Updated upstream
 8006d8e:	e05b      	b.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	6a39      	ldr	r1, [r7, #32]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f001 fca5 	bl	80086e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e07b      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	781a      	ldrb	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d034      	beq.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d130      	bne.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2200      	movs	r2, #0
 8006dee:	2180      	movs	r1, #128	; 0x80
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 fc28 	bl	8008646 <I2C_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e04d      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2bff      	cmp	r3, #255	; 0xff
 8006e08:	d90e      	bls.n	8006e28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	22ff      	movs	r2, #255	; 0xff
 8006e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	8979      	ldrh	r1, [r7, #10]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f001 fe4b 	bl	8008abc <I2C_TransferConfig>
 8006e26:	e00f      	b.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
=======
 8006d22:	e05b      	b.n	8006ddc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	6a39      	ldr	r1, [r7, #32]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f001 fca5 	bl	8008678 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e07b      	b.n	8006e30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d034      	beq.n	8006ddc <HAL_I2C_Master_Transmit+0x184>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d130      	bne.n	8006ddc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	2200      	movs	r2, #0
 8006d82:	2180      	movs	r1, #128	; 0x80
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f001 fc28 	bl	80085da <I2C_WaitOnFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e04d      	b.n	8006e30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2bff      	cmp	r3, #255	; 0xff
 8006d9c:	d90e      	bls.n	8006dbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	22ff      	movs	r2, #255	; 0xff
 8006da2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	8979      	ldrh	r1, [r7, #10]
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f001 fe4b 	bl	8008a50 <I2C_TransferConfig>
 8006dba:	e00f      	b.n	8006ddc <HAL_I2C_Master_Transmit+0x184>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	8979      	ldrh	r1, [r7, #10]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f001 fe3a 	bl	8008abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d19e      	bne.n	8006d90 <HAL_I2C_Master_Transmit+0xcc>
=======
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	8979      	ldrh	r1, [r7, #10]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f001 fe3a 	bl	8008a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d19e      	bne.n	8006d24 <HAL_I2C_Master_Transmit+0xcc>
>>>>>>> Stashed changes
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	6a39      	ldr	r1, [r7, #32]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 fc8b 	bl	8008772 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e01a      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
=======
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6a39      	ldr	r1, [r7, #32]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f001 fc8b 	bl	8008706 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e01a      	b.n	8006e30 <HAL_I2C_Master_Transmit+0x1d8>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_I2C_Master_Transmit+0x1e4>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
=======
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6859      	ldr	r1, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <HAL_I2C_Master_Transmit+0x1e4>)
 8006e0e:	400b      	ands	r3, r1
 8006e10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <HAL_I2C_Master_Transmit+0x1d8>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	80002000 	.word	0x80002000
 8006ea8:	fe00e800 	.word	0xfe00e800

08006eac <HAL_I2C_Master_Receive>:
=======
 8006e2e:	2302      	movs	r3, #2
  }
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	80002000 	.word	0x80002000
 8006e3c:	fe00e800 	.word	0xfe00e800

08006e40 <HAL_I2C_Master_Receive>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	460b      	mov	r3, r1
 8006eba:	817b      	strh	r3, [r7, #10]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	f040 80db 	bne.w	8007084 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_I2C_Master_Receive+0x30>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e0d4      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ee4:	f7fe ff90 	bl	8005e08 <HAL_GetTick>
 8006ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2319      	movs	r3, #25
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f001 fba5 	bl	8008646 <I2C_WaitOnFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e0bf      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2222      	movs	r2, #34	; 0x22
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2210      	movs	r2, #16
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	893a      	ldrh	r2, [r7, #8]
 8006f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	817b      	strh	r3, [r7, #10]
 8006e50:	4613      	mov	r3, r2
 8006e52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	f040 80db 	bne.w	8007018 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_I2C_Master_Receive+0x30>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e0d4      	b.n	800701a <HAL_I2C_Master_Receive+0x1da>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e78:	f7fe ff90 	bl	8005d9c <HAL_GetTick>
 8006e7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	2319      	movs	r3, #25
 8006e84:	2201      	movs	r2, #1
 8006e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f001 fba5 	bl	80085da <I2C_WaitOnFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e0bf      	b.n	800701a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2222      	movs	r2, #34	; 0x22
 8006e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2210      	movs	r2, #16
 8006ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	893a      	ldrh	r2, [r7, #8]
 8006eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2bff      	cmp	r3, #255	; 0xff
 8006f36:	d90e      	bls.n	8006f56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	22ff      	movs	r2, #255	; 0xff
 8006f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	8979      	ldrh	r1, [r7, #10]
 8006f46:	4b52      	ldr	r3, [pc, #328]	; (8007090 <HAL_I2C_Master_Receive+0x1e4>)
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f001 fdb4 	bl	8008abc <I2C_TransferConfig>
 8006f54:	e06d      	b.n	8007032 <HAL_I2C_Master_Receive+0x186>
=======
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2bff      	cmp	r3, #255	; 0xff
 8006eca:	d90e      	bls.n	8006eea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	22ff      	movs	r2, #255	; 0xff
 8006ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	8979      	ldrh	r1, [r7, #10]
 8006eda:	4b52      	ldr	r3, [pc, #328]	; (8007024 <HAL_I2C_Master_Receive+0x1e4>)
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f001 fdb4 	bl	8008a50 <I2C_TransferConfig>
 8006ee8:	e06d      	b.n	8006fc6 <HAL_I2C_Master_Receive+0x186>
>>>>>>> Stashed changes
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	8979      	ldrh	r1, [r7, #10]
 8006f68:	4b49      	ldr	r3, [pc, #292]	; (8007090 <HAL_I2C_Master_Receive+0x1e4>)
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f001 fda3 	bl	8008abc <I2C_TransferConfig>
=======
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	8979      	ldrh	r1, [r7, #10]
 8006efc:	4b49      	ldr	r3, [pc, #292]	; (8007024 <HAL_I2C_Master_Receive+0x1e4>)
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f001 fda3 	bl	8008a50 <I2C_TransferConfig>
>>>>>>> Stashed changes
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
<<<<<<< Updated upstream
 8006f76:	e05c      	b.n	8007032 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	6a39      	ldr	r1, [r7, #32]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f001 fc3b 	bl	80087f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e07c      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
=======
 8006f0a:	e05c      	b.n	8006fc6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	6a39      	ldr	r1, [r7, #32]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f001 fc3b 	bl	800878c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e07c      	b.n	800701a <HAL_I2C_Master_Receive+0x1da>
>>>>>>> Stashed changes
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
<<<<<<< Updated upstream
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d034      	beq.n	8007032 <HAL_I2C_Master_Receive+0x186>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d130      	bne.n	8007032 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2180      	movs	r1, #128	; 0x80
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f001 fb33 	bl	8008646 <I2C_WaitOnFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e04d      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2bff      	cmp	r3, #255	; 0xff
 8006ff2:	d90e      	bls.n	8007012 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	22ff      	movs	r2, #255	; 0xff
 8006ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	8979      	ldrh	r1, [r7, #10]
 8007002:	2300      	movs	r3, #0
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f001 fd56 	bl	8008abc <I2C_TransferConfig>
 8007010:	e00f      	b.n	8007032 <HAL_I2C_Master_Receive+0x186>
=======
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d034      	beq.n	8006fc6 <HAL_I2C_Master_Receive+0x186>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d130      	bne.n	8006fc6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f001 fb33 	bl	80085da <I2C_WaitOnFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e04d      	b.n	800701a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2bff      	cmp	r3, #255	; 0xff
 8006f86:	d90e      	bls.n	8006fa6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	22ff      	movs	r2, #255	; 0xff
 8006f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	8979      	ldrh	r1, [r7, #10]
 8006f96:	2300      	movs	r3, #0
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f001 fd56 	bl	8008a50 <I2C_TransferConfig>
 8006fa4:	e00f      	b.n	8006fc6 <HAL_I2C_Master_Receive+0x186>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007020:	b2da      	uxtb	r2, r3
 8007022:	8979      	ldrh	r1, [r7, #10]
 8007024:	2300      	movs	r3, #0
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f001 fd45 	bl	8008abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d19d      	bne.n	8006f78 <HAL_I2C_Master_Receive+0xcc>
=======
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	8979      	ldrh	r1, [r7, #10]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fd45 	bl	8008a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d19d      	bne.n	8006f0c <HAL_I2C_Master_Receive+0xcc>
>>>>>>> Stashed changes
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	6a39      	ldr	r1, [r7, #32]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 fb96 	bl	8008772 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e01a      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
=======
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	6a39      	ldr	r1, [r7, #32]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 fb96 	bl	8008706 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e01a      	b.n	800701a <HAL_I2C_Master_Receive+0x1da>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2220      	movs	r2, #32
 8007056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6859      	ldr	r1, [r3, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <HAL_I2C_Master_Receive+0x1e8>)
 8007064:	400b      	ands	r3, r1
 8007066:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	e000      	b.n	8007086 <HAL_I2C_Master_Receive+0x1da>
=======
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6859      	ldr	r1, [r3, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <HAL_I2C_Master_Receive+0x1e8>)
 8006ff8:	400b      	ands	r3, r1
 8006ffa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_I2C_Master_Receive+0x1da>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8007084:	2302      	movs	r3, #2
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	80002400 	.word	0x80002400
 8007094:	fe00e800 	.word	0xfe00e800

08007098 <HAL_I2C_Master_Transmit_IT>:
=======
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	80002400 	.word	0x80002400
 8007028:	fe00e800 	.word	0xfe00e800

0800702c <HAL_I2C_Master_Transmit_IT>:
>>>>>>> Stashed changes
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
<<<<<<< Updated upstream
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	461a      	mov	r2, r3
 80070a4:	460b      	mov	r3, r1
 80070a6:	817b      	strh	r3, [r7, #10]
 80070a8:	4613      	mov	r3, r2
 80070aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d153      	bne.n	8007160 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c6:	d101      	bne.n	80070cc <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80070c8:	2302      	movs	r3, #2
 80070ca:	e04a      	b.n	8007162 <HAL_I2C_Master_Transmit_IT+0xca>
=======
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	461a      	mov	r2, r3
 8007038:	460b      	mov	r3, r1
 800703a:	817b      	strh	r3, [r7, #10]
 800703c:	4613      	mov	r3, r2
 800703e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b20      	cmp	r3, #32
 800704a:	d153      	bne.n	80070f4 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800705a:	d101      	bne.n	8007060 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800705c:	2302      	movs	r3, #2
 800705e:	e04a      	b.n	80070f6 <HAL_I2C_Master_Transmit_IT+0xca>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_I2C_Master_Transmit_IT+0x42>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e043      	b.n	8007162 <HAL_I2C_Master_Transmit_IT+0xca>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2221      	movs	r2, #33	; 0x21
 80070e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2210      	movs	r2, #16
 80070ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	893a      	ldrh	r2, [r7, #8]
 8007102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a19      	ldr	r2, [pc, #100]	; (800716c <HAL_I2C_Master_Transmit_IT+0xd4>)
 8007108:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4a18      	ldr	r2, [pc, #96]	; (8007170 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800710e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007114:	b29b      	uxth	r3, r3
 8007116:	2bff      	cmp	r3, #255	; 0xff
 8007118:	d906      	bls.n	8007128 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	22ff      	movs	r2, #255	; 0xff
 800711e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e007      	b.n	8007138 <HAL_I2C_Master_Transmit_IT+0xa0>
=======
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_I2C_Master_Transmit_IT+0x42>
 800706a:	2302      	movs	r3, #2
 800706c:	e043      	b.n	80070f6 <HAL_I2C_Master_Transmit_IT+0xca>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2221      	movs	r2, #33	; 0x21
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2210      	movs	r2, #16
 8007082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	893a      	ldrh	r2, [r7, #8]
 8007096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4a19      	ldr	r2, [pc, #100]	; (8007100 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800709c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4a18      	ldr	r2, [pc, #96]	; (8007104 <HAL_I2C_Master_Transmit_IT+0xd8>)
 80070a2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2bff      	cmp	r3, #255	; 0xff
 80070ac:	d906      	bls.n	80070bc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	22ff      	movs	r2, #255	; 0xff
 80070b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80070b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e007      	b.n	80070cc <HAL_I2C_Master_Transmit_IT+0xa0>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007136:	617b      	str	r3, [r7, #20]
=======
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80070c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ca:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
<<<<<<< Updated upstream
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	b2da      	uxtb	r2, r3
 800713e:	8979      	ldrh	r1, [r7, #10]
 8007140:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 fcb8 	bl	8008abc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	8979      	ldrh	r1, [r7, #10]
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f001 fcb8 	bl	8008a50 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
<<<<<<< Updated upstream
 8007154:	2101      	movs	r1, #1
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f001 fce2 	bl	8008b20 <I2C_Enable_IRQ>

    return HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	e000      	b.n	8007162 <HAL_I2C_Master_Transmit_IT+0xca>
=======
 80070e8:	2101      	movs	r1, #1
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f001 fce2 	bl	8008ab4 <I2C_Enable_IRQ>

    return HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e000      	b.n	80070f6 <HAL_I2C_Master_Transmit_IT+0xca>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8007160:	2302      	movs	r3, #2
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	ffff0000 	.word	0xffff0000
 8007170:	08007335 	.word	0x08007335
 8007174:	80002000 	.word	0x80002000

08007178 <HAL_I2C_Master_Receive_IT>:
=======
 80070f4:	2302      	movs	r3, #2
  }
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	ffff0000 	.word	0xffff0000
 8007104:	080072c9 	.word	0x080072c9
 8007108:	80002000 	.word	0x80002000

0800710c <HAL_I2C_Master_Receive_IT>:
>>>>>>> Stashed changes
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
<<<<<<< Updated upstream
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	461a      	mov	r2, r3
 8007184:	460b      	mov	r3, r1
 8007186:	817b      	strh	r3, [r7, #10]
 8007188:	4613      	mov	r3, r2
 800718a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b20      	cmp	r3, #32
 8007196:	d153      	bne.n	8007240 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a6:	d101      	bne.n	80071ac <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80071a8:	2302      	movs	r3, #2
 80071aa:	e04a      	b.n	8007242 <HAL_I2C_Master_Receive_IT+0xca>
=======
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	461a      	mov	r2, r3
 8007118:	460b      	mov	r3, r1
 800711a:	817b      	strh	r3, [r7, #10]
 800711c:	4613      	mov	r3, r2
 800711e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b20      	cmp	r3, #32
 800712a:	d153      	bne.n	80071d4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713a:	d101      	bne.n	8007140 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
 800713e:	e04a      	b.n	80071d6 <HAL_I2C_Master_Receive_IT+0xca>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_I2C_Master_Receive_IT+0x42>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e043      	b.n	8007242 <HAL_I2C_Master_Receive_IT+0xca>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2222      	movs	r2, #34	; 0x22
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2210      	movs	r2, #16
 80071ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	893a      	ldrh	r2, [r7, #8]
 80071e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4a19      	ldr	r2, [pc, #100]	; (800724c <HAL_I2C_Master_Receive_IT+0xd4>)
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a18      	ldr	r2, [pc, #96]	; (8007250 <HAL_I2C_Master_Receive_IT+0xd8>)
 80071ee:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2bff      	cmp	r3, #255	; 0xff
 80071f8:	d906      	bls.n	8007208 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	22ff      	movs	r2, #255	; 0xff
 80071fe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e007      	b.n	8007218 <HAL_I2C_Master_Receive_IT+0xa0>
=======
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007146:	2b01      	cmp	r3, #1
 8007148:	d101      	bne.n	800714e <HAL_I2C_Master_Receive_IT+0x42>
 800714a:	2302      	movs	r3, #2
 800714c:	e043      	b.n	80071d6 <HAL_I2C_Master_Receive_IT+0xca>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2222      	movs	r2, #34	; 0x22
 800715a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2210      	movs	r2, #16
 8007162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	893a      	ldrh	r2, [r7, #8]
 8007176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8007182:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007188:	b29b      	uxth	r3, r3
 800718a:	2bff      	cmp	r3, #255	; 0xff
 800718c:	d906      	bls.n	800719c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	22ff      	movs	r2, #255	; 0xff
 8007192:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e007      	b.n	80071ac <HAL_I2C_Master_Receive_IT+0xa0>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007216:	617b      	str	r3, [r7, #20]
=======
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80071a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071aa:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
<<<<<<< Updated upstream
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721c:	b2da      	uxtb	r2, r3
 800721e:	8979      	ldrh	r1, [r7, #10]
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <HAL_I2C_Master_Receive_IT+0xdc>)
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 fc48 	bl	8008abc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	8979      	ldrh	r1, [r7, #10]
 80071b4:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <HAL_I2C_Master_Receive_IT+0xdc>)
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f001 fc48 	bl	8008a50 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
<<<<<<< Updated upstream
 8007234:	2102      	movs	r1, #2
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f001 fc72 	bl	8008b20 <I2C_Enable_IRQ>

    return HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	e000      	b.n	8007242 <HAL_I2C_Master_Receive_IT+0xca>
=======
 80071c8:	2102      	movs	r1, #2
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f001 fc72 	bl	8008ab4 <I2C_Enable_IRQ>

    return HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	e000      	b.n	80071d6 <HAL_I2C_Master_Receive_IT+0xca>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8007240:	2302      	movs	r3, #2
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	ffff0000 	.word	0xffff0000
 8007250:	08007335 	.word	0x08007335
 8007254:	80002400 	.word	0x80002400

08007258 <HAL_I2C_EV_IRQHandler>:
=======
 80071d4:	2302      	movs	r3, #2
  }
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	ffff0000 	.word	0xffff0000
 80071e4:	080072c9 	.word	0x080072c9
 80071e8:	80002400 	.word	0x80002400

080071ec <HAL_I2C_EV_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
<<<<<<< Updated upstream
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
  }
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_I2C_SlaveTxCpltCallback>:
=======
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
  }
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_I2C_SlaveTxCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
=======
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_I2C_SlaveRxCpltCallback>:
=======
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_I2C_SlaveRxCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
=======
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_I2C_AddrCallback>:
=======
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_I2C_AddrCallback>:
>>>>>>> Stashed changes
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
<<<<<<< Updated upstream
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
 80072c0:	4613      	mov	r3, r2
 80072c2:	803b      	strh	r3, [r7, #0]
=======
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
 8007254:	4613      	mov	r3, r2
 8007256:	803b      	strh	r3, [r7, #0]
>>>>>>> Stashed changes
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_I2C_ListenCpltCallback>:
=======
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_I2C_ListenCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
=======
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_I2C_MemTxCpltCallback>:
=======
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_I2C_MemTxCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
=======
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_I2C_MemRxCpltCallback>:
=======
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_I2C_MemRxCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
=======
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_I2C_ErrorCallback>:
=======
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_I2C_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
=======
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_I2C_AbortCpltCallback>:
=======
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_I2C_AbortCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
=======
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <I2C_Master_ISR_IT>:
=======
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <I2C_Master_ISR_IT>:
>>>>>>> Stashed changes
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
<<<<<<< Updated upstream
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <I2C_Master_ISR_IT+0x1e>
 800734e:	2302      	movs	r3, #2
 8007350:	e108      	b.n	8007564 <I2C_Master_ISR_IT+0x230>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d012      	beq.n	800738a <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00d      	beq.n	800738a <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2210      	movs	r2, #16
 8007374:	61da      	str	r2, [r3, #28]
=======
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <I2C_Master_ISR_IT+0x1e>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e108      	b.n	80074f8 <I2C_Master_ISR_IT+0x230>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d012      	beq.n	800731e <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00d      	beq.n	800731e <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2210      	movs	r2, #16
 8007308:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
<<<<<<< Updated upstream
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	f043 0204 	orr.w	r2, r3, #4
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f001 f91d 	bl	80085c2 <I2C_Flush_TXDR>
 8007388:	e0d9      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d022      	beq.n	80073da <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01d      	beq.n	80073da <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 0304 	bic.w	r3, r3, #4
 80073a4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073d8:	e0b1      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01d      	beq.n	8007420 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d018      	beq.n	8007420 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800741e:	e08e      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d05c      	beq.n	80074e4 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007430:	2b00      	cmp	r3, #0
 8007432:	d057      	beq.n	80074e4 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d040      	beq.n	80074c0 <I2C_Master_ISR_IT+0x18c>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007442:	2b00      	cmp	r3, #0
 8007444:	d13c      	bne.n	80074c0 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007452:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007458:	b29b      	uxth	r3, r3
 800745a:	2bff      	cmp	r3, #255	; 0xff
 800745c:	d90e      	bls.n	800747c <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	22ff      	movs	r2, #255	; 0xff
 8007462:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007468:	b2da      	uxtb	r2, r3
 800746a:	8a79      	ldrh	r1, [r7, #18]
 800746c:	2300      	movs	r3, #0
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f001 fb21 	bl	8008abc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800747a:	e032      	b.n	80074e2 <I2C_Master_ISR_IT+0x1ae>
=======
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	f043 0204 	orr.w	r2, r3, #4
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 f91d 	bl	8008556 <I2C_Flush_TXDR>
 800731c:	e0d9      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d022      	beq.n	800736e <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01d      	beq.n	800736e <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f023 0304 	bic.w	r3, r3, #4
 8007338:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800736c:	e0b1      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01d      	beq.n	80073b4 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800737e:	2b00      	cmp	r3, #0
 8007380:	d018      	beq.n	80073b4 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	781a      	ldrb	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073b2:	e08e      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d05c      	beq.n	8007478 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d057      	beq.n	8007478 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d040      	beq.n	8007454 <I2C_Master_ISR_IT+0x18c>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d13c      	bne.n	8007454 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073e6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2bff      	cmp	r3, #255	; 0xff
 80073f0:	d90e      	bls.n	8007410 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	8a79      	ldrh	r1, [r7, #18]
 8007400:	2300      	movs	r3, #0
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 fb21 	bl	8008a50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800740e:	e032      	b.n	8007476 <I2C_Master_ISR_IT+0x1ae>
>>>>>>> Stashed changes
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800748e:	d00b      	beq.n	80074a8 <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007494:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800749a:	8a79      	ldrh	r1, [r7, #18]
 800749c:	2000      	movs	r0, #0
 800749e:	9000      	str	r0, [sp, #0]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f001 fb0b 	bl	8008abc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074a6:	e01c      	b.n	80074e2 <I2C_Master_ISR_IT+0x1ae>
=======
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007422:	d00b      	beq.n	800743c <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007428:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800742e:	8a79      	ldrh	r1, [r7, #18]
 8007430:	2000      	movs	r0, #0
 8007432:	9000      	str	r0, [sp, #0]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fb0b 	bl	8008a50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800743a:	e01c      	b.n	8007476 <I2C_Master_ISR_IT+0x1ae>
>>>>>>> Stashed changes
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
<<<<<<< Updated upstream
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	8a79      	ldrh	r1, [r7, #18]
 80074b0:	2300      	movs	r3, #0
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 faff 	bl	8008abc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074be:	e010      	b.n	80074e2 <I2C_Master_ISR_IT+0x1ae>
=======
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007440:	b2da      	uxtb	r2, r3
 8007442:	8a79      	ldrh	r1, [r7, #18]
 8007444:	2300      	movs	r3, #0
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f001 faff 	bl	8008a50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007452:	e010      	b.n	8007476 <I2C_Master_ISR_IT+0x1ae>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
<<<<<<< Updated upstream
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074ce:	d003      	beq.n	80074d8 <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fca3 	bl	8007e1c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074d6:	e032      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
=======
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007462:	d003      	beq.n	800746c <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 fca3 	bl	8007db0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800746a:	e032      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
>>>>>>> Stashed changes
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< Updated upstream
 80074d8:	2140      	movs	r1, #64	; 0x40
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 ff5a 	bl	8008394 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074e0:	e02d      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
 80074e2:	e02c      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
=======
 800746c:	2140      	movs	r1, #64	; 0x40
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 ff5a 	bl	8008328 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007474:	e02d      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
 8007476:	e02c      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
>>>>>>> Stashed changes
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
<<<<<<< Updated upstream
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d027      	beq.n	800753e <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d022      	beq.n	800753e <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d119      	bne.n	8007536 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007510:	d015      	beq.n	800753e <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800751a:	d108      	bne.n	800752e <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	e007      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
=======
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d027      	beq.n	80074d2 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007488:	2b00      	cmp	r3, #0
 800748a:	d022      	beq.n	80074d2 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d119      	bne.n	80074ca <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074a4:	d015      	beq.n	80074d2 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074ae:	d108      	bne.n	80074c2 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074be:	605a      	str	r2, [r3, #4]
 80074c0:	e007      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
>>>>>>> Stashed changes
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
<<<<<<< Updated upstream
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 fc74 	bl	8007e1c <I2C_ITMasterSeqCplt>
 8007534:	e003      	b.n	800753e <I2C_Master_ISR_IT+0x20a>
=======
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fc74 	bl	8007db0 <I2C_ITMasterSeqCplt>
 80074c8:	e003      	b.n	80074d2 <I2C_Master_ISR_IT+0x20a>
>>>>>>> Stashed changes
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< Updated upstream
 8007536:	2140      	movs	r1, #64	; 0x40
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 ff2b 	bl	8008394 <I2C_ITError>
=======
 80074ca:	2140      	movs	r1, #64	; 0x40
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 ff2b 	bl	8008328 <I2C_ITError>
>>>>>>> Stashed changes
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
<<<<<<< Updated upstream
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007552:	6979      	ldr	r1, [r7, #20]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fcfb 	bl	8007f50 <I2C_ITMasterCplt>
=======
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80074e6:	6979      	ldr	r1, [r7, #20]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fcfb 	bl	8007ee4 <I2C_ITMasterCplt>
>>>>>>> Stashed changes
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< Updated upstream
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <I2C_Slave_ISR_IT>:
=======
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <I2C_Slave_ISR_IT>:
>>>>>>> Stashed changes
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
<<<<<<< Updated upstream
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <I2C_Slave_ISR_IT+0x24>
 800758c:	2302      	movs	r3, #2
 800758e:	e0e1      	b.n	8007754 <I2C_Slave_ISR_IT+0x1e8>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80075ac:	6939      	ldr	r1, [r7, #16]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fd96 	bl	80080e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d04b      	beq.n	8007656 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d046      	beq.n	8007656 <I2C_Slave_ISR_IT+0xea>
=======
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <I2C_Slave_ISR_IT+0x24>
 8007520:	2302      	movs	r3, #2
 8007522:	e0e1      	b.n	80076e8 <I2C_Slave_ISR_IT+0x1e8>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007540:	6939      	ldr	r1, [r7, #16]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fd96 	bl	8008074 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	2b00      	cmp	r3, #0
 8007550:	d04b      	beq.n	80075ea <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007558:	2b00      	cmp	r3, #0
 800755a:	d046      	beq.n	80075ea <I2C_Slave_ISR_IT+0xea>
>>>>>>> Stashed changes
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
<<<<<<< Updated upstream
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d128      	bne.n	8007624 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b28      	cmp	r3, #40	; 0x28
 80075dc:	d108      	bne.n	80075f0 <I2C_Slave_ISR_IT+0x84>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075e4:	d104      	bne.n	80075f0 <I2C_Slave_ISR_IT+0x84>
=======
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d128      	bne.n	80075b8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b28      	cmp	r3, #40	; 0x28
 8007570:	d108      	bne.n	8007584 <I2C_Slave_ISR_IT+0x84>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007578:	d104      	bne.n	8007584 <I2C_Slave_ISR_IT+0x84>
>>>>>>> Stashed changes
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
<<<<<<< Updated upstream
 80075e6:	6939      	ldr	r1, [r7, #16]
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fe7f 	bl	80082ec <I2C_ITListenCplt>
 80075ee:	e031      	b.n	8007654 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b29      	cmp	r3, #41	; 0x29
 80075fa:	d10e      	bne.n	800761a <I2C_Slave_ISR_IT+0xae>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007602:	d00a      	beq.n	800761a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2210      	movs	r2, #16
 800760a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 ffd8 	bl	80085c2 <I2C_Flush_TXDR>
=======
 800757a:	6939      	ldr	r1, [r7, #16]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fe7f 	bl	8008280 <I2C_ITListenCplt>
 8007582:	e031      	b.n	80075e8 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b29      	cmp	r3, #41	; 0x29
 800758e:	d10e      	bne.n	80075ae <I2C_Slave_ISR_IT+0xae>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007596:	d00a      	beq.n	80075ae <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2210      	movs	r2, #16
 800759e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 ffd8 	bl	8008556 <I2C_Flush_TXDR>
>>>>>>> Stashed changes

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< Updated upstream
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fc3f 	bl	8007e96 <I2C_ITSlaveSeqCplt>
 8007618:	e01c      	b.n	8007654 <I2C_Slave_ISR_IT+0xe8>
=======
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fc3f 	bl	8007e2a <I2C_ITSlaveSeqCplt>
 80075ac:	e01c      	b.n	80075e8 <I2C_Slave_ISR_IT+0xe8>
>>>>>>> Stashed changes
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< Updated upstream
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2210      	movs	r2, #16
 8007620:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007622:	e08f      	b.n	8007744 <I2C_Slave_ISR_IT+0x1d8>
=======
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2210      	movs	r2, #16
 80075b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80075b6:	e08f      	b.n	80076d8 <I2C_Slave_ISR_IT+0x1d8>
>>>>>>> Stashed changes
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< Updated upstream
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2210      	movs	r2, #16
 800762a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007630:	f043 0204 	orr.w	r2, r3, #4
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <I2C_Slave_ISR_IT+0xda>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007644:	d17e      	bne.n	8007744 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	4619      	mov	r1, r3
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fea1 	bl	8008394 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007652:	e077      	b.n	8007744 <I2C_Slave_ISR_IT+0x1d8>
 8007654:	e076      	b.n	8007744 <I2C_Slave_ISR_IT+0x1d8>
=======
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2210      	movs	r2, #16
 80075be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c4:	f043 0204 	orr.w	r2, r3, #4
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <I2C_Slave_ISR_IT+0xda>
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d8:	d17e      	bne.n	80076d8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	4619      	mov	r1, r3
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fea1 	bl	8008328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80075e6:	e077      	b.n	80076d8 <I2C_Slave_ISR_IT+0x1d8>
 80075e8:	e076      	b.n	80076d8 <I2C_Slave_ISR_IT+0x1d8>
>>>>>>> Stashed changes
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
<<<<<<< Updated upstream
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d02f      	beq.n	80076c0 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007666:	2b00      	cmp	r3, #0
 8007668:	d02a      	beq.n	80076c0 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d018      	beq.n	80076a6 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d14b      	bne.n	8007748 <I2C_Slave_ISR_IT+0x1dc>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076b6:	d047      	beq.n	8007748 <I2C_Slave_ISR_IT+0x1dc>
=======
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02f      	beq.n	8007654 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d02a      	beq.n	8007654 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d018      	beq.n	800763a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d14b      	bne.n	80076dc <I2C_Slave_ISR_IT+0x1dc>
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800764a:	d047      	beq.n	80076dc <I2C_Slave_ISR_IT+0x1dc>
>>>>>>> Stashed changes
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< Updated upstream
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 fbec 	bl	8007e96 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80076be:	e043      	b.n	8007748 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80076d4:	6939      	ldr	r1, [r7, #16]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fb1c 	bl	8007d14 <I2C_ITAddrCplt>
 80076dc:	e035      	b.n	800774a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d030      	beq.n	800774a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d02b      	beq.n	800774a <I2C_Slave_ISR_IT+0x1de>
=======
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fbec 	bl	8007e2a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007652:	e043      	b.n	80076dc <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007668:	6939      	ldr	r1, [r7, #16]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fb1c 	bl	8007ca8 <I2C_ITAddrCplt>
 8007670:	e035      	b.n	80076de <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d030      	beq.n	80076de <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007682:	2b00      	cmp	r3, #0
 8007684:	d02b      	beq.n	80076de <I2C_Slave_ISR_IT+0x1de>
>>>>>>> Stashed changes
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
<<<<<<< Updated upstream
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d018      	beq.n	800772e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	851a      	strh	r2, [r3, #40]	; 0x28
 800772c:	e00d      	b.n	800774a <I2C_Slave_ISR_IT+0x1de>
=======
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d018      	beq.n	80076c2 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	851a      	strh	r2, [r3, #40]	; 0x28
 80076c0:	e00d      	b.n	80076de <I2C_Slave_ISR_IT+0x1de>
>>>>>>> Stashed changes
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
<<<<<<< Updated upstream
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007734:	d002      	beq.n	800773c <I2C_Slave_ISR_IT+0x1d0>
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <I2C_Slave_ISR_IT+0x1de>
=======
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076c8:	d002      	beq.n	80076d0 <I2C_Slave_ISR_IT+0x1d0>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <I2C_Slave_ISR_IT+0x1de>
>>>>>>> Stashed changes
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< Updated upstream
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fbaa 	bl	8007e96 <I2C_ITSlaveSeqCplt>
 8007742:	e002      	b.n	800774a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8007744:	bf00      	nop
 8007746:	e000      	b.n	800774a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8007748:	bf00      	nop
=======
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 fbaa 	bl	8007e2a <I2C_ITSlaveSeqCplt>
 80076d6:	e002      	b.n	80076de <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80076dc:	bf00      	nop
>>>>>>> Stashed changes
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< Updated upstream
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <I2C_Master_ISR_DMA>:
=======
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <I2C_Master_ISR_DMA>:
>>>>>>> Stashed changes
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
<<<<<<< Updated upstream
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
=======
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <I2C_Master_ISR_DMA+0x1a>
 8007772:	2302      	movs	r3, #2
 8007774:	e0d9      	b.n	800792a <I2C_Master_ISR_DMA+0x1ce>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b00      	cmp	r3, #0
 8007786:	d016      	beq.n	80077b6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800778e:	2b00      	cmp	r3, #0
 8007790:	d011      	beq.n	80077b6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2210      	movs	r2, #16
 8007798:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	f043 0204 	orr.w	r2, r3, #4
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <I2C_Master_ISR_DMA+0x1a>
 8007706:	2302      	movs	r3, #2
 8007708:	e0d9      	b.n	80078be <I2C_Master_ISR_DMA+0x1ce>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f003 0310 	and.w	r3, r3, #16
 8007718:	2b00      	cmp	r3, #0
 800771a:	d016      	beq.n	800774a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007722:	2b00      	cmp	r3, #0
 8007724:	d011      	beq.n	800774a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2210      	movs	r2, #16
 800772c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007732:	f043 0204 	orr.w	r2, r3, #4
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
<<<<<<< Updated upstream
 80077a6:	2120      	movs	r1, #32
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f001 f9b9 	bl	8008b20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 ff07 	bl	80085c2 <I2C_Flush_TXDR>
 80077b4:	e0b4      	b.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d071      	beq.n	80078a4 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d06c      	beq.n	80078a4 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d04e      	beq.n	8007882 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2bff      	cmp	r3, #255	; 0xff
 80077fa:	d906      	bls.n	800780a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	22ff      	movs	r2, #255	; 0xff
 8007800:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e010      	b.n	800782c <I2C_Master_ISR_DMA+0xd0>
=======
 800773a:	2120      	movs	r1, #32
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f001 f9b9 	bl	8008ab4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 ff07 	bl	8008556 <I2C_Flush_TXDR>
 8007748:	e0b4      	b.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007750:	2b00      	cmp	r3, #0
 8007752:	d071      	beq.n	8007838 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800775a:	2b00      	cmp	r3, #0
 800775c:	d06c      	beq.n	8007838 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d04e      	beq.n	8007816 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	b29b      	uxth	r3, r3
 8007780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007784:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778a:	b29b      	uxth	r3, r3
 800778c:	2bff      	cmp	r3, #255	; 0xff
 800778e:	d906      	bls.n	800779e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	22ff      	movs	r2, #255	; 0xff
 8007794:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e010      	b.n	80077c0 <I2C_Master_ISR_DMA+0xd0>
>>>>>>> Stashed changes
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800781c:	d003      	beq.n	8007826 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e002      	b.n	800782c <I2C_Master_ISR_DMA+0xd0>
=======
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077b0:	d003      	beq.n	80077ba <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e002      	b.n	80077c0 <I2C_Master_ISR_DMA+0xd0>
>>>>>>> Stashed changes
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
<<<<<<< Updated upstream
 8007826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800782a:	617b      	str	r3, [r7, #20]
=======
 80077ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077be:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
<<<<<<< Updated upstream
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007830:	b2da      	uxtb	r2, r3
 8007832:	8a79      	ldrh	r1, [r7, #18]
 8007834:	2300      	movs	r3, #0
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f001 f93e 	bl	8008abc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b22      	cmp	r3, #34	; 0x22
 800785c:	d108      	bne.n	8007870 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800786c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800786e:	e057      	b.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
=======
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	8a79      	ldrh	r1, [r7, #18]
 80077c8:	2300      	movs	r3, #0
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f001 f93e 	bl	8008a50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b22      	cmp	r3, #34	; 0x22
 80077f0:	d108      	bne.n	8007804 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007800:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007802:	e057      	b.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
>>>>>>> Stashed changes
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
<<<<<<< Updated upstream
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800787e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007880:	e04e      	b.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
=======
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007812:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007814:	e04e      	b.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
<<<<<<< Updated upstream
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007890:	d003      	beq.n	800789a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 fac2 	bl	8007e1c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007898:	e042      	b.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
=======
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007824:	d003      	beq.n	800782e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fac2 	bl	8007db0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800782c:	e042      	b.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
>>>>>>> Stashed changes
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< Updated upstream
 800789a:	2140      	movs	r1, #64	; 0x40
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fd79 	bl	8008394 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80078a2:	e03d      	b.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
=======
 800782e:	2140      	movs	r1, #64	; 0x40
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 fd79 	bl	8008328 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007836:	e03d      	b.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
>>>>>>> Stashed changes
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
<<<<<<< Updated upstream
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d028      	beq.n	8007900 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d023      	beq.n	8007900 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d119      	bne.n	80078f6 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078d0:	d025      	beq.n	800791e <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078da:	d108      	bne.n	80078ee <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078ea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80078ec:	e017      	b.n	800791e <I2C_Master_ISR_DMA+0x1c2>
=======
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d028      	beq.n	8007894 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007848:	2b00      	cmp	r3, #0
 800784a:	d023      	beq.n	8007894 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d119      	bne.n	800788a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007864:	d025      	beq.n	80078b2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800786e:	d108      	bne.n	8007882 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800787e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007880:	e017      	b.n	80078b2 <I2C_Master_ISR_DMA+0x1c2>
>>>>>>> Stashed changes
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
<<<<<<< Updated upstream
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fa94 	bl	8007e1c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80078f4:	e013      	b.n	800791e <I2C_Master_ISR_DMA+0x1c2>
=======
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fa94 	bl	8007db0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007888:	e013      	b.n	80078b2 <I2C_Master_ISR_DMA+0x1c2>
>>>>>>> Stashed changes
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< Updated upstream
 80078f6:	2140      	movs	r1, #64	; 0x40
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fd4b 	bl	8008394 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80078fe:	e00e      	b.n	800791e <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fb1a 	bl	8007f50 <I2C_ITMasterCplt>
 800791c:	e000      	b.n	8007920 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800791e:	bf00      	nop
=======
 800788a:	2140      	movs	r1, #64	; 0x40
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fd4b 	bl	8008328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007892:	e00e      	b.n	80078b2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fb1a 	bl	8007ee4 <I2C_ITMasterCplt>
 80078b0:	e000      	b.n	80078b4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80078b2:	bf00      	nop
>>>>>>> Stashed changes
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< Updated upstream
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <I2C_Mem_ISR_DMA>:
=======
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <I2C_Mem_ISR_DMA>:
>>>>>>> Stashed changes
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
<<<<<<< Updated upstream
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af02      	add	r7, sp, #8
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007940:	4b87      	ldr	r3, [pc, #540]	; (8007b60 <I2C_Mem_ISR_DMA+0x22c>)
 8007942:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <I2C_Mem_ISR_DMA+0x1e>
 800794e:	2302      	movs	r3, #2
 8007950:	e102      	b.n	8007b58 <I2C_Mem_ISR_DMA+0x224>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	2b00      	cmp	r3, #0
 8007962:	d016      	beq.n	8007992 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800796a:	2b00      	cmp	r3, #0
 800796c:	d011      	beq.n	8007992 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2210      	movs	r2, #16
 8007974:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	f043 0204 	orr.w	r2, r3, #4
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80078d4:	4b87      	ldr	r3, [pc, #540]	; (8007af4 <I2C_Mem_ISR_DMA+0x22c>)
 80078d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <I2C_Mem_ISR_DMA+0x1e>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e102      	b.n	8007aec <I2C_Mem_ISR_DMA+0x224>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d016      	beq.n	8007926 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d011      	beq.n	8007926 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2210      	movs	r2, #16
 8007908:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790e:	f043 0204 	orr.w	r2, r3, #4
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
<<<<<<< Updated upstream
 8007982:	2120      	movs	r1, #32
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f001 f8cb 	bl	8008b20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fe19 	bl	80085c2 <I2C_Flush_TXDR>
 8007990:	e0dd      	b.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00e      	beq.n	80079ba <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	651a      	str	r2, [r3, #80]	; 0x50
 80079b8:	e0c9      	b.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d05b      	beq.n	8007a7c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d056      	beq.n	8007a7c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80079ce:	2110      	movs	r1, #16
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 f8a5 	bl	8008b20 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d048      	beq.n	8007a72 <I2C_Mem_ISR_DMA+0x13e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2bff      	cmp	r3, #255	; 0xff
 80079e8:	d910      	bls.n	8007a0c <I2C_Mem_ISR_DMA+0xd8>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	22ff      	movs	r2, #255	; 0xff
 80079ee:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f4:	b299      	uxth	r1, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	2300      	movs	r3, #0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f001 f859 	bl	8008abc <I2C_TransferConfig>
 8007a0a:	e011      	b.n	8007a30 <I2C_Mem_ISR_DMA+0xfc>
=======
 8007916:	2120      	movs	r1, #32
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f001 f8cb 	bl	8008ab4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fe19 	bl	8008556 <I2C_Flush_TXDR>
 8007924:	e0dd      	b.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007942:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	651a      	str	r2, [r3, #80]	; 0x50
 800794c:	e0c9      	b.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007954:	2b00      	cmp	r3, #0
 8007956:	d05b      	beq.n	8007a10 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800795e:	2b00      	cmp	r3, #0
 8007960:	d056      	beq.n	8007a10 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007962:	2110      	movs	r1, #16
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f001 f8a5 	bl	8008ab4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d048      	beq.n	8007a06 <I2C_Mem_ISR_DMA+0x13e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	2bff      	cmp	r3, #255	; 0xff
 800797c:	d910      	bls.n	80079a0 <I2C_Mem_ISR_DMA+0xd8>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	22ff      	movs	r2, #255	; 0xff
 8007982:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007988:	b299      	uxth	r1, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798e:	b2da      	uxtb	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f001 f859 	bl	8008a50 <I2C_TransferConfig>
 800799e:	e011      	b.n	80079c4 <I2C_Mem_ISR_DMA+0xfc>
>>>>>>> Stashed changes
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	b299      	uxth	r1, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	2300      	movs	r3, #0
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f001 f846 	bl	8008abc <I2C_TransferConfig>
=======
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ae:	b299      	uxth	r1, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	2300      	movs	r3, #0
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f001 f846 	bl	8008a50 <I2C_TransferConfig>
>>>>>>> Stashed changes
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
<<<<<<< Updated upstream
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b22      	cmp	r3, #34	; 0x22
 8007a4c:	d108      	bne.n	8007a60 <I2C_Mem_ISR_DMA+0x12c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007a5e:	e076      	b.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
=======
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b22      	cmp	r3, #34	; 0x22
 80079e0:	d108      	bne.n	80079f4 <I2C_Mem_ISR_DMA+0x12c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80079f2:	e076      	b.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
>>>>>>> Stashed changes
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
<<<<<<< Updated upstream
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a6e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007a70:	e06d      	b.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
=======
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a02:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007a04:	e06d      	b.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
>>>>>>> Stashed changes
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
<<<<<<< Updated upstream
 8007a72:	2140      	movs	r1, #64	; 0x40
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fc8d 	bl	8008394 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007a7a:	e068      	b.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d055      	beq.n	8007b32 <I2C_Mem_ISR_DMA+0x1fe>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d050      	beq.n	8007b32 <I2C_Mem_ISR_DMA+0x1fe>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b22      	cmp	r3, #34	; 0x22
 8007a9a:	d101      	bne.n	8007aa0 <I2C_Mem_ISR_DMA+0x16c>
    {
      direction = I2C_GENERATE_START_READ;
 8007a9c:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <I2C_Mem_ISR_DMA+0x230>)
 8007a9e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2bff      	cmp	r3, #255	; 0xff
 8007aa8:	d910      	bls.n	8007acc <I2C_Mem_ISR_DMA+0x198>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab4:	b299      	uxth	r1, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fff9 	bl	8008abc <I2C_TransferConfig>
 8007aca:	e011      	b.n	8007af0 <I2C_Mem_ISR_DMA+0x1bc>
=======
 8007a06:	2140      	movs	r1, #64	; 0x40
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fc8d 	bl	8008328 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007a0e:	e068      	b.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d055      	beq.n	8007ac6 <I2C_Mem_ISR_DMA+0x1fe>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d050      	beq.n	8007ac6 <I2C_Mem_ISR_DMA+0x1fe>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b22      	cmp	r3, #34	; 0x22
 8007a2e:	d101      	bne.n	8007a34 <I2C_Mem_ISR_DMA+0x16c>
    {
      direction = I2C_GENERATE_START_READ;
 8007a30:	4b31      	ldr	r3, [pc, #196]	; (8007af8 <I2C_Mem_ISR_DMA+0x230>)
 8007a32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	d910      	bls.n	8007a60 <I2C_Mem_ISR_DMA+0x198>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22ff      	movs	r2, #255	; 0xff
 8007a42:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a48:	b299      	uxth	r1, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fff9 	bl	8008a50 <I2C_TransferConfig>
 8007a5e:	e011      	b.n	8007a84 <I2C_Mem_ISR_DMA+0x1bc>
>>>>>>> Stashed changes
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ada:	b299      	uxth	r1, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 ffe6 	bl	8008abc <I2C_TransferConfig>
=======
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	b299      	uxth	r1, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 ffe6 	bl	8008a50 <I2C_TransferConfig>
>>>>>>> Stashed changes
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
<<<<<<< Updated upstream
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b22      	cmp	r3, #34	; 0x22
 8007b0c:	d108      	bne.n	8007b20 <I2C_Mem_ISR_DMA+0x1ec>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b1c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b1e:	e016      	b.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
=======
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b22      	cmp	r3, #34	; 0x22
 8007aa0:	d108      	bne.n	8007ab4 <I2C_Mem_ISR_DMA+0x1ec>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ab0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ab2:	e016      	b.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
<<<<<<< Updated upstream
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b2e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b30:	e00d      	b.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <I2C_Mem_ISR_DMA+0x21a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fa01 	bl	8007f50 <I2C_ITMasterCplt>
=======
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ac2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ac4:	e00d      	b.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d008      	beq.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <I2C_Mem_ISR_DMA+0x21a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fa01 	bl	8007ee4 <I2C_ITMasterCplt>
>>>>>>> Stashed changes
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< Updated upstream
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	80002000 	.word	0x80002000
 8007b64:	80002400 	.word	0x80002400

08007b68 <I2C_Slave_ISR_DMA>:
=======
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	80002000 	.word	0x80002000
 8007af8:	80002400 	.word	0x80002400

08007afc <I2C_Slave_ISR_DMA>:
>>>>>>> Stashed changes
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
<<<<<<< Updated upstream
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
=======
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <I2C_Slave_ISR_DMA+0x24>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e0bf      	b.n	8007d0c <I2C_Slave_ISR_DMA+0x1a4>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fa98 	bl	80080e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 8095 	beq.w	8007ce6 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 808f 	beq.w	8007ce6 <I2C_Slave_ISR_DMA+0x17e>
=======
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <I2C_Slave_ISR_DMA+0x24>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e0bf      	b.n	8007ca0 <I2C_Slave_ISR_DMA+0x1a4>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d008      	beq.n	8007b44 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fa98 	bl	8008074 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8095 	beq.w	8007c7a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 808f 	beq.w	8007c7a <I2C_Slave_ISR_DMA+0x17e>
>>>>>>> Stashed changes
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
<<<<<<< Updated upstream
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d07d      	beq.n	8007cd8 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00c      	beq.n	8007bfe <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d007      	beq.n	8007bfe <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]
=======
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d07d      	beq.n	8007c6c <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00c      	beq.n	8007b92 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
<<<<<<< Updated upstream
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00c      	beq.n	8007c20 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	61fb      	str	r3, [r7, #28]
=======
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00c      	beq.n	8007bb4 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
          }
        }
      }

      if (treatdmanack == 1U)
<<<<<<< Updated upstream
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d128      	bne.n	8007c78 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b28      	cmp	r3, #40	; 0x28
 8007c30:	d108      	bne.n	8007c44 <I2C_Slave_ISR_DMA+0xdc>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c38:	d104      	bne.n	8007c44 <I2C_Slave_ISR_DMA+0xdc>
=======
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d128      	bne.n	8007c0c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b28      	cmp	r3, #40	; 0x28
 8007bc4:	d108      	bne.n	8007bd8 <I2C_Slave_ISR_DMA+0xdc>
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bcc:	d104      	bne.n	8007bd8 <I2C_Slave_ISR_DMA+0xdc>
>>>>>>> Stashed changes
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
<<<<<<< Updated upstream
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fb55 	bl	80082ec <I2C_ITListenCplt>
 8007c42:	e048      	b.n	8007cd6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b29      	cmp	r3, #41	; 0x29
 8007c4e:	d10e      	bne.n	8007c6e <I2C_Slave_ISR_DMA+0x106>
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c56:	d00a      	beq.n	8007c6e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2210      	movs	r2, #16
 8007c5e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fcae 	bl	80085c2 <I2C_Flush_TXDR>
=======
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fb55 	bl	8008280 <I2C_ITListenCplt>
 8007bd6:	e048      	b.n	8007c6a <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b29      	cmp	r3, #41	; 0x29
 8007be2:	d10e      	bne.n	8007c02 <I2C_Slave_ISR_DMA+0x106>
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bea:	d00a      	beq.n	8007c02 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2210      	movs	r2, #16
 8007bf2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fcae 	bl	8008556 <I2C_Flush_TXDR>
>>>>>>> Stashed changes

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
<<<<<<< Updated upstream
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f915 	bl	8007e96 <I2C_ITSlaveSeqCplt>
 8007c6c:	e033      	b.n	8007cd6 <I2C_Slave_ISR_DMA+0x16e>
=======
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f915 	bl	8007e2a <I2C_ITSlaveSeqCplt>
 8007c00:	e033      	b.n	8007c6a <I2C_Slave_ISR_DMA+0x16e>
>>>>>>> Stashed changes
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< Updated upstream
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2210      	movs	r2, #16
 8007c74:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007c76:	e034      	b.n	8007ce2 <I2C_Slave_ISR_DMA+0x17a>
=======
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2210      	movs	r2, #16
 8007c08:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007c0a:	e034      	b.n	8007c76 <I2C_Slave_ISR_DMA+0x17a>
>>>>>>> Stashed changes
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< Updated upstream
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2210      	movs	r2, #16
 8007c7e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c84:	f043 0204 	orr.w	r2, r3, #4
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c92:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <I2C_Slave_ISR_DMA+0x13a>
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ca0:	d11f      	bne.n	8007ce2 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2b21      	cmp	r3, #33	; 0x21
 8007ca6:	d002      	beq.n	8007cae <I2C_Slave_ISR_DMA+0x146>
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b29      	cmp	r3, #41	; 0x29
 8007cac:	d103      	bne.n	8007cb6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2221      	movs	r2, #33	; 0x21
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8007cb4:	e008      	b.n	8007cc8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	2b22      	cmp	r3, #34	; 0x22
 8007cba:	d002      	beq.n	8007cc2 <I2C_Slave_ISR_DMA+0x15a>
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc0:	d102      	bne.n	8007cc8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2222      	movs	r2, #34	; 0x22
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2210      	movs	r2, #16
 8007c12:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c18:	f043 0204 	orr.w	r2, r3, #4
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c26:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <I2C_Slave_ISR_DMA+0x13a>
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c34:	d11f      	bne.n	8007c76 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	2b21      	cmp	r3, #33	; 0x21
 8007c3a:	d002      	beq.n	8007c42 <I2C_Slave_ISR_DMA+0x146>
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	2b29      	cmp	r3, #41	; 0x29
 8007c40:	d103      	bne.n	8007c4a <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2221      	movs	r2, #33	; 0x21
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
 8007c48:	e008      	b.n	8007c5c <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	2b22      	cmp	r3, #34	; 0x22
 8007c4e:	d002      	beq.n	8007c56 <I2C_Slave_ISR_DMA+0x15a>
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b2a      	cmp	r3, #42	; 0x2a
 8007c54:	d102      	bne.n	8007c5c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2222      	movs	r2, #34	; 0x22
 8007c5a:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
<<<<<<< Updated upstream
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ccc:	4619      	mov	r1, r3
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fb60 	bl	8008394 <I2C_ITError>
      if (treatdmanack == 1U)
 8007cd4:	e005      	b.n	8007ce2 <I2C_Slave_ISR_DMA+0x17a>
 8007cd6:	e004      	b.n	8007ce2 <I2C_Slave_ISR_DMA+0x17a>
=======
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c60:	4619      	mov	r1, r3
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fb60 	bl	8008328 <I2C_ITError>
      if (treatdmanack == 1U)
 8007c68:	e005      	b.n	8007c76 <I2C_Slave_ISR_DMA+0x17a>
 8007c6a:	e004      	b.n	8007c76 <I2C_Slave_ISR_DMA+0x17a>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< Updated upstream
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2210      	movs	r2, #16
 8007cde:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ce0:	e00f      	b.n	8007d02 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8007ce2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ce4:	e00d      	b.n	8007d02 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f003 0308 	and.w	r3, r3, #8
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f809 	bl	8007d14 <I2C_ITAddrCplt>
=======
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2210      	movs	r2, #16
 8007c72:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c74:	e00f      	b.n	8007c96 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8007c76:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c78:	e00d      	b.n	8007c96 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d008      	beq.n	8007c96 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f809 	bl	8007ca8 <I2C_ITAddrCplt>
>>>>>>> Stashed changes
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
<<<<<<< Updated upstream
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3720      	adds	r7, #32
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <I2C_ITAddrCplt>:
=======
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <I2C_ITAddrCplt>:
>>>>>>> Stashed changes
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< Updated upstream
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
=======
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
<<<<<<< Updated upstream
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d2a:	2b28      	cmp	r3, #40	; 0x28
 8007d2c:	d16a      	bne.n	8007e04 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007d4c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d5a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007d68:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d138      	bne.n	8007de4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007d72:	897b      	ldrh	r3, [r7, #10]
 8007d74:	09db      	lsrs	r3, r3, #7
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	89bb      	ldrh	r3, [r7, #12]
 8007d7a:	4053      	eors	r3, r2
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f003 0306 	and.w	r3, r3, #6
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d11c      	bne.n	8007dc0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007d86:	897b      	ldrh	r3, [r7, #10]
 8007d88:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d13b      	bne.n	8007e14 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2208      	movs	r2, #8
 8007da8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cbe:	2b28      	cmp	r3, #40	; 0x28
 8007cc0:	d16a      	bne.n	8007d98 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	0c1b      	lsrs	r3, r3, #16
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007ce0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007cfc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d138      	bne.n	8007d78 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007d06:	897b      	ldrh	r3, [r7, #10]
 8007d08:	09db      	lsrs	r3, r3, #7
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	89bb      	ldrh	r3, [r7, #12]
 8007d0e:	4053      	eors	r3, r2
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	f003 0306 	and.w	r3, r3, #6
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d11c      	bne.n	8007d54 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007d1a:	897b      	ldrh	r3, [r7, #10]
 8007d1c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d13b      	bne.n	8007da8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
<<<<<<< Updated upstream
 8007db2:	89ba      	ldrh	r2, [r7, #12]
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff fa7b 	bl	80072b4 <HAL_I2C_AddrCallback>
=======
 8007d46:	89ba      	ldrh	r2, [r7, #12]
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fa7b 	bl	8007248 <HAL_I2C_AddrCallback>
>>>>>>> Stashed changes
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
<<<<<<< Updated upstream
 8007dbe:	e029      	b.n	8007e14 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007dc0:	893b      	ldrh	r3, [r7, #8]
 8007dc2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 ff31 	bl	8008c30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007dd6:	89ba      	ldrh	r2, [r7, #12]
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff fa69 	bl	80072b4 <HAL_I2C_AddrCallback>
}
 8007de2:	e017      	b.n	8007e14 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 ff21 	bl	8008c30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007df6:	89ba      	ldrh	r2, [r7, #12]
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff fa59 	bl	80072b4 <HAL_I2C_AddrCallback>
}
 8007e02:	e007      	b.n	8007e14 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <I2C_ITMasterSeqCplt>:
=======
 8007d52:	e029      	b.n	8007da8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007d54:	893b      	ldrh	r3, [r7, #8]
 8007d56:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 ff31 	bl	8008bc4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d6a:	89ba      	ldrh	r2, [r7, #12]
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fa69 	bl	8007248 <HAL_I2C_AddrCallback>
}
 8007d76:	e017      	b.n	8007da8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 ff21 	bl	8008bc4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d8a:	89ba      	ldrh	r2, [r7, #12]
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fa59 	bl	8007248 <HAL_I2C_AddrCallback>
}
 8007d96:	e007      	b.n	8007da8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <I2C_ITMasterSeqCplt>:
>>>>>>> Stashed changes
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
=======
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
>>>>>>> Stashed changes

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b21      	cmp	r3, #33	; 0x21
 8007e36:	d115      	bne.n	8007e64 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2211      	movs	r2, #17
 8007e44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 feee 	bl	8008c30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b21      	cmp	r3, #33	; 0x21
 8007dca:	d115      	bne.n	8007df8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2211      	movs	r2, #17
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007de0:	2101      	movs	r1, #1
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 feee 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
<<<<<<< Updated upstream
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7fa f9b8 	bl	80021d2 <HAL_I2C_MasterTxCpltCallback>
=======
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fa f9f4 	bl	80021de <HAL_I2C_MasterTxCpltCallback>
>>>>>>> Stashed changes
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 8007e62:	e014      	b.n	8007e8e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2212      	movs	r2, #18
 8007e70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007e78:	2102      	movs	r1, #2
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fed8 	bl	8008c30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7fa f997 	bl	80021bc <HAL_I2C_MasterRxCpltCallback>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <I2C_ITSlaveSeqCplt>:
=======
 8007df6:	e014      	b.n	8007e22 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2212      	movs	r2, #18
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007e0c:	2102      	movs	r1, #2
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fed8 	bl	8008bc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7fa f9d3 	bl	80021c8 <HAL_I2C_MasterRxCpltCallback>
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <I2C_ITSlaveSeqCplt>:
>>>>>>> Stashed changes
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d008      	beq.n	8007eca <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e00c      	b.n	8007ee4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ee2:	601a      	str	r2, [r3, #0]
=======
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e00c      	b.n	8007e78 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d007      	beq.n	8007e78 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e76:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
<<<<<<< Updated upstream
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b29      	cmp	r3, #41	; 0x29
 8007eee:	d112      	bne.n	8007f16 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2228      	movs	r2, #40	; 0x28
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2221      	movs	r2, #33	; 0x21
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007efe:	2101      	movs	r1, #1
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fe95 	bl	8008c30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b29      	cmp	r3, #41	; 0x29
 8007e82:	d112      	bne.n	8007eaa <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2228      	movs	r2, #40	; 0x28
 8007e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2221      	movs	r2, #33	; 0x21
 8007e90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007e92:	2101      	movs	r1, #1
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fe95 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
<<<<<<< Updated upstream
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff f9bc 	bl	800728c <HAL_I2C_SlaveTxCpltCallback>
=======
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff f9bc 	bl	8007220 <HAL_I2C_SlaveTxCpltCallback>
>>>>>>> Stashed changes
  }
  else
  {
    /* Nothing to do */
  }
}
<<<<<<< Updated upstream
 8007f14:	e017      	b.n	8007f46 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f20:	d111      	bne.n	8007f46 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2228      	movs	r2, #40	; 0x28
 8007f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2222      	movs	r2, #34	; 0x22
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007f30:	2102      	movs	r1, #2
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fe7c 	bl	8008c30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff f9ad 	bl	80072a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <I2C_ITMasterCplt>:
=======
 8007ea8:	e017      	b.n	8007eda <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb4:	d111      	bne.n	8007eda <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2228      	movs	r2, #40	; 0x28
 8007eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2222      	movs	r2, #34	; 0x22
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007ec4:	2102      	movs	r1, #2
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fe7c 	bl	8008bc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff f9ad 	bl	8007234 <HAL_I2C_SlaveRxCpltCallback>
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <I2C_ITMasterCplt>:
>>>>>>> Stashed changes
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< Updated upstream
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	617b      	str	r3, [r7, #20]
=======
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2220      	movs	r2, #32
 8007f64:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b21      	cmp	r3, #33	; 0x21
 8007f70:	d107      	bne.n	8007f82 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007f72:	2101      	movs	r1, #1
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fe5b 	bl	8008c30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2211      	movs	r2, #17
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f80:	e00c      	b.n	8007f9c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b22      	cmp	r3, #34	; 0x22
 8007f8c:	d106      	bne.n	8007f9c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007f8e:	2102      	movs	r1, #2
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fe4d 	bl	8008c30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2212      	movs	r2, #18
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b21      	cmp	r3, #33	; 0x21
 8007f04:	d107      	bne.n	8007f16 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007f06:	2101      	movs	r1, #1
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fe5b 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2211      	movs	r2, #17
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
 8007f14:	e00c      	b.n	8007f30 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b22      	cmp	r3, #34	; 0x22
 8007f20:	d106      	bne.n	8007f30 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007f22:	2102      	movs	r1, #2
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fe4d 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2212      	movs	r2, #18
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
<<<<<<< Updated upstream
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b4c      	ldr	r3, [pc, #304]	; (80080d8 <I2C_ITMasterCplt+0x188>)
 8007fa8:	400b      	ands	r3, r1
 8007faa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a49      	ldr	r2, [pc, #292]	; (80080dc <I2C_ITMasterCplt+0x18c>)
 8007fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d009      	beq.n	8007fd6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	f043 0204 	orr.w	r2, r3, #4
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6859      	ldr	r1, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b4c      	ldr	r3, [pc, #304]	; (800806c <I2C_ITMasterCplt+0x188>)
 8007f3c:	400b      	ands	r3, r1
 8007f3e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a49      	ldr	r2, [pc, #292]	; (8008070 <I2C_ITMasterCplt+0x18c>)
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d009      	beq.n	8007f6a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2210      	movs	r2, #16
 8007f5c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	f043 0204 	orr.w	r2, r3, #4
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
<<<<<<< Updated upstream
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b60      	cmp	r3, #96	; 0x60
 8007fe0:	d10a      	bne.n	8007ff8 <I2C_ITMasterCplt+0xa8>
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
=======
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b60      	cmp	r3, #96	; 0x60
 8007f74:	d10a      	bne.n	8007f8c <I2C_ITMasterCplt+0xa8>
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
<<<<<<< Updated upstream
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fae2 	bl	80085c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008002:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b60      	cmp	r3, #96	; 0x60
 800800e:	d002      	beq.n	8008016 <I2C_ITMasterCplt+0xc6>
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d006      	beq.n	8008024 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f9b9 	bl	8008394 <I2C_ITError>
=======
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fae2 	bl	8008556 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b60      	cmp	r3, #96	; 0x60
 8007fa2:	d002      	beq.n	8007faa <I2C_ITMasterCplt+0xc6>
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d006      	beq.n	8007fb8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f9b9 	bl	8008328 <I2C_ITError>
>>>>>>> Stashed changes
  }
  else
  {
    /* Nothing to do */
  }
}
<<<<<<< Updated upstream
 8008022:	e054      	b.n	80080ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b21      	cmp	r3, #33	; 0x21
 800802e:	d124      	bne.n	800807a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d10b      	bne.n	8008062 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff f942 	bl	80072e4 <HAL_I2C_MemTxCpltCallback>
}
 8008060:	e035      	b.n	80080ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fa f8ad 	bl	80021d2 <HAL_I2C_MasterTxCpltCallback>
}
 8008078:	e029      	b.n	80080ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b22      	cmp	r3, #34	; 0x22
 8008084:	d123      	bne.n	80080ce <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b40      	cmp	r3, #64	; 0x40
 800809e:	d10b      	bne.n	80080b8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff f921 	bl	80072f8 <HAL_I2C_MemRxCpltCallback>
}
 80080b6:	e00a      	b.n	80080ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7fa f877 	bl	80021bc <HAL_I2C_MasterRxCpltCallback>
}
 80080ce:	bf00      	nop
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	fe00e800 	.word	0xfe00e800
 80080dc:	ffff0000 	.word	0xffff0000

080080e0 <I2C_ITSlaveCplt>:
=======
 8007fb6:	e054      	b.n	8008062 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b21      	cmp	r3, #33	; 0x21
 8007fc2:	d124      	bne.n	800800e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d10b      	bne.n	8007ff6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff f942 	bl	8007278 <HAL_I2C_MemTxCpltCallback>
}
 8007ff4:	e035      	b.n	8008062 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fa f8e9 	bl	80021de <HAL_I2C_MasterTxCpltCallback>
}
 800800c:	e029      	b.n	8008062 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b22      	cmp	r3, #34	; 0x22
 8008018:	d123      	bne.n	8008062 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b40      	cmp	r3, #64	; 0x40
 8008032:	d10b      	bne.n	800804c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff f921 	bl	800728c <HAL_I2C_MemRxCpltCallback>
}
 800804a:	e00a      	b.n	8008062 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fa f8b3 	bl	80021c8 <HAL_I2C_MasterRxCpltCallback>
}
 8008062:	bf00      	nop
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	fe00e800 	.word	0xfe00e800
 8008070:	ffff0000 	.word	0xffff0000

08008074 <I2C_ITSlaveCplt>:
>>>>>>> Stashed changes
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< Updated upstream
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080fc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2220      	movs	r2, #32
 8008104:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	2b21      	cmp	r3, #33	; 0x21
 800810a:	d002      	beq.n	8008112 <I2C_ITSlaveCplt+0x32>
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b29      	cmp	r3, #41	; 0x29
 8008110:	d108      	bne.n	8008124 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008112:	f248 0101 	movw	r1, #32769	; 0x8001
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fd8a 	bl	8008c30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2221      	movs	r2, #33	; 0x21
 8008120:	631a      	str	r2, [r3, #48]	; 0x30
 8008122:	e00d      	b.n	8008140 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b22      	cmp	r3, #34	; 0x22
 8008128:	d002      	beq.n	8008130 <I2C_ITSlaveCplt+0x50>
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b2a      	cmp	r3, #42	; 0x2a
 800812e:	d107      	bne.n	8008140 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008130:	f248 0102 	movw	r1, #32770	; 0x8002
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fd7b 	bl	8008c30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2222      	movs	r2, #34	; 0x22
 800813e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008090:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2220      	movs	r2, #32
 8008098:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b21      	cmp	r3, #33	; 0x21
 800809e:	d002      	beq.n	80080a6 <I2C_ITSlaveCplt+0x32>
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b29      	cmp	r3, #41	; 0x29
 80080a4:	d108      	bne.n	80080b8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80080a6:	f248 0101 	movw	r1, #32769	; 0x8001
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fd8a 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2221      	movs	r2, #33	; 0x21
 80080b4:	631a      	str	r2, [r3, #48]	; 0x30
 80080b6:	e00d      	b.n	80080d4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b22      	cmp	r3, #34	; 0x22
 80080bc:	d002      	beq.n	80080c4 <I2C_ITSlaveCplt+0x50>
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b2a      	cmp	r3, #42	; 0x2a
 80080c2:	d107      	bne.n	80080d4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80080c4:	f248 0102 	movw	r1, #32770	; 0x8002
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fd7b 	bl	8008bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2222      	movs	r2, #34	; 0x22
 80080d2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
<<<<<<< Updated upstream
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800814e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6859      	ldr	r1, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b62      	ldr	r3, [pc, #392]	; (80082e4 <I2C_ITSlaveCplt+0x204>)
 800815c:	400b      	ands	r3, r1
 800815e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fa2e 	bl	80085c2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d013      	beq.n	8008198 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800817e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01f      	beq.n	80081c8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008196:	e017      	b.n	80081c8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d012      	beq.n	80081c8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d006      	beq.n	80081c8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	855a      	strh	r2, [r3, #42]	; 0x2a
=======
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080e2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6859      	ldr	r1, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	4b62      	ldr	r3, [pc, #392]	; (8008278 <I2C_ITSlaveCplt+0x204>)
 80080f0:	400b      	ands	r3, r1
 80080f2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa2e 	bl	8008556 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d013      	beq.n	800812c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008112:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01f      	beq.n	800815c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	855a      	strh	r2, [r3, #42]	; 0x2a
 800812a:	e017      	b.n	800815c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d012      	beq.n	800815c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008144:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	b29a      	uxth	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	855a      	strh	r2, [r3, #42]	; 0x2a
>>>>>>> Stashed changes
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
<<<<<<< Updated upstream
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d020      	beq.n	8008214 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f023 0304 	bic.w	r3, r3, #4
 80081d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00c      	beq.n	8008214 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	855a      	strh	r2, [r3, #42]	; 0x2a
=======
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	d020      	beq.n	80081a8 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f023 0304 	bic.w	r3, r3, #4
 800816c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008192:	3b01      	subs	r3, #1
 8008194:	b29a      	uxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	855a      	strh	r2, [r3, #42]	; 0x2a
>>>>>>> Stashed changes
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
<<<<<<< Updated upstream
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	f043 0204 	orr.w	r2, r3, #4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823c:	2b00      	cmp	r3, #0
 800823e:	d010      	beq.n	8008262 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f8a4 	bl	8008394 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b28      	cmp	r3, #40	; 0x28
 8008256:	d141      	bne.n	80082dc <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008258:	6979      	ldr	r1, [r7, #20]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f846 	bl	80082ec <I2C_ITListenCplt>
=======
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b6:	f043 0204 	orr.w	r2, r3, #4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d010      	beq.n	80081f6 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8a4 	bl	8008328 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b28      	cmp	r3, #40	; 0x28
 80081ea:	d141      	bne.n	8008270 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80081ec:	6979      	ldr	r1, [r7, #20]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f846 	bl	8008280 <I2C_ITListenCplt>
>>>>>>> Stashed changes
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 8008260:	e03c      	b.n	80082dc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800826a:	d014      	beq.n	8008296 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff fe12 	bl	8007e96 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1c      	ldr	r2, [pc, #112]	; (80082e8 <I2C_ITSlaveCplt+0x208>)
 8008276:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff f81e 	bl	80072d0 <HAL_I2C_ListenCpltCallback>
}
 8008294:	e022      	b.n	80082dc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b22      	cmp	r3, #34	; 0x22
 80082a0:	d10e      	bne.n	80082c0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7fe fff1 	bl	80072a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80082be:	e00d      	b.n	80082dc <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fe ffd8 	bl	800728c <HAL_I2C_SlaveTxCpltCallback>
}
 80082dc:	bf00      	nop
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	fe00e800 	.word	0xfe00e800
 80082e8:	ffff0000 	.word	0xffff0000

080082ec <I2C_ITListenCplt>:
=======
 80081f4:	e03c      	b.n	8008270 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081fe:	d014      	beq.n	800822a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fe12 	bl	8007e2a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a1c      	ldr	r2, [pc, #112]	; (800827c <I2C_ITSlaveCplt+0x208>)
 800820a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff f81e 	bl	8007264 <HAL_I2C_ListenCpltCallback>
}
 8008228:	e022      	b.n	8008270 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b22      	cmp	r3, #34	; 0x22
 8008234:	d10e      	bne.n	8008254 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7fe fff1 	bl	8007234 <HAL_I2C_SlaveRxCpltCallback>
}
 8008252:	e00d      	b.n	8008270 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fe ffd8 	bl	8007220 <HAL_I2C_SlaveTxCpltCallback>
}
 8008270:	bf00      	nop
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	fe00e800 	.word	0xfe00e800
 800827c:	ffff0000 	.word	0xffff0000

08008280 <I2C_ITListenCplt>:
>>>>>>> Stashed changes
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
<<<<<<< Updated upstream
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a25      	ldr	r2, [pc, #148]	; (8008390 <I2C_ITListenCplt+0xa4>)
 80082fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d022      	beq.n	8008368 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800833e:	2b00      	cmp	r3, #0
 8008340:	d012      	beq.n	8008368 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008360:	f043 0204 	orr.w	r2, r3, #4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a25      	ldr	r2, [pc, #148]	; (8008324 <I2C_ITListenCplt+0xa4>)
 800828e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d022      	beq.n	80082fc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d012      	beq.n	80082fc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f4:	f043 0204 	orr.w	r2, r3, #4
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
<<<<<<< Updated upstream
 8008368:	f248 0103 	movw	r1, #32771	; 0x8003
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc5f 	bl	8008c30 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2210      	movs	r2, #16
 8008378:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 80082fc:	f248 0103 	movw	r1, #32771	; 0x8003
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc5f 	bl	8008bc4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2210      	movs	r2, #16
 800830c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
<<<<<<< Updated upstream
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7fe ffa4 	bl	80072d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	ffff0000 	.word	0xffff0000

08008394 <I2C_ITError>:
=======
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7fe ffa4 	bl	8007264 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	ffff0000 	.word	0xffff0000

08008328 <I2C_ITError>:
>>>>>>> Stashed changes
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
<<<<<<< Updated upstream
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083a4:	73fb      	strb	r3, [r7, #15]
=======
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008338:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
<<<<<<< Updated upstream
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a6d      	ldr	r2, [pc, #436]	; (8008568 <I2C_ITError+0x1d4>)
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b28      	cmp	r3, #40	; 0x28
 80083ca:	d005      	beq.n	80083d8 <I2C_ITError+0x44>
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b29      	cmp	r3, #41	; 0x29
 80083d0:	d002      	beq.n	80083d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	2b2a      	cmp	r3, #42	; 0x2a
 80083d6:	d10b      	bne.n	80083f0 <I2C_ITError+0x5c>
=======
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a6d      	ldr	r2, [pc, #436]	; (80084fc <I2C_ITError+0x1d4>)
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b28      	cmp	r3, #40	; 0x28
 800835e:	d005      	beq.n	800836c <I2C_ITError+0x44>
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b29      	cmp	r3, #41	; 0x29
 8008364:	d002      	beq.n	800836c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	2b2a      	cmp	r3, #42	; 0x2a
 800836a:	d10b      	bne.n	8008384 <I2C_ITError+0x5c>
>>>>>>> Stashed changes
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
<<<<<<< Updated upstream
 80083d8:	2103      	movs	r1, #3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc28 	bl	8008c30 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2228      	movs	r2, #40	; 0x28
 80083e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a60      	ldr	r2, [pc, #384]	; (800856c <I2C_ITError+0x1d8>)
 80083ec:	635a      	str	r2, [r3, #52]	; 0x34
 80083ee:	e030      	b.n	8008452 <I2C_ITError+0xbe>
=======
 800836c:	2103      	movs	r1, #3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fc28 	bl	8008bc4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2228      	movs	r2, #40	; 0x28
 8008378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a60      	ldr	r2, [pc, #384]	; (8008500 <I2C_ITError+0x1d8>)
 8008380:	635a      	str	r2, [r3, #52]	; 0x34
 8008382:	e030      	b.n	80083e6 <I2C_ITError+0xbe>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
<<<<<<< Updated upstream
 80083f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc1b 	bl	8008c30 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f8e1 	bl	80085c2 <I2C_Flush_TXDR>
=======
 8008384:	f248 0103 	movw	r1, #32771	; 0x8003
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc1b 	bl	8008bc4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f8e1 	bl	8008556 <I2C_Flush_TXDR>
>>>>>>> Stashed changes

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
<<<<<<< Updated upstream
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b60      	cmp	r3, #96	; 0x60
 800840a:	d01f      	beq.n	800844c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2220      	movs	r2, #32
 8008410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b20      	cmp	r3, #32
 8008420:	d114      	bne.n	800844c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b10      	cmp	r3, #16
 800842e:	d109      	bne.n	8008444 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2210      	movs	r2, #16
 8008436:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843c:	f043 0204 	orr.w	r2, r3, #4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b60      	cmp	r3, #96	; 0x60
 800839e:	d01f      	beq.n	80083e0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d114      	bne.n	80083e0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d109      	bne.n	80083d8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2210      	movs	r2, #16
 80083ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d0:	f043 0204 	orr.w	r2, r3, #4
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2220      	movs	r2, #32
 800844a:	61da      	str	r2, [r3, #28]
=======
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2220      	movs	r2, #32
 80083de:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
      }

    }
    hi2c->XferISR       = NULL;
<<<<<<< Updated upstream
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	635a      	str	r2, [r3, #52]	; 0x34
=======
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
<<<<<<< Updated upstream
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	2b00      	cmp	r3, #0
 800845e:	d039      	beq.n	80084d4 <I2C_ITError+0x140>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b11      	cmp	r3, #17
 8008464:	d002      	beq.n	800846c <I2C_ITError+0xd8>
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b21      	cmp	r3, #33	; 0x21
 800846a:	d133      	bne.n	80084d4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800847a:	d107      	bne.n	800848c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800848a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	4618      	mov	r0, r3
 8008492:	f7fd ff8b 	bl	80063ac <HAL_DMA_GetState>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	d017      	beq.n	80084cc <I2C_ITError+0x138>
=======
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d039      	beq.n	8008468 <I2C_ITError+0x140>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b11      	cmp	r3, #17
 80083f8:	d002      	beq.n	8008400 <I2C_ITError+0xd8>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b21      	cmp	r3, #33	; 0x21
 80083fe:	d133      	bne.n	8008468 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800840a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800840e:	d107      	bne.n	8008420 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800841e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd ff8b 	bl	8006340 <HAL_DMA_GetState>
 800842a:	4603      	mov	r3, r0
 800842c:	2b01      	cmp	r3, #1
 800842e:	d017      	beq.n	8008460 <I2C_ITError+0x138>
>>>>>>> Stashed changes
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< Updated upstream
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	4a33      	ldr	r2, [pc, #204]	; (8008570 <I2C_ITError+0x1dc>)
 80084a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fd fe9a 	bl	80061ea <HAL_DMA_Abort_IT>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d04d      	beq.n	8008558 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084c6:	4610      	mov	r0, r2
 80084c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80084ca:	e045      	b.n	8008558 <I2C_ITError+0x1c4>
=======
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	4a33      	ldr	r2, [pc, #204]	; (8008504 <I2C_ITError+0x1dc>)
 8008436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	4618      	mov	r0, r3
 8008446:	f7fd fe9a 	bl	800617e <HAL_DMA_Abort_IT>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d04d      	beq.n	80084ec <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800845a:	4610      	mov	r0, r2
 800845c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800845e:	e045      	b.n	80084ec <I2C_ITError+0x1c4>
>>>>>>> Stashed changes
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
<<<<<<< Updated upstream
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f851 	bl	8008574 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80084d2:	e041      	b.n	8008558 <I2C_ITError+0x1c4>
=======
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f851 	bl	8008508 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008466:	e041      	b.n	80084ec <I2C_ITError+0x1c4>
>>>>>>> Stashed changes
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
<<<<<<< Updated upstream
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d039      	beq.n	8008550 <I2C_ITError+0x1bc>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b12      	cmp	r3, #18
 80084e0:	d002      	beq.n	80084e8 <I2C_ITError+0x154>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b22      	cmp	r3, #34	; 0x22
 80084e6:	d133      	bne.n	8008550 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f6:	d107      	bne.n	8008508 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008506:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850c:	4618      	mov	r0, r3
 800850e:	f7fd ff4d 	bl	80063ac <HAL_DMA_GetState>
 8008512:	4603      	mov	r3, r0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d017      	beq.n	8008548 <I2C_ITError+0x1b4>
=======
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d039      	beq.n	80084e4 <I2C_ITError+0x1bc>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b12      	cmp	r3, #18
 8008474:	d002      	beq.n	800847c <I2C_ITError+0x154>
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b22      	cmp	r3, #34	; 0x22
 800847a:	d133      	bne.n	80084e4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800848a:	d107      	bne.n	800849c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800849a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fd ff4d 	bl	8006340 <HAL_DMA_GetState>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d017      	beq.n	80084dc <I2C_ITError+0x1b4>
>>>>>>> Stashed changes
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< Updated upstream
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851c:	4a14      	ldr	r2, [pc, #80]	; (8008570 <I2C_ITError+0x1dc>)
 800851e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852c:	4618      	mov	r0, r3
 800852e:	f7fd fe5c 	bl	80061ea <HAL_DMA_Abort_IT>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d011      	beq.n	800855c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008542:	4610      	mov	r0, r2
 8008544:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008546:	e009      	b.n	800855c <I2C_ITError+0x1c8>
=======
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b0:	4a14      	ldr	r2, [pc, #80]	; (8008504 <I2C_ITError+0x1dc>)
 80084b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fd fe5c 	bl	800617e <HAL_DMA_Abort_IT>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d011      	beq.n	80084f0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80084d6:	4610      	mov	r0, r2
 80084d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084da:	e009      	b.n	80084f0 <I2C_ITError+0x1c8>
>>>>>>> Stashed changes
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
<<<<<<< Updated upstream
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f813 	bl	8008574 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800854e:	e005      	b.n	800855c <I2C_ITError+0x1c8>
=======
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f813 	bl	8008508 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084e2:	e005      	b.n	80084f0 <I2C_ITError+0x1c8>
>>>>>>> Stashed changes
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
<<<<<<< Updated upstream
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f80f 	bl	8008574 <I2C_TreatErrorCallback>
  }
}
 8008556:	e002      	b.n	800855e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008558:	bf00      	nop
 800855a:	e000      	b.n	800855e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800855c:	bf00      	nop
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	ffff0000 	.word	0xffff0000
 800856c:	0800756d 	.word	0x0800756d
 8008570:	0800860b 	.word	0x0800860b

08008574 <I2C_TreatErrorCallback>:
=======
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f80f 	bl	8008508 <I2C_TreatErrorCallback>
  }
}
 80084ea:	e002      	b.n	80084f2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084f0:	bf00      	nop
}
 80084f2:	bf00      	nop
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	ffff0000 	.word	0xffff0000
 8008500:	08007501 	.word	0x08007501
 8008504:	0800859f 	.word	0x0800859f

08008508 <I2C_TreatErrorCallback>:
>>>>>>> Stashed changes
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b60      	cmp	r3, #96	; 0x60
 8008586:	d10e      	bne.n	80085a6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b60      	cmp	r3, #96	; 0x60
 800851a:	d10e      	bne.n	800853a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
<<<<<<< Updated upstream
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fe febe 	bl	8007320 <HAL_I2C_AbortCpltCallback>
=======
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fe febe 	bl	80072b4 <HAL_I2C_AbortCpltCallback>
>>>>>>> Stashed changes
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 80085a4:	e009      	b.n	80085ba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7fe fea9 	bl	800730c <HAL_I2C_ErrorCallback>
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <I2C_Flush_TXDR>:
=======
 8008538:	e009      	b.n	800854e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7fe fea9 	bl	80072a0 <HAL_I2C_ErrorCallback>
}
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <I2C_Flush_TXDR>:
>>>>>>> Stashed changes
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d103      	bne.n	80085e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2200      	movs	r2, #0
 80085de:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b02      	cmp	r3, #2
 800856a:	d103      	bne.n	8008574 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2200      	movs	r2, #0
 8008572:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< Updated upstream
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d007      	beq.n	80085fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0201 	orr.w	r2, r2, #1
 80085fc:	619a      	str	r2, [r3, #24]
  }
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <I2C_DMAAbort>:
=======
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b01      	cmp	r3, #1
 8008580:	d007      	beq.n	8008592 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0201 	orr.w	r2, r2, #1
 8008590:	619a      	str	r2, [r3, #24]
  }
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <I2C_DMAAbort>:
>>>>>>> Stashed changes
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	2200      	movs	r2, #0
 8008626:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008634:	2200      	movs	r2, #0
 8008636:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff ff9b 	bl	8008574 <I2C_TreatErrorCallback>
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <I2C_WaitOnFlagUntilTimeout>:
=======
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b8:	2200      	movs	r2, #0
 80085ba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	2200      	movs	r2, #0
 80085ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff ff9b 	bl	8008508 <I2C_TreatErrorCallback>
}
 80085d2:	bf00      	nop
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	4613      	mov	r3, r2
 8008654:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008656:	e031      	b.n	80086bc <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d02d      	beq.n	80086bc <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008660:	f7fd fbd2 	bl	8005e08 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d302      	bcc.n	8008676 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d122      	bne.n	80086bc <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	699a      	ldr	r2, [r3, #24]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4013      	ands	r3, r2
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	429a      	cmp	r2, r3
 8008684:	bf0c      	ite	eq
 8008686:	2301      	moveq	r3, #1
 8008688:	2300      	movne	r3, #0
 800868a:	b2db      	uxtb	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	429a      	cmp	r2, r3
 8008692:	d113      	bne.n	80086bc <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008698:	f043 0220 	orr.w	r2, r3, #32
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e00f      	b.n	80086dc <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	4013      	ands	r3, r2
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	bf0c      	ite	eq
 80086cc:	2301      	moveq	r3, #1
 80086ce:	2300      	movne	r3, #0
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	461a      	mov	r2, r3
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d0be      	beq.n	8008658 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	603b      	str	r3, [r7, #0]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085ea:	e031      	b.n	8008650 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d02d      	beq.n	8008650 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f4:	f7fd fbd2 	bl	8005d9c <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d302      	bcc.n	800860a <I2C_WaitOnFlagUntilTimeout+0x30>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d122      	bne.n	8008650 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4013      	ands	r3, r2
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	429a      	cmp	r2, r3
 8008618:	bf0c      	ite	eq
 800861a:	2301      	moveq	r3, #1
 800861c:	2300      	movne	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	461a      	mov	r2, r3
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	429a      	cmp	r2, r3
 8008626:	d113      	bne.n	8008650 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862c:	f043 0220 	orr.w	r2, r3, #32
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e00f      	b.n	8008670 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4013      	ands	r3, r2
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	429a      	cmp	r2, r3
 800865e:	bf0c      	ite	eq
 8008660:	2301      	moveq	r3, #1
 8008662:	2300      	movne	r3, #0
 8008664:	b2db      	uxtb	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	429a      	cmp	r2, r3
 800866c:	d0be      	beq.n	80085ec <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <I2C_WaitOnTXISFlagUntilTimeout>:
=======
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <I2C_WaitOnTXISFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086f0:	e033      	b.n	800875a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	68b9      	ldr	r1, [r7, #8]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 f900 	bl	80088fc <I2C_IsErrorOccurred>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e031      	b.n	800876a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
=======
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008684:	e033      	b.n	80086ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 f900 	bl	8008890 <I2C_IsErrorOccurred>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e031      	b.n	80086fe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870c:	d025      	beq.n	800875a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800870e:	f7fd fb7b 	bl	8005e08 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	429a      	cmp	r2, r3
 800871c:	d302      	bcc.n	8008724 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d11a      	bne.n	800875a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d013      	beq.n	800875a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008736:	f043 0220 	orr.w	r2, r3, #32
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2220      	movs	r2, #32
 8008742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e007      	b.n	800876a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b02      	cmp	r3, #2
 8008766:	d1c4      	bne.n	80086f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
=======
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d025      	beq.n	80086ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a2:	f7fd fb7b 	bl	8005d9c <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d302      	bcc.n	80086b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11a      	bne.n	80086ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d013      	beq.n	80086ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ca:	f043 0220 	orr.w	r2, r3, #32
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e007      	b.n	80086fe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d1c4      	bne.n	8008686 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <I2C_WaitOnSTOPFlagUntilTimeout>:
=======
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <I2C_WaitOnSTOPFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800877e:	e02f      	b.n	80087e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 f8b9 	bl	80088fc <I2C_IsErrorOccurred>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e02d      	b.n	80087f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
=======
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008712:	e02f      	b.n	8008774 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 f8b9 	bl	8008890 <I2C_IsErrorOccurred>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e02d      	b.n	8008784 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< Updated upstream
 8008794:	f7fd fb38 	bl	8005e08 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d302      	bcc.n	80087aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d11a      	bne.n	80087e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d013      	beq.n	80087e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087bc:	f043 0220 	orr.w	r2, r3, #32
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e007      	b.n	80087f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d1c8      	bne.n	8008780 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
=======
 8008728:	f7fd fb38 	bl	8005d9c <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d302      	bcc.n	800873e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d11a      	bne.n	8008774 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b20      	cmp	r3, #32
 800874a:	d013      	beq.n	8008774 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008750:	f043 0220 	orr.w	r2, r3, #32
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2220      	movs	r2, #32
 800875c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e007      	b.n	8008784 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b20      	cmp	r3, #32
 8008780:	d1c8      	bne.n	8008714 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008804:	e06b      	b.n	80088de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	68b9      	ldr	r1, [r7, #8]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f876 	bl	80088fc <I2C_IsErrorOccurred>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e069      	b.n	80088ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
=======
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008798:	e06b      	b.n	8008872 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f876 	bl	8008890 <I2C_IsErrorOccurred>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e069      	b.n	8008882 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
>>>>>>> Stashed changes
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
<<<<<<< Updated upstream
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	f003 0320 	and.w	r3, r3, #32
 8008824:	2b20      	cmp	r3, #32
 8008826:	d138      	bne.n	800889a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
=======
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d138      	bne.n	800882e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
>>>>>>> Stashed changes
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
<<<<<<< Updated upstream
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b04      	cmp	r3, #4
 8008834:	d105      	bne.n	8008842 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
=======
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d105      	bne.n	80087d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
>>>>>>> Stashed changes
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
<<<<<<< Updated upstream
 800883e:	2300      	movs	r3, #0
 8008840:	e055      	b.n	80088ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
=======
 80087d2:	2300      	movs	r3, #0
 80087d4:	e055      	b.n	8008882 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
>>>>>>> Stashed changes
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
<<<<<<< Updated upstream
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b10      	cmp	r3, #16
 800884e:	d107      	bne.n	8008860 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2210      	movs	r2, #16
 8008856:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2204      	movs	r2, #4
 800885c:	645a      	str	r2, [r3, #68]	; 0x44
 800885e:	e002      	b.n	8008866 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
=======
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	f003 0310 	and.w	r3, r3, #16
 80087e0:	2b10      	cmp	r3, #16
 80087e2:	d107      	bne.n	80087f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2210      	movs	r2, #16
 80087ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2204      	movs	r2, #4
 80087f0:	645a      	str	r2, [r3, #68]	; 0x44
 80087f2:	e002      	b.n	80087fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
>>>>>>> Stashed changes
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
<<<<<<< Updated upstream
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2220      	movs	r2, #32
 800886c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6859      	ldr	r1, [r3, #4]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	4b1f      	ldr	r3, [pc, #124]	; (80088f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800887a:	400b      	ands	r3, r1
 800887c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e029      	b.n	80088ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
=======
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2220      	movs	r2, #32
 8008800:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6859      	ldr	r1, [r3, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	4b1f      	ldr	r3, [pc, #124]	; (800888c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800880e:	400b      	ands	r3, r1
 8008810:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e029      	b.n	8008882 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
>>>>>>> Stashed changes
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< Updated upstream
 800889a:	f7fd fab5 	bl	8005e08 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d116      	bne.n	80088de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d00f      	beq.n	80088de <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c2:	f043 0220 	orr.w	r2, r3, #32
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e007      	b.n	80088ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	d18c      	bne.n	8008806 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
=======
 800882e:	f7fd fab5 	bl	8005d9c <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	d302      	bcc.n	8008844 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d116      	bne.n	8008872 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b04      	cmp	r3, #4
 8008850:	d00f      	beq.n	8008872 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008856:	f043 0220 	orr.w	r2, r3, #32
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2220      	movs	r2, #32
 8008862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e007      	b.n	8008882 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b04      	cmp	r3, #4
 800887e:	d18c      	bne.n	800879a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	fe00e800 	.word	0xfe00e800

080088fc <I2C_IsErrorOccurred>:
=======
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	fe00e800 	.word	0xfe00e800

08008890 <I2C_IsErrorOccurred>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	61fb      	str	r3, [r7, #28]
=======
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	; 0x28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
<<<<<<< Updated upstream
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	d068      	beq.n	80089fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2210      	movs	r2, #16
 800892e:	61da      	str	r2, [r3, #28]
=======
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d068      	beq.n	800898e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2210      	movs	r2, #16
 80088c2:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
<<<<<<< Updated upstream
 8008930:	e049      	b.n	80089c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008938:	d045      	beq.n	80089c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800893a:	f7fd fa65 	bl	8005e08 <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	429a      	cmp	r2, r3
 8008948:	d302      	bcc.n	8008950 <I2C_IsErrorOccurred+0x54>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d13a      	bne.n	80089c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800895a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008962:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800896e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008972:	d121      	bne.n	80089b8 <I2C_IsErrorOccurred+0xbc>
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800897a:	d01d      	beq.n	80089b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800897c:	7cfb      	ldrb	r3, [r7, #19]
 800897e:	2b20      	cmp	r3, #32
 8008980:	d01a      	beq.n	80089b8 <I2C_IsErrorOccurred+0xbc>
=======
 80088c4:	e049      	b.n	800895a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d045      	beq.n	800895a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088ce:	f7fd fa65 	bl	8005d9c <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d302      	bcc.n	80088e4 <I2C_IsErrorOccurred+0x54>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d13a      	bne.n	800895a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008906:	d121      	bne.n	800894c <I2C_IsErrorOccurred+0xbc>
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800890e:	d01d      	beq.n	800894c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008910:	7cfb      	ldrb	r3, [r7, #19]
 8008912:	2b20      	cmp	r3, #32
 8008914:	d01a      	beq.n	800894c <I2C_IsErrorOccurred+0xbc>
>>>>>>> Stashed changes
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
<<<<<<< Updated upstream
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008990:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008992:	f7fd fa39 	bl	8005e08 <HAL_GetTick>
 8008996:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008998:	e00e      	b.n	80089b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800899a:	f7fd fa35 	bl	8005e08 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b19      	cmp	r3, #25
 80089a6:	d907      	bls.n	80089b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	f043 0320 	orr.w	r3, r3, #32
 80089ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80089b6:	e006      	b.n	80089c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d1e9      	bne.n	800899a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d003      	beq.n	80089dc <I2C_IsErrorOccurred+0xe0>
 80089d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0aa      	beq.n	8008932 <I2C_IsErrorOccurred+0x36>
=======
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008924:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008926:	f7fd fa39 	bl	8005d9c <HAL_GetTick>
 800892a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800892c:	e00e      	b.n	800894c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800892e:	f7fd fa35 	bl	8005d9c <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b19      	cmp	r3, #25
 800893a:	d907      	bls.n	800894c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	f043 0320 	orr.w	r3, r3, #32
 8008942:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800894a:	e006      	b.n	800895a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	f003 0320 	and.w	r3, r3, #32
 8008956:	2b20      	cmp	r3, #32
 8008958:	d1e9      	bne.n	800892e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b20      	cmp	r3, #32
 8008966:	d003      	beq.n	8008970 <I2C_IsErrorOccurred+0xe0>
 8008968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0aa      	beq.n	80088c6 <I2C_IsErrorOccurred+0x36>
>>>>>>> Stashed changes
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
<<<<<<< Updated upstream
 80089dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d103      	bne.n	80089ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2220      	movs	r2, #32
 80089ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	f043 0304 	orr.w	r3, r3, #4
 80089f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8008970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2220      	movs	r2, #32
 800897e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	f043 0304 	orr.w	r3, r3, #4
 8008986:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
<<<<<<< Updated upstream
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	61bb      	str	r3, [r7, #24]
=======
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
<<<<<<< Updated upstream
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
<<<<<<< Updated upstream
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	f043 0308 	orr.w	r3, r3, #8
 8008a34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00b      	beq.n	80089da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	f043 0308 	orr.w	r3, r3, #8
 80089c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
<<<<<<< Updated upstream
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	f043 0302 	orr.w	r3, r3, #2
 8008a56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01c      	beq.n	8008aaa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff fda6 	bl	80085c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6859      	ldr	r1, [r3, #4]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	4b0d      	ldr	r3, [pc, #52]	; (8008ab8 <I2C_IsErrorOccurred+0x1bc>)
 8008a82:	400b      	ands	r3, r1
 8008a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3728      	adds	r7, #40	; 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	fe00e800 	.word	0xfe00e800

08008abc <I2C_TransferConfig>:
=======
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	f043 0302 	orr.w	r3, r3, #2
 80089ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80089fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01c      	beq.n	8008a3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7ff fda6 	bl	8008556 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6859      	ldr	r1, [r3, #4]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4b0d      	ldr	r3, [pc, #52]	; (8008a4c <I2C_IsErrorOccurred+0x1bc>)
 8008a16:	400b      	ands	r3, r1
 8008a18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3728      	adds	r7, #40	; 0x28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	fe00e800 	.word	0xfe00e800

08008a50 <I2C_TransferConfig>:
>>>>>>> Stashed changes
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
<<<<<<< Updated upstream
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	607b      	str	r3, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	817b      	strh	r3, [r7, #10]
 8008aca:	4613      	mov	r3, r2
 8008acc:	727b      	strb	r3, [r7, #9]
=======
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	607b      	str	r3, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	817b      	strh	r3, [r7, #10]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	727b      	strb	r3, [r7, #9]
>>>>>>> Stashed changes
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
<<<<<<< Updated upstream
 8008ace:	897b      	ldrh	r3, [r7, #10]
 8008ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ad4:	7a7b      	ldrb	r3, [r7, #9]
 8008ad6:	041b      	lsls	r3, r3, #16
 8008ad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008adc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aea:	617b      	str	r3, [r7, #20]
=======
 8008a62:	897b      	ldrh	r3, [r7, #10]
 8008a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a68:	7a7b      	ldrb	r3, [r7, #9]
 8008a6a:	041b      	lsls	r3, r3, #16
 8008a6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a7e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
<<<<<<< Updated upstream
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	0d5b      	lsrs	r3, r3, #21
 8008af6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008afa:	4b08      	ldr	r3, [pc, #32]	; (8008b1c <I2C_TransferConfig+0x60>)
 8008afc:	430b      	orrs	r3, r1
 8008afe:	43db      	mvns	r3, r3
 8008b00:	ea02 0103 	and.w	r1, r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
=======
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	0d5b      	lsrs	r3, r3, #21
 8008a8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008a8e:	4b08      	ldr	r3, [pc, #32]	; (8008ab0 <I2C_TransferConfig+0x60>)
 8008a90:	430b      	orrs	r3, r1
 8008a92:	43db      	mvns	r3, r3
 8008a94:	ea02 0103 	and.w	r1, r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
<<<<<<< Updated upstream
 8008b0e:	bf00      	nop
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	03ff63ff 	.word	0x03ff63ff

08008b20 <I2C_Enable_IRQ>:
=======
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	03ff63ff 	.word	0x03ff63ff

08008ab4 <I2C_Enable_IRQ>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
<<<<<<< Updated upstream
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b34:	4a3b      	ldr	r2, [pc, #236]	; (8008c24 <I2C_Enable_IRQ+0x104>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d032      	beq.n	8008ba0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008b3e:	4a3a      	ldr	r2, [pc, #232]	; (8008c28 <I2C_Enable_IRQ+0x108>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d02d      	beq.n	8008ba0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008b48:	4a38      	ldr	r2, [pc, #224]	; (8008c2c <I2C_Enable_IRQ+0x10c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d028      	beq.n	8008ba0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008b4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da03      	bge.n	8008b5e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008b5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008b5e:	887b      	ldrh	r3, [r7, #2]
 8008b60:	f003 0301 	and.w	r3, r3, #1
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008b6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b70:	887b      	ldrh	r3, [r7, #2]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008b80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008b82:	887b      	ldrh	r3, [r7, #2]
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d103      	bne.n	8008b90 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008b8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b90:	887b      	ldrh	r3, [r7, #2]
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d138      	bne.n	8008c08 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f043 0320 	orr.w	r3, r3, #32
 8008b9c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b9e:	e033      	b.n	8008c08 <I2C_Enable_IRQ+0xe8>
=======
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac8:	4a3b      	ldr	r2, [pc, #236]	; (8008bb8 <I2C_Enable_IRQ+0x104>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d032      	beq.n	8008b34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008ad2:	4a3a      	ldr	r2, [pc, #232]	; (8008bbc <I2C_Enable_IRQ+0x108>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d02d      	beq.n	8008b34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008adc:	4a38      	ldr	r2, [pc, #224]	; (8008bc0 <I2C_Enable_IRQ+0x10c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d028      	beq.n	8008b34 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ae2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da03      	bge.n	8008af2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008af0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008af2:	887b      	ldrh	r3, [r7, #2]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008b02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b04:	887b      	ldrh	r3, [r7, #2]
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008b14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d103      	bne.n	8008b24 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008b22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b24:	887b      	ldrh	r3, [r7, #2]
 8008b26:	2b20      	cmp	r3, #32
 8008b28:	d138      	bne.n	8008b9c <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f043 0320 	orr.w	r3, r3, #32
 8008b30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b32:	e033      	b.n	8008b9c <I2C_Enable_IRQ+0xe8>
>>>>>>> Stashed changes
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
<<<<<<< Updated upstream
 8008ba0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da03      	bge.n	8008bb0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008bae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bb0:	887b      	ldrh	r3, [r7, #2]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008bc0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008bc2:	887b      	ldrh	r3, [r7, #2]
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008bd2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008bd4:	887b      	ldrh	r3, [r7, #2]
 8008bd6:	2b10      	cmp	r3, #16
 8008bd8:	d103      	bne.n	8008be2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008be0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008be2:	887b      	ldrh	r3, [r7, #2]
 8008be4:	2b20      	cmp	r3, #32
 8008be6:	d103      	bne.n	8008bf0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008bee:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf4:	4a0d      	ldr	r2, [pc, #52]	; (8008c2c <I2C_Enable_IRQ+0x10c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d006      	beq.n	8008c08 <I2C_Enable_IRQ+0xe8>
 8008bfa:	887b      	ldrh	r3, [r7, #2]
 8008bfc:	2b40      	cmp	r3, #64	; 0x40
 8008bfe:	d103      	bne.n	8008c08 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c06:	60fb      	str	r3, [r7, #12]
=======
 8008b34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da03      	bge.n	8008b44 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008b42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008b44:	887b      	ldrh	r3, [r7, #2]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008b54:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b56:	887b      	ldrh	r3, [r7, #2]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008b66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008b68:	887b      	ldrh	r3, [r7, #2]
 8008b6a:	2b10      	cmp	r3, #16
 8008b6c:	d103      	bne.n	8008b76 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008b74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b76:	887b      	ldrh	r3, [r7, #2]
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d103      	bne.n	8008b84 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008b82:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b88:	4a0d      	ldr	r2, [pc, #52]	; (8008bc0 <I2C_Enable_IRQ+0x10c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d006      	beq.n	8008b9c <I2C_Enable_IRQ+0xe8>
 8008b8e:	887b      	ldrh	r3, [r7, #2]
 8008b90:	2b40      	cmp	r3, #64	; 0x40
 8008b92:	d103      	bne.n	8008b9c <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
<<<<<<< Updated upstream
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6819      	ldr	r1, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	601a      	str	r2, [r3, #0]
}
 8008c18:	bf00      	nop
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	0800775d 	.word	0x0800775d
 8008c28:	08007b69 	.word	0x08007b69
 8008c2c:	08007935 	.word	0x08007935

08008c30 <I2C_Disable_IRQ>:
=======
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	601a      	str	r2, [r3, #0]
}
 8008bac:	bf00      	nop
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	080076f1 	.word	0x080076f1
 8008bbc:	08007afd 	.word	0x08007afd
 8008bc0:	080078c9 	.word	0x080078c9

08008bc4 <I2C_Disable_IRQ>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
<<<<<<< Updated upstream
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008c40:	887b      	ldrh	r3, [r7, #2]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00f      	beq.n	8008c6a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008c50:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c5e:	2b28      	cmp	r3, #40	; 0x28
 8008c60:	d003      	beq.n	8008c6a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008c68:	60fb      	str	r3, [r7, #12]
=======
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bd4:	887b      	ldrh	r3, [r7, #2]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00f      	beq.n	8008bfe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008be4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bf2:	2b28      	cmp	r3, #40	; 0x28
 8008bf4:	d003      	beq.n	8008bfe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008bfc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
<<<<<<< Updated upstream
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00f      	beq.n	8008c94 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008c7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c88:	2b28      	cmp	r3, #40	; 0x28
 8008c8a:	d003      	beq.n	8008c94 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008c92:	60fb      	str	r3, [r7, #12]
=======
 8008bfe:	887b      	ldrh	r3, [r7, #2]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00f      	beq.n	8008c28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008c0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c1c:	2b28      	cmp	r3, #40	; 0x28
 8008c1e:	d003      	beq.n	8008c28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008c26:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
<<<<<<< Updated upstream
 8008c94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da03      	bge.n	8008ca4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008ca2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ca4:	887b      	ldrh	r3, [r7, #2]
 8008ca6:	2b10      	cmp	r3, #16
 8008ca8:	d103      	bne.n	8008cb2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008cb0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008cb2:	887b      	ldrh	r3, [r7, #2]
 8008cb4:	2b20      	cmp	r3, #32
 8008cb6:	d103      	bne.n	8008cc0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f043 0320 	orr.w	r3, r3, #32
 8008cbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008cc0:	887b      	ldrh	r3, [r7, #2]
 8008cc2:	2b40      	cmp	r3, #64	; 0x40
 8008cc4:	d103      	bne.n	8008cce <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ccc:	60fb      	str	r3, [r7, #12]
=======
 8008c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	da03      	bge.n	8008c38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008c36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c38:	887b      	ldrh	r3, [r7, #2]
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	d103      	bne.n	8008c46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008c44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c46:	887b      	ldrh	r3, [r7, #2]
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d103      	bne.n	8008c54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f043 0320 	orr.w	r3, r3, #32
 8008c52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008c54:	887b      	ldrh	r3, [r7, #2]
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d103      	bne.n	8008c62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c60:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
<<<<<<< Updated upstream
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6819      	ldr	r1, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	43da      	mvns	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	400a      	ands	r2, r1
 8008cde:	601a      	str	r2, [r3, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6819      	ldr	r1, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	43da      	mvns	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	400a      	ands	r2, r1
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< Updated upstream
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
=======
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d138      	bne.n	8008d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e032      	b.n	8008d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2224      	movs	r2, #36	; 0x24
 8008d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0201 	bic.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6819      	ldr	r1, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e000      	b.n	8008d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d138      	bne.n	8008d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e032      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2224      	movs	r2, #36	; 0x24
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6819      	ldr	r1, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8008d74:	2302      	movs	r3, #2
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< Updated upstream
 8008d82:	b480      	push	{r7}
 8008d84:	b085      	sub	sp, #20
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
=======
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d139      	bne.n	8008e0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d101      	bne.n	8008da6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008da2:	2302      	movs	r3, #2
 8008da4:	e033      	b.n	8008e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2224      	movs	r2, #36	; 0x24
 8008db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0201 	bic.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008dd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	021b      	lsls	r3, r3, #8
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e000      	b.n	8008e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d139      	bne.n	8008da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e033      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2224      	movs	r2, #36	; 0x24
 8008d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0201 	bic.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8008e0c:	2302      	movs	r3, #2
  }
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <HAL_RCC_OscConfig>:
=======
 8008da0:	2302      	movs	r3, #2
  }
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
	...

08008db0 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e2c:	6018      	str	r0, [r3, #0]
=======
 8008db0:	b580      	push	{r7, lr}
 8008db2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008dc0:	6018      	str	r0, [r3, #0]
>>>>>>> Stashed changes
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8008e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f001 b823 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
=======
 8008dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d102      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f001 b823 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8008e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 817d 	beq.w	8009152 <HAL_RCC_OscConfig+0x336>
=======
 8008dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 817d 	beq.w	80090e6 <HAL_RCC_OscConfig+0x336>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
<<<<<<< Updated upstream
 8008e58:	4bbc      	ldr	r3, [pc, #752]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f003 030c 	and.w	r3, r3, #12
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d00c      	beq.n	8008e7e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008e64:	4bb9      	ldr	r3, [pc, #740]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f003 030c 	and.w	r3, r3, #12
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d15c      	bne.n	8008f2a <HAL_RCC_OscConfig+0x10e>
 8008e70:	4bb6      	ldr	r3, [pc, #728]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d155      	bne.n	8008f2a <HAL_RCC_OscConfig+0x10e>
 8008e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e82:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
=======
 8008dec:	4bbc      	ldr	r3, [pc, #752]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f003 030c 	and.w	r3, r3, #12
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d00c      	beq.n	8008e12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008df8:	4bb9      	ldr	r3, [pc, #740]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f003 030c 	and.w	r3, r3, #12
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d15c      	bne.n	8008ebe <HAL_RCC_OscConfig+0x10e>
 8008e04:	4bb6      	ldr	r3, [pc, #728]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e10:	d155      	bne.n	8008ebe <HAL_RCC_OscConfig+0x10e>
 8008e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e16:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
>>>>>>> Stashed changes
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< Updated upstream
 8008e86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008e8a:	fa93 f3a3 	rbit	r3, r3
 8008e8e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
=======
 8008e1a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008e1e:	fa93 f3a3 	rbit	r3, r3
 8008e22:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
>>>>>>> Stashed changes
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< Updated upstream
 8008e92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e96:	fab3 f383 	clz	r3, r3
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d102      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x94>
 8008eaa:	4ba8      	ldr	r3, [pc, #672]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	e015      	b.n	8008edc <HAL_RCC_OscConfig+0xc0>
 8008eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008eb4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eb8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008ebc:	fa93 f3a3 	rbit	r3, r3
 8008ec0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ec8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008ecc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008ed0:	fa93 f3a3 	rbit	r3, r3
 8008ed4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008ed8:	4b9c      	ldr	r3, [pc, #624]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ee0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008ee4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008ee8:	fa92 f2a2 	rbit	r2, r2
 8008eec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8008ef0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008ef4:	fab2 f282 	clz	r2, r2
 8008ef8:	b2d2      	uxtb	r2, r2
 8008efa:	f042 0220 	orr.w	r2, r2, #32
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	f002 021f 	and.w	r2, r2, #31
 8008f04:	2101      	movs	r1, #1
 8008f06:	fa01 f202 	lsl.w	r2, r1, r2
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 811f 	beq.w	8009150 <HAL_RCC_OscConfig+0x334>
 8008f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f040 8116 	bne.w	8009150 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f000 bfaf 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
=======
 8008e26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e2a:	fab3 f383 	clz	r3, r3
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	095b      	lsrs	r3, r3, #5
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f043 0301 	orr.w	r3, r3, #1
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d102      	bne.n	8008e44 <HAL_RCC_OscConfig+0x94>
 8008e3e:	4ba8      	ldr	r3, [pc, #672]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	e015      	b.n	8008e70 <HAL_RCC_OscConfig+0xc0>
 8008e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e48:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008e50:	fa93 f3a3 	rbit	r3, r3
 8008e54:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e5c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008e60:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008e64:	fa93 f3a3 	rbit	r3, r3
 8008e68:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008e6c:	4b9c      	ldr	r3, [pc, #624]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e74:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008e78:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008e7c:	fa92 f2a2 	rbit	r2, r2
 8008e80:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8008e84:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008e88:	fab2 f282 	clz	r2, r2
 8008e8c:	b2d2      	uxtb	r2, r2
 8008e8e:	f042 0220 	orr.w	r2, r2, #32
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	f002 021f 	and.w	r2, r2, #31
 8008e98:	2101      	movs	r1, #1
 8008e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 811f 	beq.w	80090e4 <HAL_RCC_OscConfig+0x334>
 8008ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f040 8116 	bne.w	80090e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f000 bfaf 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8008f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f3a:	d106      	bne.n	8008f4a <HAL_RCC_OscConfig+0x12e>
 8008f3c:	4b83      	ldr	r3, [pc, #524]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a82      	ldr	r2, [pc, #520]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	e036      	b.n	8008fb8 <HAL_RCC_OscConfig+0x19c>
 8008f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10c      	bne.n	8008f74 <HAL_RCC_OscConfig+0x158>
 8008f5a:	4b7c      	ldr	r3, [pc, #496]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a7b      	ldr	r2, [pc, #492]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	4b79      	ldr	r3, [pc, #484]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a78      	ldr	r2, [pc, #480]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	e021      	b.n	8008fb8 <HAL_RCC_OscConfig+0x19c>
 8008f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f84:	d10c      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x184>
 8008f86:	4b71      	ldr	r3, [pc, #452]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a70      	ldr	r2, [pc, #448]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	4b6e      	ldr	r3, [pc, #440]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a6d      	ldr	r2, [pc, #436]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	e00b      	b.n	8008fb8 <HAL_RCC_OscConfig+0x19c>
 8008fa0:	4b6a      	ldr	r3, [pc, #424]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a69      	ldr	r2, [pc, #420]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	4b67      	ldr	r3, [pc, #412]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a66      	ldr	r2, [pc, #408]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fb6:	6013      	str	r3, [r2, #0]
=======
 8008ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ece:	d106      	bne.n	8008ede <HAL_RCC_OscConfig+0x12e>
 8008ed0:	4b83      	ldr	r3, [pc, #524]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a82      	ldr	r2, [pc, #520]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	e036      	b.n	8008f4c <HAL_RCC_OscConfig+0x19c>
 8008ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10c      	bne.n	8008f08 <HAL_RCC_OscConfig+0x158>
 8008eee:	4b7c      	ldr	r3, [pc, #496]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a7b      	ldr	r2, [pc, #492]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	4b79      	ldr	r3, [pc, #484]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a78      	ldr	r2, [pc, #480]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	e021      	b.n	8008f4c <HAL_RCC_OscConfig+0x19c>
 8008f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f18:	d10c      	bne.n	8008f34 <HAL_RCC_OscConfig+0x184>
 8008f1a:	4b71      	ldr	r3, [pc, #452]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a70      	ldr	r2, [pc, #448]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	4b6e      	ldr	r3, [pc, #440]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a6d      	ldr	r2, [pc, #436]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	e00b      	b.n	8008f4c <HAL_RCC_OscConfig+0x19c>
 8008f34:	4b6a      	ldr	r3, [pc, #424]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a69      	ldr	r2, [pc, #420]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4b67      	ldr	r3, [pc, #412]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a66      	ldr	r2, [pc, #408]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f4a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< Updated upstream
 8008fb8:	4b64      	ldr	r3, [pc, #400]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	f023 020f 	bic.w	r2, r3, #15
 8008fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	495f      	ldr	r1, [pc, #380]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	62cb      	str	r3, [r1, #44]	; 0x2c
=======
 8008f4c:	4b64      	ldr	r3, [pc, #400]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	f023 020f 	bic.w	r2, r3, #15
 8008f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	495f      	ldr	r1, [pc, #380]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	62cb      	str	r3, [r1, #44]	; 0x2c
>>>>>>> Stashed changes
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< Updated upstream
 8008fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d059      	beq.n	8009096 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fe2:	f7fc ff11 	bl	8005e08 <HAL_GetTick>
 8008fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fea:	e00a      	b.n	8009002 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fec:	f7fc ff0c 	bl	8005e08 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b64      	cmp	r3, #100	; 0x64
 8008ffa:	d902      	bls.n	8009002 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	f000 bf43 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
 8009002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009006:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800900e:	fa93 f3a3 	rbit	r3, r3
 8009012:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8009016:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800901a:	fab3 f383 	clz	r3, r3
 800901e:	b2db      	uxtb	r3, r3
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f043 0301 	orr.w	r3, r3, #1
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b01      	cmp	r3, #1
 800902c:	d102      	bne.n	8009034 <HAL_RCC_OscConfig+0x218>
 800902e:	4b47      	ldr	r3, [pc, #284]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	e015      	b.n	8009060 <HAL_RCC_OscConfig+0x244>
 8009034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009038:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8009040:	fa93 f3a3 	rbit	r3, r3
 8009044:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8009048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800904c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8009050:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009054:	fa93 f3a3 	rbit	r3, r3
 8009058:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800905c:	4b3b      	ldr	r3, [pc, #236]	; (800914c <HAL_RCC_OscConfig+0x330>)
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009064:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8009068:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800906c:	fa92 f2a2 	rbit	r2, r2
 8009070:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8009074:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8009078:	fab2 f282 	clz	r2, r2
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	f042 0220 	orr.w	r2, r2, #32
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	f002 021f 	and.w	r2, r2, #31
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f202 	lsl.w	r2, r1, r2
 800908e:	4013      	ands	r3, r2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0ab      	beq.n	8008fec <HAL_RCC_OscConfig+0x1d0>
 8009094:	e05d      	b.n	8009152 <HAL_RCC_OscConfig+0x336>
=======
 8008f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d059      	beq.n	800902a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f76:	f7fc ff11 	bl	8005d9c <HAL_GetTick>
 8008f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f7e:	e00a      	b.n	8008f96 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f80:	f7fc ff0c 	bl	8005d9c <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b64      	cmp	r3, #100	; 0x64
 8008f8e:	d902      	bls.n	8008f96 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	f000 bf43 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
 8008f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f9a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008fa2:	fa93 f3a3 	rbit	r3, r3
 8008fa6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8008faa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fae:	fab3 f383 	clz	r3, r3
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f043 0301 	orr.w	r3, r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d102      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x218>
 8008fc2:	4b47      	ldr	r3, [pc, #284]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	e015      	b.n	8008ff4 <HAL_RCC_OscConfig+0x244>
 8008fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fcc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fd0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8008fd4:	fa93 f3a3 	rbit	r3, r3
 8008fd8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fe0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008fe4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8008fe8:	fa93 f3a3 	rbit	r3, r3
 8008fec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008ff0:	4b3b      	ldr	r3, [pc, #236]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ff8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8008ffc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8009000:	fa92 f2a2 	rbit	r2, r2
 8009004:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8009008:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800900c:	fab2 f282 	clz	r2, r2
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	f042 0220 	orr.w	r2, r2, #32
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	f002 021f 	and.w	r2, r2, #31
 800901c:	2101      	movs	r1, #1
 800901e:	fa01 f202 	lsl.w	r2, r1, r2
 8009022:	4013      	ands	r3, r2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0ab      	beq.n	8008f80 <HAL_RCC_OscConfig+0x1d0>
 8009028:	e05d      	b.n	80090e6 <HAL_RCC_OscConfig+0x336>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8009096:	f7fc feb7 	bl	8005e08 <HAL_GetTick>
 800909a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800909e:	e00a      	b.n	80090b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090a0:	f7fc feb2 	bl	8005e08 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	2b64      	cmp	r3, #100	; 0x64
 80090ae:	d902      	bls.n	80090b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	f000 bee9 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
 80090b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80090c2:	fa93 f3a3 	rbit	r3, r3
 80090c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80090ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090ce:	fab3 f383 	clz	r3, r3
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	095b      	lsrs	r3, r3, #5
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d102      	bne.n	80090e8 <HAL_RCC_OscConfig+0x2cc>
 80090e2:	4b1a      	ldr	r3, [pc, #104]	; (800914c <HAL_RCC_OscConfig+0x330>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	e015      	b.n	8009114 <HAL_RCC_OscConfig+0x2f8>
 80090e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80090f4:	fa93 f3a3 	rbit	r3, r3
 80090f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80090fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009100:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009104:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009108:	fa93 f3a3 	rbit	r3, r3
 800910c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009110:	4b0e      	ldr	r3, [pc, #56]	; (800914c <HAL_RCC_OscConfig+0x330>)
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009118:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800911c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009120:	fa92 f2a2 	rbit	r2, r2
 8009124:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8009128:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800912c:	fab2 f282 	clz	r2, r2
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	f042 0220 	orr.w	r2, r2, #32
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	f002 021f 	and.w	r2, r2, #31
 800913c:	2101      	movs	r1, #1
 800913e:	fa01 f202 	lsl.w	r2, r1, r2
 8009142:	4013      	ands	r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1ab      	bne.n	80090a0 <HAL_RCC_OscConfig+0x284>
 8009148:	e003      	b.n	8009152 <HAL_RCC_OscConfig+0x336>
 800914a:	bf00      	nop
 800914c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009150:	bf00      	nop
=======
 800902a:	f7fc feb7 	bl	8005d9c <HAL_GetTick>
 800902e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009032:	e00a      	b.n	800904a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009034:	f7fc feb2 	bl	8005d9c <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b64      	cmp	r3, #100	; 0x64
 8009042:	d902      	bls.n	800904a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	f000 bee9 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
 800904a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800904e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009052:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8009056:	fa93 f3a3 	rbit	r3, r3
 800905a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800905e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009062:	fab3 f383 	clz	r3, r3
 8009066:	b2db      	uxtb	r3, r3
 8009068:	095b      	lsrs	r3, r3, #5
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b01      	cmp	r3, #1
 8009074:	d102      	bne.n	800907c <HAL_RCC_OscConfig+0x2cc>
 8009076:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	e015      	b.n	80090a8 <HAL_RCC_OscConfig+0x2f8>
 800907c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009080:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009084:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009088:	fa93 f3a3 	rbit	r3, r3
 800908c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009094:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009098:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800909c:	fa93 f3a3 	rbit	r3, r3
 80090a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80090a4:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <HAL_RCC_OscConfig+0x330>)
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80090ac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80090b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80090b4:	fa92 f2a2 	rbit	r2, r2
 80090b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80090bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80090c0:	fab2 f282 	clz	r2, r2
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	f042 0220 	orr.w	r2, r2, #32
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	f002 021f 	and.w	r2, r2, #31
 80090d0:	2101      	movs	r1, #1
 80090d2:	fa01 f202 	lsl.w	r2, r1, r2
 80090d6:	4013      	ands	r3, r2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1ab      	bne.n	8009034 <HAL_RCC_OscConfig+0x284>
 80090dc:	e003      	b.n	80090e6 <HAL_RCC_OscConfig+0x336>
 80090de:	bf00      	nop
 80090e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090e4:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8009152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 817d 	beq.w	8009462 <HAL_RCC_OscConfig+0x646>
=======
 80090e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80090ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 817d 	beq.w	80093f6 <HAL_RCC_OscConfig+0x646>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
<<<<<<< Updated upstream
 8009168:	4ba6      	ldr	r3, [pc, #664]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f003 030c 	and.w	r3, r3, #12
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009174:	4ba3      	ldr	r3, [pc, #652]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f003 030c 	and.w	r3, r3, #12
 800917c:	2b08      	cmp	r3, #8
 800917e:	d172      	bne.n	8009266 <HAL_RCC_OscConfig+0x44a>
 8009180:	4ba0      	ldr	r3, [pc, #640]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d16c      	bne.n	8009266 <HAL_RCC_OscConfig+0x44a>
 800918c:	2302      	movs	r3, #2
 800918e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009192:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009196:	fa93 f3a3 	rbit	r3, r3
 800919a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800919e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091a2:	fab3 f383 	clz	r3, r3
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	095b      	lsrs	r3, r3, #5
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f043 0301 	orr.w	r3, r3, #1
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d102      	bne.n	80091bc <HAL_RCC_OscConfig+0x3a0>
 80091b6:	4b93      	ldr	r3, [pc, #588]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	e013      	b.n	80091e4 <HAL_RCC_OscConfig+0x3c8>
 80091bc:	2302      	movs	r3, #2
 80091be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80091c6:	fa93 f3a3 	rbit	r3, r3
 80091ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80091ce:	2302      	movs	r3, #2
 80091d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80091d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80091d8:	fa93 f3a3 	rbit	r3, r3
 80091dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80091e0:	4b88      	ldr	r3, [pc, #544]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	2202      	movs	r2, #2
 80091e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80091ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80091ee:	fa92 f2a2 	rbit	r2, r2
 80091f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80091f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80091fa:	fab2 f282 	clz	r2, r2
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	f042 0220 	orr.w	r2, r2, #32
 8009204:	b2d2      	uxtb	r2, r2
 8009206:	f002 021f 	and.w	r2, r2, #31
 800920a:	2101      	movs	r1, #1
 800920c:	fa01 f202 	lsl.w	r2, r1, r2
 8009210:	4013      	ands	r3, r2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <HAL_RCC_OscConfig+0x410>
 8009216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800921a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d002      	beq.n	800922c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f000 be2e 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
=======
 80090fc:	4ba6      	ldr	r3, [pc, #664]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f003 030c 	and.w	r3, r3, #12
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009108:	4ba3      	ldr	r3, [pc, #652]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f003 030c 	and.w	r3, r3, #12
 8009110:	2b08      	cmp	r3, #8
 8009112:	d172      	bne.n	80091fa <HAL_RCC_OscConfig+0x44a>
 8009114:	4ba0      	ldr	r3, [pc, #640]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d16c      	bne.n	80091fa <HAL_RCC_OscConfig+0x44a>
 8009120:	2302      	movs	r3, #2
 8009122:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009126:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800912a:	fa93 f3a3 	rbit	r3, r3
 800912e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8009132:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009136:	fab3 f383 	clz	r3, r3
 800913a:	b2db      	uxtb	r3, r3
 800913c:	095b      	lsrs	r3, r3, #5
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b01      	cmp	r3, #1
 8009148:	d102      	bne.n	8009150 <HAL_RCC_OscConfig+0x3a0>
 800914a:	4b93      	ldr	r3, [pc, #588]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	e013      	b.n	8009178 <HAL_RCC_OscConfig+0x3c8>
 8009150:	2302      	movs	r3, #2
 8009152:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009156:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800915a:	fa93 f3a3 	rbit	r3, r3
 800915e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009162:	2302      	movs	r3, #2
 8009164:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009168:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800916c:	fa93 f3a3 	rbit	r3, r3
 8009170:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009174:	4b88      	ldr	r3, [pc, #544]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2202      	movs	r2, #2
 800917a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800917e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009182:	fa92 f2a2 	rbit	r2, r2
 8009186:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800918a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800918e:	fab2 f282 	clz	r2, r2
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	f042 0220 	orr.w	r2, r2, #32
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	f002 021f 	and.w	r2, r2, #31
 800919e:	2101      	movs	r1, #1
 80091a0:	fa01 f202 	lsl.w	r2, r1, r2
 80091a4:	4013      	ands	r3, r2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00a      	beq.n	80091c0 <HAL_RCC_OscConfig+0x410>
 80091aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80091ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d002      	beq.n	80091c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f000 be2e 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800922c:	4b75      	ldr	r3, [pc, #468]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	21f8      	movs	r1, #248	; 0xf8
 8009242:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009246:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800924a:	fa91 f1a1 	rbit	r1, r1
 800924e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8009252:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8009256:	fab1 f181 	clz	r1, r1
 800925a:	b2c9      	uxtb	r1, r1
 800925c:	408b      	lsls	r3, r1
 800925e:	4969      	ldr	r1, [pc, #420]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 8009260:	4313      	orrs	r3, r2
 8009262:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009264:	e0fd      	b.n	8009462 <HAL_RCC_OscConfig+0x646>
=======
 80091c0:	4b75      	ldr	r3, [pc, #468]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80091cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	21f8      	movs	r1, #248	; 0xf8
 80091d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80091de:	fa91 f1a1 	rbit	r1, r1
 80091e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80091e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80091ea:	fab1 f181 	clz	r1, r1
 80091ee:	b2c9      	uxtb	r1, r1
 80091f0:	408b      	lsls	r3, r1
 80091f2:	4969      	ldr	r1, [pc, #420]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091f8:	e0fd      	b.n	80093f6 <HAL_RCC_OscConfig+0x646>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 8009266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800926a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 8088 	beq.w	8009388 <HAL_RCC_OscConfig+0x56c>
 8009278:	2301      	movs	r3, #1
 800927a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800927e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009282:	fa93 f3a3 	rbit	r3, r3
 8009286:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800928a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800928e:	fab3 f383 	clz	r3, r3
 8009292:	b2db      	uxtb	r3, r3
 8009294:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009298:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	461a      	mov	r2, r3
 80092a0:	2301      	movs	r3, #1
 80092a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092a4:	f7fc fdb0 	bl	8005e08 <HAL_GetTick>
 80092a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ac:	e00a      	b.n	80092c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092ae:	f7fc fdab 	bl	8005e08 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d902      	bls.n	80092c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	f000 bde2 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
 80092c4:	2302      	movs	r3, #2
 80092c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80092ce:	fa93 f3a3 	rbit	r3, r3
 80092d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80092d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092da:	fab3 f383 	clz	r3, r3
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	095b      	lsrs	r3, r3, #5
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f043 0301 	orr.w	r3, r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d102      	bne.n	80092f4 <HAL_RCC_OscConfig+0x4d8>
 80092ee:	4b45      	ldr	r3, [pc, #276]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	e013      	b.n	800931c <HAL_RCC_OscConfig+0x500>
 80092f4:	2302      	movs	r3, #2
 80092f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80092fe:	fa93 f3a3 	rbit	r3, r3
 8009302:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009306:	2302      	movs	r3, #2
 8009308:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800930c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009310:	fa93 f3a3 	rbit	r3, r3
 8009314:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009318:	4b3a      	ldr	r3, [pc, #232]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	2202      	movs	r2, #2
 800931e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8009322:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009326:	fa92 f2a2 	rbit	r2, r2
 800932a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800932e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009332:	fab2 f282 	clz	r2, r2
 8009336:	b2d2      	uxtb	r2, r2
 8009338:	f042 0220 	orr.w	r2, r2, #32
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	f002 021f 	and.w	r2, r2, #31
 8009342:	2101      	movs	r1, #1
 8009344:	fa01 f202 	lsl.w	r2, r1, r2
 8009348:	4013      	ands	r3, r2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0af      	beq.n	80092ae <HAL_RCC_OscConfig+0x492>
=======
 80091fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80091fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 8088 	beq.w	800931c <HAL_RCC_OscConfig+0x56c>
 800920c:	2301      	movs	r3, #1
 800920e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009212:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009216:	fa93 f3a3 	rbit	r3, r3
 800921a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800921e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009222:	fab3 f383 	clz	r3, r3
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800922c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	461a      	mov	r2, r3
 8009234:	2301      	movs	r3, #1
 8009236:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009238:	f7fc fdb0 	bl	8005d9c <HAL_GetTick>
 800923c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009240:	e00a      	b.n	8009258 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009242:	f7fc fdab 	bl	8005d9c <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d902      	bls.n	8009258 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	f000 bde2 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009258:	2302      	movs	r3, #2
 800925a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800925e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8009262:	fa93 f3a3 	rbit	r3, r3
 8009266:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800926a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800926e:	fab3 f383 	clz	r3, r3
 8009272:	b2db      	uxtb	r3, r3
 8009274:	095b      	lsrs	r3, r3, #5
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b01      	cmp	r3, #1
 8009280:	d102      	bne.n	8009288 <HAL_RCC_OscConfig+0x4d8>
 8009282:	4b45      	ldr	r3, [pc, #276]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	e013      	b.n	80092b0 <HAL_RCC_OscConfig+0x500>
 8009288:	2302      	movs	r3, #2
 800928a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009292:	fa93 f3a3 	rbit	r3, r3
 8009296:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800929a:	2302      	movs	r3, #2
 800929c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80092a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80092a4:	fa93 f3a3 	rbit	r3, r3
 80092a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80092ac:	4b3a      	ldr	r3, [pc, #232]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2202      	movs	r2, #2
 80092b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80092b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80092ba:	fa92 f2a2 	rbit	r2, r2
 80092be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80092c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80092c6:	fab2 f282 	clz	r2, r2
 80092ca:	b2d2      	uxtb	r2, r2
 80092cc:	f042 0220 	orr.w	r2, r2, #32
 80092d0:	b2d2      	uxtb	r2, r2
 80092d2:	f002 021f 	and.w	r2, r2, #31
 80092d6:	2101      	movs	r1, #1
 80092d8:	fa01 f202 	lsl.w	r2, r1, r2
 80092dc:	4013      	ands	r3, r2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0af      	beq.n	8009242 <HAL_RCC_OscConfig+0x492>
>>>>>>> Stashed changes
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800934e:	4b2d      	ldr	r3, [pc, #180]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800935a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	21f8      	movs	r1, #248	; 0xf8
 8009364:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009368:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800936c:	fa91 f1a1 	rbit	r1, r1
 8009370:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8009374:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009378:	fab1 f181 	clz	r1, r1
 800937c:	b2c9      	uxtb	r1, r1
 800937e:	408b      	lsls	r3, r1
 8009380:	4920      	ldr	r1, [pc, #128]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 8009382:	4313      	orrs	r3, r2
 8009384:	600b      	str	r3, [r1, #0]
 8009386:	e06c      	b.n	8009462 <HAL_RCC_OscConfig+0x646>
 8009388:	2301      	movs	r3, #1
 800938a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800938e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009392:	fa93 f3a3 	rbit	r3, r3
 8009396:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800939a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
=======
 80092e2:	4b2d      	ldr	r3, [pc, #180]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	21f8      	movs	r1, #248	; 0xf8
 80092f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009300:	fa91 f1a1 	rbit	r1, r1
 8009304:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8009308:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800930c:	fab1 f181 	clz	r1, r1
 8009310:	b2c9      	uxtb	r1, r1
 8009312:	408b      	lsls	r3, r1
 8009314:	4920      	ldr	r1, [pc, #128]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 8009316:	4313      	orrs	r3, r2
 8009318:	600b      	str	r3, [r1, #0]
 800931a:	e06c      	b.n	80093f6 <HAL_RCC_OscConfig+0x646>
 800931c:	2301      	movs	r3, #1
 800931e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009322:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009326:	fa93 f3a3 	rbit	r3, r3
 800932a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800932e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800939e:	fab3 f383 	clz	r3, r3
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80093a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	461a      	mov	r2, r3
 80093b0:	2300      	movs	r3, #0
 80093b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b4:	f7fc fd28 	bl	8005e08 <HAL_GetTick>
 80093b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093bc:	e00a      	b.n	80093d4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093be:	f7fc fd23 	bl	8005e08 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d902      	bls.n	80093d4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	f000 bd5a 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
 80093d4:	2302      	movs	r3, #2
 80093d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093de:	fa93 f3a3 	rbit	r3, r3
 80093e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80093e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ea:	fab3 f383 	clz	r3, r3
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	095b      	lsrs	r3, r3, #5
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f043 0301 	orr.w	r3, r3, #1
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d104      	bne.n	8009408 <HAL_RCC_OscConfig+0x5ec>
 80093fe:	4b01      	ldr	r3, [pc, #4]	; (8009404 <HAL_RCC_OscConfig+0x5e8>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	e015      	b.n	8009430 <HAL_RCC_OscConfig+0x614>
 8009404:	40021000 	.word	0x40021000
 8009408:	2302      	movs	r3, #2
 800940a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009412:	fa93 f3a3 	rbit	r3, r3
 8009416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800941a:	2302      	movs	r3, #2
 800941c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009420:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009424:	fa93 f3a3 	rbit	r3, r3
 8009428:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800942c:	4bc8      	ldr	r3, [pc, #800]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	2202      	movs	r2, #2
 8009432:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8009436:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800943a:	fa92 f2a2 	rbit	r2, r2
 800943e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8009442:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009446:	fab2 f282 	clz	r2, r2
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	f042 0220 	orr.w	r2, r2, #32
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	f002 021f 	and.w	r2, r2, #31
 8009456:	2101      	movs	r1, #1
 8009458:	fa01 f202 	lsl.w	r2, r1, r2
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1ad      	bne.n	80093be <HAL_RCC_OscConfig+0x5a2>
=======
 8009332:	fab3 f383 	clz	r3, r3
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800933c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	461a      	mov	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009348:	f7fc fd28 	bl	8005d9c <HAL_GetTick>
 800934c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009350:	e00a      	b.n	8009368 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009352:	f7fc fd23 	bl	8005d9c <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d902      	bls.n	8009368 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	f000 bd5a 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009368:	2302      	movs	r3, #2
 800936a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800936e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009372:	fa93 f3a3 	rbit	r3, r3
 8009376:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800937a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800937e:	fab3 f383 	clz	r3, r3
 8009382:	b2db      	uxtb	r3, r3
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b01      	cmp	r3, #1
 8009390:	d104      	bne.n	800939c <HAL_RCC_OscConfig+0x5ec>
 8009392:	4b01      	ldr	r3, [pc, #4]	; (8009398 <HAL_RCC_OscConfig+0x5e8>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	e015      	b.n	80093c4 <HAL_RCC_OscConfig+0x614>
 8009398:	40021000 	.word	0x40021000
 800939c:	2302      	movs	r3, #2
 800939e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093a6:	fa93 f3a3 	rbit	r3, r3
 80093aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80093ae:	2302      	movs	r3, #2
 80093b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80093b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80093b8:	fa93 f3a3 	rbit	r3, r3
 80093bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80093c0:	4bc8      	ldr	r3, [pc, #800]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	2202      	movs	r2, #2
 80093c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80093ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80093ce:	fa92 f2a2 	rbit	r2, r2
 80093d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80093d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80093da:	fab2 f282 	clz	r2, r2
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	f042 0220 	orr.w	r2, r2, #32
 80093e4:	b2d2      	uxtb	r2, r2
 80093e6:	f002 021f 	and.w	r2, r2, #31
 80093ea:	2101      	movs	r1, #1
 80093ec:	fa01 f202 	lsl.w	r2, r1, r2
 80093f0:	4013      	ands	r3, r2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1ad      	bne.n	8009352 <HAL_RCC_OscConfig+0x5a2>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 8009462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 8110 	beq.w	8009698 <HAL_RCC_OscConfig+0x87c>
=======
 80093f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 8110 	beq.w	800962c <HAL_RCC_OscConfig+0x87c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 8009478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800947c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d079      	beq.n	800957c <HAL_RCC_OscConfig+0x760>
 8009488:	2301      	movs	r3, #1
 800948a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009492:	fa93 f3a3 	rbit	r3, r3
 8009496:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800949a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800949e:	fab3 f383 	clz	r3, r3
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	461a      	mov	r2, r3
 80094a6:	4bab      	ldr	r3, [pc, #684]	; (8009754 <HAL_RCC_OscConfig+0x938>)
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	461a      	mov	r2, r3
 80094ae:	2301      	movs	r3, #1
 80094b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094b2:	f7fc fca9 	bl	8005e08 <HAL_GetTick>
 80094b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094ba:	e00a      	b.n	80094d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094bc:	f7fc fca4 	bl	8005e08 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d902      	bls.n	80094d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	f000 bcdb 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
 80094d2:	2302      	movs	r3, #2
 80094d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094dc:	fa93 f3a3 	rbit	r3, r3
 80094e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80094ec:	2202      	movs	r2, #2
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	fa93 f2a3 	rbit	r2, r3
 80094fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009510:	2202      	movs	r2, #2
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	fa93 f2a3 	rbit	r2, r3
 8009522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800952a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800952c:	4b88      	ldr	r3, [pc, #544]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 800952e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009534:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009538:	2102      	movs	r1, #2
 800953a:	6019      	str	r1, [r3, #0]
 800953c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009540:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	fa93 f1a3 	rbit	r1, r3
 800954a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800954e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009552:	6019      	str	r1, [r3, #0]
  return result;
 8009554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009558:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	fab3 f383 	clz	r3, r3
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f003 031f 	and.w	r3, r3, #31
 800956e:	2101      	movs	r1, #1
 8009570:	fa01 f303 	lsl.w	r3, r1, r3
 8009574:	4013      	ands	r3, r2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0a0      	beq.n	80094bc <HAL_RCC_OscConfig+0x6a0>
 800957a:	e08d      	b.n	8009698 <HAL_RCC_OscConfig+0x87c>
 800957c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009580:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800958c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	fa93 f2a3 	rbit	r2, r3
 8009596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800959a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800959e:	601a      	str	r2, [r3, #0]
  return result;
 80095a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095a8:	681b      	ldr	r3, [r3, #0]
=======
 800940c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d079      	beq.n	8009510 <HAL_RCC_OscConfig+0x760>
 800941c:	2301      	movs	r3, #1
 800941e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009426:	fa93 f3a3 	rbit	r3, r3
 800942a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800942e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009432:	fab3 f383 	clz	r3, r3
 8009436:	b2db      	uxtb	r3, r3
 8009438:	461a      	mov	r2, r3
 800943a:	4bab      	ldr	r3, [pc, #684]	; (80096e8 <HAL_RCC_OscConfig+0x938>)
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	461a      	mov	r2, r3
 8009442:	2301      	movs	r3, #1
 8009444:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009446:	f7fc fca9 	bl	8005d9c <HAL_GetTick>
 800944a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800944e:	e00a      	b.n	8009466 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009450:	f7fc fca4 	bl	8005d9c <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d902      	bls.n	8009466 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	f000 bcdb 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009466:	2302      	movs	r3, #2
 8009468:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800946c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009470:	fa93 f3a3 	rbit	r3, r3
 8009474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800947c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009480:	2202      	movs	r2, #2
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009488:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	fa93 f2a3 	rbit	r2, r3
 8009492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a4:	2202      	movs	r2, #2
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	fa93 f2a3 	rbit	r2, r3
 80094b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80094be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094c0:	4b88      	ldr	r3, [pc, #544]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 80094c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80094cc:	2102      	movs	r1, #2
 80094ce:	6019      	str	r1, [r3, #0]
 80094d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	fa93 f1a3 	rbit	r1, r3
 80094de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80094e6:	6019      	str	r1, [r3, #0]
  return result;
 80094e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	fab3 f383 	clz	r3, r3
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f003 031f 	and.w	r3, r3, #31
 8009502:	2101      	movs	r1, #1
 8009504:	fa01 f303 	lsl.w	r3, r1, r3
 8009508:	4013      	ands	r3, r2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0a0      	beq.n	8009450 <HAL_RCC_OscConfig+0x6a0>
 800950e:	e08d      	b.n	800962c <HAL_RCC_OscConfig+0x87c>
 8009510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009514:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009518:	2201      	movs	r2, #1
 800951a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800951c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009520:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	fa93 f2a3 	rbit	r2, r3
 800952a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800952e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009532:	601a      	str	r2, [r3, #0]
  return result;
 8009534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009538:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800953c:	681b      	ldr	r3, [r3, #0]
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 80095aa:	fab3 f383 	clz	r3, r3
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	461a      	mov	r2, r3
 80095b2:	4b68      	ldr	r3, [pc, #416]	; (8009754 <HAL_RCC_OscConfig+0x938>)
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	461a      	mov	r2, r3
 80095ba:	2300      	movs	r3, #0
 80095bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095be:	f7fc fc23 	bl	8005e08 <HAL_GetTick>
 80095c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095c6:	e00a      	b.n	80095de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095c8:	f7fc fc1e 	bl	8005e08 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d902      	bls.n	80095de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	f000 bc55 	b.w	8009e88 <HAL_RCC_OscConfig+0x106c>
 80095de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80095e6:	2202      	movs	r2, #2
 80095e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	fa93 f2a3 	rbit	r2, r3
 80095f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009606:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800960a:	2202      	movs	r2, #2
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009612:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	fa93 f2a3 	rbit	r2, r3
 800961c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800962a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800962e:	2202      	movs	r2, #2
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	fa93 f2a3 	rbit	r2, r3
 8009640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009644:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009648:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800964a:	4b41      	ldr	r3, [pc, #260]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 800964c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800964e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009652:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009656:	2102      	movs	r1, #2
 8009658:	6019      	str	r1, [r3, #0]
 800965a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800965e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	fa93 f1a3 	rbit	r1, r3
 8009668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800966c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009670:	6019      	str	r1, [r3, #0]
  return result;
 8009672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009676:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	fab3 f383 	clz	r3, r3
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f003 031f 	and.w	r3, r3, #31
 800968c:	2101      	movs	r1, #1
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	4013      	ands	r3, r2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d197      	bne.n	80095c8 <HAL_RCC_OscConfig+0x7ac>
=======
 800953e:	fab3 f383 	clz	r3, r3
 8009542:	b2db      	uxtb	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	4b68      	ldr	r3, [pc, #416]	; (80096e8 <HAL_RCC_OscConfig+0x938>)
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	461a      	mov	r2, r3
 800954e:	2300      	movs	r3, #0
 8009550:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009552:	f7fc fc23 	bl	8005d9c <HAL_GetTick>
 8009556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800955a:	e00a      	b.n	8009572 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800955c:	f7fc fc1e 	bl	8005d9c <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d902      	bls.n	8009572 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	f000 bc55 	b.w	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009576:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800957a:	2202      	movs	r2, #2
 800957c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800957e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009582:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	fa93 f2a3 	rbit	r2, r3
 800958c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009590:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800959a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800959e:	2202      	movs	r2, #2
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	fa93 f2a3 	rbit	r2, r3
 80095b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c2:	2202      	movs	r2, #2
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	fa93 f2a3 	rbit	r2, r3
 80095d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80095dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095de:	4b41      	ldr	r3, [pc, #260]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 80095e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80095ea:	2102      	movs	r1, #2
 80095ec:	6019      	str	r1, [r3, #0]
 80095ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	fa93 f1a3 	rbit	r1, r3
 80095fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009600:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009604:	6019      	str	r1, [r3, #0]
  return result;
 8009606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800960a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	fab3 f383 	clz	r3, r3
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800961a:	b2db      	uxtb	r3, r3
 800961c:	f003 031f 	and.w	r3, r3, #31
 8009620:	2101      	movs	r1, #1
 8009622:	fa01 f303 	lsl.w	r3, r1, r3
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d197      	bne.n	800955c <HAL_RCC_OscConfig+0x7ac>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8009698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800969c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 81a1 	beq.w	80099f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096ae:	2300      	movs	r3, #0
 80096b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
=======
 800962c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 81a1 	beq.w	8009984 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009642:	2300      	movs	r3, #0
 8009644:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 80096b4:	4b26      	ldr	r3, [pc, #152]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d116      	bne.n	80096ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096c0:	4b23      	ldr	r3, [pc, #140]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	4a22      	ldr	r2, [pc, #136]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 80096c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ca:	61d3      	str	r3, [r2, #28]
 80096cc:	4b20      	ldr	r3, [pc, #128]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80096d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096d8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096e2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80096e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80096e8:	2301      	movs	r3, #1
 80096ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096ee:	4b1a      	ldr	r3, [pc, #104]	; (8009758 <HAL_RCC_OscConfig+0x93c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d11a      	bne.n	8009730 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096fa:	4b17      	ldr	r3, [pc, #92]	; (8009758 <HAL_RCC_OscConfig+0x93c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a16      	ldr	r2, [pc, #88]	; (8009758 <HAL_RCC_OscConfig+0x93c>)
 8009700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009704:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009706:	f7fc fb7f 	bl	8005e08 <HAL_GetTick>
 800970a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800970e:	e009      	b.n	8009724 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009710:	f7fc fb7a 	bl	8005e08 <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b64      	cmp	r3, #100	; 0x64
 800971e:	d901      	bls.n	8009724 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e3b1      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009724:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <HAL_RCC_OscConfig+0x93c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0ef      	beq.n	8009710 <HAL_RCC_OscConfig+0x8f4>
=======
 8009648:	4b26      	ldr	r3, [pc, #152]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d116      	bne.n	8009682 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009654:	4b23      	ldr	r3, [pc, #140]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	4a22      	ldr	r2, [pc, #136]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 800965a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800965e:	61d3      	str	r3, [r2, #28]
 8009660:	4b20      	ldr	r3, [pc, #128]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800966c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009676:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800967a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009682:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <HAL_RCC_OscConfig+0x93c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968a:	2b00      	cmp	r3, #0
 800968c:	d11a      	bne.n	80096c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800968e:	4b17      	ldr	r3, [pc, #92]	; (80096ec <HAL_RCC_OscConfig+0x93c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a16      	ldr	r2, [pc, #88]	; (80096ec <HAL_RCC_OscConfig+0x93c>)
 8009694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009698:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800969a:	f7fc fb7f 	bl	8005d9c <HAL_GetTick>
 800969e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096a2:	e009      	b.n	80096b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096a4:	f7fc fb7a 	bl	8005d9c <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b64      	cmp	r3, #100	; 0x64
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e3b1      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096b8:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <HAL_RCC_OscConfig+0x93c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0ef      	beq.n	80096a4 <HAL_RCC_OscConfig+0x8f4>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8009730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009734:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d10d      	bne.n	800975c <HAL_RCC_OscConfig+0x940>
 8009740:	4b03      	ldr	r3, [pc, #12]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	4a02      	ldr	r2, [pc, #8]	; (8009750 <HAL_RCC_OscConfig+0x934>)
 8009746:	f043 0301 	orr.w	r3, r3, #1
 800974a:	6213      	str	r3, [r2, #32]
 800974c:	e03c      	b.n	80097c8 <HAL_RCC_OscConfig+0x9ac>
 800974e:	bf00      	nop
 8009750:	40021000 	.word	0x40021000
 8009754:	10908120 	.word	0x10908120
 8009758:	40007000 	.word	0x40007000
 800975c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10c      	bne.n	8009786 <HAL_RCC_OscConfig+0x96a>
 800976c:	4bc1      	ldr	r3, [pc, #772]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	4ac0      	ldr	r2, [pc, #768]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 8009772:	f023 0301 	bic.w	r3, r3, #1
 8009776:	6213      	str	r3, [r2, #32]
 8009778:	4bbe      	ldr	r3, [pc, #760]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	4abd      	ldr	r2, [pc, #756]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 800977e:	f023 0304 	bic.w	r3, r3, #4
 8009782:	6213      	str	r3, [r2, #32]
 8009784:	e020      	b.n	80097c8 <HAL_RCC_OscConfig+0x9ac>
 8009786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800978a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	2b05      	cmp	r3, #5
 8009794:	d10c      	bne.n	80097b0 <HAL_RCC_OscConfig+0x994>
 8009796:	4bb7      	ldr	r3, [pc, #732]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	4ab6      	ldr	r2, [pc, #728]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 800979c:	f043 0304 	orr.w	r3, r3, #4
 80097a0:	6213      	str	r3, [r2, #32]
 80097a2:	4bb4      	ldr	r3, [pc, #720]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	4ab3      	ldr	r2, [pc, #716]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80097a8:	f043 0301 	orr.w	r3, r3, #1
 80097ac:	6213      	str	r3, [r2, #32]
 80097ae:	e00b      	b.n	80097c8 <HAL_RCC_OscConfig+0x9ac>
 80097b0:	4bb0      	ldr	r3, [pc, #704]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	4aaf      	ldr	r2, [pc, #700]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80097b6:	f023 0301 	bic.w	r3, r3, #1
 80097ba:	6213      	str	r3, [r2, #32]
 80097bc:	4bad      	ldr	r3, [pc, #692]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	4aac      	ldr	r2, [pc, #688]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80097c2:	f023 0304 	bic.w	r3, r3, #4
 80097c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 8081 	beq.w	80098dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097da:	f7fc fb15 	bl	8005e08 <HAL_GetTick>
 80097de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e2:	e00b      	b.n	80097fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097e4:	f7fc fb10 	bl	8005e08 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e345      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
 80097fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009800:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009804:	2202      	movs	r2, #2
 8009806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800980c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	fa93 f2a3 	rbit	r2, r3
 8009816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800981a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009824:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009828:	2202      	movs	r2, #2
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009830:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	fa93 f2a3 	rbit	r2, r3
 800983a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800983e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009842:	601a      	str	r2, [r3, #0]
  return result;
 8009844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009848:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800984c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800984e:	fab3 f383 	clz	r3, r3
 8009852:	b2db      	uxtb	r3, r3
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f043 0302 	orr.w	r3, r3, #2
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b02      	cmp	r3, #2
 8009860:	d102      	bne.n	8009868 <HAL_RCC_OscConfig+0xa4c>
 8009862:	4b84      	ldr	r3, [pc, #528]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	e013      	b.n	8009890 <HAL_RCC_OscConfig+0xa74>
 8009868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800986c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009870:	2202      	movs	r2, #2
 8009872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009878:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	fa93 f2a3 	rbit	r2, r3
 8009882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009886:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	4b79      	ldr	r3, [pc, #484]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009894:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009898:	2102      	movs	r1, #2
 800989a:	6011      	str	r1, [r2, #0]
 800989c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80098a4:	6812      	ldr	r2, [r2, #0]
 80098a6:	fa92 f1a2 	rbit	r1, r2
 80098aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80098b2:	6011      	str	r1, [r2, #0]
  return result;
 80098b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	fab2 f282 	clz	r2, r2
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098c8:	b2d2      	uxtb	r2, r2
 80098ca:	f002 021f 	and.w	r2, r2, #31
 80098ce:	2101      	movs	r1, #1
 80098d0:	fa01 f202 	lsl.w	r2, r1, r2
 80098d4:	4013      	ands	r3, r2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d084      	beq.n	80097e4 <HAL_RCC_OscConfig+0x9c8>
 80098da:	e07f      	b.n	80099dc <HAL_RCC_OscConfig+0xbc0>
=======
 80096c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d10d      	bne.n	80096f0 <HAL_RCC_OscConfig+0x940>
 80096d4:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	4a02      	ldr	r2, [pc, #8]	; (80096e4 <HAL_RCC_OscConfig+0x934>)
 80096da:	f043 0301 	orr.w	r3, r3, #1
 80096de:	6213      	str	r3, [r2, #32]
 80096e0:	e03c      	b.n	800975c <HAL_RCC_OscConfig+0x9ac>
 80096e2:	bf00      	nop
 80096e4:	40021000 	.word	0x40021000
 80096e8:	10908120 	.word	0x10908120
 80096ec:	40007000 	.word	0x40007000
 80096f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10c      	bne.n	800971a <HAL_RCC_OscConfig+0x96a>
 8009700:	4bc1      	ldr	r3, [pc, #772]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	4ac0      	ldr	r2, [pc, #768]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009706:	f023 0301 	bic.w	r3, r3, #1
 800970a:	6213      	str	r3, [r2, #32]
 800970c:	4bbe      	ldr	r3, [pc, #760]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	4abd      	ldr	r2, [pc, #756]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009712:	f023 0304 	bic.w	r3, r3, #4
 8009716:	6213      	str	r3, [r2, #32]
 8009718:	e020      	b.n	800975c <HAL_RCC_OscConfig+0x9ac>
 800971a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800971e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b05      	cmp	r3, #5
 8009728:	d10c      	bne.n	8009744 <HAL_RCC_OscConfig+0x994>
 800972a:	4bb7      	ldr	r3, [pc, #732]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	4ab6      	ldr	r2, [pc, #728]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009730:	f043 0304 	orr.w	r3, r3, #4
 8009734:	6213      	str	r3, [r2, #32]
 8009736:	4bb4      	ldr	r3, [pc, #720]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	4ab3      	ldr	r2, [pc, #716]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 800973c:	f043 0301 	orr.w	r3, r3, #1
 8009740:	6213      	str	r3, [r2, #32]
 8009742:	e00b      	b.n	800975c <HAL_RCC_OscConfig+0x9ac>
 8009744:	4bb0      	ldr	r3, [pc, #704]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	4aaf      	ldr	r2, [pc, #700]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 800974a:	f023 0301 	bic.w	r3, r3, #1
 800974e:	6213      	str	r3, [r2, #32]
 8009750:	4bad      	ldr	r3, [pc, #692]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	4aac      	ldr	r2, [pc, #688]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009756:	f023 0304 	bic.w	r3, r3, #4
 800975a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800975c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 8081 	beq.w	8009870 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800976e:	f7fc fb15 	bl	8005d9c <HAL_GetTick>
 8009772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009776:	e00b      	b.n	8009790 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009778:	f7fc fb10 	bl	8005d9c <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	f241 3288 	movw	r2, #5000	; 0x1388
 8009788:	4293      	cmp	r3, r2
 800978a:	d901      	bls.n	8009790 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e345      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009794:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009798:	2202      	movs	r2, #2
 800979a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800979c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	fa93 f2a3 	rbit	r2, r3
 80097aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097bc:	2202      	movs	r2, #2
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	fa93 f2a3 	rbit	r2, r3
 80097ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80097d6:	601a      	str	r2, [r3, #0]
  return result;
 80097d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80097e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e2:	fab3 f383 	clz	r3, r3
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	095b      	lsrs	r3, r3, #5
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f043 0302 	orr.w	r3, r3, #2
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d102      	bne.n	80097fc <HAL_RCC_OscConfig+0xa4c>
 80097f6:	4b84      	ldr	r3, [pc, #528]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	e013      	b.n	8009824 <HAL_RCC_OscConfig+0xa74>
 80097fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009800:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009804:	2202      	movs	r2, #2
 8009806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800980c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	fa93 f2a3 	rbit	r2, r3
 8009816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800981a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	4b79      	ldr	r3, [pc, #484]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009828:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800982c:	2102      	movs	r1, #2
 800982e:	6011      	str	r1, [r2, #0]
 8009830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009834:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009838:	6812      	ldr	r2, [r2, #0]
 800983a:	fa92 f1a2 	rbit	r1, r2
 800983e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009842:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009846:	6011      	str	r1, [r2, #0]
  return result;
 8009848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800984c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	fab2 f282 	clz	r2, r2
 8009856:	b2d2      	uxtb	r2, r2
 8009858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	f002 021f 	and.w	r2, r2, #31
 8009862:	2101      	movs	r1, #1
 8009864:	fa01 f202 	lsl.w	r2, r1, r2
 8009868:	4013      	ands	r3, r2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d084      	beq.n	8009778 <HAL_RCC_OscConfig+0x9c8>
 800986e:	e07f      	b.n	8009970 <HAL_RCC_OscConfig+0xbc0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80098dc:	f7fc fa94 	bl	8005e08 <HAL_GetTick>
 80098e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098e4:	e00b      	b.n	80098fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098e6:	f7fc fa8f 	bl	8005e08 <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e2c4      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
 80098fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009902:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009906:	2202      	movs	r2, #2
 8009908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800990a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800990e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	fa93 f2a3 	rbit	r2, r3
 8009918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800991c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009926:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800992a:	2202      	movs	r2, #2
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009932:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	fa93 f2a3 	rbit	r2, r3
 800993c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009940:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009944:	601a      	str	r2, [r3, #0]
  return result;
 8009946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800994a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800994e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009950:	fab3 f383 	clz	r3, r3
 8009954:	b2db      	uxtb	r3, r3
 8009956:	095b      	lsrs	r3, r3, #5
 8009958:	b2db      	uxtb	r3, r3
 800995a:	f043 0302 	orr.w	r3, r3, #2
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b02      	cmp	r3, #2
 8009962:	d102      	bne.n	800996a <HAL_RCC_OscConfig+0xb4e>
 8009964:	4b43      	ldr	r3, [pc, #268]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 8009966:	6a1b      	ldr	r3, [r3, #32]
 8009968:	e013      	b.n	8009992 <HAL_RCC_OscConfig+0xb76>
 800996a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800996e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009972:	2202      	movs	r2, #2
 8009974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800997a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	fa93 f2a3 	rbit	r2, r3
 8009984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009988:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	4b39      	ldr	r3, [pc, #228]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009996:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800999a:	2102      	movs	r1, #2
 800999c:	6011      	str	r1, [r2, #0]
 800999e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80099a6:	6812      	ldr	r2, [r2, #0]
 80099a8:	fa92 f1a2 	rbit	r1, r2
 80099ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80099b4:	6011      	str	r1, [r2, #0]
  return result;
 80099b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	fab2 f282 	clz	r2, r2
 80099c4:	b2d2      	uxtb	r2, r2
 80099c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	f002 021f 	and.w	r2, r2, #31
 80099d0:	2101      	movs	r1, #1
 80099d2:	fa01 f202 	lsl.w	r2, r1, r2
 80099d6:	4013      	ands	r3, r2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d184      	bne.n	80098e6 <HAL_RCC_OscConfig+0xaca>
=======
 8009870:	f7fc fa94 	bl	8005d9c <HAL_GetTick>
 8009874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009878:	e00b      	b.n	8009892 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800987a:	f7fc fa8f 	bl	8005d9c <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	f241 3288 	movw	r2, #5000	; 0x1388
 800988a:	4293      	cmp	r3, r2
 800988c:	d901      	bls.n	8009892 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e2c4      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009896:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800989a:	2202      	movs	r2, #2
 800989c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800989e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	fa93 f2a3 	rbit	r2, r3
 80098ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80098be:	2202      	movs	r2, #2
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	fa93 f2a3 	rbit	r2, r3
 80098d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80098d8:	601a      	str	r2, [r3, #0]
  return result;
 80098da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098de:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80098e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098e4:	fab3 f383 	clz	r3, r3
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	095b      	lsrs	r3, r3, #5
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f043 0302 	orr.w	r3, r3, #2
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d102      	bne.n	80098fe <HAL_RCC_OscConfig+0xb4e>
 80098f8:	4b43      	ldr	r3, [pc, #268]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	e013      	b.n	8009926 <HAL_RCC_OscConfig+0xb76>
 80098fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009902:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009906:	2202      	movs	r2, #2
 8009908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800990a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800990e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	fa93 f2a3 	rbit	r2, r3
 8009918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800991c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	4b39      	ldr	r3, [pc, #228]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800992a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800992e:	2102      	movs	r1, #2
 8009930:	6011      	str	r1, [r2, #0]
 8009932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009936:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	fa92 f1a2 	rbit	r1, r2
 8009940:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009944:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009948:	6011      	str	r1, [r2, #0]
  return result;
 800994a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800994e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009952:	6812      	ldr	r2, [r2, #0]
 8009954:	fab2 f282 	clz	r2, r2
 8009958:	b2d2      	uxtb	r2, r2
 800995a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	f002 021f 	and.w	r2, r2, #31
 8009964:	2101      	movs	r1, #1
 8009966:	fa01 f202 	lsl.w	r2, r1, r2
 800996a:	4013      	ands	r3, r2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d184      	bne.n	800987a <HAL_RCC_OscConfig+0xaca>
>>>>>>> Stashed changes
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 80099dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d105      	bne.n	80099f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099e4:	4b23      	ldr	r3, [pc, #140]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	4a22      	ldr	r2, [pc, #136]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 80099ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ee:	61d3      	str	r3, [r2, #28]
=======
 8009970:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009974:	2b01      	cmp	r3, #1
 8009976:	d105      	bne.n	8009984 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009978:	4b23      	ldr	r3, [pc, #140]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	4a22      	ldr	r2, [pc, #136]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 800997e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009982:	61d3      	str	r3, [r2, #28]
>>>>>>> Stashed changes
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 80099f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8242 	beq.w	8009e86 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a02:	4b1c      	ldr	r3, [pc, #112]	; (8009a74 <HAL_RCC_OscConfig+0xc58>)
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f003 030c 	and.w	r3, r3, #12
 8009a0a:	2b08      	cmp	r3, #8
 8009a0c:	f000 8213 	beq.w	8009e36 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	f040 8162 	bne.w	8009ce6 <HAL_RCC_OscConfig+0xeca>
 8009a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a26:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a34:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	fa93 f2a3 	rbit	r2, r3
 8009a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a42:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009a46:	601a      	str	r2, [r3, #0]
  return result;
 8009a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a4c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009a50:	681b      	ldr	r3, [r3, #0]
=======
 8009984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009988:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 8242 	beq.w	8009e1a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009996:	4b1c      	ldr	r3, [pc, #112]	; (8009a08 <HAL_RCC_OscConfig+0xc58>)
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f003 030c 	and.w	r3, r3, #12
 800999e:	2b08      	cmp	r3, #8
 80099a0:	f000 8213 	beq.w	8009dca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	f040 8162 	bne.w	8009c7a <HAL_RCC_OscConfig+0xeca>
 80099b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099ba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80099be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	fa93 f2a3 	rbit	r2, r3
 80099d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80099da:	601a      	str	r2, [r3, #0]
  return result;
 80099dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80099e4:	681b      	ldr	r3, [r3, #0]
>>>>>>> Stashed changes
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8009a52:	fab3 f383 	clz	r3, r3
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	461a      	mov	r2, r3
 8009a64:	2300      	movs	r3, #0
 8009a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a68:	f7fc f9ce 	bl	8005e08 <HAL_GetTick>
 8009a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a70:	e00c      	b.n	8009a8c <HAL_RCC_OscConfig+0xc70>
 8009a72:	bf00      	nop
 8009a74:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a78:	f7fc f9c6 	bl	8005e08 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d901      	bls.n	8009a8c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e1fd      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
 8009a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a90:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	fa93 f2a3 	rbit	r2, r3
 8009aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009ab0:	601a      	str	r2, [r3, #0]
  return result;
 8009ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ab6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009aba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009abc:	fab3 f383 	clz	r3, r3
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	f043 0301 	orr.w	r3, r3, #1
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d102      	bne.n	8009ad6 <HAL_RCC_OscConfig+0xcba>
 8009ad0:	4bb0      	ldr	r3, [pc, #704]	; (8009d94 <HAL_RCC_OscConfig+0xf78>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	e027      	b.n	8009b26 <HAL_RCC_OscConfig+0xd0a>
 8009ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ada:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ae8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	fa93 f2a3 	rbit	r2, r3
 8009af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009af6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b00:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b0e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	fa93 f2a3 	rbit	r2, r3
 8009b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	4b9c      	ldr	r3, [pc, #624]	; (8009d94 <HAL_RCC_OscConfig+0xf78>)
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b2a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009b2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009b32:	6011      	str	r1, [r2, #0]
 8009b34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b38:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009b3c:	6812      	ldr	r2, [r2, #0]
 8009b3e:	fa92 f1a2 	rbit	r1, r2
 8009b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b46:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009b4a:	6011      	str	r1, [r2, #0]
  return result;
 8009b4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b50:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	fab2 f282 	clz	r2, r2
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	f042 0220 	orr.w	r2, r2, #32
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	f002 021f 	and.w	r2, r2, #31
 8009b66:	2101      	movs	r1, #1
 8009b68:	fa01 f202 	lsl.w	r2, r1, r2
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d182      	bne.n	8009a78 <HAL_RCC_OscConfig+0xc5c>
=======
 80099e6:	fab3 f383 	clz	r3, r3
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80099f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	461a      	mov	r2, r3
 80099f8:	2300      	movs	r3, #0
 80099fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099fc:	f7fc f9ce 	bl	8005d9c <HAL_GetTick>
 8009a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a04:	e00c      	b.n	8009a20 <HAL_RCC_OscConfig+0xc70>
 8009a06:	bf00      	nop
 8009a08:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a0c:	f7fc f9c6 	bl	8005d9c <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d901      	bls.n	8009a20 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e1fd      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	fa93 f2a3 	rbit	r2, r3
 8009a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a40:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009a44:	601a      	str	r2, [r3, #0]
  return result;
 8009a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a4a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009a4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a50:	fab3 f383 	clz	r3, r3
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	095b      	lsrs	r3, r3, #5
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	f043 0301 	orr.w	r3, r3, #1
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d102      	bne.n	8009a6a <HAL_RCC_OscConfig+0xcba>
 8009a64:	4bb0      	ldr	r3, [pc, #704]	; (8009d28 <HAL_RCC_OscConfig+0xf78>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	e027      	b.n	8009aba <HAL_RCC_OscConfig+0xd0a>
 8009a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a7c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	fa93 f2a3 	rbit	r2, r3
 8009a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a94:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aa2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	fa93 f2a3 	rbit	r2, r3
 8009aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ab0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	4b9c      	ldr	r3, [pc, #624]	; (8009d28 <HAL_RCC_OscConfig+0xf78>)
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009abe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009ac2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009ac6:	6011      	str	r1, [r2, #0]
 8009ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009acc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	fa92 f1a2 	rbit	r1, r2
 8009ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ada:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009ade:	6011      	str	r1, [r2, #0]
  return result;
 8009ae0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ae4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	fab2 f282 	clz	r2, r2
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	f042 0220 	orr.w	r2, r2, #32
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	f002 021f 	and.w	r2, r2, #31
 8009afa:	2101      	movs	r1, #1
 8009afc:	fa01 f202 	lsl.w	r2, r1, r2
 8009b00:	4013      	ands	r3, r2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d182      	bne.n	8009a0c <HAL_RCC_OscConfig+0xc5c>
>>>>>>> Stashed changes
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8009b72:	4b88      	ldr	r3, [pc, #544]	; (8009d94 <HAL_RCC_OscConfig+0xf78>)
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	430b      	orrs	r3, r1
 8009b94:	497f      	ldr	r1, [pc, #508]	; (8009d94 <HAL_RCC_OscConfig+0xf78>)
 8009b96:	4313      	orrs	r3, r2
 8009b98:	604b      	str	r3, [r1, #4]
 8009b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b9e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	fa93 f2a3 	rbit	r2, r3
 8009bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009bbe:	601a      	str	r2, [r3, #0]
  return result;
 8009bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bc4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009bc8:	681b      	ldr	r3, [r3, #0]
=======
 8009b06:	4b88      	ldr	r3, [pc, #544]	; (8009d28 <HAL_RCC_OscConfig+0xf78>)
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	430b      	orrs	r3, r1
 8009b28:	497f      	ldr	r1, [pc, #508]	; (8009d28 <HAL_RCC_OscConfig+0xf78>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	604b      	str	r3, [r1, #4]
 8009b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b32:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009b36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b40:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	fa93 f2a3 	rbit	r2, r3
 8009b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b4e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009b52:	601a      	str	r2, [r3, #0]
  return result;
 8009b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b58:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009b5c:	681b      	ldr	r3, [r3, #0]
>>>>>>> Stashed changes
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8009bca:	fab3 f383 	clz	r3, r3
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	461a      	mov	r2, r3
 8009bdc:	2301      	movs	r3, #1
 8009bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009be0:	f7fc f912 	bl	8005e08 <HAL_GetTick>
 8009be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009be8:	e009      	b.n	8009bfe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bea:	f7fc f90d 	bl	8005e08 <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e144      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
 8009bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c02:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	fa93 f2a3 	rbit	r2, r3
 8009c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009c22:	601a      	str	r2, [r3, #0]
  return result;
 8009c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c28:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009c2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009c2e:	fab3 f383 	clz	r3, r3
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	095b      	lsrs	r3, r3, #5
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d102      	bne.n	8009c48 <HAL_RCC_OscConfig+0xe2c>
 8009c42:	4b54      	ldr	r3, [pc, #336]	; (8009d94 <HAL_RCC_OscConfig+0xf78>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	e027      	b.n	8009c98 <HAL_RCC_OscConfig+0xe7c>
 8009c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c4c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c5a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	fa93 f2a3 	rbit	r2, r3
 8009c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c72:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c80:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	fa93 f2a3 	rbit	r2, r3
 8009c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c8e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	4b3f      	ldr	r3, [pc, #252]	; (8009d94 <HAL_RCC_OscConfig+0xf78>)
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c9c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009ca0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009ca4:	6011      	str	r1, [r2, #0]
 8009ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009caa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009cae:	6812      	ldr	r2, [r2, #0]
 8009cb0:	fa92 f1a2 	rbit	r1, r2
 8009cb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cb8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009cbc:	6011      	str	r1, [r2, #0]
  return result;
 8009cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cc2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009cc6:	6812      	ldr	r2, [r2, #0]
 8009cc8:	fab2 f282 	clz	r2, r2
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	f042 0220 	orr.w	r2, r2, #32
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	f002 021f 	and.w	r2, r2, #31
 8009cd8:	2101      	movs	r1, #1
 8009cda:	fa01 f202 	lsl.w	r2, r1, r2
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d082      	beq.n	8009bea <HAL_RCC_OscConfig+0xdce>
 8009ce4:	e0cf      	b.n	8009e86 <HAL_RCC_OscConfig+0x106a>
 8009ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cf8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	fa93 f2a3 	rbit	r2, r3
 8009d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d06:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d0a:	601a      	str	r2, [r3, #0]
  return result;
 8009d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d14:	681b      	ldr	r3, [r3, #0]
=======
 8009b5e:	fab3 f383 	clz	r3, r3
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009b68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	461a      	mov	r2, r3
 8009b70:	2301      	movs	r3, #1
 8009b72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b74:	f7fc f912 	bl	8005d9c <HAL_GetTick>
 8009b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009b7c:	e009      	b.n	8009b92 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b7e:	f7fc f90d 	bl	8005d9c <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e144      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b96:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ba4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	fa93 f2a3 	rbit	r2, r3
 8009bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bb2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009bb6:	601a      	str	r2, [r3, #0]
  return result;
 8009bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bbc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009bc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009bc2:	fab3 f383 	clz	r3, r3
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	095b      	lsrs	r3, r3, #5
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	f043 0301 	orr.w	r3, r3, #1
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d102      	bne.n	8009bdc <HAL_RCC_OscConfig+0xe2c>
 8009bd6:	4b54      	ldr	r3, [pc, #336]	; (8009d28 <HAL_RCC_OscConfig+0xf78>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	e027      	b.n	8009c2c <HAL_RCC_OscConfig+0xe7c>
 8009bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009be0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	fa93 f2a3 	rbit	r2, r3
 8009bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bfc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c06:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	fa93 f2a3 	rbit	r2, r3
 8009c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	4b3f      	ldr	r3, [pc, #252]	; (8009d28 <HAL_RCC_OscConfig+0xf78>)
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c30:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009c34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009c38:	6011      	str	r1, [r2, #0]
 8009c3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c3e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009c42:	6812      	ldr	r2, [r2, #0]
 8009c44:	fa92 f1a2 	rbit	r1, r2
 8009c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c4c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009c50:	6011      	str	r1, [r2, #0]
  return result;
 8009c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009c5a:	6812      	ldr	r2, [r2, #0]
 8009c5c:	fab2 f282 	clz	r2, r2
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	f042 0220 	orr.w	r2, r2, #32
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	f002 021f 	and.w	r2, r2, #31
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8009c72:	4013      	ands	r3, r2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d082      	beq.n	8009b7e <HAL_RCC_OscConfig+0xdce>
 8009c78:	e0cf      	b.n	8009e1a <HAL_RCC_OscConfig+0x106a>
 8009c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c7e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c8c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	fa93 f2a3 	rbit	r2, r3
 8009c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c9a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009c9e:	601a      	str	r2, [r3, #0]
  return result;
 8009ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ca4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009ca8:	681b      	ldr	r3, [r3, #0]
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8009d16:	fab3 f383 	clz	r3, r3
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009d20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	461a      	mov	r2, r3
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d2c:	f7fc f86c 	bl	8005e08 <HAL_GetTick>
 8009d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d34:	e009      	b.n	8009d4a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d36:	f7fc f867 	bl	8005e08 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d901      	bls.n	8009d4a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e09e      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
 8009d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d4e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d5c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	fa93 f2a3 	rbit	r2, r3
 8009d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d6a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009d6e:	601a      	str	r2, [r3, #0]
  return result;
 8009d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009d78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d7a:	fab3 f383 	clz	r3, r3
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f043 0301 	orr.w	r3, r3, #1
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d104      	bne.n	8009d98 <HAL_RCC_OscConfig+0xf7c>
 8009d8e:	4b01      	ldr	r3, [pc, #4]	; (8009d94 <HAL_RCC_OscConfig+0xf78>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	e029      	b.n	8009de8 <HAL_RCC_OscConfig+0xfcc>
 8009d94:	40021000 	.word	0x40021000
 8009d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d9c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009daa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	fa93 f2a3 	rbit	r2, r3
 8009db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009db8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dc2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dd0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	fa93 f2a3 	rbit	r2, r3
 8009dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dde:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	4b2b      	ldr	r3, [pc, #172]	; (8009e94 <HAL_RCC_OscConfig+0x1078>)
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009dec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009df0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009df4:	6011      	str	r1, [r2, #0]
 8009df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009dfa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009dfe:	6812      	ldr	r2, [r2, #0]
 8009e00:	fa92 f1a2 	rbit	r1, r2
 8009e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e08:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e0c:	6011      	str	r1, [r2, #0]
  return result;
 8009e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e16:	6812      	ldr	r2, [r2, #0]
 8009e18:	fab2 f282 	clz	r2, r2
 8009e1c:	b2d2      	uxtb	r2, r2
 8009e1e:	f042 0220 	orr.w	r2, r2, #32
 8009e22:	b2d2      	uxtb	r2, r2
 8009e24:	f002 021f 	and.w	r2, r2, #31
 8009e28:	2101      	movs	r1, #1
 8009e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8009e2e:	4013      	ands	r3, r2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d180      	bne.n	8009d36 <HAL_RCC_OscConfig+0xf1a>
 8009e34:	e027      	b.n	8009e86 <HAL_RCC_OscConfig+0x106a>
=======
 8009caa:	fab3 f383 	clz	r3, r3
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc0:	f7fc f86c 	bl	8005d9c <HAL_GetTick>
 8009cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009cc8:	e009      	b.n	8009cde <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cca:	f7fc f867 	bl	8005d9c <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e09e      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
 8009cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cf0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	fa93 f2a3 	rbit	r2, r3
 8009cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cfe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009d02:	601a      	str	r2, [r3, #0]
  return result;
 8009d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d08:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009d0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d0e:	fab3 f383 	clz	r3, r3
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	095b      	lsrs	r3, r3, #5
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f043 0301 	orr.w	r3, r3, #1
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d104      	bne.n	8009d2c <HAL_RCC_OscConfig+0xf7c>
 8009d22:	4b01      	ldr	r3, [pc, #4]	; (8009d28 <HAL_RCC_OscConfig+0xf78>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	e029      	b.n	8009d7c <HAL_RCC_OscConfig+0xfcc>
 8009d28:	40021000 	.word	0x40021000
 8009d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d30:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	fa93 f2a3 	rbit	r2, r3
 8009d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d56:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d64:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	fa93 f2a3 	rbit	r2, r3
 8009d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	4b2b      	ldr	r3, [pc, #172]	; (8009e28 <HAL_RCC_OscConfig+0x1078>)
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d80:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009d84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009d88:	6011      	str	r1, [r2, #0]
 8009d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d8e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	fa92 f1a2 	rbit	r1, r2
 8009d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d9c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009da0:	6011      	str	r1, [r2, #0]
  return result;
 8009da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009da6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	fab2 f282 	clz	r2, r2
 8009db0:	b2d2      	uxtb	r2, r2
 8009db2:	f042 0220 	orr.w	r2, r2, #32
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	f002 021f 	and.w	r2, r2, #31
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d180      	bne.n	8009cca <HAL_RCC_OscConfig+0xf1a>
 8009dc8:	e027      	b.n	8009e1a <HAL_RCC_OscConfig+0x106a>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8009e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d101      	bne.n	8009e4a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e01e      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
=======
 8009dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d101      	bne.n	8009dde <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e01e      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< Updated upstream
 8009e4a:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <HAL_RCC_OscConfig+0x1078>)
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
=======
 8009dde:	4b12      	ldr	r3, [pc, #72]	; (8009e28 <HAL_RCC_OscConfig+0x1078>)
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
>>>>>>> Stashed changes
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
<<<<<<< Updated upstream
 8009e52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009e56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d10b      	bne.n	8009e82 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8009e6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009e6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d001      	beq.n	8009e86 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <HAL_RCC_OscConfig+0x106c>
=======
 8009de6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009dea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d10b      	bne.n	8009e16 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8009dfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d001      	beq.n	8009e1a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e000      	b.n	8009e1c <HAL_RCC_OscConfig+0x106c>
>>>>>>> Stashed changes
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	40021000 	.word	0x40021000

08009e98 <HAL_RCC_ClockConfig>:
=======
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	40021000 	.word	0x40021000

08009e2c <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b09e      	sub	sp, #120	; 0x78
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e162      	b.n	800a176 <HAL_RCC_ClockConfig+0x2de>
=======
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b09e      	sub	sp, #120	; 0x78
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e162      	b.n	800a10a <HAL_RCC_ClockConfig+0x2de>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8009eb0:	4b90      	ldr	r3, [pc, #576]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0307 	and.w	r3, r3, #7
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d910      	bls.n	8009ee0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ebe:	4b8d      	ldr	r3, [pc, #564]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f023 0207 	bic.w	r2, r3, #7
 8009ec6:	498b      	ldr	r1, [pc, #556]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	600b      	str	r3, [r1, #0]
=======
 8009e44:	4b90      	ldr	r3, [pc, #576]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d910      	bls.n	8009e74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e52:	4b8d      	ldr	r3, [pc, #564]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f023 0207 	bic.w	r2, r3, #7
 8009e5a:	498b      	ldr	r1, [pc, #556]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8009ece:	4b89      	ldr	r3, [pc, #548]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d001      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e14a      	b.n	800a176 <HAL_RCC_ClockConfig+0x2de>
=======
 8009e62:	4b89      	ldr	r3, [pc, #548]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d001      	beq.n	8009e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e14a      	b.n	800a10a <HAL_RCC_ClockConfig+0x2de>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009eec:	4b82      	ldr	r3, [pc, #520]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	497f      	ldr	r1, [pc, #508]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	604b      	str	r3, [r1, #4]
=======
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d008      	beq.n	8009e92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e80:	4b82      	ldr	r3, [pc, #520]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	497f      	ldr	r1, [pc, #508]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 80dc 	beq.w	800a0c4 <HAL_RCC_ClockConfig+0x22c>
=======
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 80dc 	beq.w	800a058 <HAL_RCC_ClockConfig+0x22c>
>>>>>>> Stashed changes
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d13c      	bne.n	8009f8e <HAL_RCC_ClockConfig+0xf6>
 8009f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f1c:	fa93 f3a3 	rbit	r3, r3
 8009f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f24:	fab3 f383 	clz	r3, r3
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	095b      	lsrs	r3, r3, #5
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	f043 0301 	orr.w	r3, r3, #1
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d102      	bne.n	8009f3e <HAL_RCC_ClockConfig+0xa6>
 8009f38:	4b6f      	ldr	r3, [pc, #444]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	e00f      	b.n	8009f5e <HAL_RCC_ClockConfig+0xc6>
 8009f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f46:	fa93 f3a3 	rbit	r3, r3
 8009f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8009f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f50:	663b      	str	r3, [r7, #96]	; 0x60
 8009f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f54:	fa93 f3a3 	rbit	r3, r3
 8009f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f5a:	4b67      	ldr	r3, [pc, #412]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009f62:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f66:	fa92 f2a2 	rbit	r2, r2
 8009f6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f6e:	fab2 f282 	clz	r2, r2
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	f042 0220 	orr.w	r2, r2, #32
 8009f78:	b2d2      	uxtb	r2, r2
 8009f7a:	f002 021f 	and.w	r2, r2, #31
 8009f7e:	2101      	movs	r1, #1
 8009f80:	fa01 f202 	lsl.w	r2, r1, r2
 8009f84:	4013      	ands	r3, r2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d17b      	bne.n	800a082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e0f3      	b.n	800a176 <HAL_RCC_ClockConfig+0x2de>
=======
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d13c      	bne.n	8009f22 <HAL_RCC_ClockConfig+0xf6>
 8009ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009eac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009eb0:	fa93 f3a3 	rbit	r3, r3
 8009eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eb8:	fab3 f383 	clz	r3, r3
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f043 0301 	orr.w	r3, r3, #1
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d102      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0xa6>
 8009ecc:	4b6f      	ldr	r3, [pc, #444]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	e00f      	b.n	8009ef2 <HAL_RCC_ClockConfig+0xc6>
 8009ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ed6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eda:	fa93 f3a3 	rbit	r3, r3
 8009ede:	667b      	str	r3, [r7, #100]	; 0x64
 8009ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8009ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee8:	fa93 f3a3 	rbit	r3, r3
 8009eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009eee:	4b67      	ldr	r3, [pc, #412]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009ef6:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009efa:	fa92 f2a2 	rbit	r2, r2
 8009efe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f02:	fab2 f282 	clz	r2, r2
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	f042 0220 	orr.w	r2, r2, #32
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	f002 021f 	and.w	r2, r2, #31
 8009f12:	2101      	movs	r1, #1
 8009f14:	fa01 f202 	lsl.w	r2, r1, r2
 8009f18:	4013      	ands	r3, r2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d17b      	bne.n	800a016 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e0f3      	b.n	800a10a <HAL_RCC_ClockConfig+0x2de>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d13c      	bne.n	800a010 <HAL_RCC_ClockConfig+0x178>
 8009f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f9e:	fa93 f3a3 	rbit	r3, r3
 8009fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fa6:	fab3 f383 	clz	r3, r3
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	095b      	lsrs	r3, r3, #5
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	f043 0301 	orr.w	r3, r3, #1
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d102      	bne.n	8009fc0 <HAL_RCC_ClockConfig+0x128>
 8009fba:	4b4f      	ldr	r3, [pc, #316]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	e00f      	b.n	8009fe0 <HAL_RCC_ClockConfig+0x148>
 8009fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc8:	fa93 f3a3 	rbit	r3, r3
 8009fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8009fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8009fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd6:	fa93 f3a3 	rbit	r3, r3
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fdc:	4b46      	ldr	r3, [pc, #280]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009fe4:	63ba      	str	r2, [r7, #56]	; 0x38
 8009fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fe8:	fa92 f2a2 	rbit	r2, r2
 8009fec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ff0:	fab2 f282 	clz	r2, r2
 8009ff4:	b2d2      	uxtb	r2, r2
 8009ff6:	f042 0220 	orr.w	r2, r2, #32
 8009ffa:	b2d2      	uxtb	r2, r2
 8009ffc:	f002 021f 	and.w	r2, r2, #31
 800a000:	2101      	movs	r1, #1
 800a002:	fa01 f202 	lsl.w	r2, r1, r2
 800a006:	4013      	ands	r3, r2
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d13a      	bne.n	800a082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e0b2      	b.n	800a176 <HAL_RCC_ClockConfig+0x2de>
 800a010:	2302      	movs	r3, #2
 800a012:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	fa93 f3a3 	rbit	r3, r3
 800a01a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
=======
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d13c      	bne.n	8009fa4 <HAL_RCC_ClockConfig+0x178>
 8009f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f32:	fa93 f3a3 	rbit	r3, r3
 8009f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f3a:	fab3 f383 	clz	r3, r3
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	095b      	lsrs	r3, r3, #5
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f043 0301 	orr.w	r3, r3, #1
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d102      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x128>
 8009f4e:	4b4f      	ldr	r3, [pc, #316]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	e00f      	b.n	8009f74 <HAL_RCC_ClockConfig+0x148>
 8009f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f5c:	fa93 f3a3 	rbit	r3, r3
 8009f60:	647b      	str	r3, [r7, #68]	; 0x44
 8009f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f66:	643b      	str	r3, [r7, #64]	; 0x40
 8009f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6a:	fa93 f3a3 	rbit	r3, r3
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f70:	4b46      	ldr	r3, [pc, #280]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f78:	63ba      	str	r2, [r7, #56]	; 0x38
 8009f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f7c:	fa92 f2a2 	rbit	r2, r2
 8009f80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f84:	fab2 f282 	clz	r2, r2
 8009f88:	b2d2      	uxtb	r2, r2
 8009f8a:	f042 0220 	orr.w	r2, r2, #32
 8009f8e:	b2d2      	uxtb	r2, r2
 8009f90:	f002 021f 	and.w	r2, r2, #31
 8009f94:	2101      	movs	r1, #1
 8009f96:	fa01 f202 	lsl.w	r2, r1, r2
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d13a      	bne.n	800a016 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e0b2      	b.n	800a10a <HAL_RCC_ClockConfig+0x2de>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	fa93 f3a3 	rbit	r3, r3
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 800a01e:	fab3 f383 	clz	r3, r3
 800a022:	b2db      	uxtb	r3, r3
 800a024:	095b      	lsrs	r3, r3, #5
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f043 0301 	orr.w	r3, r3, #1
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d102      	bne.n	800a038 <HAL_RCC_ClockConfig+0x1a0>
 800a032:	4b31      	ldr	r3, [pc, #196]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	e00d      	b.n	800a054 <HAL_RCC_ClockConfig+0x1bc>
 800a038:	2302      	movs	r3, #2
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	fa93 f3a3 	rbit	r3, r3
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
 800a044:	2302      	movs	r3, #2
 800a046:	623b      	str	r3, [r7, #32]
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	fa93 f3a3 	rbit	r3, r3
 800a04e:	61fb      	str	r3, [r7, #28]
 800a050:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2202      	movs	r2, #2
 800a056:	61ba      	str	r2, [r7, #24]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	fa92 f2a2 	rbit	r2, r2
 800a05e:	617a      	str	r2, [r7, #20]
  return result;
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	fab2 f282 	clz	r2, r2
 800a066:	b2d2      	uxtb	r2, r2
 800a068:	f042 0220 	orr.w	r2, r2, #32
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	f002 021f 	and.w	r2, r2, #31
 800a072:	2101      	movs	r1, #1
 800a074:	fa01 f202 	lsl.w	r2, r1, r2
 800a078:	4013      	ands	r3, r2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e079      	b.n	800a176 <HAL_RCC_ClockConfig+0x2de>
=======
 8009fb2:	fab3 f383 	clz	r3, r3
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	095b      	lsrs	r3, r3, #5
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	f043 0301 	orr.w	r3, r3, #1
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d102      	bne.n	8009fcc <HAL_RCC_ClockConfig+0x1a0>
 8009fc6:	4b31      	ldr	r3, [pc, #196]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	e00d      	b.n	8009fe8 <HAL_RCC_ClockConfig+0x1bc>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	fa93 f3a3 	rbit	r3, r3
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd8:	2302      	movs	r3, #2
 8009fda:	623b      	str	r3, [r7, #32]
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	fa93 f3a3 	rbit	r3, r3
 8009fe2:	61fb      	str	r3, [r7, #28]
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	2202      	movs	r2, #2
 8009fea:	61ba      	str	r2, [r7, #24]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	fa92 f2a2 	rbit	r2, r2
 8009ff2:	617a      	str	r2, [r7, #20]
  return result;
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	fab2 f282 	clz	r2, r2
 8009ffa:	b2d2      	uxtb	r2, r2
 8009ffc:	f042 0220 	orr.w	r2, r2, #32
 800a000:	b2d2      	uxtb	r2, r2
 800a002:	f002 021f 	and.w	r2, r2, #31
 800a006:	2101      	movs	r1, #1
 800a008:	fa01 f202 	lsl.w	r2, r1, r2
 800a00c:	4013      	ands	r3, r2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e079      	b.n	800a10a <HAL_RCC_ClockConfig+0x2de>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 800a082:	4b1d      	ldr	r3, [pc, #116]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f023 0203 	bic.w	r2, r3, #3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	491a      	ldr	r1, [pc, #104]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 800a090:	4313      	orrs	r3, r2
 800a092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a094:	f7fb feb8 	bl	8005e08 <HAL_GetTick>
 800a098:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a09a:	e00a      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a09c:	f7fb feb4 	bl	8005e08 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e061      	b.n	800a176 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0b2:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <HAL_RCC_ClockConfig+0x260>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f003 020c 	and.w	r2, r3, #12
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d1eb      	bne.n	800a09c <HAL_RCC_ClockConfig+0x204>
=======
 800a016:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f023 0203 	bic.w	r2, r3, #3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	491a      	ldr	r1, [pc, #104]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 800a024:	4313      	orrs	r3, r2
 800a026:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a028:	f7fb feb8 	bl	8005d9c <HAL_GetTick>
 800a02c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a02e:	e00a      	b.n	800a046 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a030:	f7fb feb4 	bl	8005d9c <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a03e:	4293      	cmp	r3, r2
 800a040:	d901      	bls.n	800a046 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e061      	b.n	800a10a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a046:	4b11      	ldr	r3, [pc, #68]	; (800a08c <HAL_RCC_ClockConfig+0x260>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f003 020c 	and.w	r2, r3, #12
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	429a      	cmp	r2, r3
 800a056:	d1eb      	bne.n	800a030 <HAL_RCC_ClockConfig+0x204>
>>>>>>> Stashed changes
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 800a0c4:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d214      	bcs.n	800a0fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0d2:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f023 0207 	bic.w	r2, r3, #7
 800a0da:	4906      	ldr	r1, [pc, #24]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	600b      	str	r3, [r1, #0]
=======
 800a058:	4b0b      	ldr	r3, [pc, #44]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d214      	bcs.n	800a090 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a066:	4b08      	ldr	r3, [pc, #32]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f023 0207 	bic.w	r2, r3, #7
 800a06e:	4906      	ldr	r1, [pc, #24]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	4313      	orrs	r3, r2
 800a074:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 800a0e2:	4b04      	ldr	r3, [pc, #16]	; (800a0f4 <HAL_RCC_ClockConfig+0x25c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d005      	beq.n	800a0fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e040      	b.n	800a176 <HAL_RCC_ClockConfig+0x2de>
 800a0f4:	40022000 	.word	0x40022000
 800a0f8:	40021000 	.word	0x40021000
=======
 800a076:	4b04      	ldr	r3, [pc, #16]	; (800a088 <HAL_RCC_ClockConfig+0x25c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d005      	beq.n	800a090 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e040      	b.n	800a10a <HAL_RCC_ClockConfig+0x2de>
 800a088:	40022000 	.word	0x40022000
 800a08c:	40021000 	.word	0x40021000
>>>>>>> Stashed changes
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b00      	cmp	r3, #0
 800a106:	d008      	beq.n	800a11a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a108:	4b1d      	ldr	r3, [pc, #116]	; (800a180 <HAL_RCC_ClockConfig+0x2e8>)
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	491a      	ldr	r1, [pc, #104]	; (800a180 <HAL_RCC_ClockConfig+0x2e8>)
 800a116:	4313      	orrs	r3, r2
 800a118:	604b      	str	r3, [r1, #4]
=======
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d008      	beq.n	800a0ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a09c:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <HAL_RCC_ClockConfig+0x2e8>)
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	491a      	ldr	r1, [pc, #104]	; (800a114 <HAL_RCC_ClockConfig+0x2e8>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b00      	cmp	r3, #0
 800a124:	d009      	beq.n	800a13a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a126:	4b16      	ldr	r3, [pc, #88]	; (800a180 <HAL_RCC_ClockConfig+0x2e8>)
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	4912      	ldr	r1, [pc, #72]	; (800a180 <HAL_RCC_ClockConfig+0x2e8>)
 800a136:	4313      	orrs	r3, r2
 800a138:	604b      	str	r3, [r1, #4]
=======
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0ba:	4b16      	ldr	r3, [pc, #88]	; (800a114 <HAL_RCC_ClockConfig+0x2e8>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	4912      	ldr	r1, [pc, #72]	; (800a114 <HAL_RCC_ClockConfig+0x2e8>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
<<<<<<< Updated upstream
 800a13a:	f000 f829 	bl	800a190 <HAL_RCC_GetSysClockFreq>
 800a13e:	4601      	mov	r1, r0
 800a140:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <HAL_RCC_ClockConfig+0x2e8>)
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a148:	22f0      	movs	r2, #240	; 0xf0
 800a14a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	fa92 f2a2 	rbit	r2, r2
 800a152:	60fa      	str	r2, [r7, #12]
  return result;
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	fab2 f282 	clz	r2, r2
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	40d3      	lsrs	r3, r2
 800a15e:	4a09      	ldr	r2, [pc, #36]	; (800a184 <HAL_RCC_ClockConfig+0x2ec>)
 800a160:	5cd3      	ldrb	r3, [r2, r3]
 800a162:	fa21 f303 	lsr.w	r3, r1, r3
 800a166:	4a08      	ldr	r2, [pc, #32]	; (800a188 <HAL_RCC_ClockConfig+0x2f0>)
 800a168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a16a:	4b08      	ldr	r3, [pc, #32]	; (800a18c <HAL_RCC_ClockConfig+0x2f4>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fa ffdc 	bl	800512c <HAL_InitTick>
  
  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3778      	adds	r7, #120	; 0x78
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	40021000 	.word	0x40021000
 800a184:	080119a0 	.word	0x080119a0
 800a188:	2000003c 	.word	0x2000003c
 800a18c:	200000b8 	.word	0x200000b8

0800a190 <HAL_RCC_GetSysClockFreq>:
=======
 800a0ce:	f000 f829 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <HAL_RCC_ClockConfig+0x2e8>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0dc:	22f0      	movs	r2, #240	; 0xf0
 800a0de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	fa92 f2a2 	rbit	r2, r2
 800a0e6:	60fa      	str	r2, [r7, #12]
  return result;
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	fab2 f282 	clz	r2, r2
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	40d3      	lsrs	r3, r2
 800a0f2:	4a09      	ldr	r2, [pc, #36]	; (800a118 <HAL_RCC_ClockConfig+0x2ec>)
 800a0f4:	5cd3      	ldrb	r3, [r2, r3]
 800a0f6:	fa21 f303 	lsr.w	r3, r1, r3
 800a0fa:	4a08      	ldr	r2, [pc, #32]	; (800a11c <HAL_RCC_ClockConfig+0x2f0>)
 800a0fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a0fe:	4b08      	ldr	r3, [pc, #32]	; (800a120 <HAL_RCC_ClockConfig+0x2f4>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f7fb f814 	bl	8005130 <HAL_InitTick>
  
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3778      	adds	r7, #120	; 0x78
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	40021000 	.word	0x40021000
 800a118:	08011938 	.word	0x08011938
 800a11c:	20000040 	.word	0x20000040
 800a120:	200000bc 	.word	0x200000bc

0800a124 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 800a190:	b480      	push	{r7}
 800a192:	b08b      	sub	sp, #44	; 0x2c
 800a194:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	2300      	movs	r3, #0
 800a19c:	61bb      	str	r3, [r7, #24]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a1aa:	4b29      	ldr	r3, [pc, #164]	; (800a250 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	f003 030c 	and.w	r3, r3, #12
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d002      	beq.n	800a1c0 <HAL_RCC_GetSysClockFreq+0x30>
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d003      	beq.n	800a1c6 <HAL_RCC_GetSysClockFreq+0x36>
 800a1be:	e03c      	b.n	800a23a <HAL_RCC_GetSysClockFreq+0xaa>
=======
 800a124:	b480      	push	{r7}
 800a126:	b08b      	sub	sp, #44	; 0x2c
 800a128:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	61fb      	str	r3, [r7, #28]
 800a12e:	2300      	movs	r3, #0
 800a130:	61bb      	str	r3, [r7, #24]
 800a132:	2300      	movs	r3, #0
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a13e:	4b29      	ldr	r3, [pc, #164]	; (800a1e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f003 030c 	and.w	r3, r3, #12
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d002      	beq.n	800a154 <HAL_RCC_GetSysClockFreq+0x30>
 800a14e:	2b08      	cmp	r3, #8
 800a150:	d003      	beq.n	800a15a <HAL_RCC_GetSysClockFreq+0x36>
 800a152:	e03c      	b.n	800a1ce <HAL_RCC_GetSysClockFreq+0xaa>
>>>>>>> Stashed changes
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 800a1c0:	4b24      	ldr	r3, [pc, #144]	; (800a254 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a1c2:	623b      	str	r3, [r7, #32]
      break;
 800a1c4:	e03c      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0xb0>
=======
 800a154:	4b24      	ldr	r3, [pc, #144]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a156:	623b      	str	r3, [r7, #32]
      break;
 800a158:	e03c      	b.n	800a1d4 <HAL_RCC_GetSysClockFreq+0xb0>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
<<<<<<< Updated upstream
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a1cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a1d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	fa92 f2a2 	rbit	r2, r2
 800a1d8:	607a      	str	r2, [r7, #4]
  return result;
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	fab2 f282 	clz	r2, r2
 800a1e0:	b2d2      	uxtb	r2, r2
 800a1e2:	40d3      	lsrs	r3, r2
 800a1e4:	4a1c      	ldr	r2, [pc, #112]	; (800a258 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a1e6:	5cd3      	ldrb	r3, [r2, r3]
 800a1e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a1ea:	4b19      	ldr	r3, [pc, #100]	; (800a250 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	220f      	movs	r2, #15
 800a1f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	fa92 f2a2 	rbit	r2, r2
 800a1fc:	60fa      	str	r2, [r7, #12]
  return result;
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	fab2 f282 	clz	r2, r2
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	40d3      	lsrs	r3, r2
 800a208:	4a14      	ldr	r2, [pc, #80]	; (800a25c <HAL_RCC_GetSysClockFreq+0xcc>)
 800a20a:	5cd3      	ldrb	r3, [r2, r3]
 800a20c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d008      	beq.n	800a22a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a218:	4a0e      	ldr	r2, [pc, #56]	; (800a254 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
 800a228:	e004      	b.n	800a234 <HAL_RCC_GetSysClockFreq+0xa4>
=======
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a160:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a164:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	fa92 f2a2 	rbit	r2, r2
 800a16c:	607a      	str	r2, [r7, #4]
  return result;
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	fab2 f282 	clz	r2, r2
 800a174:	b2d2      	uxtb	r2, r2
 800a176:	40d3      	lsrs	r3, r2
 800a178:	4a1c      	ldr	r2, [pc, #112]	; (800a1ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800a17a:	5cd3      	ldrb	r3, [r2, r3]
 800a17c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a17e:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	220f      	movs	r2, #15
 800a188:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	fa92 f2a2 	rbit	r2, r2
 800a190:	60fa      	str	r2, [r7, #12]
  return result;
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	fab2 f282 	clz	r2, r2
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	40d3      	lsrs	r3, r2
 800a19c:	4a14      	ldr	r2, [pc, #80]	; (800a1f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a19e:	5cd3      	ldrb	r3, [r2, r3]
 800a1a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d008      	beq.n	800a1be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a1ac:	4a0e      	ldr	r2, [pc, #56]	; (800a1e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a1bc:	e004      	b.n	800a1c8 <HAL_RCC_GetSysClockFreq+0xa4>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
<<<<<<< Updated upstream
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	4a0c      	ldr	r2, [pc, #48]	; (800a260 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a22e:	fb02 f303 	mul.w	r3, r2, r3
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	4a0c      	ldr	r2, [pc, #48]	; (800a1f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
<<<<<<< Updated upstream
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	623b      	str	r3, [r7, #32]
      break;
 800a238:	e002      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0xb0>
=======
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	623b      	str	r3, [r7, #32]
      break;
 800a1cc:	e002      	b.n	800a1d4 <HAL_RCC_GetSysClockFreq+0xb0>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 800a23a:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a23c:	623b      	str	r3, [r7, #32]
      break;
 800a23e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a240:	6a3b      	ldr	r3, [r7, #32]
}
 800a242:	4618      	mov	r0, r3
 800a244:	372c      	adds	r7, #44	; 0x2c
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40021000 	.word	0x40021000
 800a254:	016e3600 	.word	0x016e3600
 800a258:	080119b8 	.word	0x080119b8
 800a25c:	080119c8 	.word	0x080119c8
 800a260:	003d0900 	.word	0x003d0900
 800a264:	007a1200 	.word	0x007a1200

0800a268 <HAL_RCC_GetHCLKFreq>:
=======
 800a1ce:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a1d0:	623b      	str	r3, [r7, #32]
      break;
 800a1d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	372c      	adds	r7, #44	; 0x2c
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	40021000 	.word	0x40021000
 800a1e8:	016e3600 	.word	0x016e3600
 800a1ec:	08011950 	.word	0x08011950
 800a1f0:	08011960 	.word	0x08011960
 800a1f4:	003d0900 	.word	0x003d0900
 800a1f8:	007a1200 	.word	0x007a1200

0800a1fc <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 800a268:	b480      	push	{r7}
 800a26a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a26c:	4b03      	ldr	r3, [pc, #12]	; (800a27c <HAL_RCC_GetHCLKFreq+0x14>)
 800a26e:	681b      	ldr	r3, [r3, #0]
}
 800a270:	4618      	mov	r0, r3
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	2000003c 	.word	0x2000003c

0800a280 <HAL_RCC_GetPCLK1Freq>:
=======
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a200:	4b03      	ldr	r3, [pc, #12]	; (800a210 <HAL_RCC_GetHCLKFreq+0x14>)
 800a202:	681b      	ldr	r3, [r3, #0]
}
 800a204:	4618      	mov	r0, r3
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20000040 	.word	0x20000040

0800a214 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a286:	f7ff ffef 	bl	800a268 <HAL_RCC_GetHCLKFreq>
 800a28a:	4601      	mov	r1, r0
 800a28c:	4b0b      	ldr	r3, [pc, #44]	; (800a2bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a294:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a298:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	fa92 f2a2 	rbit	r2, r2
 800a2a0:	603a      	str	r2, [r7, #0]
  return result;
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	fab2 f282 	clz	r2, r2
 800a2a8:	b2d2      	uxtb	r2, r2
 800a2aa:	40d3      	lsrs	r3, r2
 800a2ac:	4a04      	ldr	r2, [pc, #16]	; (800a2c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a2ae:	5cd3      	ldrb	r3, [r2, r3]
 800a2b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	40021000 	.word	0x40021000
 800a2c0:	080119b0 	.word	0x080119b0

0800a2c4 <HAL_RCC_GetPCLK2Freq>:
=======
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a21a:	f7ff ffef 	bl	800a1fc <HAL_RCC_GetHCLKFreq>
 800a21e:	4601      	mov	r1, r0
 800a220:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a228:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a22c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	fa92 f2a2 	rbit	r2, r2
 800a234:	603a      	str	r2, [r7, #0]
  return result;
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	fab2 f282 	clz	r2, r2
 800a23c:	b2d2      	uxtb	r2, r2
 800a23e:	40d3      	lsrs	r3, r2
 800a240:	4a04      	ldr	r2, [pc, #16]	; (800a254 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a242:	5cd3      	ldrb	r3, [r2, r3]
 800a244:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a248:	4618      	mov	r0, r3
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	40021000 	.word	0x40021000
 800a254:	08011948 	.word	0x08011948

0800a258 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a2ca:	f7ff ffcd 	bl	800a268 <HAL_RCC_GetHCLKFreq>
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a2d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a2dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	fa92 f2a2 	rbit	r2, r2
 800a2e4:	603a      	str	r2, [r7, #0]
  return result;
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	fab2 f282 	clz	r2, r2
 800a2ec:	b2d2      	uxtb	r2, r2
 800a2ee:	40d3      	lsrs	r3, r2
 800a2f0:	4a04      	ldr	r2, [pc, #16]	; (800a304 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a2f2:	5cd3      	ldrb	r3, [r2, r3]
 800a2f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40021000 	.word	0x40021000
 800a304:	080119b0 	.word	0x080119b0

0800a308 <HAL_RCC_GetClockConfig>:
=======
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a25e:	f7ff ffcd 	bl	800a1fc <HAL_RCC_GetHCLKFreq>
 800a262:	4601      	mov	r1, r0
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a26c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a270:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	fa92 f2a2 	rbit	r2, r2
 800a278:	603a      	str	r2, [r7, #0]
  return result;
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	fab2 f282 	clz	r2, r2
 800a280:	b2d2      	uxtb	r2, r2
 800a282:	40d3      	lsrs	r3, r2
 800a284:	4a04      	ldr	r2, [pc, #16]	; (800a298 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a286:	5cd3      	ldrb	r3, [r2, r3]
 800a288:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	40021000 	.word	0x40021000
 800a298:	08011948 	.word	0x08011948

0800a29c <HAL_RCC_GetClockConfig>:
>>>>>>> Stashed changes
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< Updated upstream
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
=======
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< Updated upstream
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	220f      	movs	r2, #15
 800a316:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a318:	4b12      	ldr	r3, [pc, #72]	; (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f003 0203 	and.w	r2, r3, #3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800a330:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a33c:	4b09      	ldr	r3, [pc, #36]	; (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	08db      	lsrs	r3, r3, #3
 800a342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800a34a:	4b07      	ldr	r3, [pc, #28]	; (800a368 <HAL_RCC_GetClockConfig+0x60>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0207 	and.w	r2, r3, #7
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	601a      	str	r2, [r3, #0]
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	40021000 	.word	0x40021000
 800a368:	40022000 	.word	0x40022000

0800a36c <HAL_RCCEx_PeriphCLKConfig>:
=======
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	220f      	movs	r2, #15
 800a2aa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a2ac:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f003 0203 	and.w	r2, r3, #3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800a2b8:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	08db      	lsrs	r3, r3, #3
 800a2d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <HAL_RCC_GetClockConfig+0x60>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0207 	and.w	r2, r3, #7
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	601a      	str	r2, [r3, #0]
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	40021000 	.word	0x40021000
 800a2fc:	40022000 	.word	0x40022000

0800a300 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b092      	sub	sp, #72	; 0x48
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a37c:	2300      	movs	r3, #0
 800a37e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
=======
 800a300:	b580      	push	{r7, lr}
 800a302:	b092      	sub	sp, #72	; 0x48
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a310:	2300      	movs	r3, #0
 800a312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
>>>>>>> Stashed changes
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< Updated upstream
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 80d4 	beq.w	800a538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
=======
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 80d4 	beq.w	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
>>>>>>> Stashed changes


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 800a390:	4b4e      	ldr	r3, [pc, #312]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10e      	bne.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a39c:	4b4b      	ldr	r3, [pc, #300]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	4a4a      	ldr	r2, [pc, #296]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3a6:	61d3      	str	r3, [r2, #28]
 800a3a8:	4b48      	ldr	r3, [pc, #288]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3b0:	60bb      	str	r3, [r7, #8]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3ba:	4b45      	ldr	r3, [pc, #276]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d118      	bne.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3c6:	4b42      	ldr	r3, [pc, #264]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a41      	ldr	r2, [pc, #260]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a3cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3d2:	f7fb fd19 	bl	8005e08 <HAL_GetTick>
 800a3d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3d8:	e008      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3da:	f7fb fd15 	bl	8005e08 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	2b64      	cmp	r3, #100	; 0x64
 800a3e6:	d901      	bls.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e169      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3ec:	4b38      	ldr	r3, [pc, #224]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0f0      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x6e>
=======
 800a324:	4b4e      	ldr	r3, [pc, #312]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10e      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a330:	4b4b      	ldr	r3, [pc, #300]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	4a4a      	ldr	r2, [pc, #296]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a33a:	61d3      	str	r3, [r2, #28]
 800a33c:	4b48      	ldr	r3, [pc, #288]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a344:	60bb      	str	r3, [r7, #8]
 800a346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a34e:	4b45      	ldr	r3, [pc, #276]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a356:	2b00      	cmp	r3, #0
 800a358:	d118      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a35a:	4b42      	ldr	r3, [pc, #264]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a41      	ldr	r2, [pc, #260]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a364:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a366:	f7fb fd19 	bl	8005d9c <HAL_GetTick>
 800a36a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a36c:	e008      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a36e:	f7fb fd15 	bl	8005d9c <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	2b64      	cmp	r3, #100	; 0x64
 800a37a:	d901      	bls.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e169      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a380:	4b38      	ldr	r3, [pc, #224]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0f0      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x6e>
>>>>>>> Stashed changes
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< Updated upstream
 800a3f8:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 8084 	beq.w	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a414:	429a      	cmp	r2, r3
 800a416:	d07c      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a418:	4b2c      	ldr	r3, [pc, #176]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a420:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	fa93 f3a3 	rbit	r3, r3
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a432:	fab3 f383 	clz	r3, r3
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	4b26      	ldr	r3, [pc, #152]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	461a      	mov	r2, r3
 800a442:	2301      	movs	r3, #1
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a44a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	fa93 f3a3 	rbit	r3, r3
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a456:	fab3 f383 	clz	r3, r3
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	461a      	mov	r2, r3
 800a45e:	4b1d      	ldr	r3, [pc, #116]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	461a      	mov	r2, r3
 800a466:	2300      	movs	r3, #0
 800a468:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a46a:	4a18      	ldr	r2, [pc, #96]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d04b      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a47a:	f7fb fcc5 	bl	8005e08 <HAL_GetTick>
 800a47e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a480:	e00a      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a482:	f7fb fcc1 	bl	8005e08 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a490:	4293      	cmp	r3, r2
 800a492:	d901      	bls.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e113      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a498:	2302      	movs	r3, #2
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	fa93 f3a3 	rbit	r3, r3
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	623b      	str	r3, [r7, #32]
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	fa93 f3a3 	rbit	r3, r3
 800a4ae:	61fb      	str	r3, [r7, #28]
  return result;
 800a4b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4b2:	fab3 f383 	clz	r3, r3
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f043 0302 	orr.w	r3, r3, #2
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d108      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a4c6:	4b01      	ldr	r3, [pc, #4]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	e00d      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	40007000 	.word	0x40007000
 800a4d4:	10908100 	.word	0x10908100
 800a4d8:	2302      	movs	r3, #2
 800a4da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	fa93 f3a3 	rbit	r3, r3
 800a4e2:	617b      	str	r3, [r7, #20]
 800a4e4:	4b78      	ldr	r3, [pc, #480]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2202      	movs	r2, #2
 800a4ea:	613a      	str	r2, [r7, #16]
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	fa92 f2a2 	rbit	r2, r2
 800a4f2:	60fa      	str	r2, [r7, #12]
  return result;
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	fab2 f282 	clz	r2, r2
 800a4fa:	b2d2      	uxtb	r2, r2
 800a4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	f002 021f 	and.w	r2, r2, #31
 800a506:	2101      	movs	r1, #1
 800a508:	fa01 f202 	lsl.w	r2, r1, r2
 800a50c:	4013      	ands	r3, r2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0b7      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x116>
=======
 800a38c:	4b34      	ldr	r3, [pc, #208]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8084 	beq.w	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d07c      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3ac:	4b2c      	ldr	r3, [pc, #176]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	fa93 f3a3 	rbit	r3, r3
 800a3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a3c6:	fab3 f383 	clz	r3, r3
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4b26      	ldr	r3, [pc, #152]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a3d0:	4413      	add	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	fa93 f3a3 	rbit	r3, r3
 800a3e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a3ea:	fab3 f383 	clz	r3, r3
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a3fe:	4a18      	ldr	r2, [pc, #96]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a402:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d04b      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a40e:	f7fb fcc5 	bl	8005d9c <HAL_GetTick>
 800a412:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a414:	e00a      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a416:	f7fb fcc1 	bl	8005d9c <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	f241 3288 	movw	r2, #5000	; 0x1388
 800a424:	4293      	cmp	r3, r2
 800a426:	d901      	bls.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e113      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a42c:	2302      	movs	r3, #2
 800a42e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	fa93 f3a3 	rbit	r3, r3
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
 800a438:	2302      	movs	r3, #2
 800a43a:	623b      	str	r3, [r7, #32]
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	fa93 f3a3 	rbit	r3, r3
 800a442:	61fb      	str	r3, [r7, #28]
  return result;
 800a444:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a446:	fab3 f383 	clz	r3, r3
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	095b      	lsrs	r3, r3, #5
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	f043 0302 	orr.w	r3, r3, #2
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b02      	cmp	r3, #2
 800a458:	d108      	bne.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a45a:	4b01      	ldr	r3, [pc, #4]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	e00d      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a460:	40021000 	.word	0x40021000
 800a464:	40007000 	.word	0x40007000
 800a468:	10908100 	.word	0x10908100
 800a46c:	2302      	movs	r3, #2
 800a46e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	fa93 f3a3 	rbit	r3, r3
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	4b78      	ldr	r3, [pc, #480]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	2202      	movs	r2, #2
 800a47e:	613a      	str	r2, [r7, #16]
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	fa92 f2a2 	rbit	r2, r2
 800a486:	60fa      	str	r2, [r7, #12]
  return result;
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	fab2 f282 	clz	r2, r2
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a494:	b2d2      	uxtb	r2, r2
 800a496:	f002 021f 	and.w	r2, r2, #31
 800a49a:	2101      	movs	r1, #1
 800a49c:	fa01 f202 	lsl.w	r2, r1, r2
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0b7      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x116>
>>>>>>> Stashed changes
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
<<<<<<< Updated upstream
 800a512:	4b6d      	ldr	r3, [pc, #436]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	496a      	ldr	r1, [pc, #424]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a520:	4313      	orrs	r3, r2
 800a522:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a524:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d105      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a52c:	4b66      	ldr	r3, [pc, #408]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	4a65      	ldr	r2, [pc, #404]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a536:	61d3      	str	r3, [r2, #28]
=======
 800a4a6:	4b6d      	ldr	r3, [pc, #436]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	496a      	ldr	r1, [pc, #424]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a4b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d105      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4c0:	4b66      	ldr	r3, [pc, #408]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	4a65      	ldr	r2, [pc, #404]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4ca:	61d3      	str	r3, [r2, #28]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d008      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
=======
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d008      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 800a544:	4b60      	ldr	r3, [pc, #384]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a548:	f023 0203 	bic.w	r2, r3, #3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	495d      	ldr	r1, [pc, #372]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a552:	4313      	orrs	r3, r2
 800a554:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a4d8:	4b60      	ldr	r3, [pc, #384]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4dc:	f023 0203 	bic.w	r2, r3, #3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	495d      	ldr	r1, [pc, #372]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0302 	and.w	r3, r3, #2
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d008      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x208>
=======
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d008      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x208>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 800a562:	4b59      	ldr	r3, [pc, #356]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	4956      	ldr	r1, [pc, #344]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a570:	4313      	orrs	r3, r2
 800a572:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a4f6:	4b59      	ldr	r3, [pc, #356]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	4956      	ldr	r1, [pc, #344]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a504:	4313      	orrs	r3, r2
 800a506:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x226>
=======
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d008      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x226>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 800a580:	4b51      	ldr	r3, [pc, #324]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	494e      	ldr	r1, [pc, #312]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a514:	4b51      	ldr	r3, [pc, #324]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	494e      	ldr	r1, [pc, #312]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a522:	4313      	orrs	r3, r2
 800a524:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d008      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
=======
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x244>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 800a59e:	4b4a      	ldr	r3, [pc, #296]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	f023 0210 	bic.w	r2, r3, #16
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	4947      	ldr	r1, [pc, #284]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a532:	4b4a      	ldr	r3, [pc, #296]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	f023 0210 	bic.w	r2, r3, #16
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	4947      	ldr	r1, [pc, #284]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a540:	4313      	orrs	r3, r2
 800a542:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< Updated upstream
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d008      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x262>
=======
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d008      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x262>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
<<<<<<< Updated upstream
 800a5bc:	4b42      	ldr	r3, [pc, #264]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	493f      	ldr	r1, [pc, #252]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	604b      	str	r3, [r1, #4]
=======
 800a550:	4b42      	ldr	r3, [pc, #264]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	493f      	ldr	r1, [pc, #252]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d008      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x280>
=======
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d008      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x280>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 800a5da:	4b3b      	ldr	r3, [pc, #236]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	f023 0220 	bic.w	r2, r3, #32
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	4938      	ldr	r1, [pc, #224]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a56e:	4b3b      	ldr	r3, [pc, #236]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a572:	f023 0220 	bic.w	r2, r3, #32
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	4938      	ldr	r1, [pc, #224]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0308 	and.w	r3, r3, #8
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d008      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x29e>
=======
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0308 	and.w	r3, r3, #8
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x29e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 800a5f8:	4b33      	ldr	r3, [pc, #204]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	4930      	ldr	r1, [pc, #192]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a606:	4313      	orrs	r3, r2
 800a608:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a58c:	4b33      	ldr	r3, [pc, #204]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	4930      	ldr	r1, [pc, #192]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0310 	and.w	r3, r3, #16
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
=======
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0310 	and.w	r3, r3, #16
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d008      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
 800a616:	4b2c      	ldr	r3, [pc, #176]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	4929      	ldr	r1, [pc, #164]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a624:	4313      	orrs	r3, r2
 800a626:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a5aa:	4b2c      	ldr	r3, [pc, #176]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	4929      	ldr	r1, [pc, #164]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< Updated upstream
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a630:	2b00      	cmp	r3, #0
 800a632:	d008      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x2da>
=======
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x2da>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
 800a634:	4b24      	ldr	r3, [pc, #144]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	4921      	ldr	r1, [pc, #132]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a642:	4313      	orrs	r3, r2
 800a644:	604b      	str	r3, [r1, #4]
=======
 800a5c8:	4b24      	ldr	r3, [pc, #144]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	4921      	ldr	r1, [pc, #132]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< Updated upstream
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
=======
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d008      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< Updated upstream
 800a652:	4b1d      	ldr	r3, [pc, #116]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	491a      	ldr	r1, [pc, #104]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a660:	4313      	orrs	r3, r2
 800a662:	62cb      	str	r3, [r1, #44]	; 0x2c
=======
 800a5e6:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	491a      	ldr	r1, [pc, #104]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	62cb      	str	r3, [r1, #44]	; 0x2c
>>>>>>> Stashed changes
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
<<<<<<< Updated upstream
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d008      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a600:	2b00      	cmp	r3, #0
 800a602:	d008      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
<<<<<<< Updated upstream
 800a670:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67c:	4912      	ldr	r1, [pc, #72]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	62cb      	str	r3, [r1, #44]	; 0x2c
=======
 800a604:	4b15      	ldr	r3, [pc, #84]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a608:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a610:	4912      	ldr	r1, [pc, #72]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a612:	4313      	orrs	r3, r2
 800a614:	62cb      	str	r3, [r1, #44]	; 0x2c
>>>>>>> Stashed changes
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
<<<<<<< Updated upstream
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d008      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
=======
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d008      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x334>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
<<<<<<< Updated upstream
 800a68e:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	490b      	ldr	r1, [pc, #44]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	490b      	ldr	r1, [pc, #44]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a630:	4313      	orrs	r3, r2
 800a632:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
<<<<<<< Updated upstream
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d008      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x352>
=======
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d008      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x352>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
<<<<<<< Updated upstream
 800a6ac:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b8:	4903      	ldr	r1, [pc, #12]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800a640:	4b06      	ldr	r3, [pc, #24]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a644:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64c:	4903      	ldr	r1, [pc, #12]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
<<<<<<< Updated upstream
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3748      	adds	r7, #72	; 0x48
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	40021000 	.word	0x40021000

0800a6cc <HAL_TIM_Base_Init>:
=======
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3748      	adds	r7, #72	; 0x48
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	40021000 	.word	0x40021000

0800a660 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e049      	b.n	800a772 <HAL_TIM_Base_Init+0xa6>
=======
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e049      	b.n	800a706 <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7fb f8a6 	bl	8005844 <HAL_TIM_Base_MspInit>
=======
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7fb f8a6 	bl	80057d8 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3304      	adds	r3, #4
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	f000 f9e8 	bl	800aae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <HAL_TIM_Base_Start_IT>:
=======
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2202      	movs	r2, #2
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3304      	adds	r3, #4
 800a69c:	4619      	mov	r1, r3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	f000 f9e8 	bl	800aa74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
=======
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d001      	beq.n	800a794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e04a      	b.n	800a82a <HAL_TIM_Base_Start_IT+0xae>
=======
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	d001      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e04a      	b.n	800a7be <HAL_TIM_Base_Start_IT+0xae>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68da      	ldr	r2, [r3, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f042 0201 	orr.w	r2, r2, #1
 800a7aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a21      	ldr	r2, [pc, #132]	; (800a838 <HAL_TIM_Base_Start_IT+0xbc>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d018      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7be:	d013      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a1d      	ldr	r2, [pc, #116]	; (800a83c <HAL_TIM_Base_Start_IT+0xc0>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00e      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a1c      	ldr	r2, [pc, #112]	; (800a840 <HAL_TIM_Base_Start_IT+0xc4>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d009      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a1a      	ldr	r2, [pc, #104]	; (800a844 <HAL_TIM_Base_Start_IT+0xc8>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d004      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a19      	ldr	r2, [pc, #100]	; (800a848 <HAL_TIM_Base_Start_IT+0xcc>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d115      	bne.n	800a814 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	4b17      	ldr	r3, [pc, #92]	; (800a84c <HAL_TIM_Base_Start_IT+0xd0>)
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b06      	cmp	r3, #6
 800a7f8:	d015      	beq.n	800a826 <HAL_TIM_Base_Start_IT+0xaa>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a800:	d011      	beq.n	800a826 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f042 0201 	orr.w	r2, r2, #1
 800a810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a812:	e008      	b.n	800a826 <HAL_TIM_Base_Start_IT+0xaa>
=======
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2202      	movs	r2, #2
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a21      	ldr	r2, [pc, #132]	; (800a7cc <HAL_TIM_Base_Start_IT+0xbc>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d018      	beq.n	800a77c <HAL_TIM_Base_Start_IT+0x6c>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a752:	d013      	beq.n	800a77c <HAL_TIM_Base_Start_IT+0x6c>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a1d      	ldr	r2, [pc, #116]	; (800a7d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00e      	beq.n	800a77c <HAL_TIM_Base_Start_IT+0x6c>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a1c      	ldr	r2, [pc, #112]	; (800a7d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d009      	beq.n	800a77c <HAL_TIM_Base_Start_IT+0x6c>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a1a      	ldr	r2, [pc, #104]	; (800a7d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d004      	beq.n	800a77c <HAL_TIM_Base_Start_IT+0x6c>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a19      	ldr	r2, [pc, #100]	; (800a7dc <HAL_TIM_Base_Start_IT+0xcc>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d115      	bne.n	800a7a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a784:	4013      	ands	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b06      	cmp	r3, #6
 800a78c:	d015      	beq.n	800a7ba <HAL_TIM_Base_Start_IT+0xaa>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a794:	d011      	beq.n	800a7ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f042 0201 	orr.w	r2, r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a6:	e008      	b.n	800a7ba <HAL_TIM_Base_Start_IT+0xaa>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0201 	orr.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e000      	b.n	800a828 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a826:	bf00      	nop
=======
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f042 0201 	orr.w	r2, r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	e000      	b.n	800a7bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ba:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	40012c00 	.word	0x40012c00
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800
 800a844:	40013400 	.word	0x40013400
 800a848:	40014000 	.word	0x40014000
 800a84c:	00010007 	.word	0x00010007

0800a850 <HAL_TIM_IRQHandler>:
=======
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	40012c00 	.word	0x40012c00
 800a7d0:	40000400 	.word	0x40000400
 800a7d4:	40000800 	.word	0x40000800
 800a7d8:	40013400 	.word	0x40013400
 800a7dc:	40014000 	.word	0x40014000
 800a7e0:	00010007 	.word	0x00010007

0800a7e4 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b02      	cmp	r3, #2
 800a864:	d122      	bne.n	800a8ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b02      	cmp	r3, #2
 800a872:	d11b      	bne.n	800a8ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f06f 0202 	mvn.w	r2, #2
 800a87c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d003      	beq.n	800a89a <HAL_TIM_IRQHandler+0x4a>
=======
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d122      	bne.n	800a840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b02      	cmp	r3, #2
 800a806:	d11b      	bne.n	800a840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0202 	mvn.w	r2, #2
 800a810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f905 	bl	800aaa2 <HAL_TIM_IC_CaptureCallback>
 800a898:	e005      	b.n	800a8a6 <HAL_TIM_IRQHandler+0x56>
=======
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f905 	bl	800aa36 <HAL_TIM_IC_CaptureCallback>
 800a82c:	e005      	b.n	800a83a <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f8f7 	bl	800aa8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f908 	bl	800aab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	771a      	strb	r2, [r3, #28]
=======
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f8f7 	bl	800aa22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f908 	bl	800aa4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d122      	bne.n	800a900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d11b      	bne.n	800a900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f06f 0204 	mvn.w	r2, #4
 800a8d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d003      	beq.n	800a8ee <HAL_TIM_IRQHandler+0x9e>
=======
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d122      	bne.n	800a894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f003 0304 	and.w	r3, r3, #4
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d11b      	bne.n	800a894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f06f 0204 	mvn.w	r2, #4
 800a864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2202      	movs	r2, #2
 800a86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f8db 	bl	800aaa2 <HAL_TIM_IC_CaptureCallback>
 800a8ec:	e005      	b.n	800a8fa <HAL_TIM_IRQHandler+0xaa>
=======
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f8db 	bl	800aa36 <HAL_TIM_IC_CaptureCallback>
 800a880:	e005      	b.n	800a88e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f8cd 	bl	800aa8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f8de 	bl	800aab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	771a      	strb	r2, [r3, #28]
=======
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f8cd 	bl	800aa22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f8de 	bl	800aa4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f003 0308 	and.w	r3, r3, #8
 800a90a:	2b08      	cmp	r3, #8
 800a90c:	d122      	bne.n	800a954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	f003 0308 	and.w	r3, r3, #8
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d11b      	bne.n	800a954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f06f 0208 	mvn.w	r2, #8
 800a924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2204      	movs	r2, #4
 800a92a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <HAL_TIM_IRQHandler+0xf2>
=======
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f003 0308 	and.w	r3, r3, #8
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	d122      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f003 0308 	and.w	r3, r3, #8
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	d11b      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f06f 0208 	mvn.w	r2, #8
 800a8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2204      	movs	r2, #4
 800a8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	f003 0303 	and.w	r3, r3, #3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f8b1 	bl	800aaa2 <HAL_TIM_IC_CaptureCallback>
 800a940:	e005      	b.n	800a94e <HAL_TIM_IRQHandler+0xfe>
=======
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f8b1 	bl	800aa36 <HAL_TIM_IC_CaptureCallback>
 800a8d4:	e005      	b.n	800a8e2 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f8a3 	bl	800aa8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f8b4 	bl	800aab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	771a      	strb	r2, [r3, #28]
=======
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f8a3 	bl	800aa22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f8b4 	bl	800aa4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d122      	bne.n	800a9a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d11b      	bne.n	800a9a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f06f 0210 	mvn.w	r2, #16
 800a978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2208      	movs	r2, #8
 800a97e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <HAL_TIM_IRQHandler+0x146>
=======
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b10      	cmp	r3, #16
 800a8f4:	d122      	bne.n	800a93c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b10      	cmp	r3, #16
 800a902:	d11b      	bne.n	800a93c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0210 	mvn.w	r2, #16
 800a90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2208      	movs	r2, #8
 800a912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f887 	bl	800aaa2 <HAL_TIM_IC_CaptureCallback>
 800a994:	e005      	b.n	800a9a2 <HAL_TIM_IRQHandler+0x152>
=======
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f887 	bl	800aa36 <HAL_TIM_IC_CaptureCallback>
 800a928:	e005      	b.n	800a936 <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f879 	bl	800aa8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f88a 	bl	800aab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	771a      	strb	r2, [r3, #28]
=======
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f879 	bl	800aa22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f88a 	bl	800aa4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d10e      	bne.n	800a9d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d107      	bne.n	800a9d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f06f 0201 	mvn.w	r2, #1
 800a9cc:	611a      	str	r2, [r3, #16]
=======
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b01      	cmp	r3, #1
 800a948:	d10e      	bne.n	800a968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b01      	cmp	r3, #1
 800a956:	d107      	bne.n	800a968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f06f 0201 	mvn.w	r2, #1
 800a960:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7f9 fce4 	bl	800439c <HAL_TIM_PeriodElapsedCallback>
=======
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7f9 fc98 	bl	8004298 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9de:	2b80      	cmp	r3, #128	; 0x80
 800a9e0:	d10e      	bne.n	800aa00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ec:	2b80      	cmp	r3, #128	; 0x80
 800a9ee:	d107      	bne.n	800aa00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9f8:	611a      	str	r2, [r3, #16]
=======
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d10e      	bne.n	800a994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a980:	2b80      	cmp	r3, #128	; 0x80
 800a982:	d107      	bne.n	800a994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a98c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f98a 	bl	800ad14 <HAL_TIMEx_BreakCallback>
=======
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f98a 	bl	800aca8 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< Updated upstream
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa0e:	d10e      	bne.n	800aa2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1a:	2b80      	cmp	r3, #128	; 0x80
 800aa1c:	d107      	bne.n	800aa2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa26:	611a      	str	r2, [r3, #16]
=======
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9a2:	d10e      	bne.n	800a9c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ae:	2b80      	cmp	r3, #128	; 0x80
 800a9b0:	d107      	bne.n	800a9c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9ba:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f97d 	bl	800ad28 <HAL_TIMEx_Break2Callback>
=======
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f97d 	bl	800acbc <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d10e      	bne.n	800aa5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa46:	2b40      	cmp	r3, #64	; 0x40
 800aa48:	d107      	bne.n	800aa5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa52:	611a      	str	r2, [r3, #16]
=======
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9cc:	2b40      	cmp	r3, #64	; 0x40
 800a9ce:	d10e      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9da:	2b40      	cmp	r3, #64	; 0x40
 800a9dc:	d107      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9e6:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f838 	bl	800aaca <HAL_TIM_TriggerCallback>
=======
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f838 	bl	800aa5e <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	f003 0320 	and.w	r3, r3, #32
 800aa64:	2b20      	cmp	r3, #32
 800aa66:	d10e      	bne.n	800aa86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f003 0320 	and.w	r3, r3, #32
 800aa72:	2b20      	cmp	r3, #32
 800aa74:	d107      	bne.n	800aa86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f06f 0220 	mvn.w	r2, #32
 800aa7e:	611a      	str	r2, [r3, #16]
=======
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	f003 0320 	and.w	r3, r3, #32
 800a9f8:	2b20      	cmp	r3, #32
 800a9fa:	d10e      	bne.n	800aa1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d107      	bne.n	800aa1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f06f 0220 	mvn.w	r2, #32
 800aa12:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f93d 	bl	800ad00 <HAL_TIMEx_CommutCallback>
=======
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f93d 	bl	800ac94 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_TIM_OC_DelayElapsedCallback>:
=======
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
=======
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <HAL_TIM_IC_CaptureCallback>:
=======
 800aa2a:	bf00      	nop
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
=======
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800aa3e:	bf00      	nop
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
=======
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800aabe:	bf00      	nop
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <HAL_TIM_TriggerCallback>:
=======
 800aa52:	bf00      	nop
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800aaca:	b480      	push	{r7}
 800aacc:	b083      	sub	sp, #12
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
=======
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
	...

0800aae0 <TIM_Base_SetConfig>:
=======
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
	...

0800aa74 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a3c      	ldr	r2, [pc, #240]	; (800abe4 <TIM_Base_SetConfig+0x104>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00f      	beq.n	800ab18 <TIM_Base_SetConfig+0x38>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aafe:	d00b      	beq.n	800ab18 <TIM_Base_SetConfig+0x38>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a39      	ldr	r2, [pc, #228]	; (800abe8 <TIM_Base_SetConfig+0x108>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d007      	beq.n	800ab18 <TIM_Base_SetConfig+0x38>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a38      	ldr	r2, [pc, #224]	; (800abec <TIM_Base_SetConfig+0x10c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d003      	beq.n	800ab18 <TIM_Base_SetConfig+0x38>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a37      	ldr	r2, [pc, #220]	; (800abf0 <TIM_Base_SetConfig+0x110>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d108      	bne.n	800ab2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a2d      	ldr	r2, [pc, #180]	; (800abe4 <TIM_Base_SetConfig+0x104>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d01b      	beq.n	800ab6a <TIM_Base_SetConfig+0x8a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab38:	d017      	beq.n	800ab6a <TIM_Base_SetConfig+0x8a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a2a      	ldr	r2, [pc, #168]	; (800abe8 <TIM_Base_SetConfig+0x108>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d013      	beq.n	800ab6a <TIM_Base_SetConfig+0x8a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a29      	ldr	r2, [pc, #164]	; (800abec <TIM_Base_SetConfig+0x10c>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00f      	beq.n	800ab6a <TIM_Base_SetConfig+0x8a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a28      	ldr	r2, [pc, #160]	; (800abf0 <TIM_Base_SetConfig+0x110>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00b      	beq.n	800ab6a <TIM_Base_SetConfig+0x8a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a27      	ldr	r2, [pc, #156]	; (800abf4 <TIM_Base_SetConfig+0x114>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d007      	beq.n	800ab6a <TIM_Base_SetConfig+0x8a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <TIM_Base_SetConfig+0x118>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_Base_SetConfig+0x8a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a25      	ldr	r2, [pc, #148]	; (800abfc <TIM_Base_SetConfig+0x11c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d108      	bne.n	800ab7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
=======
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a3c      	ldr	r2, [pc, #240]	; (800ab78 <TIM_Base_SetConfig+0x104>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d00f      	beq.n	800aaac <TIM_Base_SetConfig+0x38>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa92:	d00b      	beq.n	800aaac <TIM_Base_SetConfig+0x38>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a39      	ldr	r2, [pc, #228]	; (800ab7c <TIM_Base_SetConfig+0x108>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d007      	beq.n	800aaac <TIM_Base_SetConfig+0x38>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a38      	ldr	r2, [pc, #224]	; (800ab80 <TIM_Base_SetConfig+0x10c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d003      	beq.n	800aaac <TIM_Base_SetConfig+0x38>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a37      	ldr	r2, [pc, #220]	; (800ab84 <TIM_Base_SetConfig+0x110>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d108      	bne.n	800aabe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a2d      	ldr	r2, [pc, #180]	; (800ab78 <TIM_Base_SetConfig+0x104>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d01b      	beq.n	800aafe <TIM_Base_SetConfig+0x8a>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aacc:	d017      	beq.n	800aafe <TIM_Base_SetConfig+0x8a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a2a      	ldr	r2, [pc, #168]	; (800ab7c <TIM_Base_SetConfig+0x108>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d013      	beq.n	800aafe <TIM_Base_SetConfig+0x8a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a29      	ldr	r2, [pc, #164]	; (800ab80 <TIM_Base_SetConfig+0x10c>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d00f      	beq.n	800aafe <TIM_Base_SetConfig+0x8a>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a28      	ldr	r2, [pc, #160]	; (800ab84 <TIM_Base_SetConfig+0x110>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00b      	beq.n	800aafe <TIM_Base_SetConfig+0x8a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a27      	ldr	r2, [pc, #156]	; (800ab88 <TIM_Base_SetConfig+0x114>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d007      	beq.n	800aafe <TIM_Base_SetConfig+0x8a>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a26      	ldr	r2, [pc, #152]	; (800ab8c <TIM_Base_SetConfig+0x118>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d003      	beq.n	800aafe <TIM_Base_SetConfig+0x8a>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a25      	ldr	r2, [pc, #148]	; (800ab90 <TIM_Base_SetConfig+0x11c>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d108      	bne.n	800ab10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a10      	ldr	r2, [pc, #64]	; (800abe4 <TIM_Base_SetConfig+0x104>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00f      	beq.n	800abc8 <TIM_Base_SetConfig+0xe8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a11      	ldr	r2, [pc, #68]	; (800abf0 <TIM_Base_SetConfig+0x110>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00b      	beq.n	800abc8 <TIM_Base_SetConfig+0xe8>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a10      	ldr	r2, [pc, #64]	; (800abf4 <TIM_Base_SetConfig+0x114>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d007      	beq.n	800abc8 <TIM_Base_SetConfig+0xe8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a0f      	ldr	r2, [pc, #60]	; (800abf8 <TIM_Base_SetConfig+0x118>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d003      	beq.n	800abc8 <TIM_Base_SetConfig+0xe8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a0e      	ldr	r2, [pc, #56]	; (800abfc <TIM_Base_SetConfig+0x11c>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d103      	bne.n	800abd0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	691a      	ldr	r2, [r3, #16]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a10      	ldr	r2, [pc, #64]	; (800ab78 <TIM_Base_SetConfig+0x104>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d00f      	beq.n	800ab5c <TIM_Base_SetConfig+0xe8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a11      	ldr	r2, [pc, #68]	; (800ab84 <TIM_Base_SetConfig+0x110>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d00b      	beq.n	800ab5c <TIM_Base_SetConfig+0xe8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a10      	ldr	r2, [pc, #64]	; (800ab88 <TIM_Base_SetConfig+0x114>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d007      	beq.n	800ab5c <TIM_Base_SetConfig+0xe8>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a0f      	ldr	r2, [pc, #60]	; (800ab8c <TIM_Base_SetConfig+0x118>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d003      	beq.n	800ab5c <TIM_Base_SetConfig+0xe8>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a0e      	ldr	r2, [pc, #56]	; (800ab90 <TIM_Base_SetConfig+0x11c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d103      	bne.n	800ab64 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	691a      	ldr	r2, [r3, #16]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	615a      	str	r2, [r3, #20]
}
 800abd6:	bf00      	nop
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40012c00 	.word	0x40012c00
 800abe8:	40000400 	.word	0x40000400
 800abec:	40000800 	.word	0x40000800
 800abf0:	40013400 	.word	0x40013400
 800abf4:	40014000 	.word	0x40014000
 800abf8:	40014400 	.word	0x40014400
 800abfc:	40014800 	.word	0x40014800

0800ac00 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	615a      	str	r2, [r3, #20]
}
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	40012c00 	.word	0x40012c00
 800ab7c:	40000400 	.word	0x40000400
 800ab80:	40000800 	.word	0x40000800
 800ab84:	40013400 	.word	0x40013400
 800ab88:	40014000 	.word	0x40014000
 800ab8c:	40014400 	.word	0x40014400
 800ab90:	40014800 	.word	0x40014800

0800ab94 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
=======
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d101      	bne.n	800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac14:	2302      	movs	r3, #2
 800ac16:	e063      	b.n	800ace0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	60bb      	str	r3, [r7, #8]
=======
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d101      	bne.n	800abac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e063      	b.n	800ac74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
<<<<<<< Updated upstream
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a2b      	ldr	r2, [pc, #172]	; (800acec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d004      	beq.n	800ac4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a2a      	ldr	r2, [pc, #168]	; (800acf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d108      	bne.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a2b      	ldr	r2, [pc, #172]	; (800ac80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d004      	beq.n	800abe0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a2a      	ldr	r2, [pc, #168]	; (800ac84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d108      	bne.n	800abf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
=======
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800abe6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a1b      	ldr	r2, [pc, #108]	; (800acec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d018      	beq.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac8a:	d013      	beq.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a18      	ldr	r2, [pc, #96]	; (800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d00e      	beq.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a17      	ldr	r2, [pc, #92]	; (800acf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d009      	beq.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a12      	ldr	r2, [pc, #72]	; (800acf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d004      	beq.n	800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a13      	ldr	r2, [pc, #76]	; (800acfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d10c      	bne.n	800acce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	609a      	str	r2, [r3, #8]
=======
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1b      	ldr	r2, [pc, #108]	; (800ac80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d018      	beq.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac1e:	d013      	beq.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a18      	ldr	r2, [pc, #96]	; (800ac88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d00e      	beq.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a17      	ldr	r2, [pc, #92]	; (800ac8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d009      	beq.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a12      	ldr	r2, [pc, #72]	; (800ac84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d004      	beq.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a13      	ldr	r2, [pc, #76]	; (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d10c      	bne.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	40012c00 	.word	0x40012c00
 800acf0:	40013400 	.word	0x40013400
 800acf4:	40000400 	.word	0x40000400
 800acf8:	40000800 	.word	0x40000800
 800acfc:	40014000 	.word	0x40014000

0800ad00 <HAL_TIMEx_CommutCallback>:
=======
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	40012c00 	.word	0x40012c00
 800ac84:	40013400 	.word	0x40013400
 800ac88:	40000400 	.word	0x40000400
 800ac8c:	40000800 	.word	0x40000800
 800ac90:	40014000 	.word	0x40014000

0800ac94 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
=======
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_TIMEx_BreakCallback>:
=======
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
=======
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIMEx_Break2Callback>:
=======
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
=======
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_UART_Init>:
=======
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e040      	b.n	800add0 <HAL_UART_Init+0x94>
=======
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e040      	b.n	800ad64 <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
=======
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7fa fe54 	bl	8005a0c <HAL_UART_MspInit>
=======
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7fa fe54 	bl	80059a0 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2224      	movs	r2, #36	; 0x24
 800ad68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0201 	bic.w	r2, r2, #1
 800ad78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fdf2 	bl	800b964 <UART_SetConfig>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d101      	bne.n	800ad8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e022      	b.n	800add0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 ffba 	bl	800bd0c <UART_AdvFeatureConfig>
=======
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2224      	movs	r2, #36	; 0x24
 800acfc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 0201 	bic.w	r2, r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fdf2 	bl	800b8f8 <UART_SetConfig>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d101      	bne.n	800ad1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e022      	b.n	800ad64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 ffba 	bl	800bca0 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	685a      	ldr	r2, [r3, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ada6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f042 0201 	orr.w	r2, r2, #1
 800adc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 f841 	bl	800be50 <UART_CheckIdleState>
 800adce:	4603      	mov	r3, r0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_UART_Transmit_IT>:
=======
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f042 0201 	orr.w	r2, r2, #1
 800ad5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f001 f841 	bl	800bde4 <UART_CheckIdleState>
 800ad62:	4603      	mov	r3, r0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HAL_UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800add8:	b480      	push	{r7}
 800adda:	b08b      	sub	sp, #44	; 0x2c
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	4613      	mov	r3, r2
 800ade4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adea:	2b20      	cmp	r3, #32
 800adec:	d147      	bne.n	800ae7e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <HAL_UART_Transmit_IT+0x22>
 800adf4:	88fb      	ldrh	r3, [r7, #6]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e040      	b.n	800ae80 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	88fa      	ldrh	r2, [r7, #6]
 800ae08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	88fa      	ldrh	r2, [r7, #6]
 800ae10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2221      	movs	r2, #33	; 0x21
 800ae26:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae30:	d107      	bne.n	800ae42 <HAL_UART_Transmit_IT+0x6a>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d103      	bne.n	800ae42 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	4a13      	ldr	r2, [pc, #76]	; (800ae8c <HAL_UART_Transmit_IT+0xb4>)
 800ae3e:	66da      	str	r2, [r3, #108]	; 0x6c
 800ae40:	e002      	b.n	800ae48 <HAL_UART_Transmit_IT+0x70>
=======
 800ad6c:	b480      	push	{r7}
 800ad6e:	b08b      	sub	sp, #44	; 0x2c
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	4613      	mov	r3, r2
 800ad78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad7e:	2b20      	cmp	r3, #32
 800ad80:	d147      	bne.n	800ae12 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <HAL_UART_Transmit_IT+0x22>
 800ad88:	88fb      	ldrh	r3, [r7, #6]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e040      	b.n	800ae14 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	88fa      	ldrh	r2, [r7, #6]
 800ad9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	88fa      	ldrh	r2, [r7, #6]
 800ada4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2221      	movs	r2, #33	; 0x21
 800adba:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adc4:	d107      	bne.n	800add6 <HAL_UART_Transmit_IT+0x6a>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4a13      	ldr	r2, [pc, #76]	; (800ae20 <HAL_UART_Transmit_IT+0xb4>)
 800add2:	66da      	str	r2, [r3, #108]	; 0x6c
 800add4:	e002      	b.n	800addc <HAL_UART_Transmit_IT+0x70>
>>>>>>> Stashed changes
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
<<<<<<< Updated upstream
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	4a12      	ldr	r2, [pc, #72]	; (800ae90 <HAL_UART_Transmit_IT+0xb8>)
 800ae46:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4a12      	ldr	r2, [pc, #72]	; (800ae24 <HAL_UART_Transmit_IT+0xb8>)
 800adda:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
<<<<<<< Updated upstream
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	617b      	str	r3, [r7, #20]
=======
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	e853 3f00 	ldrex	r3, [r3]
 800ae54:	613b      	str	r3, [r7, #16]
   return(result);
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	623b      	str	r3, [r7, #32]
 800ae68:	61fa      	str	r2, [r7, #28]
=======
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	e853 3f00 	ldrex	r3, [r3]
 800ade8:	613b      	str	r3, [r7, #16]
   return(result);
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	627b      	str	r3, [r7, #36]	; 0x24
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	623b      	str	r3, [r7, #32]
 800adfc:	61fa      	str	r2, [r7, #28]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 800ae6a:	69f9      	ldr	r1, [r7, #28]
 800ae6c:	6a3a      	ldr	r2, [r7, #32]
 800ae6e:	e841 2300 	strex	r3, r2, [r1]
 800ae72:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1e6      	bne.n	800ae48 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e000      	b.n	800ae80 <HAL_UART_Transmit_IT+0xa8>
=======
 800adfe:	69f9      	ldr	r1, [r7, #28]
 800ae00:	6a3a      	ldr	r2, [r7, #32]
 800ae02:	e841 2300 	strex	r3, r2, [r1]
 800ae06:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1e6      	bne.n	800addc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e000      	b.n	800ae14 <HAL_UART_Transmit_IT+0xa8>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800ae7e:	2302      	movs	r3, #2
  }
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	372c      	adds	r7, #44	; 0x2c
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	0800c817 	.word	0x0800c817
 800ae90:	0800c75f 	.word	0x0800c75f

0800ae94 <HAL_UART_Receive_IT>:
=======
 800ae12:	2302      	movs	r3, #2
  }
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	372c      	adds	r7, #44	; 0x2c
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	0800c7ab 	.word	0x0800c7ab
 800ae24:	0800c6f3 	.word	0x0800c6f3

0800ae28 <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08a      	sub	sp, #40	; 0x28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aea8:	2b20      	cmp	r3, #32
 800aeaa:	d132      	bne.n	800af12 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <HAL_UART_Receive_IT+0x24>
 800aeb2:	88fb      	ldrh	r3, [r7, #6]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e02b      	b.n	800af14 <HAL_UART_Receive_IT+0x80>
=======
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	; 0x28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	d132      	bne.n	800aea6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <HAL_UART_Receive_IT+0x24>
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e02b      	b.n	800aea8 <HAL_UART_Receive_IT+0x80>
>>>>>>> Stashed changes
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< Updated upstream
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d018      	beq.n	800af02 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	e853 3f00 	ldrex	r3, [r3]
 800aedc:	613b      	str	r3, [r7, #16]
   return(result);
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	623b      	str	r3, [r7, #32]
 800aef0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef2:	69f9      	ldr	r1, [r7, #28]
 800aef4:	6a3a      	ldr	r2, [r7, #32]
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	61bb      	str	r3, [r7, #24]
   return(result);
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e6      	bne.n	800aed0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af02:	88fb      	ldrh	r3, [r7, #6]
 800af04:	461a      	mov	r2, r3
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f001 f8b1 	bl	800c070 <UART_Start_Receive_IT>
 800af0e:	4603      	mov	r3, r0
 800af10:	e000      	b.n	800af14 <HAL_UART_Receive_IT+0x80>
=======
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d018      	beq.n	800ae96 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	e853 3f00 	ldrex	r3, [r3]
 800ae70:	613b      	str	r3, [r7, #16]
   return(result);
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae78:	627b      	str	r3, [r7, #36]	; 0x24
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	623b      	str	r3, [r7, #32]
 800ae84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae86:	69f9      	ldr	r1, [r7, #28]
 800ae88:	6a3a      	ldr	r2, [r7, #32]
 800ae8a:	e841 2300 	strex	r3, r2, [r1]
 800ae8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1e6      	bne.n	800ae64 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae96:	88fb      	ldrh	r3, [r7, #6]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f001 f8b1 	bl	800c004 <UART_Start_Receive_IT>
 800aea2:	4603      	mov	r3, r0
 800aea4:	e000      	b.n	800aea8 <HAL_UART_Receive_IT+0x80>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800af12:	2302      	movs	r3, #2
  }
}
 800af14:	4618      	mov	r0, r3
 800af16:	3728      	adds	r7, #40	; 0x28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <HAL_UART_Transmit_DMA>:
=======
 800aea6:	2302      	movs	r3, #2
  }
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3728      	adds	r7, #40	; 0x28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <HAL_UART_Transmit_DMA>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08a      	sub	sp, #40	; 0x28
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	4613      	mov	r3, r2
 800af28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af2e:	2b20      	cmp	r3, #32
 800af30:	d165      	bne.n	800affe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <HAL_UART_Transmit_DMA+0x22>
 800af38:	88fb      	ldrh	r3, [r7, #6]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e05e      	b.n	800b000 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	88fa      	ldrh	r2, [r7, #6]
 800af4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	88fa      	ldrh	r2, [r7, #6]
 800af54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2221      	movs	r2, #33	; 0x21
 800af64:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d027      	beq.n	800afbe <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af72:	4a25      	ldr	r2, [pc, #148]	; (800b008 <HAL_UART_Transmit_DMA+0xec>)
 800af74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7a:	4a24      	ldr	r2, [pc, #144]	; (800b00c <HAL_UART_Transmit_DMA+0xf0>)
 800af7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af82:	4a23      	ldr	r2, [pc, #140]	; (800b010 <HAL_UART_Transmit_DMA+0xf4>)
 800af84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	2200      	movs	r2, #0
 800af8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af96:	4619      	mov	r1, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3328      	adds	r3, #40	; 0x28
 800af9e:	461a      	mov	r2, r3
 800afa0:	88fb      	ldrh	r3, [r7, #6]
 800afa2:	f7fb f88a 	bl	80060ba <HAL_DMA_Start_IT>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d008      	beq.n	800afbe <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2210      	movs	r2, #16
 800afb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2220      	movs	r2, #32
 800afb8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e020      	b.n	800b000 <HAL_UART_Transmit_DMA+0xe4>
=======
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08a      	sub	sp, #40	; 0x28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	4613      	mov	r3, r2
 800aebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aec2:	2b20      	cmp	r3, #32
 800aec4:	d165      	bne.n	800af92 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <HAL_UART_Transmit_DMA+0x22>
 800aecc:	88fb      	ldrh	r3, [r7, #6]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e05e      	b.n	800af94 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	88fa      	ldrh	r2, [r7, #6]
 800aee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	88fa      	ldrh	r2, [r7, #6]
 800aee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2221      	movs	r2, #33	; 0x21
 800aef8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d027      	beq.n	800af52 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af06:	4a25      	ldr	r2, [pc, #148]	; (800af9c <HAL_UART_Transmit_DMA+0xec>)
 800af08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0e:	4a24      	ldr	r2, [pc, #144]	; (800afa0 <HAL_UART_Transmit_DMA+0xf0>)
 800af10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af16:	4a23      	ldr	r2, [pc, #140]	; (800afa4 <HAL_UART_Transmit_DMA+0xf4>)
 800af18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1e:	2200      	movs	r2, #0
 800af20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af2a:	4619      	mov	r1, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3328      	adds	r3, #40	; 0x28
 800af32:	461a      	mov	r2, r3
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	f7fb f88a 	bl	800604e <HAL_DMA_Start_IT>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d008      	beq.n	800af52 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2210      	movs	r2, #16
 800af44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2220      	movs	r2, #32
 800af4c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e020      	b.n	800af94 <HAL_UART_Transmit_DMA+0xe4>
>>>>>>> Stashed changes
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
<<<<<<< Updated upstream
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2240      	movs	r2, #64	; 0x40
 800afc4:	621a      	str	r2, [r3, #32]
=======
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2240      	movs	r2, #64	; 0x40
 800af58:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< Updated upstream
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3308      	adds	r3, #8
 800afcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	e853 3f00 	ldrex	r3, [r3]
 800afd4:	613b      	str	r3, [r7, #16]
   return(result);
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afdc:	627b      	str	r3, [r7, #36]	; 0x24
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe6:	623a      	str	r2, [r7, #32]
 800afe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	69f9      	ldr	r1, [r7, #28]
 800afec:	6a3a      	ldr	r2, [r7, #32]
 800afee:	e841 2300 	strex	r3, r2, [r1]
 800aff2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1e5      	bne.n	800afc6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	e000      	b.n	800b000 <HAL_UART_Transmit_DMA+0xe4>
=======
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3308      	adds	r3, #8
 800af60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	613b      	str	r3, [r7, #16]
   return(result);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af7a:	623a      	str	r2, [r7, #32]
 800af7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	69f9      	ldr	r1, [r7, #28]
 800af80:	6a3a      	ldr	r2, [r7, #32]
 800af82:	e841 2300 	strex	r3, r2, [r1]
 800af86:	61bb      	str	r3, [r7, #24]
   return(result);
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1e5      	bne.n	800af5a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	e000      	b.n	800af94 <HAL_UART_Transmit_DMA+0xe4>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800affe:	2302      	movs	r3, #2
  }
}
 800b000:	4618      	mov	r0, r3
 800b002:	3728      	adds	r7, #40	; 0x28
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	0800c42d 	.word	0x0800c42d
 800b00c:	0800c4c1 	.word	0x0800c4c1
 800b010:	0800c641 	.word	0x0800c641

0800b014 <HAL_UART_Receive_DMA>:
=======
 800af92:	2302      	movs	r3, #2
  }
}
 800af94:	4618      	mov	r0, r3
 800af96:	3728      	adds	r7, #40	; 0x28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	0800c3c1 	.word	0x0800c3c1
 800afa0:	0800c455 	.word	0x0800c455
 800afa4:	0800c5d5 	.word	0x0800c5d5

0800afa8 <HAL_UART_Receive_DMA>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800b014:	b580      	push	{r7, lr}
 800b016:	b08a      	sub	sp, #40	; 0x28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	4613      	mov	r3, r2
 800b020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b028:	2b20      	cmp	r3, #32
 800b02a:	d132      	bne.n	800b092 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <HAL_UART_Receive_DMA+0x24>
 800b032:	88fb      	ldrh	r3, [r7, #6]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e02b      	b.n	800b094 <HAL_UART_Receive_DMA+0x80>
=======
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08a      	sub	sp, #40	; 0x28
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	4613      	mov	r3, r2
 800afb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afbc:	2b20      	cmp	r3, #32
 800afbe:	d132      	bne.n	800b026 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <HAL_UART_Receive_DMA+0x24>
 800afc6:	88fb      	ldrh	r3, [r7, #6]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e02b      	b.n	800b028 <HAL_UART_Receive_DMA+0x80>
>>>>>>> Stashed changes
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< Updated upstream
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d018      	beq.n	800b082 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	e853 3f00 	ldrex	r3, [r3]
 800b05c:	613b      	str	r3, [r7, #16]
   return(result);
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b064:	627b      	str	r3, [r7, #36]	; 0x24
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	623b      	str	r3, [r7, #32]
 800b070:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b072:	69f9      	ldr	r1, [r7, #28]
 800b074:	6a3a      	ldr	r2, [r7, #32]
 800b076:	e841 2300 	strex	r3, r2, [r1]
 800b07a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1e6      	bne.n	800b050 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b082:	88fb      	ldrh	r3, [r7, #6]
 800b084:	461a      	mov	r2, r3
 800b086:	68b9      	ldr	r1, [r7, #8]
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f001 f8a5 	bl	800c1d8 <UART_Start_Receive_DMA>
 800b08e:	4603      	mov	r3, r0
 800b090:	e000      	b.n	800b094 <HAL_UART_Receive_DMA+0x80>
=======
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d018      	beq.n	800b016 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	e853 3f00 	ldrex	r3, [r3]
 800aff0:	613b      	str	r3, [r7, #16]
   return(result);
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	623b      	str	r3, [r7, #32]
 800b004:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b006:	69f9      	ldr	r1, [r7, #28]
 800b008:	6a3a      	ldr	r2, [r7, #32]
 800b00a:	e841 2300 	strex	r3, r2, [r1]
 800b00e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1e6      	bne.n	800afe4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	461a      	mov	r2, r3
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f001 f8a5 	bl	800c16c <UART_Start_Receive_DMA>
 800b022:	4603      	mov	r3, r0
 800b024:	e000      	b.n	800b028 <HAL_UART_Receive_DMA+0x80>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800b092:	2302      	movs	r3, #2
  }
}
 800b094:	4618      	mov	r0, r3
 800b096:	3728      	adds	r7, #40	; 0x28
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <HAL_UART_AbortTransmit_IT>:
=======
 800b026:	2302      	movs	r3, #2
  }
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3728      	adds	r7, #40	; 0x28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_UART_AbortTransmit_IT>:
>>>>>>> Stashed changes
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08e      	sub	sp, #56	; 0x38
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ca:	e841 2300 	strex	r3, r2, [r1]
 800b0ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1e6      	bne.n	800b0a4 <HAL_UART_AbortTransmit_IT+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0e0:	2b80      	cmp	r3, #128	; 0x80
 800b0e2:	d13f      	bne.n	800b164 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0fa:	633b      	str	r3, [r7, #48]	; 0x30
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3308      	adds	r3, #8
 800b102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b104:	61ba      	str	r2, [r7, #24]
 800b106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	6979      	ldr	r1, [r7, #20]
 800b10a:	69ba      	ldr	r2, [r7, #24]
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	613b      	str	r3, [r7, #16]
   return(result);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e5      	bne.n	800b0e4 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d013      	beq.n	800b148 <HAL_UART_AbortTransmit_IT+0xac>
=======
 800b030:	b580      	push	{r7, lr}
 800b032:	b08e      	sub	sp, #56	; 0x38
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	e853 3f00 	ldrex	r3, [r3]
 800b044:	61fb      	str	r3, [r7, #28]
   return(result);
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	461a      	mov	r2, r3
 800b054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b056:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b058:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b05e:	e841 2300 	strex	r3, r2, [r1]
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e6      	bne.n	800b038 <HAL_UART_AbortTransmit_IT+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b074:	2b80      	cmp	r3, #128	; 0x80
 800b076:	d13f      	bne.n	800b0f8 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3308      	adds	r3, #8
 800b07e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	e853 3f00 	ldrex	r3, [r3]
 800b086:	60bb      	str	r3, [r7, #8]
   return(result);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b08e:	633b      	str	r3, [r7, #48]	; 0x30
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b098:	61ba      	str	r2, [r7, #24]
 800b09a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09c:	6979      	ldr	r1, [r7, #20]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	e841 2300 	strex	r3, r2, [r1]
 800b0a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1e5      	bne.n	800b078 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d013      	beq.n	800b0dc <HAL_UART_AbortTransmit_IT+0xac>
>>>>>>> Stashed changes
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
<<<<<<< Updated upstream
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b124:	4a18      	ldr	r2, [pc, #96]	; (800b188 <HAL_UART_AbortTransmit_IT+0xec>)
 800b126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fb f85c 	bl	80061ea <HAL_DMA_Abort_IT>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d022      	beq.n	800b17e <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b142:	4610      	mov	r0, r2
 800b144:	4798      	blx	r3
 800b146:	e01a      	b.n	800b17e <HAL_UART_AbortTransmit_IT+0xe2>
=======
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b8:	4a18      	ldr	r2, [pc, #96]	; (800b11c <HAL_UART_AbortTransmit_IT+0xec>)
 800b0ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fb f85c 	bl	800617e <HAL_DMA_Abort_IT>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d022      	beq.n	800b112 <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	4798      	blx	r3
 800b0da:	e01a      	b.n	800b112 <HAL_UART_AbortTransmit_IT+0xe2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
<<<<<<< Updated upstream
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2220      	movs	r2, #32
 800b15a:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
<<<<<<< Updated upstream
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fbe1 	bl	800b924 <HAL_UART_AbortTransmitCpltCallback>
 800b162:	e00c      	b.n	800b17e <HAL_UART_AbortTransmit_IT+0xe2>
=======
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fbe1 	bl	800b8b8 <HAL_UART_AbortTransmitCpltCallback>
 800b0f6:	e00c      	b.n	800b112 <HAL_UART_AbortTransmit_IT+0xe2>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
<<<<<<< Updated upstream
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes


    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2220      	movs	r2, #32
 800b176:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
<<<<<<< Updated upstream
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fbd3 	bl	800b924 <HAL_UART_AbortTransmitCpltCallback>
=======
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fbd3 	bl	800b8b8 <HAL_UART_AbortTransmitCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
<<<<<<< Updated upstream
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3738      	adds	r7, #56	; 0x38
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	0800c6eb 	.word	0x0800c6eb

0800b18c <HAL_UART_AbortReceive_IT>:
=======
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3738      	adds	r7, #56	; 0x38
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	0800c67f 	.word	0x0800c67f

0800b120 <HAL_UART_AbortReceive_IT>:
>>>>>>> Stashed changes
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b09a      	sub	sp, #104	; 0x68
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1a8:	667b      	str	r3, [r7, #100]	; 0x64
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1b2:	657b      	str	r3, [r7, #84]	; 0x54
 800b1b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ba:	e841 2300 	strex	r3, r2, [r1]
 800b1be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e6      	bne.n	800b194 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	f023 0301 	bic.w	r3, r3, #1
 800b1dc:	663b      	str	r3, [r7, #96]	; 0x60
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1e6:	643a      	str	r2, [r7, #64]	; 0x40
 800b1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e5      	bne.n	800b1c6 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d118      	bne.n	800b234 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	e853 3f00 	ldrex	r3, [r3]
 800b20e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	f023 0310 	bic.w	r3, r3, #16
 800b216:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	461a      	mov	r2, r3
 800b21e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b220:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b222:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b228:	e841 2300 	strex	r3, r2, [r1]
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e6      	bne.n	800b202 <HAL_UART_AbortReceive_IT+0x76>
=======
 800b120:	b580      	push	{r7, lr}
 800b122:	b09a      	sub	sp, #104	; 0x68
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b13c:	667b      	str	r3, [r7, #100]	; 0x64
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b146:	657b      	str	r3, [r7, #84]	; 0x54
 800b148:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b14c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e6      	bne.n	800b128 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3308      	adds	r3, #8
 800b160:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	f023 0301 	bic.w	r3, r3, #1
 800b170:	663b      	str	r3, [r7, #96]	; 0x60
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3308      	adds	r3, #8
 800b178:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b17a:	643a      	str	r2, [r7, #64]	; 0x40
 800b17c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b182:	e841 2300 	strex	r3, r2, [r1]
 800b186:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1e5      	bne.n	800b15a <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b192:	2b01      	cmp	r3, #1
 800b194:	d118      	bne.n	800b1c8 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	f023 0310 	bic.w	r3, r3, #16
 800b1aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1bc:	e841 2300 	strex	r3, r2, [r1]
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1e6      	bne.n	800b196 <HAL_UART_AbortReceive_IT+0x76>
>>>>>>> Stashed changes
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< Updated upstream
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23e:	2b40      	cmp	r3, #64	; 0x40
 800b240:	d14f      	bne.n	800b2e2 <HAL_UART_AbortReceive_IT+0x156>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	60bb      	str	r3, [r7, #8]
   return(result);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b258:	65bb      	str	r3, [r7, #88]	; 0x58
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b262:	61ba      	str	r2, [r7, #24]
 800b264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6979      	ldr	r1, [r7, #20]
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	613b      	str	r3, [r7, #16]
   return(result);
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e5      	bne.n	800b242 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d013      	beq.n	800b2a6 <HAL_UART_AbortReceive_IT+0x11a>
=======
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d2:	2b40      	cmp	r3, #64	; 0x40
 800b1d4:	d14f      	bne.n	800b276 <HAL_UART_AbortReceive_IT+0x156>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	e853 3f00 	ldrex	r3, [r3]
 800b1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1f6:	61ba      	str	r2, [r7, #24]
 800b1f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6979      	ldr	r1, [r7, #20]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	613b      	str	r3, [r7, #16]
   return(result);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e5      	bne.n	800b1d6 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d013      	beq.n	800b23a <HAL_UART_AbortReceive_IT+0x11a>
>>>>>>> Stashed changes
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
<<<<<<< Updated upstream
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b282:	4a25      	ldr	r2, [pc, #148]	; (800b318 <HAL_UART_AbortReceive_IT+0x18c>)
 800b284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fa ffad 	bl	80061ea <HAL_DMA_Abort_IT>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d03a      	beq.n	800b30c <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
 800b2a4:	e032      	b.n	800b30c <HAL_UART_AbortReceive_IT+0x180>
=======
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b216:	4a25      	ldr	r2, [pc, #148]	; (800b2ac <HAL_UART_AbortReceive_IT+0x18c>)
 800b218:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fa ffad 	bl	800617e <HAL_DMA_Abort_IT>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d03a      	beq.n	800b2a0 <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b234:	4610      	mov	r0, r2
 800b236:	4798      	blx	r3
 800b238:	e032      	b.n	800b2a0 <HAL_UART_AbortReceive_IT+0x180>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
<<<<<<< Updated upstream
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	220f      	movs	r2, #15
 800b2ba:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	699a      	ldr	r2, [r3, #24]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0208 	orr.w	r2, r2, #8
 800b2ca:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	661a      	str	r2, [r3, #96]	; 0x60
=======
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	220f      	movs	r2, #15
 800b24e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0208 	orr.w	r2, r2, #8
 800b25e:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< Updated upstream
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fb2c 	bl	800b938 <HAL_UART_AbortReceiveCpltCallback>
 800b2e0:	e014      	b.n	800b30c <HAL_UART_AbortReceive_IT+0x180>
=======
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fb2c 	bl	800b8cc <HAL_UART_AbortReceiveCpltCallback>
 800b274:	e014      	b.n	800b2a0 <HAL_UART_AbortReceive_IT+0x180>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
<<<<<<< Updated upstream
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	220f      	movs	r2, #15
 800b2f6:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	661a      	str	r2, [r3, #96]	; 0x60
=======
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	220f      	movs	r2, #15
 800b28a:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2220      	movs	r2, #32
 800b290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< Updated upstream
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fb16 	bl	800b938 <HAL_UART_AbortReceiveCpltCallback>
=======
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fb16 	bl	800b8cc <HAL_UART_AbortReceiveCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
<<<<<<< Updated upstream
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3768      	adds	r7, #104	; 0x68
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	0800c715 	.word	0x0800c715

0800b31c <HAL_UART_IRQHandler>:
=======
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3768      	adds	r7, #104	; 0x68
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	0800c6a9 	.word	0x0800c6a9

0800b2b0 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b0ba      	sub	sp, #232	; 0xe8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	69db      	ldr	r3, [r3, #28]
 800b32a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b0ba      	sub	sp, #232	; 0xe8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
 800b342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b346:	f640 030f 	movw	r3, #2063	; 0x80f
 800b34a:	4013      	ands	r3, r2
 800b34c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d115      	bne.n	800b384 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b35c:	f003 0320 	and.w	r3, r3, #32
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00f      	beq.n	800b384 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b368:	f003 0320 	and.w	r3, r3, #32
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d009      	beq.n	800b384 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 82ab 	beq.w	800b8d0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4798      	blx	r3
      }
      return;
 800b382:	e2a5      	b.n	800b8d0 <HAL_UART_IRQHandler+0x5b4>
=======
 800b2d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b2da:	f640 030f 	movw	r3, #2063	; 0x80f
 800b2de:	4013      	ands	r3, r2
 800b2e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b2e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d115      	bne.n	800b318 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00f      	beq.n	800b318 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	d009      	beq.n	800b318 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 82ab 	beq.w	800b864 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	4798      	blx	r3
      }
      return;
 800b316:	e2a5      	b.n	800b864 <HAL_UART_IRQHandler+0x5b4>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< Updated upstream
 800b384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8117 	beq.w	800b5bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b38e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b39a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b39e:	4b85      	ldr	r3, [pc, #532]	; (800b5b4 <HAL_UART_IRQHandler+0x298>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 810a 	beq.w	800b5bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d011      	beq.n	800b3d8 <HAL_UART_IRQHandler+0xbc>
 800b3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ce:	f043 0201 	orr.w	r2, r3, #1
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800b318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 8117 	beq.w	800b550 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b32e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b332:	4b85      	ldr	r3, [pc, #532]	; (800b548 <HAL_UART_IRQHandler+0x298>)
 800b334:	4013      	ands	r3, r2
 800b336:	2b00      	cmp	r3, #0
 800b338:	f000 810a 	beq.w	800b550 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	d011      	beq.n	800b36c <HAL_UART_IRQHandler+0xbc>
 800b348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00b      	beq.n	800b36c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2201      	movs	r2, #1
 800b35a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b362:	f043 0201 	orr.w	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d011      	beq.n	800b408 <HAL_UART_IRQHandler+0xec>
 800b3e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2202      	movs	r2, #2
 800b3f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3fe:	f043 0204 	orr.w	r2, r3, #4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800b36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b370:	f003 0302 	and.w	r3, r3, #2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d011      	beq.n	800b39c <HAL_UART_IRQHandler+0xec>
 800b378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2202      	movs	r2, #2
 800b38a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b392:	f043 0204 	orr.w	r2, r3, #4
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	2b00      	cmp	r3, #0
 800b412:	d011      	beq.n	800b438 <HAL_UART_IRQHandler+0x11c>
 800b414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2204      	movs	r2, #4
 800b426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b42e:	f043 0202 	orr.w	r2, r3, #2
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800b39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d011      	beq.n	800b3cc <HAL_UART_IRQHandler+0x11c>
 800b3a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3c2:	f043 0202 	orr.w	r2, r3, #2
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b00      	cmp	r3, #0
 800b442:	d017      	beq.n	800b474 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b448:	f003 0320 	and.w	r3, r3, #32
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d105      	bne.n	800b45c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b454:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00b      	beq.n	800b474 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2208      	movs	r2, #8
 800b462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b46a:	f043 0208 	orr.w	r2, r3, #8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800b3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3d0:	f003 0308 	and.w	r3, r3, #8
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d017      	beq.n	800b408 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3dc:	f003 0320 	and.w	r3, r3, #32
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d105      	bne.n	800b3f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b3e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2208      	movs	r2, #8
 800b3f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3fe:	f043 0208 	orr.w	r2, r3, #8
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
 800b474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d012      	beq.n	800b4a6 <HAL_UART_IRQHandler+0x18a>
 800b480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00c      	beq.n	800b4a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b49c:	f043 0220 	orr.w	r2, r3, #32
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b40c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b410:	2b00      	cmp	r3, #0
 800b412:	d012      	beq.n	800b43a <HAL_UART_IRQHandler+0x18a>
 800b414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00c      	beq.n	800b43a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b430:	f043 0220 	orr.w	r2, r3, #32
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 8211 	beq.w	800b8d4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b6:	f003 0320 	and.w	r3, r3, #32
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00d      	beq.n	800b4da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d007      	beq.n	800b4da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d003      	beq.n	800b4da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	4798      	blx	r3
=======
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 8211 	beq.w	800b868 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b44a:	f003 0320 	and.w	r3, r3, #32
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00d      	beq.n	800b46e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d007      	beq.n	800b46e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ee:	2b40      	cmp	r3, #64	; 0x40
 800b4f0:	d005      	beq.n	800b4fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b4f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d04f      	beq.n	800b59e <HAL_UART_IRQHandler+0x282>
=======
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b482:	2b40      	cmp	r3, #64	; 0x40
 800b484:	d005      	beq.n	800b492 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b48a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d04f      	beq.n	800b532 <HAL_UART_IRQHandler+0x282>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 ff30 	bl	800c364 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50e:	2b40      	cmp	r3, #64	; 0x40
 800b510:	d141      	bne.n	800b596 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b52c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3308      	adds	r3, #8
 800b53a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b53e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b54a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1d9      	bne.n	800b512 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b562:	2b00      	cmp	r3, #0
 800b564:	d013      	beq.n	800b58e <HAL_UART_IRQHandler+0x272>
=======
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 ff30 	bl	800c2f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a2:	2b40      	cmp	r3, #64	; 0x40
 800b4a4:	d141      	bne.n	800b52a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b4d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b4de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b4ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1d9      	bne.n	800b4a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d013      	beq.n	800b522 <HAL_UART_IRQHandler+0x272>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56a:	4a13      	ldr	r2, [pc, #76]	; (800b5b8 <HAL_UART_IRQHandler+0x29c>)
 800b56c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b572:	4618      	mov	r0, r3
 800b574:	f7fa fe39 	bl	80061ea <HAL_DMA_Abort_IT>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d017      	beq.n	800b5ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b588:	4610      	mov	r0, r2
 800b58a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b58c:	e00f      	b.n	800b5ae <HAL_UART_IRQHandler+0x292>
=======
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4fe:	4a13      	ldr	r2, [pc, #76]	; (800b54c <HAL_UART_IRQHandler+0x29c>)
 800b500:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b506:	4618      	mov	r0, r3
 800b508:	f7fa fe39 	bl	800617e <HAL_DMA_Abort_IT>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d017      	beq.n	800b542 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b51c:	4610      	mov	r0, r2
 800b51e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b520:	e00f      	b.n	800b542 <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f9be 	bl	800b910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b594:	e00b      	b.n	800b5ae <HAL_UART_IRQHandler+0x292>
=======
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f9be 	bl	800b8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b528:	e00b      	b.n	800b542 <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f9ba 	bl	800b910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b59c:	e007      	b.n	800b5ae <HAL_UART_IRQHandler+0x292>
=======
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f9ba 	bl	800b8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b530:	e007      	b.n	800b542 <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f9b6 	bl	800b910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b5ac:	e192      	b.n	800b8d4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ae:	bf00      	nop
    return;
 800b5b0:	e190      	b.n	800b8d4 <HAL_UART_IRQHandler+0x5b8>
 800b5b2:	bf00      	nop
 800b5b4:	04000120 	.word	0x04000120
 800b5b8:	0800c6bf 	.word	0x0800c6bf
=======
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f9b6 	bl	800b8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b540:	e192      	b.n	800b868 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b542:	bf00      	nop
    return;
 800b544:	e190      	b.n	800b868 <HAL_UART_IRQHandler+0x5b8>
 800b546:	bf00      	nop
 800b548:	04000120 	.word	0x04000120
 800b54c:	0800c653 	.word	0x0800c653
>>>>>>> Stashed changes

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	f040 814b 	bne.w	800b85c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ca:	f003 0310 	and.w	r3, r3, #16
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 8144 	beq.w	800b85c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d8:	f003 0310 	and.w	r3, r3, #16
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 813d 	beq.w	800b85c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2210      	movs	r2, #16
 800b5e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f4:	2b40      	cmp	r3, #64	; 0x40
 800b5f6:	f040 80b5 	bne.w	800b764 <HAL_UART_IRQHandler+0x448>
=======
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b554:	2b01      	cmp	r3, #1
 800b556:	f040 814b 	bne.w	800b7f0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b55e:	f003 0310 	and.w	r3, r3, #16
 800b562:	2b00      	cmp	r3, #0
 800b564:	f000 8144 	beq.w	800b7f0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 813d 	beq.w	800b7f0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2210      	movs	r2, #16
 800b57c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b588:	2b40      	cmp	r3, #64	; 0x40
 800b58a:	f040 80b5 	bne.w	800b6f8 <HAL_UART_IRQHandler+0x448>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b606:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 8164 	beq.w	800b8d8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b61a:	429a      	cmp	r2, r3
 800b61c:	f080 815c 	bcs.w	800b8d8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b626:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	2b20      	cmp	r3, #32
 800b632:	f000 8086 	beq.w	800b742 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b642:	e853 3f00 	ldrex	r3, [r3]
 800b646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b64a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b64e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b652:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b664:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b66c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b670:	e841 2300 	strex	r3, r2, [r1]
 800b674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1da      	bne.n	800b636 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3308      	adds	r3, #8
 800b686:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b68a:	e853 3f00 	ldrex	r3, [r3]
 800b68e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b692:	f023 0301 	bic.w	r3, r3, #1
 800b696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3308      	adds	r3, #8
 800b6a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b6a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b6a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b6ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b6b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e1      	bne.n	800b680 <HAL_UART_IRQHandler+0x364>
=======
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b59a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 8164 	beq.w	800b86c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b5aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	f080 815c 	bcs.w	800b86c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	f000 8086 	beq.w	800b6d6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5d6:	e853 3f00 	ldrex	r3, [r3]
 800b5da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b5de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b600:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b604:	e841 2300 	strex	r3, r2, [r1]
 800b608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b60c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1da      	bne.n	800b5ca <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	3308      	adds	r3, #8
 800b61a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b61e:	e853 3f00 	ldrex	r3, [r3]
 800b622:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b626:	f023 0301 	bic.w	r3, r3, #1
 800b62a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3308      	adds	r3, #8
 800b634:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b638:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b63c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b640:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b64a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e1      	bne.n	800b614 <HAL_UART_IRQHandler+0x364>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b6cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3308      	adds	r3, #8
 800b6dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b6e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b6e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b6e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b6ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e3      	bne.n	800b6bc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b70a:	e853 3f00 	ldrex	r3, [r3]
 800b70e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b712:	f023 0310 	bic.w	r3, r3, #16
 800b716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b724:	65bb      	str	r3, [r7, #88]	; 0x58
 800b726:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b72a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b72c:	e841 2300 	strex	r3, r2, [r1]
 800b730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e4      	bne.n	800b702 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fa fd1b 	bl	8006178 <HAL_DMA_Abort>
=======
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3308      	adds	r3, #8
 800b656:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b65a:	e853 3f00 	ldrex	r3, [r3]
 800b65e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b666:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3308      	adds	r3, #8
 800b670:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b674:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b676:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b67a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b67c:	e841 2300 	strex	r3, r2, [r1]
 800b680:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e3      	bne.n	800b650 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2220      	movs	r2, #32
 800b68c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6a6:	f023 0310 	bic.w	r3, r3, #16
 800b6aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6c0:	e841 2300 	strex	r3, r2, [r1]
 800b6c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e4      	bne.n	800b696 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fa fd1b 	bl	800610c <HAL_DMA_Abort>
>>>>>>> Stashed changes
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2202      	movs	r2, #2
 800b746:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2202      	movs	r2, #2
 800b6da:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b754:	b29b      	uxth	r3, r3
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	b29b      	uxth	r3, r3
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f8f5 	bl	800b94c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b762:	e0b9      	b.n	800b8d8 <HAL_UART_IRQHandler+0x5bc>
=======
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f8f5 	bl	800b8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6f6:	e0b9      	b.n	800b86c <HAL_UART_IRQHandler+0x5bc>
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b770:	b29b      	uxth	r3, r3
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b77e:	b29b      	uxth	r3, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 80ab 	beq.w	800b8dc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800b786:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 80a6 	beq.w	800b8dc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	e853 3f00 	ldrex	r3, [r3]
 800b79c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800b7b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7ba:	e841 2300 	strex	r3, r2, [r1]
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1e4      	bne.n	800b790 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	e853 3f00 	ldrex	r3, [r3]
 800b7d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	f023 0301 	bic.w	r3, r3, #1
 800b7dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b7ea:	633a      	str	r2, [r7, #48]	; 0x30
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7f2:	e841 2300 	strex	r3, r2, [r1]
 800b7f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1e3      	bne.n	800b7c6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2220      	movs	r2, #32
 800b802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	e853 3f00 	ldrex	r3, [r3]
 800b81e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0310 	bic.w	r3, r3, #16
 800b826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b834:	61fb      	str	r3, [r7, #28]
 800b836:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	69b9      	ldr	r1, [r7, #24]
 800b83a:	69fa      	ldr	r2, [r7, #28]
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	617b      	str	r3, [r7, #20]
   return(result);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e4      	bne.n	800b812 <HAL_UART_IRQHandler+0x4f6>
=======
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b704:	b29b      	uxth	r3, r3
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b712:	b29b      	uxth	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 80ab 	beq.w	800b870 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800b71a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 80a6 	beq.w	800b870 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	461a      	mov	r2, r3
 800b742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b746:	647b      	str	r3, [r7, #68]	; 0x44
 800b748:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b74c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b74e:	e841 2300 	strex	r3, r2, [r1]
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1e4      	bne.n	800b724 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	3308      	adds	r3, #8
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	e853 3f00 	ldrex	r3, [r3]
 800b768:	623b      	str	r3, [r7, #32]
   return(result);
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	f023 0301 	bic.w	r3, r3, #1
 800b770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3308      	adds	r3, #8
 800b77a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b77e:	633a      	str	r2, [r7, #48]	; 0x30
 800b780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1e3      	bne.n	800b75a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2220      	movs	r2, #32
 800b796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	e853 3f00 	ldrex	r3, [r3]
 800b7b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0310 	bic.w	r3, r3, #16
 800b7ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7c8:	61fb      	str	r3, [r7, #28]
 800b7ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7cc:	69b9      	ldr	r1, [r7, #24]
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	e841 2300 	strex	r3, r2, [r1]
 800b7d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1e4      	bne.n	800b7a6 <HAL_UART_IRQHandler+0x4f6>
>>>>>>> Stashed changes

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2202      	movs	r2, #2
 800b84c:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 800b84e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f879 	bl	800b94c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b85a:	e03f      	b.n	800b8dc <HAL_UART_IRQHandler+0x5c0>
=======
 800b7e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f879 	bl	800b8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7ee:	e03f      	b.n	800b870 <HAL_UART_IRQHandler+0x5c0>
>>>>>>> Stashed changes
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< Updated upstream
 800b85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00e      	beq.n	800b886 <HAL_UART_IRQHandler+0x56a>
 800b868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b86c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d008      	beq.n	800b886 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b87c:	621a      	str	r2, [r3, #32]
=======
 800b7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00e      	beq.n	800b81a <HAL_UART_IRQHandler+0x56a>
 800b7fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d008      	beq.n	800b81a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b810:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< Updated upstream
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 f9fb 	bl	800cc7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b884:	e02d      	b.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
=======
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f001 f9fb 	bl	800cc0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b818:	e02d      	b.n	800b876 <HAL_UART_IRQHandler+0x5c6>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< Updated upstream
 800b886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00e      	beq.n	800b8b0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d008      	beq.n	800b8b0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d01c      	beq.n	800b8e0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
    }
    return;
 800b8ae:	e017      	b.n	800b8e0 <HAL_UART_IRQHandler+0x5c4>
=======
 800b81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00e      	beq.n	800b844 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d008      	beq.n	800b844 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d01c      	beq.n	800b874 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	4798      	blx	r3
    }
    return;
 800b842:	e017      	b.n	800b874 <HAL_UART_IRQHandler+0x5c4>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
 800b8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d012      	beq.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
 800b8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00c      	beq.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f001 f804 	bl	800c8d6 <UART_EndTransmit_IT>
    return;
 800b8ce:	e008      	b.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b8d0:	bf00      	nop
 800b8d2:	e006      	b.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b8d4:	bf00      	nop
 800b8d6:	e004      	b.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b8d8:	bf00      	nop
 800b8da:	e002      	b.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b8dc:	bf00      	nop
 800b8de:	e000      	b.n	800b8e2 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b8e0:	bf00      	nop
  }

}
 800b8e2:	37e8      	adds	r7, #232	; 0xe8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_UART_TxHalfCpltCallback>:
=======
 800b844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d012      	beq.n	800b876 <HAL_UART_IRQHandler+0x5c6>
 800b850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00c      	beq.n	800b876 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 f804 	bl	800c86a <UART_EndTransmit_IT>
    return;
 800b862:	e008      	b.n	800b876 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b864:	bf00      	nop
 800b866:	e006      	b.n	800b876 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b868:	bf00      	nop
 800b86a:	e004      	b.n	800b876 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b86c:	bf00      	nop
 800b86e:	e002      	b.n	800b876 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b870:	bf00      	nop
 800b872:	e000      	b.n	800b876 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b874:	bf00      	nop
  }

}
 800b876:	37e8      	adds	r7, #232	; 0xe8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_UART_TxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
=======
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_UART_RxHalfCpltCallback>:
=======
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
=======
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_UART_ErrorCallback>:
=======
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
=======
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_UART_AbortTransmitCpltCallback>:
=======
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_UART_AbortTransmitCpltCallback>:
>>>>>>> Stashed changes
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
=======
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_UART_AbortReceiveCpltCallback>:
=======
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <HAL_UART_AbortReceiveCpltCallback>:
>>>>>>> Stashed changes
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
=======
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_UARTEx_RxEventCallback>:
=======
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	807b      	strh	r3, [r7, #2]
=======
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <UART_SetConfig>:
=======
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
=======
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 800b96c:	2300      	movs	r3, #0
 800b96e:	77bb      	strb	r3, [r7, #30]
=======
 800b900:	2300      	movs	r3, #0
 800b902:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	431a      	orrs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	4313      	orrs	r3, r2
 800b986:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b992:	f023 030c 	bic.w	r3, r3, #12
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	6812      	ldr	r2, [r2, #0]
 800b99a:	6979      	ldr	r1, [r7, #20]
 800b99c:	430b      	orrs	r3, r1
 800b99e:	6013      	str	r3, [r2, #0]
=======
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	431a      	orrs	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	431a      	orrs	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	69db      	ldr	r3, [r3, #28]
 800b918:	4313      	orrs	r3, r2
 800b91a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b926:	f023 030c 	bic.w	r3, r3, #12
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	6979      	ldr	r1, [r7, #20]
 800b930:	430b      	orrs	r3, r1
 800b932:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68da      	ldr	r2, [r3, #12]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	605a      	str	r2, [r3, #4]
=======
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	609a      	str	r2, [r3, #8]
=======
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	4313      	orrs	r3, r2
 800b958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< Updated upstream
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4aa7      	ldr	r2, [pc, #668]	; (800bc7c <UART_SetConfig+0x318>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d120      	bne.n	800ba26 <UART_SetConfig+0xc2>
 800b9e4:	4ba6      	ldr	r3, [pc, #664]	; (800bc80 <UART_SetConfig+0x31c>)
 800b9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e8:	f003 0303 	and.w	r3, r3, #3
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d817      	bhi.n	800ba20 <UART_SetConfig+0xbc>
 800b9f0:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <UART_SetConfig+0x94>)
 800b9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f6:	bf00      	nop
 800b9f8:	0800ba09 	.word	0x0800ba09
 800b9fc:	0800ba15 	.word	0x0800ba15
 800ba00:	0800ba1b 	.word	0x0800ba1b
 800ba04:	0800ba0f 	.word	0x0800ba0f
 800ba08:	2301      	movs	r3, #1
 800ba0a:	77fb      	strb	r3, [r7, #31]
 800ba0c:	e0b5      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba0e:	2302      	movs	r3, #2
 800ba10:	77fb      	strb	r3, [r7, #31]
 800ba12:	e0b2      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba14:	2304      	movs	r3, #4
 800ba16:	77fb      	strb	r3, [r7, #31]
 800ba18:	e0af      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba1a:	2308      	movs	r3, #8
 800ba1c:	77fb      	strb	r3, [r7, #31]
 800ba1e:	e0ac      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba20:	2310      	movs	r3, #16
 800ba22:	77fb      	strb	r3, [r7, #31]
 800ba24:	e0a9      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a96      	ldr	r2, [pc, #600]	; (800bc84 <UART_SetConfig+0x320>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d124      	bne.n	800ba7a <UART_SetConfig+0x116>
 800ba30:	4b93      	ldr	r3, [pc, #588]	; (800bc80 <UART_SetConfig+0x31c>)
 800ba32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba3c:	d011      	beq.n	800ba62 <UART_SetConfig+0xfe>
 800ba3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba42:	d817      	bhi.n	800ba74 <UART_SetConfig+0x110>
 800ba44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba48:	d011      	beq.n	800ba6e <UART_SetConfig+0x10a>
 800ba4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba4e:	d811      	bhi.n	800ba74 <UART_SetConfig+0x110>
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <UART_SetConfig+0xf8>
 800ba54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba58:	d006      	beq.n	800ba68 <UART_SetConfig+0x104>
 800ba5a:	e00b      	b.n	800ba74 <UART_SetConfig+0x110>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	77fb      	strb	r3, [r7, #31]
 800ba60:	e08b      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba62:	2302      	movs	r3, #2
 800ba64:	77fb      	strb	r3, [r7, #31]
 800ba66:	e088      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba68:	2304      	movs	r3, #4
 800ba6a:	77fb      	strb	r3, [r7, #31]
 800ba6c:	e085      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba6e:	2308      	movs	r3, #8
 800ba70:	77fb      	strb	r3, [r7, #31]
 800ba72:	e082      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba74:	2310      	movs	r3, #16
 800ba76:	77fb      	strb	r3, [r7, #31]
 800ba78:	e07f      	b.n	800bb7a <UART_SetConfig+0x216>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a82      	ldr	r2, [pc, #520]	; (800bc88 <UART_SetConfig+0x324>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d124      	bne.n	800bace <UART_SetConfig+0x16a>
 800ba84:	4b7e      	ldr	r3, [pc, #504]	; (800bc80 <UART_SetConfig+0x31c>)
 800ba86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ba8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ba90:	d011      	beq.n	800bab6 <UART_SetConfig+0x152>
 800ba92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ba96:	d817      	bhi.n	800bac8 <UART_SetConfig+0x164>
 800ba98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba9c:	d011      	beq.n	800bac2 <UART_SetConfig+0x15e>
 800ba9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800baa2:	d811      	bhi.n	800bac8 <UART_SetConfig+0x164>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d003      	beq.n	800bab0 <UART_SetConfig+0x14c>
 800baa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800baac:	d006      	beq.n	800babc <UART_SetConfig+0x158>
 800baae:	e00b      	b.n	800bac8 <UART_SetConfig+0x164>
 800bab0:	2300      	movs	r3, #0
 800bab2:	77fb      	strb	r3, [r7, #31]
 800bab4:	e061      	b.n	800bb7a <UART_SetConfig+0x216>
 800bab6:	2302      	movs	r3, #2
 800bab8:	77fb      	strb	r3, [r7, #31]
 800baba:	e05e      	b.n	800bb7a <UART_SetConfig+0x216>
 800babc:	2304      	movs	r3, #4
 800babe:	77fb      	strb	r3, [r7, #31]
 800bac0:	e05b      	b.n	800bb7a <UART_SetConfig+0x216>
 800bac2:	2308      	movs	r3, #8
 800bac4:	77fb      	strb	r3, [r7, #31]
 800bac6:	e058      	b.n	800bb7a <UART_SetConfig+0x216>
 800bac8:	2310      	movs	r3, #16
 800baca:	77fb      	strb	r3, [r7, #31]
 800bacc:	e055      	b.n	800bb7a <UART_SetConfig+0x216>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a6e      	ldr	r2, [pc, #440]	; (800bc8c <UART_SetConfig+0x328>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d124      	bne.n	800bb22 <UART_SetConfig+0x1be>
 800bad8:	4b69      	ldr	r3, [pc, #420]	; (800bc80 <UART_SetConfig+0x31c>)
 800bada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800badc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bae4:	d011      	beq.n	800bb0a <UART_SetConfig+0x1a6>
 800bae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800baea:	d817      	bhi.n	800bb1c <UART_SetConfig+0x1b8>
 800baec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800baf0:	d011      	beq.n	800bb16 <UART_SetConfig+0x1b2>
 800baf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800baf6:	d811      	bhi.n	800bb1c <UART_SetConfig+0x1b8>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <UART_SetConfig+0x1a0>
 800bafc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb00:	d006      	beq.n	800bb10 <UART_SetConfig+0x1ac>
 800bb02:	e00b      	b.n	800bb1c <UART_SetConfig+0x1b8>
 800bb04:	2300      	movs	r3, #0
 800bb06:	77fb      	strb	r3, [r7, #31]
 800bb08:	e037      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	77fb      	strb	r3, [r7, #31]
 800bb0e:	e034      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb10:	2304      	movs	r3, #4
 800bb12:	77fb      	strb	r3, [r7, #31]
 800bb14:	e031      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb16:	2308      	movs	r3, #8
 800bb18:	77fb      	strb	r3, [r7, #31]
 800bb1a:	e02e      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb1c:	2310      	movs	r3, #16
 800bb1e:	77fb      	strb	r3, [r7, #31]
 800bb20:	e02b      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a5a      	ldr	r2, [pc, #360]	; (800bc90 <UART_SetConfig+0x32c>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d124      	bne.n	800bb76 <UART_SetConfig+0x212>
 800bb2c:	4b54      	ldr	r3, [pc, #336]	; (800bc80 <UART_SetConfig+0x31c>)
 800bb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb30:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bb34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bb38:	d011      	beq.n	800bb5e <UART_SetConfig+0x1fa>
 800bb3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bb3e:	d817      	bhi.n	800bb70 <UART_SetConfig+0x20c>
 800bb40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb44:	d011      	beq.n	800bb6a <UART_SetConfig+0x206>
 800bb46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb4a:	d811      	bhi.n	800bb70 <UART_SetConfig+0x20c>
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d003      	beq.n	800bb58 <UART_SetConfig+0x1f4>
 800bb50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb54:	d006      	beq.n	800bb64 <UART_SetConfig+0x200>
 800bb56:	e00b      	b.n	800bb70 <UART_SetConfig+0x20c>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	77fb      	strb	r3, [r7, #31]
 800bb5c:	e00d      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb5e:	2302      	movs	r3, #2
 800bb60:	77fb      	strb	r3, [r7, #31]
 800bb62:	e00a      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb64:	2304      	movs	r3, #4
 800bb66:	77fb      	strb	r3, [r7, #31]
 800bb68:	e007      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb6a:	2308      	movs	r3, #8
 800bb6c:	77fb      	strb	r3, [r7, #31]
 800bb6e:	e004      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb70:	2310      	movs	r3, #16
 800bb72:	77fb      	strb	r3, [r7, #31]
 800bb74:	e001      	b.n	800bb7a <UART_SetConfig+0x216>
 800bb76:	2310      	movs	r3, #16
 800bb78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb82:	d15b      	bne.n	800bc3c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800bb84:	7ffb      	ldrb	r3, [r7, #31]
 800bb86:	2b08      	cmp	r3, #8
 800bb88:	d827      	bhi.n	800bbda <UART_SetConfig+0x276>
 800bb8a:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <UART_SetConfig+0x22c>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbb5 	.word	0x0800bbb5
 800bb94:	0800bbbd 	.word	0x0800bbbd
 800bb98:	0800bbc5 	.word	0x0800bbc5
 800bb9c:	0800bbdb 	.word	0x0800bbdb
 800bba0:	0800bbcb 	.word	0x0800bbcb
 800bba4:	0800bbdb 	.word	0x0800bbdb
 800bba8:	0800bbdb 	.word	0x0800bbdb
 800bbac:	0800bbdb 	.word	0x0800bbdb
 800bbb0:	0800bbd3 	.word	0x0800bbd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbb4:	f7fe fb64 	bl	800a280 <HAL_RCC_GetPCLK1Freq>
 800bbb8:	61b8      	str	r0, [r7, #24]
        break;
 800bbba:	e013      	b.n	800bbe4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbbc:	f7fe fb82 	bl	800a2c4 <HAL_RCC_GetPCLK2Freq>
 800bbc0:	61b8      	str	r0, [r7, #24]
        break;
 800bbc2:	e00f      	b.n	800bbe4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbc4:	4b33      	ldr	r3, [pc, #204]	; (800bc94 <UART_SetConfig+0x330>)
 800bbc6:	61bb      	str	r3, [r7, #24]
        break;
 800bbc8:	e00c      	b.n	800bbe4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbca:	f7fe fae1 	bl	800a190 <HAL_RCC_GetSysClockFreq>
 800bbce:	61b8      	str	r0, [r7, #24]
        break;
 800bbd0:	e008      	b.n	800bbe4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbd6:	61bb      	str	r3, [r7, #24]
        break;
 800bbd8:	e004      	b.n	800bbe4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	77bb      	strb	r3, [r7, #30]
        break;
 800bbe2:	bf00      	nop
=======
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4aa7      	ldr	r2, [pc, #668]	; (800bc10 <UART_SetConfig+0x318>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d120      	bne.n	800b9ba <UART_SetConfig+0xc2>
 800b978:	4ba6      	ldr	r3, [pc, #664]	; (800bc14 <UART_SetConfig+0x31c>)
 800b97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97c:	f003 0303 	and.w	r3, r3, #3
 800b980:	2b03      	cmp	r3, #3
 800b982:	d817      	bhi.n	800b9b4 <UART_SetConfig+0xbc>
 800b984:	a201      	add	r2, pc, #4	; (adr r2, 800b98c <UART_SetConfig+0x94>)
 800b986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98a:	bf00      	nop
 800b98c:	0800b99d 	.word	0x0800b99d
 800b990:	0800b9a9 	.word	0x0800b9a9
 800b994:	0800b9af 	.word	0x0800b9af
 800b998:	0800b9a3 	.word	0x0800b9a3
 800b99c:	2301      	movs	r3, #1
 800b99e:	77fb      	strb	r3, [r7, #31]
 800b9a0:	e0b5      	b.n	800bb0e <UART_SetConfig+0x216>
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	77fb      	strb	r3, [r7, #31]
 800b9a6:	e0b2      	b.n	800bb0e <UART_SetConfig+0x216>
 800b9a8:	2304      	movs	r3, #4
 800b9aa:	77fb      	strb	r3, [r7, #31]
 800b9ac:	e0af      	b.n	800bb0e <UART_SetConfig+0x216>
 800b9ae:	2308      	movs	r3, #8
 800b9b0:	77fb      	strb	r3, [r7, #31]
 800b9b2:	e0ac      	b.n	800bb0e <UART_SetConfig+0x216>
 800b9b4:	2310      	movs	r3, #16
 800b9b6:	77fb      	strb	r3, [r7, #31]
 800b9b8:	e0a9      	b.n	800bb0e <UART_SetConfig+0x216>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a96      	ldr	r2, [pc, #600]	; (800bc18 <UART_SetConfig+0x320>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d124      	bne.n	800ba0e <UART_SetConfig+0x116>
 800b9c4:	4b93      	ldr	r3, [pc, #588]	; (800bc14 <UART_SetConfig+0x31c>)
 800b9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b9cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9d0:	d011      	beq.n	800b9f6 <UART_SetConfig+0xfe>
 800b9d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9d6:	d817      	bhi.n	800ba08 <UART_SetConfig+0x110>
 800b9d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9dc:	d011      	beq.n	800ba02 <UART_SetConfig+0x10a>
 800b9de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9e2:	d811      	bhi.n	800ba08 <UART_SetConfig+0x110>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <UART_SetConfig+0xf8>
 800b9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ec:	d006      	beq.n	800b9fc <UART_SetConfig+0x104>
 800b9ee:	e00b      	b.n	800ba08 <UART_SetConfig+0x110>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	77fb      	strb	r3, [r7, #31]
 800b9f4:	e08b      	b.n	800bb0e <UART_SetConfig+0x216>
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	77fb      	strb	r3, [r7, #31]
 800b9fa:	e088      	b.n	800bb0e <UART_SetConfig+0x216>
 800b9fc:	2304      	movs	r3, #4
 800b9fe:	77fb      	strb	r3, [r7, #31]
 800ba00:	e085      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba02:	2308      	movs	r3, #8
 800ba04:	77fb      	strb	r3, [r7, #31]
 800ba06:	e082      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba08:	2310      	movs	r3, #16
 800ba0a:	77fb      	strb	r3, [r7, #31]
 800ba0c:	e07f      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a82      	ldr	r2, [pc, #520]	; (800bc1c <UART_SetConfig+0x324>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d124      	bne.n	800ba62 <UART_SetConfig+0x16a>
 800ba18:	4b7e      	ldr	r3, [pc, #504]	; (800bc14 <UART_SetConfig+0x31c>)
 800ba1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ba20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ba24:	d011      	beq.n	800ba4a <UART_SetConfig+0x152>
 800ba26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ba2a:	d817      	bhi.n	800ba5c <UART_SetConfig+0x164>
 800ba2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba30:	d011      	beq.n	800ba56 <UART_SetConfig+0x15e>
 800ba32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba36:	d811      	bhi.n	800ba5c <UART_SetConfig+0x164>
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <UART_SetConfig+0x14c>
 800ba3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba40:	d006      	beq.n	800ba50 <UART_SetConfig+0x158>
 800ba42:	e00b      	b.n	800ba5c <UART_SetConfig+0x164>
 800ba44:	2300      	movs	r3, #0
 800ba46:	77fb      	strb	r3, [r7, #31]
 800ba48:	e061      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	77fb      	strb	r3, [r7, #31]
 800ba4e:	e05e      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba50:	2304      	movs	r3, #4
 800ba52:	77fb      	strb	r3, [r7, #31]
 800ba54:	e05b      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba56:	2308      	movs	r3, #8
 800ba58:	77fb      	strb	r3, [r7, #31]
 800ba5a:	e058      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	77fb      	strb	r3, [r7, #31]
 800ba60:	e055      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a6e      	ldr	r2, [pc, #440]	; (800bc20 <UART_SetConfig+0x328>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d124      	bne.n	800bab6 <UART_SetConfig+0x1be>
 800ba6c:	4b69      	ldr	r3, [pc, #420]	; (800bc14 <UART_SetConfig+0x31c>)
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ba74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba78:	d011      	beq.n	800ba9e <UART_SetConfig+0x1a6>
 800ba7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba7e:	d817      	bhi.n	800bab0 <UART_SetConfig+0x1b8>
 800ba80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba84:	d011      	beq.n	800baaa <UART_SetConfig+0x1b2>
 800ba86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba8a:	d811      	bhi.n	800bab0 <UART_SetConfig+0x1b8>
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d003      	beq.n	800ba98 <UART_SetConfig+0x1a0>
 800ba90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba94:	d006      	beq.n	800baa4 <UART_SetConfig+0x1ac>
 800ba96:	e00b      	b.n	800bab0 <UART_SetConfig+0x1b8>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	77fb      	strb	r3, [r7, #31]
 800ba9c:	e037      	b.n	800bb0e <UART_SetConfig+0x216>
 800ba9e:	2302      	movs	r3, #2
 800baa0:	77fb      	strb	r3, [r7, #31]
 800baa2:	e034      	b.n	800bb0e <UART_SetConfig+0x216>
 800baa4:	2304      	movs	r3, #4
 800baa6:	77fb      	strb	r3, [r7, #31]
 800baa8:	e031      	b.n	800bb0e <UART_SetConfig+0x216>
 800baaa:	2308      	movs	r3, #8
 800baac:	77fb      	strb	r3, [r7, #31]
 800baae:	e02e      	b.n	800bb0e <UART_SetConfig+0x216>
 800bab0:	2310      	movs	r3, #16
 800bab2:	77fb      	strb	r3, [r7, #31]
 800bab4:	e02b      	b.n	800bb0e <UART_SetConfig+0x216>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a5a      	ldr	r2, [pc, #360]	; (800bc24 <UART_SetConfig+0x32c>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d124      	bne.n	800bb0a <UART_SetConfig+0x212>
 800bac0:	4b54      	ldr	r3, [pc, #336]	; (800bc14 <UART_SetConfig+0x31c>)
 800bac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bacc:	d011      	beq.n	800baf2 <UART_SetConfig+0x1fa>
 800bace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bad2:	d817      	bhi.n	800bb04 <UART_SetConfig+0x20c>
 800bad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bad8:	d011      	beq.n	800bafe <UART_SetConfig+0x206>
 800bada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bade:	d811      	bhi.n	800bb04 <UART_SetConfig+0x20c>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <UART_SetConfig+0x1f4>
 800bae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bae8:	d006      	beq.n	800baf8 <UART_SetConfig+0x200>
 800baea:	e00b      	b.n	800bb04 <UART_SetConfig+0x20c>
 800baec:	2300      	movs	r3, #0
 800baee:	77fb      	strb	r3, [r7, #31]
 800baf0:	e00d      	b.n	800bb0e <UART_SetConfig+0x216>
 800baf2:	2302      	movs	r3, #2
 800baf4:	77fb      	strb	r3, [r7, #31]
 800baf6:	e00a      	b.n	800bb0e <UART_SetConfig+0x216>
 800baf8:	2304      	movs	r3, #4
 800bafa:	77fb      	strb	r3, [r7, #31]
 800bafc:	e007      	b.n	800bb0e <UART_SetConfig+0x216>
 800bafe:	2308      	movs	r3, #8
 800bb00:	77fb      	strb	r3, [r7, #31]
 800bb02:	e004      	b.n	800bb0e <UART_SetConfig+0x216>
 800bb04:	2310      	movs	r3, #16
 800bb06:	77fb      	strb	r3, [r7, #31]
 800bb08:	e001      	b.n	800bb0e <UART_SetConfig+0x216>
 800bb0a:	2310      	movs	r3, #16
 800bb0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	69db      	ldr	r3, [r3, #28]
 800bb12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb16:	d15b      	bne.n	800bbd0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800bb18:	7ffb      	ldrb	r3, [r7, #31]
 800bb1a:	2b08      	cmp	r3, #8
 800bb1c:	d827      	bhi.n	800bb6e <UART_SetConfig+0x276>
 800bb1e:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <UART_SetConfig+0x22c>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb49 	.word	0x0800bb49
 800bb28:	0800bb51 	.word	0x0800bb51
 800bb2c:	0800bb59 	.word	0x0800bb59
 800bb30:	0800bb6f 	.word	0x0800bb6f
 800bb34:	0800bb5f 	.word	0x0800bb5f
 800bb38:	0800bb6f 	.word	0x0800bb6f
 800bb3c:	0800bb6f 	.word	0x0800bb6f
 800bb40:	0800bb6f 	.word	0x0800bb6f
 800bb44:	0800bb67 	.word	0x0800bb67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb48:	f7fe fb64 	bl	800a214 <HAL_RCC_GetPCLK1Freq>
 800bb4c:	61b8      	str	r0, [r7, #24]
        break;
 800bb4e:	e013      	b.n	800bb78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb50:	f7fe fb82 	bl	800a258 <HAL_RCC_GetPCLK2Freq>
 800bb54:	61b8      	str	r0, [r7, #24]
        break;
 800bb56:	e00f      	b.n	800bb78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb58:	4b33      	ldr	r3, [pc, #204]	; (800bc28 <UART_SetConfig+0x330>)
 800bb5a:	61bb      	str	r3, [r7, #24]
        break;
 800bb5c:	e00c      	b.n	800bb78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb5e:	f7fe fae1 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800bb62:	61b8      	str	r0, [r7, #24]
        break;
 800bb64:	e008      	b.n	800bb78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb6a:	61bb      	str	r3, [r7, #24]
        break;
 800bb6c:	e004      	b.n	800bb78 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	77bb      	strb	r3, [r7, #30]
        break;
 800bb76:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 8082 	beq.w	800bcf0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	005a      	lsls	r2, r3, #1
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	085b      	lsrs	r3, r3, #1
 800bbf6:	441a      	add	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	2b0f      	cmp	r3, #15
 800bc06:	d916      	bls.n	800bc36 <UART_SetConfig+0x2d2>
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc0e:	d212      	bcs.n	800bc36 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	f023 030f 	bic.w	r3, r3, #15
 800bc18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	085b      	lsrs	r3, r3, #1
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f003 0307 	and.w	r3, r3, #7
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	89fb      	ldrh	r3, [r7, #14]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	89fa      	ldrh	r2, [r7, #14]
 800bc32:	60da      	str	r2, [r3, #12]
 800bc34:	e05c      	b.n	800bcf0 <UART_SetConfig+0x38c>
=======
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 8082 	beq.w	800bc84 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	005a      	lsls	r2, r3, #1
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	085b      	lsrs	r3, r3, #1
 800bb8a:	441a      	add	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2b0f      	cmp	r3, #15
 800bb9a:	d916      	bls.n	800bbca <UART_SetConfig+0x2d2>
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba2:	d212      	bcs.n	800bbca <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	f023 030f 	bic.w	r3, r3, #15
 800bbac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	085b      	lsrs	r3, r3, #1
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	f003 0307 	and.w	r3, r3, #7
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	89fb      	ldrh	r3, [r7, #14]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	89fa      	ldrh	r2, [r7, #14]
 800bbc6:	60da      	str	r2, [r3, #12]
 800bbc8:	e05c      	b.n	800bc84 <UART_SetConfig+0x38c>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 800bc36:	2301      	movs	r3, #1
 800bc38:	77bb      	strb	r3, [r7, #30]
 800bc3a:	e059      	b.n	800bcf0 <UART_SetConfig+0x38c>
=======
 800bbca:	2301      	movs	r3, #1
 800bbcc:	77bb      	strb	r3, [r7, #30]
 800bbce:	e059      	b.n	800bc84 <UART_SetConfig+0x38c>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 800bc3c:	7ffb      	ldrb	r3, [r7, #31]
 800bc3e:	2b08      	cmp	r3, #8
 800bc40:	d835      	bhi.n	800bcae <UART_SetConfig+0x34a>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <UART_SetConfig+0x2e4>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc6d 	.word	0x0800bc6d
 800bc4c:	0800bc75 	.word	0x0800bc75
 800bc50:	0800bc99 	.word	0x0800bc99
 800bc54:	0800bcaf 	.word	0x0800bcaf
 800bc58:	0800bc9f 	.word	0x0800bc9f
 800bc5c:	0800bcaf 	.word	0x0800bcaf
 800bc60:	0800bcaf 	.word	0x0800bcaf
 800bc64:	0800bcaf 	.word	0x0800bcaf
 800bc68:	0800bca7 	.word	0x0800bca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc6c:	f7fe fb08 	bl	800a280 <HAL_RCC_GetPCLK1Freq>
 800bc70:	61b8      	str	r0, [r7, #24]
        break;
 800bc72:	e021      	b.n	800bcb8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc74:	f7fe fb26 	bl	800a2c4 <HAL_RCC_GetPCLK2Freq>
 800bc78:	61b8      	str	r0, [r7, #24]
        break;
 800bc7a:	e01d      	b.n	800bcb8 <UART_SetConfig+0x354>
 800bc7c:	40013800 	.word	0x40013800
 800bc80:	40021000 	.word	0x40021000
 800bc84:	40004400 	.word	0x40004400
 800bc88:	40004800 	.word	0x40004800
 800bc8c:	40004c00 	.word	0x40004c00
 800bc90:	40005000 	.word	0x40005000
 800bc94:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc98:	4b1b      	ldr	r3, [pc, #108]	; (800bd08 <UART_SetConfig+0x3a4>)
 800bc9a:	61bb      	str	r3, [r7, #24]
        break;
 800bc9c:	e00c      	b.n	800bcb8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc9e:	f7fe fa77 	bl	800a190 <HAL_RCC_GetSysClockFreq>
 800bca2:	61b8      	str	r0, [r7, #24]
        break;
 800bca4:	e008      	b.n	800bcb8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcaa:	61bb      	str	r3, [r7, #24]
        break;
 800bcac:	e004      	b.n	800bcb8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	77bb      	strb	r3, [r7, #30]
        break;
 800bcb6:	bf00      	nop
    }

    if (pclk != 0U)
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d018      	beq.n	800bcf0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	085a      	lsrs	r2, r3, #1
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	441a      	add	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2b0f      	cmp	r3, #15
 800bcd6:	d909      	bls.n	800bcec <UART_SetConfig+0x388>
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcde:	d205      	bcs.n	800bcec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	60da      	str	r2, [r3, #12]
 800bcea:	e001      	b.n	800bcf0 <UART_SetConfig+0x38c>
=======
 800bbd0:	7ffb      	ldrb	r3, [r7, #31]
 800bbd2:	2b08      	cmp	r3, #8
 800bbd4:	d835      	bhi.n	800bc42 <UART_SetConfig+0x34a>
 800bbd6:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <UART_SetConfig+0x2e4>)
 800bbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbdc:	0800bc01 	.word	0x0800bc01
 800bbe0:	0800bc09 	.word	0x0800bc09
 800bbe4:	0800bc2d 	.word	0x0800bc2d
 800bbe8:	0800bc43 	.word	0x0800bc43
 800bbec:	0800bc33 	.word	0x0800bc33
 800bbf0:	0800bc43 	.word	0x0800bc43
 800bbf4:	0800bc43 	.word	0x0800bc43
 800bbf8:	0800bc43 	.word	0x0800bc43
 800bbfc:	0800bc3b 	.word	0x0800bc3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc00:	f7fe fb08 	bl	800a214 <HAL_RCC_GetPCLK1Freq>
 800bc04:	61b8      	str	r0, [r7, #24]
        break;
 800bc06:	e021      	b.n	800bc4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc08:	f7fe fb26 	bl	800a258 <HAL_RCC_GetPCLK2Freq>
 800bc0c:	61b8      	str	r0, [r7, #24]
        break;
 800bc0e:	e01d      	b.n	800bc4c <UART_SetConfig+0x354>
 800bc10:	40013800 	.word	0x40013800
 800bc14:	40021000 	.word	0x40021000
 800bc18:	40004400 	.word	0x40004400
 800bc1c:	40004800 	.word	0x40004800
 800bc20:	40004c00 	.word	0x40004c00
 800bc24:	40005000 	.word	0x40005000
 800bc28:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc2c:	4b1b      	ldr	r3, [pc, #108]	; (800bc9c <UART_SetConfig+0x3a4>)
 800bc2e:	61bb      	str	r3, [r7, #24]
        break;
 800bc30:	e00c      	b.n	800bc4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc32:	f7fe fa77 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800bc36:	61b8      	str	r0, [r7, #24]
        break;
 800bc38:	e008      	b.n	800bc4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc3e:	61bb      	str	r3, [r7, #24]
        break;
 800bc40:	e004      	b.n	800bc4c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800bc42:	2300      	movs	r3, #0
 800bc44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	77bb      	strb	r3, [r7, #30]
        break;
 800bc4a:	bf00      	nop
    }

    if (pclk != 0U)
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d018      	beq.n	800bc84 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	085a      	lsrs	r2, r3, #1
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	441a      	add	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b0f      	cmp	r3, #15
 800bc6a:	d909      	bls.n	800bc80 <UART_SetConfig+0x388>
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc72:	d205      	bcs.n	800bc80 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60da      	str	r2, [r3, #12]
 800bc7e:	e001      	b.n	800bc84 <UART_SetConfig+0x38c>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 800bcec:	2301      	movs	r3, #1
 800bcee:	77bb      	strb	r3, [r7, #30]
=======
 800bc80:	2301      	movs	r3, #1
 800bc82:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< Updated upstream
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bcfc:	7fbb      	ldrb	r3, [r7, #30]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3720      	adds	r7, #32
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	007a1200 	.word	0x007a1200

0800bd0c <UART_AdvFeatureConfig>:
=======
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bc90:	7fbb      	ldrb	r3, [r7, #30]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3720      	adds	r7, #32
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	007a1200 	.word	0x007a1200

0800bca0 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
=======
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00a      	beq.n	800bd36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	605a      	str	r2, [r3, #4]
=======
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	f003 0302 	and.w	r3, r3, #2
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00a      	beq.n	800bd58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	430a      	orrs	r2, r1
 800bd56:	605a      	str	r2, [r3, #4]
=======
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	f003 0302 	and.w	r3, r3, #2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00a      	beq.n	800bcec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00a      	beq.n	800bd7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	605a      	str	r2, [r3, #4]
=======
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	f003 0304 	and.w	r3, r3, #4
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00a      	beq.n	800bd0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7e:	f003 0308 	and.w	r3, r3, #8
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	430a      	orrs	r2, r1
 800bd9a:	605a      	str	r2, [r3, #4]
=======
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd12:	f003 0308 	and.w	r3, r3, #8
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00a      	beq.n	800bd30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	f003 0310 	and.w	r3, r3, #16
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00a      	beq.n	800bdbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	609a      	str	r2, [r3, #8]
=======
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	f003 0310 	and.w	r3, r3, #16
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00a      	beq.n	800bd52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00a      	beq.n	800bde0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	609a      	str	r2, [r3, #8]
=======
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	430a      	orrs	r2, r1
 800bd72:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d01a      	beq.n	800be22 <UART_AdvFeatureConfig+0x116>
=======
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01a      	beq.n	800bdb6 <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	430a      	orrs	r2, r1
 800be00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be0a:	d10a      	bne.n	800be22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	430a      	orrs	r2, r1
 800be20:	605a      	str	r2, [r3, #4]
=======
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	430a      	orrs	r2, r1
 800bd94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd9e:	d10a      	bne.n	800bdb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00a      	beq.n	800be44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	605a      	str	r2, [r3, #4]
  }
}
 800be44:	bf00      	nop
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <UART_CheckIdleState>:
=======
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	605a      	str	r2, [r3, #4]
  }
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800be50:	b580      	push	{r7, lr}
 800be52:	b098      	sub	sp, #96	; 0x60
 800be54:	af02      	add	r7, sp, #8
 800be56:	6078      	str	r0, [r7, #4]
=======
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b098      	sub	sp, #96	; 0x60
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be60:	f7f9 ffd2 	bl	8005e08 <HAL_GetTick>
 800be64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0308 	and.w	r3, r3, #8
 800be70:	2b08      	cmp	r3, #8
 800be72:	d12e      	bne.n	800bed2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be7c:	2200      	movs	r2, #0
 800be7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f88c 	bl	800bfa0 <UART_WaitOnFlagUntilTimeout>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d021      	beq.n	800bed2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	e853 3f00 	ldrex	r3, [r3]
 800be9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bea2:	653b      	str	r3, [r7, #80]	; 0x50
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beac:	647b      	str	r3, [r7, #68]	; 0x44
 800beae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800beb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beb4:	e841 2300 	strex	r3, r2, [r1]
 800beb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800beba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1e6      	bne.n	800be8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2220      	movs	r2, #32
 800bec4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bece:	2303      	movs	r3, #3
 800bed0:	e062      	b.n	800bf98 <UART_CheckIdleState+0x148>
=======
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdf4:	f7f9 ffd2 	bl	8005d9c <HAL_GetTick>
 800bdf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 0308 	and.w	r3, r3, #8
 800be04:	2b08      	cmp	r3, #8
 800be06:	d12e      	bne.n	800be66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be10:	2200      	movs	r2, #0
 800be12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f88c 	bl	800bf34 <UART_WaitOnFlagUntilTimeout>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d021      	beq.n	800be66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	e853 3f00 	ldrex	r3, [r3]
 800be2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be36:	653b      	str	r3, [r7, #80]	; 0x50
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	461a      	mov	r2, r3
 800be3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be40:	647b      	str	r3, [r7, #68]	; 0x44
 800be42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be48:	e841 2300 	strex	r3, r2, [r1]
 800be4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e6      	bne.n	800be22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2220      	movs	r2, #32
 800be58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be62:	2303      	movs	r3, #3
 800be64:	e062      	b.n	800bf2c <UART_CheckIdleState+0x148>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0304 	and.w	r3, r3, #4
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d149      	bne.n	800bf74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bee8:	2200      	movs	r2, #0
 800beea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f856 	bl	800bfa0 <UART_WaitOnFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d03c      	beq.n	800bf74 <UART_CheckIdleState+0x124>
=======
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b04      	cmp	r3, #4
 800be72:	d149      	bne.n	800bf08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be7c:	2200      	movs	r2, #0
 800be7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f856 	bl	800bf34 <UART_WaitOnFlagUntilTimeout>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d03c      	beq.n	800bf08 <UART_CheckIdleState+0x124>
>>>>>>> Stashed changes
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	e853 3f00 	ldrex	r3, [r3]
 800bf06:	623b      	str	r3, [r7, #32]
   return(result);
 800bf08:	6a3b      	ldr	r3, [r7, #32]
 800bf0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	461a      	mov	r2, r3
 800bf16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf18:	633b      	str	r3, [r7, #48]	; 0x30
 800bf1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf20:	e841 2300 	strex	r3, r2, [r1]
 800bf24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e6      	bne.n	800befa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	3308      	adds	r3, #8
 800bf32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	e853 3f00 	ldrex	r3, [r3]
 800bf3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0301 	bic.w	r3, r3, #1
 800bf42:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf4c:	61fa      	str	r2, [r7, #28]
 800bf4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	69b9      	ldr	r1, [r7, #24]
 800bf52:	69fa      	ldr	r2, [r7, #28]
 800bf54:	e841 2300 	strex	r3, r2, [r1]
 800bf58:	617b      	str	r3, [r7, #20]
   return(result);
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e5      	bne.n	800bf2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e011      	b.n	800bf98 <UART_CheckIdleState+0x148>
=======
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	e853 3f00 	ldrex	r3, [r3]
 800be9a:	623b      	str	r3, [r7, #32]
   return(result);
 800be9c:	6a3b      	ldr	r3, [r7, #32]
 800be9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beac:	633b      	str	r3, [r7, #48]	; 0x30
 800beae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800beb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beb4:	e841 2300 	strex	r3, r2, [r1]
 800beb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800beba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1e6      	bne.n	800be8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3308      	adds	r3, #8
 800bec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	e853 3f00 	ldrex	r3, [r3]
 800bece:	60fb      	str	r3, [r7, #12]
   return(result);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f023 0301 	bic.w	r3, r3, #1
 800bed6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3308      	adds	r3, #8
 800bede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bee0:	61fa      	str	r2, [r7, #28]
 800bee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee4:	69b9      	ldr	r1, [r7, #24]
 800bee6:	69fa      	ldr	r2, [r7, #28]
 800bee8:	e841 2300 	strex	r3, r2, [r1]
 800beec:	617b      	str	r3, [r7, #20]
   return(result);
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e5      	bne.n	800bec0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2220      	movs	r2, #32
 800bef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e011      	b.n	800bf2c <UART_CheckIdleState+0x148>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2220      	movs	r2, #32
 800bf78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3758      	adds	r7, #88	; 0x58
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <UART_WaitOnFlagUntilTimeout>:
=======
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2220      	movs	r2, #32
 800bf12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3758      	adds	r7, #88	; 0x58
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	603b      	str	r3, [r7, #0]
 800bfac:	4613      	mov	r3, r2
 800bfae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfb0:	e049      	b.n	800c046 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb8:	d045      	beq.n	800c046 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfba:	f7f9 ff25 	bl	8005e08 <HAL_GetTick>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	69ba      	ldr	r2, [r7, #24]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d302      	bcc.n	800bfd0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	e048      	b.n	800c066 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 0304 	and.w	r3, r3, #4
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d031      	beq.n	800c046 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	f003 0308 	and.w	r3, r3, #8
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d110      	bne.n	800c012 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2208      	movs	r2, #8
 800bff6:	621a      	str	r2, [r3, #32]
=======
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	603b      	str	r3, [r7, #0]
 800bf40:	4613      	mov	r3, r2
 800bf42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf44:	e049      	b.n	800bfda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d045      	beq.n	800bfda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf4e:	f7f9 ff25 	bl	8005d9c <HAL_GetTick>
 800bf52:	4602      	mov	r2, r0
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	69ba      	ldr	r2, [r7, #24]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d302      	bcc.n	800bf64 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e048      	b.n	800bffa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 0304 	and.w	r3, r3, #4
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d031      	beq.n	800bfda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	69db      	ldr	r3, [r3, #28]
 800bf7c:	f003 0308 	and.w	r3, r3, #8
 800bf80:	2b08      	cmp	r3, #8
 800bf82:	d110      	bne.n	800bfa6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2208      	movs	r2, #8
 800bf8a:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f000 f9b3 	bl	800c364 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2208      	movs	r2, #8
 800c002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	e029      	b.n	800c066 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	69db      	ldr	r3, [r3, #28]
 800c018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c01c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c020:	d111      	bne.n	800c046 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c02a:	621a      	str	r2, [r3, #32]
=======
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f9b3 	bl	800c2f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2208      	movs	r2, #8
 800bf96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e029      	b.n	800bffa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfb4:	d111      	bne.n	800bfda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfbe:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f000 f999 	bl	800c364 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2220      	movs	r2, #32
 800c036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c042:	2303      	movs	r3, #3
 800c044:	e00f      	b.n	800c066 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	69da      	ldr	r2, [r3, #28]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	4013      	ands	r3, r2
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	429a      	cmp	r2, r3
 800c054:	bf0c      	ite	eq
 800c056:	2301      	moveq	r3, #1
 800c058:	2300      	movne	r3, #0
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	461a      	mov	r2, r3
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	429a      	cmp	r2, r3
 800c062:	d0a6      	beq.n	800bfb2 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 f999 	bl	800c2f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2220      	movs	r2, #32
 800bfca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e00f      	b.n	800bffa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69da      	ldr	r2, [r3, #28]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	bf0c      	ite	eq
 800bfea:	2301      	moveq	r3, #1
 800bfec:	2300      	movne	r3, #0
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	461a      	mov	r2, r3
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d0a6      	beq.n	800bf46 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <UART_Start_Receive_IT>:
=======
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <UART_Start_Receive_IT>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800c070:	b480      	push	{r7}
 800c072:	b097      	sub	sp, #92	; 0x5c
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	4613      	mov	r3, r2
 800c07c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	88fa      	ldrh	r2, [r7, #6]
 800c088:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	88fa      	ldrh	r2, [r7, #6]
 800c090:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a2:	d10e      	bne.n	800c0c2 <UART_Start_Receive_IT+0x52>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d105      	bne.n	800c0b8 <UART_Start_Receive_IT+0x48>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c0b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c0b6:	e01a      	b.n	800c0ee <UART_Start_Receive_IT+0x7e>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	22ff      	movs	r2, #255	; 0xff
 800c0bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c0c0:	e015      	b.n	800c0ee <UART_Start_Receive_IT+0x7e>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10d      	bne.n	800c0e6 <UART_Start_Receive_IT+0x76>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d104      	bne.n	800c0dc <UART_Start_Receive_IT+0x6c>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	22ff      	movs	r2, #255	; 0xff
 800c0d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c0da:	e008      	b.n	800c0ee <UART_Start_Receive_IT+0x7e>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	227f      	movs	r2, #127	; 0x7f
 800c0e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c0e4:	e003      	b.n	800c0ee <UART_Start_Receive_IT+0x7e>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2222      	movs	r2, #34	; 0x22
 800c0fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3308      	adds	r3, #8
 800c104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c108:	e853 3f00 	ldrex	r3, [r3]
 800c10c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	f043 0301 	orr.w	r3, r3, #1
 800c114:	657b      	str	r3, [r7, #84]	; 0x54
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3308      	adds	r3, #8
 800c11c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c11e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c126:	e841 2300 	strex	r3, r2, [r1]
 800c12a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1e5      	bne.n	800c0fe <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c13a:	d107      	bne.n	800c14c <UART_Start_Receive_IT+0xdc>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d103      	bne.n	800c14c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	4a22      	ldr	r2, [pc, #136]	; (800c1d0 <UART_Start_Receive_IT+0x160>)
 800c148:	669a      	str	r2, [r3, #104]	; 0x68
 800c14a:	e002      	b.n	800c152 <UART_Start_Receive_IT+0xe2>
=======
 800c004:	b480      	push	{r7}
 800c006:	b097      	sub	sp, #92	; 0x5c
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	4613      	mov	r3, r2
 800c010:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	88fa      	ldrh	r2, [r7, #6]
 800c01c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	88fa      	ldrh	r2, [r7, #6]
 800c024:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c036:	d10e      	bne.n	800c056 <UART_Start_Receive_IT+0x52>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d105      	bne.n	800c04c <UART_Start_Receive_IT+0x48>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c046:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c04a:	e01a      	b.n	800c082 <UART_Start_Receive_IT+0x7e>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	22ff      	movs	r2, #255	; 0xff
 800c050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c054:	e015      	b.n	800c082 <UART_Start_Receive_IT+0x7e>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10d      	bne.n	800c07a <UART_Start_Receive_IT+0x76>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d104      	bne.n	800c070 <UART_Start_Receive_IT+0x6c>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	22ff      	movs	r2, #255	; 0xff
 800c06a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c06e:	e008      	b.n	800c082 <UART_Start_Receive_IT+0x7e>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	227f      	movs	r2, #127	; 0x7f
 800c074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c078:	e003      	b.n	800c082 <UART_Start_Receive_IT+0x7e>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2200      	movs	r2, #0
 800c086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2222      	movs	r2, #34	; 0x22
 800c08e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3308      	adds	r3, #8
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	f043 0301 	orr.w	r3, r3, #1
 800c0a8:	657b      	str	r3, [r7, #84]	; 0x54
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c0b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0ba:	e841 2300 	strex	r3, r2, [r1]
 800c0be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1e5      	bne.n	800c092 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ce:	d107      	bne.n	800c0e0 <UART_Start_Receive_IT+0xdc>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d103      	bne.n	800c0e0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4a22      	ldr	r2, [pc, #136]	; (800c164 <UART_Start_Receive_IT+0x160>)
 800c0dc:	669a      	str	r2, [r3, #104]	; 0x68
 800c0de:	e002      	b.n	800c0e6 <UART_Start_Receive_IT+0xe2>
>>>>>>> Stashed changes
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
<<<<<<< Updated upstream
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4a21      	ldr	r2, [pc, #132]	; (800c1d4 <UART_Start_Receive_IT+0x164>)
 800c150:	669a      	str	r2, [r3, #104]	; 0x68
=======
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	4a21      	ldr	r2, [pc, #132]	; (800c168 <UART_Start_Receive_IT+0x164>)
 800c0e4:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< Updated upstream
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d019      	beq.n	800c18e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c16e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	461a      	mov	r2, r3
 800c176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c178:	637b      	str	r3, [r7, #52]	; 0x34
 800c17a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c17e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c180:	e841 2300 	strex	r3, r2, [r1]
 800c184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1e6      	bne.n	800c15a <UART_Start_Receive_IT+0xea>
 800c18c:	e018      	b.n	800c1c0 <UART_Start_Receive_IT+0x150>
=======
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d019      	beq.n	800c122 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c10c:	637b      	str	r3, [r7, #52]	; 0x34
 800c10e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e6      	bne.n	800c0ee <UART_Start_Receive_IT+0xea>
 800c120:	e018      	b.n	800c154 <UART_Start_Receive_IT+0x150>
>>>>>>> Stashed changes
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
<<<<<<< Updated upstream
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	e853 3f00 	ldrex	r3, [r3]
 800c19a:	613b      	str	r3, [r7, #16]
   return(result);
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	f043 0320 	orr.w	r3, r3, #32
 800c1a2:	653b      	str	r3, [r7, #80]	; 0x50
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ac:	623b      	str	r3, [r7, #32]
 800c1ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b0:	69f9      	ldr	r1, [r7, #28]
 800c1b2:	6a3a      	ldr	r2, [r7, #32]
 800c1b4:	e841 2300 	strex	r3, r2, [r1]
 800c1b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1e6      	bne.n	800c18e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	375c      	adds	r7, #92	; 0x5c
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	0800cad3 	.word	0x0800cad3
 800c1d4:	0800c92b 	.word	0x0800c92b

0800c1d8 <UART_Start_Receive_DMA>:
=======
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	e853 3f00 	ldrex	r3, [r3]
 800c12e:	613b      	str	r3, [r7, #16]
   return(result);
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	f043 0320 	orr.w	r3, r3, #32
 800c136:	653b      	str	r3, [r7, #80]	; 0x50
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c140:	623b      	str	r3, [r7, #32]
 800c142:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c144:	69f9      	ldr	r1, [r7, #28]
 800c146:	6a3a      	ldr	r2, [r7, #32]
 800c148:	e841 2300 	strex	r3, r2, [r1]
 800c14c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1e6      	bne.n	800c122 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	375c      	adds	r7, #92	; 0x5c
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	0800ca67 	.word	0x0800ca67
 800c168:	0800c8bf 	.word	0x0800c8bf

0800c16c <UART_Start_Receive_DMA>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b096      	sub	sp, #88	; 0x58
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	88fa      	ldrh	r2, [r7, #6]
 800c1f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2222      	movs	r2, #34	; 0x22
 800c200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d028      	beq.n	800c25e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c210:	4a3e      	ldr	r2, [pc, #248]	; (800c30c <UART_Start_Receive_DMA+0x134>)
 800c212:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c218:	4a3d      	ldr	r2, [pc, #244]	; (800c310 <UART_Start_Receive_DMA+0x138>)
 800c21a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c220:	4a3c      	ldr	r2, [pc, #240]	; (800c314 <UART_Start_Receive_DMA+0x13c>)
 800c222:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c228:	2200      	movs	r2, #0
 800c22a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3324      	adds	r3, #36	; 0x24
 800c236:	4619      	mov	r1, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23c:	461a      	mov	r2, r3
 800c23e:	88fb      	ldrh	r3, [r7, #6]
 800c240:	f7f9 ff3b 	bl	80060ba <HAL_DMA_Start_IT>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d009      	beq.n	800c25e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2210      	movs	r2, #16
 800c24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e051      	b.n	800c302 <UART_Start_Receive_DMA+0x12a>
=======
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b096      	sub	sp, #88	; 0x58
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	4613      	mov	r3, r2
 800c178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	88fa      	ldrh	r2, [r7, #6]
 800c184:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2222      	movs	r2, #34	; 0x22
 800c194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d028      	beq.n	800c1f2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1a4:	4a3e      	ldr	r2, [pc, #248]	; (800c2a0 <UART_Start_Receive_DMA+0x134>)
 800c1a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ac:	4a3d      	ldr	r2, [pc, #244]	; (800c2a4 <UART_Start_Receive_DMA+0x138>)
 800c1ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1b4:	4a3c      	ldr	r2, [pc, #240]	; (800c2a8 <UART_Start_Receive_DMA+0x13c>)
 800c1b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1bc:	2200      	movs	r2, #0
 800c1be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3324      	adds	r3, #36	; 0x24
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	88fb      	ldrh	r3, [r7, #6]
 800c1d4:	f7f9 ff3b 	bl	800604e <HAL_DMA_Start_IT>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d009      	beq.n	800c1f2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2210      	movs	r2, #16
 800c1e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e051      	b.n	800c296 <UART_Start_Receive_DMA+0x12a>
>>>>>>> Stashed changes
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< Updated upstream
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d018      	beq.n	800c298 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c27a:	657b      	str	r3, [r7, #84]	; 0x54
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c284:	64bb      	str	r3, [r7, #72]	; 0x48
 800c286:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c288:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c28c:	e841 2300 	strex	r3, r2, [r1]
 800c290:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1e6      	bne.n	800c266 <UART_Start_Receive_DMA+0x8e>
=======
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d018      	beq.n	800c22c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c202:	e853 3f00 	ldrex	r3, [r3]
 800c206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c20e:	657b      	str	r3, [r7, #84]	; 0x54
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	461a      	mov	r2, r3
 800c216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c218:	64bb      	str	r3, [r7, #72]	; 0x48
 800c21a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c220:	e841 2300 	strex	r3, r2, [r1]
 800c224:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1e6      	bne.n	800c1fa <UART_Start_Receive_DMA+0x8e>
>>>>>>> Stashed changes
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< Updated upstream
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3308      	adds	r3, #8
 800c29e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	e853 3f00 	ldrex	r3, [r3]
 800c2a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	f043 0301 	orr.w	r3, r3, #1
 800c2ae:	653b      	str	r3, [r7, #80]	; 0x50
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2b8:	637a      	str	r2, [r7, #52]	; 0x34
 800c2ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2c0:	e841 2300 	strex	r3, r2, [r1]
 800c2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1e5      	bne.n	800c298 <UART_Start_Receive_DMA+0xc0>
=======
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	3308      	adds	r3, #8
 800c232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c236:	e853 3f00 	ldrex	r3, [r3]
 800c23a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	f043 0301 	orr.w	r3, r3, #1
 800c242:	653b      	str	r3, [r7, #80]	; 0x50
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3308      	adds	r3, #8
 800c24a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c24c:	637a      	str	r2, [r7, #52]	; 0x34
 800c24e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c254:	e841 2300 	strex	r3, r2, [r1]
 800c258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e5      	bne.n	800c22c <UART_Start_Receive_DMA+0xc0>
>>>>>>> Stashed changes

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	e853 3f00 	ldrex	r3, [r3]
 800c2da:	613b      	str	r3, [r7, #16]
   return(result);
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2ec:	623a      	str	r2, [r7, #32]
 800c2ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	69f9      	ldr	r1, [r7, #28]
 800c2f2:	6a3a      	ldr	r2, [r7, #32]
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e5      	bne.n	800c2cc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3758      	adds	r7, #88	; 0x58
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	0800c4dd 	.word	0x0800c4dd
 800c310:	0800c603 	.word	0x0800c603
 800c314:	0800c641 	.word	0x0800c641

0800c318 <UART_EndTxTransfer>:
=======
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	3308      	adds	r3, #8
 800c266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	613b      	str	r3, [r7, #16]
   return(result);
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c276:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3308      	adds	r3, #8
 800c27e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c280:	623a      	str	r2, [r7, #32]
 800c282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	69f9      	ldr	r1, [r7, #28]
 800c286:	6a3a      	ldr	r2, [r7, #32]
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e5      	bne.n	800c260 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3758      	adds	r7, #88	; 0x58
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	0800c471 	.word	0x0800c471
 800c2a4:	0800c597 	.word	0x0800c597
 800c2a8:	0800c5d5 	.word	0x0800c5d5

0800c2ac <UART_EndTxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800c318:	b480      	push	{r7}
 800c31a:	b089      	sub	sp, #36	; 0x24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	e853 3f00 	ldrex	r3, [r3]
 800c32c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	61bb      	str	r3, [r7, #24]
 800c340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c342:	6979      	ldr	r1, [r7, #20]
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	e841 2300 	strex	r3, r2, [r1]
 800c34a:	613b      	str	r3, [r7, #16]
   return(result);
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1e6      	bne.n	800c320 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2220      	movs	r2, #32
 800c356:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c358:	bf00      	nop
 800c35a:	3724      	adds	r7, #36	; 0x24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <UART_EndRxTransfer>:
=======
 800c2ac:	b480      	push	{r7}
 800c2ae:	b089      	sub	sp, #36	; 0x24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	e853 3f00 	ldrex	r3, [r3]
 800c2c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c2c8:	61fb      	str	r3, [r7, #28]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	61bb      	str	r3, [r7, #24]
 800c2d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d6:	6979      	ldr	r1, [r7, #20]
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	e841 2300 	strex	r3, r2, [r1]
 800c2de:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1e6      	bne.n	800c2b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c2ec:	bf00      	nop
 800c2ee:	3724      	adds	r7, #36	; 0x24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800c364:	b480      	push	{r7}
 800c366:	b095      	sub	sp, #84	; 0x54
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c374:	e853 3f00 	ldrex	r3, [r3]
 800c378:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c380:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c38a:	643b      	str	r3, [r7, #64]	; 0x40
 800c38c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c390:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c392:	e841 2300 	strex	r3, r2, [r1]
 800c396:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1e6      	bne.n	800c36c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	e853 3f00 	ldrex	r3, [r3]
 800c3ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	f023 0301 	bic.w	r3, r3, #1
 800c3b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3c6:	e841 2300 	strex	r3, r2, [r1]
 800c3ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e5      	bne.n	800c39e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d118      	bne.n	800c40c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f023 0310 	bic.w	r3, r3, #16
 800c3ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3f8:	61bb      	str	r3, [r7, #24]
 800c3fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fc:	6979      	ldr	r1, [r7, #20]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	613b      	str	r3, [r7, #16]
   return(result);
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e6      	bne.n	800c3da <UART_EndRxTransfer+0x76>
=======
 800c2f8:	b480      	push	{r7}
 800c2fa:	b095      	sub	sp, #84	; 0x54
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c308:	e853 3f00 	ldrex	r3, [r3]
 800c30c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c314:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c31e:	643b      	str	r3, [r7, #64]	; 0x40
 800c320:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e6      	bne.n	800c300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3308      	adds	r3, #8
 800c338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	e853 3f00 	ldrex	r3, [r3]
 800c340:	61fb      	str	r3, [r7, #28]
   return(result);
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	f023 0301 	bic.w	r3, r3, #1
 800c348:	64bb      	str	r3, [r7, #72]	; 0x48
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3308      	adds	r3, #8
 800c350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c352:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c35a:	e841 2300 	strex	r3, r2, [r1]
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e5      	bne.n	800c332 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d118      	bne.n	800c3a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	e853 3f00 	ldrex	r3, [r3]
 800c37a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	f023 0310 	bic.w	r3, r3, #16
 800c382:	647b      	str	r3, [r7, #68]	; 0x44
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
 800c38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c38c:	61bb      	str	r3, [r7, #24]
 800c38e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c390:	6979      	ldr	r1, [r7, #20]
 800c392:	69ba      	ldr	r2, [r7, #24]
 800c394:	e841 2300 	strex	r3, r2, [r1]
 800c398:	613b      	str	r3, [r7, #16]
   return(result);
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e6      	bne.n	800c36e <UART_EndRxTransfer+0x76>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2220      	movs	r2, #32
 800c410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c420:	bf00      	nop
 800c422:	3754      	adds	r7, #84	; 0x54
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <UART_DMATransmitCplt>:
=======
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2220      	movs	r2, #32
 800c3a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c3b4:	bf00      	nop
 800c3b6:	3754      	adds	r7, #84	; 0x54
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <UART_DMATransmitCplt>:
>>>>>>> Stashed changes
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b090      	sub	sp, #64	; 0x40
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d037      	beq.n	800c4b2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800c442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c444:	2200      	movs	r2, #0
 800c446:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b090      	sub	sp, #64	; 0x40
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	2b20      	cmp	r3, #32
 800c3d4:	d037      	beq.n	800c446 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800c3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> Stashed changes

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< Updated upstream
 800c44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3308      	adds	r3, #8
 800c450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	623b      	str	r3, [r7, #32]
   return(result);
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c460:	63bb      	str	r3, [r7, #56]	; 0x38
 800c462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3308      	adds	r3, #8
 800c468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c46a:	633a      	str	r2, [r7, #48]	; 0x30
 800c46c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e5      	bne.n	800c44a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	e853 3f00 	ldrex	r3, [r3]
 800c48a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c492:	637b      	str	r3, [r7, #52]	; 0x34
 800c494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49c:	61fb      	str	r3, [r7, #28]
 800c49e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a0:	69b9      	ldr	r1, [r7, #24]
 800c4a2:	69fa      	ldr	r2, [r7, #28]
 800c4a4:	e841 2300 	strex	r3, r2, [r1]
 800c4a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e6      	bne.n	800c47e <UART_DMATransmitCplt+0x52>
=======
 800c3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3308      	adds	r3, #8
 800c3e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	e853 3f00 	ldrex	r3, [r3]
 800c3ec:	623b      	str	r3, [r7, #32]
   return(result);
 800c3ee:	6a3b      	ldr	r3, [r7, #32]
 800c3f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3fe:	633a      	str	r2, [r7, #48]	; 0x30
 800c400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c406:	e841 2300 	strex	r3, r2, [r1]
 800c40a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1e5      	bne.n	800c3de <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	e853 3f00 	ldrex	r3, [r3]
 800c41e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c426:	637b      	str	r3, [r7, #52]	; 0x34
 800c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	461a      	mov	r2, r3
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c430:	61fb      	str	r3, [r7, #28]
 800c432:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c434:	69b9      	ldr	r1, [r7, #24]
 800c436:	69fa      	ldr	r2, [r7, #28]
 800c438:	e841 2300 	strex	r3, r2, [r1]
 800c43c:	617b      	str	r3, [r7, #20]
   return(result);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1e6      	bne.n	800c412 <UART_DMATransmitCplt+0x52>
>>>>>>> Stashed changes
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 800c4b0:	e002      	b.n	800c4b8 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800c4b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c4b4:	f7f5 fe0a 	bl	80020cc <HAL_UART_TxCpltCallback>
}
 800c4b8:	bf00      	nop
 800c4ba:	3740      	adds	r7, #64	; 0x40
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <UART_DMATxHalfCplt>:
=======
 800c444:	e002      	b.n	800c44c <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800c446:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c448:	f7f5 fe46 	bl	80020d8 <HAL_UART_TxCpltCallback>
}
 800c44c:	bf00      	nop
 800c44e:	3740      	adds	r7, #64	; 0x40
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <UART_DMATxHalfCplt>:
>>>>>>> Stashed changes
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4cc:	60fb      	str	r3, [r7, #12]
=======
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
<<<<<<< Updated upstream
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7ff fa0a 	bl	800b8e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <UART_DMAReceiveCplt>:
=======
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f7ff fa0a 	bl	800b87c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c468:	bf00      	nop
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <UART_DMAReceiveCplt>:
>>>>>>> Stashed changes
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b09c      	sub	sp, #112	; 0x70
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	2b20      	cmp	r3, #32
 800c4f0:	d071      	beq.n	800c5d6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c502:	e853 3f00 	ldrex	r3, [r3]
 800c506:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c50a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c50e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c518:	65bb      	str	r3, [r7, #88]	; 0x58
 800c51a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c51e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c520:	e841 2300 	strex	r3, r2, [r1]
 800c524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e6      	bne.n	800c4fa <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3308      	adds	r3, #8
 800c532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	e853 3f00 	ldrex	r3, [r3]
 800c53a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53e:	f023 0301 	bic.w	r3, r3, #1
 800c542:	667b      	str	r3, [r7, #100]	; 0x64
 800c544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3308      	adds	r3, #8
 800c54a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c54c:	647a      	str	r2, [r7, #68]	; 0x44
 800c54e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c550:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c554:	e841 2300 	strex	r3, r2, [r1]
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1e5      	bne.n	800c52c <UART_DMAReceiveCplt+0x50>
=======
 800c470:	b580      	push	{r7, lr}
 800c472:	b09c      	sub	sp, #112	; 0x70
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	2b20      	cmp	r3, #32
 800c484:	d071      	beq.n	800c56a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c488:	2200      	movs	r2, #0
 800c48a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c48e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c496:	e853 3f00 	ldrex	r3, [r3]
 800c49a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c49e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4b4:	e841 2300 	strex	r3, r2, [r1]
 800c4b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e6      	bne.n	800c48e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ca:	e853 3f00 	ldrex	r3, [r3]
 800c4ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d2:	f023 0301 	bic.w	r3, r3, #1
 800c4d6:	667b      	str	r3, [r7, #100]	; 0x64
 800c4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3308      	adds	r3, #8
 800c4de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c4e0:	647a      	str	r2, [r7, #68]	; 0x44
 800c4e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4e8:	e841 2300 	strex	r3, r2, [r1]
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1e5      	bne.n	800c4c0 <UART_DMAReceiveCplt+0x50>
>>>>>>> Stashed changes

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 800c560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3308      	adds	r3, #8
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	e853 3f00 	ldrex	r3, [r3]
 800c56e:	623b      	str	r3, [r7, #32]
   return(result);
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c576:	663b      	str	r3, [r7, #96]	; 0x60
 800c578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3308      	adds	r3, #8
 800c57e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c580:	633a      	str	r2, [r7, #48]	; 0x30
 800c582:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c588:	e841 2300 	strex	r3, r2, [r1]
 800c58c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1e5      	bne.n	800c560 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c596:	2220      	movs	r2, #32
 800c598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c59c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c59e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d118      	bne.n	800c5d6 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	e853 3f00 	ldrex	r3, [r3]
 800c5b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f023 0310 	bic.w	r3, r3, #16
 800c5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5c2:	61fb      	str	r3, [r7, #28]
 800c5c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	69b9      	ldr	r1, [r7, #24]
 800c5c8:	69fa      	ldr	r2, [r7, #28]
 800c5ca:	e841 2300 	strex	r3, r2, [r1]
 800c5ce:	617b      	str	r3, [r7, #20]
   return(result);
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e6      	bne.n	800c5a4 <UART_DMAReceiveCplt+0xc8>
=======
 800c4f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	623b      	str	r3, [r7, #32]
   return(result);
 800c504:	6a3b      	ldr	r3, [r7, #32]
 800c506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c50a:	663b      	str	r3, [r7, #96]	; 0x60
 800c50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3308      	adds	r3, #8
 800c512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c514:	633a      	str	r2, [r7, #48]	; 0x30
 800c516:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e5      	bne.n	800c4f4 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c52a:	2220      	movs	r2, #32
 800c52c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c534:	2b01      	cmp	r3, #1
 800c536:	d118      	bne.n	800c56a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	e853 3f00 	ldrex	r3, [r3]
 800c544:	60fb      	str	r3, [r7, #12]
   return(result);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f023 0310 	bic.w	r3, r3, #16
 800c54c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c54e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c556:	61fb      	str	r3, [r7, #28]
 800c558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55a:	69b9      	ldr	r1, [r7, #24]
 800c55c:	69fa      	ldr	r2, [r7, #28]
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	617b      	str	r3, [r7, #20]
   return(result);
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e6      	bne.n	800c538 <UART_DMAReceiveCplt+0xc8>
>>>>>>> Stashed changes
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
<<<<<<< Updated upstream
 800c5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5d8:	2200      	movs	r2, #0
 800c5da:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800c56a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c56c:	2200      	movs	r2, #0
 800c56e:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800c5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d107      	bne.n	800c5f4 <UART_DMAReceiveCplt+0x118>
=======
 800c570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c574:	2b01      	cmp	r3, #1
 800c576:	d107      	bne.n	800c588 <UART_DMAReceiveCplt+0x118>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 800c5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c5ee:	f7ff f9ad 	bl	800b94c <HAL_UARTEx_RxEventCallback>
=======
 800c578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c57a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c57e:	4619      	mov	r1, r3
 800c580:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c582:	f7ff f9ad 	bl	800b8e0 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 800c5f2:	e002      	b.n	800c5fa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c5f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c5f6:	f7f5 fda1 	bl	800213c <HAL_UART_RxCpltCallback>
}
 800c5fa:	bf00      	nop
 800c5fc:	3770      	adds	r7, #112	; 0x70
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <UART_DMARxHalfCplt>:
=======
 800c586:	e002      	b.n	800c58e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c588:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c58a:	f7f5 fddd 	bl	8002148 <HAL_UART_RxCpltCallback>
}
 800c58e:	bf00      	nop
 800c590:	3770      	adds	r7, #112	; 0x70
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <UART_DMARxHalfCplt>:
>>>>>>> Stashed changes
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60e:	60fb      	str	r3, [r7, #12]
=======
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
<<<<<<< Updated upstream
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2201      	movs	r2, #1
 800c614:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d109      	bne.n	800c632 <UART_DMARxHalfCplt+0x30>
=======
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d109      	bne.n	800c5c6 <UART_DMARxHalfCplt+0x30>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
<<<<<<< Updated upstream
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c624:	085b      	lsrs	r3, r3, #1
 800c626:	b29b      	uxth	r3, r3
 800c628:	4619      	mov	r1, r3
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff f98e 	bl	800b94c <HAL_UARTEx_RxEventCallback>
=======
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c5b8:	085b      	lsrs	r3, r3, #1
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	4619      	mov	r1, r3
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f7ff f98e 	bl	800b8e0 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 800c630:	e002      	b.n	800c638 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff f962 	bl	800b8fc <HAL_UART_RxHalfCpltCallback>
}
 800c638:	bf00      	nop
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <UART_DMAError>:
=======
 800c5c4:	e002      	b.n	800c5cc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f7ff f962 	bl	800b890 <HAL_UART_RxHalfCpltCallback>
}
 800c5cc:	bf00      	nop
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <UART_DMAError>:
>>>>>>> Stashed changes
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c652:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c666:	2b80      	cmp	r3, #128	; 0x80
 800c668:	d109      	bne.n	800c67e <UART_DMAError+0x3e>
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2b21      	cmp	r3, #33	; 0x21
 800c66e:	d106      	bne.n	800c67e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2200      	movs	r2, #0
 800c674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c678:	6978      	ldr	r0, [r7, #20]
 800c67a:	f7ff fe4d 	bl	800c318 <UART_EndTxTransfer>
=======
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5fa:	2b80      	cmp	r3, #128	; 0x80
 800c5fc:	d109      	bne.n	800c612 <UART_DMAError+0x3e>
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	2b21      	cmp	r3, #33	; 0x21
 800c602:	d106      	bne.n	800c612 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	2200      	movs	r2, #0
 800c608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c60c:	6978      	ldr	r0, [r7, #20]
 800c60e:	f7ff fe4d 	bl	800c2ac <UART_EndTxTransfer>
>>>>>>> Stashed changes
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< Updated upstream
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c688:	2b40      	cmp	r3, #64	; 0x40
 800c68a:	d109      	bne.n	800c6a0 <UART_DMAError+0x60>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b22      	cmp	r3, #34	; 0x22
 800c690:	d106      	bne.n	800c6a0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	2200      	movs	r2, #0
 800c696:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c69a:	6978      	ldr	r0, [r7, #20]
 800c69c:	f7ff fe62 	bl	800c364 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6a6:	f043 0210 	orr.w	r2, r3, #16
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61c:	2b40      	cmp	r3, #64	; 0x40
 800c61e:	d109      	bne.n	800c634 <UART_DMAError+0x60>
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b22      	cmp	r3, #34	; 0x22
 800c624:	d106      	bne.n	800c634 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2200      	movs	r2, #0
 800c62a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f7ff fe62 	bl	800c2f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c63a:	f043 0210 	orr.w	r2, r3, #16
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800c6b0:	6978      	ldr	r0, [r7, #20]
 800c6b2:	f7ff f92d 	bl	800b910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6b6:	bf00      	nop
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <UART_DMAAbortOnError>:
=======
 800c644:	6978      	ldr	r0, [r7, #20]
 800c646:	f7ff f92d 	bl	800b8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c64a:	bf00      	nop
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2200      	movs	r2, #0
 800c664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f7ff f917 	bl	800b910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6e2:	bf00      	nop
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <UART_DMATxOnlyAbortCallback>:
=======
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f7ff f917 	bl	800b8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <UART_DMATxOnlyAbortCallback>:
>>>>>>> Stashed changes
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b084      	sub	sp, #16
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> Stashed changes


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2220      	movs	r2, #32
 800c704:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2220      	movs	r2, #32
 800c698:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
<<<<<<< Updated upstream
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7ff f90c 	bl	800b924 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c70c:	bf00      	nop
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <UART_DMARxOnlyAbortCallback>:
=======
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f7ff f90c 	bl	800b8b8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6a0:	bf00      	nop
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <UART_DMARxOnlyAbortCallback>:
>>>>>>> Stashed changes
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	220f      	movs	r2, #15
 800c730:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	699a      	ldr	r2, [r3, #24]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f042 0208 	orr.w	r2, r2, #8
 800c740:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2220      	movs	r2, #32
 800c746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	661a      	str	r2, [r3, #96]	; 0x60
=======
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	220f      	movs	r2, #15
 800c6c4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	699a      	ldr	r2, [r3, #24]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f042 0208 	orr.w	r2, r2, #8
 800c6d4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2220      	movs	r2, #32
 800c6da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< Updated upstream
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7ff f8f1 	bl	800b938 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c756:	bf00      	nop
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <UART_TxISR_8BIT>:
=======
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f7ff f8f1 	bl	800b8cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ea:	bf00      	nop
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <UART_TxISR_8BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800c75e:	b480      	push	{r7}
 800c760:	b08f      	sub	sp, #60	; 0x3c
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c76a:	2b21      	cmp	r3, #33	; 0x21
 800c76c:	d14d      	bne.n	800c80a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c774:	b29b      	uxth	r3, r3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d132      	bne.n	800c7e0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	e853 3f00 	ldrex	r3, [r3]
 800c786:	61fb      	str	r3, [r7, #28]
   return(result);
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c78e:	637b      	str	r3, [r7, #52]	; 0x34
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	461a      	mov	r2, r3
 800c796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c79a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c79e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7a0:	e841 2300 	strex	r3, r2, [r1]
 800c7a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1e6      	bne.n	800c77a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	e853 3f00 	ldrex	r3, [r3]
 800c7b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c0:	633b      	str	r3, [r7, #48]	; 0x30
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	61bb      	str	r3, [r7, #24]
 800c7cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ce:	6979      	ldr	r1, [r7, #20]
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	e841 2300 	strex	r3, r2, [r1]
 800c7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1e6      	bne.n	800c7ac <UART_TxISR_8BIT+0x4e>
=======
 800c6f2:	b480      	push	{r7}
 800c6f4:	b08f      	sub	sp, #60	; 0x3c
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6fe:	2b21      	cmp	r3, #33	; 0x21
 800c700:	d14d      	bne.n	800c79e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c708:	b29b      	uxth	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d132      	bne.n	800c774 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c72e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e6      	bne.n	800c70e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c754:	633b      	str	r3, [r7, #48]	; 0x30
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	61bb      	str	r3, [r7, #24]
 800c760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c762:	6979      	ldr	r1, [r7, #20]
 800c764:	69ba      	ldr	r2, [r7, #24]
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	613b      	str	r3, [r7, #16]
   return(result);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e6      	bne.n	800c740 <UART_TxISR_8BIT+0x4e>
>>>>>>> Stashed changes
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
 800c7de:	e014      	b.n	800c80a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7e4:	781a      	ldrb	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	b292      	uxth	r2, r2
 800c7ec:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	3b01      	subs	r3, #1
 800c802:	b29a      	uxth	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c80a:	bf00      	nop
 800c80c:	373c      	adds	r7, #60	; 0x3c
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <UART_TxISR_16BIT>:
=======
 800c772:	e014      	b.n	800c79e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	b292      	uxth	r2, r2
 800c780:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c792:	b29b      	uxth	r3, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c79e:	bf00      	nop
 800c7a0:	373c      	adds	r7, #60	; 0x3c
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <UART_TxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800c816:	b480      	push	{r7}
 800c818:	b091      	sub	sp, #68	; 0x44
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
=======
 800c7aa:	b480      	push	{r7}
 800c7ac:	b091      	sub	sp, #68	; 0x44
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c822:	2b21      	cmp	r3, #33	; 0x21
 800c824:	d151      	bne.n	800c8ca <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d132      	bne.n	800c898 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	e853 3f00 	ldrex	r3, [r3]
 800c83e:	623b      	str	r3, [r7, #32]
   return(result);
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c846:	63bb      	str	r3, [r7, #56]	; 0x38
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	461a      	mov	r2, r3
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	633b      	str	r3, [r7, #48]	; 0x30
 800c852:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c858:	e841 2300 	strex	r3, r2, [r1]
 800c85c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1e6      	bne.n	800c832 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	60fb      	str	r3, [r7, #12]
   return(result);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c886:	69b9      	ldr	r1, [r7, #24]
 800c888:	69fa      	ldr	r2, [r7, #28]
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	617b      	str	r3, [r7, #20]
   return(result);
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e6      	bne.n	800c864 <UART_TxISR_16BIT+0x4e>
=======
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b6:	2b21      	cmp	r3, #33	; 0x21
 800c7b8:	d151      	bne.n	800c85e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d132      	bne.n	800c82c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	e853 3f00 	ldrex	r3, [r3]
 800c7d2:	623b      	str	r3, [r7, #32]
   return(result);
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7da:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	633b      	str	r3, [r7, #48]	; 0x30
 800c7e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ec:	e841 2300 	strex	r3, r2, [r1]
 800c7f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1e6      	bne.n	800c7c6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	e853 3f00 	ldrex	r3, [r3]
 800c804:	60fb      	str	r3, [r7, #12]
   return(result);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c80c:	637b      	str	r3, [r7, #52]	; 0x34
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c816:	61fb      	str	r3, [r7, #28]
 800c818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81a:	69b9      	ldr	r1, [r7, #24]
 800c81c:	69fa      	ldr	r2, [r7, #28]
 800c81e:	e841 2300 	strex	r3, r2, [r1]
 800c822:	617b      	str	r3, [r7, #20]
   return(result);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1e6      	bne.n	800c7f8 <UART_TxISR_16BIT+0x4e>
>>>>>>> Stashed changes
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
 800c896:	e018      	b.n	800c8ca <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a0:	881a      	ldrh	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8aa:	b292      	uxth	r2, r2
 800c8ac:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8b2:	1c9a      	adds	r2, r3, #2
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c8ca:	bf00      	nop
 800c8cc:	3744      	adds	r7, #68	; 0x44
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr

0800c8d6 <UART_EndTransmit_IT>:
=======
 800c82a:	e018      	b.n	800c85e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c830:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c834:	881a      	ldrh	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c83e:	b292      	uxth	r2, r2
 800c840:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c846:	1c9a      	adds	r2, r3, #2
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c852:	b29b      	uxth	r3, r3
 800c854:	3b01      	subs	r3, #1
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c85e:	bf00      	nop
 800c860:	3744      	adds	r7, #68	; 0x44
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b088      	sub	sp, #32
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	e853 3f00 	ldrex	r3, [r3]
 800c8ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8f2:	61fb      	str	r3, [r7, #28]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	61bb      	str	r3, [r7, #24]
 800c8fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c900:	6979      	ldr	r1, [r7, #20]
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	e841 2300 	strex	r3, r2, [r1]
 800c908:	613b      	str	r3, [r7, #16]
   return(result);
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d1e6      	bne.n	800c8de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2220      	movs	r2, #32
 800c914:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b088      	sub	sp, #32
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	e853 3f00 	ldrex	r3, [r3]
 800c87e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c886:	61fb      	str	r3, [r7, #28]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	461a      	mov	r2, r3
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	61bb      	str	r3, [r7, #24]
 800c892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c894:	6979      	ldr	r1, [r7, #20]
 800c896:	69ba      	ldr	r2, [r7, #24]
 800c898:	e841 2300 	strex	r3, r2, [r1]
 800c89c:	613b      	str	r3, [r7, #16]
   return(result);
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e6      	bne.n	800c872 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7f5 fbd5 	bl	80020cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c922:	bf00      	nop
 800c924:	3720      	adds	r7, #32
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <UART_RxISR_8BIT>:
=======
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7f5 fc11 	bl	80020d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8b6:	bf00      	nop
 800c8b8:	3720      	adds	r7, #32
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <UART_RxISR_8BIT>:
>>>>>>> Stashed changes
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b09c      	sub	sp, #112	; 0x70
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c938:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b09c      	sub	sp, #112	; 0x70
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8cc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c942:	2b22      	cmp	r3, #34	; 0x22
 800c944:	f040 80b9 	bne.w	800caba <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c94e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c952:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c956:	b2d9      	uxtb	r1, r3
 800c958:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c962:	400a      	ands	r2, r1
 800c964:	b2d2      	uxtb	r2, r2
 800c966:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c978:	b29b      	uxth	r3, r3
 800c97a:	3b01      	subs	r3, #1
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f040 809c 	bne.w	800caca <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99a:	e853 3f00 	ldrex	r3, [r3]
 800c99e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9b8:	e841 2300 	strex	r3, r2, [r1]
 800c9bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1e6      	bne.n	800c992 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	e853 3f00 	ldrex	r3, [r3]
 800c9d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d6:	f023 0301 	bic.w	r3, r3, #1
 800c9da:	667b      	str	r3, [r7, #100]	; 0x64
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c9e4:	647a      	str	r2, [r7, #68]	; 0x44
 800c9e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9ec:	e841 2300 	strex	r3, r2, [r1]
 800c9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1e5      	bne.n	800c9c4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d018      	beq.n	800ca4c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	e853 3f00 	ldrex	r3, [r3]
 800ca26:	623b      	str	r3, [r7, #32]
   return(result);
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca2e:	663b      	str	r3, [r7, #96]	; 0x60
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	461a      	mov	r2, r3
 800ca36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca38:	633b      	str	r3, [r7, #48]	; 0x30
 800ca3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca40:	e841 2300 	strex	r3, r2, [r1]
 800ca44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1e6      	bne.n	800ca1a <UART_RxISR_8BIT+0xf0>
=======
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8d6:	2b22      	cmp	r3, #34	; 0x22
 800c8d8:	f040 80b9 	bne.w	800ca4e <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c8e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c8e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c8ea:	b2d9      	uxtb	r1, r3
 800c8ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f6:	400a      	ands	r2, r1
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	3b01      	subs	r3, #1
 800c910:	b29a      	uxth	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c91e:	b29b      	uxth	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	f040 809c 	bne.w	800ca5e <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c92e:	e853 3f00 	ldrex	r3, [r3]
 800c932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c93a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	461a      	mov	r2, r3
 800c942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c944:	65bb      	str	r3, [r7, #88]	; 0x58
 800c946:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c94a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c94c:	e841 2300 	strex	r3, r2, [r1]
 800c950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1e6      	bne.n	800c926 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3308      	adds	r3, #8
 800c95e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c962:	e853 3f00 	ldrex	r3, [r3]
 800c966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96a:	f023 0301 	bic.w	r3, r3, #1
 800c96e:	667b      	str	r3, [r7, #100]	; 0x64
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3308      	adds	r3, #8
 800c976:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c978:	647a      	str	r2, [r7, #68]	; 0x44
 800c97a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c97e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c980:	e841 2300 	strex	r3, r2, [r1]
 800c984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1e5      	bne.n	800c958 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2220      	movs	r2, #32
 800c990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d018      	beq.n	800c9e0 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	e853 3f00 	ldrex	r3, [r3]
 800c9ba:	623b      	str	r3, [r7, #32]
   return(result);
 800c9bc:	6a3b      	ldr	r3, [r7, #32]
 800c9be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9c2:	663b      	str	r3, [r7, #96]	; 0x60
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9cc:	633b      	str	r3, [r7, #48]	; 0x30
 800c9ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d4:	e841 2300 	strex	r3, r2, [r1]
 800c9d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1e6      	bne.n	800c9ae <UART_RxISR_8BIT+0xf0>
>>>>>>> Stashed changes
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d12e      	bne.n	800cab2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f023 0310 	bic.w	r3, r3, #16
 800ca6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	461a      	mov	r2, r3
 800ca76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca78:	61fb      	str	r3, [r7, #28]
 800ca7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7c:	69b9      	ldr	r1, [r7, #24]
 800ca7e:	69fa      	ldr	r2, [r7, #28]
 800ca80:	e841 2300 	strex	r3, r2, [r1]
 800ca84:	617b      	str	r3, [r7, #20]
   return(result);
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1e6      	bne.n	800ca5a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	f003 0310 	and.w	r3, r3, #16
 800ca96:	2b10      	cmp	r3, #16
 800ca98:	d103      	bne.n	800caa2 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2210      	movs	r2, #16
 800caa0:	621a      	str	r2, [r3, #32]
=======
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d12e      	bne.n	800ca46 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	e853 3f00 	ldrex	r3, [r3]
 800c9fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f023 0310 	bic.w	r3, r3, #16
 800ca02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca0c:	61fb      	str	r3, [r7, #28]
 800ca0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca10:	69b9      	ldr	r1, [r7, #24]
 800ca12:	69fa      	ldr	r2, [r7, #28]
 800ca14:	e841 2300 	strex	r3, r2, [r1]
 800ca18:	617b      	str	r3, [r7, #20]
   return(result);
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1e6      	bne.n	800c9ee <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	69db      	ldr	r3, [r3, #28]
 800ca26:	f003 0310 	and.w	r3, r3, #16
 800ca2a:	2b10      	cmp	r3, #16
 800ca2c:	d103      	bne.n	800ca36 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2210      	movs	r2, #16
 800ca34:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7fe ff4e 	bl	800b94c <HAL_UARTEx_RxEventCallback>
=======
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7fe ff4e 	bl	800b8e0 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 800cab0:	e00b      	b.n	800caca <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f5 fb42 	bl	800213c <HAL_UART_RxCpltCallback>
}
 800cab8:	e007      	b.n	800caca <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	699a      	ldr	r2, [r3, #24]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f042 0208 	orr.w	r2, r2, #8
 800cac8:	619a      	str	r2, [r3, #24]
}
 800caca:	bf00      	nop
 800cacc:	3770      	adds	r7, #112	; 0x70
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <UART_RxISR_16BIT>:
=======
 800ca44:	e00b      	b.n	800ca5e <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7f5 fb7e 	bl	8002148 <HAL_UART_RxCpltCallback>
}
 800ca4c:	e007      	b.n	800ca5e <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	699a      	ldr	r2, [r3, #24]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f042 0208 	orr.w	r2, r2, #8
 800ca5c:	619a      	str	r2, [r3, #24]
}
 800ca5e:	bf00      	nop
 800ca60:	3770      	adds	r7, #112	; 0x70
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <UART_RxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b09c      	sub	sp, #112	; 0x70
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cae0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b09c      	sub	sp, #112	; 0x70
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca74:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caea:	2b22      	cmp	r3, #34	; 0x22
 800caec:	f040 80b9 	bne.w	800cc62 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800caf6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafe:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cb00:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800cb04:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cb08:	4013      	ands	r3, r2
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb14:	1c9a      	adds	r2, r3, #2
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	3b01      	subs	r3, #1
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f040 809c 	bne.w	800cc72 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb42:	e853 3f00 	ldrex	r3, [r3]
 800cb46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb4e:	667b      	str	r3, [r7, #100]	; 0x64
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	461a      	mov	r2, r3
 800cb56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb58:	657b      	str	r3, [r7, #84]	; 0x54
 800cb5a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb60:	e841 2300 	strex	r3, r2, [r1]
 800cb64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1e6      	bne.n	800cb3a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3308      	adds	r3, #8
 800cb72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7e:	f023 0301 	bic.w	r3, r3, #1
 800cb82:	663b      	str	r3, [r7, #96]	; 0x60
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	3308      	adds	r3, #8
 800cb8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb8c:	643a      	str	r2, [r7, #64]	; 0x40
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e5      	bne.n	800cb6c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d018      	beq.n	800cbf4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	e853 3f00 	ldrex	r3, [r3]
 800cbce:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cbd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbe2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbe8:	e841 2300 	strex	r3, r2, [r1]
 800cbec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1e6      	bne.n	800cbc2 <UART_RxISR_16BIT+0xf0>
=======
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca7e:	2b22      	cmp	r3, #34	; 0x22
 800ca80:	f040 80b9 	bne.w	800cbf6 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ca8a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca92:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ca94:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ca98:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caa2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa8:	1c9a      	adds	r2, r3, #2
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	3b01      	subs	r3, #1
 800cab8:	b29a      	uxth	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f040 809c 	bne.w	800cc06 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cad6:	e853 3f00 	ldrex	r3, [r3]
 800cada:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cadc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cae2:	667b      	str	r3, [r7, #100]	; 0x64
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	461a      	mov	r2, r3
 800caea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caec:	657b      	str	r3, [r7, #84]	; 0x54
 800caee:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800caf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e6      	bne.n	800cace <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3308      	adds	r3, #8
 800cb06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb12:	f023 0301 	bic.w	r3, r3, #1
 800cb16:	663b      	str	r3, [r7, #96]	; 0x60
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb20:	643a      	str	r2, [r7, #64]	; 0x40
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e5      	bne.n	800cb00 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2220      	movs	r2, #32
 800cb38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d018      	beq.n	800cb88 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	e853 3f00 	ldrex	r3, [r3]
 800cb62:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	461a      	mov	r2, r3
 800cb72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb76:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e6      	bne.n	800cb56 <UART_RxISR_16BIT+0xf0>
>>>>>>> Stashed changes
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d12e      	bne.n	800cc5a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	e853 3f00 	ldrex	r3, [r3]
 800cc0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	f023 0310 	bic.w	r3, r3, #16
 800cc16:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc20:	61bb      	str	r3, [r7, #24]
 800cc22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc24:	6979      	ldr	r1, [r7, #20]
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	e841 2300 	strex	r3, r2, [r1]
 800cc2c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e6      	bne.n	800cc02 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	f003 0310 	and.w	r3, r3, #16
 800cc3e:	2b10      	cmp	r3, #16
 800cc40:	d103      	bne.n	800cc4a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2210      	movs	r2, #16
 800cc48:	621a      	str	r2, [r3, #32]
=======
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d12e      	bne.n	800cbee <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	f023 0310 	bic.w	r3, r3, #16
 800cbaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbb4:	61bb      	str	r3, [r7, #24]
 800cbb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb8:	6979      	ldr	r1, [r7, #20]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	e841 2300 	strex	r3, r2, [r1]
 800cbc0:	613b      	str	r3, [r7, #16]
   return(result);
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e6      	bne.n	800cb96 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	69db      	ldr	r3, [r3, #28]
 800cbce:	f003 0310 	and.w	r3, r3, #16
 800cbd2:	2b10      	cmp	r3, #16
 800cbd4:	d103      	bne.n	800cbde <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2210      	movs	r2, #16
 800cbdc:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7fe fe7a 	bl	800b94c <HAL_UARTEx_RxEventCallback>
=======
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7fe fe7a 	bl	800b8e0 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 800cc58:	e00b      	b.n	800cc72 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f7f5 fa6e 	bl	800213c <HAL_UART_RxCpltCallback>
}
 800cc60:	e007      	b.n	800cc72 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	699a      	ldr	r2, [r3, #24]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f042 0208 	orr.w	r2, r2, #8
 800cc70:	619a      	str	r2, [r3, #24]
}
 800cc72:	bf00      	nop
 800cc74:	3770      	adds	r7, #112	; 0x70
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <HAL_UARTEx_WakeupCallback>:
=======
 800cbec:	e00b      	b.n	800cc06 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7f5 faaa 	bl	8002148 <HAL_UART_RxCpltCallback>
}
 800cbf4:	e007      	b.n	800cc06 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	699a      	ldr	r2, [r3, #24]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f042 0208 	orr.w	r2, r2, #8
 800cc04:	619a      	str	r2, [r3, #24]
}
 800cc06:	bf00      	nop
 800cc08:	3770      	adds	r7, #112	; 0x70
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800cc7a:	b480      	push	{r7}
 800cc7c:	b083      	sub	sp, #12
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
=======
 800cc0e:	b480      	push	{r7}
 800cc10:	b083      	sub	sp, #12
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800cc82:	bf00      	nop
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr

0800cc8e <makeFreeRtosPriority>:
=======
 800cc16:	bf00      	nop
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <makeFreeRtosPriority>:
>>>>>>> Stashed changes

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
<<<<<<< Updated upstream
 800cc8e:	b480      	push	{r7}
 800cc90:	b085      	sub	sp, #20
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	4603      	mov	r3, r0
 800cc96:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cc9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cca0:	2b84      	cmp	r3, #132	; 0x84
 800cca2:	d005      	beq.n	800ccb0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cca4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	3303      	adds	r3, #3
 800ccae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <inHandlerMode>:
=======
 800cc22:	b480      	push	{r7}
 800cc24:	b085      	sub	sp, #20
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	4603      	mov	r3, r0
 800cc2a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cc30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc34:	2b84      	cmp	r3, #132	; 0x84
 800cc36:	d005      	beq.n	800cc44 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cc38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	3303      	adds	r3, #3
 800cc42:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cc44:	68fb      	ldr	r3, [r7, #12]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <inHandlerMode>:
>>>>>>> Stashed changes
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
<<<<<<< Updated upstream
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccc4:	f3ef 8305 	mrs	r3, IPSR
 800ccc8:	607b      	str	r3, [r7, #4]
  return(result);
 800ccca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	bf14      	ite	ne
 800ccd0:	2301      	movne	r3, #1
 800ccd2:	2300      	moveq	r3, #0
 800ccd4:	b2db      	uxtb	r3, r3
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <osKernelStart>:
=======
 800cc52:	b480      	push	{r7}
 800cc54:	b083      	sub	sp, #12
 800cc56:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc58:	f3ef 8305 	mrs	r3, IPSR
 800cc5c:	607b      	str	r3, [r7, #4]
  return(result);
 800cc5e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bf14      	ite	ne
 800cc64:	2301      	movne	r3, #1
 800cc66:	2300      	moveq	r3, #0
 800cc68:	b2db      	uxtb	r3, r3
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	370c      	adds	r7, #12
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <osKernelStart>:
>>>>>>> Stashed changes
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< Updated upstream
 800cce2:	b580      	push	{r7, lr}
 800cce4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cce6:	f001 fa6f 	bl	800e1c8 <vTaskStartScheduler>
  
  return osOK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <osKernelSysTick>:
=======
 800cc76:	b580      	push	{r7, lr}
 800cc78:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cc7a:	f001 fa6f 	bl	800e15c <vTaskStartScheduler>
  
  return osOK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <osKernelSysTick>:
>>>>>>> Stashed changes
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
<<<<<<< Updated upstream
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ccf4:	f7ff ffe3 	bl	800ccbe <inHandlerMode>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ccfe:	f001 fb8d 	bl	800e41c <xTaskGetTickCountFromISR>
 800cd02:	4603      	mov	r3, r0
 800cd04:	e002      	b.n	800cd0c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cd06:	f001 fb79 	bl	800e3fc <xTaskGetTickCount>
 800cd0a:	4603      	mov	r3, r0
  }
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <osThreadCreate>:
=======
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cc88:	f7ff ffe3 	bl	800cc52 <inHandlerMode>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cc92:	f001 fb8d 	bl	800e3b0 <xTaskGetTickCountFromISR>
 800cc96:	4603      	mov	r3, r0
 800cc98:	e002      	b.n	800cca0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cc9a:	f001 fb79 	bl	800e390 <xTaskGetTickCount>
 800cc9e:	4603      	mov	r3, r0
  }
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <osThreadCreate>:
>>>>>>> Stashed changes
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< Updated upstream
 800cd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd12:	b089      	sub	sp, #36	; 0x24
 800cd14:	af04      	add	r7, sp, #16
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
=======
 800cca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cca6:	b089      	sub	sp, #36	; 0x24
 800cca8:	af04      	add	r7, sp, #16
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< Updated upstream
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d020      	beq.n	800cd64 <osThreadCreate+0x54>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d01c      	beq.n	800cd64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685c      	ldr	r4, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	691e      	ldr	r6, [r3, #16]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff ffa6 	bl	800cc8e <makeFreeRtosPriority>
 800cd42:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	695b      	ldr	r3, [r3, #20]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd4c:	9202      	str	r2, [sp, #8]
 800cd4e:	9301      	str	r3, [sp, #4]
 800cd50:	9100      	str	r1, [sp, #0]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	4632      	mov	r2, r6
 800cd56:	4629      	mov	r1, r5
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 ffe1 	bl	800dd20 <xTaskCreateStatic>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	60fb      	str	r3, [r7, #12]
 800cd62:	e01c      	b.n	800cd9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685c      	ldr	r4, [r3, #4]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd70:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff ff88 	bl	800cc8e <makeFreeRtosPriority>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	f107 030c 	add.w	r3, r7, #12
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	9200      	str	r2, [sp, #0]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	4632      	mov	r2, r6
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f001 f822 	bl	800ddd8 <xTaskCreate>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d001      	beq.n	800cd9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e000      	b.n	800cda0 <osThreadCreate+0x90>
=======
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d020      	beq.n	800ccf8 <osThreadCreate+0x54>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d01c      	beq.n	800ccf8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685c      	ldr	r4, [r3, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	691e      	ldr	r6, [r3, #16]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff ffa6 	bl	800cc22 <makeFreeRtosPriority>
 800ccd6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	695b      	ldr	r3, [r3, #20]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cce0:	9202      	str	r2, [sp, #8]
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	9100      	str	r1, [sp, #0]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	4632      	mov	r2, r6
 800ccea:	4629      	mov	r1, r5
 800ccec:	4620      	mov	r0, r4
 800ccee:	f000 ffe1 	bl	800dcb4 <xTaskCreateStatic>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	e01c      	b.n	800cd32 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	685c      	ldr	r4, [r3, #4]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd04:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7ff ff88 	bl	800cc22 <makeFreeRtosPriority>
 800cd12:	4602      	mov	r2, r0
 800cd14:	f107 030c 	add.w	r3, r7, #12
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	9200      	str	r2, [sp, #0]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	4632      	mov	r2, r6
 800cd20:	4629      	mov	r1, r5
 800cd22:	4620      	mov	r0, r4
 800cd24:	f001 f822 	bl	800dd6c <xTaskCreate>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d001      	beq.n	800cd32 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e000      	b.n	800cd34 <osThreadCreate+0x90>
>>>>>>> Stashed changes
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< Updated upstream
 800cd9e:	68fb      	ldr	r3, [r7, #12]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cda8 <osDelay>:
=======
 800cd32:	68fb      	ldr	r3, [r7, #12]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd3c <osDelay>:
>>>>>>> Stashed changes
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
<<<<<<< Updated upstream
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <osDelay+0x16>
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	e000      	b.n	800cdc0 <osDelay+0x18>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f001 f9cd 	bl	800e160 <vTaskDelay>
  
  return osOK;
 800cdc6:	2300      	movs	r3, #0
=======
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <osDelay+0x16>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	e000      	b.n	800cd54 <osDelay+0x18>
 800cd52:	2301      	movs	r3, #1
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 f9cd 	bl	800e0f4 <vTaskDelay>
  
  return osOK;
 800cd5a:	2300      	movs	r3, #0
>>>>>>> Stashed changes
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
<<<<<<< Updated upstream
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <osTimerCreate>:
=======
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <osTimerCreate>:
>>>>>>> Stashed changes
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
<<<<<<< Updated upstream
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af02      	add	r7, sp, #8
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	72fb      	strb	r3, [r7, #11]
=======
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af02      	add	r7, sp, #8
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	607a      	str	r2, [r7, #4]
 800cd70:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
<<<<<<< Updated upstream
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d013      	beq.n	800ce0e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800cde6:	7afb      	ldrb	r3, [r7, #11]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d101      	bne.n	800cdf0 <osTimerCreate+0x20>
 800cdec:	2101      	movs	r1, #1
 800cdee:	e000      	b.n	800cdf2 <osTimerCreate+0x22>
 800cdf0:	2100      	movs	r1, #0
=======
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d013      	beq.n	800cda2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800cd7a:	7afb      	ldrb	r3, [r7, #11]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d101      	bne.n	800cd84 <osTimerCreate+0x20>
 800cd80:	2101      	movs	r1, #1
 800cd82:	e000      	b.n	800cd86 <osTimerCreate+0x22>
 800cd84:	2100      	movs	r1, #0
>>>>>>> Stashed changes
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
<<<<<<< Updated upstream
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800cdfa:	9201      	str	r2, [sp, #4]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	460a      	mov	r2, r1
 800ce02:	2101      	movs	r1, #1
 800ce04:	480b      	ldr	r0, [pc, #44]	; (800ce34 <osTimerCreate+0x64>)
 800ce06:	f002 f8fe 	bl	800f006 <xTimerCreateStatic>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	e00e      	b.n	800ce2c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800ce0e:	7afb      	ldrb	r3, [r7, #11]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d101      	bne.n	800ce18 <osTimerCreate+0x48>
 800ce14:	2201      	movs	r2, #1
 800ce16:	e000      	b.n	800ce1a <osTimerCreate+0x4a>
 800ce18:	2200      	movs	r2, #0
=======
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800cd8e:	9201      	str	r2, [sp, #4]
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	460a      	mov	r2, r1
 800cd96:	2101      	movs	r1, #1
 800cd98:	480b      	ldr	r0, [pc, #44]	; (800cdc8 <osTimerCreate+0x64>)
 800cd9a:	f002 f8fe 	bl	800ef9a <xTimerCreateStatic>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	e00e      	b.n	800cdc0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800cda2:	7afb      	ldrb	r3, [r7, #11]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <osTimerCreate+0x48>
 800cda8:	2201      	movs	r2, #1
 800cdaa:	e000      	b.n	800cdae <osTimerCreate+0x4a>
 800cdac:	2200      	movs	r2, #0
>>>>>>> Stashed changes
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
<<<<<<< Updated upstream
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2101      	movs	r1, #1
 800ce24:	4803      	ldr	r0, [pc, #12]	; (800ce34 <osTimerCreate+0x64>)
 800ce26:	f002 f8cd 	bl	800efc4 <xTimerCreate>
 800ce2a:	4603      	mov	r3, r0
=======
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2101      	movs	r1, #1
 800cdb8:	4803      	ldr	r0, [pc, #12]	; (800cdc8 <osTimerCreate+0x64>)
 800cdba:	f002 f8cd 	bl	800ef58 <xTimerCreate>
 800cdbe:	4603      	mov	r3, r0
>>>>>>> Stashed changes
#endif

#else 
	return NULL;
#endif
}
<<<<<<< Updated upstream
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	08011980 	.word	0x08011980

0800ce38 <osMutexCreate>:
=======
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	08011910 	.word	0x08011910

0800cdcc <osMutexCreate>:
>>>>>>> Stashed changes
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
<<<<<<< Updated upstream
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
=======
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
<<<<<<< Updated upstream
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d007      	beq.n	800ce58 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	2001      	movs	r0, #1
 800ce50:	f000 fa42 	bl	800d2d8 <xQueueCreateMutexStatic>
 800ce54:	4603      	mov	r3, r0
 800ce56:	e003      	b.n	800ce60 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ce58:	2001      	movs	r0, #1
 800ce5a:	f000 fa25 	bl	800d2a8 <xQueueCreateMutex>
 800ce5e:	4603      	mov	r3, r0
=======
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d007      	beq.n	800cdec <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	4619      	mov	r1, r3
 800cde2:	2001      	movs	r0, #1
 800cde4:	f000 fa42 	bl	800d26c <xQueueCreateMutexStatic>
 800cde8:	4603      	mov	r3, r0
 800cdea:	e003      	b.n	800cdf4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cdec:	2001      	movs	r0, #1
 800cdee:	f000 fa25 	bl	800d23c <xQueueCreateMutex>
 800cdf2:	4603      	mov	r3, r0
>>>>>>> Stashed changes
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
<<<<<<< Updated upstream
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <osDelayUntil>:
=======
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <osDelayUntil>:
>>>>>>> Stashed changes
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
<<<<<<< Updated upstream
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d001      	beq.n	800ce80 <osDelayUntil+0x18>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	e000      	b.n	800ce82 <osDelayUntil+0x1a>
 800ce80:	2301      	movs	r3, #1
 800ce82:	4619      	mov	r1, r3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f001 f8ed 	bl	800e064 <vTaskDelayUntil>
  
  return osOK;
 800ce8a:	2300      	movs	r3, #0
=======
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d001      	beq.n	800ce14 <osDelayUntil+0x18>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	e000      	b.n	800ce16 <osDelayUntil+0x1a>
 800ce14:	2301      	movs	r3, #1
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f001 f8ed 	bl	800dff8 <vTaskDelayUntil>
  
  return osOK;
 800ce1e:	2300      	movs	r3, #0
>>>>>>> Stashed changes
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
<<<<<<< Updated upstream
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <vListInitialise>:
=======
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <vListInitialise>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< Updated upstream
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
=======
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f103 0208 	add.w	r2, r3, #8
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	605a      	str	r2, [r3, #4]
=======
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f103 0208 	add.w	r2, r3, #8
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< Updated upstream
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceac:	609a      	str	r2, [r3, #8]
=======
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce40:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f103 0208 	add.w	r2, r3, #8
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f103 0208 	add.w	r2, r3, #8
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]
=======
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f103 0208 	add.w	r2, r3, #8
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f103 0208 	add.w	r2, r3, #8
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< Updated upstream
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <vListInitialiseItem>:
=======
 800ce5c:	bf00      	nop
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <vListInitialiseItem>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< Updated upstream
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	611a      	str	r2, [r3, #16]
=======
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< Updated upstream
 800cee2:	bf00      	nop
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <vListInsertEnd>:
=======
 800ce76:	bf00      	nop
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <vListInsertEnd>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 800ceee:	b480      	push	{r7}
 800cef0:	b085      	sub	sp, #20
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	60fb      	str	r3, [r7, #12]
=======
 800ce82:	b480      	push	{r7}
 800ce84:	b085      	sub	sp, #20
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< Updated upstream
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	689a      	ldr	r2, [r3, #8]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	609a      	str	r2, [r3, #8]
=======
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	689a      	ldr	r2, [r3, #8]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< Updated upstream
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	601a      	str	r2, [r3, #0]
}
 800cf2a:	bf00      	nop
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <vListInsert>:
=======
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	601a      	str	r2, [r3, #0]
}
 800cebe:	bf00      	nop
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <vListInsert>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 800cf36:	b480      	push	{r7}
 800cf38:	b085      	sub	sp, #20
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	60bb      	str	r3, [r7, #8]
=======
 800ceca:	b480      	push	{r7}
 800cecc:	b085      	sub	sp, #20
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< Updated upstream
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4c:	d103      	bne.n	800cf56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	e00c      	b.n	800cf70 <vListInsert+0x3a>
=======
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee0:	d103      	bne.n	800ceea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e00c      	b.n	800cf04 <vListInsert+0x3a>
>>>>>>> Stashed changes
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	3308      	adds	r3, #8
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	e002      	b.n	800cf64 <vListInsert+0x2e>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d2f6      	bcs.n	800cf5e <vListInsert+0x28>
=======
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	3308      	adds	r3, #8
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	e002      	b.n	800cef8 <vListInsert+0x2e>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d2f6      	bcs.n	800cef2 <vListInsert+0x28>
>>>>>>> Stashed changes
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< Updated upstream
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	605a      	str	r2, [r3, #4]
=======
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
<<<<<<< Updated upstream
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	601a      	str	r2, [r3, #0]
}
 800cf9c:	bf00      	nop
 800cf9e:	3714      	adds	r7, #20
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <uxListRemove>:
=======
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	601a      	str	r2, [r3, #0]
}
 800cf30:	bf00      	nop
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <uxListRemove>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< Updated upstream
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	6892      	ldr	r2, [r2, #8]
 800cfbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	6852      	ldr	r2, [r2, #4]
 800cfc8:	605a      	str	r2, [r3, #4]
=======
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	6892      	ldr	r2, [r2, #8]
 800cf52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	6852      	ldr	r2, [r2, #4]
 800cf5c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< Updated upstream
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d103      	bne.n	800cfdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	689a      	ldr	r2, [r3, #8]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	605a      	str	r2, [r3, #4]
=======
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d103      	bne.n	800cf70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
<<<<<<< Updated upstream
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	1e5a      	subs	r2, r3, #1
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <xQueueGenericReset>:
=======
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	1e5a      	subs	r2, r3, #1
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <xQueueGenericReset>:
>>>>>>> Stashed changes
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< Updated upstream
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10a      	bne.n	800d026 <xQueueGenericReset+0x2a>
=======
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10a      	bne.n	800cfba <xQueueGenericReset+0x2a>
>>>>>>> Stashed changes

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	60bb      	str	r3, [r7, #8]
=======
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< Updated upstream
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d026:	f002 fc3d 	bl	800f8a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d032:	68f9      	ldr	r1, [r7, #12]
 800d034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d036:	fb01 f303 	mul.w	r3, r1, r3
 800d03a:	441a      	add	r2, r3
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d056:	3b01      	subs	r3, #1
 800d058:	68f9      	ldr	r1, [r7, #12]
 800d05a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d05c:	fb01 f303 	mul.w	r3, r1, r3
 800d060:	441a      	add	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	22ff      	movs	r2, #255	; 0xff
 800d06a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	22ff      	movs	r2, #255	; 0xff
 800d072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d114      	bne.n	800d0a6 <xQueueGenericReset+0xaa>
=======
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cfba:	f002 fc3b 	bl	800f834 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc6:	68f9      	ldr	r1, [r7, #12]
 800cfc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cfca:	fb01 f303 	mul.w	r3, r1, r3
 800cfce:	441a      	add	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfea:	3b01      	subs	r3, #1
 800cfec:	68f9      	ldr	r1, [r7, #12]
 800cfee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cff0:	fb01 f303 	mul.w	r3, r1, r3
 800cff4:	441a      	add	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	22ff      	movs	r2, #255	; 0xff
 800cffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	22ff      	movs	r2, #255	; 0xff
 800d006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d114      	bne.n	800d03a <xQueueGenericReset+0xaa>
>>>>>>> Stashed changes
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d01a      	beq.n	800d0ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3310      	adds	r3, #16
 800d088:	4618      	mov	r0, r3
 800d08a:	f001 fb49 	bl	800e720 <xTaskRemoveFromEventList>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d012      	beq.n	800d0ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d094:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <xQueueGenericReset+0xcc>)
 800d096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d09a:	601a      	str	r2, [r3, #0]
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	e009      	b.n	800d0ba <xQueueGenericReset+0xbe>
=======
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d01a      	beq.n	800d04e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	3310      	adds	r3, #16
 800d01c:	4618      	mov	r0, r3
 800d01e:	f001 fb49 	bl	800e6b4 <xTaskRemoveFromEventList>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d012      	beq.n	800d04e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d028:	4b0c      	ldr	r3, [pc, #48]	; (800d05c <xQueueGenericReset+0xcc>)
 800d02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	e009      	b.n	800d04e <xQueueGenericReset+0xbe>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< Updated upstream
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3310      	adds	r3, #16
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fef2 	bl	800ce94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3324      	adds	r3, #36	; 0x24
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7ff feed 	bl	800ce94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0ba:	f002 fc23 	bl	800f904 <vPortExitCritical>
=======
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3310      	adds	r3, #16
 800d03e:	4618      	mov	r0, r3
 800d040:	f7ff fef2 	bl	800ce28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3324      	adds	r3, #36	; 0x24
 800d048:	4618      	mov	r0, r3
 800d04a:	f7ff feed 	bl	800ce28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d04e:	f002 fc21 	bl	800f894 <vPortExitCritical>
>>>>>>> Stashed changes

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< Updated upstream
 800d0be:	2301      	movs	r3, #1
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	e000ed04 	.word	0xe000ed04

0800d0cc <xQueueGenericCreateStatic>:
=======
 800d052:	2301      	movs	r3, #1
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	e000ed04 	.word	0xe000ed04

0800d060 <xQueueGenericCreateStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08e      	sub	sp, #56	; 0x38
 800d0d0:	af02      	add	r7, sp, #8
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
 800d0d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <xQueueGenericCreateStatic+0x28>
=======
 800d060:	b580      	push	{r7, lr}
 800d062:	b08e      	sub	sp, #56	; 0x38
 800d064:	af02      	add	r7, sp, #8
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
 800d06c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10a      	bne.n	800d08a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d086:	bf00      	nop
 800d088:	e7fe      	b.n	800d088 <xQueueGenericCreateStatic+0x28>
>>>>>>> Stashed changes

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< Updated upstream
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d10a      	bne.n	800d112 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d100:	f383 8811 	msr	BASEPRI, r3
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d10e:	bf00      	nop
 800d110:	e7fe      	b.n	800d110 <xQueueGenericCreateStatic+0x44>
=======
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10a      	bne.n	800d0a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <xQueueGenericCreateStatic+0x44>
>>>>>>> Stashed changes

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< Updated upstream
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <xQueueGenericCreateStatic+0x52>
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <xQueueGenericCreateStatic+0x56>
 800d11e:	2301      	movs	r3, #1
 800d120:	e000      	b.n	800d124 <xQueueGenericCreateStatic+0x58>
 800d122:	2300      	movs	r3, #0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10a      	bne.n	800d13e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	623b      	str	r3, [r7, #32]
}
 800d13a:	bf00      	nop
 800d13c:	e7fe      	b.n	800d13c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d102      	bne.n	800d14a <xQueueGenericCreateStatic+0x7e>
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <xQueueGenericCreateStatic+0x82>
 800d14a:	2301      	movs	r3, #1
 800d14c:	e000      	b.n	800d150 <xQueueGenericCreateStatic+0x84>
 800d14e:	2300      	movs	r3, #0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	61fb      	str	r3, [r7, #28]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <xQueueGenericCreateStatic+0x9c>
=======
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <xQueueGenericCreateStatic+0x52>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <xQueueGenericCreateStatic+0x56>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e000      	b.n	800d0b8 <xQueueGenericCreateStatic+0x58>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	623b      	str	r3, [r7, #32]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d102      	bne.n	800d0de <xQueueGenericCreateStatic+0x7e>
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <xQueueGenericCreateStatic+0x82>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e000      	b.n	800d0e4 <xQueueGenericCreateStatic+0x84>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10a      	bne.n	800d0fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	61fb      	str	r3, [r7, #28]
}
 800d0fa:	bf00      	nop
 800d0fc:	e7fe      	b.n	800d0fc <xQueueGenericCreateStatic+0x9c>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< Updated upstream
 800d16a:	2348      	movs	r3, #72	; 0x48
 800d16c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2b48      	cmp	r3, #72	; 0x48
 800d172:	d00a      	beq.n	800d18a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	61bb      	str	r3, [r7, #24]
}
 800d186:	bf00      	nop
 800d188:	e7fe      	b.n	800d188 <xQueueGenericCreateStatic+0xbc>
=======
 800d0fe:	2348      	movs	r3, #72	; 0x48
 800d100:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b48      	cmp	r3, #72	; 0x48
 800d106:	d00a      	beq.n	800d11e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	61bb      	str	r3, [r7, #24]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xQueueGenericCreateStatic+0xbc>
>>>>>>> Stashed changes
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00d      	beq.n	800d1b0 <xQueueGenericCreateStatic+0xe4>
=======
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00d      	beq.n	800d144 <xQueueGenericCreateStatic+0xe4>
>>>>>>> Stashed changes
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< Updated upstream
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 800d19c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	68b9      	ldr	r1, [r7, #8]
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f000 f843 	bl	800d236 <prvInitialiseNewQueue>
=======
 800d130:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	4613      	mov	r3, r2
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	68b9      	ldr	r1, [r7, #8]
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f000 f843 	bl	800d1ca <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3730      	adds	r7, #48	; 0x30
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <xQueueGenericCreate>:
=======
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d146:	4618      	mov	r0, r3
 800d148:	3730      	adds	r7, #48	; 0x30
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <xQueueGenericCreate>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b08a      	sub	sp, #40	; 0x28
 800d1be:	af02      	add	r7, sp, #8
 800d1c0:	60f8      	str	r0, [r7, #12]
 800d1c2:	60b9      	str	r1, [r7, #8]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	71fb      	strb	r3, [r7, #7]
=======
 800d14e:	b580      	push	{r7, lr}
 800d150:	b08a      	sub	sp, #40	; 0x28
 800d152:	af02      	add	r7, sp, #8
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	4613      	mov	r3, r2
 800d15a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< Updated upstream
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10a      	bne.n	800d1e4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	613b      	str	r3, [r7, #16]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d102      	bne.n	800d1f0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	61fb      	str	r3, [r7, #28]
 800d1ee:	e004      	b.n	800d1fa <xQueueGenericCreate+0x40>
=======
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10a      	bne.n	800d178 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	613b      	str	r3, [r7, #16]
}
 800d174:	bf00      	nop
 800d176:	e7fe      	b.n	800d176 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d102      	bne.n	800d184 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	61fb      	str	r3, [r7, #28]
 800d182:	e004      	b.n	800d18e <xQueueGenericCreate+0x40>
>>>>>>> Stashed changes
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	fb02 f303 	mul.w	r3, r2, r3
 800d1f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	3348      	adds	r3, #72	; 0x48
 800d1fe:	4618      	mov	r0, r3
 800d200:	f002 fc72 	bl	800fae8 <pvPortMalloc>
 800d204:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00f      	beq.n	800d22c <xQueueGenericCreate+0x72>
=======
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	fb02 f303 	mul.w	r3, r2, r3
 800d18c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	3348      	adds	r3, #72	; 0x48
 800d192:	4618      	mov	r0, r3
 800d194:	f002 fc70 	bl	800fa78 <pvPortMalloc>
 800d198:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00f      	beq.n	800d1c0 <xQueueGenericCreate+0x72>
>>>>>>> Stashed changes
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
<<<<<<< Updated upstream
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	3348      	adds	r3, #72	; 0x48
 800d210:	617b      	str	r3, [r7, #20]
=======
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	3348      	adds	r3, #72	; 0x48
 800d1a4:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< Updated upstream
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	2200      	movs	r2, #0
 800d216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 800d21a:	79fa      	ldrb	r2, [r7, #7]
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	4613      	mov	r3, r2
 800d222:	697a      	ldr	r2, [r7, #20]
 800d224:	68b9      	ldr	r1, [r7, #8]
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f000 f805 	bl	800d236 <prvInitialiseNewQueue>
=======
 800d1ae:	79fa      	ldrb	r2, [r7, #7]
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	68b9      	ldr	r1, [r7, #8]
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f000 f805 	bl	800d1ca <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 800d22c:	69bb      	ldr	r3, [r7, #24]
	}
 800d22e:	4618      	mov	r0, r3
 800d230:	3720      	adds	r7, #32
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <prvInitialiseNewQueue>:
=======
 800d1c0:	69bb      	ldr	r3, [r7, #24]
	}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3720      	adds	r7, #32
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <prvInitialiseNewQueue>:
>>>>>>> Stashed changes

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< Updated upstream
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	60b9      	str	r1, [r7, #8]
 800d240:	607a      	str	r2, [r7, #4]
 800d242:	70fb      	strb	r3, [r7, #3]
=======
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b084      	sub	sp, #16
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	60f8      	str	r0, [r7, #12]
 800d1d2:	60b9      	str	r1, [r7, #8]
 800d1d4:	607a      	str	r2, [r7, #4]
 800d1d6:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d103      	bne.n	800d252 <prvInitialiseNewQueue+0x1c>
=======
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d103      	bne.n	800d1e6 <prvInitialiseNewQueue+0x1c>
>>>>>>> Stashed changes
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	69ba      	ldr	r2, [r7, #24]
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	e002      	b.n	800d258 <prvInitialiseNewQueue+0x22>
=======
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	e002      	b.n	800d1ec <prvInitialiseNewQueue+0x22>
>>>>>>> Stashed changes
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< Updated upstream
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	601a      	str	r2, [r3, #0]
=======
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< Updated upstream
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	68fa      	ldr	r2, [r7, #12]
 800d25c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d264:	2101      	movs	r1, #1
 800d266:	69b8      	ldr	r0, [r7, #24]
 800d268:	f7ff fec8 	bl	800cffc <xQueueGenericReset>
=======
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	69b8      	ldr	r0, [r7, #24]
 800d1fc:	f7ff fec8 	bl	800cf90 <xQueueGenericReset>
>>>>>>> Stashed changes
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< Updated upstream
 800d26c:	bf00      	nop
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <prvInitialiseMutex>:
=======
 800d200:	bf00      	nop
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <prvInitialiseMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< Updated upstream
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00e      	beq.n	800d2a0 <prvInitialiseMutex+0x2c>
=======
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00e      	beq.n	800d234 <prvInitialiseMutex+0x2c>
>>>>>>> Stashed changes
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
<<<<<<< Updated upstream
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	60da      	str	r2, [r3, #12]
=======
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< Updated upstream
 800d294:	2300      	movs	r3, #0
 800d296:	2200      	movs	r2, #0
 800d298:	2100      	movs	r1, #0
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f838 	bl	800d310 <xQueueGenericSend>
=======
 800d228:	2300      	movs	r3, #0
 800d22a:	2200      	movs	r2, #0
 800d22c:	2100      	movs	r1, #0
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f838 	bl	800d2a4 <xQueueGenericSend>
>>>>>>> Stashed changes
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< Updated upstream
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <xQueueCreateMutex>:
=======
 800d234:	bf00      	nop
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <xQueueCreateMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	6939      	ldr	r1, [r7, #16]
 800d2c0:	6978      	ldr	r0, [r7, #20]
 800d2c2:	f7ff ff7a 	bl	800d1ba <xQueueGenericCreate>
 800d2c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d2c8:	68f8      	ldr	r0, [r7, #12]
 800d2ca:	f7ff ffd3 	bl	800d274 <prvInitialiseMutex>

		return pxNewQueue;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
	}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <xQueueCreateMutexStatic>:
=======
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d246:	2301      	movs	r3, #1
 800d248:	617b      	str	r3, [r7, #20]
 800d24a:	2300      	movs	r3, #0
 800d24c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	461a      	mov	r2, r3
 800d252:	6939      	ldr	r1, [r7, #16]
 800d254:	6978      	ldr	r0, [r7, #20]
 800d256:	f7ff ff7a 	bl	800d14e <xQueueGenericCreate>
 800d25a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f7ff ffd3 	bl	800d208 <prvInitialiseMutex>

		return pxNewQueue;
 800d262:	68fb      	ldr	r3, [r7, #12]
	}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <xQueueCreateMutexStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< Updated upstream
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b088      	sub	sp, #32
 800d2dc:	af02      	add	r7, sp, #8
 800d2de:	4603      	mov	r3, r0
 800d2e0:	6039      	str	r1, [r7, #0]
 800d2e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	613b      	str	r3, [r7, #16]
=======
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b088      	sub	sp, #32
 800d270:	af02      	add	r7, sp, #8
 800d272:	4603      	mov	r3, r0
 800d274:	6039      	str	r1, [r7, #0]
 800d276:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d278:	2301      	movs	r3, #1
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	2300      	movs	r3, #0
 800d27e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
<<<<<<< Updated upstream
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	6939      	ldr	r1, [r7, #16]
 800d2f6:	6978      	ldr	r0, [r7, #20]
 800d2f8:	f7ff fee8 	bl	800d0cc <xQueueGenericCreateStatic>
 800d2fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f7ff ffb8 	bl	800d274 <prvInitialiseMutex>

		return pxNewQueue;
 800d304:	68fb      	ldr	r3, [r7, #12]
	}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
	...

0800d310 <xQueueGenericSend>:
=======
 800d280:	79fb      	ldrb	r3, [r7, #7]
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2200      	movs	r2, #0
 800d288:	6939      	ldr	r1, [r7, #16]
 800d28a:	6978      	ldr	r0, [r7, #20]
 800d28c:	f7ff fee8 	bl	800d060 <xQueueGenericCreateStatic>
 800d290:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f7ff ffb8 	bl	800d208 <prvInitialiseMutex>

		return pxNewQueue;
 800d298:	68fb      	ldr	r3, [r7, #12]
	}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3718      	adds	r7, #24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <xQueueGenericSend>:
>>>>>>> Stashed changes

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800d310:	b580      	push	{r7, lr}
 800d312:	b08e      	sub	sp, #56	; 0x38
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
 800d31c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d31e:	2300      	movs	r3, #0
 800d320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <xQueueGenericSend+0x32>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d103      	bne.n	800d350 <xQueueGenericSend+0x40>
 800d348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d101      	bne.n	800d354 <xQueueGenericSend+0x44>
 800d350:	2301      	movs	r3, #1
 800d352:	e000      	b.n	800d356 <xQueueGenericSend+0x46>
 800d354:	2300      	movs	r3, #0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <xQueueGenericSend+0x60>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	2b02      	cmp	r3, #2
 800d374:	d103      	bne.n	800d37e <xQueueGenericSend+0x6e>
 800d376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d101      	bne.n	800d382 <xQueueGenericSend+0x72>
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <xQueueGenericSend+0x74>
 800d382:	2300      	movs	r3, #0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <xQueueGenericSend+0x8e>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	623b      	str	r3, [r7, #32]
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d39e:	f001 fb85 	bl	800eaac <xTaskGetSchedulerState>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d102      	bne.n	800d3ae <xQueueGenericSend+0x9e>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <xQueueGenericSend+0xa2>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e000      	b.n	800d3b4 <xQueueGenericSend+0xa4>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10a      	bne.n	800d3ce <xQueueGenericSend+0xbe>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	61fb      	str	r3, [r7, #28]
}
 800d3ca:	bf00      	nop
 800d3cc:	e7fe      	b.n	800d3cc <xQueueGenericSend+0xbc>
=======
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08e      	sub	sp, #56	; 0x38
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10a      	bne.n	800d2d6 <xQueueGenericSend+0x32>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2d2:	bf00      	nop
 800d2d4:	e7fe      	b.n	800d2d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d103      	bne.n	800d2e4 <xQueueGenericSend+0x40>
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <xQueueGenericSend+0x44>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e000      	b.n	800d2ea <xQueueGenericSend+0x46>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <xQueueGenericSend+0x60>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b02      	cmp	r3, #2
 800d308:	d103      	bne.n	800d312 <xQueueGenericSend+0x6e>
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d101      	bne.n	800d316 <xQueueGenericSend+0x72>
 800d312:	2301      	movs	r3, #1
 800d314:	e000      	b.n	800d318 <xQueueGenericSend+0x74>
 800d316:	2300      	movs	r3, #0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <xQueueGenericSend+0x8e>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	623b      	str	r3, [r7, #32]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d332:	f001 fb85 	bl	800ea40 <xTaskGetSchedulerState>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <xQueueGenericSend+0x9e>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <xQueueGenericSend+0xa2>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <xQueueGenericSend+0xa4>
 800d346:	2300      	movs	r3, #0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10a      	bne.n	800d362 <xQueueGenericSend+0xbe>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	61fb      	str	r3, [r7, #28]
}
 800d35e:	bf00      	nop
 800d360:	e7fe      	b.n	800d360 <xQueueGenericSend+0xbc>
>>>>>>> Stashed changes
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800d3ce:	f002 fa69 	bl	800f8a4 <vPortEnterCritical>
=======
 800d362:	f002 fa67 	bl	800f834 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< Updated upstream
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d302      	bcc.n	800d3e4 <xQueueGenericSend+0xd4>
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d129      	bne.n	800d438 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ea:	f000 fb2b 	bl	800da44 <prvCopyDataToQueue>
 800d3ee:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 800d366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36e:	429a      	cmp	r2, r3
 800d370:	d302      	bcc.n	800d378 <xQueueGenericSend+0xd4>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d129      	bne.n	800d3cc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	68b9      	ldr	r1, [r7, #8]
 800d37c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d37e:	f000 fb2b 	bl	800d9d8 <prvCopyDataToQueue>
 800d382:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d010      	beq.n	800d41a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fa:	3324      	adds	r3, #36	; 0x24
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f001 f98f 	bl	800e720 <xTaskRemoveFromEventList>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d013      	beq.n	800d430 <xQueueGenericSend+0x120>
=======
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d010      	beq.n	800d3ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38e:	3324      	adds	r3, #36	; 0x24
 800d390:	4618      	mov	r0, r3
 800d392:	f001 f98f 	bl	800e6b4 <xTaskRemoveFromEventList>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d013      	beq.n	800d3c4 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800d408:	4b3f      	ldr	r3, [pc, #252]	; (800d508 <xQueueGenericSend+0x1f8>)
 800d40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	e00a      	b.n	800d430 <xQueueGenericSend+0x120>
=======
 800d39c:	4b3f      	ldr	r3, [pc, #252]	; (800d49c <xQueueGenericSend+0x1f8>)
 800d39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	e00a      	b.n	800d3c4 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< Updated upstream
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <xQueueGenericSend+0x120>
=======
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d007      	beq.n	800d3c4 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800d420:	4b39      	ldr	r3, [pc, #228]	; (800d508 <xQueueGenericSend+0x1f8>)
 800d422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	f3bf 8f6f 	isb	sy
=======
 800d3b4:	4b39      	ldr	r3, [pc, #228]	; (800d49c <xQueueGenericSend+0x1f8>)
 800d3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d430:	f002 fa68 	bl	800f904 <vPortExitCritical>
				return pdPASS;
 800d434:	2301      	movs	r3, #1
 800d436:	e063      	b.n	800d500 <xQueueGenericSend+0x1f0>
=======
 800d3c4:	f002 fa66 	bl	800f894 <vPortExitCritical>
				return pdPASS;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e063      	b.n	800d494 <xQueueGenericSend+0x1f0>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d103      	bne.n	800d446 <xQueueGenericSend+0x136>
=======
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d103      	bne.n	800d3da <xQueueGenericSend+0x136>
>>>>>>> Stashed changes
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d43e:	f002 fa61 	bl	800f904 <vPortExitCritical>
=======
 800d3d2:	f002 fa5f 	bl	800f894 <vPortExitCritical>
>>>>>>> Stashed changes

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< Updated upstream
 800d442:	2300      	movs	r3, #0
 800d444:	e05c      	b.n	800d500 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d106      	bne.n	800d45a <xQueueGenericSend+0x14a>
=======
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e05c      	b.n	800d494 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <xQueueGenericSend+0x14a>
>>>>>>> Stashed changes
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800d44c:	f107 0314 	add.w	r3, r7, #20
 800d450:	4618      	mov	r0, r3
 800d452:	f001 f9c7 	bl	800e7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d456:	2301      	movs	r3, #1
 800d458:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800d3e0:	f107 0314 	add.w	r3, r7, #20
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f001 f9c7 	bl	800e778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d45a:	f002 fa53 	bl	800f904 <vPortExitCritical>
=======
 800d3ee:	f002 fa51 	bl	800f894 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800d45e:	f000 ff23 	bl	800e2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d462:	f002 fa1f 	bl	800f8a4 <vPortEnterCritical>
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d46c:	b25b      	sxtb	r3, r3
 800d46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d472:	d103      	bne.n	800d47c <xQueueGenericSend+0x16c>
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	2200      	movs	r2, #0
 800d478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d482:	b25b      	sxtb	r3, r3
 800d484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d488:	d103      	bne.n	800d492 <xQueueGenericSend+0x182>
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	2200      	movs	r2, #0
 800d48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d492:	f002 fa37 	bl	800f904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d496:	1d3a      	adds	r2, r7, #4
 800d498:	f107 0314 	add.w	r3, r7, #20
 800d49c:	4611      	mov	r1, r2
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f001 f9b6 	bl	800e810 <xTaskCheckForTimeOut>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d124      	bne.n	800d4f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d4aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ac:	f000 fbc2 	bl	800dc34 <prvIsQueueFull>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d018      	beq.n	800d4e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	3310      	adds	r3, #16
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 f8de 	bl	800e680 <vTaskPlaceOnEventList>
=======
 800d3f2:	f000 ff23 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3f6:	f002 fa1d 	bl	800f834 <vPortEnterCritical>
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d400:	b25b      	sxtb	r3, r3
 800d402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d406:	d103      	bne.n	800d410 <xQueueGenericSend+0x16c>
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d416:	b25b      	sxtb	r3, r3
 800d418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41c:	d103      	bne.n	800d426 <xQueueGenericSend+0x182>
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	2200      	movs	r2, #0
 800d422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d426:	f002 fa35 	bl	800f894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d42a:	1d3a      	adds	r2, r7, #4
 800d42c:	f107 0314 	add.w	r3, r7, #20
 800d430:	4611      	mov	r1, r2
 800d432:	4618      	mov	r0, r3
 800d434:	f001 f9b6 	bl	800e7a4 <xTaskCheckForTimeOut>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d124      	bne.n	800d488 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d43e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d440:	f000 fbc2 	bl	800dbc8 <prvIsQueueFull>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d018      	beq.n	800d47c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	3310      	adds	r3, #16
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	4611      	mov	r1, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f001 f8de 	bl	800e614 <vTaskPlaceOnEventList>
>>>>>>> Stashed changes
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800d4c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4c6:	f000 fb4d 	bl	800db64 <prvUnlockQueue>
=======
 800d458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d45a:	f000 fb4d 	bl	800daf8 <prvUnlockQueue>
>>>>>>> Stashed changes
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< Updated upstream
 800d4ca:	f000 fefb 	bl	800e2c4 <xTaskResumeAll>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f47f af7c 	bne.w	800d3ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d4d6:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <xQueueGenericSend+0x1f8>)
 800d4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	e772      	b.n	800d3ce <xQueueGenericSend+0xbe>
=======
 800d45e:	f000 fefb 	bl	800e258 <xTaskResumeAll>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	f47f af7c 	bne.w	800d362 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d46a:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <xQueueGenericSend+0x1f8>)
 800d46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	e772      	b.n	800d362 <xQueueGenericSend+0xbe>
>>>>>>> Stashed changes
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800d4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ea:	f000 fb3b 	bl	800db64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4ee:	f000 fee9 	bl	800e2c4 <xTaskResumeAll>
 800d4f2:	e76c      	b.n	800d3ce <xQueueGenericSend+0xbe>
=======
 800d47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d47e:	f000 fb3b 	bl	800daf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d482:	f000 fee9 	bl	800e258 <xTaskResumeAll>
 800d486:	e76c      	b.n	800d362 <xQueueGenericSend+0xbe>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800d4f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4f6:	f000 fb35 	bl	800db64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4fa:	f000 fee3 	bl	800e2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d4fe:	2300      	movs	r3, #0
		}
	}
}
 800d500:	4618      	mov	r0, r3
 800d502:	3738      	adds	r7, #56	; 0x38
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	e000ed04 	.word	0xe000ed04

0800d50c <xQueueGenericSendFromISR>:
=======
 800d488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d48a:	f000 fb35 	bl	800daf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d48e:	f000 fee3 	bl	800e258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d492:	2300      	movs	r3, #0
		}
	}
}
 800d494:	4618      	mov	r0, r3
 800d496:	3738      	adds	r7, #56	; 0x38
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	e000ed04 	.word	0xe000ed04

0800d4a0 <xQueueGenericSendFromISR>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08e      	sub	sp, #56	; 0x38
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10a      	bne.n	800d53a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d536:	bf00      	nop
 800d538:	e7fe      	b.n	800d538 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d103      	bne.n	800d548 <xQueueGenericSendFromISR+0x3c>
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <xQueueGenericSendFromISR+0x40>
 800d548:	2301      	movs	r3, #1
 800d54a:	e000      	b.n	800d54e <xQueueGenericSendFromISR+0x42>
 800d54c:	2300      	movs	r3, #0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10a      	bne.n	800d568 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	623b      	str	r3, [r7, #32]
}
 800d564:	bf00      	nop
 800d566:	e7fe      	b.n	800d566 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d103      	bne.n	800d576 <xQueueGenericSendFromISR+0x6a>
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d572:	2b01      	cmp	r3, #1
 800d574:	d101      	bne.n	800d57a <xQueueGenericSendFromISR+0x6e>
 800d576:	2301      	movs	r3, #1
 800d578:	e000      	b.n	800d57c <xQueueGenericSendFromISR+0x70>
 800d57a:	2300      	movs	r3, #0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10a      	bne.n	800d596 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	61fb      	str	r3, [r7, #28]
}
 800d592:	bf00      	nop
 800d594:	e7fe      	b.n	800d594 <xQueueGenericSendFromISR+0x88>
=======
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08e      	sub	sp, #56	; 0x38
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
 800d4ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10a      	bne.n	800d4ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4ca:	bf00      	nop
 800d4cc:	e7fe      	b.n	800d4cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d103      	bne.n	800d4dc <xQueueGenericSendFromISR+0x3c>
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <xQueueGenericSendFromISR+0x40>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e000      	b.n	800d4e2 <xQueueGenericSendFromISR+0x42>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10a      	bne.n	800d4fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	623b      	str	r3, [r7, #32]
}
 800d4f8:	bf00      	nop
 800d4fa:	e7fe      	b.n	800d4fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d103      	bne.n	800d50a <xQueueGenericSendFromISR+0x6a>
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d506:	2b01      	cmp	r3, #1
 800d508:	d101      	bne.n	800d50e <xQueueGenericSendFromISR+0x6e>
 800d50a:	2301      	movs	r3, #1
 800d50c:	e000      	b.n	800d510 <xQueueGenericSendFromISR+0x70>
 800d50e:	2300      	movs	r3, #0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10a      	bne.n	800d52a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	61fb      	str	r3, [r7, #28]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <xQueueGenericSendFromISR+0x88>
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 800d596:	f002 fa67 	bl	800fa68 <vPortValidateInterruptPriority>
=======
 800d52a:	f002 fa65 	bl	800f9f8 <vPortValidateInterruptPriority>
>>>>>>> Stashed changes

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 800d59a:	f3ef 8211 	mrs	r2, BASEPRI
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	61ba      	str	r2, [r7, #24]
 800d5b0:	617b      	str	r3, [r7, #20]
=======
 800d52e:	f3ef 8211 	mrs	r2, BASEPRI
 800d532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d536:	f383 8811 	msr	BASEPRI, r3
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	61ba      	str	r2, [r7, #24]
 800d544:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< Updated upstream
 800d5b2:	69bb      	ldr	r3, [r7, #24]
=======
 800d546:	69bb      	ldr	r3, [r7, #24]
>>>>>>> Stashed changes
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< Updated upstream
 800d5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d302      	bcc.n	800d5c8 <xQueueGenericSendFromISR+0xbc>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d12c      	bne.n	800d622 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 800d548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	429a      	cmp	r2, r3
 800d554:	d302      	bcc.n	800d55c <xQueueGenericSendFromISR+0xbc>
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d12c      	bne.n	800d5b6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> Stashed changes
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	68b9      	ldr	r1, [r7, #8]
 800d5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5d8:	f000 fa34 	bl	800da44 <prvCopyDataToQueue>
=======
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	68b9      	ldr	r1, [r7, #8]
 800d56a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d56c:	f000 fa34 	bl	800d9d8 <prvCopyDataToQueue>
>>>>>>> Stashed changes

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< Updated upstream
 800d5dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e4:	d112      	bne.n	800d60c <xQueueGenericSendFromISR+0x100>
=======
 800d570:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d578:	d112      	bne.n	800d5a0 <xQueueGenericSendFromISR+0x100>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d016      	beq.n	800d61c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f0:	3324      	adds	r3, #36	; 0x24
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f001 f894 	bl	800e720 <xTaskRemoveFromEventList>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00e      	beq.n	800d61c <xQueueGenericSendFromISR+0x110>
=======
 800d57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d016      	beq.n	800d5b0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d584:	3324      	adds	r3, #36	; 0x24
 800d586:	4618      	mov	r0, r3
 800d588:	f001 f894 	bl	800e6b4 <xTaskRemoveFromEventList>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00e      	beq.n	800d5b0 <xQueueGenericSendFromISR+0x110>
>>>>>>> Stashed changes
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< Updated upstream
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00b      	beq.n	800d61c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	601a      	str	r2, [r3, #0]
 800d60a:	e007      	b.n	800d61c <xQueueGenericSendFromISR+0x110>
=======
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00b      	beq.n	800d5b0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	601a      	str	r2, [r3, #0]
 800d59e:	e007      	b.n	800d5b0 <xQueueGenericSendFromISR+0x110>
>>>>>>> Stashed changes
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< Updated upstream
 800d60c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d610:	3301      	adds	r3, #1
 800d612:	b2db      	uxtb	r3, r3
 800d614:	b25a      	sxtb	r2, r3
 800d616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d61c:	2301      	movs	r3, #1
 800d61e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d620:	e001      	b.n	800d626 <xQueueGenericSendFromISR+0x11a>
=======
 800d5a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	b25a      	sxtb	r2, r3
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d5b4:	e001      	b.n	800d5ba <xQueueGenericSendFromISR+0x11a>
>>>>>>> Stashed changes
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< Updated upstream
 800d622:	2300      	movs	r3, #0
 800d624:	637b      	str	r3, [r7, #52]	; 0x34
 800d626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d628:	613b      	str	r3, [r7, #16]
=======
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5bc:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< Updated upstream
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	f383 8811 	msr	BASEPRI, r3
=======
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< Updated upstream
 800d630:	bf00      	nop
=======
 800d5c4:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 800d632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d634:	4618      	mov	r0, r3
 800d636:	3738      	adds	r7, #56	; 0x38
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <xQueueReceive>:
=======
 800d5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3738      	adds	r7, #56	; 0x38
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <xQueueReceive>:
>>>>>>> Stashed changes
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08c      	sub	sp, #48	; 0x30
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d648:	2300      	movs	r3, #0
 800d64a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10a      	bne.n	800d66c <xQueueReceive+0x30>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	623b      	str	r3, [r7, #32]
}
 800d668:	bf00      	nop
 800d66a:	e7fe      	b.n	800d66a <xQueueReceive+0x2e>
=======
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08c      	sub	sp, #48	; 0x30
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10a      	bne.n	800d600 <xQueueReceive+0x30>
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	623b      	str	r3, [r7, #32]
}
 800d5fc:	bf00      	nop
 800d5fe:	e7fe      	b.n	800d5fe <xQueueReceive+0x2e>
>>>>>>> Stashed changes

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< Updated upstream
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d103      	bne.n	800d67a <xQueueReceive+0x3e>
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <xQueueReceive+0x42>
 800d67a:	2301      	movs	r3, #1
 800d67c:	e000      	b.n	800d680 <xQueueReceive+0x44>
 800d67e:	2300      	movs	r3, #0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <xQueueReceive+0x5e>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	61fb      	str	r3, [r7, #28]
}
 800d696:	bf00      	nop
 800d698:	e7fe      	b.n	800d698 <xQueueReceive+0x5c>
=======
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d103      	bne.n	800d60e <xQueueReceive+0x3e>
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <xQueueReceive+0x42>
 800d60e:	2301      	movs	r3, #1
 800d610:	e000      	b.n	800d614 <xQueueReceive+0x44>
 800d612:	2300      	movs	r3, #0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10a      	bne.n	800d62e <xQueueReceive+0x5e>
	__asm volatile
 800d618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61c:	f383 8811 	msr	BASEPRI, r3
 800d620:	f3bf 8f6f 	isb	sy
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	61fb      	str	r3, [r7, #28]
}
 800d62a:	bf00      	nop
 800d62c:	e7fe      	b.n	800d62c <xQueueReceive+0x5c>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 800d69a:	f001 fa07 	bl	800eaac <xTaskGetSchedulerState>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d102      	bne.n	800d6aa <xQueueReceive+0x6e>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <xQueueReceive+0x72>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e000      	b.n	800d6b0 <xQueueReceive+0x74>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10a      	bne.n	800d6ca <xQueueReceive+0x8e>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	61bb      	str	r3, [r7, #24]
}
 800d6c6:	bf00      	nop
 800d6c8:	e7fe      	b.n	800d6c8 <xQueueReceive+0x8c>
=======
 800d62e:	f001 fa07 	bl	800ea40 <xTaskGetSchedulerState>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d102      	bne.n	800d63e <xQueueReceive+0x6e>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <xQueueReceive+0x72>
 800d63e:	2301      	movs	r3, #1
 800d640:	e000      	b.n	800d644 <xQueueReceive+0x74>
 800d642:	2300      	movs	r3, #0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10a      	bne.n	800d65e <xQueueReceive+0x8e>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	61bb      	str	r3, [r7, #24]
}
 800d65a:	bf00      	nop
 800d65c:	e7fe      	b.n	800d65c <xQueueReceive+0x8c>
>>>>>>> Stashed changes
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800d6ca:	f002 f8eb 	bl	800f8a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800d65e:	f002 f8e9 	bl	800f834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d666:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d01f      	beq.n	800d71a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6de:	f000 fa1b 	bl	800db18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	1e5a      	subs	r2, r3, #1
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d01f      	beq.n	800d6ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d66e:	68b9      	ldr	r1, [r7, #8]
 800d670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d672:	f000 fa1b 	bl	800daac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	1e5a      	subs	r2, r3, #1
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00f      	beq.n	800d712 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	3310      	adds	r3, #16
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f001 f812 	bl	800e720 <xTaskRemoveFromEventList>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d007      	beq.n	800d712 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d702:	4b3d      	ldr	r3, [pc, #244]	; (800d7f8 <xQueueReceive+0x1bc>)
 800d704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	f3bf 8f6f 	isb	sy
=======
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	691b      	ldr	r3, [r3, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00f      	beq.n	800d6a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d688:	3310      	adds	r3, #16
 800d68a:	4618      	mov	r0, r3
 800d68c:	f001 f812 	bl	800e6b4 <xTaskRemoveFromEventList>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d007      	beq.n	800d6a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d696:	4b3d      	ldr	r3, [pc, #244]	; (800d78c <xQueueReceive+0x1bc>)
 800d698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d712:	f002 f8f7 	bl	800f904 <vPortExitCritical>
				return pdPASS;
 800d716:	2301      	movs	r3, #1
 800d718:	e069      	b.n	800d7ee <xQueueReceive+0x1b2>
=======
 800d6a6:	f002 f8f5 	bl	800f894 <vPortExitCritical>
				return pdPASS;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e069      	b.n	800d782 <xQueueReceive+0x1b2>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d103      	bne.n	800d728 <xQueueReceive+0xec>
=======
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d103      	bne.n	800d6bc <xQueueReceive+0xec>
>>>>>>> Stashed changes
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d720:	f002 f8f0 	bl	800f904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d724:	2300      	movs	r3, #0
 800d726:	e062      	b.n	800d7ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d106      	bne.n	800d73c <xQueueReceive+0x100>
=======
 800d6b4:	f002 f8ee 	bl	800f894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e062      	b.n	800d782 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d106      	bne.n	800d6d0 <xQueueReceive+0x100>
>>>>>>> Stashed changes
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800d72e:	f107 0310 	add.w	r3, r7, #16
 800d732:	4618      	mov	r0, r3
 800d734:	f001 f856 	bl	800e7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d738:	2301      	movs	r3, #1
 800d73a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800d6c2:	f107 0310 	add.w	r3, r7, #16
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f001 f856 	bl	800e778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d73c:	f002 f8e2 	bl	800f904 <vPortExitCritical>
=======
 800d6d0:	f002 f8e0 	bl	800f894 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800d740:	f000 fdb2 	bl	800e2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d744:	f002 f8ae 	bl	800f8a4 <vPortEnterCritical>
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d74e:	b25b      	sxtb	r3, r3
 800d750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d754:	d103      	bne.n	800d75e <xQueueReceive+0x122>
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d764:	b25b      	sxtb	r3, r3
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d103      	bne.n	800d774 <xQueueReceive+0x138>
 800d76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76e:	2200      	movs	r2, #0
 800d770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d774:	f002 f8c6 	bl	800f904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d778:	1d3a      	adds	r2, r7, #4
 800d77a:	f107 0310 	add.w	r3, r7, #16
 800d77e:	4611      	mov	r1, r2
 800d780:	4618      	mov	r0, r3
 800d782:	f001 f845 	bl	800e810 <xTaskCheckForTimeOut>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d123      	bne.n	800d7d4 <xQueueReceive+0x198>
=======
 800d6d4:	f000 fdb2 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6d8:	f002 f8ac 	bl	800f834 <vPortEnterCritical>
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6e2:	b25b      	sxtb	r3, r3
 800d6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e8:	d103      	bne.n	800d6f2 <xQueueReceive+0x122>
 800d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6f8:	b25b      	sxtb	r3, r3
 800d6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fe:	d103      	bne.n	800d708 <xQueueReceive+0x138>
 800d700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d702:	2200      	movs	r2, #0
 800d704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d708:	f002 f8c4 	bl	800f894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d70c:	1d3a      	adds	r2, r7, #4
 800d70e:	f107 0310 	add.w	r3, r7, #16
 800d712:	4611      	mov	r1, r2
 800d714:	4618      	mov	r0, r3
 800d716:	f001 f845 	bl	800e7a4 <xTaskCheckForTimeOut>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d123      	bne.n	800d768 <xQueueReceive+0x198>
>>>>>>> Stashed changes
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800d78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d78e:	f000 fa3b 	bl	800dc08 <prvIsQueueEmpty>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d017      	beq.n	800d7c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	3324      	adds	r3, #36	; 0x24
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	4611      	mov	r1, r2
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 ff6d 	bl	800e680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7a8:	f000 f9dc 	bl	800db64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7ac:	f000 fd8a 	bl	800e2c4 <xTaskResumeAll>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d189      	bne.n	800d6ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d7b6:	4b10      	ldr	r3, [pc, #64]	; (800d7f8 <xQueueReceive+0x1bc>)
 800d7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	e780      	b.n	800d6ca <xQueueReceive+0x8e>
=======
 800d720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d722:	f000 fa3b 	bl	800db9c <prvIsQueueEmpty>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d017      	beq.n	800d75c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	3324      	adds	r3, #36	; 0x24
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	4611      	mov	r1, r2
 800d734:	4618      	mov	r0, r3
 800d736:	f000 ff6d 	bl	800e614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d73c:	f000 f9dc 	bl	800daf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d740:	f000 fd8a 	bl	800e258 <xTaskResumeAll>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d189      	bne.n	800d65e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d74a:	4b10      	ldr	r3, [pc, #64]	; (800d78c <xQueueReceive+0x1bc>)
 800d74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	e780      	b.n	800d65e <xQueueReceive+0x8e>
>>>>>>> Stashed changes
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800d7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ca:	f000 f9cb 	bl	800db64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7ce:	f000 fd79 	bl	800e2c4 <xTaskResumeAll>
 800d7d2:	e77a      	b.n	800d6ca <xQueueReceive+0x8e>
=======
 800d75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d75e:	f000 f9cb 	bl	800daf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d762:	f000 fd79 	bl	800e258 <xTaskResumeAll>
 800d766:	e77a      	b.n	800d65e <xQueueReceive+0x8e>
>>>>>>> Stashed changes
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800d7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7d6:	f000 f9c5 	bl	800db64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7da:	f000 fd73 	bl	800e2c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7e0:	f000 fa12 	bl	800dc08 <prvIsQueueEmpty>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f43f af6f 	beq.w	800d6ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7ec:	2300      	movs	r3, #0
=======
 800d768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d76a:	f000 f9c5 	bl	800daf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d76e:	f000 fd73 	bl	800e258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d774:	f000 fa12 	bl	800db9c <prvIsQueueEmpty>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f43f af6f 	beq.w	800d65e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d780:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
<<<<<<< Updated upstream
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3730      	adds	r7, #48	; 0x30
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	e000ed04 	.word	0xe000ed04

0800d7fc <xQueueSemaphoreTake>:
=======
 800d782:	4618      	mov	r0, r3
 800d784:	3730      	adds	r7, #48	; 0x30
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	e000ed04 	.word	0xe000ed04

0800d790 <xQueueSemaphoreTake>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08e      	sub	sp, #56	; 0x38
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d806:	2300      	movs	r3, #0
 800d808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d80e:	2300      	movs	r3, #0
 800d810:	633b      	str	r3, [r7, #48]	; 0x30
=======
 800d790:	b580      	push	{r7, lr}
 800d792:	b08e      	sub	sp, #56	; 0x38
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d79a:	2300      	movs	r3, #0
 800d79c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> Stashed changes
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< Updated upstream
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10a      	bne.n	800d82e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	623b      	str	r3, [r7, #32]
}
 800d82a:	bf00      	nop
 800d82c:	e7fe      	b.n	800d82c <xQueueSemaphoreTake+0x30>
=======
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10a      	bne.n	800d7c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	623b      	str	r3, [r7, #32]
}
 800d7be:	bf00      	nop
 800d7c0:	e7fe      	b.n	800d7c0 <xQueueSemaphoreTake+0x30>
>>>>>>> Stashed changes

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< Updated upstream
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00a      	beq.n	800d84c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	61fb      	str	r3, [r7, #28]
}
 800d848:	bf00      	nop
 800d84a:	e7fe      	b.n	800d84a <xQueueSemaphoreTake+0x4e>
=======
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ce:	f383 8811 	msr	BASEPRI, r3
 800d7d2:	f3bf 8f6f 	isb	sy
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	61fb      	str	r3, [r7, #28]
}
 800d7dc:	bf00      	nop
 800d7de:	e7fe      	b.n	800d7de <xQueueSemaphoreTake+0x4e>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 800d84c:	f001 f92e 	bl	800eaac <xTaskGetSchedulerState>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <xQueueSemaphoreTake+0x60>
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d101      	bne.n	800d860 <xQueueSemaphoreTake+0x64>
 800d85c:	2301      	movs	r3, #1
 800d85e:	e000      	b.n	800d862 <xQueueSemaphoreTake+0x66>
 800d860:	2300      	movs	r3, #0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	61bb      	str	r3, [r7, #24]
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <xQueueSemaphoreTake+0x7e>
=======
 800d7e0:	f001 f92e 	bl	800ea40 <xTaskGetSchedulerState>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d102      	bne.n	800d7f0 <xQueueSemaphoreTake+0x60>
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d101      	bne.n	800d7f4 <xQueueSemaphoreTake+0x64>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e000      	b.n	800d7f6 <xQueueSemaphoreTake+0x66>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10a      	bne.n	800d810 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	61bb      	str	r3, [r7, #24]
}
 800d80c:	bf00      	nop
 800d80e:	e7fe      	b.n	800d80e <xQueueSemaphoreTake+0x7e>
>>>>>>> Stashed changes
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800d87c:	f002 f812 	bl	800f8a4 <vPortEnterCritical>
=======
 800d810:	f002 f810 	bl	800f834 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d884:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d818:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d024      	beq.n	800d8d6 <xQueueSemaphoreTake+0xda>
=======
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d024      	beq.n	800d86a <xQueueSemaphoreTake+0xda>
>>>>>>> Stashed changes
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	1e5a      	subs	r2, r3, #1
 800d890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d892:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800d820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d822:	1e5a      	subs	r2, r3, #1
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d104      	bne.n	800d8a6 <xQueueSemaphoreTake+0xaa>
=======
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d104      	bne.n	800d83a <xQueueSemaphoreTake+0xaa>
>>>>>>> Stashed changes
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
<<<<<<< Updated upstream
 800d89c:	f001 fad0 	bl	800ee40 <pvTaskIncrementMutexHeldCount>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	605a      	str	r2, [r3, #4]
=======
 800d830:	f001 fad0 	bl	800edd4 <pvTaskIncrementMutexHeldCount>
 800d834:	4602      	mov	r2, r0
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00f      	beq.n	800d8ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	3310      	adds	r3, #16
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 ff34 	bl	800e720 <xTaskRemoveFromEventList>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d007      	beq.n	800d8ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8be:	4b54      	ldr	r3, [pc, #336]	; (800da10 <xQueueSemaphoreTake+0x214>)
 800d8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	f3bf 8f6f 	isb	sy
=======
 800d83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00f      	beq.n	800d862 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	3310      	adds	r3, #16
 800d846:	4618      	mov	r0, r3
 800d848:	f000 ff34 	bl	800e6b4 <xTaskRemoveFromEventList>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d007      	beq.n	800d862 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d852:	4b54      	ldr	r3, [pc, #336]	; (800d9a4 <xQueueSemaphoreTake+0x214>)
 800d854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d8ce:	f002 f819 	bl	800f904 <vPortExitCritical>
				return pdPASS;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e097      	b.n	800da06 <xQueueSemaphoreTake+0x20a>
=======
 800d862:	f002 f817 	bl	800f894 <vPortExitCritical>
				return pdPASS;
 800d866:	2301      	movs	r3, #1
 800d868:	e097      	b.n	800d99a <xQueueSemaphoreTake+0x20a>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d111      	bne.n	800d900 <xQueueSemaphoreTake+0x104>
=======
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d111      	bne.n	800d894 <xQueueSemaphoreTake+0x104>
>>>>>>> Stashed changes
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< Updated upstream
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	617b      	str	r3, [r7, #20]
}
 800d8f4:	bf00      	nop
 800d8f6:	e7fe      	b.n	800d8f6 <xQueueSemaphoreTake+0xfa>
=======
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	617b      	str	r3, [r7, #20]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <xQueueSemaphoreTake+0xfa>
>>>>>>> Stashed changes
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d8f8:	f002 f804 	bl	800f904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	e082      	b.n	800da06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <xQueueSemaphoreTake+0x118>
=======
 800d88c:	f002 f802 	bl	800f894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d890:	2300      	movs	r3, #0
 800d892:	e082      	b.n	800d99a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <xQueueSemaphoreTake+0x118>
>>>>>>> Stashed changes
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800d906:	f107 030c 	add.w	r3, r7, #12
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 ff6a 	bl	800e7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d910:	2301      	movs	r3, #1
 800d912:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800d89a:	f107 030c 	add.w	r3, r7, #12
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 ff6a 	bl	800e778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800d914:	f001 fff6 	bl	800f904 <vPortExitCritical>
=======
 800d8a8:	f001 fff4 	bl	800f894 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800d918:	f000 fcc6 	bl	800e2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d91c:	f001 ffc2 	bl	800f8a4 <vPortEnterCritical>
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d926:	b25b      	sxtb	r3, r3
 800d928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92c:	d103      	bne.n	800d936 <xQueueSemaphoreTake+0x13a>
 800d92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d930:	2200      	movs	r2, #0
 800d932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d93c:	b25b      	sxtb	r3, r3
 800d93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d942:	d103      	bne.n	800d94c <xQueueSemaphoreTake+0x150>
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	2200      	movs	r2, #0
 800d948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d94c:	f001 ffda 	bl	800f904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d950:	463a      	mov	r2, r7
 800d952:	f107 030c 	add.w	r3, r7, #12
 800d956:	4611      	mov	r1, r2
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 ff59 	bl	800e810 <xTaskCheckForTimeOut>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d132      	bne.n	800d9ca <xQueueSemaphoreTake+0x1ce>
=======
 800d8ac:	f000 fcc6 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8b0:	f001 ffc0 	bl	800f834 <vPortEnterCritical>
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ba:	b25b      	sxtb	r3, r3
 800d8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c0:	d103      	bne.n	800d8ca <xQueueSemaphoreTake+0x13a>
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8d0:	b25b      	sxtb	r3, r3
 800d8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d6:	d103      	bne.n	800d8e0 <xQueueSemaphoreTake+0x150>
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8e0:	f001 ffd8 	bl	800f894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8e4:	463a      	mov	r2, r7
 800d8e6:	f107 030c 	add.w	r3, r7, #12
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 ff59 	bl	800e7a4 <xTaskCheckForTimeOut>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d132      	bne.n	800d95e <xQueueSemaphoreTake+0x1ce>
>>>>>>> Stashed changes
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800d964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d966:	f000 f94f 	bl	800dc08 <prvIsQueueEmpty>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d026      	beq.n	800d9be <xQueueSemaphoreTake+0x1c2>
=======
 800d8f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8fa:	f000 f94f 	bl	800db9c <prvIsQueueEmpty>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d026      	beq.n	800d952 <xQueueSemaphoreTake+0x1c2>
>>>>>>> Stashed changes
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d109      	bne.n	800d98c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d978:	f001 ff94 	bl	800f8a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	f001 f8b1 	bl	800eae8 <xTaskPriorityInherit>
 800d986:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d988:	f001 ffbc 	bl	800f904 <vPortExitCritical>
=======
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d109      	bne.n	800d920 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d90c:	f001 ff92 	bl	800f834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	f001 f8b1 	bl	800ea7c <xTaskPriorityInherit>
 800d91a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d91c:	f001 ffba 	bl	800f894 <vPortExitCritical>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< Updated upstream
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	3324      	adds	r3, #36	; 0x24
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	4611      	mov	r1, r2
 800d994:	4618      	mov	r0, r3
 800d996:	f000 fe73 	bl	800e680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d99a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d99c:	f000 f8e2 	bl	800db64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9a0:	f000 fc90 	bl	800e2c4 <xTaskResumeAll>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f47f af68 	bne.w	800d87c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d9ac:	4b18      	ldr	r3, [pc, #96]	; (800da10 <xQueueSemaphoreTake+0x214>)
 800d9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	e75e      	b.n	800d87c <xQueueSemaphoreTake+0x80>
=======
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	3324      	adds	r3, #36	; 0x24
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	4611      	mov	r1, r2
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 fe73 	bl	800e614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d92e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d930:	f000 f8e2 	bl	800daf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d934:	f000 fc90 	bl	800e258 <xTaskResumeAll>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f47f af68 	bne.w	800d810 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d940:	4b18      	ldr	r3, [pc, #96]	; (800d9a4 <xQueueSemaphoreTake+0x214>)
 800d942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	e75e      	b.n	800d810 <xQueueSemaphoreTake+0x80>
>>>>>>> Stashed changes
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800d9be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9c0:	f000 f8d0 	bl	800db64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9c4:	f000 fc7e 	bl	800e2c4 <xTaskResumeAll>
 800d9c8:	e758      	b.n	800d87c <xQueueSemaphoreTake+0x80>
=======
 800d952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d954:	f000 f8d0 	bl	800daf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d958:	f000 fc7e 	bl	800e258 <xTaskResumeAll>
 800d95c:	e758      	b.n	800d810 <xQueueSemaphoreTake+0x80>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800d9ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9cc:	f000 f8ca 	bl	800db64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9d0:	f000 fc78 	bl	800e2c4 <xTaskResumeAll>
=======
 800d95e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d960:	f000 f8ca 	bl	800daf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d964:	f000 fc78 	bl	800e258 <xTaskResumeAll>
>>>>>>> Stashed changes

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800d9d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9d6:	f000 f917 	bl	800dc08 <prvIsQueueEmpty>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f43f af4d 	beq.w	800d87c <xQueueSemaphoreTake+0x80>
=======
 800d968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d96a:	f000 f917 	bl	800db9c <prvIsQueueEmpty>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	f43f af4d 	beq.w	800d810 <xQueueSemaphoreTake+0x80>
>>>>>>> Stashed changes
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< Updated upstream
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00d      	beq.n	800da04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d9e8:	f001 ff5c 	bl	800f8a4 <vPortEnterCritical>
=======
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00d      	beq.n	800d998 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d97c:	f001 ff5a 	bl	800f834 <vPortEnterCritical>
>>>>>>> Stashed changes
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< Updated upstream
 800d9ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ee:	f000 f811 	bl	800da14 <prvGetDisinheritPriorityAfterTimeout>
 800d9f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800d9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f001 f980 	bl	800ed00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da00:	f001 ff80 	bl	800f904 <vPortExitCritical>
=======
 800d980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d982:	f000 f811 	bl	800d9a8 <prvGetDisinheritPriorityAfterTimeout>
 800d986:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d98e:	4618      	mov	r0, r3
 800d990:	f001 f980 	bl	800ec94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d994:	f001 ff7e 	bl	800f894 <vPortExitCritical>
>>>>>>> Stashed changes
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< Updated upstream
 800da04:	2300      	movs	r3, #0
=======
 800d998:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
<<<<<<< Updated upstream
 800da06:	4618      	mov	r0, r3
 800da08:	3738      	adds	r7, #56	; 0x38
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	e000ed04 	.word	0xe000ed04

0800da14 <prvGetDisinheritPriorityAfterTimeout>:
=======
 800d99a:	4618      	mov	r0, r3
 800d99c:	3738      	adds	r7, #56	; 0x38
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	e000ed04 	.word	0xe000ed04

0800d9a8 <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< Updated upstream
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
=======
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
<<<<<<< Updated upstream
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da20:	2b00      	cmp	r3, #0
 800da22:	d006      	beq.n	800da32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f1c3 0307 	rsb	r3, r3, #7
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	e001      	b.n	800da36 <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d006      	beq.n	800d9c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f1c3 0307 	rsb	r3, r3, #7
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	e001      	b.n	800d9ca <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< Updated upstream
 800da32:	2300      	movs	r3, #0
 800da34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da36:	68fb      	ldr	r3, [r7, #12]
	}
 800da38:	4618      	mov	r0, r3
 800da3a:	3714      	adds	r7, #20
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <prvCopyDataToQueue>:
=======
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
	}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <prvCopyDataToQueue>:
>>>>>>> Stashed changes

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< Updated upstream
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da50:	2300      	movs	r3, #0
 800da52:	617b      	str	r3, [r7, #20]
=======
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10d      	bne.n	800da7e <prvCopyDataToQueue+0x3a>
=======
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d10d      	bne.n	800da12 <prvCopyDataToQueue+0x3a>
>>>>>>> Stashed changes
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d14d      	bne.n	800db06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	4618      	mov	r0, r3
 800da70:	f001 f8c0 	bl	800ebf4 <xTaskPriorityDisinherit>
 800da74:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	605a      	str	r2, [r3, #4]
 800da7c:	e043      	b.n	800db06 <prvCopyDataToQueue+0xc2>
=======
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d14d      	bne.n	800da9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	4618      	mov	r0, r3
 800da04:	f001 f8c0 	bl	800eb88 <xTaskPriorityDisinherit>
 800da08:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	605a      	str	r2, [r3, #4]
 800da10:	e043      	b.n	800da9a <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< Updated upstream
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d119      	bne.n	800dab8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6898      	ldr	r0, [r3, #8]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da8c:	461a      	mov	r2, r3
 800da8e:	68b9      	ldr	r1, [r7, #8]
 800da90:	f002 fc16 	bl	80102c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	689a      	ldr	r2, [r3, #8]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da9c:	441a      	add	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	689a      	ldr	r2, [r3, #8]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d32b      	bcc.n	800db06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	609a      	str	r2, [r3, #8]
 800dab6:	e026      	b.n	800db06 <prvCopyDataToQueue+0xc2>
=======
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d119      	bne.n	800da4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6898      	ldr	r0, [r3, #8]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da20:	461a      	mov	r2, r3
 800da22:	68b9      	ldr	r1, [r7, #8]
 800da24:	f002 fc14 	bl	8010250 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	689a      	ldr	r2, [r3, #8]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da30:	441a      	add	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	689a      	ldr	r2, [r3, #8]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d32b      	bcc.n	800da9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	609a      	str	r2, [r3, #8]
 800da4a:	e026      	b.n	800da9a <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	68d8      	ldr	r0, [r3, #12]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac0:	461a      	mov	r2, r3
 800dac2:	68b9      	ldr	r1, [r7, #8]
 800dac4:	f002 fbfc 	bl	80102c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68da      	ldr	r2, [r3, #12]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad0:	425b      	negs	r3, r3
 800dad2:	441a      	add	r2, r3
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	68da      	ldr	r2, [r3, #12]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d207      	bcs.n	800daf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	685a      	ldr	r2, [r3, #4]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daec:	425b      	negs	r3, r3
 800daee:	441a      	add	r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	60da      	str	r2, [r3, #12]
=======
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	68d8      	ldr	r0, [r3, #12]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da54:	461a      	mov	r2, r3
 800da56:	68b9      	ldr	r1, [r7, #8]
 800da58:	f002 fbfa 	bl	8010250 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	68da      	ldr	r2, [r3, #12]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da64:	425b      	negs	r3, r3
 800da66:	441a      	add	r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	68da      	ldr	r2, [r3, #12]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d207      	bcs.n	800da88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da80:	425b      	negs	r3, r3
 800da82:	441a      	add	r2, r3
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< Updated upstream
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d105      	bne.n	800db06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <prvCopyDataToQueue+0xc2>
=======
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d105      	bne.n	800da9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< Updated upstream
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	3b01      	subs	r3, #1
 800db04:	613b      	str	r3, [r7, #16]
=======
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	3b01      	subs	r3, #1
 800da98:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db0e:	697b      	ldr	r3, [r7, #20]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3718      	adds	r7, #24
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <prvCopyDataFromQueue>:
=======
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	1c5a      	adds	r2, r3, #1
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800daa2:	697b      	ldr	r3, [r7, #20]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3718      	adds	r7, #24
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <prvCopyDataFromQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< Updated upstream
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db26:	2b00      	cmp	r3, #0
 800db28:	d018      	beq.n	800db5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68da      	ldr	r2, [r3, #12]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db32:	441a      	add	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68da      	ldr	r2, [r3, #12]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	429a      	cmp	r2, r3
 800db42:	d303      	bcc.n	800db4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	60da      	str	r2, [r3, #12]
=======
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d018      	beq.n	800daf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68da      	ldr	r2, [r3, #12]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac6:	441a      	add	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68da      	ldr	r2, [r3, #12]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d303      	bcc.n	800dae0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
<<<<<<< Updated upstream
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68d9      	ldr	r1, [r3, #12]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db54:	461a      	mov	r2, r3
 800db56:	6838      	ldr	r0, [r7, #0]
 800db58:	f002 fbb2 	bl	80102c0 <memcpy>
	}
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <prvUnlockQueue>:
=======
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68d9      	ldr	r1, [r3, #12]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae8:	461a      	mov	r2, r3
 800daea:	6838      	ldr	r0, [r7, #0]
 800daec:	f002 fbb0 	bl	8010250 <memcpy>
	}
}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <prvUnlockQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< Updated upstream
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
=======
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800db6c:	f001 fe9a 	bl	800f8a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db78:	e011      	b.n	800db9e <prvUnlockQueue+0x3a>
=======
 800db00:	f001 fe98 	bl	800f834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db0c:	e011      	b.n	800db32 <prvUnlockQueue+0x3a>
>>>>>>> Stashed changes
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d012      	beq.n	800dba8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3324      	adds	r3, #36	; 0x24
 800db86:	4618      	mov	r0, r3
 800db88:	f000 fdca 	bl	800e720 <xTaskRemoveFromEventList>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d001      	beq.n	800db96 <prvUnlockQueue+0x32>
=======
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db12:	2b00      	cmp	r3, #0
 800db14:	d012      	beq.n	800db3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	3324      	adds	r3, #36	; 0x24
 800db1a:	4618      	mov	r0, r3
 800db1c:	f000 fdca 	bl	800e6b4 <xTaskRemoveFromEventList>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <prvUnlockQueue+0x32>
>>>>>>> Stashed changes
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< Updated upstream
 800db92:	f000 fe9f 	bl	800e8d4 <vTaskMissedYield>
=======
 800db26:	f000 fe9f 	bl	800e868 <vTaskMissedYield>
>>>>>>> Stashed changes
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< Updated upstream
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	3b01      	subs	r3, #1
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	dce9      	bgt.n	800db7a <prvUnlockQueue+0x16>
 800dba6:	e000      	b.n	800dbaa <prvUnlockQueue+0x46>
					break;
 800dba8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	22ff      	movs	r2, #255	; 0xff
 800dbae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dbb2:	f001 fea7 	bl	800f904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dbb6:	f001 fe75 	bl	800f8a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbc2:	e011      	b.n	800dbe8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d012      	beq.n	800dbf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	3310      	adds	r3, #16
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 fda5 	bl	800e720 <xTaskRemoveFromEventList>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbdc:	f000 fe7a 	bl	800e8d4 <vTaskMissedYield>
=======
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
 800db2c:	3b01      	subs	r3, #1
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db36:	2b00      	cmp	r3, #0
 800db38:	dce9      	bgt.n	800db0e <prvUnlockQueue+0x16>
 800db3a:	e000      	b.n	800db3e <prvUnlockQueue+0x46>
					break;
 800db3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	22ff      	movs	r2, #255	; 0xff
 800db42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800db46:	f001 fea5 	bl	800f894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db4a:	f001 fe73 	bl	800f834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db56:	e011      	b.n	800db7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d012      	beq.n	800db86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	3310      	adds	r3, #16
 800db64:	4618      	mov	r0, r3
 800db66:	f000 fda5 	bl	800e6b4 <xTaskRemoveFromEventList>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db70:	f000 fe7a 	bl	800e868 <vTaskMissedYield>
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< Updated upstream
 800dbe0:	7bbb      	ldrb	r3, [r7, #14]
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	dce9      	bgt.n	800dbc4 <prvUnlockQueue+0x60>
 800dbf0:	e000      	b.n	800dbf4 <prvUnlockQueue+0x90>
=======
 800db74:	7bbb      	ldrb	r3, [r7, #14]
 800db76:	3b01      	subs	r3, #1
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db80:	2b00      	cmp	r3, #0
 800db82:	dce9      	bgt.n	800db58 <prvUnlockQueue+0x60>
 800db84:	e000      	b.n	800db88 <prvUnlockQueue+0x90>
>>>>>>> Stashed changes
			}
			else
			{
				break;
<<<<<<< Updated upstream
 800dbf2:	bf00      	nop
=======
 800db86:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< Updated upstream
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	22ff      	movs	r2, #255	; 0xff
 800dbf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dbfc:	f001 fe82 	bl	800f904 <vPortExitCritical>
}
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <prvIsQueueEmpty>:
=======
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	22ff      	movs	r2, #255	; 0xff
 800db8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db90:	f001 fe80 	bl	800f894 <vPortExitCritical>
}
 800db94:	bf00      	nop
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <prvIsQueueEmpty>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc10:	f001 fe48 	bl	800f8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d102      	bne.n	800dc22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	e001      	b.n	800dc26 <prvIsQueueEmpty+0x1e>
=======
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dba4:	f001 fe46 	bl	800f834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d102      	bne.n	800dbb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	60fb      	str	r3, [r7, #12]
 800dbb4:	e001      	b.n	800dbba <prvIsQueueEmpty+0x1e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc26:	f001 fe6d 	bl	800f904 <vPortExitCritical>

	return xReturn;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <prvIsQueueFull>:
=======
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbba:	f001 fe6b 	bl	800f894 <vPortExitCritical>

	return xReturn;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <prvIsQueueFull>:
>>>>>>> Stashed changes
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc3c:	f001 fe32 	bl	800f8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d102      	bne.n	800dc52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	e001      	b.n	800dc56 <prvIsQueueFull+0x22>
=======
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbd0:	f001 fe30 	bl	800f834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d102      	bne.n	800dbe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	e001      	b.n	800dbea <prvIsQueueFull+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800dc52:	2300      	movs	r3, #0
 800dc54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc56:	f001 fe55 	bl	800f904 <vPortExitCritical>

	return xReturn;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <vQueueAddToRegistry>:
=======
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbea:	f001 fe53 	bl	800f894 <vPortExitCritical>

	return xReturn;
 800dbee:	68fb      	ldr	r3, [r7, #12]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <vQueueAddToRegistry>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< Updated upstream
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
=======
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< Updated upstream
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
 800dc72:	e014      	b.n	800dc9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc74:	4a0f      	ldr	r2, [pc, #60]	; (800dcb4 <vQueueAddToRegistry+0x50>)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10b      	bne.n	800dc98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc80:	490c      	ldr	r1, [pc, #48]	; (800dcb4 <vQueueAddToRegistry+0x50>)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	683a      	ldr	r2, [r7, #0]
 800dc86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc8a:	4a0a      	ldr	r2, [pc, #40]	; (800dcb4 <vQueueAddToRegistry+0x50>)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	4413      	add	r3, r2
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc96:	e006      	b.n	800dca6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2b07      	cmp	r3, #7
 800dca2:	d9e7      	bls.n	800dc74 <vQueueAddToRegistry+0x10>
=======
 800dc02:	2300      	movs	r3, #0
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	e014      	b.n	800dc32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc08:	4a0f      	ldr	r2, [pc, #60]	; (800dc48 <vQueueAddToRegistry+0x50>)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10b      	bne.n	800dc2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc14:	490c      	ldr	r1, [pc, #48]	; (800dc48 <vQueueAddToRegistry+0x50>)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc1e:	4a0a      	ldr	r2, [pc, #40]	; (800dc48 <vQueueAddToRegistry+0x50>)
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	4413      	add	r3, r2
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc2a:	e006      	b.n	800dc3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	60fb      	str	r3, [r7, #12]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b07      	cmp	r3, #7
 800dc36:	d9e7      	bls.n	800dc08 <vQueueAddToRegistry+0x10>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< Updated upstream
 800dca4:	bf00      	nop
 800dca6:	bf00      	nop
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	20002818 	.word	0x20002818

0800dcb8 <vQueueWaitForMessageRestricted>:
=======
 800dc38:	bf00      	nop
 800dc3a:	bf00      	nop
 800dc3c:	3714      	adds	r7, #20
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	200029c8 	.word	0x200029c8

0800dc4c <vQueueWaitForMessageRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	617b      	str	r3, [r7, #20]
=======
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< Updated upstream
 800dcc8:	f001 fdec 	bl	800f8a4 <vPortEnterCritical>
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcd2:	b25b      	sxtb	r3, r3
 800dcd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd8:	d103      	bne.n	800dce2 <vQueueWaitForMessageRestricted+0x2a>
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d103      	bne.n	800dcf8 <vQueueWaitForMessageRestricted+0x40>
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcf8:	f001 fe04 	bl	800f904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d106      	bne.n	800dd12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	3324      	adds	r3, #36	; 0x24
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	68b9      	ldr	r1, [r7, #8]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f000 fcdb 	bl	800e6c8 <vTaskPlaceOnEventListRestricted>
=======
 800dc5c:	f001 fdea 	bl	800f834 <vPortEnterCritical>
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc66:	b25b      	sxtb	r3, r3
 800dc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc6c:	d103      	bne.n	800dc76 <vQueueWaitForMessageRestricted+0x2a>
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc7c:	b25b      	sxtb	r3, r3
 800dc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc82:	d103      	bne.n	800dc8c <vQueueWaitForMessageRestricted+0x40>
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc8c:	f001 fe02 	bl	800f894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	3324      	adds	r3, #36	; 0x24
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	68b9      	ldr	r1, [r7, #8]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 fcdb 	bl	800e65c <vTaskPlaceOnEventListRestricted>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800dd12:	6978      	ldr	r0, [r7, #20]
 800dd14:	f7ff ff26 	bl	800db64 <prvUnlockQueue>
	}
 800dd18:	bf00      	nop
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <xTaskCreateStatic>:
=======
 800dca6:	6978      	ldr	r0, [r7, #20]
 800dca8:	f7ff ff26 	bl	800daf8 <prvUnlockQueue>
	}
 800dcac:	bf00      	nop
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <xTaskCreateStatic>:
>>>>>>> Stashed changes
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< Updated upstream
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b08e      	sub	sp, #56	; 0x38
 800dd24:	af04      	add	r7, sp, #16
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
=======
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08e      	sub	sp, #56	; 0x38
 800dcb8:	af04      	add	r7, sp, #16
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< Updated upstream
 800dd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10a      	bne.n	800dd4a <xTaskCreateStatic+0x2a>
	__asm volatile
 800dd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	623b      	str	r3, [r7, #32]
}
 800dd46:	bf00      	nop
 800dd48:	e7fe      	b.n	800dd48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10a      	bne.n	800dd66 <xTaskCreateStatic+0x46>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	61fb      	str	r3, [r7, #28]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <xTaskCreateStatic+0x44>
=======
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10a      	bne.n	800dcde <xTaskCreateStatic+0x2a>
	__asm volatile
 800dcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dccc:	f383 8811 	msr	BASEPRI, r3
 800dcd0:	f3bf 8f6f 	isb	sy
 800dcd4:	f3bf 8f4f 	dsb	sy
 800dcd8:	623b      	str	r3, [r7, #32]
}
 800dcda:	bf00      	nop
 800dcdc:	e7fe      	b.n	800dcdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <xTaskCreateStatic+0x46>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	61fb      	str	r3, [r7, #28]
}
 800dcf6:	bf00      	nop
 800dcf8:	e7fe      	b.n	800dcf8 <xTaskCreateStatic+0x44>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< Updated upstream
 800dd66:	23b0      	movs	r3, #176	; 0xb0
 800dd68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	2bb0      	cmp	r3, #176	; 0xb0
 800dd6e:	d00a      	beq.n	800dd86 <xTaskCreateStatic+0x66>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	61bb      	str	r3, [r7, #24]
}
 800dd82:	bf00      	nop
 800dd84:	e7fe      	b.n	800dd84 <xTaskCreateStatic+0x64>
=======
 800dcfa:	23b0      	movs	r3, #176	; 0xb0
 800dcfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2bb0      	cmp	r3, #176	; 0xb0
 800dd02:	d00a      	beq.n	800dd1a <xTaskCreateStatic+0x66>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	61bb      	str	r3, [r7, #24]
}
 800dd16:	bf00      	nop
 800dd18:	e7fe      	b.n	800dd18 <xTaskCreateStatic+0x64>
>>>>>>> Stashed changes
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< Updated upstream
 800dd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d01e      	beq.n	800ddca <xTaskCreateStatic+0xaa>
 800dd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d01b      	beq.n	800ddca <xTaskCreateStatic+0xaa>
=======
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d01e      	beq.n	800dd5e <xTaskCreateStatic+0xaa>
 800dd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d01b      	beq.n	800dd5e <xTaskCreateStatic+0xaa>
>>>>>>> Stashed changes
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd9a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800dd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd2e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	2202      	movs	r2, #2
 800dda0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
=======
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	2202      	movs	r2, #2
 800dd34:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800dda4:	2300      	movs	r3, #0
 800dda6:	9303      	str	r3, [sp, #12]
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	9302      	str	r3, [sp, #8]
 800ddac:	f107 0314 	add.w	r3, r7, #20
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	68b9      	ldr	r1, [r7, #8]
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f000 f851 	bl	800de64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc4:	f000 f8e4 	bl	800df90 <prvAddNewTaskToReadyList>
 800ddc8:	e001      	b.n	800ddce <xTaskCreateStatic+0xae>
=======
 800dd38:	2300      	movs	r3, #0
 800dd3a:	9303      	str	r3, [sp, #12]
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3e:	9302      	str	r3, [sp, #8]
 800dd40:	f107 0314 	add.w	r3, r7, #20
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	68b9      	ldr	r1, [r7, #8]
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f000 f851 	bl	800ddf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd58:	f000 f8e4 	bl	800df24 <prvAddNewTaskToReadyList>
 800dd5c:	e001      	b.n	800dd62 <xTaskCreateStatic+0xae>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = NULL;
<<<<<<< Updated upstream
 800ddca:	2300      	movs	r3, #0
 800ddcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ddce:	697b      	ldr	r3, [r7, #20]
	}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3728      	adds	r7, #40	; 0x28
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <xTaskCreate>:
=======
 800dd5e:	2300      	movs	r3, #0
 800dd60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd62:	697b      	ldr	r3, [r7, #20]
	}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3728      	adds	r7, #40	; 0x28
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <xTaskCreate>:
>>>>>>> Stashed changes
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< Updated upstream
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08c      	sub	sp, #48	; 0x30
 800dddc:	af04      	add	r7, sp, #16
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	603b      	str	r3, [r7, #0]
 800dde4:	4613      	mov	r3, r2
 800dde6:	80fb      	strh	r3, [r7, #6]
=======
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08c      	sub	sp, #48	; 0x30
 800dd70:	af04      	add	r7, sp, #16
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	603b      	str	r3, [r7, #0]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800dde8:	88fb      	ldrh	r3, [r7, #6]
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f001 fe7b 	bl	800fae8 <pvPortMalloc>
 800ddf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00e      	beq.n	800de18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ddfa:	20b0      	movs	r0, #176	; 0xb0
 800ddfc:	f001 fe74 	bl	800fae8 <pvPortMalloc>
 800de00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d003      	beq.n	800de10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	697a      	ldr	r2, [r7, #20]
 800de0c:	631a      	str	r2, [r3, #48]	; 0x30
 800de0e:	e005      	b.n	800de1c <xTaskCreate+0x44>
=======
 800dd7c:	88fb      	ldrh	r3, [r7, #6]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f001 fe79 	bl	800fa78 <pvPortMalloc>
 800dd86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00e      	beq.n	800ddac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800dd8e:	20b0      	movs	r0, #176	; 0xb0
 800dd90:	f001 fe72 	bl	800fa78 <pvPortMalloc>
 800dd94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	631a      	str	r2, [r3, #48]	; 0x30
 800dda2:	e005      	b.n	800ddb0 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< Updated upstream
 800de10:	6978      	ldr	r0, [r7, #20]
 800de12:	f001 ff2d 	bl	800fc70 <vPortFree>
 800de16:	e001      	b.n	800de1c <xTaskCreate+0x44>
=======
 800dda4:	6978      	ldr	r0, [r7, #20]
 800dda6:	f001 ff2b 	bl	800fc00 <vPortFree>
 800ddaa:	e001      	b.n	800ddb0 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< Updated upstream
 800de18:	2300      	movs	r3, #0
 800de1a:	61fb      	str	r3, [r7, #28]
=======
 800ddac:	2300      	movs	r3, #0
 800ddae:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< Updated upstream
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d017      	beq.n	800de52 <xTaskCreate+0x7a>
=======
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d017      	beq.n	800dde6 <xTaskCreate+0x7a>
>>>>>>> Stashed changes
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
=======
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800de2a:	88fa      	ldrh	r2, [r7, #6]
 800de2c:	2300      	movs	r3, #0
 800de2e:	9303      	str	r3, [sp, #12]
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	9302      	str	r3, [sp, #8]
 800de34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	68b9      	ldr	r1, [r7, #8]
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 f80f 	bl	800de64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de46:	69f8      	ldr	r0, [r7, #28]
 800de48:	f000 f8a2 	bl	800df90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de4c:	2301      	movs	r3, #1
 800de4e:	61bb      	str	r3, [r7, #24]
 800de50:	e002      	b.n	800de58 <xTaskCreate+0x80>
=======
 800ddbe:	88fa      	ldrh	r2, [r7, #6]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	9303      	str	r3, [sp, #12]
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	9302      	str	r3, [sp, #8]
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f000 f80f 	bl	800ddf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddda:	69f8      	ldr	r0, [r7, #28]
 800dddc:	f000 f8a2 	bl	800df24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dde0:	2301      	movs	r3, #1
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	e002      	b.n	800ddec <xTaskCreate+0x80>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< Updated upstream
 800de52:	f04f 33ff 	mov.w	r3, #4294967295
 800de56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de58:	69bb      	ldr	r3, [r7, #24]
	}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3720      	adds	r7, #32
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
	...

0800de64 <prvInitialiseNewTask>:
=======
 800dde6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ddec:	69bb      	ldr	r3, [r7, #24]
	}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3720      	adds	r7, #32
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
	...

0800ddf8 <prvInitialiseNewTask>:
>>>>>>> Stashed changes
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< Updated upstream
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	603b      	str	r3, [r7, #0]
=======
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
 800de04:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
<<<<<<< Updated upstream
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800de7c:	3b01      	subs	r3, #1
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	f023 0307 	bic.w	r3, r3, #7
 800de8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	f003 0307 	and.w	r3, r3, #7
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00a      	beq.n	800deac <prvInitialiseNewTask+0x48>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	617b      	str	r3, [r7, #20]
}
 800dea8:	bf00      	nop
 800deaa:	e7fe      	b.n	800deaa <prvInitialiseNewTask+0x46>
=======
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800de10:	3b01      	subs	r3, #1
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	f023 0307 	bic.w	r3, r3, #7
 800de1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	f003 0307 	and.w	r3, r3, #7
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00a      	beq.n	800de40 <prvInitialiseNewTask+0x48>
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	617b      	str	r3, [r7, #20]
}
 800de3c:	bf00      	nop
 800de3e:	e7fe      	b.n	800de3e <prvInitialiseNewTask+0x46>
>>>>>>> Stashed changes
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< Updated upstream
 800deac:	2300      	movs	r3, #0
 800deae:	61fb      	str	r3, [r7, #28]
 800deb0:	e012      	b.n	800ded8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	4413      	add	r3, r2
 800deb8:	7819      	ldrb	r1, [r3, #0]
 800deba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	4413      	add	r3, r2
 800dec0:	3334      	adds	r3, #52	; 0x34
 800dec2:	460a      	mov	r2, r1
 800dec4:	701a      	strb	r2, [r3, #0]
=======
 800de40:	2300      	movs	r3, #0
 800de42:	61fb      	str	r3, [r7, #28]
 800de44:	e012      	b.n	800de6c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	4413      	add	r3, r2
 800de4c:	7819      	ldrb	r1, [r3, #0]
 800de4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	4413      	add	r3, r2
 800de54:	3334      	adds	r3, #52	; 0x34
 800de56:	460a      	mov	r2, r1
 800de58:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
<<<<<<< Updated upstream
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	4413      	add	r3, r2
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d006      	beq.n	800dee0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	3301      	adds	r3, #1
 800ded6:	61fb      	str	r3, [r7, #28]
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	2b1f      	cmp	r3, #31
 800dedc:	d9e9      	bls.n	800deb2 <prvInitialiseNewTask+0x4e>
 800dede:	e000      	b.n	800dee2 <prvInitialiseNewTask+0x7e>
		{
			break;
 800dee0:	bf00      	nop
=======
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	4413      	add	r3, r2
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d006      	beq.n	800de74 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	3301      	adds	r3, #1
 800de6a:	61fb      	str	r3, [r7, #28]
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	2b1f      	cmp	r3, #31
 800de70:	d9e9      	bls.n	800de46 <prvInitialiseNewTask+0x4e>
 800de72:	e000      	b.n	800de76 <prvInitialiseNewTask+0x7e>
		{
			break;
 800de74:	bf00      	nop
>>>>>>> Stashed changes
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< Updated upstream
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
=======
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	2200      	movs	r2, #0
 800de7a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
>>>>>>> Stashed changes

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< Updated upstream
 800deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deec:	2b06      	cmp	r3, #6
 800deee:	d901      	bls.n	800def4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800def0:	2306      	movs	r3, #6
 800def2:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	2b06      	cmp	r3, #6
 800de82:	d901      	bls.n	800de88 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de84:	2306      	movs	r3, #6
 800de86:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< Updated upstream
 800def4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800def8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800defa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800defe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800df00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df02:	2200      	movs	r2, #0
 800df04:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800de88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de92:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800de94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de96:	2200      	movs	r2, #0
 800de98:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> Stashed changes
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800df06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df08:	3304      	adds	r3, #4
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7fe ffe2 	bl	800ced4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	3318      	adds	r3, #24
 800df14:	4618      	mov	r0, r3
 800df16:	f7fe ffdd 	bl	800ced4 <vListInitialiseItem>
=======
 800de9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9c:	3304      	adds	r3, #4
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fe ffe2 	bl	800ce68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea6:	3318      	adds	r3, #24
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe ffdd 	bl	800ce68 <vListInitialiseItem>
>>>>>>> Stashed changes

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< Updated upstream
 800df1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	f1c3 0207 	rsb	r2, r3, #7
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2e:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800deae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	f1c3 0207 	rsb	r2, r3, #7
 800deba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec2:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< Updated upstream
 800df30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df32:	2200      	movs	r2, #0
 800df34:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
=======
 800dec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec6:	2200      	movs	r2, #0
 800dec8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800decc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
>>>>>>> Stashed changes
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< Updated upstream
 800df40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df42:	335c      	adds	r3, #92	; 0x5c
 800df44:	224c      	movs	r2, #76	; 0x4c
 800df46:	2100      	movs	r1, #0
 800df48:	4618      	mov	r0, r3
 800df4a:	f002 f92f 	bl	80101ac <memset>
 800df4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df50:	4a0c      	ldr	r2, [pc, #48]	; (800df84 <prvInitialiseNewTask+0x120>)
 800df52:	661a      	str	r2, [r3, #96]	; 0x60
 800df54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df56:	4a0c      	ldr	r2, [pc, #48]	; (800df88 <prvInitialiseNewTask+0x124>)
 800df58:	665a      	str	r2, [r3, #100]	; 0x64
 800df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5c:	4a0b      	ldr	r2, [pc, #44]	; (800df8c <prvInitialiseNewTask+0x128>)
 800df5e:	669a      	str	r2, [r3, #104]	; 0x68
=======
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	335c      	adds	r3, #92	; 0x5c
 800ded8:	224c      	movs	r2, #76	; 0x4c
 800deda:	2100      	movs	r1, #0
 800dedc:	4618      	mov	r0, r3
 800dede:	f002 f92d 	bl	801013c <memset>
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	4a0c      	ldr	r2, [pc, #48]	; (800df18 <prvInitialiseNewTask+0x120>)
 800dee6:	661a      	str	r2, [r3, #96]	; 0x60
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	4a0c      	ldr	r2, [pc, #48]	; (800df1c <prvInitialiseNewTask+0x124>)
 800deec:	665a      	str	r2, [r3, #100]	; 0x64
 800deee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def0:	4a0b      	ldr	r2, [pc, #44]	; (800df20 <prvInitialiseNewTask+0x128>)
 800def2:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< Updated upstream
 800df60:	683a      	ldr	r2, [r7, #0]
 800df62:	68f9      	ldr	r1, [r7, #12]
 800df64:	69b8      	ldr	r0, [r7, #24]
 800df66:	f001 fb6d 	bl	800f644 <pxPortInitialiseStack>
 800df6a:	4602      	mov	r2, r0
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	601a      	str	r2, [r3, #0]
=======
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	68f9      	ldr	r1, [r7, #12]
 800def8:	69b8      	ldr	r0, [r7, #24]
 800defa:	f001 fb6d 	bl	800f5d8 <pxPortInitialiseStack>
 800defe:	4602      	mov	r2, r0
 800df00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df02:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
<<<<<<< Updated upstream
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <prvInitialiseNewTask+0x118>
=======
 800df04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df06:	2b00      	cmp	r3, #0
 800df08:	d002      	beq.n	800df10 <prvInitialiseNewTask+0x118>
>>>>>>> Stashed changes
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< Updated upstream
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df7a:	601a      	str	r2, [r3, #0]
=======
 800df0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df0e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800df7c:	bf00      	nop
 800df7e:	3720      	adds	r7, #32
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20002ea0 	.word	0x20002ea0
 800df88:	20002f08 	.word	0x20002f08
 800df8c:	20002f70 	.word	0x20002f70

0800df90 <prvAddNewTaskToReadyList>:
=======
 800df10:	bf00      	nop
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	20003050 	.word	0x20003050
 800df1c:	200030b8 	.word	0x200030b8
 800df20:	20003120 	.word	0x20003120

0800df24 <prvAddNewTaskToReadyList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< Updated upstream
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df98:	f001 fc84 	bl	800f8a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df9c:	4b2a      	ldr	r3, [pc, #168]	; (800e048 <prvAddNewTaskToReadyList+0xb8>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	4a29      	ldr	r2, [pc, #164]	; (800e048 <prvAddNewTaskToReadyList+0xb8>)
 800dfa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dfa6:	4b29      	ldr	r3, [pc, #164]	; (800e04c <prvAddNewTaskToReadyList+0xbc>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d109      	bne.n	800dfc2 <prvAddNewTaskToReadyList+0x32>
=======
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df2c:	f001 fc82 	bl	800f834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df30:	4b2a      	ldr	r3, [pc, #168]	; (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3301      	adds	r3, #1
 800df36:	4a29      	ldr	r2, [pc, #164]	; (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df3a:	4b29      	ldr	r3, [pc, #164]	; (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d109      	bne.n	800df56 <prvAddNewTaskToReadyList+0x32>
>>>>>>> Stashed changes
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< Updated upstream
 800dfae:	4a27      	ldr	r2, [pc, #156]	; (800e04c <prvAddNewTaskToReadyList+0xbc>)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dfb4:	4b24      	ldr	r3, [pc, #144]	; (800e048 <prvAddNewTaskToReadyList+0xb8>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d110      	bne.n	800dfde <prvAddNewTaskToReadyList+0x4e>
=======
 800df42:	4a27      	ldr	r2, [pc, #156]	; (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df48:	4b24      	ldr	r3, [pc, #144]	; (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d110      	bne.n	800df72 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< Updated upstream
 800dfbc:	f000 fcae 	bl	800e91c <prvInitialiseTaskLists>
 800dfc0:	e00d      	b.n	800dfde <prvAddNewTaskToReadyList+0x4e>
=======
 800df50:	f000 fcae 	bl	800e8b0 <prvInitialiseTaskLists>
 800df54:	e00d      	b.n	800df72 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< Updated upstream
 800dfc2:	4b23      	ldr	r3, [pc, #140]	; (800e050 <prvAddNewTaskToReadyList+0xc0>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d109      	bne.n	800dfde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dfca:	4b20      	ldr	r3, [pc, #128]	; (800e04c <prvAddNewTaskToReadyList+0xbc>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d802      	bhi.n	800dfde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dfd8:	4a1c      	ldr	r2, [pc, #112]	; (800e04c <prvAddNewTaskToReadyList+0xbc>)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6013      	str	r3, [r2, #0]
=======
 800df56:	4b23      	ldr	r3, [pc, #140]	; (800dfe4 <prvAddNewTaskToReadyList+0xc0>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d109      	bne.n	800df72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df5e:	4b20      	ldr	r3, [pc, #128]	; (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df68:	429a      	cmp	r2, r3
 800df6a:	d802      	bhi.n	800df72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df6c:	4a1c      	ldr	r2, [pc, #112]	; (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< Updated upstream
 800dfde:	4b1d      	ldr	r3, [pc, #116]	; (800e054 <prvAddNewTaskToReadyList+0xc4>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	4a1b      	ldr	r2, [pc, #108]	; (800e054 <prvAddNewTaskToReadyList+0xc4>)
 800dfe6:	6013      	str	r3, [r2, #0]
=======
 800df72:	4b1d      	ldr	r3, [pc, #116]	; (800dfe8 <prvAddNewTaskToReadyList+0xc4>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	4a1b      	ldr	r2, [pc, #108]	; (800dfe8 <prvAddNewTaskToReadyList+0xc4>)
 800df7a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< Updated upstream
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfec:	2201      	movs	r2, #1
 800dfee:	409a      	lsls	r2, r3
 800dff0:	4b19      	ldr	r3, [pc, #100]	; (800e058 <prvAddNewTaskToReadyList+0xc8>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	4a18      	ldr	r2, [pc, #96]	; (800e058 <prvAddNewTaskToReadyList+0xc8>)
 800dff8:	6013      	str	r3, [r2, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffe:	4613      	mov	r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4a15      	ldr	r2, [pc, #84]	; (800e05c <prvAddNewTaskToReadyList+0xcc>)
 800e008:	441a      	add	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	3304      	adds	r3, #4
 800e00e:	4619      	mov	r1, r3
 800e010:	4610      	mov	r0, r2
 800e012:	f7fe ff6c 	bl	800ceee <vListInsertEnd>
=======
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df80:	2201      	movs	r2, #1
 800df82:	409a      	lsls	r2, r3
 800df84:	4b19      	ldr	r3, [pc, #100]	; (800dfec <prvAddNewTaskToReadyList+0xc8>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4313      	orrs	r3, r2
 800df8a:	4a18      	ldr	r2, [pc, #96]	; (800dfec <prvAddNewTaskToReadyList+0xc8>)
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df92:	4613      	mov	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	4413      	add	r3, r2
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4a15      	ldr	r2, [pc, #84]	; (800dff0 <prvAddNewTaskToReadyList+0xcc>)
 800df9c:	441a      	add	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	f7fe ff6c 	bl	800ce82 <vListInsertEnd>
>>>>>>> Stashed changes

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800e016:	f001 fc75 	bl	800f904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e01a:	4b0d      	ldr	r3, [pc, #52]	; (800e050 <prvAddNewTaskToReadyList+0xc0>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00e      	beq.n	800e040 <prvAddNewTaskToReadyList+0xb0>
=======
 800dfaa:	f001 fc73 	bl	800f894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dfae:	4b0d      	ldr	r3, [pc, #52]	; (800dfe4 <prvAddNewTaskToReadyList+0xc0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00e      	beq.n	800dfd4 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> Stashed changes
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< Updated upstream
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <prvAddNewTaskToReadyList+0xbc>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d207      	bcs.n	800e040 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e030:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <prvAddNewTaskToReadyList+0xd0>)
 800e032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	f3bf 8f6f 	isb	sy
=======
 800dfb6:	4b0a      	ldr	r3, [pc, #40]	; (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d207      	bcs.n	800dfd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	; (800dff4 <prvAddNewTaskToReadyList+0xd0>)
 800dfc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	20002958 	.word	0x20002958
 800e04c:	20002858 	.word	0x20002858
 800e050:	20002964 	.word	0x20002964
 800e054:	20002974 	.word	0x20002974
 800e058:	20002960 	.word	0x20002960
 800e05c:	2000285c 	.word	0x2000285c
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <vTaskDelayUntil>:
=======
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20002b08 	.word	0x20002b08
 800dfe0:	20002a08 	.word	0x20002a08
 800dfe4:	20002b14 	.word	0x20002b14
 800dfe8:	20002b24 	.word	0x20002b24
 800dfec:	20002b10 	.word	0x20002b10
 800dff0:	20002a0c 	.word	0x20002a0c
 800dff4:	e000ed04 	.word	0xe000ed04

0800dff8 <vTaskDelayUntil>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
<<<<<<< Updated upstream
 800e064:	b580      	push	{r7, lr}
 800e066:	b08a      	sub	sp, #40	; 0x28
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e06e:	2300      	movs	r3, #0
 800e070:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10a      	bne.n	800e08e <vTaskDelayUntil+0x2a>
	__asm volatile
 800e078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07c:	f383 8811 	msr	BASEPRI, r3
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	617b      	str	r3, [r7, #20]
}
 800e08a:	bf00      	nop
 800e08c:	e7fe      	b.n	800e08c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10a      	bne.n	800e0aa <vTaskDelayUntil+0x46>
	__asm volatile
 800e094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	613b      	str	r3, [r7, #16]
}
 800e0a6:	bf00      	nop
 800e0a8:	e7fe      	b.n	800e0a8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e0aa:	4b2a      	ldr	r3, [pc, #168]	; (800e154 <vTaskDelayUntil+0xf0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00a      	beq.n	800e0c8 <vTaskDelayUntil+0x64>
	__asm volatile
 800e0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	60fb      	str	r3, [r7, #12]
}
 800e0c4:	bf00      	nop
 800e0c6:	e7fe      	b.n	800e0c6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e0c8:	f000 f8ee 	bl	800e2a8 <vTaskSuspendAll>
=======
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b08a      	sub	sp, #40	; 0x28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e002:	2300      	movs	r3, #0
 800e004:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10a      	bne.n	800e022 <vTaskDelayUntil+0x2a>
	__asm volatile
 800e00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	617b      	str	r3, [r7, #20]
}
 800e01e:	bf00      	nop
 800e020:	e7fe      	b.n	800e020 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10a      	bne.n	800e03e <vTaskDelayUntil+0x46>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	613b      	str	r3, [r7, #16]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e03e:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <vTaskDelayUntil+0xf0>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00a      	beq.n	800e05c <vTaskDelayUntil+0x64>
	__asm volatile
 800e046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04a:	f383 8811 	msr	BASEPRI, r3
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	60fb      	str	r3, [r7, #12]
}
 800e058:	bf00      	nop
 800e05a:	e7fe      	b.n	800e05a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e05c:	f000 f8ee 	bl	800e23c <vTaskSuspendAll>
>>>>>>> Stashed changes
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
<<<<<<< Updated upstream
 800e0cc:	4b22      	ldr	r3, [pc, #136]	; (800e158 <vTaskDelayUntil+0xf4>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	4413      	add	r3, r2
 800e0da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6a3a      	ldr	r2, [r7, #32]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d20b      	bcs.n	800e0fe <vTaskDelayUntil+0x9a>
=======
 800e060:	4b22      	ldr	r3, [pc, #136]	; (800e0ec <vTaskDelayUntil+0xf4>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	4413      	add	r3, r2
 800e06e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6a3a      	ldr	r2, [r7, #32]
 800e076:	429a      	cmp	r2, r3
 800e078:	d20b      	bcs.n	800e092 <vTaskDelayUntil+0x9a>
>>>>>>> Stashed changes
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
<<<<<<< Updated upstream
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	69fa      	ldr	r2, [r7, #28]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d211      	bcs.n	800e114 <vTaskDelayUntil+0xb0>
 800e0f0:	69fa      	ldr	r2, [r7, #28]
 800e0f2:	6a3b      	ldr	r3, [r7, #32]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d90d      	bls.n	800e114 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e0fc:	e00a      	b.n	800e114 <vTaskDelayUntil+0xb0>
=======
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	69fa      	ldr	r2, [r7, #28]
 800e080:	429a      	cmp	r2, r3
 800e082:	d211      	bcs.n	800e0a8 <vTaskDelayUntil+0xb0>
 800e084:	69fa      	ldr	r2, [r7, #28]
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d90d      	bls.n	800e0a8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e08c:	2301      	movs	r3, #1
 800e08e:	627b      	str	r3, [r7, #36]	; 0x24
 800e090:	e00a      	b.n	800e0a8 <vTaskDelayUntil+0xb0>
>>>>>>> Stashed changes
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
<<<<<<< Updated upstream
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	69fa      	ldr	r2, [r7, #28]
 800e104:	429a      	cmp	r2, r3
 800e106:	d303      	bcc.n	800e110 <vTaskDelayUntil+0xac>
 800e108:	69fa      	ldr	r2, [r7, #28]
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d901      	bls.n	800e114 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e110:	2301      	movs	r3, #1
 800e112:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	69fa      	ldr	r2, [r7, #28]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d303      	bcc.n	800e0a4 <vTaskDelayUntil+0xac>
 800e09c:	69fa      	ldr	r2, [r7, #28]
 800e09e:	6a3b      	ldr	r3, [r7, #32]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d901      	bls.n	800e0a8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
<<<<<<< Updated upstream
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	69fa      	ldr	r2, [r7, #28]
 800e118:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d006      	beq.n	800e12e <vTaskDelayUntil+0xca>
=======
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	69fa      	ldr	r2, [r7, #28]
 800e0ac:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d006      	beq.n	800e0c2 <vTaskDelayUntil+0xca>
>>>>>>> Stashed changes
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
<<<<<<< Updated upstream
 800e120:	69fa      	ldr	r2, [r7, #28]
 800e122:	6a3b      	ldr	r3, [r7, #32]
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	2100      	movs	r1, #0
 800e128:	4618      	mov	r0, r3
 800e12a:	f000 fe9d 	bl	800ee68 <prvAddCurrentTaskToDelayedList>
=======
 800e0b4:	69fa      	ldr	r2, [r7, #28]
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	1ad3      	subs	r3, r2, r3
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 fe9d 	bl	800edfc <prvAddCurrentTaskToDelayedList>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
<<<<<<< Updated upstream
 800e12e:	f000 f8c9 	bl	800e2c4 <xTaskResumeAll>
 800e132:	61b8      	str	r0, [r7, #24]
=======
 800e0c2:	f000 f8c9 	bl	800e258 <xTaskResumeAll>
 800e0c6:	61b8      	str	r0, [r7, #24]
>>>>>>> Stashed changes

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d107      	bne.n	800e14a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e13a:	4b08      	ldr	r3, [pc, #32]	; (800e15c <vTaskDelayUntil+0xf8>)
 800e13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e140:	601a      	str	r2, [r3, #0]
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	f3bf 8f6f 	isb	sy
=======
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d107      	bne.n	800e0de <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e0ce:	4b08      	ldr	r3, [pc, #32]	; (800e0f0 <vTaskDelayUntil+0xf8>)
 800e0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800e14a:	bf00      	nop
 800e14c:	3728      	adds	r7, #40	; 0x28
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	20002980 	.word	0x20002980
 800e158:	2000295c 	.word	0x2000295c
 800e15c:	e000ed04 	.word	0xe000ed04

0800e160 <vTaskDelay>:
=======
 800e0de:	bf00      	nop
 800e0e0:	3728      	adds	r7, #40	; 0x28
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20002b30 	.word	0x20002b30
 800e0ec:	20002b0c 	.word	0x20002b0c
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <vTaskDelay>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< Updated upstream
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e168:	2300      	movs	r3, #0
 800e16a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d017      	beq.n	800e1a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e172:	4b13      	ldr	r3, [pc, #76]	; (800e1c0 <vTaskDelay+0x60>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00a      	beq.n	800e190 <vTaskDelay+0x30>
	__asm volatile
 800e17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17e:	f383 8811 	msr	BASEPRI, r3
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	60bb      	str	r3, [r7, #8]
}
 800e18c:	bf00      	nop
 800e18e:	e7fe      	b.n	800e18e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e190:	f000 f88a 	bl	800e2a8 <vTaskSuspendAll>
=======
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d017      	beq.n	800e136 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e106:	4b13      	ldr	r3, [pc, #76]	; (800e154 <vTaskDelay+0x60>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00a      	beq.n	800e124 <vTaskDelay+0x30>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60bb      	str	r3, [r7, #8]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e124:	f000 f88a 	bl	800e23c <vTaskSuspendAll>
>>>>>>> Stashed changes
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< Updated upstream
 800e194:	2100      	movs	r1, #0
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fe66 	bl	800ee68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e19c:	f000 f892 	bl	800e2c4 <xTaskResumeAll>
 800e1a0:	60f8      	str	r0, [r7, #12]
=======
 800e128:	2100      	movs	r1, #0
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 fe66 	bl	800edfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e130:	f000 f892 	bl	800e258 <xTaskResumeAll>
 800e134:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d107      	bne.n	800e1b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e1a8:	4b06      	ldr	r3, [pc, #24]	; (800e1c4 <vTaskDelay+0x64>)
 800e1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	f3bf 8f6f 	isb	sy
=======
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d107      	bne.n	800e14c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e13c:	4b06      	ldr	r3, [pc, #24]	; (800e158 <vTaskDelay+0x64>)
 800e13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800e1b8:	bf00      	nop
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	20002980 	.word	0x20002980
 800e1c4:	e000ed04 	.word	0xe000ed04

0800e1c8 <vTaskStartScheduler>:
=======
 800e14c:	bf00      	nop
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	20002b30 	.word	0x20002b30
 800e158:	e000ed04 	.word	0xe000ed04

0800e15c <vTaskStartScheduler>:
>>>>>>> Stashed changes

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< Updated upstream
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	af04      	add	r7, sp, #16
=======
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b08a      	sub	sp, #40	; 0x28
 800e160:	af04      	add	r7, sp, #16
>>>>>>> Stashed changes
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	607b      	str	r3, [r7, #4]
=======
 800e162:	2300      	movs	r3, #0
 800e164:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< Updated upstream
 800e1d6:	463a      	mov	r2, r7
 800e1d8:	1d39      	adds	r1, r7, #4
 800e1da:	f107 0308 	add.w	r3, r7, #8
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7f5 fa9a 	bl	8003718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1e4:	6839      	ldr	r1, [r7, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	9202      	str	r2, [sp, #8]
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	460a      	mov	r2, r1
 800e1f6:	4924      	ldr	r1, [pc, #144]	; (800e288 <vTaskStartScheduler+0xc0>)
 800e1f8:	4824      	ldr	r0, [pc, #144]	; (800e28c <vTaskStartScheduler+0xc4>)
 800e1fa:	f7ff fd91 	bl	800dd20 <xTaskCreateStatic>
 800e1fe:	4603      	mov	r3, r0
 800e200:	4a23      	ldr	r2, [pc, #140]	; (800e290 <vTaskStartScheduler+0xc8>)
 800e202:	6013      	str	r3, [r2, #0]
=======
 800e16a:	463a      	mov	r2, r7
 800e16c:	1d39      	adds	r1, r7, #4
 800e16e:	f107 0308 	add.w	r3, r7, #8
 800e172:	4618      	mov	r0, r3
 800e174:	f7f5 fa1a 	bl	80035ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	9202      	str	r2, [sp, #8]
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	2300      	movs	r3, #0
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	2300      	movs	r3, #0
 800e188:	460a      	mov	r2, r1
 800e18a:	4924      	ldr	r1, [pc, #144]	; (800e21c <vTaskStartScheduler+0xc0>)
 800e18c:	4824      	ldr	r0, [pc, #144]	; (800e220 <vTaskStartScheduler+0xc4>)
 800e18e:	f7ff fd91 	bl	800dcb4 <xTaskCreateStatic>
 800e192:	4603      	mov	r3, r0
 800e194:	4a23      	ldr	r2, [pc, #140]	; (800e224 <vTaskStartScheduler+0xc8>)
 800e196:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< Updated upstream
 800e204:	4b22      	ldr	r3, [pc, #136]	; (800e290 <vTaskStartScheduler+0xc8>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e20c:	2301      	movs	r3, #1
 800e20e:	617b      	str	r3, [r7, #20]
 800e210:	e001      	b.n	800e216 <vTaskStartScheduler+0x4e>
=======
 800e198:	4b22      	ldr	r3, [pc, #136]	; (800e224 <vTaskStartScheduler+0xc8>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d002      	beq.n	800e1a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	e001      	b.n	800e1aa <vTaskStartScheduler+0x4e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< Updated upstream
 800e212:	2300      	movs	r3, #0
 800e214:	617b      	str	r3, [r7, #20]
=======
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< Updated upstream
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d102      	bne.n	800e222 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e21c:	f000 fe8a 	bl	800ef34 <xTimerCreateTimerTask>
 800e220:	6178      	str	r0, [r7, #20]
=======
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d102      	bne.n	800e1b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1b0:	f000 fe8a 	bl	800eec8 <xTimerCreateTimerTask>
 800e1b4:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< Updated upstream
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d11b      	bne.n	800e260 <vTaskStartScheduler+0x98>
	__asm volatile
 800e228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	613b      	str	r3, [r7, #16]
}
 800e23a:	bf00      	nop
=======
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d11b      	bne.n	800e1f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	613b      	str	r3, [r7, #16]
}
 800e1ce:	bf00      	nop
>>>>>>> Stashed changes

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< Updated upstream
 800e23c:	4b15      	ldr	r3, [pc, #84]	; (800e294 <vTaskStartScheduler+0xcc>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	335c      	adds	r3, #92	; 0x5c
 800e242:	4a15      	ldr	r2, [pc, #84]	; (800e298 <vTaskStartScheduler+0xd0>)
 800e244:	6013      	str	r3, [r2, #0]
=======
 800e1d0:	4b15      	ldr	r3, [pc, #84]	; (800e228 <vTaskStartScheduler+0xcc>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	335c      	adds	r3, #92	; 0x5c
 800e1d6:	4a15      	ldr	r2, [pc, #84]	; (800e22c <vTaskStartScheduler+0xd0>)
 800e1d8:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800e246:	4b15      	ldr	r3, [pc, #84]	; (800e29c <vTaskStartScheduler+0xd4>)
 800e248:	f04f 32ff 	mov.w	r2, #4294967295
 800e24c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e24e:	4b14      	ldr	r3, [pc, #80]	; (800e2a0 <vTaskStartScheduler+0xd8>)
 800e250:	2201      	movs	r2, #1
 800e252:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e254:	4b13      	ldr	r3, [pc, #76]	; (800e2a4 <vTaskStartScheduler+0xdc>)
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
=======
 800e1da:	4b15      	ldr	r3, [pc, #84]	; (800e230 <vTaskStartScheduler+0xd4>)
 800e1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1e2:	4b14      	ldr	r3, [pc, #80]	; (800e234 <vTaskStartScheduler+0xd8>)
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e1e8:	4b13      	ldr	r3, [pc, #76]	; (800e238 <vTaskStartScheduler+0xdc>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< Updated upstream
 800e25a:	f001 fa81 	bl	800f760 <xPortStartScheduler>
=======
 800e1ee:	f001 fa7f 	bl	800f6f0 <xPortStartScheduler>
>>>>>>> Stashed changes
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< Updated upstream
 800e25e:	e00e      	b.n	800e27e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e266:	d10a      	bne.n	800e27e <vTaskStartScheduler+0xb6>
	__asm volatile
 800e268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	60fb      	str	r3, [r7, #12]
}
 800e27a:	bf00      	nop
 800e27c:	e7fe      	b.n	800e27c <vTaskStartScheduler+0xb4>
}
 800e27e:	bf00      	nop
 800e280:	3718      	adds	r7, #24
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	08011984 	.word	0x08011984
 800e28c:	0800e8ed 	.word	0x0800e8ed
 800e290:	2000297c 	.word	0x2000297c
 800e294:	20002858 	.word	0x20002858
 800e298:	20000110 	.word	0x20000110
 800e29c:	20002978 	.word	0x20002978
 800e2a0:	20002964 	.word	0x20002964
 800e2a4:	2000295c 	.word	0x2000295c

0800e2a8 <vTaskSuspendAll>:
=======
 800e1f2:	e00e      	b.n	800e212 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fa:	d10a      	bne.n	800e212 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	60fb      	str	r3, [r7, #12]
}
 800e20e:	bf00      	nop
 800e210:	e7fe      	b.n	800e210 <vTaskStartScheduler+0xb4>
}
 800e212:	bf00      	nop
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	08011914 	.word	0x08011914
 800e220:	0800e881 	.word	0x0800e881
 800e224:	20002b2c 	.word	0x20002b2c
 800e228:	20002a08 	.word	0x20002a08
 800e22c:	20000114 	.word	0x20000114
 800e230:	20002b28 	.word	0x20002b28
 800e234:	20002b14 	.word	0x20002b14
 800e238:	20002b0c 	.word	0x20002b0c

0800e23c <vTaskSuspendAll>:
>>>>>>> Stashed changes
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< Updated upstream
 800e2a8:	b480      	push	{r7}
 800e2aa:	af00      	add	r7, sp, #0
=======
 800e23c:	b480      	push	{r7}
 800e23e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< Updated upstream
 800e2ac:	4b04      	ldr	r3, [pc, #16]	; (800e2c0 <vTaskSuspendAll+0x18>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	4a03      	ldr	r2, [pc, #12]	; (800e2c0 <vTaskSuspendAll+0x18>)
 800e2b4:	6013      	str	r3, [r2, #0]
}
 800e2b6:	bf00      	nop
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr
 800e2c0:	20002980 	.word	0x20002980

0800e2c4 <xTaskResumeAll>:
=======
 800e240:	4b04      	ldr	r3, [pc, #16]	; (800e254 <vTaskSuspendAll+0x18>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	4a03      	ldr	r2, [pc, #12]	; (800e254 <vTaskSuspendAll+0x18>)
 800e248:	6013      	str	r3, [r2, #0]
}
 800e24a:	bf00      	nop
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	20002b30 	.word	0x20002b30

0800e258 <xTaskResumeAll>:
>>>>>>> Stashed changes

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< Updated upstream
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	60bb      	str	r3, [r7, #8]
=======
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e25e:	2300      	movs	r3, #0
 800e260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e262:	2300      	movs	r3, #0
 800e264:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< Updated upstream
 800e2d2:	4b41      	ldr	r3, [pc, #260]	; (800e3d8 <xTaskResumeAll+0x114>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10a      	bne.n	800e2f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800e2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	603b      	str	r3, [r7, #0]
}
 800e2ec:	bf00      	nop
 800e2ee:	e7fe      	b.n	800e2ee <xTaskResumeAll+0x2a>
=======
 800e266:	4b41      	ldr	r3, [pc, #260]	; (800e36c <xTaskResumeAll+0x114>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <xTaskResumeAll+0x2c>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	603b      	str	r3, [r7, #0]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <xTaskResumeAll+0x2a>
>>>>>>> Stashed changes
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800e2f0:	f001 fad8 	bl	800f8a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2f4:	4b38      	ldr	r3, [pc, #224]	; (800e3d8 <xTaskResumeAll+0x114>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	4a37      	ldr	r2, [pc, #220]	; (800e3d8 <xTaskResumeAll+0x114>)
 800e2fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2fe:	4b36      	ldr	r3, [pc, #216]	; (800e3d8 <xTaskResumeAll+0x114>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d161      	bne.n	800e3ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e306:	4b35      	ldr	r3, [pc, #212]	; (800e3dc <xTaskResumeAll+0x118>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d05d      	beq.n	800e3ca <xTaskResumeAll+0x106>
=======
 800e284:	f001 fad6 	bl	800f834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e288:	4b38      	ldr	r3, [pc, #224]	; (800e36c <xTaskResumeAll+0x114>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	4a37      	ldr	r2, [pc, #220]	; (800e36c <xTaskResumeAll+0x114>)
 800e290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e292:	4b36      	ldr	r3, [pc, #216]	; (800e36c <xTaskResumeAll+0x114>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d161      	bne.n	800e35e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e29a:	4b35      	ldr	r3, [pc, #212]	; (800e370 <xTaskResumeAll+0x118>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d05d      	beq.n	800e35e <xTaskResumeAll+0x106>
>>>>>>> Stashed changes
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< Updated upstream
 800e30e:	e02e      	b.n	800e36e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e310:	4b33      	ldr	r3, [pc, #204]	; (800e3e0 <xTaskResumeAll+0x11c>)
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3318      	adds	r3, #24
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe fe43 	bl	800cfa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	3304      	adds	r3, #4
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe fe3e 	bl	800cfa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e330:	2201      	movs	r2, #1
 800e332:	409a      	lsls	r2, r3
 800e334:	4b2b      	ldr	r3, [pc, #172]	; (800e3e4 <xTaskResumeAll+0x120>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4313      	orrs	r3, r2
 800e33a:	4a2a      	ldr	r2, [pc, #168]	; (800e3e4 <xTaskResumeAll+0x120>)
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e342:	4613      	mov	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4a27      	ldr	r2, [pc, #156]	; (800e3e8 <xTaskResumeAll+0x124>)
 800e34c:	441a      	add	r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3304      	adds	r3, #4
 800e352:	4619      	mov	r1, r3
 800e354:	4610      	mov	r0, r2
 800e356:	f7fe fdca 	bl	800ceee <vListInsertEnd>
=======
 800e2a2:	e02e      	b.n	800e302 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e2a4:	4b33      	ldr	r3, [pc, #204]	; (800e374 <xTaskResumeAll+0x11c>)
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3318      	adds	r3, #24
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fe fe43 	bl	800cf3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe fe3e 	bl	800cf3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	409a      	lsls	r2, r3
 800e2c8:	4b2b      	ldr	r3, [pc, #172]	; (800e378 <xTaskResumeAll+0x120>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	4a2a      	ldr	r2, [pc, #168]	; (800e378 <xTaskResumeAll+0x120>)
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	4413      	add	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	4a27      	ldr	r2, [pc, #156]	; (800e37c <xTaskResumeAll+0x124>)
 800e2e0:	441a      	add	r2, r3
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	f7fe fdca 	bl	800ce82 <vListInsertEnd>
>>>>>>> Stashed changes

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e35e:	4b23      	ldr	r3, [pc, #140]	; (800e3ec <xTaskResumeAll+0x128>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	429a      	cmp	r2, r3
 800e366:	d302      	bcc.n	800e36e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e368:	4b21      	ldr	r3, [pc, #132]	; (800e3f0 <xTaskResumeAll+0x12c>)
 800e36a:	2201      	movs	r2, #1
 800e36c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e36e:	4b1c      	ldr	r3, [pc, #112]	; (800e3e0 <xTaskResumeAll+0x11c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1cc      	bne.n	800e310 <xTaskResumeAll+0x4c>
=======
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f2:	4b23      	ldr	r3, [pc, #140]	; (800e380 <xTaskResumeAll+0x128>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d302      	bcc.n	800e302 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e2fc:	4b21      	ldr	r3, [pc, #132]	; (800e384 <xTaskResumeAll+0x12c>)
 800e2fe:	2201      	movs	r2, #1
 800e300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e302:	4b1c      	ldr	r3, [pc, #112]	; (800e374 <xTaskResumeAll+0x11c>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1cc      	bne.n	800e2a4 <xTaskResumeAll+0x4c>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< Updated upstream
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <xTaskResumeAll+0xbc>
=======
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <xTaskResumeAll+0xbc>
>>>>>>> Stashed changes
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< Updated upstream
 800e37c:	f000 fb70 	bl	800ea60 <prvResetNextTaskUnblockTime>
=======
 800e310:	f000 fb70 	bl	800e9f4 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< Updated upstream
 800e380:	4b1c      	ldr	r3, [pc, #112]	; (800e3f4 <xTaskResumeAll+0x130>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d010      	beq.n	800e3ae <xTaskResumeAll+0xea>
=======
 800e314:	4b1c      	ldr	r3, [pc, #112]	; (800e388 <xTaskResumeAll+0x130>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d010      	beq.n	800e342 <xTaskResumeAll+0xea>
>>>>>>> Stashed changes
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 800e38c:	f000 f858 	bl	800e440 <xTaskIncrementTick>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d002      	beq.n	800e39c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e396:	4b16      	ldr	r3, [pc, #88]	; (800e3f0 <xTaskResumeAll+0x12c>)
 800e398:	2201      	movs	r2, #1
 800e39a:	601a      	str	r2, [r3, #0]
=======
 800e320:	f000 f858 	bl	800e3d4 <xTaskIncrementTick>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d002      	beq.n	800e330 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e32a:	4b16      	ldr	r3, [pc, #88]	; (800e384 <xTaskResumeAll+0x12c>)
 800e32c:	2201      	movs	r2, #1
 800e32e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< Updated upstream
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1f1      	bne.n	800e38c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e3a8:	4b12      	ldr	r3, [pc, #72]	; (800e3f4 <xTaskResumeAll+0x130>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	601a      	str	r2, [r3, #0]
=======
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3b01      	subs	r3, #1
 800e334:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1f1      	bne.n	800e320 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e33c:	4b12      	ldr	r3, [pc, #72]	; (800e388 <xTaskResumeAll+0x130>)
 800e33e:	2200      	movs	r2, #0
 800e340:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800e3ae:	4b10      	ldr	r3, [pc, #64]	; (800e3f0 <xTaskResumeAll+0x12c>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d009      	beq.n	800e3ca <xTaskResumeAll+0x106>
=======
 800e342:	4b10      	ldr	r3, [pc, #64]	; (800e384 <xTaskResumeAll+0x12c>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d009      	beq.n	800e35e <xTaskResumeAll+0x106>
>>>>>>> Stashed changes
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< Updated upstream
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e3ba:	4b0f      	ldr	r3, [pc, #60]	; (800e3f8 <xTaskResumeAll+0x134>)
 800e3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c0:	601a      	str	r2, [r3, #0]
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	f3bf 8f6f 	isb	sy
=======
 800e34a:	2301      	movs	r3, #1
 800e34c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e34e:	4b0f      	ldr	r3, [pc, #60]	; (800e38c <xTaskResumeAll+0x134>)
 800e350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e354:	601a      	str	r2, [r3, #0]
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800e3ca:	f001 fa9b 	bl	800f904 <vPortExitCritical>

	return xAlreadyYielded;
 800e3ce:	68bb      	ldr	r3, [r7, #8]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3710      	adds	r7, #16
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	20002980 	.word	0x20002980
 800e3dc:	20002958 	.word	0x20002958
 800e3e0:	20002918 	.word	0x20002918
 800e3e4:	20002960 	.word	0x20002960
 800e3e8:	2000285c 	.word	0x2000285c
 800e3ec:	20002858 	.word	0x20002858
 800e3f0:	2000296c 	.word	0x2000296c
 800e3f4:	20002968 	.word	0x20002968
 800e3f8:	e000ed04 	.word	0xe000ed04

0800e3fc <xTaskGetTickCount>:
=======
 800e35e:	f001 fa99 	bl	800f894 <vPortExitCritical>

	return xAlreadyYielded;
 800e362:	68bb      	ldr	r3, [r7, #8]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	20002b30 	.word	0x20002b30
 800e370:	20002b08 	.word	0x20002b08
 800e374:	20002ac8 	.word	0x20002ac8
 800e378:	20002b10 	.word	0x20002b10
 800e37c:	20002a0c 	.word	0x20002a0c
 800e380:	20002a08 	.word	0x20002a08
 800e384:	20002b1c 	.word	0x20002b1c
 800e388:	20002b18 	.word	0x20002b18
 800e38c:	e000ed04 	.word	0xe000ed04

0800e390 <xTaskGetTickCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< Updated upstream
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
=======
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< Updated upstream
 800e402:	4b05      	ldr	r3, [pc, #20]	; (800e418 <xTaskGetTickCount+0x1c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	607b      	str	r3, [r7, #4]
=======
 800e396:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <xTaskGetTickCount+0x1c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< Updated upstream
 800e408:	687b      	ldr	r3, [r7, #4]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	370c      	adds	r7, #12
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	2000295c 	.word	0x2000295c

0800e41c <xTaskGetTickCountFromISR>:
=======
 800e39c:	687b      	ldr	r3, [r7, #4]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	20002b0c 	.word	0x20002b0c

0800e3b0 <xTaskGetTickCountFromISR>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
<<<<<<< Updated upstream
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
=======
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 800e422:	f001 fb21 	bl	800fa68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e426:	2300      	movs	r3, #0
 800e428:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e42a:	4b04      	ldr	r3, [pc, #16]	; (800e43c <xTaskGetTickCountFromISR+0x20>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	603b      	str	r3, [r7, #0]
=======
 800e3b6:	f001 fb1f 	bl	800f9f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e3be:	4b04      	ldr	r3, [pc, #16]	; (800e3d0 <xTaskGetTickCountFromISR+0x20>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 800e430:	683b      	ldr	r3, [r7, #0]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	2000295c 	.word	0x2000295c

0800e440 <xTaskIncrementTick>:
=======
 800e3c4:	683b      	ldr	r3, [r7, #0]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	20002b0c 	.word	0x20002b0c

0800e3d4 <xTaskIncrementTick>:
>>>>>>> Stashed changes

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< Updated upstream
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e446:	2300      	movs	r3, #0
 800e448:	617b      	str	r3, [r7, #20]
=======
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b086      	sub	sp, #24
 800e3d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800e44a:	4b51      	ldr	r3, [pc, #324]	; (800e590 <xTaskIncrementTick+0x150>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f040 808d 	bne.w	800e56e <xTaskIncrementTick+0x12e>
=======
 800e3de:	4b51      	ldr	r3, [pc, #324]	; (800e524 <xTaskIncrementTick+0x150>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f040 808d 	bne.w	800e502 <xTaskIncrementTick+0x12e>
>>>>>>> Stashed changes
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< Updated upstream
 800e454:	4b4f      	ldr	r3, [pc, #316]	; (800e594 <xTaskIncrementTick+0x154>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	3301      	adds	r3, #1
 800e45a:	613b      	str	r3, [r7, #16]
=======
 800e3e8:	4b4f      	ldr	r3, [pc, #316]	; (800e528 <xTaskIncrementTick+0x154>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< Updated upstream
 800e45c:	4a4d      	ldr	r2, [pc, #308]	; (800e594 <xTaskIncrementTick+0x154>)
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d120      	bne.n	800e4aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e468:	4b4b      	ldr	r3, [pc, #300]	; (800e598 <xTaskIncrementTick+0x158>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00a      	beq.n	800e488 <xTaskIncrementTick+0x48>
	__asm volatile
 800e472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e476:	f383 8811 	msr	BASEPRI, r3
 800e47a:	f3bf 8f6f 	isb	sy
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	603b      	str	r3, [r7, #0]
}
 800e484:	bf00      	nop
 800e486:	e7fe      	b.n	800e486 <xTaskIncrementTick+0x46>
 800e488:	4b43      	ldr	r3, [pc, #268]	; (800e598 <xTaskIncrementTick+0x158>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	4b43      	ldr	r3, [pc, #268]	; (800e59c <xTaskIncrementTick+0x15c>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a41      	ldr	r2, [pc, #260]	; (800e598 <xTaskIncrementTick+0x158>)
 800e494:	6013      	str	r3, [r2, #0]
 800e496:	4a41      	ldr	r2, [pc, #260]	; (800e59c <xTaskIncrementTick+0x15c>)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6013      	str	r3, [r2, #0]
 800e49c:	4b40      	ldr	r3, [pc, #256]	; (800e5a0 <xTaskIncrementTick+0x160>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	4a3f      	ldr	r2, [pc, #252]	; (800e5a0 <xTaskIncrementTick+0x160>)
 800e4a4:	6013      	str	r3, [r2, #0]
 800e4a6:	f000 fadb 	bl	800ea60 <prvResetNextTaskUnblockTime>
=======
 800e3f0:	4a4d      	ldr	r2, [pc, #308]	; (800e528 <xTaskIncrementTick+0x154>)
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d120      	bne.n	800e43e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e3fc:	4b4b      	ldr	r3, [pc, #300]	; (800e52c <xTaskIncrementTick+0x158>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00a      	beq.n	800e41c <xTaskIncrementTick+0x48>
	__asm volatile
 800e406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	603b      	str	r3, [r7, #0]
}
 800e418:	bf00      	nop
 800e41a:	e7fe      	b.n	800e41a <xTaskIncrementTick+0x46>
 800e41c:	4b43      	ldr	r3, [pc, #268]	; (800e52c <xTaskIncrementTick+0x158>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	4b43      	ldr	r3, [pc, #268]	; (800e530 <xTaskIncrementTick+0x15c>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a41      	ldr	r2, [pc, #260]	; (800e52c <xTaskIncrementTick+0x158>)
 800e428:	6013      	str	r3, [r2, #0]
 800e42a:	4a41      	ldr	r2, [pc, #260]	; (800e530 <xTaskIncrementTick+0x15c>)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	4b40      	ldr	r3, [pc, #256]	; (800e534 <xTaskIncrementTick+0x160>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3301      	adds	r3, #1
 800e436:	4a3f      	ldr	r2, [pc, #252]	; (800e534 <xTaskIncrementTick+0x160>)
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	f000 fadb 	bl	800e9f4 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< Updated upstream
 800e4aa:	4b3e      	ldr	r3, [pc, #248]	; (800e5a4 <xTaskIncrementTick+0x164>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d34d      	bcc.n	800e550 <xTaskIncrementTick+0x110>
=======
 800e43e:	4b3e      	ldr	r3, [pc, #248]	; (800e538 <xTaskIncrementTick+0x164>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	693a      	ldr	r2, [r7, #16]
 800e444:	429a      	cmp	r2, r3
 800e446:	d34d      	bcc.n	800e4e4 <xTaskIncrementTick+0x110>
>>>>>>> Stashed changes
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< Updated upstream
 800e4b4:	4b38      	ldr	r3, [pc, #224]	; (800e598 <xTaskIncrementTick+0x158>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <xTaskIncrementTick+0x82>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e000      	b.n	800e4c4 <xTaskIncrementTick+0x84>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d004      	beq.n	800e4d2 <xTaskIncrementTick+0x92>
=======
 800e448:	4b38      	ldr	r3, [pc, #224]	; (800e52c <xTaskIncrementTick+0x158>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <xTaskIncrementTick+0x82>
 800e452:	2301      	movs	r3, #1
 800e454:	e000      	b.n	800e458 <xTaskIncrementTick+0x84>
 800e456:	2300      	movs	r3, #0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d004      	beq.n	800e466 <xTaskIncrementTick+0x92>
>>>>>>> Stashed changes
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800e4c8:	4b36      	ldr	r3, [pc, #216]	; (800e5a4 <xTaskIncrementTick+0x164>)
 800e4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ce:	601a      	str	r2, [r3, #0]
					break;
 800e4d0:	e03e      	b.n	800e550 <xTaskIncrementTick+0x110>
=======
 800e45c:	4b36      	ldr	r3, [pc, #216]	; (800e538 <xTaskIncrementTick+0x164>)
 800e45e:	f04f 32ff 	mov.w	r2, #4294967295
 800e462:	601a      	str	r2, [r3, #0]
					break;
 800e464:	e03e      	b.n	800e4e4 <xTaskIncrementTick+0x110>
>>>>>>> Stashed changes
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
<<<<<<< Updated upstream
 800e4d2:	4b31      	ldr	r3, [pc, #196]	; (800e598 <xTaskIncrementTick+0x158>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d203      	bcs.n	800e4f2 <xTaskIncrementTick+0xb2>
=======
 800e466:	4b31      	ldr	r3, [pc, #196]	; (800e52c <xTaskIncrementTick+0x158>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e476:	693a      	ldr	r2, [r7, #16]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d203      	bcs.n	800e486 <xTaskIncrementTick+0xb2>
>>>>>>> Stashed changes
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< Updated upstream
 800e4ea:	4a2e      	ldr	r2, [pc, #184]	; (800e5a4 <xTaskIncrementTick+0x164>)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6013      	str	r3, [r2, #0]
						break;
 800e4f0:	e02e      	b.n	800e550 <xTaskIncrementTick+0x110>
=======
 800e47e:	4a2e      	ldr	r2, [pc, #184]	; (800e538 <xTaskIncrementTick+0x164>)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6013      	str	r3, [r2, #0]
						break;
 800e484:	e02e      	b.n	800e4e4 <xTaskIncrementTick+0x110>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe fd56 	bl	800cfa8 <uxListRemove>
=======
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	3304      	adds	r3, #4
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe fd56 	bl	800cf3c <uxListRemove>
>>>>>>> Stashed changes

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e500:	2b00      	cmp	r3, #0
 800e502:	d004      	beq.n	800e50e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	3318      	adds	r3, #24
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fd4d 	bl	800cfa8 <uxListRemove>
=======
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e494:	2b00      	cmp	r3, #0
 800e496:	d004      	beq.n	800e4a2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	3318      	adds	r3, #24
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fe fd4d 	bl	800cf3c <uxListRemove>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e512:	2201      	movs	r2, #1
 800e514:	409a      	lsls	r2, r3
 800e516:	4b24      	ldr	r3, [pc, #144]	; (800e5a8 <xTaskIncrementTick+0x168>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	4a22      	ldr	r2, [pc, #136]	; (800e5a8 <xTaskIncrementTick+0x168>)
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4a1f      	ldr	r2, [pc, #124]	; (800e5ac <xTaskIncrementTick+0x16c>)
 800e52e:	441a      	add	r2, r3
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	3304      	adds	r3, #4
 800e534:	4619      	mov	r1, r3
 800e536:	4610      	mov	r0, r2
 800e538:	f7fe fcd9 	bl	800ceee <vListInsertEnd>
=======
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	409a      	lsls	r2, r3
 800e4aa:	4b24      	ldr	r3, [pc, #144]	; (800e53c <xTaskIncrementTick+0x168>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	4a22      	ldr	r2, [pc, #136]	; (800e53c <xTaskIncrementTick+0x168>)
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4413      	add	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4a1f      	ldr	r2, [pc, #124]	; (800e540 <xTaskIncrementTick+0x16c>)
 800e4c2:	441a      	add	r2, r3
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	f7fe fcd9 	bl	800ce82 <vListInsertEnd>
>>>>>>> Stashed changes
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e540:	4b1b      	ldr	r3, [pc, #108]	; (800e5b0 <xTaskIncrementTick+0x170>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e546:	429a      	cmp	r2, r3
 800e548:	d3b4      	bcc.n	800e4b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e54a:	2301      	movs	r3, #1
 800e54c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e54e:	e7b1      	b.n	800e4b4 <xTaskIncrementTick+0x74>
=======
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d4:	4b1b      	ldr	r3, [pc, #108]	; (800e544 <xTaskIncrementTick+0x170>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d3b4      	bcc.n	800e448 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e2:	e7b1      	b.n	800e448 <xTaskIncrementTick+0x74>
>>>>>>> Stashed changes
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800e550:	4b17      	ldr	r3, [pc, #92]	; (800e5b0 <xTaskIncrementTick+0x170>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e556:	4915      	ldr	r1, [pc, #84]	; (800e5ac <xTaskIncrementTick+0x16c>)
 800e558:	4613      	mov	r3, r2
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	4413      	add	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	440b      	add	r3, r1
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d907      	bls.n	800e578 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e568:	2301      	movs	r3, #1
 800e56a:	617b      	str	r3, [r7, #20]
 800e56c:	e004      	b.n	800e578 <xTaskIncrementTick+0x138>
=======
 800e4e4:	4b17      	ldr	r3, [pc, #92]	; (800e544 <xTaskIncrementTick+0x170>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ea:	4915      	ldr	r1, [pc, #84]	; (800e540 <xTaskIncrementTick+0x16c>)
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	440b      	add	r3, r1
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d907      	bls.n	800e50c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	e004      	b.n	800e50c <xTaskIncrementTick+0x138>
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< Updated upstream
 800e56e:	4b11      	ldr	r3, [pc, #68]	; (800e5b4 <xTaskIncrementTick+0x174>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	4a0f      	ldr	r2, [pc, #60]	; (800e5b4 <xTaskIncrementTick+0x174>)
 800e576:	6013      	str	r3, [r2, #0]
=======
 800e502:	4b11      	ldr	r3, [pc, #68]	; (800e548 <xTaskIncrementTick+0x174>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3301      	adds	r3, #1
 800e508:	4a0f      	ldr	r2, [pc, #60]	; (800e548 <xTaskIncrementTick+0x174>)
 800e50a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800e578:	4b0f      	ldr	r3, [pc, #60]	; (800e5b8 <xTaskIncrementTick+0x178>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e580:	2301      	movs	r3, #1
 800e582:	617b      	str	r3, [r7, #20]
=======
 800e50c:	4b0f      	ldr	r3, [pc, #60]	; (800e54c <xTaskIncrementTick+0x178>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e514:	2301      	movs	r3, #1
 800e516:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< Updated upstream
 800e584:	697b      	ldr	r3, [r7, #20]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	20002980 	.word	0x20002980
 800e594:	2000295c 	.word	0x2000295c
 800e598:	20002910 	.word	0x20002910
 800e59c:	20002914 	.word	0x20002914
 800e5a0:	20002970 	.word	0x20002970
 800e5a4:	20002978 	.word	0x20002978
 800e5a8:	20002960 	.word	0x20002960
 800e5ac:	2000285c 	.word	0x2000285c
 800e5b0:	20002858 	.word	0x20002858
 800e5b4:	20002968 	.word	0x20002968
 800e5b8:	2000296c 	.word	0x2000296c

0800e5bc <vTaskSwitchContext>:
=======
 800e518:	697b      	ldr	r3, [r7, #20]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3718      	adds	r7, #24
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	20002b30 	.word	0x20002b30
 800e528:	20002b0c 	.word	0x20002b0c
 800e52c:	20002ac0 	.word	0x20002ac0
 800e530:	20002ac4 	.word	0x20002ac4
 800e534:	20002b20 	.word	0x20002b20
 800e538:	20002b28 	.word	0x20002b28
 800e53c:	20002b10 	.word	0x20002b10
 800e540:	20002a0c 	.word	0x20002a0c
 800e544:	20002a08 	.word	0x20002a08
 800e548:	20002b18 	.word	0x20002b18
 800e54c:	20002b1c 	.word	0x20002b1c

0800e550 <vTaskSwitchContext>:
>>>>>>> Stashed changes

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< Updated upstream
 800e5bc:	b480      	push	{r7}
 800e5be:	b087      	sub	sp, #28
 800e5c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5c2:	4b29      	ldr	r3, [pc, #164]	; (800e668 <vTaskSwitchContext+0xac>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <vTaskSwitchContext+0x16>
=======
 800e550:	b480      	push	{r7}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e556:	4b29      	ldr	r3, [pc, #164]	; (800e5fc <vTaskSwitchContext+0xac>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <vTaskSwitchContext+0x16>
>>>>>>> Stashed changes
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800e5ca:	4b28      	ldr	r3, [pc, #160]	; (800e66c <vTaskSwitchContext+0xb0>)
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	601a      	str	r2, [r3, #0]
=======
 800e55e:	4b28      	ldr	r3, [pc, #160]	; (800e600 <vTaskSwitchContext+0xb0>)
 800e560:	2201      	movs	r2, #1
 800e562:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< Updated upstream
 800e5d0:	e044      	b.n	800e65c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e5d2:	4b26      	ldr	r3, [pc, #152]	; (800e66c <vTaskSwitchContext+0xb0>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e5d8:	4b25      	ldr	r3, [pc, #148]	; (800e670 <vTaskSwitchContext+0xb4>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	fab3 f383 	clz	r3, r3
 800e5e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e5e6:	7afb      	ldrb	r3, [r7, #11]
 800e5e8:	f1c3 031f 	rsb	r3, r3, #31
 800e5ec:	617b      	str	r3, [r7, #20]
 800e5ee:	4921      	ldr	r1, [pc, #132]	; (800e674 <vTaskSwitchContext+0xb8>)
 800e5f0:	697a      	ldr	r2, [r7, #20]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	440b      	add	r3, r1
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10a      	bne.n	800e618 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	607b      	str	r3, [r7, #4]
}
 800e614:	bf00      	nop
 800e616:	e7fe      	b.n	800e616 <vTaskSwitchContext+0x5a>
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	4613      	mov	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4a14      	ldr	r2, [pc, #80]	; (800e674 <vTaskSwitchContext+0xb8>)
 800e624:	4413      	add	r3, r2
 800e626:	613b      	str	r3, [r7, #16]
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	685a      	ldr	r2, [r3, #4]
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	605a      	str	r2, [r3, #4]
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	3308      	adds	r3, #8
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d104      	bne.n	800e648 <vTaskSwitchContext+0x8c>
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	685a      	ldr	r2, [r3, #4]
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	605a      	str	r2, [r3, #4]
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	4a0a      	ldr	r2, [pc, #40]	; (800e678 <vTaskSwitchContext+0xbc>)
 800e650:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e652:	4b09      	ldr	r3, [pc, #36]	; (800e678 <vTaskSwitchContext+0xbc>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	335c      	adds	r3, #92	; 0x5c
 800e658:	4a08      	ldr	r2, [pc, #32]	; (800e67c <vTaskSwitchContext+0xc0>)
 800e65a:	6013      	str	r3, [r2, #0]
}
 800e65c:	bf00      	nop
 800e65e:	371c      	adds	r7, #28
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	20002980 	.word	0x20002980
 800e66c:	2000296c 	.word	0x2000296c
 800e670:	20002960 	.word	0x20002960
 800e674:	2000285c 	.word	0x2000285c
 800e678:	20002858 	.word	0x20002858
 800e67c:	20000110 	.word	0x20000110

0800e680 <vTaskPlaceOnEventList>:
=======
 800e564:	e044      	b.n	800e5f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e566:	4b26      	ldr	r3, [pc, #152]	; (800e600 <vTaskSwitchContext+0xb0>)
 800e568:	2200      	movs	r2, #0
 800e56a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e56c:	4b25      	ldr	r3, [pc, #148]	; (800e604 <vTaskSwitchContext+0xb4>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	fab3 f383 	clz	r3, r3
 800e578:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e57a:	7afb      	ldrb	r3, [r7, #11]
 800e57c:	f1c3 031f 	rsb	r3, r3, #31
 800e580:	617b      	str	r3, [r7, #20]
 800e582:	4921      	ldr	r1, [pc, #132]	; (800e608 <vTaskSwitchContext+0xb8>)
 800e584:	697a      	ldr	r2, [r7, #20]
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	440b      	add	r3, r1
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d10a      	bne.n	800e5ac <vTaskSwitchContext+0x5c>
	__asm volatile
 800e596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59a:	f383 8811 	msr	BASEPRI, r3
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	607b      	str	r3, [r7, #4]
}
 800e5a8:	bf00      	nop
 800e5aa:	e7fe      	b.n	800e5aa <vTaskSwitchContext+0x5a>
 800e5ac:	697a      	ldr	r2, [r7, #20]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4a14      	ldr	r2, [pc, #80]	; (800e608 <vTaskSwitchContext+0xb8>)
 800e5b8:	4413      	add	r3, r2
 800e5ba:	613b      	str	r3, [r7, #16]
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	605a      	str	r2, [r3, #4]
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d104      	bne.n	800e5dc <vTaskSwitchContext+0x8c>
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	605a      	str	r2, [r3, #4]
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	4a0a      	ldr	r2, [pc, #40]	; (800e60c <vTaskSwitchContext+0xbc>)
 800e5e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5e6:	4b09      	ldr	r3, [pc, #36]	; (800e60c <vTaskSwitchContext+0xbc>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	335c      	adds	r3, #92	; 0x5c
 800e5ec:	4a08      	ldr	r2, [pc, #32]	; (800e610 <vTaskSwitchContext+0xc0>)
 800e5ee:	6013      	str	r3, [r2, #0]
}
 800e5f0:	bf00      	nop
 800e5f2:	371c      	adds	r7, #28
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20002b30 	.word	0x20002b30
 800e600:	20002b1c 	.word	0x20002b1c
 800e604:	20002b10 	.word	0x20002b10
 800e608:	20002a0c 	.word	0x20002a0c
 800e60c:	20002a08 	.word	0x20002a08
 800e610:	20000114 	.word	0x20000114

0800e614 <vTaskPlaceOnEventList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10a      	bne.n	800e6a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	60fb      	str	r3, [r7, #12]
}
 800e6a2:	bf00      	nop
 800e6a4:	e7fe      	b.n	800e6a4 <vTaskPlaceOnEventList+0x24>
=======
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	60fb      	str	r3, [r7, #12]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <vTaskPlaceOnEventList+0x24>
>>>>>>> Stashed changes

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800e6a6:	4b07      	ldr	r3, [pc, #28]	; (800e6c4 <vTaskPlaceOnEventList+0x44>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	3318      	adds	r3, #24
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7fe fc41 	bl	800cf36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	6838      	ldr	r0, [r7, #0]
 800e6b8:	f000 fbd6 	bl	800ee68 <prvAddCurrentTaskToDelayedList>
}
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	20002858 	.word	0x20002858

0800e6c8 <vTaskPlaceOnEventListRestricted>:
=======
 800e63a:	4b07      	ldr	r3, [pc, #28]	; (800e658 <vTaskPlaceOnEventList+0x44>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3318      	adds	r3, #24
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7fe fc41 	bl	800ceca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e648:	2101      	movs	r1, #1
 800e64a:	6838      	ldr	r0, [r7, #0]
 800e64c:	f000 fbd6 	bl	800edfc <prvAddCurrentTaskToDelayedList>
}
 800e650:	bf00      	nop
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	20002a08 	.word	0x20002a08

0800e65c <vTaskPlaceOnEventListRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10a      	bne.n	800e6f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6de:	f383 8811 	msr	BASEPRI, r3
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	f3bf 8f4f 	dsb	sy
 800e6ea:	617b      	str	r3, [r7, #20]
}
 800e6ec:	bf00      	nop
 800e6ee:	e7fe      	b.n	800e6ee <vTaskPlaceOnEventListRestricted+0x26>
=======
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10a      	bne.n	800e684 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	617b      	str	r3, [r7, #20]
}
 800e680:	bf00      	nop
 800e682:	e7fe      	b.n	800e682 <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> Stashed changes

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800e6f0:	4b0a      	ldr	r3, [pc, #40]	; (800e71c <vTaskPlaceOnEventListRestricted+0x54>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3318      	adds	r3, #24
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f7fe fbf8 	bl	800ceee <vListInsertEnd>
=======
 800e684:	4b0a      	ldr	r3, [pc, #40]	; (800e6b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3318      	adds	r3, #24
 800e68a:	4619      	mov	r1, r3
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f7fe fbf8 	bl	800ce82 <vListInsertEnd>
>>>>>>> Stashed changes

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< Updated upstream
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	60bb      	str	r3, [r7, #8]
=======
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d002      	beq.n	800e69e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e698:	f04f 33ff 	mov.w	r3, #4294967295
 800e69c:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< Updated upstream
 800e70a:	6879      	ldr	r1, [r7, #4]
 800e70c:	68b8      	ldr	r0, [r7, #8]
 800e70e:	f000 fbab 	bl	800ee68 <prvAddCurrentTaskToDelayedList>
	}
 800e712:	bf00      	nop
 800e714:	3718      	adds	r7, #24
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20002858 	.word	0x20002858

0800e720 <xTaskRemoveFromEventList>:
=======
 800e69e:	6879      	ldr	r1, [r7, #4]
 800e6a0:	68b8      	ldr	r0, [r7, #8]
 800e6a2:	f000 fbab 	bl	800edfc <prvAddCurrentTaskToDelayedList>
	}
 800e6a6:	bf00      	nop
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20002a08 	.word	0x20002a08

0800e6b4 <xTaskRemoveFromEventList>:
>>>>>>> Stashed changes

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< Updated upstream
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
=======
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
<<<<<<< Updated upstream
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	60fb      	str	r3, [r7, #12]
}
 800e748:	bf00      	nop
 800e74a:	e7fe      	b.n	800e74a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	3318      	adds	r3, #24
 800e750:	4618      	mov	r0, r3
 800e752:	f7fe fc29 	bl	800cfa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e756:	4b1d      	ldr	r3, [pc, #116]	; (800e7cc <xTaskRemoveFromEventList+0xac>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d11c      	bne.n	800e798 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	3304      	adds	r3, #4
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe fc20 	bl	800cfa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76c:	2201      	movs	r2, #1
 800e76e:	409a      	lsls	r2, r3
 800e770:	4b17      	ldr	r3, [pc, #92]	; (800e7d0 <xTaskRemoveFromEventList+0xb0>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4313      	orrs	r3, r2
 800e776:	4a16      	ldr	r2, [pc, #88]	; (800e7d0 <xTaskRemoveFromEventList+0xb0>)
 800e778:	6013      	str	r3, [r2, #0]
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e77e:	4613      	mov	r3, r2
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4413      	add	r3, r2
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	4a13      	ldr	r2, [pc, #76]	; (800e7d4 <xTaskRemoveFromEventList+0xb4>)
 800e788:	441a      	add	r2, r3
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	3304      	adds	r3, #4
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f7fe fbac 	bl	800ceee <vListInsertEnd>
 800e796:	e005      	b.n	800e7a4 <xTaskRemoveFromEventList+0x84>
=======
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10a      	bne.n	800e6e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	60fb      	str	r3, [r7, #12]
}
 800e6dc:	bf00      	nop
 800e6de:	e7fe      	b.n	800e6de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	3318      	adds	r3, #24
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7fe fc29 	bl	800cf3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ea:	4b1d      	ldr	r3, [pc, #116]	; (800e760 <xTaskRemoveFromEventList+0xac>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d11c      	bne.n	800e72c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fe fc20 	bl	800cf3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e700:	2201      	movs	r2, #1
 800e702:	409a      	lsls	r2, r3
 800e704:	4b17      	ldr	r3, [pc, #92]	; (800e764 <xTaskRemoveFromEventList+0xb0>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4313      	orrs	r3, r2
 800e70a:	4a16      	ldr	r2, [pc, #88]	; (800e764 <xTaskRemoveFromEventList+0xb0>)
 800e70c:	6013      	str	r3, [r2, #0]
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e712:	4613      	mov	r3, r2
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	4413      	add	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4a13      	ldr	r2, [pc, #76]	; (800e768 <xTaskRemoveFromEventList+0xb4>)
 800e71c:	441a      	add	r2, r3
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	3304      	adds	r3, #4
 800e722:	4619      	mov	r1, r3
 800e724:	4610      	mov	r0, r2
 800e726:	f7fe fbac 	bl	800ce82 <vListInsertEnd>
 800e72a:	e005      	b.n	800e738 <xTaskRemoveFromEventList+0x84>
>>>>>>> Stashed changes
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	3318      	adds	r3, #24
 800e79c:	4619      	mov	r1, r3
 800e79e:	480e      	ldr	r0, [pc, #56]	; (800e7d8 <xTaskRemoveFromEventList+0xb8>)
 800e7a0:	f7fe fba5 	bl	800ceee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a8:	4b0c      	ldr	r3, [pc, #48]	; (800e7dc <xTaskRemoveFromEventList+0xbc>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d905      	bls.n	800e7be <xTaskRemoveFromEventList+0x9e>
=======
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	3318      	adds	r3, #24
 800e730:	4619      	mov	r1, r3
 800e732:	480e      	ldr	r0, [pc, #56]	; (800e76c <xTaskRemoveFromEventList+0xb8>)
 800e734:	f7fe fba5 	bl	800ce82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73c:	4b0c      	ldr	r3, [pc, #48]	; (800e770 <xTaskRemoveFromEventList+0xbc>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e742:	429a      	cmp	r2, r3
 800e744:	d905      	bls.n	800e752 <xTaskRemoveFromEventList+0x9e>
>>>>>>> Stashed changes
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< Updated upstream
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	617b      	str	r3, [r7, #20]
=======
 800e746:	2301      	movs	r3, #1
 800e748:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800e7b6:	4b0a      	ldr	r3, [pc, #40]	; (800e7e0 <xTaskRemoveFromEventList+0xc0>)
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	e001      	b.n	800e7c2 <xTaskRemoveFromEventList+0xa2>
=======
 800e74a:	4b0a      	ldr	r3, [pc, #40]	; (800e774 <xTaskRemoveFromEventList+0xc0>)
 800e74c:	2201      	movs	r2, #1
 800e74e:	601a      	str	r2, [r3, #0]
 800e750:	e001      	b.n	800e756 <xTaskRemoveFromEventList+0xa2>
>>>>>>> Stashed changes
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< Updated upstream
 800e7be:	2300      	movs	r3, #0
 800e7c0:	617b      	str	r3, [r7, #20]
=======
 800e752:	2300      	movs	r3, #0
 800e754:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
<<<<<<< Updated upstream
 800e7c2:	697b      	ldr	r3, [r7, #20]
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3718      	adds	r7, #24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	20002980 	.word	0x20002980
 800e7d0:	20002960 	.word	0x20002960
 800e7d4:	2000285c 	.word	0x2000285c
 800e7d8:	20002918 	.word	0x20002918
 800e7dc:	20002858 	.word	0x20002858
 800e7e0:	2000296c 	.word	0x2000296c

0800e7e4 <vTaskInternalSetTimeOutState>:
=======
 800e756:	697b      	ldr	r3, [r7, #20]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3718      	adds	r7, #24
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	20002b30 	.word	0x20002b30
 800e764:	20002b10 	.word	0x20002b10
 800e768:	20002a0c 	.word	0x20002a0c
 800e76c:	20002ac8 	.word	0x20002ac8
 800e770:	20002a08 	.word	0x20002a08
 800e774:	20002b1c 	.word	0x20002b1c

0800e778 <vTaskInternalSetTimeOutState>:
>>>>>>> Stashed changes
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< Updated upstream
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7ec:	4b06      	ldr	r3, [pc, #24]	; (800e808 <vTaskInternalSetTimeOutState+0x24>)
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7f4:	4b05      	ldr	r3, [pc, #20]	; (800e80c <vTaskInternalSetTimeOutState+0x28>)
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	605a      	str	r2, [r3, #4]
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	20002970 	.word	0x20002970
 800e80c:	2000295c 	.word	0x2000295c

0800e810 <xTaskCheckForTimeOut>:
=======
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e780:	4b06      	ldr	r3, [pc, #24]	; (800e79c <vTaskInternalSetTimeOutState+0x24>)
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e788:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <vTaskInternalSetTimeOutState+0x28>)
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	605a      	str	r2, [r3, #4]
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr
 800e79c:	20002b20 	.word	0x20002b20
 800e7a0:	20002b0c 	.word	0x20002b0c

0800e7a4 <xTaskCheckForTimeOut>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< Updated upstream
 800e810:	b580      	push	{r7, lr}
 800e812:	b088      	sub	sp, #32
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10a      	bne.n	800e836 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	613b      	str	r3, [r7, #16]
}
 800e832:	bf00      	nop
 800e834:	e7fe      	b.n	800e834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10a      	bne.n	800e852 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	60fb      	str	r3, [r7, #12]
}
 800e84e:	bf00      	nop
 800e850:	e7fe      	b.n	800e850 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e852:	f001 f827 	bl	800f8a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e856:	4b1d      	ldr	r3, [pc, #116]	; (800e8cc <xTaskCheckForTimeOut+0xbc>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	69ba      	ldr	r2, [r7, #24]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	617b      	str	r3, [r7, #20]
=======
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d10a      	bne.n	800e7ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b8:	f383 8811 	msr	BASEPRI, r3
 800e7bc:	f3bf 8f6f 	isb	sy
 800e7c0:	f3bf 8f4f 	dsb	sy
 800e7c4:	613b      	str	r3, [r7, #16]
}
 800e7c6:	bf00      	nop
 800e7c8:	e7fe      	b.n	800e7c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10a      	bne.n	800e7e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	60fb      	str	r3, [r7, #12]
}
 800e7e2:	bf00      	nop
 800e7e4:	e7fe      	b.n	800e7e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e7e6:	f001 f825 	bl	800f834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e7ea:	4b1d      	ldr	r3, [pc, #116]	; (800e860 <xTaskCheckForTimeOut+0xbc>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	69ba      	ldr	r2, [r7, #24]
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< Updated upstream
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e86e:	d102      	bne.n	800e876 <xTaskCheckForTimeOut+0x66>
=======
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e802:	d102      	bne.n	800e80a <xTaskCheckForTimeOut+0x66>
>>>>>>> Stashed changes
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< Updated upstream
 800e870:	2300      	movs	r3, #0
 800e872:	61fb      	str	r3, [r7, #28]
 800e874:	e023      	b.n	800e8be <xTaskCheckForTimeOut+0xae>
=======
 800e804:	2300      	movs	r3, #0
 800e806:	61fb      	str	r3, [r7, #28]
 800e808:	e023      	b.n	800e852 <xTaskCheckForTimeOut+0xae>
>>>>>>> Stashed changes
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< Updated upstream
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	4b15      	ldr	r3, [pc, #84]	; (800e8d0 <xTaskCheckForTimeOut+0xc0>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d007      	beq.n	800e892 <xTaskCheckForTimeOut+0x82>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	69ba      	ldr	r2, [r7, #24]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d302      	bcc.n	800e892 <xTaskCheckForTimeOut+0x82>
=======
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	4b15      	ldr	r3, [pc, #84]	; (800e864 <xTaskCheckForTimeOut+0xc0>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	429a      	cmp	r2, r3
 800e814:	d007      	beq.n	800e826 <xTaskCheckForTimeOut+0x82>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	69ba      	ldr	r2, [r7, #24]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d302      	bcc.n	800e826 <xTaskCheckForTimeOut+0x82>
>>>>>>> Stashed changes
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< Updated upstream
 800e88c:	2301      	movs	r3, #1
 800e88e:	61fb      	str	r3, [r7, #28]
 800e890:	e015      	b.n	800e8be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	697a      	ldr	r2, [r7, #20]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d20b      	bcs.n	800e8b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	1ad2      	subs	r2, r2, r3
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff ff9b 	bl	800e7e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	61fb      	str	r3, [r7, #28]
 800e8b2:	e004      	b.n	800e8be <xTaskCheckForTimeOut+0xae>
=======
 800e820:	2301      	movs	r3, #1
 800e822:	61fb      	str	r3, [r7, #28]
 800e824:	e015      	b.n	800e852 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d20b      	bcs.n	800e848 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	1ad2      	subs	r2, r2, r3
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7ff ff9b 	bl	800e778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e842:	2300      	movs	r3, #0
 800e844:	61fb      	str	r3, [r7, #28]
 800e846:	e004      	b.n	800e852 <xTaskCheckForTimeOut+0xae>
>>>>>>> Stashed changes
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< Updated upstream
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8be:	f001 f821 	bl	800f904 <vPortExitCritical>

	return xReturn;
 800e8c2:	69fb      	ldr	r3, [r7, #28]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3720      	adds	r7, #32
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	2000295c 	.word	0x2000295c
 800e8d0:	20002970 	.word	0x20002970

0800e8d4 <vTaskMissedYield>:
=======
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2200      	movs	r2, #0
 800e84c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e84e:	2301      	movs	r3, #1
 800e850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e852:	f001 f81f 	bl	800f894 <vPortExitCritical>

	return xReturn;
 800e856:	69fb      	ldr	r3, [r7, #28]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3720      	adds	r7, #32
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	20002b0c 	.word	0x20002b0c
 800e864:	20002b20 	.word	0x20002b20

0800e868 <vTaskMissedYield>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< Updated upstream
 800e8d4:	b480      	push	{r7}
 800e8d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e8d8:	4b03      	ldr	r3, [pc, #12]	; (800e8e8 <vTaskMissedYield+0x14>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	601a      	str	r2, [r3, #0]
}
 800e8de:	bf00      	nop
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	2000296c 	.word	0x2000296c

0800e8ec <prvIdleTask>:
=======
 800e868:	b480      	push	{r7}
 800e86a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e86c:	4b03      	ldr	r3, [pc, #12]	; (800e87c <vTaskMissedYield+0x14>)
 800e86e:	2201      	movs	r2, #1
 800e870:	601a      	str	r2, [r3, #0]
}
 800e872:	bf00      	nop
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	20002b1c 	.word	0x20002b1c

0800e880 <prvIdleTask>:
>>>>>>> Stashed changes
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< Updated upstream
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
=======
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< Updated upstream
 800e8f4:	f000 f852 	bl	800e99c <prvCheckTasksWaitingTermination>
=======
 800e888:	f000 f852 	bl	800e930 <prvCheckTasksWaitingTermination>
>>>>>>> Stashed changes

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800e8f8:	4b06      	ldr	r3, [pc, #24]	; (800e914 <prvIdleTask+0x28>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d9f9      	bls.n	800e8f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e900:	4b05      	ldr	r3, [pc, #20]	; (800e918 <prvIdleTask+0x2c>)
 800e902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e906:	601a      	str	r2, [r3, #0]
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e910:	e7f0      	b.n	800e8f4 <prvIdleTask+0x8>
 800e912:	bf00      	nop
 800e914:	2000285c 	.word	0x2000285c
 800e918:	e000ed04 	.word	0xe000ed04

0800e91c <prvInitialiseTaskLists>:
=======
 800e88c:	4b06      	ldr	r3, [pc, #24]	; (800e8a8 <prvIdleTask+0x28>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b01      	cmp	r3, #1
 800e892:	d9f9      	bls.n	800e888 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e894:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <prvIdleTask+0x2c>)
 800e896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8a4:	e7f0      	b.n	800e888 <prvIdleTask+0x8>
 800e8a6:	bf00      	nop
 800e8a8:	20002a0c 	.word	0x20002a0c
 800e8ac:	e000ed04 	.word	0xe000ed04

0800e8b0 <prvInitialiseTaskLists>:
>>>>>>> Stashed changes

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< Updated upstream
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e922:	2300      	movs	r3, #0
 800e924:	607b      	str	r3, [r7, #4]
 800e926:	e00c      	b.n	800e942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4613      	mov	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	4413      	add	r3, r2
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4a12      	ldr	r2, [pc, #72]	; (800e97c <prvInitialiseTaskLists+0x60>)
 800e934:	4413      	add	r3, r2
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe faac 	bl	800ce94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	3301      	adds	r3, #1
 800e940:	607b      	str	r3, [r7, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b06      	cmp	r3, #6
 800e946:	d9ef      	bls.n	800e928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e948:	480d      	ldr	r0, [pc, #52]	; (800e980 <prvInitialiseTaskLists+0x64>)
 800e94a:	f7fe faa3 	bl	800ce94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e94e:	480d      	ldr	r0, [pc, #52]	; (800e984 <prvInitialiseTaskLists+0x68>)
 800e950:	f7fe faa0 	bl	800ce94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e954:	480c      	ldr	r0, [pc, #48]	; (800e988 <prvInitialiseTaskLists+0x6c>)
 800e956:	f7fe fa9d 	bl	800ce94 <vListInitialise>
=======
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	607b      	str	r3, [r7, #4]
 800e8ba:	e00c      	b.n	800e8d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4a12      	ldr	r2, [pc, #72]	; (800e910 <prvInitialiseTaskLists+0x60>)
 800e8c8:	4413      	add	r3, r2
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fe faac 	bl	800ce28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	607b      	str	r3, [r7, #4]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b06      	cmp	r3, #6
 800e8da:	d9ef      	bls.n	800e8bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8dc:	480d      	ldr	r0, [pc, #52]	; (800e914 <prvInitialiseTaskLists+0x64>)
 800e8de:	f7fe faa3 	bl	800ce28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8e2:	480d      	ldr	r0, [pc, #52]	; (800e918 <prvInitialiseTaskLists+0x68>)
 800e8e4:	f7fe faa0 	bl	800ce28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8e8:	480c      	ldr	r0, [pc, #48]	; (800e91c <prvInitialiseTaskLists+0x6c>)
 800e8ea:	f7fe fa9d 	bl	800ce28 <vListInitialise>
>>>>>>> Stashed changes

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< Updated upstream
 800e95a:	480c      	ldr	r0, [pc, #48]	; (800e98c <prvInitialiseTaskLists+0x70>)
 800e95c:	f7fe fa9a 	bl	800ce94 <vListInitialise>
=======
 800e8ee:	480c      	ldr	r0, [pc, #48]	; (800e920 <prvInitialiseTaskLists+0x70>)
 800e8f0:	f7fe fa9a 	bl	800ce28 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< Updated upstream
 800e960:	480b      	ldr	r0, [pc, #44]	; (800e990 <prvInitialiseTaskLists+0x74>)
 800e962:	f7fe fa97 	bl	800ce94 <vListInitialise>
=======
 800e8f4:	480b      	ldr	r0, [pc, #44]	; (800e924 <prvInitialiseTaskLists+0x74>)
 800e8f6:	f7fe fa97 	bl	800ce28 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< Updated upstream
 800e966:	4b0b      	ldr	r3, [pc, #44]	; (800e994 <prvInitialiseTaskLists+0x78>)
 800e968:	4a05      	ldr	r2, [pc, #20]	; (800e980 <prvInitialiseTaskLists+0x64>)
 800e96a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e96c:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <prvInitialiseTaskLists+0x7c>)
 800e96e:	4a05      	ldr	r2, [pc, #20]	; (800e984 <prvInitialiseTaskLists+0x68>)
 800e970:	601a      	str	r2, [r3, #0]
}
 800e972:	bf00      	nop
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	2000285c 	.word	0x2000285c
 800e980:	200028e8 	.word	0x200028e8
 800e984:	200028fc 	.word	0x200028fc
 800e988:	20002918 	.word	0x20002918
 800e98c:	2000292c 	.word	0x2000292c
 800e990:	20002944 	.word	0x20002944
 800e994:	20002910 	.word	0x20002910
 800e998:	20002914 	.word	0x20002914

0800e99c <prvCheckTasksWaitingTermination>:
=======
 800e8fa:	4b0b      	ldr	r3, [pc, #44]	; (800e928 <prvInitialiseTaskLists+0x78>)
 800e8fc:	4a05      	ldr	r2, [pc, #20]	; (800e914 <prvInitialiseTaskLists+0x64>)
 800e8fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e900:	4b0a      	ldr	r3, [pc, #40]	; (800e92c <prvInitialiseTaskLists+0x7c>)
 800e902:	4a05      	ldr	r2, [pc, #20]	; (800e918 <prvInitialiseTaskLists+0x68>)
 800e904:	601a      	str	r2, [r3, #0]
}
 800e906:	bf00      	nop
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	20002a0c 	.word	0x20002a0c
 800e914:	20002a98 	.word	0x20002a98
 800e918:	20002aac 	.word	0x20002aac
 800e91c:	20002ac8 	.word	0x20002ac8
 800e920:	20002adc 	.word	0x20002adc
 800e924:	20002af4 	.word	0x20002af4
 800e928:	20002ac0 	.word	0x20002ac0
 800e92c:	20002ac4 	.word	0x20002ac4

0800e930 <prvCheckTasksWaitingTermination>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< Updated upstream
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
=======
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< Updated upstream
 800e9a2:	e019      	b.n	800e9d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9a4:	f000 ff7e 	bl	800f8a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e9a8:	4b10      	ldr	r3, [pc, #64]	; (800e9ec <prvCheckTasksWaitingTermination+0x50>)
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe faf7 	bl	800cfa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	; (800e9f0 <prvCheckTasksWaitingTermination+0x54>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	4a0b      	ldr	r2, [pc, #44]	; (800e9f0 <prvCheckTasksWaitingTermination+0x54>)
 800e9c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e9c4:	4b0b      	ldr	r3, [pc, #44]	; (800e9f4 <prvCheckTasksWaitingTermination+0x58>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	4a0a      	ldr	r2, [pc, #40]	; (800e9f4 <prvCheckTasksWaitingTermination+0x58>)
 800e9cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e9ce:	f000 ff99 	bl	800f904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f810 	bl	800e9f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9d8:	4b06      	ldr	r3, [pc, #24]	; (800e9f4 <prvCheckTasksWaitingTermination+0x58>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1e1      	bne.n	800e9a4 <prvCheckTasksWaitingTermination+0x8>
=======
 800e936:	e019      	b.n	800e96c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e938:	f000 ff7c 	bl	800f834 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e93c:	4b10      	ldr	r3, [pc, #64]	; (800e980 <prvCheckTasksWaitingTermination+0x50>)
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	3304      	adds	r3, #4
 800e948:	4618      	mov	r0, r3
 800e94a:	f7fe faf7 	bl	800cf3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e94e:	4b0d      	ldr	r3, [pc, #52]	; (800e984 <prvCheckTasksWaitingTermination+0x54>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3b01      	subs	r3, #1
 800e954:	4a0b      	ldr	r2, [pc, #44]	; (800e984 <prvCheckTasksWaitingTermination+0x54>)
 800e956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e958:	4b0b      	ldr	r3, [pc, #44]	; (800e988 <prvCheckTasksWaitingTermination+0x58>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3b01      	subs	r3, #1
 800e95e:	4a0a      	ldr	r2, [pc, #40]	; (800e988 <prvCheckTasksWaitingTermination+0x58>)
 800e960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e962:	f000 ff97 	bl	800f894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f810 	bl	800e98c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e96c:	4b06      	ldr	r3, [pc, #24]	; (800e988 <prvCheckTasksWaitingTermination+0x58>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1e1      	bne.n	800e938 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> Stashed changes
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< Updated upstream
 800e9e0:	bf00      	nop
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	2000292c 	.word	0x2000292c
 800e9f0:	20002958 	.word	0x20002958
 800e9f4:	20002940 	.word	0x20002940

0800e9f8 <prvDeleteTCB>:
=======
 800e974:	bf00      	nop
 800e976:	bf00      	nop
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	20002adc 	.word	0x20002adc
 800e984:	20002b08 	.word	0x20002b08
 800e988:	20002af0 	.word	0x20002af0

0800e98c <prvDeleteTCB>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< Updated upstream
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
=======
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< Updated upstream
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	335c      	adds	r3, #92	; 0x5c
 800ea04:	4618      	mov	r0, r3
 800ea06:	f001 fbd9 	bl	80101bc <_reclaim_reent>
=======
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	335c      	adds	r3, #92	; 0x5c
 800e998:	4618      	mov	r0, r3
 800e99a:	f001 fbd7 	bl	801014c <_reclaim_reent>
>>>>>>> Stashed changes
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< Updated upstream
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d108      	bne.n	800ea26 <prvDeleteTCB+0x2e>
=======
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d108      	bne.n	800e9ba <prvDeleteTCB+0x2e>
>>>>>>> Stashed changes
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< Updated upstream
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f001 f929 	bl	800fc70 <vPortFree>
				vPortFree( pxTCB );
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f001 f926 	bl	800fc70 <vPortFree>
=======
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f001 f927 	bl	800fc00 <vPortFree>
				vPortFree( pxTCB );
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 f924 	bl	800fc00 <vPortFree>
>>>>>>> Stashed changes
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< Updated upstream
 800ea24:	e018      	b.n	800ea58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d103      	bne.n	800ea38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f001 f91d 	bl	800fc70 <vPortFree>
	}
 800ea36:	e00f      	b.n	800ea58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ea3e:	2b02      	cmp	r3, #2
 800ea40:	d00a      	beq.n	800ea58 <prvDeleteTCB+0x60>
	__asm volatile
 800ea42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	60fb      	str	r3, [r7, #12]
}
 800ea54:	bf00      	nop
 800ea56:	e7fe      	b.n	800ea56 <prvDeleteTCB+0x5e>
	}
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <prvResetNextTaskUnblockTime>:
=======
 800e9b8:	e018      	b.n	800e9ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d103      	bne.n	800e9cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f001 f91b 	bl	800fc00 <vPortFree>
	}
 800e9ca:	e00f      	b.n	800e9ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e9d2:	2b02      	cmp	r3, #2
 800e9d4:	d00a      	beq.n	800e9ec <prvDeleteTCB+0x60>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	60fb      	str	r3, [r7, #12]
}
 800e9e8:	bf00      	nop
 800e9ea:	e7fe      	b.n	800e9ea <prvDeleteTCB+0x5e>
	}
 800e9ec:	bf00      	nop
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< Updated upstream
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea66:	4b0f      	ldr	r3, [pc, #60]	; (800eaa4 <prvResetNextTaskUnblockTime+0x44>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <prvResetNextTaskUnblockTime+0x14>
 800ea70:	2301      	movs	r3, #1
 800ea72:	e000      	b.n	800ea76 <prvResetNextTaskUnblockTime+0x16>
 800ea74:	2300      	movs	r3, #0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d004      	beq.n	800ea84 <prvResetNextTaskUnblockTime+0x24>
=======
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9fa:	4b0f      	ldr	r3, [pc, #60]	; (800ea38 <prvResetNextTaskUnblockTime+0x44>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <prvResetNextTaskUnblockTime+0x14>
 800ea04:	2301      	movs	r3, #1
 800ea06:	e000      	b.n	800ea0a <prvResetNextTaskUnblockTime+0x16>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d004      	beq.n	800ea18 <prvResetNextTaskUnblockTime+0x24>
>>>>>>> Stashed changes
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800ea7a:	4b0b      	ldr	r3, [pc, #44]	; (800eaa8 <prvResetNextTaskUnblockTime+0x48>)
 800ea7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea80:	601a      	str	r2, [r3, #0]
=======
 800ea0e:	4b0b      	ldr	r3, [pc, #44]	; (800ea3c <prvResetNextTaskUnblockTime+0x48>)
 800ea10:	f04f 32ff 	mov.w	r2, #4294967295
 800ea14:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< Updated upstream
 800ea82:	e008      	b.n	800ea96 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ea84:	4b07      	ldr	r3, [pc, #28]	; (800eaa4 <prvResetNextTaskUnblockTime+0x44>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	4a05      	ldr	r2, [pc, #20]	; (800eaa8 <prvResetNextTaskUnblockTime+0x48>)
 800ea94:	6013      	str	r3, [r2, #0]
}
 800ea96:	bf00      	nop
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop
 800eaa4:	20002910 	.word	0x20002910
 800eaa8:	20002978 	.word	0x20002978

0800eaac <xTaskGetSchedulerState>:
=======
 800ea16:	e008      	b.n	800ea2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ea18:	4b07      	ldr	r3, [pc, #28]	; (800ea38 <prvResetNextTaskUnblockTime+0x44>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	4a05      	ldr	r2, [pc, #20]	; (800ea3c <prvResetNextTaskUnblockTime+0x48>)
 800ea28:	6013      	str	r3, [r2, #0]
}
 800ea2a:	bf00      	nop
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	20002ac0 	.word	0x20002ac0
 800ea3c:	20002b28 	.word	0x20002b28

0800ea40 <xTaskGetSchedulerState>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< Updated upstream
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eab2:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <xTaskGetSchedulerState+0x34>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d102      	bne.n	800eac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eaba:	2301      	movs	r3, #1
 800eabc:	607b      	str	r3, [r7, #4]
 800eabe:	e008      	b.n	800ead2 <xTaskGetSchedulerState+0x26>
=======
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea46:	4b0b      	ldr	r3, [pc, #44]	; (800ea74 <xTaskGetSchedulerState+0x34>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d102      	bne.n	800ea54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	607b      	str	r3, [r7, #4]
 800ea52:	e008      	b.n	800ea66 <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800eac0:	4b08      	ldr	r3, [pc, #32]	; (800eae4 <xTaskGetSchedulerState+0x38>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d102      	bne.n	800eace <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eac8:	2302      	movs	r3, #2
 800eaca:	607b      	str	r3, [r7, #4]
 800eacc:	e001      	b.n	800ead2 <xTaskGetSchedulerState+0x26>
=======
 800ea54:	4b08      	ldr	r3, [pc, #32]	; (800ea78 <xTaskGetSchedulerState+0x38>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	607b      	str	r3, [r7, #4]
 800ea60:	e001      	b.n	800ea66 <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< Updated upstream
 800eace:	2300      	movs	r3, #0
 800ead0:	607b      	str	r3, [r7, #4]
=======
 800ea62:	2300      	movs	r3, #0
 800ea64:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
			}
		}

		return xReturn;
<<<<<<< Updated upstream
 800ead2:	687b      	ldr	r3, [r7, #4]
	}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	20002964 	.word	0x20002964
 800eae4:	20002980 	.word	0x20002980

0800eae8 <xTaskPriorityInherit>:
=======
 800ea66:	687b      	ldr	r3, [r7, #4]
	}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	20002b14 	.word	0x20002b14
 800ea78:	20002b30 	.word	0x20002b30

0800ea7c <xTaskPriorityInherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60fb      	str	r3, [r7, #12]
=======
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< Updated upstream
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d06e      	beq.n	800ebdc <xTaskPriorityInherit+0xf4>
=======
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d06e      	beq.n	800eb70 <xTaskPriorityInherit+0xf4>
>>>>>>> Stashed changes
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb02:	4b39      	ldr	r3, [pc, #228]	; (800ebe8 <xTaskPriorityInherit+0x100>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d25e      	bcs.n	800ebca <xTaskPriorityInherit+0xe2>
=======
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea96:	4b39      	ldr	r3, [pc, #228]	; (800eb7c <xTaskPriorityInherit+0x100>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d25e      	bcs.n	800eb5e <xTaskPriorityInherit+0xe2>
>>>>>>> Stashed changes
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	699b      	ldr	r3, [r3, #24]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	db06      	blt.n	800eb22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb14:	4b34      	ldr	r3, [pc, #208]	; (800ebe8 <xTaskPriorityInherit+0x100>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb1a:	f1c3 0207 	rsb	r2, r3, #7
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	619a      	str	r2, [r3, #24]
=======
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	db06      	blt.n	800eab6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaa8:	4b34      	ldr	r3, [pc, #208]	; (800eb7c <xTaskPriorityInherit+0x100>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaae:	f1c3 0207 	rsb	r2, r3, #7
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	6959      	ldr	r1, [r3, #20]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4413      	add	r3, r2
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	4a2e      	ldr	r2, [pc, #184]	; (800ebec <xTaskPriorityInherit+0x104>)
 800eb34:	4413      	add	r3, r2
 800eb36:	4299      	cmp	r1, r3
 800eb38:	d101      	bne.n	800eb3e <xTaskPriorityInherit+0x56>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	e000      	b.n	800eb40 <xTaskPriorityInherit+0x58>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d03a      	beq.n	800ebba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	3304      	adds	r3, #4
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe fa2d 	bl	800cfa8 <uxListRemove>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d115      	bne.n	800eb80 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb58:	4924      	ldr	r1, [pc, #144]	; (800ebec <xTaskPriorityInherit+0x104>)
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	440b      	add	r3, r1
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d10a      	bne.n	800eb80 <xTaskPriorityInherit+0x98>
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	2201      	movs	r2, #1
 800eb70:	fa02 f303 	lsl.w	r3, r2, r3
 800eb74:	43da      	mvns	r2, r3
 800eb76:	4b1e      	ldr	r3, [pc, #120]	; (800ebf0 <xTaskPriorityInherit+0x108>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4013      	ands	r3, r2
 800eb7c:	4a1c      	ldr	r2, [pc, #112]	; (800ebf0 <xTaskPriorityInherit+0x108>)
 800eb7e:	6013      	str	r3, [r2, #0]
=======
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	6959      	ldr	r1, [r3, #20]
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eabe:	4613      	mov	r3, r2
 800eac0:	009b      	lsls	r3, r3, #2
 800eac2:	4413      	add	r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	4a2e      	ldr	r2, [pc, #184]	; (800eb80 <xTaskPriorityInherit+0x104>)
 800eac8:	4413      	add	r3, r2
 800eaca:	4299      	cmp	r1, r3
 800eacc:	d101      	bne.n	800ead2 <xTaskPriorityInherit+0x56>
 800eace:	2301      	movs	r3, #1
 800ead0:	e000      	b.n	800ead4 <xTaskPriorityInherit+0x58>
 800ead2:	2300      	movs	r3, #0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d03a      	beq.n	800eb4e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	3304      	adds	r3, #4
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fe fa2d 	bl	800cf3c <uxListRemove>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d115      	bne.n	800eb14 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaec:	4924      	ldr	r1, [pc, #144]	; (800eb80 <xTaskPriorityInherit+0x104>)
 800eaee:	4613      	mov	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	4413      	add	r3, r2
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	440b      	add	r3, r1
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10a      	bne.n	800eb14 <xTaskPriorityInherit+0x98>
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb02:	2201      	movs	r2, #1
 800eb04:	fa02 f303 	lsl.w	r3, r2, r3
 800eb08:	43da      	mvns	r2, r3
 800eb0a:	4b1e      	ldr	r3, [pc, #120]	; (800eb84 <xTaskPriorityInherit+0x108>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4013      	ands	r3, r2
 800eb10:	4a1c      	ldr	r2, [pc, #112]	; (800eb84 <xTaskPriorityInherit+0x108>)
 800eb12:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 800eb80:	4b19      	ldr	r3, [pc, #100]	; (800ebe8 <xTaskPriorityInherit+0x100>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8e:	2201      	movs	r2, #1
 800eb90:	409a      	lsls	r2, r3
 800eb92:	4b17      	ldr	r3, [pc, #92]	; (800ebf0 <xTaskPriorityInherit+0x108>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	4a15      	ldr	r2, [pc, #84]	; (800ebf0 <xTaskPriorityInherit+0x108>)
 800eb9a:	6013      	str	r3, [r2, #0]
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba0:	4613      	mov	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4413      	add	r3, r2
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	4a10      	ldr	r2, [pc, #64]	; (800ebec <xTaskPriorityInherit+0x104>)
 800ebaa:	441a      	add	r2, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	3304      	adds	r3, #4
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	4610      	mov	r0, r2
 800ebb4:	f7fe f99b 	bl	800ceee <vListInsertEnd>
 800ebb8:	e004      	b.n	800ebc4 <xTaskPriorityInherit+0xdc>
=======
 800eb14:	4b19      	ldr	r3, [pc, #100]	; (800eb7c <xTaskPriorityInherit+0x100>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb22:	2201      	movs	r2, #1
 800eb24:	409a      	lsls	r2, r3
 800eb26:	4b17      	ldr	r3, [pc, #92]	; (800eb84 <xTaskPriorityInherit+0x108>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	4a15      	ldr	r2, [pc, #84]	; (800eb84 <xTaskPriorityInherit+0x108>)
 800eb2e:	6013      	str	r3, [r2, #0]
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb34:	4613      	mov	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	4a10      	ldr	r2, [pc, #64]	; (800eb80 <xTaskPriorityInherit+0x104>)
 800eb3e:	441a      	add	r2, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	3304      	adds	r3, #4
 800eb44:	4619      	mov	r1, r3
 800eb46:	4610      	mov	r0, r2
 800eb48:	f7fe f99b 	bl	800ce82 <vListInsertEnd>
 800eb4c:	e004      	b.n	800eb58 <xTaskPriorityInherit+0xdc>
>>>>>>> Stashed changes
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 800ebba:	4b0b      	ldr	r3, [pc, #44]	; (800ebe8 <xTaskPriorityInherit+0x100>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800eb4e:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <xTaskPriorityInherit+0x100>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< Updated upstream
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	60fb      	str	r3, [r7, #12]
 800ebc8:	e008      	b.n	800ebdc <xTaskPriorityInherit+0xf4>
=======
 800eb58:	2301      	movs	r3, #1
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	e008      	b.n	800eb70 <xTaskPriorityInherit+0xf4>
>>>>>>> Stashed changes
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebce:	4b06      	ldr	r3, [pc, #24]	; (800ebe8 <xTaskPriorityInherit+0x100>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d201      	bcs.n	800ebdc <xTaskPriorityInherit+0xf4>
=======
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb62:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <xTaskPriorityInherit+0x100>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d201      	bcs.n	800eb70 <xTaskPriorityInherit+0xf4>
>>>>>>> Stashed changes
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 800ebd8:	2301      	movs	r3, #1
 800ebda:	60fb      	str	r3, [r7, #12]
=======
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 800ebdc:	68fb      	ldr	r3, [r7, #12]
	}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	20002858 	.word	0x20002858
 800ebec:	2000285c 	.word	0x2000285c
 800ebf0:	20002960 	.word	0x20002960

0800ebf4 <xTaskPriorityDisinherit>:
=======
 800eb70:	68fb      	ldr	r3, [r7, #12]
	}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20002a08 	.word	0x20002a08
 800eb80:	20002a0c 	.word	0x20002a0c
 800eb84:	20002b10 	.word	0x20002b10

0800eb88 <xTaskPriorityDisinherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec00:	2300      	movs	r3, #0
 800ec02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d06e      	beq.n	800ece8 <xTaskPriorityDisinherit+0xf4>
=======
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb94:	2300      	movs	r3, #0
 800eb96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d06e      	beq.n	800ec7c <xTaskPriorityDisinherit+0xf4>
>>>>>>> Stashed changes
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< Updated upstream
 800ec0a:	4b3a      	ldr	r3, [pc, #232]	; (800ecf4 <xTaskPriorityDisinherit+0x100>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d00a      	beq.n	800ec2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	60fb      	str	r3, [r7, #12]
}
 800ec26:	bf00      	nop
 800ec28:	e7fe      	b.n	800ec28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10a      	bne.n	800ec48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	60bb      	str	r3, [r7, #8]
}
 800ec44:	bf00      	nop
 800ec46:	e7fe      	b.n	800ec46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec4c:	1e5a      	subs	r2, r3, #1
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800eb9e:	4b3a      	ldr	r3, [pc, #232]	; (800ec88 <xTaskPriorityDisinherit+0x100>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d00a      	beq.n	800ebbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebac:	f383 8811 	msr	BASEPRI, r3
 800ebb0:	f3bf 8f6f 	isb	sy
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	60fb      	str	r3, [r7, #12]
}
 800ebba:	bf00      	nop
 800ebbc:	e7fe      	b.n	800ebbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10a      	bne.n	800ebdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	60bb      	str	r3, [r7, #8]
}
 800ebd8:	bf00      	nop
 800ebda:	e7fe      	b.n	800ebda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebe0:	1e5a      	subs	r2, r3, #1
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> Stashed changes

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< Updated upstream
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d044      	beq.n	800ece8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d140      	bne.n	800ece8 <xTaskPriorityDisinherit+0xf4>
=======
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d044      	beq.n	800ec7c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d140      	bne.n	800ec7c <xTaskPriorityDisinherit+0xf4>
>>>>>>> Stashed changes
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	3304      	adds	r3, #4
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fe f99c 	bl	800cfa8 <uxListRemove>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d115      	bne.n	800eca2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7a:	491f      	ldr	r1, [pc, #124]	; (800ecf8 <xTaskPriorityDisinherit+0x104>)
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	440b      	add	r3, r1
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10a      	bne.n	800eca2 <xTaskPriorityDisinherit+0xae>
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec90:	2201      	movs	r2, #1
 800ec92:	fa02 f303 	lsl.w	r3, r2, r3
 800ec96:	43da      	mvns	r2, r3
 800ec98:	4b18      	ldr	r3, [pc, #96]	; (800ecfc <xTaskPriorityDisinherit+0x108>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	4a17      	ldr	r2, [pc, #92]	; (800ecfc <xTaskPriorityDisinherit+0x108>)
 800eca0:	6013      	str	r3, [r2, #0]
=======
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe f99c 	bl	800cf3c <uxListRemove>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d115      	bne.n	800ec36 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec0e:	491f      	ldr	r1, [pc, #124]	; (800ec8c <xTaskPriorityDisinherit+0x104>)
 800ec10:	4613      	mov	r3, r2
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	4413      	add	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	440b      	add	r3, r1
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10a      	bne.n	800ec36 <xTaskPriorityDisinherit+0xae>
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec24:	2201      	movs	r2, #1
 800ec26:	fa02 f303 	lsl.w	r3, r2, r3
 800ec2a:	43da      	mvns	r2, r3
 800ec2c:	4b18      	ldr	r3, [pc, #96]	; (800ec90 <xTaskPriorityDisinherit+0x108>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4013      	ands	r3, r2
 800ec32:	4a17      	ldr	r2, [pc, #92]	; (800ec90 <xTaskPriorityDisinherit+0x108>)
 800ec34:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecae:	f1c3 0207 	rsb	r2, r3, #7
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecba:	2201      	movs	r2, #1
 800ecbc:	409a      	lsls	r2, r3
 800ecbe:	4b0f      	ldr	r3, [pc, #60]	; (800ecfc <xTaskPriorityDisinherit+0x108>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	4a0d      	ldr	r2, [pc, #52]	; (800ecfc <xTaskPriorityDisinherit+0x108>)
 800ecc6:	6013      	str	r3, [r2, #0]
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eccc:	4613      	mov	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4413      	add	r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	4a08      	ldr	r2, [pc, #32]	; (800ecf8 <xTaskPriorityDisinherit+0x104>)
 800ecd6:	441a      	add	r2, r3
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	4619      	mov	r1, r3
 800ecde:	4610      	mov	r0, r2
 800ece0:	f7fe f905 	bl	800ceee <vListInsertEnd>
=======
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec42:	f1c3 0207 	rsb	r2, r3, #7
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4e:	2201      	movs	r2, #1
 800ec50:	409a      	lsls	r2, r3
 800ec52:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <xTaskPriorityDisinherit+0x108>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	4a0d      	ldr	r2, [pc, #52]	; (800ec90 <xTaskPriorityDisinherit+0x108>)
 800ec5a:	6013      	str	r3, [r2, #0]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec60:	4613      	mov	r3, r2
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4413      	add	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4a08      	ldr	r2, [pc, #32]	; (800ec8c <xTaskPriorityDisinherit+0x104>)
 800ec6a:	441a      	add	r2, r3
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	3304      	adds	r3, #4
 800ec70:	4619      	mov	r1, r3
 800ec72:	4610      	mov	r0, r2
 800ec74:	f7fe f905 	bl	800ce82 <vListInsertEnd>
>>>>>>> Stashed changes
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 800ece4:	2301      	movs	r3, #1
 800ece6:	617b      	str	r3, [r7, #20]
=======
 800ec78:	2301      	movs	r3, #1
 800ec7a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 800ece8:	697b      	ldr	r3, [r7, #20]
	}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	20002858 	.word	0x20002858
 800ecf8:	2000285c 	.word	0x2000285c
 800ecfc:	20002960 	.word	0x20002960

0800ed00 <vTaskPriorityDisinheritAfterTimeout>:
=======
 800ec7c:	697b      	ldr	r3, [r7, #20]
	}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3718      	adds	r7, #24
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	20002a08 	.word	0x20002a08
 800ec8c:	20002a0c 	.word	0x20002a0c
 800ec90:	20002b10 	.word	0x20002b10

0800ec94 <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< Updated upstream
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b088      	sub	sp, #32
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 8088 	beq.w	800ee2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
=======
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b088      	sub	sp, #32
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eca2:	2301      	movs	r3, #1
 800eca4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f000 8088 	beq.w	800edbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
>>>>>>> Stashed changes
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< Updated upstream
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10a      	bne.n	800ed38 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	60fb      	str	r3, [r7, #12]
}
 800ed34:	bf00      	nop
 800ed36:	e7fe      	b.n	800ed36 <vTaskPriorityDisinheritAfterTimeout+0x36>
=======
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10a      	bne.n	800eccc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	60fb      	str	r3, [r7, #12]
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <vTaskPriorityDisinheritAfterTimeout+0x36>
>>>>>>> Stashed changes

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< Updated upstream
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed3c:	683a      	ldr	r2, [r7, #0]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d902      	bls.n	800ed48 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	61fb      	str	r3, [r7, #28]
 800ed46:	e002      	b.n	800ed4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
=======
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d902      	bls.n	800ecdc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	61fb      	str	r3, [r7, #28]
 800ecda:	e002      	b.n	800ece2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
>>>>>>> Stashed changes
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed4c:	61fb      	str	r3, [r7, #28]
=======
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece0:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< Updated upstream
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d068      	beq.n	800ee2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
=======
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece6:	69fa      	ldr	r2, [r7, #28]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d068      	beq.n	800edbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
>>>>>>> Stashed changes
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< Updated upstream
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d163      	bne.n	800ee2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
=======
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecf0:	697a      	ldr	r2, [r7, #20]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d163      	bne.n	800edbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
>>>>>>> Stashed changes
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< Updated upstream
 800ed62:	4b34      	ldr	r3, [pc, #208]	; (800ee34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	69ba      	ldr	r2, [r7, #24]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d10a      	bne.n	800ed82 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800ed6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed70:	f383 8811 	msr	BASEPRI, r3
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	f3bf 8f4f 	dsb	sy
 800ed7c:	60bb      	str	r3, [r7, #8]
}
 800ed7e:	bf00      	nop
 800ed80:	e7fe      	b.n	800ed80 <vTaskPriorityDisinheritAfterTimeout+0x80>
=======
 800ecf6:	4b34      	ldr	r3, [pc, #208]	; (800edc8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	69ba      	ldr	r2, [r7, #24]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d10a      	bne.n	800ed16 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	60bb      	str	r3, [r7, #8]
}
 800ed12:	bf00      	nop
 800ed14:	e7fe      	b.n	800ed14 <vTaskPriorityDisinheritAfterTimeout+0x80>
>>>>>>> Stashed changes

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< Updated upstream
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed86:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	69fa      	ldr	r2, [r7, #28]
 800ed8c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	69fa      	ldr	r2, [r7, #28]
 800ed20:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	699b      	ldr	r3, [r3, #24]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	db04      	blt.n	800eda0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	f1c3 0207 	rsb	r2, r3, #7
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	619a      	str	r2, [r3, #24]
=======
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	db04      	blt.n	800ed34 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	f1c3 0207 	rsb	r2, r3, #7
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	6959      	ldr	r1, [r3, #20]
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	4613      	mov	r3, r2
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4a22      	ldr	r2, [pc, #136]	; (800ee38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800edb0:	4413      	add	r3, r2
 800edb2:	4299      	cmp	r1, r3
 800edb4:	d101      	bne.n	800edba <vTaskPriorityDisinheritAfterTimeout+0xba>
 800edb6:	2301      	movs	r3, #1
 800edb8:	e000      	b.n	800edbc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800edba:	2300      	movs	r3, #0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d034      	beq.n	800ee2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fe f8ef 	bl	800cfa8 <uxListRemove>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d115      	bne.n	800edfc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edd4:	4918      	ldr	r1, [pc, #96]	; (800ee38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800edd6:	4613      	mov	r3, r2
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	4413      	add	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	440b      	add	r3, r1
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d10a      	bne.n	800edfc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edea:	2201      	movs	r2, #1
 800edec:	fa02 f303 	lsl.w	r3, r2, r3
 800edf0:	43da      	mvns	r2, r3
 800edf2:	4b12      	ldr	r3, [pc, #72]	; (800ee3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4013      	ands	r3, r2
 800edf8:	4a10      	ldr	r2, [pc, #64]	; (800ee3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800edfa:	6013      	str	r3, [r2, #0]
=======
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	6959      	ldr	r1, [r3, #20]
 800ed38:	693a      	ldr	r2, [r7, #16]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4a22      	ldr	r2, [pc, #136]	; (800edcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ed44:	4413      	add	r3, r2
 800ed46:	4299      	cmp	r1, r3
 800ed48:	d101      	bne.n	800ed4e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	e000      	b.n	800ed50 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d034      	beq.n	800edbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	3304      	adds	r3, #4
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fe f8ef 	bl	800cf3c <uxListRemove>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d115      	bne.n	800ed90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed68:	4918      	ldr	r1, [pc, #96]	; (800edcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4413      	add	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	440b      	add	r3, r1
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10a      	bne.n	800ed90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7e:	2201      	movs	r2, #1
 800ed80:	fa02 f303 	lsl.w	r3, r2, r3
 800ed84:	43da      	mvns	r2, r3
 800ed86:	4b12      	ldr	r3, [pc, #72]	; (800edd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4013      	ands	r3, r2
 800ed8c:	4a10      	ldr	r2, [pc, #64]	; (800edd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ed8e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	2201      	movs	r2, #1
 800ee02:	409a      	lsls	r2, r3
 800ee04:	4b0d      	ldr	r3, [pc, #52]	; (800ee3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	4a0c      	ldr	r2, [pc, #48]	; (800ee3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ee0c:	6013      	str	r3, [r2, #0]
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee12:	4613      	mov	r3, r2
 800ee14:	009b      	lsls	r3, r3, #2
 800ee16:	4413      	add	r3, r2
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	4a07      	ldr	r2, [pc, #28]	; (800ee38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee1c:	441a      	add	r2, r3
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4619      	mov	r1, r3
 800ee24:	4610      	mov	r0, r2
 800ee26:	f7fe f862 	bl	800ceee <vListInsertEnd>
=======
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed94:	2201      	movs	r2, #1
 800ed96:	409a      	lsls	r2, r3
 800ed98:	4b0d      	ldr	r3, [pc, #52]	; (800edd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	4a0c      	ldr	r2, [pc, #48]	; (800edd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800eda0:	6013      	str	r3, [r2, #0]
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda6:	4613      	mov	r3, r2
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4a07      	ldr	r2, [pc, #28]	; (800edcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800edb0:	441a      	add	r2, r3
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	3304      	adds	r3, #4
 800edb6:	4619      	mov	r1, r3
 800edb8:	4610      	mov	r0, r2
 800edba:	f7fe f862 	bl	800ce82 <vListInsertEnd>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800ee2a:	bf00      	nop
 800ee2c:	3720      	adds	r7, #32
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	20002858 	.word	0x20002858
 800ee38:	2000285c 	.word	0x2000285c
 800ee3c:	20002960 	.word	0x20002960

0800ee40 <pvTaskIncrementMutexHeldCount>:
=======
 800edbe:	bf00      	nop
 800edc0:	3720      	adds	r7, #32
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	20002a08 	.word	0x20002a08
 800edcc:	20002a0c 	.word	0x20002a0c
 800edd0:	20002b10 	.word	0x20002b10

0800edd4 <pvTaskIncrementMutexHeldCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< Updated upstream
 800ee40:	b480      	push	{r7}
 800ee42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee44:	4b07      	ldr	r3, [pc, #28]	; (800ee64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d004      	beq.n	800ee56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee4c:	4b05      	ldr	r3, [pc, #20]	; (800ee64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ee52:	3201      	adds	r2, #1
 800ee54:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800ee56:	4b03      	ldr	r3, [pc, #12]	; (800ee64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee58:	681b      	ldr	r3, [r3, #0]
	}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	20002858 	.word	0x20002858

0800ee68 <prvAddCurrentTaskToDelayedList>:
=======
 800edd4:	b480      	push	{r7}
 800edd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800edd8:	4b07      	ldr	r3, [pc, #28]	; (800edf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d004      	beq.n	800edea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ede0:	4b05      	ldr	r3, [pc, #20]	; (800edf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ede6:	3201      	adds	r2, #1
 800ede8:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800edea:	4b03      	ldr	r3, [pc, #12]	; (800edf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800edec:	681b      	ldr	r3, [r3, #0]
	}
 800edee:	4618      	mov	r0, r3
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	20002a08 	.word	0x20002a08

0800edfc <prvAddCurrentTaskToDelayedList>:
>>>>>>> Stashed changes
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< Updated upstream
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee72:	4b29      	ldr	r3, [pc, #164]	; (800ef18 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
=======
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee06:	4b29      	ldr	r3, [pc, #164]	; (800eeac <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800ee78:	4b28      	ldr	r3, [pc, #160]	; (800ef1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fe f892 	bl	800cfa8 <uxListRemove>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10b      	bne.n	800eea2 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800ee0c:	4b28      	ldr	r3, [pc, #160]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	3304      	adds	r3, #4
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fe f892 	bl	800cf3c <uxListRemove>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10b      	bne.n	800ee36 <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> Stashed changes
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
<<<<<<< Updated upstream
 800ee8a:	4b24      	ldr	r3, [pc, #144]	; (800ef1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee90:	2201      	movs	r2, #1
 800ee92:	fa02 f303 	lsl.w	r3, r2, r3
 800ee96:	43da      	mvns	r2, r3
 800ee98:	4b21      	ldr	r3, [pc, #132]	; (800ef20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	4a20      	ldr	r2, [pc, #128]	; (800ef20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eea0:	6013      	str	r3, [r2, #0]
=======
 800ee1e:	4b24      	ldr	r3, [pc, #144]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee24:	2201      	movs	r2, #1
 800ee26:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2a:	43da      	mvns	r2, r3
 800ee2c:	4b21      	ldr	r3, [pc, #132]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4013      	ands	r3, r2
 800ee32:	4a20      	ldr	r2, [pc, #128]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee34:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< Updated upstream
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea8:	d10a      	bne.n	800eec0 <prvAddCurrentTaskToDelayedList+0x58>
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d007      	beq.n	800eec0 <prvAddCurrentTaskToDelayedList+0x58>
=======
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3c:	d10a      	bne.n	800ee54 <prvAddCurrentTaskToDelayedList+0x58>
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d007      	beq.n	800ee54 <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> Stashed changes
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800eeb0:	4b1a      	ldr	r3, [pc, #104]	; (800ef1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	481a      	ldr	r0, [pc, #104]	; (800ef24 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eeba:	f7fe f818 	bl	800ceee <vListInsertEnd>
=======
 800ee44:	4b1a      	ldr	r3, [pc, #104]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	3304      	adds	r3, #4
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	481a      	ldr	r0, [pc, #104]	; (800eeb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ee4e:	f7fe f818 	bl	800ce82 <vListInsertEnd>
>>>>>>> Stashed changes

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< Updated upstream
 800eebe:	e026      	b.n	800ef0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eec0:	68fa      	ldr	r2, [r7, #12]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4413      	add	r3, r2
 800eec6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eec8:	4b14      	ldr	r3, [pc, #80]	; (800ef1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d209      	bcs.n	800eeec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eed8:	4b13      	ldr	r3, [pc, #76]	; (800ef28 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	4b0f      	ldr	r3, [pc, #60]	; (800ef1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	3304      	adds	r3, #4
 800eee2:	4619      	mov	r1, r3
 800eee4:	4610      	mov	r0, r2
 800eee6:	f7fe f826 	bl	800cf36 <vListInsert>
}
 800eeea:	e010      	b.n	800ef0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eeec:	4b0f      	ldr	r3, [pc, #60]	; (800ef2c <prvAddCurrentTaskToDelayedList+0xc4>)
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	4b0a      	ldr	r3, [pc, #40]	; (800ef1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3304      	adds	r3, #4
 800eef6:	4619      	mov	r1, r3
 800eef8:	4610      	mov	r0, r2
 800eefa:	f7fe f81c 	bl	800cf36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eefe:	4b0c      	ldr	r3, [pc, #48]	; (800ef30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d202      	bcs.n	800ef0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ef08:	4a09      	ldr	r2, [pc, #36]	; (800ef30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	6013      	str	r3, [r2, #0]
}
 800ef0e:	bf00      	nop
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	2000295c 	.word	0x2000295c
 800ef1c:	20002858 	.word	0x20002858
 800ef20:	20002960 	.word	0x20002960
 800ef24:	20002944 	.word	0x20002944
 800ef28:	20002914 	.word	0x20002914
 800ef2c:	20002910 	.word	0x20002910
 800ef30:	20002978 	.word	0x20002978

0800ef34 <xTimerCreateTimerTask>:
=======
 800ee52:	e026      	b.n	800eea2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4413      	add	r3, r2
 800ee5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee5c:	4b14      	ldr	r3, [pc, #80]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee64:	68ba      	ldr	r2, [r7, #8]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d209      	bcs.n	800ee80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee6c:	4b13      	ldr	r3, [pc, #76]	; (800eebc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	4b0f      	ldr	r3, [pc, #60]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	3304      	adds	r3, #4
 800ee76:	4619      	mov	r1, r3
 800ee78:	4610      	mov	r0, r2
 800ee7a:	f7fe f826 	bl	800ceca <vListInsert>
}
 800ee7e:	e010      	b.n	800eea2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee80:	4b0f      	ldr	r3, [pc, #60]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	4b0a      	ldr	r3, [pc, #40]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	3304      	adds	r3, #4
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	4610      	mov	r0, r2
 800ee8e:	f7fe f81c 	bl	800ceca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee92:	4b0c      	ldr	r3, [pc, #48]	; (800eec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d202      	bcs.n	800eea2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ee9c:	4a09      	ldr	r2, [pc, #36]	; (800eec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	6013      	str	r3, [r2, #0]
}
 800eea2:	bf00      	nop
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	20002b0c 	.word	0x20002b0c
 800eeb0:	20002a08 	.word	0x20002a08
 800eeb4:	20002b10 	.word	0x20002b10
 800eeb8:	20002af4 	.word	0x20002af4
 800eebc:	20002ac4 	.word	0x20002ac4
 800eec0:	20002ac0 	.word	0x20002ac0
 800eec4:	20002b28 	.word	0x20002b28

0800eec8 <xTimerCreateTimerTask>:
>>>>>>> Stashed changes
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< Updated upstream
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b08a      	sub	sp, #40	; 0x28
 800ef38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	617b      	str	r3, [r7, #20]
=======
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b08a      	sub	sp, #40	; 0x28
 800eecc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eece:	2300      	movs	r3, #0
 800eed0:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< Updated upstream
 800ef3e:	f000 fb41 	bl	800f5c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef42:	4b1c      	ldr	r3, [pc, #112]	; (800efb4 <xTimerCreateTimerTask+0x80>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d021      	beq.n	800ef8e <xTimerCreateTimerTask+0x5a>
=======
 800eed2:	f000 fb41 	bl	800f558 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eed6:	4b1c      	ldr	r3, [pc, #112]	; (800ef48 <xTimerCreateTimerTask+0x80>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d021      	beq.n	800ef22 <xTimerCreateTimerTask+0x5a>
>>>>>>> Stashed changes
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef52:	1d3a      	adds	r2, r7, #4
 800ef54:	f107 0108 	add.w	r1, r7, #8
 800ef58:	f107 030c 	add.w	r3, r7, #12
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7f4 fbf5 	bl	800374c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef62:	6879      	ldr	r1, [r7, #4]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	9202      	str	r2, [sp, #8]
 800ef6a:	9301      	str	r3, [sp, #4]
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	2300      	movs	r3, #0
 800ef72:	460a      	mov	r2, r1
 800ef74:	4910      	ldr	r1, [pc, #64]	; (800efb8 <xTimerCreateTimerTask+0x84>)
 800ef76:	4811      	ldr	r0, [pc, #68]	; (800efbc <xTimerCreateTimerTask+0x88>)
 800ef78:	f7fe fed2 	bl	800dd20 <xTaskCreateStatic>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	4a10      	ldr	r2, [pc, #64]	; (800efc0 <xTimerCreateTimerTask+0x8c>)
 800ef80:	6013      	str	r3, [r2, #0]
=======
 800eede:	2300      	movs	r3, #0
 800eee0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eee6:	1d3a      	adds	r2, r7, #4
 800eee8:	f107 0108 	add.w	r1, r7, #8
 800eeec:	f107 030c 	add.w	r3, r7, #12
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7f4 fb75 	bl	80035e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eef6:	6879      	ldr	r1, [r7, #4]
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	9202      	str	r2, [sp, #8]
 800eefe:	9301      	str	r3, [sp, #4]
 800ef00:	2302      	movs	r3, #2
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	2300      	movs	r3, #0
 800ef06:	460a      	mov	r2, r1
 800ef08:	4910      	ldr	r1, [pc, #64]	; (800ef4c <xTimerCreateTimerTask+0x84>)
 800ef0a:	4811      	ldr	r0, [pc, #68]	; (800ef50 <xTimerCreateTimerTask+0x88>)
 800ef0c:	f7fe fed2 	bl	800dcb4 <xTaskCreateStatic>
 800ef10:	4603      	mov	r3, r0
 800ef12:	4a10      	ldr	r2, [pc, #64]	; (800ef54 <xTimerCreateTimerTask+0x8c>)
 800ef14:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< Updated upstream
 800ef82:	4b0f      	ldr	r3, [pc, #60]	; (800efc0 <xTimerCreateTimerTask+0x8c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	617b      	str	r3, [r7, #20]
=======
 800ef16:	4b0f      	ldr	r3, [pc, #60]	; (800ef54 <xTimerCreateTimerTask+0x8c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< Updated upstream
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d10a      	bne.n	800efaa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	613b      	str	r3, [r7, #16]
}
 800efa6:	bf00      	nop
 800efa8:	e7fe      	b.n	800efa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800efaa:	697b      	ldr	r3, [r7, #20]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	200029b4 	.word	0x200029b4
 800efb8:	0801198c 	.word	0x0801198c
 800efbc:	0800f201 	.word	0x0800f201
 800efc0:	200029b8 	.word	0x200029b8

0800efc4 <xTimerCreate>:
=======
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	613b      	str	r3, [r7, #16]
}
 800ef3a:	bf00      	nop
 800ef3c:	e7fe      	b.n	800ef3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef3e:	697b      	ldr	r3, [r7, #20]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3718      	adds	r7, #24
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	20002b64 	.word	0x20002b64
 800ef4c:	0801191c 	.word	0x0801191c
 800ef50:	0800f195 	.word	0x0800f195
 800ef54:	20002b68 	.word	0x20002b68

0800ef58 <xTimerCreate>:
>>>>>>> Stashed changes
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
<<<<<<< Updated upstream
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af02      	add	r7, sp, #8
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
 800efd0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800efd2:	202c      	movs	r0, #44	; 0x2c
 800efd4:	f000 fd88 	bl	800fae8 <pvPortMalloc>
 800efd8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00d      	beq.n	800effc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	6a3b      	ldr	r3, [r7, #32]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	68b9      	ldr	r1, [r7, #8]
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f000 f846 	bl	800f080 <prvInitialiseNewTimer>
=======
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b088      	sub	sp, #32
 800ef5c:	af02      	add	r7, sp, #8
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ef66:	202c      	movs	r0, #44	; 0x2c
 800ef68:	f000 fd86 	bl	800fa78 <pvPortMalloc>
 800ef6c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00d      	beq.n	800ef90 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	9301      	str	r3, [sp, #4]
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	68b9      	ldr	r1, [r7, #8]
 800ef82:	68f8      	ldr	r0, [r7, #12]
 800ef84:	f000 f846 	bl	800f014 <prvInitialiseNewTimer>
>>>>>>> Stashed changes
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
<<<<<<< Updated upstream
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
<<<<<<< Updated upstream
 800effc:	697b      	ldr	r3, [r7, #20]
	}
 800effe:	4618      	mov	r0, r3
 800f000:	3718      	adds	r7, #24
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <xTimerCreateStatic>:
=======
 800ef90:	697b      	ldr	r3, [r7, #20]
	}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3718      	adds	r7, #24
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <xTimerCreateStatic>:
>>>>>>> Stashed changes
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
<<<<<<< Updated upstream
 800f006:	b580      	push	{r7, lr}
 800f008:	b08a      	sub	sp, #40	; 0x28
 800f00a:	af02      	add	r7, sp, #8
 800f00c:	60f8      	str	r0, [r7, #12]
 800f00e:	60b9      	str	r1, [r7, #8]
 800f010:	607a      	str	r2, [r7, #4]
 800f012:	603b      	str	r3, [r7, #0]
=======
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b08a      	sub	sp, #40	; 0x28
 800ef9e:	af02      	add	r7, sp, #8
 800efa0:	60f8      	str	r0, [r7, #12]
 800efa2:	60b9      	str	r1, [r7, #8]
 800efa4:	607a      	str	r2, [r7, #4]
 800efa6:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
<<<<<<< Updated upstream
 800f014:	232c      	movs	r3, #44	; 0x2c
 800f016:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	2b2c      	cmp	r3, #44	; 0x2c
 800f01c:	d00a      	beq.n	800f034 <xTimerCreateStatic+0x2e>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	61bb      	str	r3, [r7, #24]
}
 800f030:	bf00      	nop
 800f032:	e7fe      	b.n	800f032 <xTimerCreateStatic+0x2c>
=======
 800efa8:	232c      	movs	r3, #44	; 0x2c
 800efaa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	2b2c      	cmp	r3, #44	; 0x2c
 800efb0:	d00a      	beq.n	800efc8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800efb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb6:	f383 8811 	msr	BASEPRI, r3
 800efba:	f3bf 8f6f 	isb	sy
 800efbe:	f3bf 8f4f 	dsb	sy
 800efc2:	61bb      	str	r3, [r7, #24]
}
 800efc4:	bf00      	nop
 800efc6:	e7fe      	b.n	800efc6 <xTimerCreateStatic+0x2c>
>>>>>>> Stashed changes
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
<<<<<<< Updated upstream
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10a      	bne.n	800f050 <xTimerCreateStatic+0x4a>
	__asm volatile
 800f03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03e:	f383 8811 	msr	BASEPRI, r3
 800f042:	f3bf 8f6f 	isb	sy
 800f046:	f3bf 8f4f 	dsb	sy
 800f04a:	617b      	str	r3, [r7, #20]
}
 800f04c:	bf00      	nop
 800f04e:	e7fe      	b.n	800f04e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f052:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00d      	beq.n	800f076 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	68b9      	ldr	r1, [r7, #8]
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f000 f809 	bl	800f080 <prvInitialiseNewTimer>
=======
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10a      	bne.n	800efe4 <xTimerCreateStatic+0x4a>
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	617b      	str	r3, [r7, #20]
}
 800efe0:	bf00      	nop
 800efe2:	e7fe      	b.n	800efe2 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800efe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d00d      	beq.n	800f00a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	9301      	str	r3, [sp, #4]
 800eff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	68b9      	ldr	r1, [r7, #8]
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f000 f809 	bl	800f014 <prvInitialiseNewTimer>
>>>>>>> Stashed changes

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
<<<<<<< Updated upstream
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	2201      	movs	r2, #1
 800f072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	2201      	movs	r2, #1
 800f006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
<<<<<<< Updated upstream
 800f076:	69fb      	ldr	r3, [r7, #28]
	}
 800f078:	4618      	mov	r0, r3
 800f07a:	3720      	adds	r7, #32
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <prvInitialiseNewTimer>:
=======
 800f00a:	69fb      	ldr	r3, [r7, #28]
	}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3720      	adds	r7, #32
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <prvInitialiseNewTimer>:
>>>>>>> Stashed changes
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
<<<<<<< Updated upstream
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d10a      	bne.n	800f0aa <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	617b      	str	r3, [r7, #20]
}
 800f0a6:	bf00      	nop
 800f0a8:	e7fe      	b.n	800f0a8 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d015      	beq.n	800f0dc <prvInitialiseNewTimer+0x5c>
=======
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
 800f020:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10a      	bne.n	800f03e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02c:	f383 8811 	msr	BASEPRI, r3
 800f030:	f3bf 8f6f 	isb	sy
 800f034:	f3bf 8f4f 	dsb	sy
 800f038:	617b      	str	r3, [r7, #20]
}
 800f03a:	bf00      	nop
 800f03c:	e7fe      	b.n	800f03c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	2b00      	cmp	r3, #0
 800f042:	d015      	beq.n	800f070 <prvInitialiseNewTimer+0x5c>
>>>>>>> Stashed changes
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
<<<<<<< Updated upstream
 800f0b0:	f000 fa88 	bl	800f5c4 <prvCheckForValidListAndQueue>
=======
 800f044:	f000 fa88 	bl	800f558 <prvCheckForValidListAndQueue>
>>>>>>> Stashed changes

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
<<<<<<< Updated upstream
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	683a      	ldr	r2, [r7, #0]
 800f0ca:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	6a3a      	ldr	r2, [r7, #32]
 800f0d0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fd fefc 	bl	800ced4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f0dc:	bf00      	nop
 800f0de:	3718      	adds	r7, #24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <xTimerGenericCommand>:
=======
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	6a3a      	ldr	r2, [r7, #32]
 800f064:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	3304      	adds	r3, #4
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fd fefc 	bl	800ce68 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f070:	bf00      	nop
 800f072:	3718      	adds	r7, #24
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <xTimerGenericCommand>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b08a      	sub	sp, #40	; 0x28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
 800f0f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10a      	bne.n	800f112 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	623b      	str	r3, [r7, #32]
}
 800f10e:	bf00      	nop
 800f110:	e7fe      	b.n	800f110 <xTimerGenericCommand+0x2c>
=======
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08a      	sub	sp, #40	; 0x28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
 800f084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f086:	2300      	movs	r3, #0
 800f088:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d10a      	bne.n	800f0a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f094:	f383 8811 	msr	BASEPRI, r3
 800f098:	f3bf 8f6f 	isb	sy
 800f09c:	f3bf 8f4f 	dsb	sy
 800f0a0:	623b      	str	r3, [r7, #32]
}
 800f0a2:	bf00      	nop
 800f0a4:	e7fe      	b.n	800f0a4 <xTimerGenericCommand+0x2c>
>>>>>>> Stashed changes

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 800f112:	4b1a      	ldr	r3, [pc, #104]	; (800f17c <xTimerGenericCommand+0x98>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d02a      	beq.n	800f170 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	2b05      	cmp	r3, #5
 800f12a:	dc18      	bgt.n	800f15e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f12c:	f7ff fcbe 	bl	800eaac <xTaskGetSchedulerState>
 800f130:	4603      	mov	r3, r0
 800f132:	2b02      	cmp	r3, #2
 800f134:	d109      	bne.n	800f14a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f136:	4b11      	ldr	r3, [pc, #68]	; (800f17c <xTimerGenericCommand+0x98>)
 800f138:	6818      	ldr	r0, [r3, #0]
 800f13a:	f107 0114 	add.w	r1, r7, #20
 800f13e:	2300      	movs	r3, #0
 800f140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f142:	f7fe f8e5 	bl	800d310 <xQueueGenericSend>
 800f146:	6278      	str	r0, [r7, #36]	; 0x24
 800f148:	e012      	b.n	800f170 <xTimerGenericCommand+0x8c>
=======
 800f0a6:	4b1a      	ldr	r3, [pc, #104]	; (800f110 <xTimerGenericCommand+0x98>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d02a      	beq.n	800f104 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b05      	cmp	r3, #5
 800f0be:	dc18      	bgt.n	800f0f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0c0:	f7ff fcbe 	bl	800ea40 <xTaskGetSchedulerState>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d109      	bne.n	800f0de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0ca:	4b11      	ldr	r3, [pc, #68]	; (800f110 <xTimerGenericCommand+0x98>)
 800f0cc:	6818      	ldr	r0, [r3, #0]
 800f0ce:	f107 0114 	add.w	r1, r7, #20
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0d6:	f7fe f8e5 	bl	800d2a4 <xQueueGenericSend>
 800f0da:	6278      	str	r0, [r7, #36]	; 0x24
 800f0dc:	e012      	b.n	800f104 <xTimerGenericCommand+0x8c>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< Updated upstream
 800f14a:	4b0c      	ldr	r3, [pc, #48]	; (800f17c <xTimerGenericCommand+0x98>)
 800f14c:	6818      	ldr	r0, [r3, #0]
 800f14e:	f107 0114 	add.w	r1, r7, #20
 800f152:	2300      	movs	r3, #0
 800f154:	2200      	movs	r2, #0
 800f156:	f7fe f8db 	bl	800d310 <xQueueGenericSend>
 800f15a:	6278      	str	r0, [r7, #36]	; 0x24
 800f15c:	e008      	b.n	800f170 <xTimerGenericCommand+0x8c>
=======
 800f0de:	4b0c      	ldr	r3, [pc, #48]	; (800f110 <xTimerGenericCommand+0x98>)
 800f0e0:	6818      	ldr	r0, [r3, #0]
 800f0e2:	f107 0114 	add.w	r1, r7, #20
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f7fe f8db 	bl	800d2a4 <xQueueGenericSend>
 800f0ee:	6278      	str	r0, [r7, #36]	; 0x24
 800f0f0:	e008      	b.n	800f104 <xTimerGenericCommand+0x8c>
>>>>>>> Stashed changes
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< Updated upstream
 800f15e:	4b07      	ldr	r3, [pc, #28]	; (800f17c <xTimerGenericCommand+0x98>)
 800f160:	6818      	ldr	r0, [r3, #0]
 800f162:	f107 0114 	add.w	r1, r7, #20
 800f166:	2300      	movs	r3, #0
 800f168:	683a      	ldr	r2, [r7, #0]
 800f16a:	f7fe f9cf 	bl	800d50c <xQueueGenericSendFromISR>
 800f16e:	6278      	str	r0, [r7, #36]	; 0x24
=======
 800f0f2:	4b07      	ldr	r3, [pc, #28]	; (800f110 <xTimerGenericCommand+0x98>)
 800f0f4:	6818      	ldr	r0, [r3, #0]
 800f0f6:	f107 0114 	add.w	r1, r7, #20
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	683a      	ldr	r2, [r7, #0]
 800f0fe:	f7fe f9cf 	bl	800d4a0 <xQueueGenericSendFromISR>
 800f102:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< Updated upstream
 800f170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f172:	4618      	mov	r0, r3
 800f174:	3728      	adds	r7, #40	; 0x28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	200029b4 	.word	0x200029b4

0800f180 <prvProcessExpiredTimer>:
=======
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f106:	4618      	mov	r0, r3
 800f108:	3728      	adds	r7, #40	; 0x28
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	20002b64 	.word	0x20002b64

0800f114 <prvProcessExpiredTimer>:
>>>>>>> Stashed changes
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< Updated upstream
 800f180:	b580      	push	{r7, lr}
 800f182:	b088      	sub	sp, #32
 800f184:	af02      	add	r7, sp, #8
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f18a:	4b1c      	ldr	r3, [pc, #112]	; (800f1fc <prvProcessExpiredTimer+0x7c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	617b      	str	r3, [r7, #20]
=======
 800f114:	b580      	push	{r7, lr}
 800f116:	b088      	sub	sp, #32
 800f118:	af02      	add	r7, sp, #8
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f11e:	4b1c      	ldr	r3, [pc, #112]	; (800f190 <prvProcessExpiredTimer+0x7c>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	3304      	adds	r3, #4
 800f198:	4618      	mov	r0, r3
 800f19a:	f7fd ff05 	bl	800cfa8 <uxListRemove>
=======
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	3304      	adds	r3, #4
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fd ff05 	bl	800cf3c <uxListRemove>
>>>>>>> Stashed changes
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
<<<<<<< Updated upstream
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	69db      	ldr	r3, [r3, #28]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d122      	bne.n	800f1ec <prvProcessExpiredTimer+0x6c>
=======
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	69db      	ldr	r3, [r3, #28]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d122      	bne.n	800f180 <prvProcessExpiredTimer+0x6c>
>>>>>>> Stashed changes
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< Updated upstream
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	699a      	ldr	r2, [r3, #24]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	18d1      	adds	r1, r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	6978      	ldr	r0, [r7, #20]
 800f1b4:	f000 f8c8 	bl	800f348 <prvInsertTimerInActiveList>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d016      	beq.n	800f1ec <prvProcessExpiredTimer+0x6c>
=======
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	699a      	ldr	r2, [r3, #24]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	18d1      	adds	r1, r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	6978      	ldr	r0, [r7, #20]
 800f148:	f000 f8c8 	bl	800f2dc <prvInsertTimerInActiveList>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d016      	beq.n	800f180 <prvProcessExpiredTimer+0x6c>
>>>>>>> Stashed changes
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 800f1be:	2300      	movs	r3, #0
 800f1c0:	9300      	str	r3, [sp, #0]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	6978      	ldr	r0, [r7, #20]
 800f1ca:	f7ff ff8b 	bl	800f0e4 <xTimerGenericCommand>
 800f1ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10a      	bne.n	800f1ec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1da:	f383 8811 	msr	BASEPRI, r3
 800f1de:	f3bf 8f6f 	isb	sy
 800f1e2:	f3bf 8f4f 	dsb	sy
 800f1e6:	60fb      	str	r3, [r7, #12]
}
 800f1e8:	bf00      	nop
 800f1ea:	e7fe      	b.n	800f1ea <prvProcessExpiredTimer+0x6a>
=======
 800f152:	2300      	movs	r3, #0
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	2300      	movs	r3, #0
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	2100      	movs	r1, #0
 800f15c:	6978      	ldr	r0, [r7, #20]
 800f15e:	f7ff ff8b 	bl	800f078 <xTimerGenericCommand>
 800f162:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d10a      	bne.n	800f180 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	60fb      	str	r3, [r7, #12]
}
 800f17c:	bf00      	nop
 800f17e:	e7fe      	b.n	800f17e <prvProcessExpiredTimer+0x6a>
>>>>>>> Stashed changes
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f0:	6978      	ldr	r0, [r7, #20]
 800f1f2:	4798      	blx	r3
}
 800f1f4:	bf00      	nop
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	200029ac 	.word	0x200029ac

0800f200 <prvTimerTask>:
=======
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f184:	6978      	ldr	r0, [r7, #20]
 800f186:	4798      	blx	r3
}
 800f188:	bf00      	nop
 800f18a:	3718      	adds	r7, #24
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	20002b5c 	.word	0x20002b5c

0800f194 <prvTimerTask>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
<<<<<<< Updated upstream
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
=======
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< Updated upstream
 800f208:	f107 0308 	add.w	r3, r7, #8
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 f857 	bl	800f2c0 <prvGetNextExpireTime>
 800f212:	60f8      	str	r0, [r7, #12]
=======
 800f19c:	f107 0308 	add.w	r3, r7, #8
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 f857 	bl	800f254 <prvGetNextExpireTime>
 800f1a6:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< Updated upstream
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	4619      	mov	r1, r3
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f000 f803 	bl	800f224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f21e:	f000 f8d5 	bl	800f3cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f222:	e7f1      	b.n	800f208 <prvTimerTask+0x8>

0800f224 <prvProcessTimerOrBlockTask>:
=======
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f000 f803 	bl	800f1b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f1b2:	f000 f8d5 	bl	800f360 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1b6:	e7f1      	b.n	800f19c <prvTimerTask+0x8>

0800f1b8 <prvProcessTimerOrBlockTask>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< Updated upstream
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
=======
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< Updated upstream
 800f22e:	f7ff f83b 	bl	800e2a8 <vTaskSuspendAll>
=======
 800f1c2:	f7ff f83b 	bl	800e23c <vTaskSuspendAll>
>>>>>>> Stashed changes
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 800f232:	f107 0308 	add.w	r3, r7, #8
 800f236:	4618      	mov	r0, r3
 800f238:	f000 f866 	bl	800f308 <prvSampleTimeNow>
 800f23c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d130      	bne.n	800f2a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10a      	bne.n	800f260 <prvProcessTimerOrBlockTask+0x3c>
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d806      	bhi.n	800f260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f252:	f7ff f837 	bl	800e2c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f256:	68f9      	ldr	r1, [r7, #12]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff ff91 	bl	800f180 <prvProcessExpiredTimer>
=======
 800f1c6:	f107 0308 	add.w	r3, r7, #8
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f000 f866 	bl	800f29c <prvSampleTimeNow>
 800f1d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d130      	bne.n	800f23a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10a      	bne.n	800f1f4 <prvProcessTimerOrBlockTask+0x3c>
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d806      	bhi.n	800f1f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f1e6:	f7ff f837 	bl	800e258 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f1ea:	68f9      	ldr	r1, [r7, #12]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f7ff ff91 	bl	800f114 <prvProcessExpiredTimer>
>>>>>>> Stashed changes
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< Updated upstream
 800f25e:	e024      	b.n	800f2aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d008      	beq.n	800f278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f266:	4b13      	ldr	r3, [pc, #76]	; (800f2b4 <prvProcessTimerOrBlockTask+0x90>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	bf0c      	ite	eq
 800f270:	2301      	moveq	r3, #1
 800f272:	2300      	movne	r3, #0
 800f274:	b2db      	uxtb	r3, r3
 800f276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f278:	4b0f      	ldr	r3, [pc, #60]	; (800f2b8 <prvProcessTimerOrBlockTask+0x94>)
 800f27a:	6818      	ldr	r0, [r3, #0]
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	683a      	ldr	r2, [r7, #0]
 800f284:	4619      	mov	r1, r3
 800f286:	f7fe fd17 	bl	800dcb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f28a:	f7ff f81b 	bl	800e2c4 <xTaskResumeAll>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10a      	bne.n	800f2aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f294:	4b09      	ldr	r3, [pc, #36]	; (800f2bc <prvProcessTimerOrBlockTask+0x98>)
 800f296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f29a:	601a      	str	r2, [r3, #0]
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	f3bf 8f6f 	isb	sy
}
 800f2a4:	e001      	b.n	800f2aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2a6:	f7ff f80d 	bl	800e2c4 <xTaskResumeAll>
}
 800f2aa:	bf00      	nop
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	200029b0 	.word	0x200029b0
 800f2b8:	200029b4 	.word	0x200029b4
 800f2bc:	e000ed04 	.word	0xe000ed04

0800f2c0 <prvGetNextExpireTime>:
=======
 800f1f2:	e024      	b.n	800f23e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d008      	beq.n	800f20c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f1fa:	4b13      	ldr	r3, [pc, #76]	; (800f248 <prvProcessTimerOrBlockTask+0x90>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	bf0c      	ite	eq
 800f204:	2301      	moveq	r3, #1
 800f206:	2300      	movne	r3, #0
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f20c:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <prvProcessTimerOrBlockTask+0x94>)
 800f20e:	6818      	ldr	r0, [r3, #0]
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	683a      	ldr	r2, [r7, #0]
 800f218:	4619      	mov	r1, r3
 800f21a:	f7fe fd17 	bl	800dc4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f21e:	f7ff f81b 	bl	800e258 <xTaskResumeAll>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d10a      	bne.n	800f23e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f228:	4b09      	ldr	r3, [pc, #36]	; (800f250 <prvProcessTimerOrBlockTask+0x98>)
 800f22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f22e:	601a      	str	r2, [r3, #0]
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	f3bf 8f6f 	isb	sy
}
 800f238:	e001      	b.n	800f23e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f23a:	f7ff f80d 	bl	800e258 <xTaskResumeAll>
}
 800f23e:	bf00      	nop
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	20002b60 	.word	0x20002b60
 800f24c:	20002b64 	.word	0x20002b64
 800f250:	e000ed04 	.word	0xe000ed04

0800f254 <prvGetNextExpireTime>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< Updated upstream
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
=======
 800f254:	b480      	push	{r7}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< Updated upstream
 800f2c8:	4b0e      	ldr	r3, [pc, #56]	; (800f304 <prvGetNextExpireTime+0x44>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	bf0c      	ite	eq
 800f2d2:	2301      	moveq	r3, #1
 800f2d4:	2300      	movne	r3, #0
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	461a      	mov	r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d105      	bne.n	800f2f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2e6:	4b07      	ldr	r3, [pc, #28]	; (800f304 <prvGetNextExpireTime+0x44>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	e001      	b.n	800f2f6 <prvGetNextExpireTime+0x36>
=======
 800f25c:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <prvGetNextExpireTime+0x44>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	bf0c      	ite	eq
 800f266:	2301      	moveq	r3, #1
 800f268:	2300      	movne	r3, #0
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	461a      	mov	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d105      	bne.n	800f286 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f27a:	4b07      	ldr	r3, [pc, #28]	; (800f298 <prvGetNextExpireTime+0x44>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
 800f284:	e001      	b.n	800f28a <prvGetNextExpireTime+0x36>
>>>>>>> Stashed changes
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< Updated upstream
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3714      	adds	r7, #20
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	200029ac 	.word	0x200029ac

0800f308 <prvSampleTimeNow>:
=======
 800f286:	2300      	movs	r3, #0
 800f288:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f28a:	68fb      	ldr	r3, [r7, #12]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3714      	adds	r7, #20
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr
 800f298:	20002b5c 	.word	0x20002b5c

0800f29c <prvSampleTimeNow>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< Updated upstream
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
=======
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< Updated upstream
 800f310:	f7ff f874 	bl	800e3fc <xTaskGetTickCount>
 800f314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f316:	4b0b      	ldr	r3, [pc, #44]	; (800f344 <prvSampleTimeNow+0x3c>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d205      	bcs.n	800f32c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f320:	f000 f8ee 	bl	800f500 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	601a      	str	r2, [r3, #0]
 800f32a:	e002      	b.n	800f332 <prvSampleTimeNow+0x2a>
=======
 800f2a4:	f7ff f874 	bl	800e390 <xTaskGetTickCount>
 800f2a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f2aa:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <prvSampleTimeNow+0x3c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d205      	bcs.n	800f2c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f2b4:	f000 f8ee 	bl	800f494 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	e002      	b.n	800f2c6 <prvSampleTimeNow+0x2a>
>>>>>>> Stashed changes
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< Updated upstream
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f332:	4a04      	ldr	r2, [pc, #16]	; (800f344 <prvSampleTimeNow+0x3c>)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f338:	68fb      	ldr	r3, [r7, #12]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	200029bc 	.word	0x200029bc

0800f348 <prvInsertTimerInActiveList>:
=======
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2c6:	4a04      	ldr	r2, [pc, #16]	; (800f2d8 <prvSampleTimeNow+0x3c>)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20002b6c 	.word	0x20002b6c

0800f2dc <prvInsertTimerInActiveList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< Updated upstream
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f356:	2300      	movs	r3, #0
 800f358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	68ba      	ldr	r2, [r7, #8]
 800f35e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f366:	68ba      	ldr	r2, [r7, #8]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d812      	bhi.n	800f394 <prvInsertTimerInActiveList+0x4c>
=======
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b086      	sub	sp, #24
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
 800f2e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	68ba      	ldr	r2, [r7, #8]
 800f2f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	68fa      	ldr	r2, [r7, #12]
 800f2f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f2fa:	68ba      	ldr	r2, [r7, #8]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d812      	bhi.n	800f328 <prvInsertTimerInActiveList+0x4c>
>>>>>>> Stashed changes
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	1ad2      	subs	r2, r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	699b      	ldr	r3, [r3, #24]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d302      	bcc.n	800f382 <prvInsertTimerInActiveList+0x3a>
=======
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	1ad2      	subs	r2, r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	699b      	ldr	r3, [r3, #24]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d302      	bcc.n	800f316 <prvInsertTimerInActiveList+0x3a>
>>>>>>> Stashed changes
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 800f37c:	2301      	movs	r3, #1
 800f37e:	617b      	str	r3, [r7, #20]
 800f380:	e01b      	b.n	800f3ba <prvInsertTimerInActiveList+0x72>
=======
 800f310:	2301      	movs	r3, #1
 800f312:	617b      	str	r3, [r7, #20]
 800f314:	e01b      	b.n	800f34e <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800f382:	4b10      	ldr	r3, [pc, #64]	; (800f3c4 <prvInsertTimerInActiveList+0x7c>)
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	3304      	adds	r3, #4
 800f38a:	4619      	mov	r1, r3
 800f38c:	4610      	mov	r0, r2
 800f38e:	f7fd fdd2 	bl	800cf36 <vListInsert>
 800f392:	e012      	b.n	800f3ba <prvInsertTimerInActiveList+0x72>
=======
 800f316:	4b10      	ldr	r3, [pc, #64]	; (800f358 <prvInsertTimerInActiveList+0x7c>)
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	3304      	adds	r3, #4
 800f31e:	4619      	mov	r1, r3
 800f320:	4610      	mov	r0, r2
 800f322:	f7fd fdd2 	bl	800ceca <vListInsert>
 800f326:	e012      	b.n	800f34e <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< Updated upstream
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d206      	bcs.n	800f3aa <prvInsertTimerInActiveList+0x62>
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d302      	bcc.n	800f3aa <prvInsertTimerInActiveList+0x62>
=======
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d206      	bcs.n	800f33e <prvInsertTimerInActiveList+0x62>
 800f330:	68ba      	ldr	r2, [r7, #8]
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	429a      	cmp	r2, r3
 800f336:	d302      	bcc.n	800f33e <prvInsertTimerInActiveList+0x62>
>>>>>>> Stashed changes
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	617b      	str	r3, [r7, #20]
 800f3a8:	e007      	b.n	800f3ba <prvInsertTimerInActiveList+0x72>
=======
 800f338:	2301      	movs	r3, #1
 800f33a:	617b      	str	r3, [r7, #20]
 800f33c:	e007      	b.n	800f34e <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800f3aa:	4b07      	ldr	r3, [pc, #28]	; (800f3c8 <prvInsertTimerInActiveList+0x80>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	3304      	adds	r3, #4
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	4610      	mov	r0, r2
 800f3b6:	f7fd fdbe 	bl	800cf36 <vListInsert>
=======
 800f33e:	4b07      	ldr	r3, [pc, #28]	; (800f35c <prvInsertTimerInActiveList+0x80>)
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	3304      	adds	r3, #4
 800f346:	4619      	mov	r1, r3
 800f348:	4610      	mov	r0, r2
 800f34a:	f7fd fdbe 	bl	800ceca <vListInsert>
>>>>>>> Stashed changes
		}
	}

	return xProcessTimerNow;
<<<<<<< Updated upstream
 800f3ba:	697b      	ldr	r3, [r7, #20]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	200029b0 	.word	0x200029b0
 800f3c8:	200029ac 	.word	0x200029ac

0800f3cc <prvProcessReceivedCommands>:
=======
 800f34e:	697b      	ldr	r3, [r7, #20]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3718      	adds	r7, #24
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	20002b60 	.word	0x20002b60
 800f35c:	20002b5c 	.word	0x20002b5c

0800f360 <prvProcessReceivedCommands>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< Updated upstream
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b08c      	sub	sp, #48	; 0x30
 800f3d0:	af02      	add	r7, sp, #8
=======
 800f360:	b580      	push	{r7, lr}
 800f362:	b08c      	sub	sp, #48	; 0x30
 800f364:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< Updated upstream
 800f3d2:	e081      	b.n	800f4d8 <prvProcessReceivedCommands+0x10c>
=======
 800f366:	e081      	b.n	800f46c <prvProcessReceivedCommands+0x10c>
>>>>>>> Stashed changes
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< Updated upstream
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	db7e      	blt.n	800f4d8 <prvProcessReceivedCommands+0x10c>
=======
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	db7e      	blt.n	800f46c <prvProcessReceivedCommands+0x10c>
>>>>>>> Stashed changes
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< Updated upstream
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e0:	695b      	ldr	r3, [r3, #20]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d004      	beq.n	800f3f0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fd fddc 	bl	800cfa8 <uxListRemove>
=======
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f374:	695b      	ldr	r3, [r3, #20]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d004      	beq.n	800f384 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	3304      	adds	r3, #4
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fd fddc 	bl	800cf3c <uxListRemove>
>>>>>>> Stashed changes
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 800f3f0:	1d3b      	adds	r3, r7, #4
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7ff ff88 	bl	800f308 <prvSampleTimeNow>
 800f3f8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	2b09      	cmp	r3, #9
 800f3fe:	d86a      	bhi.n	800f4d6 <prvProcessReceivedCommands+0x10a>
 800f400:	a201      	add	r2, pc, #4	; (adr r2, 800f408 <prvProcessReceivedCommands+0x3c>)
 800f402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f406:	bf00      	nop
 800f408:	0800f431 	.word	0x0800f431
 800f40c:	0800f431 	.word	0x0800f431
 800f410:	0800f431 	.word	0x0800f431
 800f414:	0800f4d9 	.word	0x0800f4d9
 800f418:	0800f48d 	.word	0x0800f48d
 800f41c:	0800f4c5 	.word	0x0800f4c5
 800f420:	0800f431 	.word	0x0800f431
 800f424:	0800f431 	.word	0x0800f431
 800f428:	0800f4d9 	.word	0x0800f4d9
 800f42c:	0800f48d 	.word	0x0800f48d
=======
 800f384:	1d3b      	adds	r3, r7, #4
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff ff88 	bl	800f29c <prvSampleTimeNow>
 800f38c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b09      	cmp	r3, #9
 800f392:	d86a      	bhi.n	800f46a <prvProcessReceivedCommands+0x10a>
 800f394:	a201      	add	r2, pc, #4	; (adr r2, 800f39c <prvProcessReceivedCommands+0x3c>)
 800f396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39a:	bf00      	nop
 800f39c:	0800f3c5 	.word	0x0800f3c5
 800f3a0:	0800f3c5 	.word	0x0800f3c5
 800f3a4:	0800f3c5 	.word	0x0800f3c5
 800f3a8:	0800f46d 	.word	0x0800f46d
 800f3ac:	0800f421 	.word	0x0800f421
 800f3b0:	0800f459 	.word	0x0800f459
 800f3b4:	0800f3c5 	.word	0x0800f3c5
 800f3b8:	0800f3c5 	.word	0x0800f3c5
 800f3bc:	0800f46d 	.word	0x0800f46d
 800f3c0:	0800f421 	.word	0x0800f421
>>>>>>> Stashed changes
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
<<<<<<< Updated upstream
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f434:	699b      	ldr	r3, [r3, #24]
 800f436:	18d1      	adds	r1, r2, r3
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6a3a      	ldr	r2, [r7, #32]
 800f43c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f43e:	f7ff ff83 	bl	800f348 <prvInsertTimerInActiveList>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d047      	beq.n	800f4d8 <prvProcessReceivedCommands+0x10c>
=======
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c8:	699b      	ldr	r3, [r3, #24]
 800f3ca:	18d1      	adds	r1, r2, r3
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6a3a      	ldr	r2, [r7, #32]
 800f3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3d2:	f7ff ff83 	bl	800f2dc <prvInsertTimerInActiveList>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d047      	beq.n	800f46c <prvProcessReceivedCommands+0x10c>
>>>>>>> Stashed changes
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800f448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f44e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	69db      	ldr	r3, [r3, #28]
 800f454:	2b01      	cmp	r3, #1
 800f456:	d13f      	bne.n	800f4d8 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	441a      	add	r2, r3
 800f460:	2300      	movs	r3, #0
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	2300      	movs	r3, #0
 800f466:	2100      	movs	r1, #0
 800f468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f46a:	f7ff fe3b 	bl	800f0e4 <xTimerGenericCommand>
 800f46e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d130      	bne.n	800f4d8 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800f476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	61bb      	str	r3, [r7, #24]
}
 800f488:	bf00      	nop
 800f48a:	e7fe      	b.n	800f48a <prvProcessReceivedCommands+0xbe>
=======
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e6:	69db      	ldr	r3, [r3, #28]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d13f      	bne.n	800f46c <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f0:	699b      	ldr	r3, [r3, #24]
 800f3f2:	441a      	add	r2, r3
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3fe:	f7ff fe3b 	bl	800f078 <xTimerGenericCommand>
 800f402:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d130      	bne.n	800f46c <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	61bb      	str	r3, [r7, #24]
}
 800f41c:	bf00      	nop
 800f41e:	e7fe      	b.n	800f41e <prvProcessReceivedCommands+0xbe>
>>>>>>> Stashed changes
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
<<<<<<< Updated upstream
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f494:	699b      	ldr	r3, [r3, #24]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d10a      	bne.n	800f4b0 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800f49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49e:	f383 8811 	msr	BASEPRI, r3
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	f3bf 8f4f 	dsb	sy
 800f4aa:	617b      	str	r3, [r7, #20]
}
 800f4ac:	bf00      	nop
 800f4ae:	e7fe      	b.n	800f4ae <prvProcessReceivedCommands+0xe2>
=======
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f424:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d10a      	bne.n	800f444 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	617b      	str	r3, [r7, #20]
}
 800f440:	bf00      	nop
 800f442:	e7fe      	b.n	800f442 <prvProcessReceivedCommands+0xe2>
>>>>>>> Stashed changes
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< Updated upstream
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	699a      	ldr	r2, [r3, #24]
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	18d1      	adds	r1, r2, r3
 800f4b8:	6a3b      	ldr	r3, [r7, #32]
 800f4ba:	6a3a      	ldr	r2, [r7, #32]
 800f4bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4be:	f7ff ff43 	bl	800f348 <prvInsertTimerInActiveList>
					break;
 800f4c2:	e009      	b.n	800f4d8 <prvProcessReceivedCommands+0x10c>
=======
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	699a      	ldr	r2, [r3, #24]
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	18d1      	adds	r1, r2, r3
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	6a3a      	ldr	r2, [r7, #32]
 800f450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f452:	f7ff ff43 	bl	800f2dc <prvInsertTimerInActiveList>
					break;
 800f456:	e009      	b.n	800f46c <prvProcessReceivedCommands+0x10c>
>>>>>>> Stashed changes
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
<<<<<<< Updated upstream
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d104      	bne.n	800f4d8 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800f4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4d0:	f000 fbce 	bl	800fc70 <vPortFree>
=======
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d104      	bne.n	800f46c <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800f462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f464:	f000 fbcc 	bl	800fc00 <vPortFree>
>>>>>>> Stashed changes
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< Updated upstream
 800f4d4:	e000      	b.n	800f4d8 <prvProcessReceivedCommands+0x10c>
=======
 800f468:	e000      	b.n	800f46c <prvProcessReceivedCommands+0x10c>
>>>>>>> Stashed changes

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< Updated upstream
 800f4d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4d8:	4b08      	ldr	r3, [pc, #32]	; (800f4fc <prvProcessReceivedCommands+0x130>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f107 0108 	add.w	r1, r7, #8
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fe f8aa 	bl	800d63c <xQueueReceive>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f47f af72 	bne.w	800f3d4 <prvProcessReceivedCommands+0x8>
=======
 800f46a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f46c:	4b08      	ldr	r3, [pc, #32]	; (800f490 <prvProcessReceivedCommands+0x130>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f107 0108 	add.w	r1, r7, #8
 800f474:	2200      	movs	r2, #0
 800f476:	4618      	mov	r0, r3
 800f478:	f7fe f8aa 	bl	800d5d0 <xQueueReceive>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f47f af72 	bne.w	800f368 <prvProcessReceivedCommands+0x8>
>>>>>>> Stashed changes
			}
		}
	}
}
<<<<<<< Updated upstream
 800f4f0:	bf00      	nop
 800f4f2:	bf00      	nop
 800f4f4:	3728      	adds	r7, #40	; 0x28
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	200029b4 	.word	0x200029b4

0800f500 <prvSwitchTimerLists>:
=======
 800f484:	bf00      	nop
 800f486:	bf00      	nop
 800f488:	3728      	adds	r7, #40	; 0x28
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20002b64 	.word	0x20002b64

0800f494 <prvSwitchTimerLists>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< Updated upstream
 800f500:	b580      	push	{r7, lr}
 800f502:	b088      	sub	sp, #32
 800f504:	af02      	add	r7, sp, #8
=======
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< Updated upstream
 800f506:	e045      	b.n	800f594 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f508:	4b2c      	ldr	r3, [pc, #176]	; (800f5bc <prvSwitchTimerLists+0xbc>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f512:	4b2a      	ldr	r3, [pc, #168]	; (800f5bc <prvSwitchTimerLists+0xbc>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	3304      	adds	r3, #4
 800f520:	4618      	mov	r0, r3
 800f522:	f7fd fd41 	bl	800cfa8 <uxListRemove>
=======
 800f49a:	e045      	b.n	800f528 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f49c:	4b2c      	ldr	r3, [pc, #176]	; (800f550 <prvSwitchTimerLists+0xbc>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f4a6:	4b2a      	ldr	r3, [pc, #168]	; (800f550 <prvSwitchTimerLists+0xbc>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7fd fd41 	bl	800cf3c <uxListRemove>
>>>>>>> Stashed changes
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	69db      	ldr	r3, [r3, #28]
 800f532:	2b01      	cmp	r3, #1
 800f534:	d12e      	bne.n	800f594 <prvSwitchTimerLists+0x94>
=======
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	69db      	ldr	r3, [r3, #28]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d12e      	bne.n	800f528 <prvSwitchTimerLists+0x94>
>>>>>>> Stashed changes
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< Updated upstream
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	693a      	ldr	r2, [r7, #16]
 800f53c:	4413      	add	r3, r2
 800f53e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	429a      	cmp	r2, r3
 800f546:	d90e      	bls.n	800f566 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f554:	4b19      	ldr	r3, [pc, #100]	; (800f5bc <prvSwitchTimerLists+0xbc>)
 800f556:	681a      	ldr	r2, [r3, #0]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	3304      	adds	r3, #4
 800f55c:	4619      	mov	r1, r3
 800f55e:	4610      	mov	r0, r2
 800f560:	f7fd fce9 	bl	800cf36 <vListInsert>
 800f564:	e016      	b.n	800f594 <prvSwitchTimerLists+0x94>
=======
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	699b      	ldr	r3, [r3, #24]
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d90e      	bls.n	800f4fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4e8:	4b19      	ldr	r3, [pc, #100]	; (800f550 <prvSwitchTimerLists+0xbc>)
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	4610      	mov	r0, r2
 800f4f4:	f7fd fce9 	bl	800ceca <vListInsert>
 800f4f8:	e016      	b.n	800f528 <prvSwitchTimerLists+0x94>
>>>>>>> Stashed changes
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 800f566:	2300      	movs	r3, #0
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	2300      	movs	r3, #0
 800f56c:	693a      	ldr	r2, [r7, #16]
 800f56e:	2100      	movs	r1, #0
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f7ff fdb7 	bl	800f0e4 <xTimerGenericCommand>
 800f576:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10a      	bne.n	800f594 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	603b      	str	r3, [r7, #0]
}
 800f590:	bf00      	nop
 800f592:	e7fe      	b.n	800f592 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f594:	4b09      	ldr	r3, [pc, #36]	; (800f5bc <prvSwitchTimerLists+0xbc>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1b4      	bne.n	800f508 <prvSwitchTimerLists+0x8>
=======
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	2300      	movs	r3, #0
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	2100      	movs	r1, #0
 800f504:	68f8      	ldr	r0, [r7, #12]
 800f506:	f7ff fdb7 	bl	800f078 <xTimerGenericCommand>
 800f50a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d10a      	bne.n	800f528 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	603b      	str	r3, [r7, #0]
}
 800f524:	bf00      	nop
 800f526:	e7fe      	b.n	800f526 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f528:	4b09      	ldr	r3, [pc, #36]	; (800f550 <prvSwitchTimerLists+0xbc>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1b4      	bne.n	800f49c <prvSwitchTimerLists+0x8>
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< Updated upstream
 800f59e:	4b07      	ldr	r3, [pc, #28]	; (800f5bc <prvSwitchTimerLists+0xbc>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5a4:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <prvSwitchTimerLists+0xc0>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a04      	ldr	r2, [pc, #16]	; (800f5bc <prvSwitchTimerLists+0xbc>)
 800f5aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5ac:	4a04      	ldr	r2, [pc, #16]	; (800f5c0 <prvSwitchTimerLists+0xc0>)
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	6013      	str	r3, [r2, #0]
}
 800f5b2:	bf00      	nop
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	200029ac 	.word	0x200029ac
 800f5c0:	200029b0 	.word	0x200029b0

0800f5c4 <prvCheckForValidListAndQueue>:
=======
 800f532:	4b07      	ldr	r3, [pc, #28]	; (800f550 <prvSwitchTimerLists+0xbc>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f538:	4b06      	ldr	r3, [pc, #24]	; (800f554 <prvSwitchTimerLists+0xc0>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a04      	ldr	r2, [pc, #16]	; (800f550 <prvSwitchTimerLists+0xbc>)
 800f53e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f540:	4a04      	ldr	r2, [pc, #16]	; (800f554 <prvSwitchTimerLists+0xc0>)
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	6013      	str	r3, [r2, #0]
}
 800f546:	bf00      	nop
 800f548:	3718      	adds	r7, #24
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20002b5c 	.word	0x20002b5c
 800f554:	20002b60 	.word	0x20002b60

0800f558 <prvCheckForValidListAndQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< Updated upstream
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af02      	add	r7, sp, #8
=======
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800f5ca:	f000 f96b 	bl	800f8a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f5ce:	4b15      	ldr	r3, [pc, #84]	; (800f624 <prvCheckForValidListAndQueue+0x60>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d120      	bne.n	800f618 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f5d6:	4814      	ldr	r0, [pc, #80]	; (800f628 <prvCheckForValidListAndQueue+0x64>)
 800f5d8:	f7fd fc5c 	bl	800ce94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f5dc:	4813      	ldr	r0, [pc, #76]	; (800f62c <prvCheckForValidListAndQueue+0x68>)
 800f5de:	f7fd fc59 	bl	800ce94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f5e2:	4b13      	ldr	r3, [pc, #76]	; (800f630 <prvCheckForValidListAndQueue+0x6c>)
 800f5e4:	4a10      	ldr	r2, [pc, #64]	; (800f628 <prvCheckForValidListAndQueue+0x64>)
 800f5e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f5e8:	4b12      	ldr	r3, [pc, #72]	; (800f634 <prvCheckForValidListAndQueue+0x70>)
 800f5ea:	4a10      	ldr	r2, [pc, #64]	; (800f62c <prvCheckForValidListAndQueue+0x68>)
 800f5ec:	601a      	str	r2, [r3, #0]
=======
 800f55e:	f000 f969 	bl	800f834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f562:	4b15      	ldr	r3, [pc, #84]	; (800f5b8 <prvCheckForValidListAndQueue+0x60>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d120      	bne.n	800f5ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f56a:	4814      	ldr	r0, [pc, #80]	; (800f5bc <prvCheckForValidListAndQueue+0x64>)
 800f56c:	f7fd fc5c 	bl	800ce28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f570:	4813      	ldr	r0, [pc, #76]	; (800f5c0 <prvCheckForValidListAndQueue+0x68>)
 800f572:	f7fd fc59 	bl	800ce28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f576:	4b13      	ldr	r3, [pc, #76]	; (800f5c4 <prvCheckForValidListAndQueue+0x6c>)
 800f578:	4a10      	ldr	r2, [pc, #64]	; (800f5bc <prvCheckForValidListAndQueue+0x64>)
 800f57a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f57c:	4b12      	ldr	r3, [pc, #72]	; (800f5c8 <prvCheckForValidListAndQueue+0x70>)
 800f57e:	4a10      	ldr	r2, [pc, #64]	; (800f5c0 <prvCheckForValidListAndQueue+0x68>)
 800f580:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< Updated upstream
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	4b11      	ldr	r3, [pc, #68]	; (800f638 <prvCheckForValidListAndQueue+0x74>)
 800f5f4:	4a11      	ldr	r2, [pc, #68]	; (800f63c <prvCheckForValidListAndQueue+0x78>)
 800f5f6:	210c      	movs	r1, #12
 800f5f8:	200a      	movs	r0, #10
 800f5fa:	f7fd fd67 	bl	800d0cc <xQueueGenericCreateStatic>
 800f5fe:	4603      	mov	r3, r0
 800f600:	4a08      	ldr	r2, [pc, #32]	; (800f624 <prvCheckForValidListAndQueue+0x60>)
 800f602:	6013      	str	r3, [r2, #0]
=======
 800f582:	2300      	movs	r3, #0
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	4b11      	ldr	r3, [pc, #68]	; (800f5cc <prvCheckForValidListAndQueue+0x74>)
 800f588:	4a11      	ldr	r2, [pc, #68]	; (800f5d0 <prvCheckForValidListAndQueue+0x78>)
 800f58a:	210c      	movs	r1, #12
 800f58c:	200a      	movs	r0, #10
 800f58e:	f7fd fd67 	bl	800d060 <xQueueGenericCreateStatic>
 800f592:	4603      	mov	r3, r0
 800f594:	4a08      	ldr	r2, [pc, #32]	; (800f5b8 <prvCheckForValidListAndQueue+0x60>)
 800f596:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 800f604:	4b07      	ldr	r3, [pc, #28]	; (800f624 <prvCheckForValidListAndQueue+0x60>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d005      	beq.n	800f618 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f60c:	4b05      	ldr	r3, [pc, #20]	; (800f624 <prvCheckForValidListAndQueue+0x60>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	490b      	ldr	r1, [pc, #44]	; (800f640 <prvCheckForValidListAndQueue+0x7c>)
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fb26 	bl	800dc64 <vQueueAddToRegistry>
=======
 800f598:	4b07      	ldr	r3, [pc, #28]	; (800f5b8 <prvCheckForValidListAndQueue+0x60>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d005      	beq.n	800f5ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f5a0:	4b05      	ldr	r3, [pc, #20]	; (800f5b8 <prvCheckForValidListAndQueue+0x60>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	490b      	ldr	r1, [pc, #44]	; (800f5d4 <prvCheckForValidListAndQueue+0x7c>)
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe fb26 	bl	800dbf8 <vQueueAddToRegistry>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800f618:	f000 f974 	bl	800f904 <vPortExitCritical>
}
 800f61c:	bf00      	nop
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	200029b4 	.word	0x200029b4
 800f628:	20002984 	.word	0x20002984
 800f62c:	20002998 	.word	0x20002998
 800f630:	200029ac 	.word	0x200029ac
 800f634:	200029b0 	.word	0x200029b0
 800f638:	20002a38 	.word	0x20002a38
 800f63c:	200029c0 	.word	0x200029c0
 800f640:	08011994 	.word	0x08011994

0800f644 <pxPortInitialiseStack>:
=======
 800f5ac:	f000 f972 	bl	800f894 <vPortExitCritical>
}
 800f5b0:	bf00      	nop
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	20002b64 	.word	0x20002b64
 800f5bc:	20002b34 	.word	0x20002b34
 800f5c0:	20002b48 	.word	0x20002b48
 800f5c4:	20002b5c 	.word	0x20002b5c
 800f5c8:	20002b60 	.word	0x20002b60
 800f5cc:	20002be8 	.word	0x20002be8
 800f5d0:	20002b70 	.word	0x20002b70
 800f5d4:	08011924 	.word	0x08011924

0800f5d8 <pxPortInitialiseStack>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< Updated upstream
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
=======
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3b04      	subs	r3, #4
 800f654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f65c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3b04      	subs	r3, #4
 800f662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	f023 0201 	bic.w	r2, r3, #1
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3b04      	subs	r3, #4
 800f672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f674:	4a0c      	ldr	r2, [pc, #48]	; (800f6a8 <pxPortInitialiseStack+0x64>)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	3b14      	subs	r3, #20
 800f67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	601a      	str	r2, [r3, #0]
=======
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	3b04      	subs	r3, #4
 800f5e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3b04      	subs	r3, #4
 800f5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	f023 0201 	bic.w	r2, r3, #1
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	3b04      	subs	r3, #4
 800f606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f608:	4a0c      	ldr	r2, [pc, #48]	; (800f63c <pxPortInitialiseStack+0x64>)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3b14      	subs	r3, #20
 800f612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	3b04      	subs	r3, #4
 800f68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f06f 0202 	mvn.w	r2, #2
 800f692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	3b20      	subs	r3, #32
 800f698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f69a:	68fb      	ldr	r3, [r7, #12]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3714      	adds	r7, #20
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr
 800f6a8:	0800f6ad 	.word	0x0800f6ad

0800f6ac <prvTaskExitError>:
=======
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3b04      	subs	r3, #4
 800f61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f06f 0202 	mvn.w	r2, #2
 800f626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	3b20      	subs	r3, #32
 800f62c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f62e:	68fb      	ldr	r3, [r7, #12]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	0800f641 	.word	0x0800f641

0800f640 <prvTaskExitError>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< Updated upstream
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	607b      	str	r3, [r7, #4]
=======
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< Updated upstream
 800f6b6:	4b12      	ldr	r3, [pc, #72]	; (800f700 <prvTaskExitError+0x54>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6be:	d00a      	beq.n	800f6d6 <prvTaskExitError+0x2a>
	__asm volatile
 800f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	60fb      	str	r3, [r7, #12]
}
 800f6d2:	bf00      	nop
 800f6d4:	e7fe      	b.n	800f6d4 <prvTaskExitError+0x28>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	60bb      	str	r3, [r7, #8]
}
 800f6e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f6ea:	bf00      	nop
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d0fc      	beq.n	800f6ec <prvTaskExitError+0x40>
=======
 800f64a:	4b12      	ldr	r3, [pc, #72]	; (800f694 <prvTaskExitError+0x54>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f652:	d00a      	beq.n	800f66a <prvTaskExitError+0x2a>
	__asm volatile
 800f654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	60fb      	str	r3, [r7, #12]
}
 800f666:	bf00      	nop
 800f668:	e7fe      	b.n	800f668 <prvTaskExitError+0x28>
	__asm volatile
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	60bb      	str	r3, [r7, #8]
}
 800f67c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f67e:	bf00      	nop
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0fc      	beq.n	800f680 <prvTaskExitError+0x40>
>>>>>>> Stashed changes
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< Updated upstream
 800f6f2:	bf00      	nop
 800f6f4:	bf00      	nop
 800f6f6:	3714      	adds	r7, #20
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	200000c0 	.word	0x200000c0
	...

0800f710 <SVC_Handler>:
=======
 800f686:	bf00      	nop
 800f688:	bf00      	nop
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	200000c4 	.word	0x200000c4
	...

0800f6a0 <SVC_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< Updated upstream
 800f710:	4b07      	ldr	r3, [pc, #28]	; (800f730 <pxCurrentTCBConst2>)
 800f712:	6819      	ldr	r1, [r3, #0]
 800f714:	6808      	ldr	r0, [r1, #0]
 800f716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71a:	f380 8809 	msr	PSP, r0
 800f71e:	f3bf 8f6f 	isb	sy
 800f722:	f04f 0000 	mov.w	r0, #0
 800f726:	f380 8811 	msr	BASEPRI, r0
 800f72a:	4770      	bx	lr
 800f72c:	f3af 8000 	nop.w

0800f730 <pxCurrentTCBConst2>:
 800f730:	20002858 	.word	0x20002858
=======
 800f6a0:	4b07      	ldr	r3, [pc, #28]	; (800f6c0 <pxCurrentTCBConst2>)
 800f6a2:	6819      	ldr	r1, [r3, #0]
 800f6a4:	6808      	ldr	r0, [r1, #0]
 800f6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6aa:	f380 8809 	msr	PSP, r0
 800f6ae:	f3bf 8f6f 	isb	sy
 800f6b2:	f04f 0000 	mov.w	r0, #0
 800f6b6:	f380 8811 	msr	BASEPRI, r0
 800f6ba:	4770      	bx	lr
 800f6bc:	f3af 8000 	nop.w

0800f6c0 <pxCurrentTCBConst2>:
 800f6c0:	20002a08 	.word	0x20002a08
>>>>>>> Stashed changes
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< Updated upstream
 800f734:	bf00      	nop
 800f736:	bf00      	nop

0800f738 <prvPortStartFirstTask>:
=======
 800f6c4:	bf00      	nop
 800f6c6:	bf00      	nop

0800f6c8 <prvPortStartFirstTask>:
>>>>>>> Stashed changes
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< Updated upstream
 800f738:	4808      	ldr	r0, [pc, #32]	; (800f75c <prvPortStartFirstTask+0x24>)
 800f73a:	6800      	ldr	r0, [r0, #0]
 800f73c:	6800      	ldr	r0, [r0, #0]
 800f73e:	f380 8808 	msr	MSP, r0
 800f742:	f04f 0000 	mov.w	r0, #0
 800f746:	f380 8814 	msr	CONTROL, r0
 800f74a:	b662      	cpsie	i
 800f74c:	b661      	cpsie	f
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	df00      	svc	0
 800f758:	bf00      	nop
=======
 800f6c8:	4808      	ldr	r0, [pc, #32]	; (800f6ec <prvPortStartFirstTask+0x24>)
 800f6ca:	6800      	ldr	r0, [r0, #0]
 800f6cc:	6800      	ldr	r0, [r0, #0]
 800f6ce:	f380 8808 	msr	MSP, r0
 800f6d2:	f04f 0000 	mov.w	r0, #0
 800f6d6:	f380 8814 	msr	CONTROL, r0
 800f6da:	b662      	cpsie	i
 800f6dc:	b661      	cpsie	f
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	df00      	svc	0
 800f6e8:	bf00      	nop
>>>>>>> Stashed changes
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< Updated upstream
 800f75a:	bf00      	nop
 800f75c:	e000ed08 	.word	0xe000ed08

0800f760 <xPortStartScheduler>:
=======
 800f6ea:	bf00      	nop
 800f6ec:	e000ed08 	.word	0xe000ed08

0800f6f0 <xPortStartScheduler>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< Updated upstream
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af00      	add	r7, sp, #0
=======
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< Updated upstream
 800f766:	4b46      	ldr	r3, [pc, #280]	; (800f880 <xPortStartScheduler+0x120>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a46      	ldr	r2, [pc, #280]	; (800f884 <xPortStartScheduler+0x124>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d10a      	bne.n	800f786 <xPortStartScheduler+0x26>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	613b      	str	r3, [r7, #16]
}
 800f782:	bf00      	nop
 800f784:	e7fe      	b.n	800f784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f786:	4b3e      	ldr	r3, [pc, #248]	; (800f880 <xPortStartScheduler+0x120>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4a3f      	ldr	r2, [pc, #252]	; (800f888 <xPortStartScheduler+0x128>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d10a      	bne.n	800f7a6 <xPortStartScheduler+0x46>
	__asm volatile
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	f383 8811 	msr	BASEPRI, r3
 800f798:	f3bf 8f6f 	isb	sy
 800f79c:	f3bf 8f4f 	dsb	sy
 800f7a0:	60fb      	str	r3, [r7, #12]
}
 800f7a2:	bf00      	nop
 800f7a4:	e7fe      	b.n	800f7a4 <xPortStartScheduler+0x44>
=======
 800f6f6:	4b46      	ldr	r3, [pc, #280]	; (800f810 <xPortStartScheduler+0x120>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a46      	ldr	r2, [pc, #280]	; (800f814 <xPortStartScheduler+0x124>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d10a      	bne.n	800f716 <xPortStartScheduler+0x26>
	__asm volatile
 800f700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	613b      	str	r3, [r7, #16]
}
 800f712:	bf00      	nop
 800f714:	e7fe      	b.n	800f714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f716:	4b3e      	ldr	r3, [pc, #248]	; (800f810 <xPortStartScheduler+0x120>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4a3f      	ldr	r2, [pc, #252]	; (800f818 <xPortStartScheduler+0x128>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d10a      	bne.n	800f736 <xPortStartScheduler+0x46>
	__asm volatile
 800f720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f724:	f383 8811 	msr	BASEPRI, r3
 800f728:	f3bf 8f6f 	isb	sy
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	60fb      	str	r3, [r7, #12]
}
 800f732:	bf00      	nop
 800f734:	e7fe      	b.n	800f734 <xPortStartScheduler+0x44>
>>>>>>> Stashed changes

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< Updated upstream
 800f7a6:	4b39      	ldr	r3, [pc, #228]	; (800f88c <xPortStartScheduler+0x12c>)
 800f7a8:	617b      	str	r3, [r7, #20]
=======
 800f736:	4b39      	ldr	r3, [pc, #228]	; (800f81c <xPortStartScheduler+0x12c>)
 800f738:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< Updated upstream
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	607b      	str	r3, [r7, #4]
=======
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< Updated upstream
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	22ff      	movs	r2, #255	; 0xff
 800f7b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f7c0:	78fb      	ldrb	r3, [r7, #3]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	4b31      	ldr	r3, [pc, #196]	; (800f890 <xPortStartScheduler+0x130>)
 800f7cc:	701a      	strb	r2, [r3, #0]
=======
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	22ff      	movs	r2, #255	; 0xff
 800f746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f750:	78fb      	ldrb	r3, [r7, #3]
 800f752:	b2db      	uxtb	r3, r3
 800f754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	4b31      	ldr	r3, [pc, #196]	; (800f820 <xPortStartScheduler+0x130>)
 800f75c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< Updated upstream
 800f7ce:	4b31      	ldr	r3, [pc, #196]	; (800f894 <xPortStartScheduler+0x134>)
 800f7d0:	2207      	movs	r2, #7
 800f7d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f7d4:	e009      	b.n	800f7ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f7d6:	4b2f      	ldr	r3, [pc, #188]	; (800f894 <xPortStartScheduler+0x134>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	4a2d      	ldr	r2, [pc, #180]	; (800f894 <xPortStartScheduler+0x134>)
 800f7de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f7e0:	78fb      	ldrb	r3, [r7, #3]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f7ea:	78fb      	ldrb	r3, [r7, #3]
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7f2:	2b80      	cmp	r3, #128	; 0x80
 800f7f4:	d0ef      	beq.n	800f7d6 <xPortStartScheduler+0x76>
=======
 800f75e:	4b31      	ldr	r3, [pc, #196]	; (800f824 <xPortStartScheduler+0x134>)
 800f760:	2207      	movs	r2, #7
 800f762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f764:	e009      	b.n	800f77a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f766:	4b2f      	ldr	r3, [pc, #188]	; (800f824 <xPortStartScheduler+0x134>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3b01      	subs	r3, #1
 800f76c:	4a2d      	ldr	r2, [pc, #180]	; (800f824 <xPortStartScheduler+0x134>)
 800f76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f770:	78fb      	ldrb	r3, [r7, #3]
 800f772:	b2db      	uxtb	r3, r3
 800f774:	005b      	lsls	r3, r3, #1
 800f776:	b2db      	uxtb	r3, r3
 800f778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f77a:	78fb      	ldrb	r3, [r7, #3]
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f782:	2b80      	cmp	r3, #128	; 0x80
 800f784:	d0ef      	beq.n	800f766 <xPortStartScheduler+0x76>
>>>>>>> Stashed changes
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< Updated upstream
 800f7f6:	4b27      	ldr	r3, [pc, #156]	; (800f894 <xPortStartScheduler+0x134>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f1c3 0307 	rsb	r3, r3, #7
 800f7fe:	2b04      	cmp	r3, #4
 800f800:	d00a      	beq.n	800f818 <xPortStartScheduler+0xb8>
	__asm volatile
 800f802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f806:	f383 8811 	msr	BASEPRI, r3
 800f80a:	f3bf 8f6f 	isb	sy
 800f80e:	f3bf 8f4f 	dsb	sy
 800f812:	60bb      	str	r3, [r7, #8]
}
 800f814:	bf00      	nop
 800f816:	e7fe      	b.n	800f816 <xPortStartScheduler+0xb6>
=======
 800f786:	4b27      	ldr	r3, [pc, #156]	; (800f824 <xPortStartScheduler+0x134>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f1c3 0307 	rsb	r3, r3, #7
 800f78e:	2b04      	cmp	r3, #4
 800f790:	d00a      	beq.n	800f7a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	60bb      	str	r3, [r7, #8]
}
 800f7a4:	bf00      	nop
 800f7a6:	e7fe      	b.n	800f7a6 <xPortStartScheduler+0xb6>
>>>>>>> Stashed changes
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< Updated upstream
 800f818:	4b1e      	ldr	r3, [pc, #120]	; (800f894 <xPortStartScheduler+0x134>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	021b      	lsls	r3, r3, #8
 800f81e:	4a1d      	ldr	r2, [pc, #116]	; (800f894 <xPortStartScheduler+0x134>)
 800f820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f822:	4b1c      	ldr	r3, [pc, #112]	; (800f894 <xPortStartScheduler+0x134>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f82a:	4a1a      	ldr	r2, [pc, #104]	; (800f894 <xPortStartScheduler+0x134>)
 800f82c:	6013      	str	r3, [r2, #0]
=======
 800f7a8:	4b1e      	ldr	r3, [pc, #120]	; (800f824 <xPortStartScheduler+0x134>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	021b      	lsls	r3, r3, #8
 800f7ae:	4a1d      	ldr	r2, [pc, #116]	; (800f824 <xPortStartScheduler+0x134>)
 800f7b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f7b2:	4b1c      	ldr	r3, [pc, #112]	; (800f824 <xPortStartScheduler+0x134>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f7ba:	4a1a      	ldr	r2, [pc, #104]	; (800f824 <xPortStartScheduler+0x134>)
 800f7bc:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< Updated upstream
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	b2da      	uxtb	r2, r3
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	701a      	strb	r2, [r3, #0]
=======
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< Updated upstream
 800f836:	4b18      	ldr	r3, [pc, #96]	; (800f898 <xPortStartScheduler+0x138>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a17      	ldr	r2, [pc, #92]	; (800f898 <xPortStartScheduler+0x138>)
 800f83c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f842:	4b15      	ldr	r3, [pc, #84]	; (800f898 <xPortStartScheduler+0x138>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a14      	ldr	r2, [pc, #80]	; (800f898 <xPortStartScheduler+0x138>)
 800f848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f84c:	6013      	str	r3, [r2, #0]
=======
 800f7c6:	4b18      	ldr	r3, [pc, #96]	; (800f828 <xPortStartScheduler+0x138>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a17      	ldr	r2, [pc, #92]	; (800f828 <xPortStartScheduler+0x138>)
 800f7cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f7d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f7d2:	4b15      	ldr	r3, [pc, #84]	; (800f828 <xPortStartScheduler+0x138>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a14      	ldr	r2, [pc, #80]	; (800f828 <xPortStartScheduler+0x138>)
 800f7d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f7dc:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< Updated upstream
 800f84e:	f000 f8dd 	bl	800fa0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f852:	4b12      	ldr	r3, [pc, #72]	; (800f89c <xPortStartScheduler+0x13c>)
 800f854:	2200      	movs	r2, #0
 800f856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f858:	f000 f8fc 	bl	800fa54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f85c:	4b10      	ldr	r3, [pc, #64]	; (800f8a0 <xPortStartScheduler+0x140>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a0f      	ldr	r2, [pc, #60]	; (800f8a0 <xPortStartScheduler+0x140>)
 800f862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f868:	f7ff ff66 	bl	800f738 <prvPortStartFirstTask>
=======
 800f7de:	f000 f8dd 	bl	800f99c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7e2:	4b12      	ldr	r3, [pc, #72]	; (800f82c <xPortStartScheduler+0x13c>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7e8:	f000 f8fc 	bl	800f9e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7ec:	4b10      	ldr	r3, [pc, #64]	; (800f830 <xPortStartScheduler+0x140>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a0f      	ldr	r2, [pc, #60]	; (800f830 <xPortStartScheduler+0x140>)
 800f7f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f7f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f7f8:	f7ff ff66 	bl	800f6c8 <prvPortStartFirstTask>
>>>>>>> Stashed changes
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< Updated upstream
 800f86c:	f7fe fea6 	bl	800e5bc <vTaskSwitchContext>
	prvTaskExitError();
 800f870:	f7ff ff1c 	bl	800f6ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	e000ed00 	.word	0xe000ed00
 800f884:	410fc271 	.word	0x410fc271
 800f888:	410fc270 	.word	0x410fc270
 800f88c:	e000e400 	.word	0xe000e400
 800f890:	20002a80 	.word	0x20002a80
 800f894:	20002a84 	.word	0x20002a84
 800f898:	e000ed20 	.word	0xe000ed20
 800f89c:	200000c0 	.word	0x200000c0
 800f8a0:	e000ef34 	.word	0xe000ef34

0800f8a4 <vPortEnterCritical>:
=======
 800f7fc:	f7fe fea8 	bl	800e550 <vTaskSwitchContext>
	prvTaskExitError();
 800f800:	f7ff ff1e 	bl	800f640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	e000ed00 	.word	0xe000ed00
 800f814:	410fc271 	.word	0x410fc271
 800f818:	410fc270 	.word	0x410fc270
 800f81c:	e000e400 	.word	0xe000e400
 800f820:	20002c30 	.word	0x20002c30
 800f824:	20002c34 	.word	0x20002c34
 800f828:	e000ed20 	.word	0xe000ed20
 800f82c:	200000c4 	.word	0x200000c4
 800f830:	e000ef34 	.word	0xe000ef34

0800f834 <vPortEnterCritical>:
>>>>>>> Stashed changes
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< Updated upstream
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
	__asm volatile
 800f8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ae:	f383 8811 	msr	BASEPRI, r3
 800f8b2:	f3bf 8f6f 	isb	sy
 800f8b6:	f3bf 8f4f 	dsb	sy
 800f8ba:	607b      	str	r3, [r7, #4]
}
 800f8bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f8be:	4b0f      	ldr	r3, [pc, #60]	; (800f8fc <vPortEnterCritical+0x58>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	4a0d      	ldr	r2, [pc, #52]	; (800f8fc <vPortEnterCritical+0x58>)
 800f8c6:	6013      	str	r3, [r2, #0]
=======
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	607b      	str	r3, [r7, #4]
}
 800f84c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f84e:	4b0f      	ldr	r3, [pc, #60]	; (800f88c <vPortEnterCritical+0x58>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3301      	adds	r3, #1
 800f854:	4a0d      	ldr	r2, [pc, #52]	; (800f88c <vPortEnterCritical+0x58>)
 800f856:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< Updated upstream
 800f8c8:	4b0c      	ldr	r3, [pc, #48]	; (800f8fc <vPortEnterCritical+0x58>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d10f      	bne.n	800f8f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f8d0:	4b0b      	ldr	r3, [pc, #44]	; (800f900 <vPortEnterCritical+0x5c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00a      	beq.n	800f8f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8de:	f383 8811 	msr	BASEPRI, r3
 800f8e2:	f3bf 8f6f 	isb	sy
 800f8e6:	f3bf 8f4f 	dsb	sy
 800f8ea:	603b      	str	r3, [r7, #0]
}
 800f8ec:	bf00      	nop
 800f8ee:	e7fe      	b.n	800f8ee <vPortEnterCritical+0x4a>
	}
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	200000c0 	.word	0x200000c0
 800f900:	e000ed04 	.word	0xe000ed04

0800f904 <vPortExitCritical>:
=======
 800f858:	4b0c      	ldr	r3, [pc, #48]	; (800f88c <vPortEnterCritical+0x58>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d10f      	bne.n	800f880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f860:	4b0b      	ldr	r3, [pc, #44]	; (800f890 <vPortEnterCritical+0x5c>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00a      	beq.n	800f880 <vPortEnterCritical+0x4c>
	__asm volatile
 800f86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	603b      	str	r3, [r7, #0]
}
 800f87c:	bf00      	nop
 800f87e:	e7fe      	b.n	800f87e <vPortEnterCritical+0x4a>
	}
}
 800f880:	bf00      	nop
 800f882:	370c      	adds	r7, #12
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr
 800f88c:	200000c4 	.word	0x200000c4
 800f890:	e000ed04 	.word	0xe000ed04

0800f894 <vPortExitCritical>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< Updated upstream
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f90a:	4b12      	ldr	r3, [pc, #72]	; (800f954 <vPortExitCritical+0x50>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d10a      	bne.n	800f928 <vPortExitCritical+0x24>
	__asm volatile
 800f912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	607b      	str	r3, [r7, #4]
}
 800f924:	bf00      	nop
 800f926:	e7fe      	b.n	800f926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f928:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <vPortExitCritical+0x50>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	3b01      	subs	r3, #1
 800f92e:	4a09      	ldr	r2, [pc, #36]	; (800f954 <vPortExitCritical+0x50>)
 800f930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f932:	4b08      	ldr	r3, [pc, #32]	; (800f954 <vPortExitCritical+0x50>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d105      	bne.n	800f946 <vPortExitCritical+0x42>
 800f93a:	2300      	movs	r3, #0
 800f93c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	f383 8811 	msr	BASEPRI, r3
}
 800f944:	bf00      	nop
=======
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f89a:	4b12      	ldr	r3, [pc, #72]	; (800f8e4 <vPortExitCritical+0x50>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d10a      	bne.n	800f8b8 <vPortExitCritical+0x24>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	607b      	str	r3, [r7, #4]
}
 800f8b4:	bf00      	nop
 800f8b6:	e7fe      	b.n	800f8b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f8b8:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <vPortExitCritical+0x50>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	4a09      	ldr	r2, [pc, #36]	; (800f8e4 <vPortExitCritical+0x50>)
 800f8c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f8c2:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <vPortExitCritical+0x50>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d105      	bne.n	800f8d6 <vPortExitCritical+0x42>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	f383 8811 	msr	BASEPRI, r3
}
 800f8d4:	bf00      	nop
>>>>>>> Stashed changes
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< Updated upstream
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	200000c0 	.word	0x200000c0
	...

0800f960 <PendSV_Handler>:
=======
 800f8d6:	bf00      	nop
 800f8d8:	370c      	adds	r7, #12
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	200000c4 	.word	0x200000c4
	...

0800f8f0 <PendSV_Handler>:
>>>>>>> Stashed changes

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< Updated upstream
 800f960:	f3ef 8009 	mrs	r0, PSP
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	4b15      	ldr	r3, [pc, #84]	; (800f9c0 <pxCurrentTCBConst>)
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	f01e 0f10 	tst.w	lr, #16
 800f970:	bf08      	it	eq
 800f972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97a:	6010      	str	r0, [r2, #0]
 800f97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f980:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f984:	f380 8811 	msr	BASEPRI, r0
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f7fe fe14 	bl	800e5bc <vTaskSwitchContext>
 800f994:	f04f 0000 	mov.w	r0, #0
 800f998:	f380 8811 	msr	BASEPRI, r0
 800f99c:	bc09      	pop	{r0, r3}
 800f99e:	6819      	ldr	r1, [r3, #0]
 800f9a0:	6808      	ldr	r0, [r1, #0]
 800f9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a6:	f01e 0f10 	tst.w	lr, #16
 800f9aa:	bf08      	it	eq
 800f9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f9b0:	f380 8809 	msr	PSP, r0
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	f3af 8000 	nop.w

0800f9c0 <pxCurrentTCBConst>:
 800f9c0:	20002858 	.word	0x20002858
=======
 800f8f0:	f3ef 8009 	mrs	r0, PSP
 800f8f4:	f3bf 8f6f 	isb	sy
 800f8f8:	4b15      	ldr	r3, [pc, #84]	; (800f950 <pxCurrentTCBConst>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	f01e 0f10 	tst.w	lr, #16
 800f900:	bf08      	it	eq
 800f902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90a:	6010      	str	r0, [r2, #0]
 800f90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f914:	f380 8811 	msr	BASEPRI, r0
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	f3bf 8f6f 	isb	sy
 800f920:	f7fe fe16 	bl	800e550 <vTaskSwitchContext>
 800f924:	f04f 0000 	mov.w	r0, #0
 800f928:	f380 8811 	msr	BASEPRI, r0
 800f92c:	bc09      	pop	{r0, r3}
 800f92e:	6819      	ldr	r1, [r3, #0]
 800f930:	6808      	ldr	r0, [r1, #0]
 800f932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f936:	f01e 0f10 	tst.w	lr, #16
 800f93a:	bf08      	it	eq
 800f93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f940:	f380 8809 	msr	PSP, r0
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	f3af 8000 	nop.w

0800f950 <pxCurrentTCBConst>:
 800f950:	20002a08 	.word	0x20002a08
>>>>>>> Stashed changes
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< Updated upstream
 800f9c4:	bf00      	nop
 800f9c6:	bf00      	nop

0800f9c8 <SysTick_Handler>:
=======
 800f954:	bf00      	nop
 800f956:	bf00      	nop

0800f958 <SysTick_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< Updated upstream
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	607b      	str	r3, [r7, #4]
}
 800f9e0:	bf00      	nop
=======
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
	__asm volatile
 800f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	607b      	str	r3, [r7, #4]
}
 800f970:	bf00      	nop
>>>>>>> Stashed changes
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 800f9e2:	f7fe fd2d 	bl	800e440 <xTaskIncrementTick>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d003      	beq.n	800f9f4 <SysTick_Handler+0x2c>
=======
 800f972:	f7fe fd2f 	bl	800e3d4 <xTaskIncrementTick>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d003      	beq.n	800f984 <SysTick_Handler+0x2c>
>>>>>>> Stashed changes
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< Updated upstream
 800f9ec:	4b06      	ldr	r3, [pc, #24]	; (800fa08 <SysTick_Handler+0x40>)
 800f9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	f383 8811 	msr	BASEPRI, r3
}
 800f9fe:	bf00      	nop
=======
 800f97c:	4b06      	ldr	r3, [pc, #24]	; (800f998 <SysTick_Handler+0x40>)
 800f97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	2300      	movs	r3, #0
 800f986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	f383 8811 	msr	BASEPRI, r3
}
 800f98e:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< Updated upstream
 800fa00:	bf00      	nop
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	e000ed04 	.word	0xe000ed04

0800fa0c <vPortSetupTimerInterrupt>:
=======
 800f990:	bf00      	nop
 800f992:	3708      	adds	r7, #8
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	e000ed04 	.word	0xe000ed04

0800f99c <vPortSetupTimerInterrupt>:
>>>>>>> Stashed changes
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< Updated upstream
 800fa0c:	b480      	push	{r7}
 800fa0e:	af00      	add	r7, sp, #0
=======
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< Updated upstream
 800fa10:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <vPortSetupTimerInterrupt+0x34>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa16:	4b0b      	ldr	r3, [pc, #44]	; (800fa44 <vPortSetupTimerInterrupt+0x38>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa1c:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <vPortSetupTimerInterrupt+0x3c>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a0a      	ldr	r2, [pc, #40]	; (800fa4c <vPortSetupTimerInterrupt+0x40>)
 800fa22:	fba2 2303 	umull	r2, r3, r2, r3
 800fa26:	099b      	lsrs	r3, r3, #6
 800fa28:	4a09      	ldr	r2, [pc, #36]	; (800fa50 <vPortSetupTimerInterrupt+0x44>)
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa2e:	4b04      	ldr	r3, [pc, #16]	; (800fa40 <vPortSetupTimerInterrupt+0x34>)
 800fa30:	2207      	movs	r2, #7
 800fa32:	601a      	str	r2, [r3, #0]
}
 800fa34:	bf00      	nop
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	e000e010 	.word	0xe000e010
 800fa44:	e000e018 	.word	0xe000e018
 800fa48:	2000003c 	.word	0x2000003c
 800fa4c:	10624dd3 	.word	0x10624dd3
 800fa50:	e000e014 	.word	0xe000e014

0800fa54 <vPortEnableVFP>:
=======
 800f9a0:	4b0b      	ldr	r3, [pc, #44]	; (800f9d0 <vPortSetupTimerInterrupt+0x34>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f9a6:	4b0b      	ldr	r3, [pc, #44]	; (800f9d4 <vPortSetupTimerInterrupt+0x38>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f9ac:	4b0a      	ldr	r3, [pc, #40]	; (800f9d8 <vPortSetupTimerInterrupt+0x3c>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a0a      	ldr	r2, [pc, #40]	; (800f9dc <vPortSetupTimerInterrupt+0x40>)
 800f9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9b6:	099b      	lsrs	r3, r3, #6
 800f9b8:	4a09      	ldr	r2, [pc, #36]	; (800f9e0 <vPortSetupTimerInterrupt+0x44>)
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f9be:	4b04      	ldr	r3, [pc, #16]	; (800f9d0 <vPortSetupTimerInterrupt+0x34>)
 800f9c0:	2207      	movs	r2, #7
 800f9c2:	601a      	str	r2, [r3, #0]
}
 800f9c4:	bf00      	nop
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	e000e010 	.word	0xe000e010
 800f9d4:	e000e018 	.word	0xe000e018
 800f9d8:	20000040 	.word	0x20000040
 800f9dc:	10624dd3 	.word	0x10624dd3
 800f9e0:	e000e014 	.word	0xe000e014

0800f9e4 <vPortEnableVFP>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< Updated upstream
 800fa54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fa64 <vPortEnableVFP+0x10>
 800fa58:	6801      	ldr	r1, [r0, #0]
 800fa5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fa5e:	6001      	str	r1, [r0, #0]
 800fa60:	4770      	bx	lr
=======
 800f9e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f9f4 <vPortEnableVFP+0x10>
 800f9e8:	6801      	ldr	r1, [r0, #0]
 800f9ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f9ee:	6001      	str	r1, [r0, #0]
 800f9f0:	4770      	bx	lr
>>>>>>> Stashed changes
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< Updated upstream
 800fa62:	bf00      	nop
 800fa64:	e000ed88 	.word	0xe000ed88

0800fa68 <vPortValidateInterruptPriority>:
=======
 800f9f2:	bf00      	nop
 800f9f4:	e000ed88 	.word	0xe000ed88

0800f9f8 <vPortValidateInterruptPriority>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< Updated upstream
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
=======
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< Updated upstream
 800fa6e:	f3ef 8305 	mrs	r3, IPSR
 800fa72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2b0f      	cmp	r3, #15
 800fa78:	d914      	bls.n	800faa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa7a:	4a17      	ldr	r2, [pc, #92]	; (800fad8 <vPortValidateInterruptPriority+0x70>)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	4413      	add	r3, r2
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	72fb      	strb	r3, [r7, #11]
=======
 800f9fe:	f3ef 8305 	mrs	r3, IPSR
 800fa02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b0f      	cmp	r3, #15
 800fa08:	d914      	bls.n	800fa34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa0a:	4a17      	ldr	r2, [pc, #92]	; (800fa68 <vPortValidateInterruptPriority+0x70>)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< Updated upstream
 800fa84:	4b15      	ldr	r3, [pc, #84]	; (800fadc <vPortValidateInterruptPriority+0x74>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	7afa      	ldrb	r2, [r7, #11]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d20a      	bcs.n	800faa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	607b      	str	r3, [r7, #4]
}
 800faa0:	bf00      	nop
 800faa2:	e7fe      	b.n	800faa2 <vPortValidateInterruptPriority+0x3a>
=======
 800fa14:	4b15      	ldr	r3, [pc, #84]	; (800fa6c <vPortValidateInterruptPriority+0x74>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	7afa      	ldrb	r2, [r7, #11]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d20a      	bcs.n	800fa34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	607b      	str	r3, [r7, #4]
}
 800fa30:	bf00      	nop
 800fa32:	e7fe      	b.n	800fa32 <vPortValidateInterruptPriority+0x3a>
>>>>>>> Stashed changes
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< Updated upstream
 800faa4:	4b0e      	ldr	r3, [pc, #56]	; (800fae0 <vPortValidateInterruptPriority+0x78>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800faac:	4b0d      	ldr	r3, [pc, #52]	; (800fae4 <vPortValidateInterruptPriority+0x7c>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d90a      	bls.n	800faca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	603b      	str	r3, [r7, #0]
}
 800fac6:	bf00      	nop
 800fac8:	e7fe      	b.n	800fac8 <vPortValidateInterruptPriority+0x60>
	}
 800faca:	bf00      	nop
 800facc:	3714      	adds	r7, #20
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop
 800fad8:	e000e3f0 	.word	0xe000e3f0
 800fadc:	20002a80 	.word	0x20002a80
 800fae0:	e000ed0c 	.word	0xe000ed0c
 800fae4:	20002a84 	.word	0x20002a84

0800fae8 <pvPortMalloc>:
=======
 800fa34:	4b0e      	ldr	r3, [pc, #56]	; (800fa70 <vPortValidateInterruptPriority+0x78>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa3c:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <vPortValidateInterruptPriority+0x7c>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d90a      	bls.n	800fa5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	603b      	str	r3, [r7, #0]
}
 800fa56:	bf00      	nop
 800fa58:	e7fe      	b.n	800fa58 <vPortValidateInterruptPriority+0x60>
	}
 800fa5a:	bf00      	nop
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	e000e3f0 	.word	0xe000e3f0
 800fa6c:	20002c30 	.word	0x20002c30
 800fa70:	e000ed0c 	.word	0xe000ed0c
 800fa74:	20002c34 	.word	0x20002c34

0800fa78 <pvPortMalloc>:
>>>>>>> Stashed changes
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< Updated upstream
 800fae8:	b580      	push	{r7, lr}
 800faea:	b08a      	sub	sp, #40	; 0x28
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800faf0:	2300      	movs	r3, #0
 800faf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800faf4:	f7fe fbd8 	bl	800e2a8 <vTaskSuspendAll>
=======
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b08a      	sub	sp, #40	; 0x28
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa80:	2300      	movs	r3, #0
 800fa82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa84:	f7fe fbda 	bl	800e23c <vTaskSuspendAll>
>>>>>>> Stashed changes
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< Updated upstream
 800faf8:	4b58      	ldr	r3, [pc, #352]	; (800fc5c <pvPortMalloc+0x174>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d101      	bne.n	800fb04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb00:	f000 f910 	bl	800fd24 <prvHeapInit>
=======
 800fa88:	4b58      	ldr	r3, [pc, #352]	; (800fbec <pvPortMalloc+0x174>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d101      	bne.n	800fa94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa90:	f000 f910 	bl	800fcb4 <prvHeapInit>
>>>>>>> Stashed changes

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< Updated upstream
 800fb04:	4b56      	ldr	r3, [pc, #344]	; (800fc60 <pvPortMalloc+0x178>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f040 808e 	bne.w	800fc2e <pvPortMalloc+0x146>
=======
 800fa94:	4b56      	ldr	r3, [pc, #344]	; (800fbf0 <pvPortMalloc+0x178>)
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4013      	ands	r3, r2
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f040 808e 	bne.w	800fbbe <pvPortMalloc+0x146>
>>>>>>> Stashed changes
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< Updated upstream
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d01d      	beq.n	800fb54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fb18:	2208      	movs	r2, #8
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	607b      	str	r3, [r7, #4]
=======
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d01d      	beq.n	800fae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800faa8:	2208      	movs	r2, #8
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4413      	add	r3, r2
 800faae:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< Updated upstream
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f003 0307 	and.w	r3, r3, #7
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d014      	beq.n	800fb54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f023 0307 	bic.w	r3, r3, #7
 800fb30:	3308      	adds	r3, #8
 800fb32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f003 0307 	and.w	r3, r3, #7
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00a      	beq.n	800fb54 <pvPortMalloc+0x6c>
	__asm volatile
 800fb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	617b      	str	r3, [r7, #20]
}
 800fb50:	bf00      	nop
 800fb52:	e7fe      	b.n	800fb52 <pvPortMalloc+0x6a>
=======
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f003 0307 	and.w	r3, r3, #7
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d014      	beq.n	800fae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f023 0307 	bic.w	r3, r3, #7
 800fac0:	3308      	adds	r3, #8
 800fac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f003 0307 	and.w	r3, r3, #7
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00a      	beq.n	800fae4 <pvPortMalloc+0x6c>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	617b      	str	r3, [r7, #20]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <pvPortMalloc+0x6a>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< Updated upstream
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d069      	beq.n	800fc2e <pvPortMalloc+0x146>
 800fb5a:	4b42      	ldr	r3, [pc, #264]	; (800fc64 <pvPortMalloc+0x17c>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d864      	bhi.n	800fc2e <pvPortMalloc+0x146>
=======
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d069      	beq.n	800fbbe <pvPortMalloc+0x146>
 800faea:	4b42      	ldr	r3, [pc, #264]	; (800fbf4 <pvPortMalloc+0x17c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d864      	bhi.n	800fbbe <pvPortMalloc+0x146>
>>>>>>> Stashed changes
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< Updated upstream
 800fb64:	4b40      	ldr	r3, [pc, #256]	; (800fc68 <pvPortMalloc+0x180>)
 800fb66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fb68:	4b3f      	ldr	r3, [pc, #252]	; (800fc68 <pvPortMalloc+0x180>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb6e:	e004      	b.n	800fb7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d903      	bls.n	800fb8c <pvPortMalloc+0xa4>
 800fb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1f1      	bne.n	800fb70 <pvPortMalloc+0x88>
=======
 800faf4:	4b40      	ldr	r3, [pc, #256]	; (800fbf8 <pvPortMalloc+0x180>)
 800faf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800faf8:	4b3f      	ldr	r3, [pc, #252]	; (800fbf8 <pvPortMalloc+0x180>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fafe:	e004      	b.n	800fb0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d903      	bls.n	800fb1c <pvPortMalloc+0xa4>
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d1f1      	bne.n	800fb00 <pvPortMalloc+0x88>
>>>>>>> Stashed changes
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< Updated upstream
 800fb8c:	4b33      	ldr	r3, [pc, #204]	; (800fc5c <pvPortMalloc+0x174>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d04b      	beq.n	800fc2e <pvPortMalloc+0x146>
=======
 800fb1c:	4b33      	ldr	r3, [pc, #204]	; (800fbec <pvPortMalloc+0x174>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d04b      	beq.n	800fbbe <pvPortMalloc+0x146>
>>>>>>> Stashed changes
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< Updated upstream
 800fb96:	6a3b      	ldr	r3, [r7, #32]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2208      	movs	r2, #8
 800fb9c:	4413      	add	r3, r2
 800fb9e:	61fb      	str	r3, [r7, #28]
=======
 800fb26:	6a3b      	ldr	r3, [r7, #32]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2208      	movs	r2, #8
 800fb2c:	4413      	add	r3, r2
 800fb2e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< Updated upstream
 800fba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	6a3b      	ldr	r3, [r7, #32]
 800fba6:	601a      	str	r2, [r3, #0]
=======
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	6a3b      	ldr	r3, [r7, #32]
 800fb36:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< Updated upstream
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	685a      	ldr	r2, [r3, #4]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	1ad2      	subs	r2, r2, r3
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	005b      	lsls	r3, r3, #1
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d91f      	bls.n	800fbf8 <pvPortMalloc+0x110>
=======
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	685a      	ldr	r2, [r3, #4]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	1ad2      	subs	r2, r2, r3
 800fb40:	2308      	movs	r3, #8
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d91f      	bls.n	800fb88 <pvPortMalloc+0x110>
>>>>>>> Stashed changes
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< Updated upstream
 800fbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	f003 0307 	and.w	r3, r3, #7
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00a      	beq.n	800fbe0 <pvPortMalloc+0xf8>
	__asm volatile
 800fbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	613b      	str	r3, [r7, #16]
}
 800fbdc:	bf00      	nop
 800fbde:	e7fe      	b.n	800fbde <pvPortMalloc+0xf6>
=======
 800fb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	f003 0307 	and.w	r3, r3, #7
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d00a      	beq.n	800fb70 <pvPortMalloc+0xf8>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	613b      	str	r3, [r7, #16]
}
 800fb6c:	bf00      	nop
 800fb6e:	e7fe      	b.n	800fb6e <pvPortMalloc+0xf6>
>>>>>>> Stashed changes

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< Updated upstream
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	685a      	ldr	r2, [r3, #4]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	1ad2      	subs	r2, r2, r3
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fbf2:	69b8      	ldr	r0, [r7, #24]
 800fbf4:	f000 f8f8 	bl	800fde8 <prvInsertBlockIntoFreeList>
=======
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	685a      	ldr	r2, [r3, #4]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	1ad2      	subs	r2, r2, r3
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb82:	69b8      	ldr	r0, [r7, #24]
 800fb84:	f000 f8f8 	bl	800fd78 <prvInsertBlockIntoFreeList>
>>>>>>> Stashed changes
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< Updated upstream
 800fbf8:	4b1a      	ldr	r3, [pc, #104]	; (800fc64 <pvPortMalloc+0x17c>)
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	1ad3      	subs	r3, r2, r3
 800fc02:	4a18      	ldr	r2, [pc, #96]	; (800fc64 <pvPortMalloc+0x17c>)
 800fc04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc06:	4b17      	ldr	r3, [pc, #92]	; (800fc64 <pvPortMalloc+0x17c>)
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	4b18      	ldr	r3, [pc, #96]	; (800fc6c <pvPortMalloc+0x184>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d203      	bcs.n	800fc1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc12:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <pvPortMalloc+0x17c>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a15      	ldr	r2, [pc, #84]	; (800fc6c <pvPortMalloc+0x184>)
 800fc18:	6013      	str	r3, [r2, #0]
=======
 800fb88:	4b1a      	ldr	r3, [pc, #104]	; (800fbf4 <pvPortMalloc+0x17c>)
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	4a18      	ldr	r2, [pc, #96]	; (800fbf4 <pvPortMalloc+0x17c>)
 800fb94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb96:	4b17      	ldr	r3, [pc, #92]	; (800fbf4 <pvPortMalloc+0x17c>)
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	4b18      	ldr	r3, [pc, #96]	; (800fbfc <pvPortMalloc+0x184>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d203      	bcs.n	800fbaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fba2:	4b14      	ldr	r3, [pc, #80]	; (800fbf4 <pvPortMalloc+0x17c>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a15      	ldr	r2, [pc, #84]	; (800fbfc <pvPortMalloc+0x184>)
 800fba8:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< Updated upstream
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	4b10      	ldr	r3, [pc, #64]	; (800fc60 <pvPortMalloc+0x178>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	431a      	orrs	r2, r3
 800fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	601a      	str	r2, [r3, #0]
=======
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	4b10      	ldr	r3, [pc, #64]	; (800fbf0 <pvPortMalloc+0x178>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	2200      	movs	r2, #0
 800fbbc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< Updated upstream
 800fc2e:	f7fe fb49 	bl	800e2c4 <xTaskResumeAll>
=======
 800fbbe:	f7fe fb4b 	bl	800e258 <xTaskResumeAll>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< Updated upstream
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	f003 0307 	and.w	r3, r3, #7
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00a      	beq.n	800fc52 <pvPortMalloc+0x16a>
	__asm volatile
 800fc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc40:	f383 8811 	msr	BASEPRI, r3
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	f3bf 8f4f 	dsb	sy
 800fc4c:	60fb      	str	r3, [r7, #12]
}
 800fc4e:	bf00      	nop
 800fc50:	e7fe      	b.n	800fc50 <pvPortMalloc+0x168>
	return pvReturn;
 800fc52:	69fb      	ldr	r3, [r7, #28]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3728      	adds	r7, #40	; 0x28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	20002e90 	.word	0x20002e90
 800fc60:	20002e9c 	.word	0x20002e9c
 800fc64:	20002e94 	.word	0x20002e94
 800fc68:	20002e88 	.word	0x20002e88
 800fc6c:	20002e98 	.word	0x20002e98

0800fc70 <vPortFree>:
=======
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	f003 0307 	and.w	r3, r3, #7
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00a      	beq.n	800fbe2 <pvPortMalloc+0x16a>
	__asm volatile
 800fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	60fb      	str	r3, [r7, #12]
}
 800fbde:	bf00      	nop
 800fbe0:	e7fe      	b.n	800fbe0 <pvPortMalloc+0x168>
	return pvReturn;
 800fbe2:	69fb      	ldr	r3, [r7, #28]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3728      	adds	r7, #40	; 0x28
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	20003040 	.word	0x20003040
 800fbf0:	2000304c 	.word	0x2000304c
 800fbf4:	20003044 	.word	0x20003044
 800fbf8:	20003038 	.word	0x20003038
 800fbfc:	20003048 	.word	0x20003048

0800fc00 <vPortFree>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< Updated upstream
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d048      	beq.n	800fd14 <vPortFree+0xa4>
=======
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b086      	sub	sp, #24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d048      	beq.n	800fca4 <vPortFree+0xa4>
>>>>>>> Stashed changes
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< Updated upstream
 800fc82:	2308      	movs	r3, #8
 800fc84:	425b      	negs	r3, r3
 800fc86:	697a      	ldr	r2, [r7, #20]
 800fc88:	4413      	add	r3, r2
 800fc8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	4b21      	ldr	r3, [pc, #132]	; (800fd1c <vPortFree+0xac>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4013      	ands	r3, r2
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d10a      	bne.n	800fcb4 <vPortFree+0x44>
	__asm volatile
 800fc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	60fb      	str	r3, [r7, #12]
}
 800fcb0:	bf00      	nop
 800fcb2:	e7fe      	b.n	800fcb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00a      	beq.n	800fcd2 <vPortFree+0x62>
	__asm volatile
 800fcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc0:	f383 8811 	msr	BASEPRI, r3
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	f3bf 8f4f 	dsb	sy
 800fccc:	60bb      	str	r3, [r7, #8]
}
 800fcce:	bf00      	nop
 800fcd0:	e7fe      	b.n	800fcd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	4b11      	ldr	r3, [pc, #68]	; (800fd1c <vPortFree+0xac>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4013      	ands	r3, r2
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d019      	beq.n	800fd14 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d115      	bne.n	800fd14 <vPortFree+0xa4>
=======
 800fc12:	2308      	movs	r3, #8
 800fc14:	425b      	negs	r3, r3
 800fc16:	697a      	ldr	r2, [r7, #20]
 800fc18:	4413      	add	r3, r2
 800fc1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	685a      	ldr	r2, [r3, #4]
 800fc24:	4b21      	ldr	r3, [pc, #132]	; (800fcac <vPortFree+0xac>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4013      	ands	r3, r2
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d10a      	bne.n	800fc44 <vPortFree+0x44>
	__asm volatile
 800fc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc32:	f383 8811 	msr	BASEPRI, r3
 800fc36:	f3bf 8f6f 	isb	sy
 800fc3a:	f3bf 8f4f 	dsb	sy
 800fc3e:	60fb      	str	r3, [r7, #12]
}
 800fc40:	bf00      	nop
 800fc42:	e7fe      	b.n	800fc42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00a      	beq.n	800fc62 <vPortFree+0x62>
	__asm volatile
 800fc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc50:	f383 8811 	msr	BASEPRI, r3
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	f3bf 8f4f 	dsb	sy
 800fc5c:	60bb      	str	r3, [r7, #8]
}
 800fc5e:	bf00      	nop
 800fc60:	e7fe      	b.n	800fc60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	685a      	ldr	r2, [r3, #4]
 800fc66:	4b11      	ldr	r3, [pc, #68]	; (800fcac <vPortFree+0xac>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d019      	beq.n	800fca4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d115      	bne.n	800fca4 <vPortFree+0xa4>
>>>>>>> Stashed changes
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< Updated upstream
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	685a      	ldr	r2, [r3, #4]
 800fcec:	4b0b      	ldr	r3, [pc, #44]	; (800fd1c <vPortFree+0xac>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	43db      	mvns	r3, r3
 800fcf2:	401a      	ands	r2, r3
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fcf8:	f7fe fad6 	bl	800e2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	685a      	ldr	r2, [r3, #4]
 800fd00:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <vPortFree+0xb0>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4413      	add	r3, r2
 800fd06:	4a06      	ldr	r2, [pc, #24]	; (800fd20 <vPortFree+0xb0>)
 800fd08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd0a:	6938      	ldr	r0, [r7, #16]
 800fd0c:	f000 f86c 	bl	800fde8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fd10:	f7fe fad8 	bl	800e2c4 <xTaskResumeAll>
=======
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	4b0b      	ldr	r3, [pc, #44]	; (800fcac <vPortFree+0xac>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	43db      	mvns	r3, r3
 800fc82:	401a      	ands	r2, r3
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc88:	f7fe fad8 	bl	800e23c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	685a      	ldr	r2, [r3, #4]
 800fc90:	4b07      	ldr	r3, [pc, #28]	; (800fcb0 <vPortFree+0xb0>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4413      	add	r3, r2
 800fc96:	4a06      	ldr	r2, [pc, #24]	; (800fcb0 <vPortFree+0xb0>)
 800fc98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc9a:	6938      	ldr	r0, [r7, #16]
 800fc9c:	f000 f86c 	bl	800fd78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fca0:	f7fe fada 	bl	800e258 <xTaskResumeAll>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< Updated upstream
 800fd14:	bf00      	nop
 800fd16:	3718      	adds	r7, #24
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20002e9c 	.word	0x20002e9c
 800fd20:	20002e94 	.word	0x20002e94

0800fd24 <prvHeapInit>:
=======
 800fca4:	bf00      	nop
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	2000304c 	.word	0x2000304c
 800fcb0:	20003044 	.word	0x20003044

0800fcb4 <prvHeapInit>:
>>>>>>> Stashed changes
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< Updated upstream
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
=======
 800fcb4:	b480      	push	{r7}
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< Updated upstream
 800fd2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd30:	4b27      	ldr	r3, [pc, #156]	; (800fdd0 <prvHeapInit+0xac>)
 800fd32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f003 0307 	and.w	r3, r3, #7
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00c      	beq.n	800fd58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	3307      	adds	r3, #7
 800fd42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f023 0307 	bic.w	r3, r3, #7
 800fd4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fd4c:	68ba      	ldr	r2, [r7, #8]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	4a1f      	ldr	r2, [pc, #124]	; (800fdd0 <prvHeapInit+0xac>)
 800fd54:	4413      	add	r3, r2
 800fd56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	607b      	str	r3, [r7, #4]
=======
 800fcba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fcc0:	4b27      	ldr	r3, [pc, #156]	; (800fd60 <prvHeapInit+0xac>)
 800fcc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f003 0307 	and.w	r3, r3, #7
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d00c      	beq.n	800fce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3307      	adds	r3, #7
 800fcd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f023 0307 	bic.w	r3, r3, #7
 800fcda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	1ad3      	subs	r3, r2, r3
 800fce2:	4a1f      	ldr	r2, [pc, #124]	; (800fd60 <prvHeapInit+0xac>)
 800fce4:	4413      	add	r3, r2
 800fce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 800fd5c:	4a1d      	ldr	r2, [pc, #116]	; (800fdd4 <prvHeapInit+0xb0>)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd62:	4b1c      	ldr	r3, [pc, #112]	; (800fdd4 <prvHeapInit+0xb0>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	605a      	str	r2, [r3, #4]
=======
 800fcec:	4a1d      	ldr	r2, [pc, #116]	; (800fd64 <prvHeapInit+0xb0>)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fcf2:	4b1c      	ldr	r3, [pc, #112]	; (800fd64 <prvHeapInit+0xb0>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< Updated upstream
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd70:	2208      	movs	r2, #8
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f023 0307 	bic.w	r3, r3, #7
 800fd7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4a15      	ldr	r2, [pc, #84]	; (800fdd8 <prvHeapInit+0xb4>)
 800fd84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd86:	4b14      	ldr	r3, [pc, #80]	; (800fdd8 <prvHeapInit+0xb4>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd8e:	4b12      	ldr	r3, [pc, #72]	; (800fdd8 <prvHeapInit+0xb4>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2200      	movs	r2, #0
 800fd94:	601a      	str	r2, [r3, #0]
=======
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd00:	2208      	movs	r2, #8
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	1a9b      	subs	r3, r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f023 0307 	bic.w	r3, r3, #7
 800fd0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	4a15      	ldr	r2, [pc, #84]	; (800fd68 <prvHeapInit+0xb4>)
 800fd14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd16:	4b14      	ldr	r3, [pc, #80]	; (800fd68 <prvHeapInit+0xb4>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd1e:	4b12      	ldr	r3, [pc, #72]	; (800fd68 <prvHeapInit+0xb4>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	1ad2      	subs	r2, r2, r3
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fda4:	4b0c      	ldr	r3, [pc, #48]	; (800fdd8 <prvHeapInit+0xb4>)
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	4a0a      	ldr	r2, [pc, #40]	; (800fddc <prvHeapInit+0xb8>)
 800fdb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	4a09      	ldr	r2, [pc, #36]	; (800fde0 <prvHeapInit+0xbc>)
 800fdba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fdbc:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <prvHeapInit+0xc0>)
 800fdbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fdc2:	601a      	str	r2, [r3, #0]
}
 800fdc4:	bf00      	nop
 800fdc6:	3714      	adds	r7, #20
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr
 800fdd0:	20002a88 	.word	0x20002a88
 800fdd4:	20002e88 	.word	0x20002e88
 800fdd8:	20002e90 	.word	0x20002e90
 800fddc:	20002e98 	.word	0x20002e98
 800fde0:	20002e94 	.word	0x20002e94
 800fde4:	20002e9c 	.word	0x20002e9c

0800fde8 <prvInsertBlockIntoFreeList>:
=======
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	1ad2      	subs	r2, r2, r3
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd34:	4b0c      	ldr	r3, [pc, #48]	; (800fd68 <prvHeapInit+0xb4>)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	4a0a      	ldr	r2, [pc, #40]	; (800fd6c <prvHeapInit+0xb8>)
 800fd42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	4a09      	ldr	r2, [pc, #36]	; (800fd70 <prvHeapInit+0xbc>)
 800fd4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd4c:	4b09      	ldr	r3, [pc, #36]	; (800fd74 <prvHeapInit+0xc0>)
 800fd4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fd52:	601a      	str	r2, [r3, #0]
}
 800fd54:	bf00      	nop
 800fd56:	3714      	adds	r7, #20
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr
 800fd60:	20002c38 	.word	0x20002c38
 800fd64:	20003038 	.word	0x20003038
 800fd68:	20003040 	.word	0x20003040
 800fd6c:	20003048 	.word	0x20003048
 800fd70:	20003044 	.word	0x20003044
 800fd74:	2000304c 	.word	0x2000304c

0800fd78 <prvInsertBlockIntoFreeList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< Updated upstream
 800fde8:	b480      	push	{r7}
 800fdea:	b085      	sub	sp, #20
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
=======
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< Updated upstream
 800fdf0:	4b28      	ldr	r3, [pc, #160]	; (800fe94 <prvInsertBlockIntoFreeList+0xac>)
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	e002      	b.n	800fdfc <prvInsertBlockIntoFreeList+0x14>
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	60fb      	str	r3, [r7, #12]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d8f7      	bhi.n	800fdf6 <prvInsertBlockIntoFreeList+0xe>
=======
 800fd80:	4b28      	ldr	r3, [pc, #160]	; (800fe24 <prvInsertBlockIntoFreeList+0xac>)
 800fd82:	60fb      	str	r3, [r7, #12]
 800fd84:	e002      	b.n	800fd8c <prvInsertBlockIntoFreeList+0x14>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	60fb      	str	r3, [r7, #12]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d8f7      	bhi.n	800fd86 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> Stashed changes
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< Updated upstream
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	68ba      	ldr	r2, [r7, #8]
 800fe10:	4413      	add	r3, r2
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d108      	bne.n	800fe2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	685a      	ldr	r2, [r3, #4]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	441a      	add	r2, r3
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	607b      	str	r3, [r7, #4]
=======
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	68ba      	ldr	r2, [r7, #8]
 800fda0:	4413      	add	r3, r2
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d108      	bne.n	800fdba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	685a      	ldr	r2, [r3, #4]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	441a      	add	r2, r3
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< Updated upstream
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	441a      	add	r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d118      	bne.n	800fe70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	4b15      	ldr	r3, [pc, #84]	; (800fe98 <prvInsertBlockIntoFreeList+0xb0>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d00d      	beq.n	800fe66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	441a      	add	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	e008      	b.n	800fe78 <prvInsertBlockIntoFreeList+0x90>
=======
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	68ba      	ldr	r2, [r7, #8]
 800fdc4:	441a      	add	r2, r3
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d118      	bne.n	800fe00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	4b15      	ldr	r3, [pc, #84]	; (800fe28 <prvInsertBlockIntoFreeList+0xb0>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d00d      	beq.n	800fdf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	441a      	add	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	e008      	b.n	800fe08 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< Updated upstream
 800fe66:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <prvInsertBlockIntoFreeList+0xb0>)
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	e003      	b.n	800fe78 <prvInsertBlockIntoFreeList+0x90>
=======
 800fdf6:	4b0c      	ldr	r3, [pc, #48]	; (800fe28 <prvInsertBlockIntoFreeList+0xb0>)
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	601a      	str	r2, [r3, #0]
 800fdfe:	e003      	b.n	800fe08 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< Updated upstream
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	601a      	str	r2, [r3, #0]
=======
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< Updated upstream
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d002      	beq.n	800fe86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	601a      	str	r2, [r3, #0]
=======
 800fe08:	68fa      	ldr	r2, [r7, #12]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d002      	beq.n	800fe16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800fe86:	bf00      	nop
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	20002e88 	.word	0x20002e88
 800fe98:	20002e90 	.word	0x20002e90

0800fe9c <swapfunc>:
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	b510      	push	{r4, lr}
 800fea0:	d00a      	beq.n	800feb8 <swapfunc+0x1c>
 800fea2:	0892      	lsrs	r2, r2, #2
 800fea4:	3a01      	subs	r2, #1
 800fea6:	6803      	ldr	r3, [r0, #0]
 800fea8:	680c      	ldr	r4, [r1, #0]
 800feaa:	f840 4b04 	str.w	r4, [r0], #4
 800feae:	2a00      	cmp	r2, #0
 800feb0:	f841 3b04 	str.w	r3, [r1], #4
 800feb4:	dcf6      	bgt.n	800fea4 <swapfunc+0x8>
 800feb6:	bd10      	pop	{r4, pc}
 800feb8:	4402      	add	r2, r0
 800feba:	780c      	ldrb	r4, [r1, #0]
 800febc:	7803      	ldrb	r3, [r0, #0]
 800febe:	f800 4b01 	strb.w	r4, [r0], #1
 800fec2:	f801 3b01 	strb.w	r3, [r1], #1
 800fec6:	1a13      	subs	r3, r2, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	dcf6      	bgt.n	800feba <swapfunc+0x1e>
 800fecc:	e7f3      	b.n	800feb6 <swapfunc+0x1a>

0800fece <med3.constprop.0>:
 800fece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed0:	460c      	mov	r4, r1
 800fed2:	4615      	mov	r5, r2
 800fed4:	4607      	mov	r7, r0
 800fed6:	461e      	mov	r6, r3
 800fed8:	4798      	blx	r3
 800feda:	2800      	cmp	r0, #0
 800fedc:	4629      	mov	r1, r5
 800fede:	4620      	mov	r0, r4
 800fee0:	da0a      	bge.n	800fef8 <med3.constprop.0+0x2a>
 800fee2:	47b0      	blx	r6
 800fee4:	2800      	cmp	r0, #0
 800fee6:	db05      	blt.n	800fef4 <med3.constprop.0+0x26>
 800fee8:	4629      	mov	r1, r5
 800feea:	4638      	mov	r0, r7
 800feec:	47b0      	blx	r6
 800feee:	2800      	cmp	r0, #0
 800fef0:	db0a      	blt.n	800ff08 <med3.constprop.0+0x3a>
 800fef2:	463c      	mov	r4, r7
 800fef4:	4620      	mov	r0, r4
 800fef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fef8:	47b0      	blx	r6
 800fefa:	2800      	cmp	r0, #0
 800fefc:	dcfa      	bgt.n	800fef4 <med3.constprop.0+0x26>
 800fefe:	4629      	mov	r1, r5
 800ff00:	4638      	mov	r0, r7
 800ff02:	47b0      	blx	r6
 800ff04:	2800      	cmp	r0, #0
 800ff06:	dbf4      	blt.n	800fef2 <med3.constprop.0+0x24>
 800ff08:	462c      	mov	r4, r5
 800ff0a:	e7f3      	b.n	800fef4 <med3.constprop.0+0x26>

0800ff0c <qsort>:
 800ff0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff10:	469a      	mov	sl, r3
 800ff12:	ea40 0302 	orr.w	r3, r0, r2
 800ff16:	079b      	lsls	r3, r3, #30
 800ff18:	b097      	sub	sp, #92	; 0x5c
 800ff1a:	4606      	mov	r6, r0
 800ff1c:	4614      	mov	r4, r2
 800ff1e:	d11a      	bne.n	800ff56 <qsort+0x4a>
 800ff20:	f1b2 0804 	subs.w	r8, r2, #4
 800ff24:	bf18      	it	ne
 800ff26:	f04f 0801 	movne.w	r8, #1
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	9302      	str	r3, [sp, #8]
 800ff2e:	1933      	adds	r3, r6, r4
 800ff30:	fb04 f701 	mul.w	r7, r4, r1
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	2906      	cmp	r1, #6
 800ff38:	eb06 0307 	add.w	r3, r6, r7
 800ff3c:	9303      	str	r3, [sp, #12]
 800ff3e:	d82a      	bhi.n	800ff96 <qsort+0x8a>
 800ff40:	9b01      	ldr	r3, [sp, #4]
 800ff42:	9a03      	ldr	r2, [sp, #12]
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d310      	bcc.n	800ff6a <qsort+0x5e>
 800ff48:	9b02      	ldr	r3, [sp, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f040 811e 	bne.w	801018c <qsort+0x280>
 800ff50:	b017      	add	sp, #92	; 0x5c
 800ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff56:	f04f 0802 	mov.w	r8, #2
 800ff5a:	e7e6      	b.n	800ff2a <qsort+0x1e>
 800ff5c:	4643      	mov	r3, r8
 800ff5e:	4622      	mov	r2, r4
 800ff60:	4639      	mov	r1, r7
 800ff62:	4628      	mov	r0, r5
 800ff64:	f7ff ff9a 	bl	800fe9c <swapfunc>
 800ff68:	e00e      	b.n	800ff88 <qsort+0x7c>
 800ff6a:	9d01      	ldr	r5, [sp, #4]
 800ff6c:	e00d      	b.n	800ff8a <qsort+0x7e>
 800ff6e:	1b2f      	subs	r7, r5, r4
 800ff70:	4629      	mov	r1, r5
 800ff72:	4638      	mov	r0, r7
 800ff74:	47d0      	blx	sl
 800ff76:	2800      	cmp	r0, #0
 800ff78:	dd09      	ble.n	800ff8e <qsort+0x82>
 800ff7a:	f1b8 0f00 	cmp.w	r8, #0
 800ff7e:	d1ed      	bne.n	800ff5c <qsort+0x50>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	683a      	ldr	r2, [r7, #0]
 800ff84:	602a      	str	r2, [r5, #0]
 800ff86:	603b      	str	r3, [r7, #0]
 800ff88:	463d      	mov	r5, r7
 800ff8a:	42ae      	cmp	r6, r5
 800ff8c:	d3ef      	bcc.n	800ff6e <qsort+0x62>
 800ff8e:	9b01      	ldr	r3, [sp, #4]
 800ff90:	4423      	add	r3, r4
 800ff92:	9301      	str	r3, [sp, #4]
 800ff94:	e7d4      	b.n	800ff40 <qsort+0x34>
 800ff96:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800ff9a:	1b3f      	subs	r7, r7, r4
 800ff9c:	2907      	cmp	r1, #7
 800ff9e:	fb04 6909 	mla	r9, r4, r9, r6
 800ffa2:	4437      	add	r7, r6
 800ffa4:	d021      	beq.n	800ffea <qsort+0xde>
 800ffa6:	2928      	cmp	r1, #40	; 0x28
 800ffa8:	d944      	bls.n	8010034 <qsort+0x128>
 800ffaa:	08cd      	lsrs	r5, r1, #3
 800ffac:	4365      	muls	r5, r4
 800ffae:	4653      	mov	r3, sl
 800ffb0:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800ffb4:	1971      	adds	r1, r6, r5
 800ffb6:	4630      	mov	r0, r6
 800ffb8:	f7ff ff89 	bl	800fece <med3.constprop.0>
 800ffbc:	4649      	mov	r1, r9
 800ffbe:	eb09 0205 	add.w	r2, r9, r5
 800ffc2:	4653      	mov	r3, sl
 800ffc4:	4683      	mov	fp, r0
 800ffc6:	1b48      	subs	r0, r1, r5
 800ffc8:	f7ff ff81 	bl	800fece <med3.constprop.0>
 800ffcc:	463a      	mov	r2, r7
 800ffce:	4681      	mov	r9, r0
 800ffd0:	4653      	mov	r3, sl
 800ffd2:	1b79      	subs	r1, r7, r5
 800ffd4:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800ffd8:	f7ff ff79 	bl	800fece <med3.constprop.0>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	4649      	mov	r1, r9
 800ffe0:	4653      	mov	r3, sl
 800ffe2:	4658      	mov	r0, fp
 800ffe4:	f7ff ff73 	bl	800fece <med3.constprop.0>
 800ffe8:	4681      	mov	r9, r0
 800ffea:	f1b8 0f00 	cmp.w	r8, #0
 800ffee:	d124      	bne.n	801003a <qsort+0x12e>
 800fff0:	6833      	ldr	r3, [r6, #0]
 800fff2:	f8d9 2000 	ldr.w	r2, [r9]
 800fff6:	6032      	str	r2, [r6, #0]
 800fff8:	f8c9 3000 	str.w	r3, [r9]
 800fffc:	eb06 0b04 	add.w	fp, r6, r4
 8010000:	46b9      	mov	r9, r7
 8010002:	465d      	mov	r5, fp
 8010004:	2300      	movs	r3, #0
 8010006:	45bb      	cmp	fp, r7
 8010008:	d835      	bhi.n	8010076 <qsort+0x16a>
 801000a:	4631      	mov	r1, r6
 801000c:	4658      	mov	r0, fp
 801000e:	9304      	str	r3, [sp, #16]
 8010010:	47d0      	blx	sl
 8010012:	2800      	cmp	r0, #0
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	dc3e      	bgt.n	8010096 <qsort+0x18a>
 8010018:	d10a      	bne.n	8010030 <qsort+0x124>
 801001a:	f1b8 0f00 	cmp.w	r8, #0
 801001e:	d113      	bne.n	8010048 <qsort+0x13c>
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	f8db 2000 	ldr.w	r2, [fp]
 8010026:	602a      	str	r2, [r5, #0]
 8010028:	f8cb 3000 	str.w	r3, [fp]
 801002c:	4425      	add	r5, r4
 801002e:	2301      	movs	r3, #1
 8010030:	44a3      	add	fp, r4
 8010032:	e7e8      	b.n	8010006 <qsort+0xfa>
 8010034:	463a      	mov	r2, r7
 8010036:	46b3      	mov	fp, r6
 8010038:	e7d1      	b.n	800ffde <qsort+0xd2>
 801003a:	4643      	mov	r3, r8
 801003c:	4622      	mov	r2, r4
 801003e:	4649      	mov	r1, r9
 8010040:	4630      	mov	r0, r6
 8010042:	f7ff ff2b 	bl	800fe9c <swapfunc>
 8010046:	e7d9      	b.n	800fffc <qsort+0xf0>
 8010048:	4643      	mov	r3, r8
 801004a:	4622      	mov	r2, r4
 801004c:	4659      	mov	r1, fp
 801004e:	4628      	mov	r0, r5
 8010050:	f7ff ff24 	bl	800fe9c <swapfunc>
 8010054:	e7ea      	b.n	801002c <qsort+0x120>
 8010056:	d10b      	bne.n	8010070 <qsort+0x164>
 8010058:	f1b8 0f00 	cmp.w	r8, #0
 801005c:	d114      	bne.n	8010088 <qsort+0x17c>
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	f8d9 2000 	ldr.w	r2, [r9]
 8010064:	603a      	str	r2, [r7, #0]
 8010066:	f8c9 3000 	str.w	r3, [r9]
 801006a:	eba9 0904 	sub.w	r9, r9, r4
 801006e:	2301      	movs	r3, #1
 8010070:	9f04      	ldr	r7, [sp, #16]
 8010072:	45bb      	cmp	fp, r7
 8010074:	d90f      	bls.n	8010096 <qsort+0x18a>
 8010076:	2b00      	cmp	r3, #0
 8010078:	d143      	bne.n	8010102 <qsort+0x1f6>
 801007a:	9b01      	ldr	r3, [sp, #4]
 801007c:	9a03      	ldr	r2, [sp, #12]
 801007e:	4293      	cmp	r3, r2
 8010080:	f4bf af62 	bcs.w	800ff48 <qsort+0x3c>
 8010084:	9d01      	ldr	r5, [sp, #4]
 8010086:	e036      	b.n	80100f6 <qsort+0x1ea>
 8010088:	4643      	mov	r3, r8
 801008a:	4622      	mov	r2, r4
 801008c:	4649      	mov	r1, r9
 801008e:	4638      	mov	r0, r7
 8010090:	f7ff ff04 	bl	800fe9c <swapfunc>
 8010094:	e7e9      	b.n	801006a <qsort+0x15e>
 8010096:	4631      	mov	r1, r6
 8010098:	4638      	mov	r0, r7
 801009a:	9305      	str	r3, [sp, #20]
 801009c:	47d0      	blx	sl
 801009e:	1b3b      	subs	r3, r7, r4
 80100a0:	2800      	cmp	r0, #0
 80100a2:	9304      	str	r3, [sp, #16]
 80100a4:	9b05      	ldr	r3, [sp, #20]
 80100a6:	dad6      	bge.n	8010056 <qsort+0x14a>
 80100a8:	f1b8 0f00 	cmp.w	r8, #0
 80100ac:	d006      	beq.n	80100bc <qsort+0x1b0>
 80100ae:	4643      	mov	r3, r8
 80100b0:	4622      	mov	r2, r4
 80100b2:	4639      	mov	r1, r7
 80100b4:	4658      	mov	r0, fp
 80100b6:	f7ff fef1 	bl	800fe9c <swapfunc>
 80100ba:	e005      	b.n	80100c8 <qsort+0x1bc>
 80100bc:	f8db 3000 	ldr.w	r3, [fp]
 80100c0:	683a      	ldr	r2, [r7, #0]
 80100c2:	f8cb 2000 	str.w	r2, [fp]
 80100c6:	603b      	str	r3, [r7, #0]
 80100c8:	9f04      	ldr	r7, [sp, #16]
 80100ca:	e7b0      	b.n	801002e <qsort+0x122>
 80100cc:	4643      	mov	r3, r8
 80100ce:	4622      	mov	r2, r4
 80100d0:	4639      	mov	r1, r7
 80100d2:	4628      	mov	r0, r5
 80100d4:	f7ff fee2 	bl	800fe9c <swapfunc>
 80100d8:	e00c      	b.n	80100f4 <qsort+0x1e8>
 80100da:	1b2f      	subs	r7, r5, r4
 80100dc:	4629      	mov	r1, r5
 80100de:	4638      	mov	r0, r7
 80100e0:	47d0      	blx	sl
 80100e2:	2800      	cmp	r0, #0
 80100e4:	dd09      	ble.n	80100fa <qsort+0x1ee>
 80100e6:	f1b8 0f00 	cmp.w	r8, #0
 80100ea:	d1ef      	bne.n	80100cc <qsort+0x1c0>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	602a      	str	r2, [r5, #0]
 80100f2:	603b      	str	r3, [r7, #0]
 80100f4:	463d      	mov	r5, r7
 80100f6:	42ae      	cmp	r6, r5
 80100f8:	d3ef      	bcc.n	80100da <qsort+0x1ce>
 80100fa:	9b01      	ldr	r3, [sp, #4]
 80100fc:	4423      	add	r3, r4
 80100fe:	9301      	str	r3, [sp, #4]
 8010100:	e7bb      	b.n	801007a <qsort+0x16e>
 8010102:	ebab 0305 	sub.w	r3, fp, r5
 8010106:	1baa      	subs	r2, r5, r6
 8010108:	429a      	cmp	r2, r3
 801010a:	bfa8      	it	ge
 801010c:	461a      	movge	r2, r3
 801010e:	9301      	str	r3, [sp, #4]
 8010110:	b12a      	cbz	r2, 801011e <qsort+0x212>
 8010112:	4643      	mov	r3, r8
 8010114:	ebab 0102 	sub.w	r1, fp, r2
 8010118:	4630      	mov	r0, r6
 801011a:	f7ff febf 	bl	800fe9c <swapfunc>
 801011e:	9b03      	ldr	r3, [sp, #12]
 8010120:	eba3 0209 	sub.w	r2, r3, r9
 8010124:	eba9 0707 	sub.w	r7, r9, r7
 8010128:	1b12      	subs	r2, r2, r4
 801012a:	42ba      	cmp	r2, r7
 801012c:	bf28      	it	cs
 801012e:	463a      	movcs	r2, r7
 8010130:	b12a      	cbz	r2, 801013e <qsort+0x232>
 8010132:	9903      	ldr	r1, [sp, #12]
 8010134:	4643      	mov	r3, r8
 8010136:	1a89      	subs	r1, r1, r2
 8010138:	4658      	mov	r0, fp
 801013a:	f7ff feaf 	bl	800fe9c <swapfunc>
 801013e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010142:	9b03      	ldr	r3, [sp, #12]
 8010144:	454f      	cmp	r7, r9
 8010146:	eba3 0007 	sub.w	r0, r3, r7
 801014a:	d904      	bls.n	8010156 <qsort+0x24a>
 801014c:	4633      	mov	r3, r6
 801014e:	46b9      	mov	r9, r7
 8010150:	9f01      	ldr	r7, [sp, #4]
 8010152:	4606      	mov	r6, r0
 8010154:	4618      	mov	r0, r3
 8010156:	42a7      	cmp	r7, r4
 8010158:	d921      	bls.n	801019e <qsort+0x292>
 801015a:	fbb7 f1f4 	udiv	r1, r7, r4
 801015e:	9b02      	ldr	r3, [sp, #8]
 8010160:	2b07      	cmp	r3, #7
 8010162:	d80d      	bhi.n	8010180 <qsort+0x274>
 8010164:	aa16      	add	r2, sp, #88	; 0x58
 8010166:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801016a:	fbb9 f2f4 	udiv	r2, r9, r4
 801016e:	f843 6c40 	str.w	r6, [r3, #-64]
 8010172:	f843 2c3c 	str.w	r2, [r3, #-60]
 8010176:	9b02      	ldr	r3, [sp, #8]
 8010178:	3301      	adds	r3, #1
 801017a:	9302      	str	r3, [sp, #8]
 801017c:	4606      	mov	r6, r0
 801017e:	e6d6      	b.n	800ff2e <qsort+0x22>
 8010180:	4653      	mov	r3, sl
 8010182:	4622      	mov	r2, r4
 8010184:	f7ff fec2 	bl	800ff0c <qsort>
 8010188:	45a1      	cmp	r9, r4
 801018a:	d80b      	bhi.n	80101a4 <qsort+0x298>
 801018c:	9b02      	ldr	r3, [sp, #8]
 801018e:	aa16      	add	r2, sp, #88	; 0x58
 8010190:	3b01      	subs	r3, #1
 8010192:	9302      	str	r3, [sp, #8]
 8010194:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010198:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 801019c:	e7ee      	b.n	801017c <qsort+0x270>
 801019e:	45a1      	cmp	r9, r4
 80101a0:	f67f aed2 	bls.w	800ff48 <qsort+0x3c>
 80101a4:	fbb9 f1f4 	udiv	r1, r9, r4
 80101a8:	4630      	mov	r0, r6
 80101aa:	e7e7      	b.n	801017c <qsort+0x270>

080101ac <memset>:
 80101ac:	4402      	add	r2, r0
 80101ae:	4603      	mov	r3, r0
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d100      	bne.n	80101b6 <memset+0xa>
 80101b4:	4770      	bx	lr
 80101b6:	f803 1b01 	strb.w	r1, [r3], #1
 80101ba:	e7f9      	b.n	80101b0 <memset+0x4>

080101bc <_reclaim_reent>:
 80101bc:	4b29      	ldr	r3, [pc, #164]	; (8010264 <_reclaim_reent+0xa8>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4283      	cmp	r3, r0
 80101c2:	b570      	push	{r4, r5, r6, lr}
 80101c4:	4604      	mov	r4, r0
 80101c6:	d04b      	beq.n	8010260 <_reclaim_reent+0xa4>
 80101c8:	69c3      	ldr	r3, [r0, #28]
 80101ca:	b143      	cbz	r3, 80101de <_reclaim_reent+0x22>
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d144      	bne.n	801025c <_reclaim_reent+0xa0>
 80101d2:	69e3      	ldr	r3, [r4, #28]
 80101d4:	6819      	ldr	r1, [r3, #0]
 80101d6:	b111      	cbz	r1, 80101de <_reclaim_reent+0x22>
 80101d8:	4620      	mov	r0, r4
 80101da:	f000 f87f 	bl	80102dc <_free_r>
 80101de:	6961      	ldr	r1, [r4, #20]
 80101e0:	b111      	cbz	r1, 80101e8 <_reclaim_reent+0x2c>
 80101e2:	4620      	mov	r0, r4
 80101e4:	f000 f87a 	bl	80102dc <_free_r>
 80101e8:	69e1      	ldr	r1, [r4, #28]
 80101ea:	b111      	cbz	r1, 80101f2 <_reclaim_reent+0x36>
 80101ec:	4620      	mov	r0, r4
 80101ee:	f000 f875 	bl	80102dc <_free_r>
 80101f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80101f4:	b111      	cbz	r1, 80101fc <_reclaim_reent+0x40>
 80101f6:	4620      	mov	r0, r4
 80101f8:	f000 f870 	bl	80102dc <_free_r>
 80101fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101fe:	b111      	cbz	r1, 8010206 <_reclaim_reent+0x4a>
 8010200:	4620      	mov	r0, r4
 8010202:	f000 f86b 	bl	80102dc <_free_r>
 8010206:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010208:	b111      	cbz	r1, 8010210 <_reclaim_reent+0x54>
 801020a:	4620      	mov	r0, r4
 801020c:	f000 f866 	bl	80102dc <_free_r>
 8010210:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010212:	b111      	cbz	r1, 801021a <_reclaim_reent+0x5e>
 8010214:	4620      	mov	r0, r4
 8010216:	f000 f861 	bl	80102dc <_free_r>
 801021a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801021c:	b111      	cbz	r1, 8010224 <_reclaim_reent+0x68>
 801021e:	4620      	mov	r0, r4
 8010220:	f000 f85c 	bl	80102dc <_free_r>
 8010224:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010226:	b111      	cbz	r1, 801022e <_reclaim_reent+0x72>
 8010228:	4620      	mov	r0, r4
 801022a:	f000 f857 	bl	80102dc <_free_r>
 801022e:	6a23      	ldr	r3, [r4, #32]
 8010230:	b1b3      	cbz	r3, 8010260 <_reclaim_reent+0xa4>
 8010232:	4620      	mov	r0, r4
 8010234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010238:	4718      	bx	r3
 801023a:	5949      	ldr	r1, [r1, r5]
 801023c:	b941      	cbnz	r1, 8010250 <_reclaim_reent+0x94>
 801023e:	3504      	adds	r5, #4
 8010240:	69e3      	ldr	r3, [r4, #28]
 8010242:	2d80      	cmp	r5, #128	; 0x80
 8010244:	68d9      	ldr	r1, [r3, #12]
 8010246:	d1f8      	bne.n	801023a <_reclaim_reent+0x7e>
 8010248:	4620      	mov	r0, r4
 801024a:	f000 f847 	bl	80102dc <_free_r>
 801024e:	e7c0      	b.n	80101d2 <_reclaim_reent+0x16>
 8010250:	680e      	ldr	r6, [r1, #0]
 8010252:	4620      	mov	r0, r4
 8010254:	f000 f842 	bl	80102dc <_free_r>
 8010258:	4631      	mov	r1, r6
 801025a:	e7ef      	b.n	801023c <_reclaim_reent+0x80>
 801025c:	2500      	movs	r5, #0
 801025e:	e7ef      	b.n	8010240 <_reclaim_reent+0x84>
 8010260:	bd70      	pop	{r4, r5, r6, pc}
 8010262:	bf00      	nop
 8010264:	20000110 	.word	0x20000110

08010268 <__errno>:
 8010268:	4b01      	ldr	r3, [pc, #4]	; (8010270 <__errno+0x8>)
 801026a:	6818      	ldr	r0, [r3, #0]
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	20000110 	.word	0x20000110

08010274 <__libc_init_array>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	4d0d      	ldr	r5, [pc, #52]	; (80102ac <__libc_init_array+0x38>)
 8010278:	4c0d      	ldr	r4, [pc, #52]	; (80102b0 <__libc_init_array+0x3c>)
 801027a:	1b64      	subs	r4, r4, r5
 801027c:	10a4      	asrs	r4, r4, #2
 801027e:	2600      	movs	r6, #0
 8010280:	42a6      	cmp	r6, r4
 8010282:	d109      	bne.n	8010298 <__libc_init_array+0x24>
 8010284:	4d0b      	ldr	r5, [pc, #44]	; (80102b4 <__libc_init_array+0x40>)
 8010286:	4c0c      	ldr	r4, [pc, #48]	; (80102b8 <__libc_init_array+0x44>)
 8010288:	f001 faca 	bl	8011820 <_init>
 801028c:	1b64      	subs	r4, r4, r5
 801028e:	10a4      	asrs	r4, r4, #2
 8010290:	2600      	movs	r6, #0
 8010292:	42a6      	cmp	r6, r4
 8010294:	d105      	bne.n	80102a2 <__libc_init_array+0x2e>
 8010296:	bd70      	pop	{r4, r5, r6, pc}
 8010298:	f855 3b04 	ldr.w	r3, [r5], #4
 801029c:	4798      	blx	r3
 801029e:	3601      	adds	r6, #1
 80102a0:	e7ee      	b.n	8010280 <__libc_init_array+0xc>
 80102a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102a6:	4798      	blx	r3
 80102a8:	3601      	adds	r6, #1
 80102aa:	e7f2      	b.n	8010292 <__libc_init_array+0x1e>
 80102ac:	08011be8 	.word	0x08011be8
 80102b0:	08011be8 	.word	0x08011be8
 80102b4:	08011be8 	.word	0x08011be8
 80102b8:	08011bec 	.word	0x08011bec

080102bc <__retarget_lock_acquire_recursive>:
 80102bc:	4770      	bx	lr

080102be <__retarget_lock_release_recursive>:
 80102be:	4770      	bx	lr

080102c0 <memcpy>:
 80102c0:	440a      	add	r2, r1
 80102c2:	4291      	cmp	r1, r2
 80102c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80102c8:	d100      	bne.n	80102cc <memcpy+0xc>
 80102ca:	4770      	bx	lr
 80102cc:	b510      	push	{r4, lr}
 80102ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102d6:	4291      	cmp	r1, r2
 80102d8:	d1f9      	bne.n	80102ce <memcpy+0xe>
 80102da:	bd10      	pop	{r4, pc}

080102dc <_free_r>:
 80102dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102de:	2900      	cmp	r1, #0
 80102e0:	d044      	beq.n	801036c <_free_r+0x90>
 80102e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102e6:	9001      	str	r0, [sp, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f1a1 0404 	sub.w	r4, r1, #4
 80102ee:	bfb8      	it	lt
 80102f0:	18e4      	addlt	r4, r4, r3
 80102f2:	f000 f83f 	bl	8010374 <__malloc_lock>
 80102f6:	4a1e      	ldr	r2, [pc, #120]	; (8010370 <_free_r+0x94>)
 80102f8:	9801      	ldr	r0, [sp, #4]
 80102fa:	6813      	ldr	r3, [r2, #0]
 80102fc:	b933      	cbnz	r3, 801030c <_free_r+0x30>
 80102fe:	6063      	str	r3, [r4, #4]
 8010300:	6014      	str	r4, [r2, #0]
 8010302:	b003      	add	sp, #12
 8010304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010308:	f000 b83a 	b.w	8010380 <__malloc_unlock>
 801030c:	42a3      	cmp	r3, r4
 801030e:	d908      	bls.n	8010322 <_free_r+0x46>
 8010310:	6825      	ldr	r5, [r4, #0]
 8010312:	1961      	adds	r1, r4, r5
 8010314:	428b      	cmp	r3, r1
 8010316:	bf01      	itttt	eq
 8010318:	6819      	ldreq	r1, [r3, #0]
 801031a:	685b      	ldreq	r3, [r3, #4]
 801031c:	1949      	addeq	r1, r1, r5
 801031e:	6021      	streq	r1, [r4, #0]
 8010320:	e7ed      	b.n	80102fe <_free_r+0x22>
 8010322:	461a      	mov	r2, r3
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	b10b      	cbz	r3, 801032c <_free_r+0x50>
 8010328:	42a3      	cmp	r3, r4
 801032a:	d9fa      	bls.n	8010322 <_free_r+0x46>
 801032c:	6811      	ldr	r1, [r2, #0]
 801032e:	1855      	adds	r5, r2, r1
 8010330:	42a5      	cmp	r5, r4
 8010332:	d10b      	bne.n	801034c <_free_r+0x70>
 8010334:	6824      	ldr	r4, [r4, #0]
 8010336:	4421      	add	r1, r4
 8010338:	1854      	adds	r4, r2, r1
 801033a:	42a3      	cmp	r3, r4
 801033c:	6011      	str	r1, [r2, #0]
 801033e:	d1e0      	bne.n	8010302 <_free_r+0x26>
 8010340:	681c      	ldr	r4, [r3, #0]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	6053      	str	r3, [r2, #4]
 8010346:	440c      	add	r4, r1
 8010348:	6014      	str	r4, [r2, #0]
 801034a:	e7da      	b.n	8010302 <_free_r+0x26>
 801034c:	d902      	bls.n	8010354 <_free_r+0x78>
 801034e:	230c      	movs	r3, #12
 8010350:	6003      	str	r3, [r0, #0]
 8010352:	e7d6      	b.n	8010302 <_free_r+0x26>
 8010354:	6825      	ldr	r5, [r4, #0]
 8010356:	1961      	adds	r1, r4, r5
 8010358:	428b      	cmp	r3, r1
 801035a:	bf04      	itt	eq
 801035c:	6819      	ldreq	r1, [r3, #0]
 801035e:	685b      	ldreq	r3, [r3, #4]
 8010360:	6063      	str	r3, [r4, #4]
 8010362:	bf04      	itt	eq
 8010364:	1949      	addeq	r1, r1, r5
 8010366:	6021      	streq	r1, [r4, #0]
 8010368:	6054      	str	r4, [r2, #4]
 801036a:	e7ca      	b.n	8010302 <_free_r+0x26>
 801036c:	b003      	add	sp, #12
 801036e:	bd30      	pop	{r4, r5, pc}
 8010370:	20002fdc 	.word	0x20002fdc

08010374 <__malloc_lock>:
 8010374:	4801      	ldr	r0, [pc, #4]	; (801037c <__malloc_lock+0x8>)
 8010376:	f7ff bfa1 	b.w	80102bc <__retarget_lock_acquire_recursive>
 801037a:	bf00      	nop
 801037c:	20002fd8 	.word	0x20002fd8

08010380 <__malloc_unlock>:
 8010380:	4801      	ldr	r0, [pc, #4]	; (8010388 <__malloc_unlock+0x8>)
 8010382:	f7ff bf9c 	b.w	80102be <__retarget_lock_release_recursive>
 8010386:	bf00      	nop
 8010388:	20002fd8 	.word	0x20002fd8
 801038c:	00000000 	.word	0x00000000

08010390 <exp>:
 8010390:	b538      	push	{r3, r4, r5, lr}
 8010392:	ed2d 8b02 	vpush	{d8}
 8010396:	ec55 4b10 	vmov	r4, r5, d0
 801039a:	f000 fa2d 	bl	80107f8 <__ieee754_exp>
 801039e:	eeb0 8a40 	vmov.f32	s16, s0
 80103a2:	eef0 8a60 	vmov.f32	s17, s1
 80103a6:	ec45 4b10 	vmov	d0, r4, r5
 80103aa:	f000 f891 	bl	80104d0 <finite>
 80103ae:	b168      	cbz	r0, 80103cc <exp+0x3c>
 80103b0:	a317      	add	r3, pc, #92	; (adr r3, 8010410 <exp+0x80>)
 80103b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b6:	4620      	mov	r0, r4
 80103b8:	4629      	mov	r1, r5
 80103ba:	f7f0 fb55 	bl	8000a68 <__aeabi_dcmpgt>
 80103be:	b160      	cbz	r0, 80103da <exp+0x4a>
 80103c0:	f7ff ff52 	bl	8010268 <__errno>
 80103c4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010400 <exp+0x70>
 80103c8:	2322      	movs	r3, #34	; 0x22
 80103ca:	6003      	str	r3, [r0, #0]
 80103cc:	eeb0 0a48 	vmov.f32	s0, s16
 80103d0:	eef0 0a68 	vmov.f32	s1, s17
 80103d4:	ecbd 8b02 	vpop	{d8}
 80103d8:	bd38      	pop	{r3, r4, r5, pc}
 80103da:	a30f      	add	r3, pc, #60	; (adr r3, 8010418 <exp+0x88>)
 80103dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e0:	4620      	mov	r0, r4
 80103e2:	4629      	mov	r1, r5
 80103e4:	f7f0 fb22 	bl	8000a2c <__aeabi_dcmplt>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d0ef      	beq.n	80103cc <exp+0x3c>
 80103ec:	f7ff ff3c 	bl	8010268 <__errno>
 80103f0:	2322      	movs	r3, #34	; 0x22
 80103f2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010408 <exp+0x78>
 80103f6:	6003      	str	r3, [r0, #0]
 80103f8:	e7e8      	b.n	80103cc <exp+0x3c>
 80103fa:	bf00      	nop
 80103fc:	f3af 8000 	nop.w
 8010400:	00000000 	.word	0x00000000
 8010404:	7ff00000 	.word	0x7ff00000
	...
 8010410:	fefa39ef 	.word	0xfefa39ef
 8010414:	40862e42 	.word	0x40862e42
 8010418:	d52d3051 	.word	0xd52d3051
 801041c:	c0874910 	.word	0xc0874910

08010420 <sin>:
 8010420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010422:	ec53 2b10 	vmov	r2, r3, d0
 8010426:	4828      	ldr	r0, [pc, #160]	; (80104c8 <sin+0xa8>)
 8010428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801042c:	4281      	cmp	r1, r0
 801042e:	dc07      	bgt.n	8010440 <sin+0x20>
 8010430:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80104c0 <sin+0xa0>
 8010434:	2000      	movs	r0, #0
 8010436:	b005      	add	sp, #20
 8010438:	f85d eb04 	ldr.w	lr, [sp], #4
 801043c:	f000 b91c 	b.w	8010678 <__kernel_sin>
 8010440:	4822      	ldr	r0, [pc, #136]	; (80104cc <sin+0xac>)
 8010442:	4281      	cmp	r1, r0
 8010444:	dd09      	ble.n	801045a <sin+0x3a>
 8010446:	ee10 0a10 	vmov	r0, s0
 801044a:	4619      	mov	r1, r3
 801044c:	f7ef fec4 	bl	80001d8 <__aeabi_dsub>
 8010450:	ec41 0b10 	vmov	d0, r0, r1
 8010454:	b005      	add	sp, #20
 8010456:	f85d fb04 	ldr.w	pc, [sp], #4
 801045a:	4668      	mov	r0, sp
 801045c:	f000 fb50 	bl	8010b00 <__ieee754_rem_pio2>
 8010460:	f000 0003 	and.w	r0, r0, #3
 8010464:	2801      	cmp	r0, #1
 8010466:	d00c      	beq.n	8010482 <sin+0x62>
 8010468:	2802      	cmp	r0, #2
 801046a:	d011      	beq.n	8010490 <sin+0x70>
 801046c:	b9f0      	cbnz	r0, 80104ac <sin+0x8c>
 801046e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010472:	ed9d 0b00 	vldr	d0, [sp]
 8010476:	2001      	movs	r0, #1
 8010478:	f000 f8fe 	bl	8010678 <__kernel_sin>
 801047c:	ec51 0b10 	vmov	r0, r1, d0
 8010480:	e7e6      	b.n	8010450 <sin+0x30>
 8010482:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010486:	ed9d 0b00 	vldr	d0, [sp]
 801048a:	f000 f82d 	bl	80104e8 <__kernel_cos>
 801048e:	e7f5      	b.n	801047c <sin+0x5c>
 8010490:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010494:	ed9d 0b00 	vldr	d0, [sp]
 8010498:	2001      	movs	r0, #1
 801049a:	f000 f8ed 	bl	8010678 <__kernel_sin>
 801049e:	ec53 2b10 	vmov	r2, r3, d0
 80104a2:	ee10 0a10 	vmov	r0, s0
 80104a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80104aa:	e7d1      	b.n	8010450 <sin+0x30>
 80104ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104b0:	ed9d 0b00 	vldr	d0, [sp]
 80104b4:	f000 f818 	bl	80104e8 <__kernel_cos>
 80104b8:	e7f1      	b.n	801049e <sin+0x7e>
 80104ba:	bf00      	nop
 80104bc:	f3af 8000 	nop.w
	...
 80104c8:	3fe921fb 	.word	0x3fe921fb
 80104cc:	7fefffff 	.word	0x7fefffff

080104d0 <finite>:
 80104d0:	b082      	sub	sp, #8
 80104d2:	ed8d 0b00 	vstr	d0, [sp]
 80104d6:	9801      	ldr	r0, [sp, #4]
 80104d8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104e0:	0fc0      	lsrs	r0, r0, #31
 80104e2:	b002      	add	sp, #8
 80104e4:	4770      	bx	lr
	...

080104e8 <__kernel_cos>:
 80104e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ec:	ec57 6b10 	vmov	r6, r7, d0
 80104f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80104f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80104f8:	ed8d 1b00 	vstr	d1, [sp]
 80104fc:	da07      	bge.n	801050e <__kernel_cos+0x26>
 80104fe:	ee10 0a10 	vmov	r0, s0
 8010502:	4639      	mov	r1, r7
 8010504:	f7f0 faba 	bl	8000a7c <__aeabi_d2iz>
 8010508:	2800      	cmp	r0, #0
 801050a:	f000 8088 	beq.w	801061e <__kernel_cos+0x136>
 801050e:	4632      	mov	r2, r6
 8010510:	463b      	mov	r3, r7
 8010512:	4630      	mov	r0, r6
 8010514:	4639      	mov	r1, r7
 8010516:	f7f0 f817 	bl	8000548 <__aeabi_dmul>
 801051a:	4b51      	ldr	r3, [pc, #324]	; (8010660 <__kernel_cos+0x178>)
 801051c:	2200      	movs	r2, #0
 801051e:	4604      	mov	r4, r0
 8010520:	460d      	mov	r5, r1
 8010522:	f7f0 f811 	bl	8000548 <__aeabi_dmul>
 8010526:	a340      	add	r3, pc, #256	; (adr r3, 8010628 <__kernel_cos+0x140>)
 8010528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052c:	4682      	mov	sl, r0
 801052e:	468b      	mov	fp, r1
 8010530:	4620      	mov	r0, r4
 8010532:	4629      	mov	r1, r5
 8010534:	f7f0 f808 	bl	8000548 <__aeabi_dmul>
 8010538:	a33d      	add	r3, pc, #244	; (adr r3, 8010630 <__kernel_cos+0x148>)
 801053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053e:	f7ef fe4d 	bl	80001dc <__adddf3>
 8010542:	4622      	mov	r2, r4
 8010544:	462b      	mov	r3, r5
 8010546:	f7ef ffff 	bl	8000548 <__aeabi_dmul>
 801054a:	a33b      	add	r3, pc, #236	; (adr r3, 8010638 <__kernel_cos+0x150>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	f7ef fe42 	bl	80001d8 <__aeabi_dsub>
 8010554:	4622      	mov	r2, r4
 8010556:	462b      	mov	r3, r5
 8010558:	f7ef fff6 	bl	8000548 <__aeabi_dmul>
 801055c:	a338      	add	r3, pc, #224	; (adr r3, 8010640 <__kernel_cos+0x158>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef fe3b 	bl	80001dc <__adddf3>
 8010566:	4622      	mov	r2, r4
 8010568:	462b      	mov	r3, r5
 801056a:	f7ef ffed 	bl	8000548 <__aeabi_dmul>
 801056e:	a336      	add	r3, pc, #216	; (adr r3, 8010648 <__kernel_cos+0x160>)
 8010570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010574:	f7ef fe30 	bl	80001d8 <__aeabi_dsub>
 8010578:	4622      	mov	r2, r4
 801057a:	462b      	mov	r3, r5
 801057c:	f7ef ffe4 	bl	8000548 <__aeabi_dmul>
 8010580:	a333      	add	r3, pc, #204	; (adr r3, 8010650 <__kernel_cos+0x168>)
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	f7ef fe29 	bl	80001dc <__adddf3>
 801058a:	4622      	mov	r2, r4
 801058c:	462b      	mov	r3, r5
 801058e:	f7ef ffdb 	bl	8000548 <__aeabi_dmul>
 8010592:	4622      	mov	r2, r4
 8010594:	462b      	mov	r3, r5
 8010596:	f7ef ffd7 	bl	8000548 <__aeabi_dmul>
 801059a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801059e:	4604      	mov	r4, r0
 80105a0:	460d      	mov	r5, r1
 80105a2:	4630      	mov	r0, r6
 80105a4:	4639      	mov	r1, r7
 80105a6:	f7ef ffcf 	bl	8000548 <__aeabi_dmul>
 80105aa:	460b      	mov	r3, r1
 80105ac:	4602      	mov	r2, r0
 80105ae:	4629      	mov	r1, r5
 80105b0:	4620      	mov	r0, r4
 80105b2:	f7ef fe11 	bl	80001d8 <__aeabi_dsub>
 80105b6:	4b2b      	ldr	r3, [pc, #172]	; (8010664 <__kernel_cos+0x17c>)
 80105b8:	4598      	cmp	r8, r3
 80105ba:	4606      	mov	r6, r0
 80105bc:	460f      	mov	r7, r1
 80105be:	dc10      	bgt.n	80105e2 <__kernel_cos+0xfa>
 80105c0:	4602      	mov	r2, r0
 80105c2:	460b      	mov	r3, r1
 80105c4:	4650      	mov	r0, sl
 80105c6:	4659      	mov	r1, fp
 80105c8:	f7ef fe06 	bl	80001d8 <__aeabi_dsub>
 80105cc:	460b      	mov	r3, r1
 80105ce:	4926      	ldr	r1, [pc, #152]	; (8010668 <__kernel_cos+0x180>)
 80105d0:	4602      	mov	r2, r0
 80105d2:	2000      	movs	r0, #0
 80105d4:	f7ef fe00 	bl	80001d8 <__aeabi_dsub>
 80105d8:	ec41 0b10 	vmov	d0, r0, r1
 80105dc:	b003      	add	sp, #12
 80105de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e2:	4b22      	ldr	r3, [pc, #136]	; (801066c <__kernel_cos+0x184>)
 80105e4:	4920      	ldr	r1, [pc, #128]	; (8010668 <__kernel_cos+0x180>)
 80105e6:	4598      	cmp	r8, r3
 80105e8:	bfcc      	ite	gt
 80105ea:	4d21      	ldrgt	r5, [pc, #132]	; (8010670 <__kernel_cos+0x188>)
 80105ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80105f0:	2400      	movs	r4, #0
 80105f2:	4622      	mov	r2, r4
 80105f4:	462b      	mov	r3, r5
 80105f6:	2000      	movs	r0, #0
 80105f8:	f7ef fdee 	bl	80001d8 <__aeabi_dsub>
 80105fc:	4622      	mov	r2, r4
 80105fe:	4680      	mov	r8, r0
 8010600:	4689      	mov	r9, r1
 8010602:	462b      	mov	r3, r5
 8010604:	4650      	mov	r0, sl
 8010606:	4659      	mov	r1, fp
 8010608:	f7ef fde6 	bl	80001d8 <__aeabi_dsub>
 801060c:	4632      	mov	r2, r6
 801060e:	463b      	mov	r3, r7
 8010610:	f7ef fde2 	bl	80001d8 <__aeabi_dsub>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4640      	mov	r0, r8
 801061a:	4649      	mov	r1, r9
 801061c:	e7da      	b.n	80105d4 <__kernel_cos+0xec>
 801061e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010658 <__kernel_cos+0x170>
 8010622:	e7db      	b.n	80105dc <__kernel_cos+0xf4>
 8010624:	f3af 8000 	nop.w
 8010628:	be8838d4 	.word	0xbe8838d4
 801062c:	bda8fae9 	.word	0xbda8fae9
 8010630:	bdb4b1c4 	.word	0xbdb4b1c4
 8010634:	3e21ee9e 	.word	0x3e21ee9e
 8010638:	809c52ad 	.word	0x809c52ad
 801063c:	3e927e4f 	.word	0x3e927e4f
 8010640:	19cb1590 	.word	0x19cb1590
 8010644:	3efa01a0 	.word	0x3efa01a0
 8010648:	16c15177 	.word	0x16c15177
 801064c:	3f56c16c 	.word	0x3f56c16c
 8010650:	5555554c 	.word	0x5555554c
 8010654:	3fa55555 	.word	0x3fa55555
 8010658:	00000000 	.word	0x00000000
 801065c:	3ff00000 	.word	0x3ff00000
 8010660:	3fe00000 	.word	0x3fe00000
 8010664:	3fd33332 	.word	0x3fd33332
 8010668:	3ff00000 	.word	0x3ff00000
 801066c:	3fe90000 	.word	0x3fe90000
 8010670:	3fd20000 	.word	0x3fd20000
 8010674:	00000000 	.word	0x00000000

08010678 <__kernel_sin>:
 8010678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067c:	ed2d 8b04 	vpush	{d8-d9}
 8010680:	eeb0 8a41 	vmov.f32	s16, s2
 8010684:	eef0 8a61 	vmov.f32	s17, s3
 8010688:	ec55 4b10 	vmov	r4, r5, d0
 801068c:	b083      	sub	sp, #12
 801068e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010692:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010696:	9001      	str	r0, [sp, #4]
 8010698:	da06      	bge.n	80106a8 <__kernel_sin+0x30>
 801069a:	ee10 0a10 	vmov	r0, s0
 801069e:	4629      	mov	r1, r5
 80106a0:	f7f0 f9ec 	bl	8000a7c <__aeabi_d2iz>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d051      	beq.n	801074c <__kernel_sin+0xd4>
 80106a8:	4622      	mov	r2, r4
 80106aa:	462b      	mov	r3, r5
 80106ac:	4620      	mov	r0, r4
 80106ae:	4629      	mov	r1, r5
 80106b0:	f7ef ff4a 	bl	8000548 <__aeabi_dmul>
 80106b4:	4682      	mov	sl, r0
 80106b6:	468b      	mov	fp, r1
 80106b8:	4602      	mov	r2, r0
 80106ba:	460b      	mov	r3, r1
 80106bc:	4620      	mov	r0, r4
 80106be:	4629      	mov	r1, r5
 80106c0:	f7ef ff42 	bl	8000548 <__aeabi_dmul>
 80106c4:	a341      	add	r3, pc, #260	; (adr r3, 80107cc <__kernel_sin+0x154>)
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	4680      	mov	r8, r0
 80106cc:	4689      	mov	r9, r1
 80106ce:	4650      	mov	r0, sl
 80106d0:	4659      	mov	r1, fp
 80106d2:	f7ef ff39 	bl	8000548 <__aeabi_dmul>
 80106d6:	a33f      	add	r3, pc, #252	; (adr r3, 80107d4 <__kernel_sin+0x15c>)
 80106d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106dc:	f7ef fd7c 	bl	80001d8 <__aeabi_dsub>
 80106e0:	4652      	mov	r2, sl
 80106e2:	465b      	mov	r3, fp
 80106e4:	f7ef ff30 	bl	8000548 <__aeabi_dmul>
 80106e8:	a33c      	add	r3, pc, #240	; (adr r3, 80107dc <__kernel_sin+0x164>)
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	f7ef fd75 	bl	80001dc <__adddf3>
 80106f2:	4652      	mov	r2, sl
 80106f4:	465b      	mov	r3, fp
 80106f6:	f7ef ff27 	bl	8000548 <__aeabi_dmul>
 80106fa:	a33a      	add	r3, pc, #232	; (adr r3, 80107e4 <__kernel_sin+0x16c>)
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	f7ef fd6a 	bl	80001d8 <__aeabi_dsub>
 8010704:	4652      	mov	r2, sl
 8010706:	465b      	mov	r3, fp
 8010708:	f7ef ff1e 	bl	8000548 <__aeabi_dmul>
 801070c:	a337      	add	r3, pc, #220	; (adr r3, 80107ec <__kernel_sin+0x174>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	f7ef fd63 	bl	80001dc <__adddf3>
 8010716:	9b01      	ldr	r3, [sp, #4]
 8010718:	4606      	mov	r6, r0
 801071a:	460f      	mov	r7, r1
 801071c:	b9eb      	cbnz	r3, 801075a <__kernel_sin+0xe2>
 801071e:	4602      	mov	r2, r0
 8010720:	460b      	mov	r3, r1
 8010722:	4650      	mov	r0, sl
 8010724:	4659      	mov	r1, fp
 8010726:	f7ef ff0f 	bl	8000548 <__aeabi_dmul>
 801072a:	a325      	add	r3, pc, #148	; (adr r3, 80107c0 <__kernel_sin+0x148>)
 801072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010730:	f7ef fd52 	bl	80001d8 <__aeabi_dsub>
 8010734:	4642      	mov	r2, r8
 8010736:	464b      	mov	r3, r9
 8010738:	f7ef ff06 	bl	8000548 <__aeabi_dmul>
 801073c:	4602      	mov	r2, r0
 801073e:	460b      	mov	r3, r1
 8010740:	4620      	mov	r0, r4
 8010742:	4629      	mov	r1, r5
 8010744:	f7ef fd4a 	bl	80001dc <__adddf3>
 8010748:	4604      	mov	r4, r0
 801074a:	460d      	mov	r5, r1
 801074c:	ec45 4b10 	vmov	d0, r4, r5
 8010750:	b003      	add	sp, #12
 8010752:	ecbd 8b04 	vpop	{d8-d9}
 8010756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075a:	4b1b      	ldr	r3, [pc, #108]	; (80107c8 <__kernel_sin+0x150>)
 801075c:	ec51 0b18 	vmov	r0, r1, d8
 8010760:	2200      	movs	r2, #0
 8010762:	f7ef fef1 	bl	8000548 <__aeabi_dmul>
 8010766:	4632      	mov	r2, r6
 8010768:	ec41 0b19 	vmov	d9, r0, r1
 801076c:	463b      	mov	r3, r7
 801076e:	4640      	mov	r0, r8
 8010770:	4649      	mov	r1, r9
 8010772:	f7ef fee9 	bl	8000548 <__aeabi_dmul>
 8010776:	4602      	mov	r2, r0
 8010778:	460b      	mov	r3, r1
 801077a:	ec51 0b19 	vmov	r0, r1, d9
 801077e:	f7ef fd2b 	bl	80001d8 <__aeabi_dsub>
 8010782:	4652      	mov	r2, sl
 8010784:	465b      	mov	r3, fp
 8010786:	f7ef fedf 	bl	8000548 <__aeabi_dmul>
 801078a:	ec53 2b18 	vmov	r2, r3, d8
 801078e:	f7ef fd23 	bl	80001d8 <__aeabi_dsub>
 8010792:	a30b      	add	r3, pc, #44	; (adr r3, 80107c0 <__kernel_sin+0x148>)
 8010794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010798:	4606      	mov	r6, r0
 801079a:	460f      	mov	r7, r1
 801079c:	4640      	mov	r0, r8
 801079e:	4649      	mov	r1, r9
 80107a0:	f7ef fed2 	bl	8000548 <__aeabi_dmul>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	4630      	mov	r0, r6
 80107aa:	4639      	mov	r1, r7
 80107ac:	f7ef fd16 	bl	80001dc <__adddf3>
 80107b0:	4602      	mov	r2, r0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4620      	mov	r0, r4
 80107b6:	4629      	mov	r1, r5
 80107b8:	f7ef fd0e 	bl	80001d8 <__aeabi_dsub>
 80107bc:	e7c4      	b.n	8010748 <__kernel_sin+0xd0>
 80107be:	bf00      	nop
 80107c0:	55555549 	.word	0x55555549
 80107c4:	3fc55555 	.word	0x3fc55555
 80107c8:	3fe00000 	.word	0x3fe00000
 80107cc:	5acfd57c 	.word	0x5acfd57c
 80107d0:	3de5d93a 	.word	0x3de5d93a
 80107d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80107d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80107dc:	57b1fe7d 	.word	0x57b1fe7d
 80107e0:	3ec71de3 	.word	0x3ec71de3
 80107e4:	19c161d5 	.word	0x19c161d5
 80107e8:	3f2a01a0 	.word	0x3f2a01a0
 80107ec:	1110f8a6 	.word	0x1110f8a6
 80107f0:	3f811111 	.word	0x3f811111
 80107f4:	00000000 	.word	0x00000000

080107f8 <__ieee754_exp>:
 80107f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107fc:	ec55 4b10 	vmov	r4, r5, d0
 8010800:	49b5      	ldr	r1, [pc, #724]	; (8010ad8 <__ieee754_exp+0x2e0>)
 8010802:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010806:	428a      	cmp	r2, r1
 8010808:	ed2d 8b04 	vpush	{d8-d9}
 801080c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010810:	d93b      	bls.n	801088a <__ieee754_exp+0x92>
 8010812:	49b2      	ldr	r1, [pc, #712]	; (8010adc <__ieee754_exp+0x2e4>)
 8010814:	428a      	cmp	r2, r1
 8010816:	d916      	bls.n	8010846 <__ieee754_exp+0x4e>
 8010818:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801081c:	4323      	orrs	r3, r4
 801081e:	ee10 2a10 	vmov	r2, s0
 8010822:	d007      	beq.n	8010834 <__ieee754_exp+0x3c>
 8010824:	462b      	mov	r3, r5
 8010826:	4620      	mov	r0, r4
 8010828:	4629      	mov	r1, r5
 801082a:	f7ef fcd7 	bl	80001dc <__adddf3>
 801082e:	4604      	mov	r4, r0
 8010830:	460d      	mov	r5, r1
 8010832:	e002      	b.n	801083a <__ieee754_exp+0x42>
 8010834:	b10e      	cbz	r6, 801083a <__ieee754_exp+0x42>
 8010836:	2400      	movs	r4, #0
 8010838:	2500      	movs	r5, #0
 801083a:	ecbd 8b04 	vpop	{d8-d9}
 801083e:	ec45 4b10 	vmov	d0, r4, r5
 8010842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010846:	a38e      	add	r3, pc, #568	; (adr r3, 8010a80 <__ieee754_exp+0x288>)
 8010848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084c:	ee10 0a10 	vmov	r0, s0
 8010850:	4629      	mov	r1, r5
 8010852:	f7f0 f909 	bl	8000a68 <__aeabi_dcmpgt>
 8010856:	4607      	mov	r7, r0
 8010858:	b130      	cbz	r0, 8010868 <__ieee754_exp+0x70>
 801085a:	ecbd 8b04 	vpop	{d8-d9}
 801085e:	2000      	movs	r0, #0
 8010860:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010864:	f000 bb82 	b.w	8010f6c <__math_oflow>
 8010868:	a387      	add	r3, pc, #540	; (adr r3, 8010a88 <__ieee754_exp+0x290>)
 801086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086e:	4620      	mov	r0, r4
 8010870:	4629      	mov	r1, r5
 8010872:	f7f0 f8db 	bl	8000a2c <__aeabi_dcmplt>
 8010876:	2800      	cmp	r0, #0
 8010878:	f000 808b 	beq.w	8010992 <__ieee754_exp+0x19a>
 801087c:	ecbd 8b04 	vpop	{d8-d9}
 8010880:	4638      	mov	r0, r7
 8010882:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010886:	f000 bb68 	b.w	8010f5a <__math_uflow>
 801088a:	4b95      	ldr	r3, [pc, #596]	; (8010ae0 <__ieee754_exp+0x2e8>)
 801088c:	429a      	cmp	r2, r3
 801088e:	f240 80ac 	bls.w	80109ea <__ieee754_exp+0x1f2>
 8010892:	4b94      	ldr	r3, [pc, #592]	; (8010ae4 <__ieee754_exp+0x2ec>)
 8010894:	429a      	cmp	r2, r3
 8010896:	d87c      	bhi.n	8010992 <__ieee754_exp+0x19a>
 8010898:	4b93      	ldr	r3, [pc, #588]	; (8010ae8 <__ieee754_exp+0x2f0>)
 801089a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	ee10 0a10 	vmov	r0, s0
 80108a6:	4629      	mov	r1, r5
 80108a8:	f7ef fc96 	bl	80001d8 <__aeabi_dsub>
 80108ac:	4b8f      	ldr	r3, [pc, #572]	; (8010aec <__ieee754_exp+0x2f4>)
 80108ae:	00f7      	lsls	r7, r6, #3
 80108b0:	443b      	add	r3, r7
 80108b2:	ed93 7b00 	vldr	d7, [r3]
 80108b6:	f1c6 0a01 	rsb	sl, r6, #1
 80108ba:	4680      	mov	r8, r0
 80108bc:	4689      	mov	r9, r1
 80108be:	ebaa 0a06 	sub.w	sl, sl, r6
 80108c2:	eeb0 8a47 	vmov.f32	s16, s14
 80108c6:	eef0 8a67 	vmov.f32	s17, s15
 80108ca:	ec53 2b18 	vmov	r2, r3, d8
 80108ce:	4640      	mov	r0, r8
 80108d0:	4649      	mov	r1, r9
 80108d2:	f7ef fc81 	bl	80001d8 <__aeabi_dsub>
 80108d6:	4604      	mov	r4, r0
 80108d8:	460d      	mov	r5, r1
 80108da:	4622      	mov	r2, r4
 80108dc:	462b      	mov	r3, r5
 80108de:	4620      	mov	r0, r4
 80108e0:	4629      	mov	r1, r5
 80108e2:	f7ef fe31 	bl	8000548 <__aeabi_dmul>
 80108e6:	a36a      	add	r3, pc, #424	; (adr r3, 8010a90 <__ieee754_exp+0x298>)
 80108e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ec:	4606      	mov	r6, r0
 80108ee:	460f      	mov	r7, r1
 80108f0:	f7ef fe2a 	bl	8000548 <__aeabi_dmul>
 80108f4:	a368      	add	r3, pc, #416	; (adr r3, 8010a98 <__ieee754_exp+0x2a0>)
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f7ef fc6d 	bl	80001d8 <__aeabi_dsub>
 80108fe:	4632      	mov	r2, r6
 8010900:	463b      	mov	r3, r7
 8010902:	f7ef fe21 	bl	8000548 <__aeabi_dmul>
 8010906:	a366      	add	r3, pc, #408	; (adr r3, 8010aa0 <__ieee754_exp+0x2a8>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7ef fc66 	bl	80001dc <__adddf3>
 8010910:	4632      	mov	r2, r6
 8010912:	463b      	mov	r3, r7
 8010914:	f7ef fe18 	bl	8000548 <__aeabi_dmul>
 8010918:	a363      	add	r3, pc, #396	; (adr r3, 8010aa8 <__ieee754_exp+0x2b0>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	f7ef fc5b 	bl	80001d8 <__aeabi_dsub>
 8010922:	4632      	mov	r2, r6
 8010924:	463b      	mov	r3, r7
 8010926:	f7ef fe0f 	bl	8000548 <__aeabi_dmul>
 801092a:	a361      	add	r3, pc, #388	; (adr r3, 8010ab0 <__ieee754_exp+0x2b8>)
 801092c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010930:	f7ef fc54 	bl	80001dc <__adddf3>
 8010934:	4632      	mov	r2, r6
 8010936:	463b      	mov	r3, r7
 8010938:	f7ef fe06 	bl	8000548 <__aeabi_dmul>
 801093c:	4602      	mov	r2, r0
 801093e:	460b      	mov	r3, r1
 8010940:	4620      	mov	r0, r4
 8010942:	4629      	mov	r1, r5
 8010944:	f7ef fc48 	bl	80001d8 <__aeabi_dsub>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	4606      	mov	r6, r0
 801094e:	460f      	mov	r7, r1
 8010950:	4620      	mov	r0, r4
 8010952:	4629      	mov	r1, r5
 8010954:	f7ef fdf8 	bl	8000548 <__aeabi_dmul>
 8010958:	ec41 0b19 	vmov	d9, r0, r1
 801095c:	f1ba 0f00 	cmp.w	sl, #0
 8010960:	d15d      	bne.n	8010a1e <__ieee754_exp+0x226>
 8010962:	2200      	movs	r2, #0
 8010964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010968:	4630      	mov	r0, r6
 801096a:	4639      	mov	r1, r7
 801096c:	f7ef fc34 	bl	80001d8 <__aeabi_dsub>
 8010970:	4602      	mov	r2, r0
 8010972:	460b      	mov	r3, r1
 8010974:	ec51 0b19 	vmov	r0, r1, d9
 8010978:	f7ef ff10 	bl	800079c <__aeabi_ddiv>
 801097c:	4622      	mov	r2, r4
 801097e:	462b      	mov	r3, r5
 8010980:	f7ef fc2a 	bl	80001d8 <__aeabi_dsub>
 8010984:	4602      	mov	r2, r0
 8010986:	460b      	mov	r3, r1
 8010988:	2000      	movs	r0, #0
 801098a:	4959      	ldr	r1, [pc, #356]	; (8010af0 <__ieee754_exp+0x2f8>)
 801098c:	f7ef fc24 	bl	80001d8 <__aeabi_dsub>
 8010990:	e74d      	b.n	801082e <__ieee754_exp+0x36>
 8010992:	4b58      	ldr	r3, [pc, #352]	; (8010af4 <__ieee754_exp+0x2fc>)
 8010994:	4620      	mov	r0, r4
 8010996:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801099a:	4629      	mov	r1, r5
 801099c:	a346      	add	r3, pc, #280	; (adr r3, 8010ab8 <__ieee754_exp+0x2c0>)
 801099e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a2:	f7ef fdd1 	bl	8000548 <__aeabi_dmul>
 80109a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80109aa:	f7ef fc17 	bl	80001dc <__adddf3>
 80109ae:	f7f0 f865 	bl	8000a7c <__aeabi_d2iz>
 80109b2:	4682      	mov	sl, r0
 80109b4:	f7ef fd5e 	bl	8000474 <__aeabi_i2d>
 80109b8:	a341      	add	r3, pc, #260	; (adr r3, 8010ac0 <__ieee754_exp+0x2c8>)
 80109ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109be:	4606      	mov	r6, r0
 80109c0:	460f      	mov	r7, r1
 80109c2:	f7ef fdc1 	bl	8000548 <__aeabi_dmul>
 80109c6:	4602      	mov	r2, r0
 80109c8:	460b      	mov	r3, r1
 80109ca:	4620      	mov	r0, r4
 80109cc:	4629      	mov	r1, r5
 80109ce:	f7ef fc03 	bl	80001d8 <__aeabi_dsub>
 80109d2:	a33d      	add	r3, pc, #244	; (adr r3, 8010ac8 <__ieee754_exp+0x2d0>)
 80109d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d8:	4680      	mov	r8, r0
 80109da:	4689      	mov	r9, r1
 80109dc:	4630      	mov	r0, r6
 80109de:	4639      	mov	r1, r7
 80109e0:	f7ef fdb2 	bl	8000548 <__aeabi_dmul>
 80109e4:	ec41 0b18 	vmov	d8, r0, r1
 80109e8:	e76f      	b.n	80108ca <__ieee754_exp+0xd2>
 80109ea:	4b43      	ldr	r3, [pc, #268]	; (8010af8 <__ieee754_exp+0x300>)
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d811      	bhi.n	8010a14 <__ieee754_exp+0x21c>
 80109f0:	a337      	add	r3, pc, #220	; (adr r3, 8010ad0 <__ieee754_exp+0x2d8>)
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	ee10 0a10 	vmov	r0, s0
 80109fa:	4629      	mov	r1, r5
 80109fc:	f7ef fbee 	bl	80001dc <__adddf3>
 8010a00:	4b3b      	ldr	r3, [pc, #236]	; (8010af0 <__ieee754_exp+0x2f8>)
 8010a02:	2200      	movs	r2, #0
 8010a04:	f7f0 f830 	bl	8000a68 <__aeabi_dcmpgt>
 8010a08:	b138      	cbz	r0, 8010a1a <__ieee754_exp+0x222>
 8010a0a:	4b39      	ldr	r3, [pc, #228]	; (8010af0 <__ieee754_exp+0x2f8>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	4620      	mov	r0, r4
 8010a10:	4629      	mov	r1, r5
 8010a12:	e70a      	b.n	801082a <__ieee754_exp+0x32>
 8010a14:	f04f 0a00 	mov.w	sl, #0
 8010a18:	e75f      	b.n	80108da <__ieee754_exp+0xe2>
 8010a1a:	4682      	mov	sl, r0
 8010a1c:	e75d      	b.n	80108da <__ieee754_exp+0xe2>
 8010a1e:	4632      	mov	r2, r6
 8010a20:	463b      	mov	r3, r7
 8010a22:	2000      	movs	r0, #0
 8010a24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010a28:	f7ef fbd6 	bl	80001d8 <__aeabi_dsub>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	ec51 0b19 	vmov	r0, r1, d9
 8010a34:	f7ef feb2 	bl	800079c <__aeabi_ddiv>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	ec51 0b18 	vmov	r0, r1, d8
 8010a40:	f7ef fbca 	bl	80001d8 <__aeabi_dsub>
 8010a44:	4642      	mov	r2, r8
 8010a46:	464b      	mov	r3, r9
 8010a48:	f7ef fbc6 	bl	80001d8 <__aeabi_dsub>
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	460b      	mov	r3, r1
 8010a50:	2000      	movs	r0, #0
 8010a52:	4927      	ldr	r1, [pc, #156]	; (8010af0 <__ieee754_exp+0x2f8>)
 8010a54:	f7ef fbc0 	bl	80001d8 <__aeabi_dsub>
 8010a58:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8010a5c:	4592      	cmp	sl, r2
 8010a5e:	db02      	blt.n	8010a66 <__ieee754_exp+0x26e>
 8010a60:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010a64:	e6e3      	b.n	801082e <__ieee754_exp+0x36>
 8010a66:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8010a6a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010a74:	f7ef fd68 	bl	8000548 <__aeabi_dmul>
 8010a78:	e6d9      	b.n	801082e <__ieee754_exp+0x36>
 8010a7a:	bf00      	nop
 8010a7c:	f3af 8000 	nop.w
 8010a80:	fefa39ef 	.word	0xfefa39ef
 8010a84:	40862e42 	.word	0x40862e42
 8010a88:	d52d3051 	.word	0xd52d3051
 8010a8c:	c0874910 	.word	0xc0874910
 8010a90:	72bea4d0 	.word	0x72bea4d0
 8010a94:	3e663769 	.word	0x3e663769
 8010a98:	c5d26bf1 	.word	0xc5d26bf1
 8010a9c:	3ebbbd41 	.word	0x3ebbbd41
 8010aa0:	af25de2c 	.word	0xaf25de2c
 8010aa4:	3f11566a 	.word	0x3f11566a
 8010aa8:	16bebd93 	.word	0x16bebd93
 8010aac:	3f66c16c 	.word	0x3f66c16c
 8010ab0:	5555553e 	.word	0x5555553e
 8010ab4:	3fc55555 	.word	0x3fc55555
 8010ab8:	652b82fe 	.word	0x652b82fe
 8010abc:	3ff71547 	.word	0x3ff71547
 8010ac0:	fee00000 	.word	0xfee00000
 8010ac4:	3fe62e42 	.word	0x3fe62e42
 8010ac8:	35793c76 	.word	0x35793c76
 8010acc:	3dea39ef 	.word	0x3dea39ef
 8010ad0:	8800759c 	.word	0x8800759c
 8010ad4:	7e37e43c 	.word	0x7e37e43c
 8010ad8:	40862e41 	.word	0x40862e41
 8010adc:	7fefffff 	.word	0x7fefffff
 8010ae0:	3fd62e42 	.word	0x3fd62e42
 8010ae4:	3ff0a2b1 	.word	0x3ff0a2b1
 8010ae8:	080119e8 	.word	0x080119e8
 8010aec:	080119f8 	.word	0x080119f8
 8010af0:	3ff00000 	.word	0x3ff00000
 8010af4:	080119d8 	.word	0x080119d8
 8010af8:	3defffff 	.word	0x3defffff
 8010afc:	00000000 	.word	0x00000000

08010b00 <__ieee754_rem_pio2>:
 8010b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b04:	ed2d 8b02 	vpush	{d8}
 8010b08:	ec55 4b10 	vmov	r4, r5, d0
 8010b0c:	4bca      	ldr	r3, [pc, #808]	; (8010e38 <__ieee754_rem_pio2+0x338>)
 8010b0e:	b08b      	sub	sp, #44	; 0x2c
 8010b10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010b14:	4598      	cmp	r8, r3
 8010b16:	4682      	mov	sl, r0
 8010b18:	9502      	str	r5, [sp, #8]
 8010b1a:	dc08      	bgt.n	8010b2e <__ieee754_rem_pio2+0x2e>
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	2300      	movs	r3, #0
 8010b20:	ed80 0b00 	vstr	d0, [r0]
 8010b24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010b28:	f04f 0b00 	mov.w	fp, #0
 8010b2c:	e028      	b.n	8010b80 <__ieee754_rem_pio2+0x80>
 8010b2e:	4bc3      	ldr	r3, [pc, #780]	; (8010e3c <__ieee754_rem_pio2+0x33c>)
 8010b30:	4598      	cmp	r8, r3
 8010b32:	dc78      	bgt.n	8010c26 <__ieee754_rem_pio2+0x126>
 8010b34:	9b02      	ldr	r3, [sp, #8]
 8010b36:	4ec2      	ldr	r6, [pc, #776]	; (8010e40 <__ieee754_rem_pio2+0x340>)
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	ee10 0a10 	vmov	r0, s0
 8010b3e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010e00 <__ieee754_rem_pio2+0x300>)
 8010b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b44:	4629      	mov	r1, r5
 8010b46:	dd39      	ble.n	8010bbc <__ieee754_rem_pio2+0xbc>
 8010b48:	f7ef fb46 	bl	80001d8 <__aeabi_dsub>
 8010b4c:	45b0      	cmp	r8, r6
 8010b4e:	4604      	mov	r4, r0
 8010b50:	460d      	mov	r5, r1
 8010b52:	d01b      	beq.n	8010b8c <__ieee754_rem_pio2+0x8c>
 8010b54:	a3ac      	add	r3, pc, #688	; (adr r3, 8010e08 <__ieee754_rem_pio2+0x308>)
 8010b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5a:	f7ef fb3d 	bl	80001d8 <__aeabi_dsub>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	460b      	mov	r3, r1
 8010b62:	e9ca 2300 	strd	r2, r3, [sl]
 8010b66:	4620      	mov	r0, r4
 8010b68:	4629      	mov	r1, r5
 8010b6a:	f7ef fb35 	bl	80001d8 <__aeabi_dsub>
 8010b6e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010e08 <__ieee754_rem_pio2+0x308>)
 8010b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b74:	f7ef fb30 	bl	80001d8 <__aeabi_dsub>
 8010b78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010b7c:	f04f 0b01 	mov.w	fp, #1
 8010b80:	4658      	mov	r0, fp
 8010b82:	b00b      	add	sp, #44	; 0x2c
 8010b84:	ecbd 8b02 	vpop	{d8}
 8010b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8c:	a3a0      	add	r3, pc, #640	; (adr r3, 8010e10 <__ieee754_rem_pio2+0x310>)
 8010b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b92:	f7ef fb21 	bl	80001d8 <__aeabi_dsub>
 8010b96:	a3a0      	add	r3, pc, #640	; (adr r3, 8010e18 <__ieee754_rem_pio2+0x318>)
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	460d      	mov	r5, r1
 8010ba0:	f7ef fb1a 	bl	80001d8 <__aeabi_dsub>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	e9ca 2300 	strd	r2, r3, [sl]
 8010bac:	4620      	mov	r0, r4
 8010bae:	4629      	mov	r1, r5
 8010bb0:	f7ef fb12 	bl	80001d8 <__aeabi_dsub>
 8010bb4:	a398      	add	r3, pc, #608	; (adr r3, 8010e18 <__ieee754_rem_pio2+0x318>)
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	e7db      	b.n	8010b74 <__ieee754_rem_pio2+0x74>
 8010bbc:	f7ef fb0e 	bl	80001dc <__adddf3>
 8010bc0:	45b0      	cmp	r8, r6
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	460d      	mov	r5, r1
 8010bc6:	d016      	beq.n	8010bf6 <__ieee754_rem_pio2+0xf6>
 8010bc8:	a38f      	add	r3, pc, #572	; (adr r3, 8010e08 <__ieee754_rem_pio2+0x308>)
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fb05 	bl	80001dc <__adddf3>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	e9ca 2300 	strd	r2, r3, [sl]
 8010bda:	4620      	mov	r0, r4
 8010bdc:	4629      	mov	r1, r5
 8010bde:	f7ef fafb 	bl	80001d8 <__aeabi_dsub>
 8010be2:	a389      	add	r3, pc, #548	; (adr r3, 8010e08 <__ieee754_rem_pio2+0x308>)
 8010be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be8:	f7ef faf8 	bl	80001dc <__adddf3>
 8010bec:	f04f 3bff 	mov.w	fp, #4294967295
 8010bf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bf4:	e7c4      	b.n	8010b80 <__ieee754_rem_pio2+0x80>
 8010bf6:	a386      	add	r3, pc, #536	; (adr r3, 8010e10 <__ieee754_rem_pio2+0x310>)
 8010bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfc:	f7ef faee 	bl	80001dc <__adddf3>
 8010c00:	a385      	add	r3, pc, #532	; (adr r3, 8010e18 <__ieee754_rem_pio2+0x318>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	4604      	mov	r4, r0
 8010c08:	460d      	mov	r5, r1
 8010c0a:	f7ef fae7 	bl	80001dc <__adddf3>
 8010c0e:	4602      	mov	r2, r0
 8010c10:	460b      	mov	r3, r1
 8010c12:	e9ca 2300 	strd	r2, r3, [sl]
 8010c16:	4620      	mov	r0, r4
 8010c18:	4629      	mov	r1, r5
 8010c1a:	f7ef fadd 	bl	80001d8 <__aeabi_dsub>
 8010c1e:	a37e      	add	r3, pc, #504	; (adr r3, 8010e18 <__ieee754_rem_pio2+0x318>)
 8010c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c24:	e7e0      	b.n	8010be8 <__ieee754_rem_pio2+0xe8>
 8010c26:	4b87      	ldr	r3, [pc, #540]	; (8010e44 <__ieee754_rem_pio2+0x344>)
 8010c28:	4598      	cmp	r8, r3
 8010c2a:	f300 80d8 	bgt.w	8010dde <__ieee754_rem_pio2+0x2de>
 8010c2e:	f000 f96d 	bl	8010f0c <fabs>
 8010c32:	ec55 4b10 	vmov	r4, r5, d0
 8010c36:	ee10 0a10 	vmov	r0, s0
 8010c3a:	a379      	add	r3, pc, #484	; (adr r3, 8010e20 <__ieee754_rem_pio2+0x320>)
 8010c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c40:	4629      	mov	r1, r5
 8010c42:	f7ef fc81 	bl	8000548 <__aeabi_dmul>
 8010c46:	4b80      	ldr	r3, [pc, #512]	; (8010e48 <__ieee754_rem_pio2+0x348>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f7ef fac7 	bl	80001dc <__adddf3>
 8010c4e:	f7ef ff15 	bl	8000a7c <__aeabi_d2iz>
 8010c52:	4683      	mov	fp, r0
 8010c54:	f7ef fc0e 	bl	8000474 <__aeabi_i2d>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	ec43 2b18 	vmov	d8, r2, r3
 8010c60:	a367      	add	r3, pc, #412	; (adr r3, 8010e00 <__ieee754_rem_pio2+0x300>)
 8010c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c66:	f7ef fc6f 	bl	8000548 <__aeabi_dmul>
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	4620      	mov	r0, r4
 8010c70:	4629      	mov	r1, r5
 8010c72:	f7ef fab1 	bl	80001d8 <__aeabi_dsub>
 8010c76:	a364      	add	r3, pc, #400	; (adr r3, 8010e08 <__ieee754_rem_pio2+0x308>)
 8010c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7c:	4606      	mov	r6, r0
 8010c7e:	460f      	mov	r7, r1
 8010c80:	ec51 0b18 	vmov	r0, r1, d8
 8010c84:	f7ef fc60 	bl	8000548 <__aeabi_dmul>
 8010c88:	f1bb 0f1f 	cmp.w	fp, #31
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	460d      	mov	r5, r1
 8010c90:	dc0d      	bgt.n	8010cae <__ieee754_rem_pio2+0x1ae>
 8010c92:	4b6e      	ldr	r3, [pc, #440]	; (8010e4c <__ieee754_rem_pio2+0x34c>)
 8010c94:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c9c:	4543      	cmp	r3, r8
 8010c9e:	d006      	beq.n	8010cae <__ieee754_rem_pio2+0x1ae>
 8010ca0:	4622      	mov	r2, r4
 8010ca2:	462b      	mov	r3, r5
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	f7ef fa96 	bl	80001d8 <__aeabi_dsub>
 8010cac:	e00e      	b.n	8010ccc <__ieee754_rem_pio2+0x1cc>
 8010cae:	462b      	mov	r3, r5
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	4639      	mov	r1, r7
 8010cb6:	f7ef fa8f 	bl	80001d8 <__aeabi_dsub>
 8010cba:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010cbe:	9303      	str	r3, [sp, #12]
 8010cc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010cc4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010cc8:	2b10      	cmp	r3, #16
 8010cca:	dc02      	bgt.n	8010cd2 <__ieee754_rem_pio2+0x1d2>
 8010ccc:	e9ca 0100 	strd	r0, r1, [sl]
 8010cd0:	e039      	b.n	8010d46 <__ieee754_rem_pio2+0x246>
 8010cd2:	a34f      	add	r3, pc, #316	; (adr r3, 8010e10 <__ieee754_rem_pio2+0x310>)
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	ec51 0b18 	vmov	r0, r1, d8
 8010cdc:	f7ef fc34 	bl	8000548 <__aeabi_dmul>
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	460d      	mov	r5, r1
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	4630      	mov	r0, r6
 8010cea:	4639      	mov	r1, r7
 8010cec:	f7ef fa74 	bl	80001d8 <__aeabi_dsub>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	4680      	mov	r8, r0
 8010cf6:	4689      	mov	r9, r1
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	4639      	mov	r1, r7
 8010cfc:	f7ef fa6c 	bl	80001d8 <__aeabi_dsub>
 8010d00:	4622      	mov	r2, r4
 8010d02:	462b      	mov	r3, r5
 8010d04:	f7ef fa68 	bl	80001d8 <__aeabi_dsub>
 8010d08:	a343      	add	r3, pc, #268	; (adr r3, 8010e18 <__ieee754_rem_pio2+0x318>)
 8010d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0e:	4604      	mov	r4, r0
 8010d10:	460d      	mov	r5, r1
 8010d12:	ec51 0b18 	vmov	r0, r1, d8
 8010d16:	f7ef fc17 	bl	8000548 <__aeabi_dmul>
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	462b      	mov	r3, r5
 8010d1e:	f7ef fa5b 	bl	80001d8 <__aeabi_dsub>
 8010d22:	4602      	mov	r2, r0
 8010d24:	460b      	mov	r3, r1
 8010d26:	4604      	mov	r4, r0
 8010d28:	460d      	mov	r5, r1
 8010d2a:	4640      	mov	r0, r8
 8010d2c:	4649      	mov	r1, r9
 8010d2e:	f7ef fa53 	bl	80001d8 <__aeabi_dsub>
 8010d32:	9a03      	ldr	r2, [sp, #12]
 8010d34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	2b31      	cmp	r3, #49	; 0x31
 8010d3c:	dc24      	bgt.n	8010d88 <__ieee754_rem_pio2+0x288>
 8010d3e:	e9ca 0100 	strd	r0, r1, [sl]
 8010d42:	4646      	mov	r6, r8
 8010d44:	464f      	mov	r7, r9
 8010d46:	e9da 8900 	ldrd	r8, r9, [sl]
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	4642      	mov	r2, r8
 8010d4e:	464b      	mov	r3, r9
 8010d50:	4639      	mov	r1, r7
 8010d52:	f7ef fa41 	bl	80001d8 <__aeabi_dsub>
 8010d56:	462b      	mov	r3, r5
 8010d58:	4622      	mov	r2, r4
 8010d5a:	f7ef fa3d 	bl	80001d8 <__aeabi_dsub>
 8010d5e:	9b02      	ldr	r3, [sp, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010d66:	f6bf af0b 	bge.w	8010b80 <__ieee754_rem_pio2+0x80>
 8010d6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010d6e:	f8ca 3004 	str.w	r3, [sl, #4]
 8010d72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d76:	f8ca 8000 	str.w	r8, [sl]
 8010d7a:	f8ca 0008 	str.w	r0, [sl, #8]
 8010d7e:	f8ca 300c 	str.w	r3, [sl, #12]
 8010d82:	f1cb 0b00 	rsb	fp, fp, #0
 8010d86:	e6fb      	b.n	8010b80 <__ieee754_rem_pio2+0x80>
 8010d88:	a327      	add	r3, pc, #156	; (adr r3, 8010e28 <__ieee754_rem_pio2+0x328>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	ec51 0b18 	vmov	r0, r1, d8
 8010d92:	f7ef fbd9 	bl	8000548 <__aeabi_dmul>
 8010d96:	4604      	mov	r4, r0
 8010d98:	460d      	mov	r5, r1
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	4640      	mov	r0, r8
 8010da0:	4649      	mov	r1, r9
 8010da2:	f7ef fa19 	bl	80001d8 <__aeabi_dsub>
 8010da6:	4602      	mov	r2, r0
 8010da8:	460b      	mov	r3, r1
 8010daa:	4606      	mov	r6, r0
 8010dac:	460f      	mov	r7, r1
 8010dae:	4640      	mov	r0, r8
 8010db0:	4649      	mov	r1, r9
 8010db2:	f7ef fa11 	bl	80001d8 <__aeabi_dsub>
 8010db6:	4622      	mov	r2, r4
 8010db8:	462b      	mov	r3, r5
 8010dba:	f7ef fa0d 	bl	80001d8 <__aeabi_dsub>
 8010dbe:	a31c      	add	r3, pc, #112	; (adr r3, 8010e30 <__ieee754_rem_pio2+0x330>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	460d      	mov	r5, r1
 8010dc8:	ec51 0b18 	vmov	r0, r1, d8
 8010dcc:	f7ef fbbc 	bl	8000548 <__aeabi_dmul>
 8010dd0:	4622      	mov	r2, r4
 8010dd2:	462b      	mov	r3, r5
 8010dd4:	f7ef fa00 	bl	80001d8 <__aeabi_dsub>
 8010dd8:	4604      	mov	r4, r0
 8010dda:	460d      	mov	r5, r1
 8010ddc:	e760      	b.n	8010ca0 <__ieee754_rem_pio2+0x1a0>
 8010dde:	4b1c      	ldr	r3, [pc, #112]	; (8010e50 <__ieee754_rem_pio2+0x350>)
 8010de0:	4598      	cmp	r8, r3
 8010de2:	dd37      	ble.n	8010e54 <__ieee754_rem_pio2+0x354>
 8010de4:	ee10 2a10 	vmov	r2, s0
 8010de8:	462b      	mov	r3, r5
 8010dea:	4620      	mov	r0, r4
 8010dec:	4629      	mov	r1, r5
 8010dee:	f7ef f9f3 	bl	80001d8 <__aeabi_dsub>
 8010df2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010df6:	e9ca 0100 	strd	r0, r1, [sl]
 8010dfa:	e695      	b.n	8010b28 <__ieee754_rem_pio2+0x28>
 8010dfc:	f3af 8000 	nop.w
 8010e00:	54400000 	.word	0x54400000
 8010e04:	3ff921fb 	.word	0x3ff921fb
 8010e08:	1a626331 	.word	0x1a626331
 8010e0c:	3dd0b461 	.word	0x3dd0b461
 8010e10:	1a600000 	.word	0x1a600000
 8010e14:	3dd0b461 	.word	0x3dd0b461
 8010e18:	2e037073 	.word	0x2e037073
 8010e1c:	3ba3198a 	.word	0x3ba3198a
 8010e20:	6dc9c883 	.word	0x6dc9c883
 8010e24:	3fe45f30 	.word	0x3fe45f30
 8010e28:	2e000000 	.word	0x2e000000
 8010e2c:	3ba3198a 	.word	0x3ba3198a
 8010e30:	252049c1 	.word	0x252049c1
 8010e34:	397b839a 	.word	0x397b839a
 8010e38:	3fe921fb 	.word	0x3fe921fb
 8010e3c:	4002d97b 	.word	0x4002d97b
 8010e40:	3ff921fb 	.word	0x3ff921fb
 8010e44:	413921fb 	.word	0x413921fb
 8010e48:	3fe00000 	.word	0x3fe00000
 8010e4c:	08011a08 	.word	0x08011a08
 8010e50:	7fefffff 	.word	0x7fefffff
 8010e54:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010e58:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010e5c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010e60:	4620      	mov	r0, r4
 8010e62:	460d      	mov	r5, r1
 8010e64:	f7ef fe0a 	bl	8000a7c <__aeabi_d2iz>
 8010e68:	f7ef fb04 	bl	8000474 <__aeabi_i2d>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	4620      	mov	r0, r4
 8010e72:	4629      	mov	r1, r5
 8010e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e78:	f7ef f9ae 	bl	80001d8 <__aeabi_dsub>
 8010e7c:	4b21      	ldr	r3, [pc, #132]	; (8010f04 <__ieee754_rem_pio2+0x404>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f7ef fb62 	bl	8000548 <__aeabi_dmul>
 8010e84:	460d      	mov	r5, r1
 8010e86:	4604      	mov	r4, r0
 8010e88:	f7ef fdf8 	bl	8000a7c <__aeabi_d2iz>
 8010e8c:	f7ef faf2 	bl	8000474 <__aeabi_i2d>
 8010e90:	4602      	mov	r2, r0
 8010e92:	460b      	mov	r3, r1
 8010e94:	4620      	mov	r0, r4
 8010e96:	4629      	mov	r1, r5
 8010e98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e9c:	f7ef f99c 	bl	80001d8 <__aeabi_dsub>
 8010ea0:	4b18      	ldr	r3, [pc, #96]	; (8010f04 <__ieee754_rem_pio2+0x404>)
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f7ef fb50 	bl	8000548 <__aeabi_dmul>
 8010ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010eac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010eb0:	2703      	movs	r7, #3
 8010eb2:	2400      	movs	r4, #0
 8010eb4:	2500      	movs	r5, #0
 8010eb6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010eba:	4622      	mov	r2, r4
 8010ebc:	462b      	mov	r3, r5
 8010ebe:	46b9      	mov	r9, r7
 8010ec0:	3f01      	subs	r7, #1
 8010ec2:	f7ef fda9 	bl	8000a18 <__aeabi_dcmpeq>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	d1f5      	bne.n	8010eb6 <__ieee754_rem_pio2+0x3b6>
 8010eca:	4b0f      	ldr	r3, [pc, #60]	; (8010f08 <__ieee754_rem_pio2+0x408>)
 8010ecc:	9301      	str	r3, [sp, #4]
 8010ece:	2302      	movs	r3, #2
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	4632      	mov	r2, r6
 8010ed4:	464b      	mov	r3, r9
 8010ed6:	4651      	mov	r1, sl
 8010ed8:	a804      	add	r0, sp, #16
 8010eda:	f000 f851 	bl	8010f80 <__kernel_rem_pio2>
 8010ede:	9b02      	ldr	r3, [sp, #8]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	4683      	mov	fp, r0
 8010ee4:	f6bf ae4c 	bge.w	8010b80 <__ieee754_rem_pio2+0x80>
 8010ee8:	e9da 2100 	ldrd	r2, r1, [sl]
 8010eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ef0:	e9ca 2300 	strd	r2, r3, [sl]
 8010ef4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010ef8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010efc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010f00:	e73f      	b.n	8010d82 <__ieee754_rem_pio2+0x282>
 8010f02:	bf00      	nop
 8010f04:	41700000 	.word	0x41700000
 8010f08:	08011a88 	.word	0x08011a88

08010f0c <fabs>:
 8010f0c:	ec51 0b10 	vmov	r0, r1, d0
 8010f10:	ee10 2a10 	vmov	r2, s0
 8010f14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f18:	ec43 2b10 	vmov	d0, r2, r3
 8010f1c:	4770      	bx	lr

08010f1e <with_errno>:
 8010f1e:	b570      	push	{r4, r5, r6, lr}
 8010f20:	4604      	mov	r4, r0
 8010f22:	460d      	mov	r5, r1
 8010f24:	4616      	mov	r6, r2
 8010f26:	f7ff f99f 	bl	8010268 <__errno>
 8010f2a:	4629      	mov	r1, r5
 8010f2c:	6006      	str	r6, [r0, #0]
 8010f2e:	4620      	mov	r0, r4
 8010f30:	bd70      	pop	{r4, r5, r6, pc}

08010f32 <xflow>:
 8010f32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f34:	4614      	mov	r4, r2
 8010f36:	461d      	mov	r5, r3
 8010f38:	b108      	cbz	r0, 8010f3e <xflow+0xc>
 8010f3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8010f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f46:	4620      	mov	r0, r4
 8010f48:	4629      	mov	r1, r5
 8010f4a:	f7ef fafd 	bl	8000548 <__aeabi_dmul>
 8010f4e:	2222      	movs	r2, #34	; 0x22
 8010f50:	b003      	add	sp, #12
 8010f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f56:	f7ff bfe2 	b.w	8010f1e <with_errno>

08010f5a <__math_uflow>:
 8010f5a:	b508      	push	{r3, lr}
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010f62:	f7ff ffe6 	bl	8010f32 <xflow>
 8010f66:	ec41 0b10 	vmov	d0, r0, r1
 8010f6a:	bd08      	pop	{r3, pc}

08010f6c <__math_oflow>:
 8010f6c:	b508      	push	{r3, lr}
 8010f6e:	2200      	movs	r2, #0
 8010f70:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010f74:	f7ff ffdd 	bl	8010f32 <xflow>
 8010f78:	ec41 0b10 	vmov	d0, r0, r1
 8010f7c:	bd08      	pop	{r3, pc}
	...

08010f80 <__kernel_rem_pio2>:
 8010f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	ed2d 8b02 	vpush	{d8}
 8010f88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010f8c:	f112 0f14 	cmn.w	r2, #20
 8010f90:	9306      	str	r3, [sp, #24]
 8010f92:	9104      	str	r1, [sp, #16]
 8010f94:	4bc2      	ldr	r3, [pc, #776]	; (80112a0 <__kernel_rem_pio2+0x320>)
 8010f96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010f98:	9009      	str	r0, [sp, #36]	; 0x24
 8010f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	9b06      	ldr	r3, [sp, #24]
 8010fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8010fa6:	bfa8      	it	ge
 8010fa8:	1ed4      	subge	r4, r2, #3
 8010faa:	9305      	str	r3, [sp, #20]
 8010fac:	bfb2      	itee	lt
 8010fae:	2400      	movlt	r4, #0
 8010fb0:	2318      	movge	r3, #24
 8010fb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8010fb6:	f06f 0317 	mvn.w	r3, #23
 8010fba:	fb04 3303 	mla	r3, r4, r3, r3
 8010fbe:	eb03 0a02 	add.w	sl, r3, r2
 8010fc2:	9b00      	ldr	r3, [sp, #0]
 8010fc4:	9a05      	ldr	r2, [sp, #20]
 8010fc6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011290 <__kernel_rem_pio2+0x310>
 8010fca:	eb03 0802 	add.w	r8, r3, r2
 8010fce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010fd0:	1aa7      	subs	r7, r4, r2
 8010fd2:	ae20      	add	r6, sp, #128	; 0x80
 8010fd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010fd8:	2500      	movs	r5, #0
 8010fda:	4545      	cmp	r5, r8
 8010fdc:	dd13      	ble.n	8011006 <__kernel_rem_pio2+0x86>
 8010fde:	9b06      	ldr	r3, [sp, #24]
 8010fe0:	aa20      	add	r2, sp, #128	; 0x80
 8010fe2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010fe6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010fea:	f04f 0800 	mov.w	r8, #0
 8010fee:	9b00      	ldr	r3, [sp, #0]
 8010ff0:	4598      	cmp	r8, r3
 8010ff2:	dc31      	bgt.n	8011058 <__kernel_rem_pio2+0xd8>
 8010ff4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011290 <__kernel_rem_pio2+0x310>
 8010ff8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010ffc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011000:	462f      	mov	r7, r5
 8011002:	2600      	movs	r6, #0
 8011004:	e01b      	b.n	801103e <__kernel_rem_pio2+0xbe>
 8011006:	42ef      	cmn	r7, r5
 8011008:	d407      	bmi.n	801101a <__kernel_rem_pio2+0x9a>
 801100a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801100e:	f7ef fa31 	bl	8000474 <__aeabi_i2d>
 8011012:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011016:	3501      	adds	r5, #1
 8011018:	e7df      	b.n	8010fda <__kernel_rem_pio2+0x5a>
 801101a:	ec51 0b18 	vmov	r0, r1, d8
 801101e:	e7f8      	b.n	8011012 <__kernel_rem_pio2+0x92>
 8011020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011024:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011028:	f7ef fa8e 	bl	8000548 <__aeabi_dmul>
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011034:	f7ef f8d2 	bl	80001dc <__adddf3>
 8011038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801103c:	3601      	adds	r6, #1
 801103e:	9b05      	ldr	r3, [sp, #20]
 8011040:	429e      	cmp	r6, r3
 8011042:	f1a7 0708 	sub.w	r7, r7, #8
 8011046:	ddeb      	ble.n	8011020 <__kernel_rem_pio2+0xa0>
 8011048:	ed9d 7b02 	vldr	d7, [sp, #8]
 801104c:	f108 0801 	add.w	r8, r8, #1
 8011050:	ecab 7b02 	vstmia	fp!, {d7}
 8011054:	3508      	adds	r5, #8
 8011056:	e7ca      	b.n	8010fee <__kernel_rem_pio2+0x6e>
 8011058:	9b00      	ldr	r3, [sp, #0]
 801105a:	aa0c      	add	r2, sp, #48	; 0x30
 801105c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011060:	930b      	str	r3, [sp, #44]	; 0x2c
 8011062:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011064:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011068:	9c00      	ldr	r4, [sp, #0]
 801106a:	930a      	str	r3, [sp, #40]	; 0x28
 801106c:	00e3      	lsls	r3, r4, #3
 801106e:	9308      	str	r3, [sp, #32]
 8011070:	ab98      	add	r3, sp, #608	; 0x260
 8011072:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011076:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801107a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801107e:	ab70      	add	r3, sp, #448	; 0x1c0
 8011080:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011084:	46c3      	mov	fp, r8
 8011086:	46a1      	mov	r9, r4
 8011088:	f1b9 0f00 	cmp.w	r9, #0
 801108c:	f1a5 0508 	sub.w	r5, r5, #8
 8011090:	dc77      	bgt.n	8011182 <__kernel_rem_pio2+0x202>
 8011092:	ec47 6b10 	vmov	d0, r6, r7
 8011096:	4650      	mov	r0, sl
 8011098:	f000 fac2 	bl	8011620 <scalbn>
 801109c:	ec57 6b10 	vmov	r6, r7, d0
 80110a0:	2200      	movs	r2, #0
 80110a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80110a6:	ee10 0a10 	vmov	r0, s0
 80110aa:	4639      	mov	r1, r7
 80110ac:	f7ef fa4c 	bl	8000548 <__aeabi_dmul>
 80110b0:	ec41 0b10 	vmov	d0, r0, r1
 80110b4:	f000 fb34 	bl	8011720 <floor>
 80110b8:	4b7a      	ldr	r3, [pc, #488]	; (80112a4 <__kernel_rem_pio2+0x324>)
 80110ba:	ec51 0b10 	vmov	r0, r1, d0
 80110be:	2200      	movs	r2, #0
 80110c0:	f7ef fa42 	bl	8000548 <__aeabi_dmul>
 80110c4:	4602      	mov	r2, r0
 80110c6:	460b      	mov	r3, r1
 80110c8:	4630      	mov	r0, r6
 80110ca:	4639      	mov	r1, r7
 80110cc:	f7ef f884 	bl	80001d8 <__aeabi_dsub>
 80110d0:	460f      	mov	r7, r1
 80110d2:	4606      	mov	r6, r0
 80110d4:	f7ef fcd2 	bl	8000a7c <__aeabi_d2iz>
 80110d8:	9002      	str	r0, [sp, #8]
 80110da:	f7ef f9cb 	bl	8000474 <__aeabi_i2d>
 80110de:	4602      	mov	r2, r0
 80110e0:	460b      	mov	r3, r1
 80110e2:	4630      	mov	r0, r6
 80110e4:	4639      	mov	r1, r7
 80110e6:	f7ef f877 	bl	80001d8 <__aeabi_dsub>
 80110ea:	f1ba 0f00 	cmp.w	sl, #0
 80110ee:	4606      	mov	r6, r0
 80110f0:	460f      	mov	r7, r1
 80110f2:	dd6d      	ble.n	80111d0 <__kernel_rem_pio2+0x250>
 80110f4:	1e61      	subs	r1, r4, #1
 80110f6:	ab0c      	add	r3, sp, #48	; 0x30
 80110f8:	9d02      	ldr	r5, [sp, #8]
 80110fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110fe:	f1ca 0018 	rsb	r0, sl, #24
 8011102:	fa43 f200 	asr.w	r2, r3, r0
 8011106:	4415      	add	r5, r2
 8011108:	4082      	lsls	r2, r0
 801110a:	1a9b      	subs	r3, r3, r2
 801110c:	aa0c      	add	r2, sp, #48	; 0x30
 801110e:	9502      	str	r5, [sp, #8]
 8011110:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011114:	f1ca 0217 	rsb	r2, sl, #23
 8011118:	fa43 fb02 	asr.w	fp, r3, r2
 801111c:	f1bb 0f00 	cmp.w	fp, #0
 8011120:	dd65      	ble.n	80111ee <__kernel_rem_pio2+0x26e>
 8011122:	9b02      	ldr	r3, [sp, #8]
 8011124:	2200      	movs	r2, #0
 8011126:	3301      	adds	r3, #1
 8011128:	9302      	str	r3, [sp, #8]
 801112a:	4615      	mov	r5, r2
 801112c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011130:	4294      	cmp	r4, r2
 8011132:	f300 809f 	bgt.w	8011274 <__kernel_rem_pio2+0x2f4>
 8011136:	f1ba 0f00 	cmp.w	sl, #0
 801113a:	dd07      	ble.n	801114c <__kernel_rem_pio2+0x1cc>
 801113c:	f1ba 0f01 	cmp.w	sl, #1
 8011140:	f000 80c1 	beq.w	80112c6 <__kernel_rem_pio2+0x346>
 8011144:	f1ba 0f02 	cmp.w	sl, #2
 8011148:	f000 80c7 	beq.w	80112da <__kernel_rem_pio2+0x35a>
 801114c:	f1bb 0f02 	cmp.w	fp, #2
 8011150:	d14d      	bne.n	80111ee <__kernel_rem_pio2+0x26e>
 8011152:	4632      	mov	r2, r6
 8011154:	463b      	mov	r3, r7
 8011156:	4954      	ldr	r1, [pc, #336]	; (80112a8 <__kernel_rem_pio2+0x328>)
 8011158:	2000      	movs	r0, #0
 801115a:	f7ef f83d 	bl	80001d8 <__aeabi_dsub>
 801115e:	4606      	mov	r6, r0
 8011160:	460f      	mov	r7, r1
 8011162:	2d00      	cmp	r5, #0
 8011164:	d043      	beq.n	80111ee <__kernel_rem_pio2+0x26e>
 8011166:	4650      	mov	r0, sl
 8011168:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011298 <__kernel_rem_pio2+0x318>
 801116c:	f000 fa58 	bl	8011620 <scalbn>
 8011170:	4630      	mov	r0, r6
 8011172:	4639      	mov	r1, r7
 8011174:	ec53 2b10 	vmov	r2, r3, d0
 8011178:	f7ef f82e 	bl	80001d8 <__aeabi_dsub>
 801117c:	4606      	mov	r6, r0
 801117e:	460f      	mov	r7, r1
 8011180:	e035      	b.n	80111ee <__kernel_rem_pio2+0x26e>
 8011182:	4b4a      	ldr	r3, [pc, #296]	; (80112ac <__kernel_rem_pio2+0x32c>)
 8011184:	2200      	movs	r2, #0
 8011186:	4630      	mov	r0, r6
 8011188:	4639      	mov	r1, r7
 801118a:	f7ef f9dd 	bl	8000548 <__aeabi_dmul>
 801118e:	f7ef fc75 	bl	8000a7c <__aeabi_d2iz>
 8011192:	f7ef f96f 	bl	8000474 <__aeabi_i2d>
 8011196:	4602      	mov	r2, r0
 8011198:	460b      	mov	r3, r1
 801119a:	ec43 2b18 	vmov	d8, r2, r3
 801119e:	4b44      	ldr	r3, [pc, #272]	; (80112b0 <__kernel_rem_pio2+0x330>)
 80111a0:	2200      	movs	r2, #0
 80111a2:	f7ef f9d1 	bl	8000548 <__aeabi_dmul>
 80111a6:	4602      	mov	r2, r0
 80111a8:	460b      	mov	r3, r1
 80111aa:	4630      	mov	r0, r6
 80111ac:	4639      	mov	r1, r7
 80111ae:	f7ef f813 	bl	80001d8 <__aeabi_dsub>
 80111b2:	f7ef fc63 	bl	8000a7c <__aeabi_d2iz>
 80111b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111ba:	f84b 0b04 	str.w	r0, [fp], #4
 80111be:	ec51 0b18 	vmov	r0, r1, d8
 80111c2:	f7ef f80b 	bl	80001dc <__adddf3>
 80111c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80111ca:	4606      	mov	r6, r0
 80111cc:	460f      	mov	r7, r1
 80111ce:	e75b      	b.n	8011088 <__kernel_rem_pio2+0x108>
 80111d0:	d106      	bne.n	80111e0 <__kernel_rem_pio2+0x260>
 80111d2:	1e63      	subs	r3, r4, #1
 80111d4:	aa0c      	add	r2, sp, #48	; 0x30
 80111d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111da:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80111de:	e79d      	b.n	801111c <__kernel_rem_pio2+0x19c>
 80111e0:	4b34      	ldr	r3, [pc, #208]	; (80112b4 <__kernel_rem_pio2+0x334>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	f7ef fc36 	bl	8000a54 <__aeabi_dcmpge>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d140      	bne.n	801126e <__kernel_rem_pio2+0x2ee>
 80111ec:	4683      	mov	fp, r0
 80111ee:	2200      	movs	r2, #0
 80111f0:	2300      	movs	r3, #0
 80111f2:	4630      	mov	r0, r6
 80111f4:	4639      	mov	r1, r7
 80111f6:	f7ef fc0f 	bl	8000a18 <__aeabi_dcmpeq>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f000 80c1 	beq.w	8011382 <__kernel_rem_pio2+0x402>
 8011200:	1e65      	subs	r5, r4, #1
 8011202:	462b      	mov	r3, r5
 8011204:	2200      	movs	r2, #0
 8011206:	9900      	ldr	r1, [sp, #0]
 8011208:	428b      	cmp	r3, r1
 801120a:	da6d      	bge.n	80112e8 <__kernel_rem_pio2+0x368>
 801120c:	2a00      	cmp	r2, #0
 801120e:	f000 808a 	beq.w	8011326 <__kernel_rem_pio2+0x3a6>
 8011212:	ab0c      	add	r3, sp, #48	; 0x30
 8011214:	f1aa 0a18 	sub.w	sl, sl, #24
 8011218:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801121c:	2b00      	cmp	r3, #0
 801121e:	f000 80ae 	beq.w	801137e <__kernel_rem_pio2+0x3fe>
 8011222:	4650      	mov	r0, sl
 8011224:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011298 <__kernel_rem_pio2+0x318>
 8011228:	f000 f9fa 	bl	8011620 <scalbn>
 801122c:	1c6b      	adds	r3, r5, #1
 801122e:	00da      	lsls	r2, r3, #3
 8011230:	9205      	str	r2, [sp, #20]
 8011232:	ec57 6b10 	vmov	r6, r7, d0
 8011236:	aa70      	add	r2, sp, #448	; 0x1c0
 8011238:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80112ac <__kernel_rem_pio2+0x32c>
 801123c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8011240:	462c      	mov	r4, r5
 8011242:	f04f 0800 	mov.w	r8, #0
 8011246:	2c00      	cmp	r4, #0
 8011248:	f280 80d4 	bge.w	80113f4 <__kernel_rem_pio2+0x474>
 801124c:	462c      	mov	r4, r5
 801124e:	2c00      	cmp	r4, #0
 8011250:	f2c0 8102 	blt.w	8011458 <__kernel_rem_pio2+0x4d8>
 8011254:	4b18      	ldr	r3, [pc, #96]	; (80112b8 <__kernel_rem_pio2+0x338>)
 8011256:	461e      	mov	r6, r3
 8011258:	ab70      	add	r3, sp, #448	; 0x1c0
 801125a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801125e:	1b2b      	subs	r3, r5, r4
 8011260:	f04f 0900 	mov.w	r9, #0
 8011264:	f04f 0a00 	mov.w	sl, #0
 8011268:	2700      	movs	r7, #0
 801126a:	9306      	str	r3, [sp, #24]
 801126c:	e0e6      	b.n	801143c <__kernel_rem_pio2+0x4bc>
 801126e:	f04f 0b02 	mov.w	fp, #2
 8011272:	e756      	b.n	8011122 <__kernel_rem_pio2+0x1a2>
 8011274:	f8d8 3000 	ldr.w	r3, [r8]
 8011278:	bb05      	cbnz	r5, 80112bc <__kernel_rem_pio2+0x33c>
 801127a:	b123      	cbz	r3, 8011286 <__kernel_rem_pio2+0x306>
 801127c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011280:	f8c8 3000 	str.w	r3, [r8]
 8011284:	2301      	movs	r3, #1
 8011286:	3201      	adds	r2, #1
 8011288:	f108 0804 	add.w	r8, r8, #4
 801128c:	461d      	mov	r5, r3
 801128e:	e74f      	b.n	8011130 <__kernel_rem_pio2+0x1b0>
	...
 801129c:	3ff00000 	.word	0x3ff00000
 80112a0:	08011bd0 	.word	0x08011bd0
 80112a4:	40200000 	.word	0x40200000
 80112a8:	3ff00000 	.word	0x3ff00000
 80112ac:	3e700000 	.word	0x3e700000
 80112b0:	41700000 	.word	0x41700000
 80112b4:	3fe00000 	.word	0x3fe00000
 80112b8:	08011b90 	.word	0x08011b90
 80112bc:	1acb      	subs	r3, r1, r3
 80112be:	f8c8 3000 	str.w	r3, [r8]
 80112c2:	462b      	mov	r3, r5
 80112c4:	e7df      	b.n	8011286 <__kernel_rem_pio2+0x306>
 80112c6:	1e62      	subs	r2, r4, #1
 80112c8:	ab0c      	add	r3, sp, #48	; 0x30
 80112ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80112d2:	a90c      	add	r1, sp, #48	; 0x30
 80112d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80112d8:	e738      	b.n	801114c <__kernel_rem_pio2+0x1cc>
 80112da:	1e62      	subs	r2, r4, #1
 80112dc:	ab0c      	add	r3, sp, #48	; 0x30
 80112de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112e6:	e7f4      	b.n	80112d2 <__kernel_rem_pio2+0x352>
 80112e8:	a90c      	add	r1, sp, #48	; 0x30
 80112ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80112ee:	3b01      	subs	r3, #1
 80112f0:	430a      	orrs	r2, r1
 80112f2:	e788      	b.n	8011206 <__kernel_rem_pio2+0x286>
 80112f4:	3301      	adds	r3, #1
 80112f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80112fa:	2900      	cmp	r1, #0
 80112fc:	d0fa      	beq.n	80112f4 <__kernel_rem_pio2+0x374>
 80112fe:	9a08      	ldr	r2, [sp, #32]
 8011300:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011304:	446a      	add	r2, sp
 8011306:	3a98      	subs	r2, #152	; 0x98
 8011308:	9208      	str	r2, [sp, #32]
 801130a:	9a06      	ldr	r2, [sp, #24]
 801130c:	a920      	add	r1, sp, #128	; 0x80
 801130e:	18a2      	adds	r2, r4, r2
 8011310:	18e3      	adds	r3, r4, r3
 8011312:	f104 0801 	add.w	r8, r4, #1
 8011316:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801131a:	9302      	str	r3, [sp, #8]
 801131c:	9b02      	ldr	r3, [sp, #8]
 801131e:	4543      	cmp	r3, r8
 8011320:	da04      	bge.n	801132c <__kernel_rem_pio2+0x3ac>
 8011322:	461c      	mov	r4, r3
 8011324:	e6a2      	b.n	801106c <__kernel_rem_pio2+0xec>
 8011326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011328:	2301      	movs	r3, #1
 801132a:	e7e4      	b.n	80112f6 <__kernel_rem_pio2+0x376>
 801132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801132e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011332:	f7ef f89f 	bl	8000474 <__aeabi_i2d>
 8011336:	e8e5 0102 	strd	r0, r1, [r5], #8
 801133a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801133c:	46ab      	mov	fp, r5
 801133e:	461c      	mov	r4, r3
 8011340:	f04f 0900 	mov.w	r9, #0
 8011344:	2600      	movs	r6, #0
 8011346:	2700      	movs	r7, #0
 8011348:	9b05      	ldr	r3, [sp, #20]
 801134a:	4599      	cmp	r9, r3
 801134c:	dd06      	ble.n	801135c <__kernel_rem_pio2+0x3dc>
 801134e:	9b08      	ldr	r3, [sp, #32]
 8011350:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011354:	f108 0801 	add.w	r8, r8, #1
 8011358:	9308      	str	r3, [sp, #32]
 801135a:	e7df      	b.n	801131c <__kernel_rem_pio2+0x39c>
 801135c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011360:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011364:	f7ef f8f0 	bl	8000548 <__aeabi_dmul>
 8011368:	4602      	mov	r2, r0
 801136a:	460b      	mov	r3, r1
 801136c:	4630      	mov	r0, r6
 801136e:	4639      	mov	r1, r7
 8011370:	f7ee ff34 	bl	80001dc <__adddf3>
 8011374:	f109 0901 	add.w	r9, r9, #1
 8011378:	4606      	mov	r6, r0
 801137a:	460f      	mov	r7, r1
 801137c:	e7e4      	b.n	8011348 <__kernel_rem_pio2+0x3c8>
 801137e:	3d01      	subs	r5, #1
 8011380:	e747      	b.n	8011212 <__kernel_rem_pio2+0x292>
 8011382:	ec47 6b10 	vmov	d0, r6, r7
 8011386:	f1ca 0000 	rsb	r0, sl, #0
 801138a:	f000 f949 	bl	8011620 <scalbn>
 801138e:	ec57 6b10 	vmov	r6, r7, d0
 8011392:	4ba0      	ldr	r3, [pc, #640]	; (8011614 <__kernel_rem_pio2+0x694>)
 8011394:	ee10 0a10 	vmov	r0, s0
 8011398:	2200      	movs	r2, #0
 801139a:	4639      	mov	r1, r7
 801139c:	f7ef fb5a 	bl	8000a54 <__aeabi_dcmpge>
 80113a0:	b1f8      	cbz	r0, 80113e2 <__kernel_rem_pio2+0x462>
 80113a2:	4b9d      	ldr	r3, [pc, #628]	; (8011618 <__kernel_rem_pio2+0x698>)
 80113a4:	2200      	movs	r2, #0
 80113a6:	4630      	mov	r0, r6
 80113a8:	4639      	mov	r1, r7
 80113aa:	f7ef f8cd 	bl	8000548 <__aeabi_dmul>
 80113ae:	f7ef fb65 	bl	8000a7c <__aeabi_d2iz>
 80113b2:	4680      	mov	r8, r0
 80113b4:	f7ef f85e 	bl	8000474 <__aeabi_i2d>
 80113b8:	4b96      	ldr	r3, [pc, #600]	; (8011614 <__kernel_rem_pio2+0x694>)
 80113ba:	2200      	movs	r2, #0
 80113bc:	f7ef f8c4 	bl	8000548 <__aeabi_dmul>
 80113c0:	460b      	mov	r3, r1
 80113c2:	4602      	mov	r2, r0
 80113c4:	4639      	mov	r1, r7
 80113c6:	4630      	mov	r0, r6
 80113c8:	f7ee ff06 	bl	80001d8 <__aeabi_dsub>
 80113cc:	f7ef fb56 	bl	8000a7c <__aeabi_d2iz>
 80113d0:	1c65      	adds	r5, r4, #1
 80113d2:	ab0c      	add	r3, sp, #48	; 0x30
 80113d4:	f10a 0a18 	add.w	sl, sl, #24
 80113d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80113dc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80113e0:	e71f      	b.n	8011222 <__kernel_rem_pio2+0x2a2>
 80113e2:	4630      	mov	r0, r6
 80113e4:	4639      	mov	r1, r7
 80113e6:	f7ef fb49 	bl	8000a7c <__aeabi_d2iz>
 80113ea:	ab0c      	add	r3, sp, #48	; 0x30
 80113ec:	4625      	mov	r5, r4
 80113ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80113f2:	e716      	b.n	8011222 <__kernel_rem_pio2+0x2a2>
 80113f4:	ab0c      	add	r3, sp, #48	; 0x30
 80113f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80113fa:	f7ef f83b 	bl	8000474 <__aeabi_i2d>
 80113fe:	4632      	mov	r2, r6
 8011400:	463b      	mov	r3, r7
 8011402:	f7ef f8a1 	bl	8000548 <__aeabi_dmul>
 8011406:	4642      	mov	r2, r8
 8011408:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801140c:	464b      	mov	r3, r9
 801140e:	4630      	mov	r0, r6
 8011410:	4639      	mov	r1, r7
 8011412:	f7ef f899 	bl	8000548 <__aeabi_dmul>
 8011416:	3c01      	subs	r4, #1
 8011418:	4606      	mov	r6, r0
 801141a:	460f      	mov	r7, r1
 801141c:	e713      	b.n	8011246 <__kernel_rem_pio2+0x2c6>
 801141e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011422:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011426:	f7ef f88f 	bl	8000548 <__aeabi_dmul>
 801142a:	4602      	mov	r2, r0
 801142c:	460b      	mov	r3, r1
 801142e:	4648      	mov	r0, r9
 8011430:	4651      	mov	r1, sl
 8011432:	f7ee fed3 	bl	80001dc <__adddf3>
 8011436:	3701      	adds	r7, #1
 8011438:	4681      	mov	r9, r0
 801143a:	468a      	mov	sl, r1
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	429f      	cmp	r7, r3
 8011440:	dc02      	bgt.n	8011448 <__kernel_rem_pio2+0x4c8>
 8011442:	9b06      	ldr	r3, [sp, #24]
 8011444:	429f      	cmp	r7, r3
 8011446:	ddea      	ble.n	801141e <__kernel_rem_pio2+0x49e>
 8011448:	9a06      	ldr	r2, [sp, #24]
 801144a:	ab48      	add	r3, sp, #288	; 0x120
 801144c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011450:	e9c6 9a00 	strd	r9, sl, [r6]
 8011454:	3c01      	subs	r4, #1
 8011456:	e6fa      	b.n	801124e <__kernel_rem_pio2+0x2ce>
 8011458:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801145a:	2b02      	cmp	r3, #2
 801145c:	dc0b      	bgt.n	8011476 <__kernel_rem_pio2+0x4f6>
 801145e:	2b00      	cmp	r3, #0
 8011460:	dc39      	bgt.n	80114d6 <__kernel_rem_pio2+0x556>
 8011462:	d05d      	beq.n	8011520 <__kernel_rem_pio2+0x5a0>
 8011464:	9b02      	ldr	r3, [sp, #8]
 8011466:	f003 0007 	and.w	r0, r3, #7
 801146a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801146e:	ecbd 8b02 	vpop	{d8}
 8011472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011476:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011478:	2b03      	cmp	r3, #3
 801147a:	d1f3      	bne.n	8011464 <__kernel_rem_pio2+0x4e4>
 801147c:	9b05      	ldr	r3, [sp, #20]
 801147e:	9500      	str	r5, [sp, #0]
 8011480:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011484:	eb0d 0403 	add.w	r4, sp, r3
 8011488:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801148c:	46a2      	mov	sl, r4
 801148e:	9b00      	ldr	r3, [sp, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	f1aa 0a08 	sub.w	sl, sl, #8
 8011496:	dc69      	bgt.n	801156c <__kernel_rem_pio2+0x5ec>
 8011498:	46aa      	mov	sl, r5
 801149a:	f1ba 0f01 	cmp.w	sl, #1
 801149e:	f1a4 0408 	sub.w	r4, r4, #8
 80114a2:	f300 8083 	bgt.w	80115ac <__kernel_rem_pio2+0x62c>
 80114a6:	9c05      	ldr	r4, [sp, #20]
 80114a8:	ab48      	add	r3, sp, #288	; 0x120
 80114aa:	441c      	add	r4, r3
 80114ac:	2000      	movs	r0, #0
 80114ae:	2100      	movs	r1, #0
 80114b0:	2d01      	cmp	r5, #1
 80114b2:	f300 809a 	bgt.w	80115ea <__kernel_rem_pio2+0x66a>
 80114b6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80114ba:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80114be:	f1bb 0f00 	cmp.w	fp, #0
 80114c2:	f040 8098 	bne.w	80115f6 <__kernel_rem_pio2+0x676>
 80114c6:	9b04      	ldr	r3, [sp, #16]
 80114c8:	e9c3 7800 	strd	r7, r8, [r3]
 80114cc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80114d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80114d4:	e7c6      	b.n	8011464 <__kernel_rem_pio2+0x4e4>
 80114d6:	9e05      	ldr	r6, [sp, #20]
 80114d8:	ab48      	add	r3, sp, #288	; 0x120
 80114da:	441e      	add	r6, r3
 80114dc:	462c      	mov	r4, r5
 80114de:	2000      	movs	r0, #0
 80114e0:	2100      	movs	r1, #0
 80114e2:	2c00      	cmp	r4, #0
 80114e4:	da33      	bge.n	801154e <__kernel_rem_pio2+0x5ce>
 80114e6:	f1bb 0f00 	cmp.w	fp, #0
 80114ea:	d036      	beq.n	801155a <__kernel_rem_pio2+0x5da>
 80114ec:	4602      	mov	r2, r0
 80114ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114f2:	9c04      	ldr	r4, [sp, #16]
 80114f4:	e9c4 2300 	strd	r2, r3, [r4]
 80114f8:	4602      	mov	r2, r0
 80114fa:	460b      	mov	r3, r1
 80114fc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011500:	f7ee fe6a 	bl	80001d8 <__aeabi_dsub>
 8011504:	ae4a      	add	r6, sp, #296	; 0x128
 8011506:	2401      	movs	r4, #1
 8011508:	42a5      	cmp	r5, r4
 801150a:	da29      	bge.n	8011560 <__kernel_rem_pio2+0x5e0>
 801150c:	f1bb 0f00 	cmp.w	fp, #0
 8011510:	d002      	beq.n	8011518 <__kernel_rem_pio2+0x598>
 8011512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011516:	4619      	mov	r1, r3
 8011518:	9b04      	ldr	r3, [sp, #16]
 801151a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801151e:	e7a1      	b.n	8011464 <__kernel_rem_pio2+0x4e4>
 8011520:	9c05      	ldr	r4, [sp, #20]
 8011522:	ab48      	add	r3, sp, #288	; 0x120
 8011524:	441c      	add	r4, r3
 8011526:	2000      	movs	r0, #0
 8011528:	2100      	movs	r1, #0
 801152a:	2d00      	cmp	r5, #0
 801152c:	da09      	bge.n	8011542 <__kernel_rem_pio2+0x5c2>
 801152e:	f1bb 0f00 	cmp.w	fp, #0
 8011532:	d002      	beq.n	801153a <__kernel_rem_pio2+0x5ba>
 8011534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011538:	4619      	mov	r1, r3
 801153a:	9b04      	ldr	r3, [sp, #16]
 801153c:	e9c3 0100 	strd	r0, r1, [r3]
 8011540:	e790      	b.n	8011464 <__kernel_rem_pio2+0x4e4>
 8011542:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011546:	f7ee fe49 	bl	80001dc <__adddf3>
 801154a:	3d01      	subs	r5, #1
 801154c:	e7ed      	b.n	801152a <__kernel_rem_pio2+0x5aa>
 801154e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011552:	f7ee fe43 	bl	80001dc <__adddf3>
 8011556:	3c01      	subs	r4, #1
 8011558:	e7c3      	b.n	80114e2 <__kernel_rem_pio2+0x562>
 801155a:	4602      	mov	r2, r0
 801155c:	460b      	mov	r3, r1
 801155e:	e7c8      	b.n	80114f2 <__kernel_rem_pio2+0x572>
 8011560:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011564:	f7ee fe3a 	bl	80001dc <__adddf3>
 8011568:	3401      	adds	r4, #1
 801156a:	e7cd      	b.n	8011508 <__kernel_rem_pio2+0x588>
 801156c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011570:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011574:	9b00      	ldr	r3, [sp, #0]
 8011576:	3b01      	subs	r3, #1
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	4632      	mov	r2, r6
 801157c:	463b      	mov	r3, r7
 801157e:	4640      	mov	r0, r8
 8011580:	4649      	mov	r1, r9
 8011582:	f7ee fe2b 	bl	80001dc <__adddf3>
 8011586:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801158a:	4602      	mov	r2, r0
 801158c:	460b      	mov	r3, r1
 801158e:	4640      	mov	r0, r8
 8011590:	4649      	mov	r1, r9
 8011592:	f7ee fe21 	bl	80001d8 <__aeabi_dsub>
 8011596:	4632      	mov	r2, r6
 8011598:	463b      	mov	r3, r7
 801159a:	f7ee fe1f 	bl	80001dc <__adddf3>
 801159e:	ed9d 7b06 	vldr	d7, [sp, #24]
 80115a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80115a6:	ed8a 7b00 	vstr	d7, [sl]
 80115aa:	e770      	b.n	801148e <__kernel_rem_pio2+0x50e>
 80115ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80115b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80115b4:	4640      	mov	r0, r8
 80115b6:	4632      	mov	r2, r6
 80115b8:	463b      	mov	r3, r7
 80115ba:	4649      	mov	r1, r9
 80115bc:	f7ee fe0e 	bl	80001dc <__adddf3>
 80115c0:	e9cd 0100 	strd	r0, r1, [sp]
 80115c4:	4602      	mov	r2, r0
 80115c6:	460b      	mov	r3, r1
 80115c8:	4640      	mov	r0, r8
 80115ca:	4649      	mov	r1, r9
 80115cc:	f7ee fe04 	bl	80001d8 <__aeabi_dsub>
 80115d0:	4632      	mov	r2, r6
 80115d2:	463b      	mov	r3, r7
 80115d4:	f7ee fe02 	bl	80001dc <__adddf3>
 80115d8:	ed9d 7b00 	vldr	d7, [sp]
 80115dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80115e0:	ed84 7b00 	vstr	d7, [r4]
 80115e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115e8:	e757      	b.n	801149a <__kernel_rem_pio2+0x51a>
 80115ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80115ee:	f7ee fdf5 	bl	80001dc <__adddf3>
 80115f2:	3d01      	subs	r5, #1
 80115f4:	e75c      	b.n	80114b0 <__kernel_rem_pio2+0x530>
 80115f6:	9b04      	ldr	r3, [sp, #16]
 80115f8:	9a04      	ldr	r2, [sp, #16]
 80115fa:	601f      	str	r7, [r3, #0]
 80115fc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011600:	605c      	str	r4, [r3, #4]
 8011602:	609d      	str	r5, [r3, #8]
 8011604:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011608:	60d3      	str	r3, [r2, #12]
 801160a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801160e:	6110      	str	r0, [r2, #16]
 8011610:	6153      	str	r3, [r2, #20]
 8011612:	e727      	b.n	8011464 <__kernel_rem_pio2+0x4e4>
 8011614:	41700000 	.word	0x41700000
 8011618:	3e700000 	.word	0x3e700000
 801161c:	00000000 	.word	0x00000000

08011620 <scalbn>:
 8011620:	b570      	push	{r4, r5, r6, lr}
 8011622:	ec55 4b10 	vmov	r4, r5, d0
 8011626:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801162a:	4606      	mov	r6, r0
 801162c:	462b      	mov	r3, r5
 801162e:	b999      	cbnz	r1, 8011658 <scalbn+0x38>
 8011630:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011634:	4323      	orrs	r3, r4
 8011636:	d03f      	beq.n	80116b8 <scalbn+0x98>
 8011638:	4b35      	ldr	r3, [pc, #212]	; (8011710 <scalbn+0xf0>)
 801163a:	4629      	mov	r1, r5
 801163c:	ee10 0a10 	vmov	r0, s0
 8011640:	2200      	movs	r2, #0
 8011642:	f7ee ff81 	bl	8000548 <__aeabi_dmul>
 8011646:	4b33      	ldr	r3, [pc, #204]	; (8011714 <scalbn+0xf4>)
 8011648:	429e      	cmp	r6, r3
 801164a:	4604      	mov	r4, r0
 801164c:	460d      	mov	r5, r1
 801164e:	da10      	bge.n	8011672 <scalbn+0x52>
 8011650:	a327      	add	r3, pc, #156	; (adr r3, 80116f0 <scalbn+0xd0>)
 8011652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011656:	e01f      	b.n	8011698 <scalbn+0x78>
 8011658:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801165c:	4291      	cmp	r1, r2
 801165e:	d10c      	bne.n	801167a <scalbn+0x5a>
 8011660:	ee10 2a10 	vmov	r2, s0
 8011664:	4620      	mov	r0, r4
 8011666:	4629      	mov	r1, r5
 8011668:	f7ee fdb8 	bl	80001dc <__adddf3>
 801166c:	4604      	mov	r4, r0
 801166e:	460d      	mov	r5, r1
 8011670:	e022      	b.n	80116b8 <scalbn+0x98>
 8011672:	460b      	mov	r3, r1
 8011674:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011678:	3936      	subs	r1, #54	; 0x36
 801167a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801167e:	4296      	cmp	r6, r2
 8011680:	dd0d      	ble.n	801169e <scalbn+0x7e>
 8011682:	2d00      	cmp	r5, #0
 8011684:	a11c      	add	r1, pc, #112	; (adr r1, 80116f8 <scalbn+0xd8>)
 8011686:	e9d1 0100 	ldrd	r0, r1, [r1]
 801168a:	da02      	bge.n	8011692 <scalbn+0x72>
 801168c:	a11c      	add	r1, pc, #112	; (adr r1, 8011700 <scalbn+0xe0>)
 801168e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011692:	a319      	add	r3, pc, #100	; (adr r3, 80116f8 <scalbn+0xd8>)
 8011694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011698:	f7ee ff56 	bl	8000548 <__aeabi_dmul>
 801169c:	e7e6      	b.n	801166c <scalbn+0x4c>
 801169e:	1872      	adds	r2, r6, r1
 80116a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80116a4:	428a      	cmp	r2, r1
 80116a6:	dcec      	bgt.n	8011682 <scalbn+0x62>
 80116a8:	2a00      	cmp	r2, #0
 80116aa:	dd08      	ble.n	80116be <scalbn+0x9e>
 80116ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80116b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80116b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80116b8:	ec45 4b10 	vmov	d0, r4, r5
 80116bc:	bd70      	pop	{r4, r5, r6, pc}
 80116be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80116c2:	da08      	bge.n	80116d6 <scalbn+0xb6>
 80116c4:	2d00      	cmp	r5, #0
 80116c6:	a10a      	add	r1, pc, #40	; (adr r1, 80116f0 <scalbn+0xd0>)
 80116c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116cc:	dac0      	bge.n	8011650 <scalbn+0x30>
 80116ce:	a10e      	add	r1, pc, #56	; (adr r1, 8011708 <scalbn+0xe8>)
 80116d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116d4:	e7bc      	b.n	8011650 <scalbn+0x30>
 80116d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80116da:	3236      	adds	r2, #54	; 0x36
 80116dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80116e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80116e4:	4620      	mov	r0, r4
 80116e6:	4b0c      	ldr	r3, [pc, #48]	; (8011718 <scalbn+0xf8>)
 80116e8:	2200      	movs	r2, #0
 80116ea:	e7d5      	b.n	8011698 <scalbn+0x78>
 80116ec:	f3af 8000 	nop.w
 80116f0:	c2f8f359 	.word	0xc2f8f359
 80116f4:	01a56e1f 	.word	0x01a56e1f
 80116f8:	8800759c 	.word	0x8800759c
 80116fc:	7e37e43c 	.word	0x7e37e43c
 8011700:	8800759c 	.word	0x8800759c
 8011704:	fe37e43c 	.word	0xfe37e43c
 8011708:	c2f8f359 	.word	0xc2f8f359
 801170c:	81a56e1f 	.word	0x81a56e1f
 8011710:	43500000 	.word	0x43500000
 8011714:	ffff3cb0 	.word	0xffff3cb0
 8011718:	3c900000 	.word	0x3c900000
 801171c:	00000000 	.word	0x00000000

08011720 <floor>:
 8011720:	ec51 0b10 	vmov	r0, r1, d0
 8011724:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801172c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011730:	2e13      	cmp	r6, #19
 8011732:	ee10 5a10 	vmov	r5, s0
 8011736:	ee10 8a10 	vmov	r8, s0
 801173a:	460c      	mov	r4, r1
 801173c:	dc31      	bgt.n	80117a2 <floor+0x82>
 801173e:	2e00      	cmp	r6, #0
 8011740:	da14      	bge.n	801176c <floor+0x4c>
 8011742:	a333      	add	r3, pc, #204	; (adr r3, 8011810 <floor+0xf0>)
 8011744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011748:	f7ee fd48 	bl	80001dc <__adddf3>
 801174c:	2200      	movs	r2, #0
 801174e:	2300      	movs	r3, #0
 8011750:	f7ef f98a 	bl	8000a68 <__aeabi_dcmpgt>
 8011754:	b138      	cbz	r0, 8011766 <floor+0x46>
 8011756:	2c00      	cmp	r4, #0
 8011758:	da53      	bge.n	8011802 <floor+0xe2>
 801175a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801175e:	4325      	orrs	r5, r4
 8011760:	d052      	beq.n	8011808 <floor+0xe8>
 8011762:	4c2d      	ldr	r4, [pc, #180]	; (8011818 <floor+0xf8>)
 8011764:	2500      	movs	r5, #0
 8011766:	4621      	mov	r1, r4
 8011768:	4628      	mov	r0, r5
 801176a:	e024      	b.n	80117b6 <floor+0x96>
 801176c:	4f2b      	ldr	r7, [pc, #172]	; (801181c <floor+0xfc>)
 801176e:	4137      	asrs	r7, r6
 8011770:	ea01 0307 	and.w	r3, r1, r7
 8011774:	4303      	orrs	r3, r0
 8011776:	d01e      	beq.n	80117b6 <floor+0x96>
 8011778:	a325      	add	r3, pc, #148	; (adr r3, 8011810 <floor+0xf0>)
 801177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177e:	f7ee fd2d 	bl	80001dc <__adddf3>
 8011782:	2200      	movs	r2, #0
 8011784:	2300      	movs	r3, #0
 8011786:	f7ef f96f 	bl	8000a68 <__aeabi_dcmpgt>
 801178a:	2800      	cmp	r0, #0
 801178c:	d0eb      	beq.n	8011766 <floor+0x46>
 801178e:	2c00      	cmp	r4, #0
 8011790:	bfbe      	ittt	lt
 8011792:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011796:	4133      	asrlt	r3, r6
 8011798:	18e4      	addlt	r4, r4, r3
 801179a:	ea24 0407 	bic.w	r4, r4, r7
 801179e:	2500      	movs	r5, #0
 80117a0:	e7e1      	b.n	8011766 <floor+0x46>
 80117a2:	2e33      	cmp	r6, #51	; 0x33
 80117a4:	dd0b      	ble.n	80117be <floor+0x9e>
 80117a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80117aa:	d104      	bne.n	80117b6 <floor+0x96>
 80117ac:	ee10 2a10 	vmov	r2, s0
 80117b0:	460b      	mov	r3, r1
 80117b2:	f7ee fd13 	bl	80001dc <__adddf3>
 80117b6:	ec41 0b10 	vmov	d0, r0, r1
 80117ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117be:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80117c2:	f04f 37ff 	mov.w	r7, #4294967295
 80117c6:	40df      	lsrs	r7, r3
 80117c8:	4238      	tst	r0, r7
 80117ca:	d0f4      	beq.n	80117b6 <floor+0x96>
 80117cc:	a310      	add	r3, pc, #64	; (adr r3, 8011810 <floor+0xf0>)
 80117ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d2:	f7ee fd03 	bl	80001dc <__adddf3>
 80117d6:	2200      	movs	r2, #0
 80117d8:	2300      	movs	r3, #0
 80117da:	f7ef f945 	bl	8000a68 <__aeabi_dcmpgt>
 80117de:	2800      	cmp	r0, #0
 80117e0:	d0c1      	beq.n	8011766 <floor+0x46>
 80117e2:	2c00      	cmp	r4, #0
 80117e4:	da0a      	bge.n	80117fc <floor+0xdc>
 80117e6:	2e14      	cmp	r6, #20
 80117e8:	d101      	bne.n	80117ee <floor+0xce>
 80117ea:	3401      	adds	r4, #1
 80117ec:	e006      	b.n	80117fc <floor+0xdc>
 80117ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80117f2:	2301      	movs	r3, #1
 80117f4:	40b3      	lsls	r3, r6
 80117f6:	441d      	add	r5, r3
 80117f8:	45a8      	cmp	r8, r5
 80117fa:	d8f6      	bhi.n	80117ea <floor+0xca>
 80117fc:	ea25 0507 	bic.w	r5, r5, r7
 8011800:	e7b1      	b.n	8011766 <floor+0x46>
 8011802:	2500      	movs	r5, #0
 8011804:	462c      	mov	r4, r5
 8011806:	e7ae      	b.n	8011766 <floor+0x46>
 8011808:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801180c:	e7ab      	b.n	8011766 <floor+0x46>
 801180e:	bf00      	nop
 8011810:	8800759c 	.word	0x8800759c
 8011814:	7e37e43c 	.word	0x7e37e43c
 8011818:	bff00000 	.word	0xbff00000
 801181c:	000fffff 	.word	0x000fffff

08011820 <_init>:
 8011820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011822:	bf00      	nop
 8011824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011826:	bc08      	pop	{r3}
 8011828:	469e      	mov	lr, r3
 801182a:	4770      	bx	lr

0801182c <_fini>:
 801182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801182e:	bf00      	nop
 8011830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011832:	bc08      	pop	{r3}
 8011834:	469e      	mov	lr, r3
 8011836:	4770      	bx	lr
=======
 800fe16:	bf00      	nop
 800fe18:	3714      	adds	r7, #20
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
 800fe22:	bf00      	nop
 800fe24:	20003038 	.word	0x20003038
 800fe28:	20003040 	.word	0x20003040

0800fe2c <swapfunc>:
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	b510      	push	{r4, lr}
 800fe30:	d00a      	beq.n	800fe48 <swapfunc+0x1c>
 800fe32:	0892      	lsrs	r2, r2, #2
 800fe34:	3a01      	subs	r2, #1
 800fe36:	6803      	ldr	r3, [r0, #0]
 800fe38:	680c      	ldr	r4, [r1, #0]
 800fe3a:	f840 4b04 	str.w	r4, [r0], #4
 800fe3e:	2a00      	cmp	r2, #0
 800fe40:	f841 3b04 	str.w	r3, [r1], #4
 800fe44:	dcf6      	bgt.n	800fe34 <swapfunc+0x8>
 800fe46:	bd10      	pop	{r4, pc}
 800fe48:	4402      	add	r2, r0
 800fe4a:	780c      	ldrb	r4, [r1, #0]
 800fe4c:	7803      	ldrb	r3, [r0, #0]
 800fe4e:	f800 4b01 	strb.w	r4, [r0], #1
 800fe52:	f801 3b01 	strb.w	r3, [r1], #1
 800fe56:	1a13      	subs	r3, r2, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	dcf6      	bgt.n	800fe4a <swapfunc+0x1e>
 800fe5c:	e7f3      	b.n	800fe46 <swapfunc+0x1a>

0800fe5e <med3.constprop.0>:
 800fe5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe60:	460c      	mov	r4, r1
 800fe62:	4615      	mov	r5, r2
 800fe64:	4607      	mov	r7, r0
 800fe66:	461e      	mov	r6, r3
 800fe68:	4798      	blx	r3
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	4620      	mov	r0, r4
 800fe70:	da0a      	bge.n	800fe88 <med3.constprop.0+0x2a>
 800fe72:	47b0      	blx	r6
 800fe74:	2800      	cmp	r0, #0
 800fe76:	db05      	blt.n	800fe84 <med3.constprop.0+0x26>
 800fe78:	4629      	mov	r1, r5
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	47b0      	blx	r6
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	db0a      	blt.n	800fe98 <med3.constprop.0+0x3a>
 800fe82:	463c      	mov	r4, r7
 800fe84:	4620      	mov	r0, r4
 800fe86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe88:	47b0      	blx	r6
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	dcfa      	bgt.n	800fe84 <med3.constprop.0+0x26>
 800fe8e:	4629      	mov	r1, r5
 800fe90:	4638      	mov	r0, r7
 800fe92:	47b0      	blx	r6
 800fe94:	2800      	cmp	r0, #0
 800fe96:	dbf4      	blt.n	800fe82 <med3.constprop.0+0x24>
 800fe98:	462c      	mov	r4, r5
 800fe9a:	e7f3      	b.n	800fe84 <med3.constprop.0+0x26>

0800fe9c <qsort>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	469a      	mov	sl, r3
 800fea2:	ea40 0302 	orr.w	r3, r0, r2
 800fea6:	079b      	lsls	r3, r3, #30
 800fea8:	b097      	sub	sp, #92	; 0x5c
 800feaa:	4606      	mov	r6, r0
 800feac:	4614      	mov	r4, r2
 800feae:	d11a      	bne.n	800fee6 <qsort+0x4a>
 800feb0:	f1b2 0804 	subs.w	r8, r2, #4
 800feb4:	bf18      	it	ne
 800feb6:	f04f 0801 	movne.w	r8, #1
 800feba:	2300      	movs	r3, #0
 800febc:	9302      	str	r3, [sp, #8]
 800febe:	1933      	adds	r3, r6, r4
 800fec0:	fb04 f701 	mul.w	r7, r4, r1
 800fec4:	9301      	str	r3, [sp, #4]
 800fec6:	2906      	cmp	r1, #6
 800fec8:	eb06 0307 	add.w	r3, r6, r7
 800fecc:	9303      	str	r3, [sp, #12]
 800fece:	d82a      	bhi.n	800ff26 <qsort+0x8a>
 800fed0:	9b01      	ldr	r3, [sp, #4]
 800fed2:	9a03      	ldr	r2, [sp, #12]
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d310      	bcc.n	800fefa <qsort+0x5e>
 800fed8:	9b02      	ldr	r3, [sp, #8]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f040 811e 	bne.w	801011c <qsort+0x280>
 800fee0:	b017      	add	sp, #92	; 0x5c
 800fee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee6:	f04f 0802 	mov.w	r8, #2
 800feea:	e7e6      	b.n	800feba <qsort+0x1e>
 800feec:	4643      	mov	r3, r8
 800feee:	4622      	mov	r2, r4
 800fef0:	4639      	mov	r1, r7
 800fef2:	4628      	mov	r0, r5
 800fef4:	f7ff ff9a 	bl	800fe2c <swapfunc>
 800fef8:	e00e      	b.n	800ff18 <qsort+0x7c>
 800fefa:	9d01      	ldr	r5, [sp, #4]
 800fefc:	e00d      	b.n	800ff1a <qsort+0x7e>
 800fefe:	1b2f      	subs	r7, r5, r4
 800ff00:	4629      	mov	r1, r5
 800ff02:	4638      	mov	r0, r7
 800ff04:	47d0      	blx	sl
 800ff06:	2800      	cmp	r0, #0
 800ff08:	dd09      	ble.n	800ff1e <qsort+0x82>
 800ff0a:	f1b8 0f00 	cmp.w	r8, #0
 800ff0e:	d1ed      	bne.n	800feec <qsort+0x50>
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	602a      	str	r2, [r5, #0]
 800ff16:	603b      	str	r3, [r7, #0]
 800ff18:	463d      	mov	r5, r7
 800ff1a:	42ae      	cmp	r6, r5
 800ff1c:	d3ef      	bcc.n	800fefe <qsort+0x62>
 800ff1e:	9b01      	ldr	r3, [sp, #4]
 800ff20:	4423      	add	r3, r4
 800ff22:	9301      	str	r3, [sp, #4]
 800ff24:	e7d4      	b.n	800fed0 <qsort+0x34>
 800ff26:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800ff2a:	1b3f      	subs	r7, r7, r4
 800ff2c:	2907      	cmp	r1, #7
 800ff2e:	fb04 6909 	mla	r9, r4, r9, r6
 800ff32:	4437      	add	r7, r6
 800ff34:	d021      	beq.n	800ff7a <qsort+0xde>
 800ff36:	2928      	cmp	r1, #40	; 0x28
 800ff38:	d944      	bls.n	800ffc4 <qsort+0x128>
 800ff3a:	08cd      	lsrs	r5, r1, #3
 800ff3c:	4365      	muls	r5, r4
 800ff3e:	4653      	mov	r3, sl
 800ff40:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800ff44:	1971      	adds	r1, r6, r5
 800ff46:	4630      	mov	r0, r6
 800ff48:	f7ff ff89 	bl	800fe5e <med3.constprop.0>
 800ff4c:	4649      	mov	r1, r9
 800ff4e:	eb09 0205 	add.w	r2, r9, r5
 800ff52:	4653      	mov	r3, sl
 800ff54:	4683      	mov	fp, r0
 800ff56:	1b48      	subs	r0, r1, r5
 800ff58:	f7ff ff81 	bl	800fe5e <med3.constprop.0>
 800ff5c:	463a      	mov	r2, r7
 800ff5e:	4681      	mov	r9, r0
 800ff60:	4653      	mov	r3, sl
 800ff62:	1b79      	subs	r1, r7, r5
 800ff64:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800ff68:	f7ff ff79 	bl	800fe5e <med3.constprop.0>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	4649      	mov	r1, r9
 800ff70:	4653      	mov	r3, sl
 800ff72:	4658      	mov	r0, fp
 800ff74:	f7ff ff73 	bl	800fe5e <med3.constprop.0>
 800ff78:	4681      	mov	r9, r0
 800ff7a:	f1b8 0f00 	cmp.w	r8, #0
 800ff7e:	d124      	bne.n	800ffca <qsort+0x12e>
 800ff80:	6833      	ldr	r3, [r6, #0]
 800ff82:	f8d9 2000 	ldr.w	r2, [r9]
 800ff86:	6032      	str	r2, [r6, #0]
 800ff88:	f8c9 3000 	str.w	r3, [r9]
 800ff8c:	eb06 0b04 	add.w	fp, r6, r4
 800ff90:	46b9      	mov	r9, r7
 800ff92:	465d      	mov	r5, fp
 800ff94:	2300      	movs	r3, #0
 800ff96:	45bb      	cmp	fp, r7
 800ff98:	d835      	bhi.n	8010006 <qsort+0x16a>
 800ff9a:	4631      	mov	r1, r6
 800ff9c:	4658      	mov	r0, fp
 800ff9e:	9304      	str	r3, [sp, #16]
 800ffa0:	47d0      	blx	sl
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	9b04      	ldr	r3, [sp, #16]
 800ffa6:	dc3e      	bgt.n	8010026 <qsort+0x18a>
 800ffa8:	d10a      	bne.n	800ffc0 <qsort+0x124>
 800ffaa:	f1b8 0f00 	cmp.w	r8, #0
 800ffae:	d113      	bne.n	800ffd8 <qsort+0x13c>
 800ffb0:	682b      	ldr	r3, [r5, #0]
 800ffb2:	f8db 2000 	ldr.w	r2, [fp]
 800ffb6:	602a      	str	r2, [r5, #0]
 800ffb8:	f8cb 3000 	str.w	r3, [fp]
 800ffbc:	4425      	add	r5, r4
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	44a3      	add	fp, r4
 800ffc2:	e7e8      	b.n	800ff96 <qsort+0xfa>
 800ffc4:	463a      	mov	r2, r7
 800ffc6:	46b3      	mov	fp, r6
 800ffc8:	e7d1      	b.n	800ff6e <qsort+0xd2>
 800ffca:	4643      	mov	r3, r8
 800ffcc:	4622      	mov	r2, r4
 800ffce:	4649      	mov	r1, r9
 800ffd0:	4630      	mov	r0, r6
 800ffd2:	f7ff ff2b 	bl	800fe2c <swapfunc>
 800ffd6:	e7d9      	b.n	800ff8c <qsort+0xf0>
 800ffd8:	4643      	mov	r3, r8
 800ffda:	4622      	mov	r2, r4
 800ffdc:	4659      	mov	r1, fp
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f7ff ff24 	bl	800fe2c <swapfunc>
 800ffe4:	e7ea      	b.n	800ffbc <qsort+0x120>
 800ffe6:	d10b      	bne.n	8010000 <qsort+0x164>
 800ffe8:	f1b8 0f00 	cmp.w	r8, #0
 800ffec:	d114      	bne.n	8010018 <qsort+0x17c>
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	f8d9 2000 	ldr.w	r2, [r9]
 800fff4:	603a      	str	r2, [r7, #0]
 800fff6:	f8c9 3000 	str.w	r3, [r9]
 800fffa:	eba9 0904 	sub.w	r9, r9, r4
 800fffe:	2301      	movs	r3, #1
 8010000:	9f04      	ldr	r7, [sp, #16]
 8010002:	45bb      	cmp	fp, r7
 8010004:	d90f      	bls.n	8010026 <qsort+0x18a>
 8010006:	2b00      	cmp	r3, #0
 8010008:	d143      	bne.n	8010092 <qsort+0x1f6>
 801000a:	9b01      	ldr	r3, [sp, #4]
 801000c:	9a03      	ldr	r2, [sp, #12]
 801000e:	4293      	cmp	r3, r2
 8010010:	f4bf af62 	bcs.w	800fed8 <qsort+0x3c>
 8010014:	9d01      	ldr	r5, [sp, #4]
 8010016:	e036      	b.n	8010086 <qsort+0x1ea>
 8010018:	4643      	mov	r3, r8
 801001a:	4622      	mov	r2, r4
 801001c:	4649      	mov	r1, r9
 801001e:	4638      	mov	r0, r7
 8010020:	f7ff ff04 	bl	800fe2c <swapfunc>
 8010024:	e7e9      	b.n	800fffa <qsort+0x15e>
 8010026:	4631      	mov	r1, r6
 8010028:	4638      	mov	r0, r7
 801002a:	9305      	str	r3, [sp, #20]
 801002c:	47d0      	blx	sl
 801002e:	1b3b      	subs	r3, r7, r4
 8010030:	2800      	cmp	r0, #0
 8010032:	9304      	str	r3, [sp, #16]
 8010034:	9b05      	ldr	r3, [sp, #20]
 8010036:	dad6      	bge.n	800ffe6 <qsort+0x14a>
 8010038:	f1b8 0f00 	cmp.w	r8, #0
 801003c:	d006      	beq.n	801004c <qsort+0x1b0>
 801003e:	4643      	mov	r3, r8
 8010040:	4622      	mov	r2, r4
 8010042:	4639      	mov	r1, r7
 8010044:	4658      	mov	r0, fp
 8010046:	f7ff fef1 	bl	800fe2c <swapfunc>
 801004a:	e005      	b.n	8010058 <qsort+0x1bc>
 801004c:	f8db 3000 	ldr.w	r3, [fp]
 8010050:	683a      	ldr	r2, [r7, #0]
 8010052:	f8cb 2000 	str.w	r2, [fp]
 8010056:	603b      	str	r3, [r7, #0]
 8010058:	9f04      	ldr	r7, [sp, #16]
 801005a:	e7b0      	b.n	800ffbe <qsort+0x122>
 801005c:	4643      	mov	r3, r8
 801005e:	4622      	mov	r2, r4
 8010060:	4639      	mov	r1, r7
 8010062:	4628      	mov	r0, r5
 8010064:	f7ff fee2 	bl	800fe2c <swapfunc>
 8010068:	e00c      	b.n	8010084 <qsort+0x1e8>
 801006a:	1b2f      	subs	r7, r5, r4
 801006c:	4629      	mov	r1, r5
 801006e:	4638      	mov	r0, r7
 8010070:	47d0      	blx	sl
 8010072:	2800      	cmp	r0, #0
 8010074:	dd09      	ble.n	801008a <qsort+0x1ee>
 8010076:	f1b8 0f00 	cmp.w	r8, #0
 801007a:	d1ef      	bne.n	801005c <qsort+0x1c0>
 801007c:	682b      	ldr	r3, [r5, #0]
 801007e:	683a      	ldr	r2, [r7, #0]
 8010080:	602a      	str	r2, [r5, #0]
 8010082:	603b      	str	r3, [r7, #0]
 8010084:	463d      	mov	r5, r7
 8010086:	42ae      	cmp	r6, r5
 8010088:	d3ef      	bcc.n	801006a <qsort+0x1ce>
 801008a:	9b01      	ldr	r3, [sp, #4]
 801008c:	4423      	add	r3, r4
 801008e:	9301      	str	r3, [sp, #4]
 8010090:	e7bb      	b.n	801000a <qsort+0x16e>
 8010092:	ebab 0305 	sub.w	r3, fp, r5
 8010096:	1baa      	subs	r2, r5, r6
 8010098:	429a      	cmp	r2, r3
 801009a:	bfa8      	it	ge
 801009c:	461a      	movge	r2, r3
 801009e:	9301      	str	r3, [sp, #4]
 80100a0:	b12a      	cbz	r2, 80100ae <qsort+0x212>
 80100a2:	4643      	mov	r3, r8
 80100a4:	ebab 0102 	sub.w	r1, fp, r2
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7ff febf 	bl	800fe2c <swapfunc>
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	eba3 0209 	sub.w	r2, r3, r9
 80100b4:	eba9 0707 	sub.w	r7, r9, r7
 80100b8:	1b12      	subs	r2, r2, r4
 80100ba:	42ba      	cmp	r2, r7
 80100bc:	bf28      	it	cs
 80100be:	463a      	movcs	r2, r7
 80100c0:	b12a      	cbz	r2, 80100ce <qsort+0x232>
 80100c2:	9903      	ldr	r1, [sp, #12]
 80100c4:	4643      	mov	r3, r8
 80100c6:	1a89      	subs	r1, r1, r2
 80100c8:	4658      	mov	r0, fp
 80100ca:	f7ff feaf 	bl	800fe2c <swapfunc>
 80100ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80100d2:	9b03      	ldr	r3, [sp, #12]
 80100d4:	454f      	cmp	r7, r9
 80100d6:	eba3 0007 	sub.w	r0, r3, r7
 80100da:	d904      	bls.n	80100e6 <qsort+0x24a>
 80100dc:	4633      	mov	r3, r6
 80100de:	46b9      	mov	r9, r7
 80100e0:	9f01      	ldr	r7, [sp, #4]
 80100e2:	4606      	mov	r6, r0
 80100e4:	4618      	mov	r0, r3
 80100e6:	42a7      	cmp	r7, r4
 80100e8:	d921      	bls.n	801012e <qsort+0x292>
 80100ea:	fbb7 f1f4 	udiv	r1, r7, r4
 80100ee:	9b02      	ldr	r3, [sp, #8]
 80100f0:	2b07      	cmp	r3, #7
 80100f2:	d80d      	bhi.n	8010110 <qsort+0x274>
 80100f4:	aa16      	add	r2, sp, #88	; 0x58
 80100f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80100fa:	fbb9 f2f4 	udiv	r2, r9, r4
 80100fe:	f843 6c40 	str.w	r6, [r3, #-64]
 8010102:	f843 2c3c 	str.w	r2, [r3, #-60]
 8010106:	9b02      	ldr	r3, [sp, #8]
 8010108:	3301      	adds	r3, #1
 801010a:	9302      	str	r3, [sp, #8]
 801010c:	4606      	mov	r6, r0
 801010e:	e6d6      	b.n	800febe <qsort+0x22>
 8010110:	4653      	mov	r3, sl
 8010112:	4622      	mov	r2, r4
 8010114:	f7ff fec2 	bl	800fe9c <qsort>
 8010118:	45a1      	cmp	r9, r4
 801011a:	d80b      	bhi.n	8010134 <qsort+0x298>
 801011c:	9b02      	ldr	r3, [sp, #8]
 801011e:	aa16      	add	r2, sp, #88	; 0x58
 8010120:	3b01      	subs	r3, #1
 8010122:	9302      	str	r3, [sp, #8]
 8010124:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010128:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 801012c:	e7ee      	b.n	801010c <qsort+0x270>
 801012e:	45a1      	cmp	r9, r4
 8010130:	f67f aed2 	bls.w	800fed8 <qsort+0x3c>
 8010134:	fbb9 f1f4 	udiv	r1, r9, r4
 8010138:	4630      	mov	r0, r6
 801013a:	e7e7      	b.n	801010c <qsort+0x270>

0801013c <memset>:
 801013c:	4402      	add	r2, r0
 801013e:	4603      	mov	r3, r0
 8010140:	4293      	cmp	r3, r2
 8010142:	d100      	bne.n	8010146 <memset+0xa>
 8010144:	4770      	bx	lr
 8010146:	f803 1b01 	strb.w	r1, [r3], #1
 801014a:	e7f9      	b.n	8010140 <memset+0x4>

0801014c <_reclaim_reent>:
 801014c:	4b29      	ldr	r3, [pc, #164]	; (80101f4 <_reclaim_reent+0xa8>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4283      	cmp	r3, r0
 8010152:	b570      	push	{r4, r5, r6, lr}
 8010154:	4604      	mov	r4, r0
 8010156:	d04b      	beq.n	80101f0 <_reclaim_reent+0xa4>
 8010158:	69c3      	ldr	r3, [r0, #28]
 801015a:	b143      	cbz	r3, 801016e <_reclaim_reent+0x22>
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d144      	bne.n	80101ec <_reclaim_reent+0xa0>
 8010162:	69e3      	ldr	r3, [r4, #28]
 8010164:	6819      	ldr	r1, [r3, #0]
 8010166:	b111      	cbz	r1, 801016e <_reclaim_reent+0x22>
 8010168:	4620      	mov	r0, r4
 801016a:	f000 f87f 	bl	801026c <_free_r>
 801016e:	6961      	ldr	r1, [r4, #20]
 8010170:	b111      	cbz	r1, 8010178 <_reclaim_reent+0x2c>
 8010172:	4620      	mov	r0, r4
 8010174:	f000 f87a 	bl	801026c <_free_r>
 8010178:	69e1      	ldr	r1, [r4, #28]
 801017a:	b111      	cbz	r1, 8010182 <_reclaim_reent+0x36>
 801017c:	4620      	mov	r0, r4
 801017e:	f000 f875 	bl	801026c <_free_r>
 8010182:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010184:	b111      	cbz	r1, 801018c <_reclaim_reent+0x40>
 8010186:	4620      	mov	r0, r4
 8010188:	f000 f870 	bl	801026c <_free_r>
 801018c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801018e:	b111      	cbz	r1, 8010196 <_reclaim_reent+0x4a>
 8010190:	4620      	mov	r0, r4
 8010192:	f000 f86b 	bl	801026c <_free_r>
 8010196:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010198:	b111      	cbz	r1, 80101a0 <_reclaim_reent+0x54>
 801019a:	4620      	mov	r0, r4
 801019c:	f000 f866 	bl	801026c <_free_r>
 80101a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80101a2:	b111      	cbz	r1, 80101aa <_reclaim_reent+0x5e>
 80101a4:	4620      	mov	r0, r4
 80101a6:	f000 f861 	bl	801026c <_free_r>
 80101aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80101ac:	b111      	cbz	r1, 80101b4 <_reclaim_reent+0x68>
 80101ae:	4620      	mov	r0, r4
 80101b0:	f000 f85c 	bl	801026c <_free_r>
 80101b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80101b6:	b111      	cbz	r1, 80101be <_reclaim_reent+0x72>
 80101b8:	4620      	mov	r0, r4
 80101ba:	f000 f857 	bl	801026c <_free_r>
 80101be:	6a23      	ldr	r3, [r4, #32]
 80101c0:	b1b3      	cbz	r3, 80101f0 <_reclaim_reent+0xa4>
 80101c2:	4620      	mov	r0, r4
 80101c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101c8:	4718      	bx	r3
 80101ca:	5949      	ldr	r1, [r1, r5]
 80101cc:	b941      	cbnz	r1, 80101e0 <_reclaim_reent+0x94>
 80101ce:	3504      	adds	r5, #4
 80101d0:	69e3      	ldr	r3, [r4, #28]
 80101d2:	2d80      	cmp	r5, #128	; 0x80
 80101d4:	68d9      	ldr	r1, [r3, #12]
 80101d6:	d1f8      	bne.n	80101ca <_reclaim_reent+0x7e>
 80101d8:	4620      	mov	r0, r4
 80101da:	f000 f847 	bl	801026c <_free_r>
 80101de:	e7c0      	b.n	8010162 <_reclaim_reent+0x16>
 80101e0:	680e      	ldr	r6, [r1, #0]
 80101e2:	4620      	mov	r0, r4
 80101e4:	f000 f842 	bl	801026c <_free_r>
 80101e8:	4631      	mov	r1, r6
 80101ea:	e7ef      	b.n	80101cc <_reclaim_reent+0x80>
 80101ec:	2500      	movs	r5, #0
 80101ee:	e7ef      	b.n	80101d0 <_reclaim_reent+0x84>
 80101f0:	bd70      	pop	{r4, r5, r6, pc}
 80101f2:	bf00      	nop
 80101f4:	20000114 	.word	0x20000114

080101f8 <__errno>:
 80101f8:	4b01      	ldr	r3, [pc, #4]	; (8010200 <__errno+0x8>)
 80101fa:	6818      	ldr	r0, [r3, #0]
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	20000114 	.word	0x20000114

08010204 <__libc_init_array>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	4d0d      	ldr	r5, [pc, #52]	; (801023c <__libc_init_array+0x38>)
 8010208:	4c0d      	ldr	r4, [pc, #52]	; (8010240 <__libc_init_array+0x3c>)
 801020a:	1b64      	subs	r4, r4, r5
 801020c:	10a4      	asrs	r4, r4, #2
 801020e:	2600      	movs	r6, #0
 8010210:	42a6      	cmp	r6, r4
 8010212:	d109      	bne.n	8010228 <__libc_init_array+0x24>
 8010214:	4d0b      	ldr	r5, [pc, #44]	; (8010244 <__libc_init_array+0x40>)
 8010216:	4c0c      	ldr	r4, [pc, #48]	; (8010248 <__libc_init_array+0x44>)
 8010218:	f001 faca 	bl	80117b0 <_init>
 801021c:	1b64      	subs	r4, r4, r5
 801021e:	10a4      	asrs	r4, r4, #2
 8010220:	2600      	movs	r6, #0
 8010222:	42a6      	cmp	r6, r4
 8010224:	d105      	bne.n	8010232 <__libc_init_array+0x2e>
 8010226:	bd70      	pop	{r4, r5, r6, pc}
 8010228:	f855 3b04 	ldr.w	r3, [r5], #4
 801022c:	4798      	blx	r3
 801022e:	3601      	adds	r6, #1
 8010230:	e7ee      	b.n	8010210 <__libc_init_array+0xc>
 8010232:	f855 3b04 	ldr.w	r3, [r5], #4
 8010236:	4798      	blx	r3
 8010238:	3601      	adds	r6, #1
 801023a:	e7f2      	b.n	8010222 <__libc_init_array+0x1e>
 801023c:	08011b80 	.word	0x08011b80
 8010240:	08011b80 	.word	0x08011b80
 8010244:	08011b80 	.word	0x08011b80
 8010248:	08011b84 	.word	0x08011b84

0801024c <__retarget_lock_acquire_recursive>:
 801024c:	4770      	bx	lr

0801024e <__retarget_lock_release_recursive>:
 801024e:	4770      	bx	lr

08010250 <memcpy>:
 8010250:	440a      	add	r2, r1
 8010252:	4291      	cmp	r1, r2
 8010254:	f100 33ff 	add.w	r3, r0, #4294967295
 8010258:	d100      	bne.n	801025c <memcpy+0xc>
 801025a:	4770      	bx	lr
 801025c:	b510      	push	{r4, lr}
 801025e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010266:	4291      	cmp	r1, r2
 8010268:	d1f9      	bne.n	801025e <memcpy+0xe>
 801026a:	bd10      	pop	{r4, pc}

0801026c <_free_r>:
 801026c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801026e:	2900      	cmp	r1, #0
 8010270:	d044      	beq.n	80102fc <_free_r+0x90>
 8010272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010276:	9001      	str	r0, [sp, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	f1a1 0404 	sub.w	r4, r1, #4
 801027e:	bfb8      	it	lt
 8010280:	18e4      	addlt	r4, r4, r3
 8010282:	f000 f83f 	bl	8010304 <__malloc_lock>
 8010286:	4a1e      	ldr	r2, [pc, #120]	; (8010300 <_free_r+0x94>)
 8010288:	9801      	ldr	r0, [sp, #4]
 801028a:	6813      	ldr	r3, [r2, #0]
 801028c:	b933      	cbnz	r3, 801029c <_free_r+0x30>
 801028e:	6063      	str	r3, [r4, #4]
 8010290:	6014      	str	r4, [r2, #0]
 8010292:	b003      	add	sp, #12
 8010294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010298:	f000 b83a 	b.w	8010310 <__malloc_unlock>
 801029c:	42a3      	cmp	r3, r4
 801029e:	d908      	bls.n	80102b2 <_free_r+0x46>
 80102a0:	6825      	ldr	r5, [r4, #0]
 80102a2:	1961      	adds	r1, r4, r5
 80102a4:	428b      	cmp	r3, r1
 80102a6:	bf01      	itttt	eq
 80102a8:	6819      	ldreq	r1, [r3, #0]
 80102aa:	685b      	ldreq	r3, [r3, #4]
 80102ac:	1949      	addeq	r1, r1, r5
 80102ae:	6021      	streq	r1, [r4, #0]
 80102b0:	e7ed      	b.n	801028e <_free_r+0x22>
 80102b2:	461a      	mov	r2, r3
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	b10b      	cbz	r3, 80102bc <_free_r+0x50>
 80102b8:	42a3      	cmp	r3, r4
 80102ba:	d9fa      	bls.n	80102b2 <_free_r+0x46>
 80102bc:	6811      	ldr	r1, [r2, #0]
 80102be:	1855      	adds	r5, r2, r1
 80102c0:	42a5      	cmp	r5, r4
 80102c2:	d10b      	bne.n	80102dc <_free_r+0x70>
 80102c4:	6824      	ldr	r4, [r4, #0]
 80102c6:	4421      	add	r1, r4
 80102c8:	1854      	adds	r4, r2, r1
 80102ca:	42a3      	cmp	r3, r4
 80102cc:	6011      	str	r1, [r2, #0]
 80102ce:	d1e0      	bne.n	8010292 <_free_r+0x26>
 80102d0:	681c      	ldr	r4, [r3, #0]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	6053      	str	r3, [r2, #4]
 80102d6:	440c      	add	r4, r1
 80102d8:	6014      	str	r4, [r2, #0]
 80102da:	e7da      	b.n	8010292 <_free_r+0x26>
 80102dc:	d902      	bls.n	80102e4 <_free_r+0x78>
 80102de:	230c      	movs	r3, #12
 80102e0:	6003      	str	r3, [r0, #0]
 80102e2:	e7d6      	b.n	8010292 <_free_r+0x26>
 80102e4:	6825      	ldr	r5, [r4, #0]
 80102e6:	1961      	adds	r1, r4, r5
 80102e8:	428b      	cmp	r3, r1
 80102ea:	bf04      	itt	eq
 80102ec:	6819      	ldreq	r1, [r3, #0]
 80102ee:	685b      	ldreq	r3, [r3, #4]
 80102f0:	6063      	str	r3, [r4, #4]
 80102f2:	bf04      	itt	eq
 80102f4:	1949      	addeq	r1, r1, r5
 80102f6:	6021      	streq	r1, [r4, #0]
 80102f8:	6054      	str	r4, [r2, #4]
 80102fa:	e7ca      	b.n	8010292 <_free_r+0x26>
 80102fc:	b003      	add	sp, #12
 80102fe:	bd30      	pop	{r4, r5, pc}
 8010300:	2000318c 	.word	0x2000318c

08010304 <__malloc_lock>:
 8010304:	4801      	ldr	r0, [pc, #4]	; (801030c <__malloc_lock+0x8>)
 8010306:	f7ff bfa1 	b.w	801024c <__retarget_lock_acquire_recursive>
 801030a:	bf00      	nop
 801030c:	20003188 	.word	0x20003188

08010310 <__malloc_unlock>:
 8010310:	4801      	ldr	r0, [pc, #4]	; (8010318 <__malloc_unlock+0x8>)
 8010312:	f7ff bf9c 	b.w	801024e <__retarget_lock_release_recursive>
 8010316:	bf00      	nop
 8010318:	20003188 	.word	0x20003188
 801031c:	00000000 	.word	0x00000000

08010320 <exp>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	ed2d 8b02 	vpush	{d8}
 8010326:	ec55 4b10 	vmov	r4, r5, d0
 801032a:	f000 fa2d 	bl	8010788 <__ieee754_exp>
 801032e:	eeb0 8a40 	vmov.f32	s16, s0
 8010332:	eef0 8a60 	vmov.f32	s17, s1
 8010336:	ec45 4b10 	vmov	d0, r4, r5
 801033a:	f000 f891 	bl	8010460 <finite>
 801033e:	b168      	cbz	r0, 801035c <exp+0x3c>
 8010340:	a317      	add	r3, pc, #92	; (adr r3, 80103a0 <exp+0x80>)
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	4620      	mov	r0, r4
 8010348:	4629      	mov	r1, r5
 801034a:	f7f0 fb8d 	bl	8000a68 <__aeabi_dcmpgt>
 801034e:	b160      	cbz	r0, 801036a <exp+0x4a>
 8010350:	f7ff ff52 	bl	80101f8 <__errno>
 8010354:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010390 <exp+0x70>
 8010358:	2322      	movs	r3, #34	; 0x22
 801035a:	6003      	str	r3, [r0, #0]
 801035c:	eeb0 0a48 	vmov.f32	s0, s16
 8010360:	eef0 0a68 	vmov.f32	s1, s17
 8010364:	ecbd 8b02 	vpop	{d8}
 8010368:	bd38      	pop	{r3, r4, r5, pc}
 801036a:	a30f      	add	r3, pc, #60	; (adr r3, 80103a8 <exp+0x88>)
 801036c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010370:	4620      	mov	r0, r4
 8010372:	4629      	mov	r1, r5
 8010374:	f7f0 fb5a 	bl	8000a2c <__aeabi_dcmplt>
 8010378:	2800      	cmp	r0, #0
 801037a:	d0ef      	beq.n	801035c <exp+0x3c>
 801037c:	f7ff ff3c 	bl	80101f8 <__errno>
 8010380:	2322      	movs	r3, #34	; 0x22
 8010382:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010398 <exp+0x78>
 8010386:	6003      	str	r3, [r0, #0]
 8010388:	e7e8      	b.n	801035c <exp+0x3c>
 801038a:	bf00      	nop
 801038c:	f3af 8000 	nop.w
 8010390:	00000000 	.word	0x00000000
 8010394:	7ff00000 	.word	0x7ff00000
	...
 80103a0:	fefa39ef 	.word	0xfefa39ef
 80103a4:	40862e42 	.word	0x40862e42
 80103a8:	d52d3051 	.word	0xd52d3051
 80103ac:	c0874910 	.word	0xc0874910

080103b0 <sin>:
 80103b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103b2:	ec53 2b10 	vmov	r2, r3, d0
 80103b6:	4828      	ldr	r0, [pc, #160]	; (8010458 <sin+0xa8>)
 80103b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80103bc:	4281      	cmp	r1, r0
 80103be:	dc07      	bgt.n	80103d0 <sin+0x20>
 80103c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010450 <sin+0xa0>
 80103c4:	2000      	movs	r0, #0
 80103c6:	b005      	add	sp, #20
 80103c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80103cc:	f000 b91c 	b.w	8010608 <__kernel_sin>
 80103d0:	4822      	ldr	r0, [pc, #136]	; (801045c <sin+0xac>)
 80103d2:	4281      	cmp	r1, r0
 80103d4:	dd09      	ble.n	80103ea <sin+0x3a>
 80103d6:	ee10 0a10 	vmov	r0, s0
 80103da:	4619      	mov	r1, r3
 80103dc:	f7ef fefc 	bl	80001d8 <__aeabi_dsub>
 80103e0:	ec41 0b10 	vmov	d0, r0, r1
 80103e4:	b005      	add	sp, #20
 80103e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80103ea:	4668      	mov	r0, sp
 80103ec:	f000 fb50 	bl	8010a90 <__ieee754_rem_pio2>
 80103f0:	f000 0003 	and.w	r0, r0, #3
 80103f4:	2801      	cmp	r0, #1
 80103f6:	d00c      	beq.n	8010412 <sin+0x62>
 80103f8:	2802      	cmp	r0, #2
 80103fa:	d011      	beq.n	8010420 <sin+0x70>
 80103fc:	b9f0      	cbnz	r0, 801043c <sin+0x8c>
 80103fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010402:	ed9d 0b00 	vldr	d0, [sp]
 8010406:	2001      	movs	r0, #1
 8010408:	f000 f8fe 	bl	8010608 <__kernel_sin>
 801040c:	ec51 0b10 	vmov	r0, r1, d0
 8010410:	e7e6      	b.n	80103e0 <sin+0x30>
 8010412:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010416:	ed9d 0b00 	vldr	d0, [sp]
 801041a:	f000 f82d 	bl	8010478 <__kernel_cos>
 801041e:	e7f5      	b.n	801040c <sin+0x5c>
 8010420:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010424:	ed9d 0b00 	vldr	d0, [sp]
 8010428:	2001      	movs	r0, #1
 801042a:	f000 f8ed 	bl	8010608 <__kernel_sin>
 801042e:	ec53 2b10 	vmov	r2, r3, d0
 8010432:	ee10 0a10 	vmov	r0, s0
 8010436:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801043a:	e7d1      	b.n	80103e0 <sin+0x30>
 801043c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010440:	ed9d 0b00 	vldr	d0, [sp]
 8010444:	f000 f818 	bl	8010478 <__kernel_cos>
 8010448:	e7f1      	b.n	801042e <sin+0x7e>
 801044a:	bf00      	nop
 801044c:	f3af 8000 	nop.w
	...
 8010458:	3fe921fb 	.word	0x3fe921fb
 801045c:	7fefffff 	.word	0x7fefffff

08010460 <finite>:
 8010460:	b082      	sub	sp, #8
 8010462:	ed8d 0b00 	vstr	d0, [sp]
 8010466:	9801      	ldr	r0, [sp, #4]
 8010468:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801046c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010470:	0fc0      	lsrs	r0, r0, #31
 8010472:	b002      	add	sp, #8
 8010474:	4770      	bx	lr
	...

08010478 <__kernel_cos>:
 8010478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047c:	ec57 6b10 	vmov	r6, r7, d0
 8010480:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010484:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010488:	ed8d 1b00 	vstr	d1, [sp]
 801048c:	da07      	bge.n	801049e <__kernel_cos+0x26>
 801048e:	ee10 0a10 	vmov	r0, s0
 8010492:	4639      	mov	r1, r7
 8010494:	f7f0 faf2 	bl	8000a7c <__aeabi_d2iz>
 8010498:	2800      	cmp	r0, #0
 801049a:	f000 8088 	beq.w	80105ae <__kernel_cos+0x136>
 801049e:	4632      	mov	r2, r6
 80104a0:	463b      	mov	r3, r7
 80104a2:	4630      	mov	r0, r6
 80104a4:	4639      	mov	r1, r7
 80104a6:	f7f0 f84f 	bl	8000548 <__aeabi_dmul>
 80104aa:	4b51      	ldr	r3, [pc, #324]	; (80105f0 <__kernel_cos+0x178>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	4604      	mov	r4, r0
 80104b0:	460d      	mov	r5, r1
 80104b2:	f7f0 f849 	bl	8000548 <__aeabi_dmul>
 80104b6:	a340      	add	r3, pc, #256	; (adr r3, 80105b8 <__kernel_cos+0x140>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	4682      	mov	sl, r0
 80104be:	468b      	mov	fp, r1
 80104c0:	4620      	mov	r0, r4
 80104c2:	4629      	mov	r1, r5
 80104c4:	f7f0 f840 	bl	8000548 <__aeabi_dmul>
 80104c8:	a33d      	add	r3, pc, #244	; (adr r3, 80105c0 <__kernel_cos+0x148>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	f7ef fe85 	bl	80001dc <__adddf3>
 80104d2:	4622      	mov	r2, r4
 80104d4:	462b      	mov	r3, r5
 80104d6:	f7f0 f837 	bl	8000548 <__aeabi_dmul>
 80104da:	a33b      	add	r3, pc, #236	; (adr r3, 80105c8 <__kernel_cos+0x150>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	f7ef fe7a 	bl	80001d8 <__aeabi_dsub>
 80104e4:	4622      	mov	r2, r4
 80104e6:	462b      	mov	r3, r5
 80104e8:	f7f0 f82e 	bl	8000548 <__aeabi_dmul>
 80104ec:	a338      	add	r3, pc, #224	; (adr r3, 80105d0 <__kernel_cos+0x158>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	f7ef fe73 	bl	80001dc <__adddf3>
 80104f6:	4622      	mov	r2, r4
 80104f8:	462b      	mov	r3, r5
 80104fa:	f7f0 f825 	bl	8000548 <__aeabi_dmul>
 80104fe:	a336      	add	r3, pc, #216	; (adr r3, 80105d8 <__kernel_cos+0x160>)
 8010500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010504:	f7ef fe68 	bl	80001d8 <__aeabi_dsub>
 8010508:	4622      	mov	r2, r4
 801050a:	462b      	mov	r3, r5
 801050c:	f7f0 f81c 	bl	8000548 <__aeabi_dmul>
 8010510:	a333      	add	r3, pc, #204	; (adr r3, 80105e0 <__kernel_cos+0x168>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7ef fe61 	bl	80001dc <__adddf3>
 801051a:	4622      	mov	r2, r4
 801051c:	462b      	mov	r3, r5
 801051e:	f7f0 f813 	bl	8000548 <__aeabi_dmul>
 8010522:	4622      	mov	r2, r4
 8010524:	462b      	mov	r3, r5
 8010526:	f7f0 f80f 	bl	8000548 <__aeabi_dmul>
 801052a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801052e:	4604      	mov	r4, r0
 8010530:	460d      	mov	r5, r1
 8010532:	4630      	mov	r0, r6
 8010534:	4639      	mov	r1, r7
 8010536:	f7f0 f807 	bl	8000548 <__aeabi_dmul>
 801053a:	460b      	mov	r3, r1
 801053c:	4602      	mov	r2, r0
 801053e:	4629      	mov	r1, r5
 8010540:	4620      	mov	r0, r4
 8010542:	f7ef fe49 	bl	80001d8 <__aeabi_dsub>
 8010546:	4b2b      	ldr	r3, [pc, #172]	; (80105f4 <__kernel_cos+0x17c>)
 8010548:	4598      	cmp	r8, r3
 801054a:	4606      	mov	r6, r0
 801054c:	460f      	mov	r7, r1
 801054e:	dc10      	bgt.n	8010572 <__kernel_cos+0xfa>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4650      	mov	r0, sl
 8010556:	4659      	mov	r1, fp
 8010558:	f7ef fe3e 	bl	80001d8 <__aeabi_dsub>
 801055c:	460b      	mov	r3, r1
 801055e:	4926      	ldr	r1, [pc, #152]	; (80105f8 <__kernel_cos+0x180>)
 8010560:	4602      	mov	r2, r0
 8010562:	2000      	movs	r0, #0
 8010564:	f7ef fe38 	bl	80001d8 <__aeabi_dsub>
 8010568:	ec41 0b10 	vmov	d0, r0, r1
 801056c:	b003      	add	sp, #12
 801056e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010572:	4b22      	ldr	r3, [pc, #136]	; (80105fc <__kernel_cos+0x184>)
 8010574:	4920      	ldr	r1, [pc, #128]	; (80105f8 <__kernel_cos+0x180>)
 8010576:	4598      	cmp	r8, r3
 8010578:	bfcc      	ite	gt
 801057a:	4d21      	ldrgt	r5, [pc, #132]	; (8010600 <__kernel_cos+0x188>)
 801057c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010580:	2400      	movs	r4, #0
 8010582:	4622      	mov	r2, r4
 8010584:	462b      	mov	r3, r5
 8010586:	2000      	movs	r0, #0
 8010588:	f7ef fe26 	bl	80001d8 <__aeabi_dsub>
 801058c:	4622      	mov	r2, r4
 801058e:	4680      	mov	r8, r0
 8010590:	4689      	mov	r9, r1
 8010592:	462b      	mov	r3, r5
 8010594:	4650      	mov	r0, sl
 8010596:	4659      	mov	r1, fp
 8010598:	f7ef fe1e 	bl	80001d8 <__aeabi_dsub>
 801059c:	4632      	mov	r2, r6
 801059e:	463b      	mov	r3, r7
 80105a0:	f7ef fe1a 	bl	80001d8 <__aeabi_dsub>
 80105a4:	4602      	mov	r2, r0
 80105a6:	460b      	mov	r3, r1
 80105a8:	4640      	mov	r0, r8
 80105aa:	4649      	mov	r1, r9
 80105ac:	e7da      	b.n	8010564 <__kernel_cos+0xec>
 80105ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80105e8 <__kernel_cos+0x170>
 80105b2:	e7db      	b.n	801056c <__kernel_cos+0xf4>
 80105b4:	f3af 8000 	nop.w
 80105b8:	be8838d4 	.word	0xbe8838d4
 80105bc:	bda8fae9 	.word	0xbda8fae9
 80105c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80105c4:	3e21ee9e 	.word	0x3e21ee9e
 80105c8:	809c52ad 	.word	0x809c52ad
 80105cc:	3e927e4f 	.word	0x3e927e4f
 80105d0:	19cb1590 	.word	0x19cb1590
 80105d4:	3efa01a0 	.word	0x3efa01a0
 80105d8:	16c15177 	.word	0x16c15177
 80105dc:	3f56c16c 	.word	0x3f56c16c
 80105e0:	5555554c 	.word	0x5555554c
 80105e4:	3fa55555 	.word	0x3fa55555
 80105e8:	00000000 	.word	0x00000000
 80105ec:	3ff00000 	.word	0x3ff00000
 80105f0:	3fe00000 	.word	0x3fe00000
 80105f4:	3fd33332 	.word	0x3fd33332
 80105f8:	3ff00000 	.word	0x3ff00000
 80105fc:	3fe90000 	.word	0x3fe90000
 8010600:	3fd20000 	.word	0x3fd20000
 8010604:	00000000 	.word	0x00000000

08010608 <__kernel_sin>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	ed2d 8b04 	vpush	{d8-d9}
 8010610:	eeb0 8a41 	vmov.f32	s16, s2
 8010614:	eef0 8a61 	vmov.f32	s17, s3
 8010618:	ec55 4b10 	vmov	r4, r5, d0
 801061c:	b083      	sub	sp, #12
 801061e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010622:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010626:	9001      	str	r0, [sp, #4]
 8010628:	da06      	bge.n	8010638 <__kernel_sin+0x30>
 801062a:	ee10 0a10 	vmov	r0, s0
 801062e:	4629      	mov	r1, r5
 8010630:	f7f0 fa24 	bl	8000a7c <__aeabi_d2iz>
 8010634:	2800      	cmp	r0, #0
 8010636:	d051      	beq.n	80106dc <__kernel_sin+0xd4>
 8010638:	4622      	mov	r2, r4
 801063a:	462b      	mov	r3, r5
 801063c:	4620      	mov	r0, r4
 801063e:	4629      	mov	r1, r5
 8010640:	f7ef ff82 	bl	8000548 <__aeabi_dmul>
 8010644:	4682      	mov	sl, r0
 8010646:	468b      	mov	fp, r1
 8010648:	4602      	mov	r2, r0
 801064a:	460b      	mov	r3, r1
 801064c:	4620      	mov	r0, r4
 801064e:	4629      	mov	r1, r5
 8010650:	f7ef ff7a 	bl	8000548 <__aeabi_dmul>
 8010654:	a341      	add	r3, pc, #260	; (adr r3, 801075c <__kernel_sin+0x154>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	4680      	mov	r8, r0
 801065c:	4689      	mov	r9, r1
 801065e:	4650      	mov	r0, sl
 8010660:	4659      	mov	r1, fp
 8010662:	f7ef ff71 	bl	8000548 <__aeabi_dmul>
 8010666:	a33f      	add	r3, pc, #252	; (adr r3, 8010764 <__kernel_sin+0x15c>)
 8010668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066c:	f7ef fdb4 	bl	80001d8 <__aeabi_dsub>
 8010670:	4652      	mov	r2, sl
 8010672:	465b      	mov	r3, fp
 8010674:	f7ef ff68 	bl	8000548 <__aeabi_dmul>
 8010678:	a33c      	add	r3, pc, #240	; (adr r3, 801076c <__kernel_sin+0x164>)
 801067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067e:	f7ef fdad 	bl	80001dc <__adddf3>
 8010682:	4652      	mov	r2, sl
 8010684:	465b      	mov	r3, fp
 8010686:	f7ef ff5f 	bl	8000548 <__aeabi_dmul>
 801068a:	a33a      	add	r3, pc, #232	; (adr r3, 8010774 <__kernel_sin+0x16c>)
 801068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010690:	f7ef fda2 	bl	80001d8 <__aeabi_dsub>
 8010694:	4652      	mov	r2, sl
 8010696:	465b      	mov	r3, fp
 8010698:	f7ef ff56 	bl	8000548 <__aeabi_dmul>
 801069c:	a337      	add	r3, pc, #220	; (adr r3, 801077c <__kernel_sin+0x174>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	f7ef fd9b 	bl	80001dc <__adddf3>
 80106a6:	9b01      	ldr	r3, [sp, #4]
 80106a8:	4606      	mov	r6, r0
 80106aa:	460f      	mov	r7, r1
 80106ac:	b9eb      	cbnz	r3, 80106ea <__kernel_sin+0xe2>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4650      	mov	r0, sl
 80106b4:	4659      	mov	r1, fp
 80106b6:	f7ef ff47 	bl	8000548 <__aeabi_dmul>
 80106ba:	a325      	add	r3, pc, #148	; (adr r3, 8010750 <__kernel_sin+0x148>)
 80106bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c0:	f7ef fd8a 	bl	80001d8 <__aeabi_dsub>
 80106c4:	4642      	mov	r2, r8
 80106c6:	464b      	mov	r3, r9
 80106c8:	f7ef ff3e 	bl	8000548 <__aeabi_dmul>
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	4620      	mov	r0, r4
 80106d2:	4629      	mov	r1, r5
 80106d4:	f7ef fd82 	bl	80001dc <__adddf3>
 80106d8:	4604      	mov	r4, r0
 80106da:	460d      	mov	r5, r1
 80106dc:	ec45 4b10 	vmov	d0, r4, r5
 80106e0:	b003      	add	sp, #12
 80106e2:	ecbd 8b04 	vpop	{d8-d9}
 80106e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ea:	4b1b      	ldr	r3, [pc, #108]	; (8010758 <__kernel_sin+0x150>)
 80106ec:	ec51 0b18 	vmov	r0, r1, d8
 80106f0:	2200      	movs	r2, #0
 80106f2:	f7ef ff29 	bl	8000548 <__aeabi_dmul>
 80106f6:	4632      	mov	r2, r6
 80106f8:	ec41 0b19 	vmov	d9, r0, r1
 80106fc:	463b      	mov	r3, r7
 80106fe:	4640      	mov	r0, r8
 8010700:	4649      	mov	r1, r9
 8010702:	f7ef ff21 	bl	8000548 <__aeabi_dmul>
 8010706:	4602      	mov	r2, r0
 8010708:	460b      	mov	r3, r1
 801070a:	ec51 0b19 	vmov	r0, r1, d9
 801070e:	f7ef fd63 	bl	80001d8 <__aeabi_dsub>
 8010712:	4652      	mov	r2, sl
 8010714:	465b      	mov	r3, fp
 8010716:	f7ef ff17 	bl	8000548 <__aeabi_dmul>
 801071a:	ec53 2b18 	vmov	r2, r3, d8
 801071e:	f7ef fd5b 	bl	80001d8 <__aeabi_dsub>
 8010722:	a30b      	add	r3, pc, #44	; (adr r3, 8010750 <__kernel_sin+0x148>)
 8010724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010728:	4606      	mov	r6, r0
 801072a:	460f      	mov	r7, r1
 801072c:	4640      	mov	r0, r8
 801072e:	4649      	mov	r1, r9
 8010730:	f7ef ff0a 	bl	8000548 <__aeabi_dmul>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4630      	mov	r0, r6
 801073a:	4639      	mov	r1, r7
 801073c:	f7ef fd4e 	bl	80001dc <__adddf3>
 8010740:	4602      	mov	r2, r0
 8010742:	460b      	mov	r3, r1
 8010744:	4620      	mov	r0, r4
 8010746:	4629      	mov	r1, r5
 8010748:	f7ef fd46 	bl	80001d8 <__aeabi_dsub>
 801074c:	e7c4      	b.n	80106d8 <__kernel_sin+0xd0>
 801074e:	bf00      	nop
 8010750:	55555549 	.word	0x55555549
 8010754:	3fc55555 	.word	0x3fc55555
 8010758:	3fe00000 	.word	0x3fe00000
 801075c:	5acfd57c 	.word	0x5acfd57c
 8010760:	3de5d93a 	.word	0x3de5d93a
 8010764:	8a2b9ceb 	.word	0x8a2b9ceb
 8010768:	3e5ae5e6 	.word	0x3e5ae5e6
 801076c:	57b1fe7d 	.word	0x57b1fe7d
 8010770:	3ec71de3 	.word	0x3ec71de3
 8010774:	19c161d5 	.word	0x19c161d5
 8010778:	3f2a01a0 	.word	0x3f2a01a0
 801077c:	1110f8a6 	.word	0x1110f8a6
 8010780:	3f811111 	.word	0x3f811111
 8010784:	00000000 	.word	0x00000000

08010788 <__ieee754_exp>:
 8010788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801078c:	ec55 4b10 	vmov	r4, r5, d0
 8010790:	49b5      	ldr	r1, [pc, #724]	; (8010a68 <__ieee754_exp+0x2e0>)
 8010792:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010796:	428a      	cmp	r2, r1
 8010798:	ed2d 8b04 	vpush	{d8-d9}
 801079c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80107a0:	d93b      	bls.n	801081a <__ieee754_exp+0x92>
 80107a2:	49b2      	ldr	r1, [pc, #712]	; (8010a6c <__ieee754_exp+0x2e4>)
 80107a4:	428a      	cmp	r2, r1
 80107a6:	d916      	bls.n	80107d6 <__ieee754_exp+0x4e>
 80107a8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80107ac:	4323      	orrs	r3, r4
 80107ae:	ee10 2a10 	vmov	r2, s0
 80107b2:	d007      	beq.n	80107c4 <__ieee754_exp+0x3c>
 80107b4:	462b      	mov	r3, r5
 80107b6:	4620      	mov	r0, r4
 80107b8:	4629      	mov	r1, r5
 80107ba:	f7ef fd0f 	bl	80001dc <__adddf3>
 80107be:	4604      	mov	r4, r0
 80107c0:	460d      	mov	r5, r1
 80107c2:	e002      	b.n	80107ca <__ieee754_exp+0x42>
 80107c4:	b10e      	cbz	r6, 80107ca <__ieee754_exp+0x42>
 80107c6:	2400      	movs	r4, #0
 80107c8:	2500      	movs	r5, #0
 80107ca:	ecbd 8b04 	vpop	{d8-d9}
 80107ce:	ec45 4b10 	vmov	d0, r4, r5
 80107d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d6:	a38e      	add	r3, pc, #568	; (adr r3, 8010a10 <__ieee754_exp+0x288>)
 80107d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107dc:	ee10 0a10 	vmov	r0, s0
 80107e0:	4629      	mov	r1, r5
 80107e2:	f7f0 f941 	bl	8000a68 <__aeabi_dcmpgt>
 80107e6:	4607      	mov	r7, r0
 80107e8:	b130      	cbz	r0, 80107f8 <__ieee754_exp+0x70>
 80107ea:	ecbd 8b04 	vpop	{d8-d9}
 80107ee:	2000      	movs	r0, #0
 80107f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107f4:	f000 bb82 	b.w	8010efc <__math_oflow>
 80107f8:	a387      	add	r3, pc, #540	; (adr r3, 8010a18 <__ieee754_exp+0x290>)
 80107fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fe:	4620      	mov	r0, r4
 8010800:	4629      	mov	r1, r5
 8010802:	f7f0 f913 	bl	8000a2c <__aeabi_dcmplt>
 8010806:	2800      	cmp	r0, #0
 8010808:	f000 808b 	beq.w	8010922 <__ieee754_exp+0x19a>
 801080c:	ecbd 8b04 	vpop	{d8-d9}
 8010810:	4638      	mov	r0, r7
 8010812:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010816:	f000 bb68 	b.w	8010eea <__math_uflow>
 801081a:	4b95      	ldr	r3, [pc, #596]	; (8010a70 <__ieee754_exp+0x2e8>)
 801081c:	429a      	cmp	r2, r3
 801081e:	f240 80ac 	bls.w	801097a <__ieee754_exp+0x1f2>
 8010822:	4b94      	ldr	r3, [pc, #592]	; (8010a74 <__ieee754_exp+0x2ec>)
 8010824:	429a      	cmp	r2, r3
 8010826:	d87c      	bhi.n	8010922 <__ieee754_exp+0x19a>
 8010828:	4b93      	ldr	r3, [pc, #588]	; (8010a78 <__ieee754_exp+0x2f0>)
 801082a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	ee10 0a10 	vmov	r0, s0
 8010836:	4629      	mov	r1, r5
 8010838:	f7ef fcce 	bl	80001d8 <__aeabi_dsub>
 801083c:	4b8f      	ldr	r3, [pc, #572]	; (8010a7c <__ieee754_exp+0x2f4>)
 801083e:	00f7      	lsls	r7, r6, #3
 8010840:	443b      	add	r3, r7
 8010842:	ed93 7b00 	vldr	d7, [r3]
 8010846:	f1c6 0a01 	rsb	sl, r6, #1
 801084a:	4680      	mov	r8, r0
 801084c:	4689      	mov	r9, r1
 801084e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010852:	eeb0 8a47 	vmov.f32	s16, s14
 8010856:	eef0 8a67 	vmov.f32	s17, s15
 801085a:	ec53 2b18 	vmov	r2, r3, d8
 801085e:	4640      	mov	r0, r8
 8010860:	4649      	mov	r1, r9
 8010862:	f7ef fcb9 	bl	80001d8 <__aeabi_dsub>
 8010866:	4604      	mov	r4, r0
 8010868:	460d      	mov	r5, r1
 801086a:	4622      	mov	r2, r4
 801086c:	462b      	mov	r3, r5
 801086e:	4620      	mov	r0, r4
 8010870:	4629      	mov	r1, r5
 8010872:	f7ef fe69 	bl	8000548 <__aeabi_dmul>
 8010876:	a36a      	add	r3, pc, #424	; (adr r3, 8010a20 <__ieee754_exp+0x298>)
 8010878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087c:	4606      	mov	r6, r0
 801087e:	460f      	mov	r7, r1
 8010880:	f7ef fe62 	bl	8000548 <__aeabi_dmul>
 8010884:	a368      	add	r3, pc, #416	; (adr r3, 8010a28 <__ieee754_exp+0x2a0>)
 8010886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088a:	f7ef fca5 	bl	80001d8 <__aeabi_dsub>
 801088e:	4632      	mov	r2, r6
 8010890:	463b      	mov	r3, r7
 8010892:	f7ef fe59 	bl	8000548 <__aeabi_dmul>
 8010896:	a366      	add	r3, pc, #408	; (adr r3, 8010a30 <__ieee754_exp+0x2a8>)
 8010898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089c:	f7ef fc9e 	bl	80001dc <__adddf3>
 80108a0:	4632      	mov	r2, r6
 80108a2:	463b      	mov	r3, r7
 80108a4:	f7ef fe50 	bl	8000548 <__aeabi_dmul>
 80108a8:	a363      	add	r3, pc, #396	; (adr r3, 8010a38 <__ieee754_exp+0x2b0>)
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	f7ef fc93 	bl	80001d8 <__aeabi_dsub>
 80108b2:	4632      	mov	r2, r6
 80108b4:	463b      	mov	r3, r7
 80108b6:	f7ef fe47 	bl	8000548 <__aeabi_dmul>
 80108ba:	a361      	add	r3, pc, #388	; (adr r3, 8010a40 <__ieee754_exp+0x2b8>)
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	f7ef fc8c 	bl	80001dc <__adddf3>
 80108c4:	4632      	mov	r2, r6
 80108c6:	463b      	mov	r3, r7
 80108c8:	f7ef fe3e 	bl	8000548 <__aeabi_dmul>
 80108cc:	4602      	mov	r2, r0
 80108ce:	460b      	mov	r3, r1
 80108d0:	4620      	mov	r0, r4
 80108d2:	4629      	mov	r1, r5
 80108d4:	f7ef fc80 	bl	80001d8 <__aeabi_dsub>
 80108d8:	4602      	mov	r2, r0
 80108da:	460b      	mov	r3, r1
 80108dc:	4606      	mov	r6, r0
 80108de:	460f      	mov	r7, r1
 80108e0:	4620      	mov	r0, r4
 80108e2:	4629      	mov	r1, r5
 80108e4:	f7ef fe30 	bl	8000548 <__aeabi_dmul>
 80108e8:	ec41 0b19 	vmov	d9, r0, r1
 80108ec:	f1ba 0f00 	cmp.w	sl, #0
 80108f0:	d15d      	bne.n	80109ae <__ieee754_exp+0x226>
 80108f2:	2200      	movs	r2, #0
 80108f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80108f8:	4630      	mov	r0, r6
 80108fa:	4639      	mov	r1, r7
 80108fc:	f7ef fc6c 	bl	80001d8 <__aeabi_dsub>
 8010900:	4602      	mov	r2, r0
 8010902:	460b      	mov	r3, r1
 8010904:	ec51 0b19 	vmov	r0, r1, d9
 8010908:	f7ef ff48 	bl	800079c <__aeabi_ddiv>
 801090c:	4622      	mov	r2, r4
 801090e:	462b      	mov	r3, r5
 8010910:	f7ef fc62 	bl	80001d8 <__aeabi_dsub>
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	2000      	movs	r0, #0
 801091a:	4959      	ldr	r1, [pc, #356]	; (8010a80 <__ieee754_exp+0x2f8>)
 801091c:	f7ef fc5c 	bl	80001d8 <__aeabi_dsub>
 8010920:	e74d      	b.n	80107be <__ieee754_exp+0x36>
 8010922:	4b58      	ldr	r3, [pc, #352]	; (8010a84 <__ieee754_exp+0x2fc>)
 8010924:	4620      	mov	r0, r4
 8010926:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801092a:	4629      	mov	r1, r5
 801092c:	a346      	add	r3, pc, #280	; (adr r3, 8010a48 <__ieee754_exp+0x2c0>)
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	f7ef fe09 	bl	8000548 <__aeabi_dmul>
 8010936:	e9d6 2300 	ldrd	r2, r3, [r6]
 801093a:	f7ef fc4f 	bl	80001dc <__adddf3>
 801093e:	f7f0 f89d 	bl	8000a7c <__aeabi_d2iz>
 8010942:	4682      	mov	sl, r0
 8010944:	f7ef fd96 	bl	8000474 <__aeabi_i2d>
 8010948:	a341      	add	r3, pc, #260	; (adr r3, 8010a50 <__ieee754_exp+0x2c8>)
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	4606      	mov	r6, r0
 8010950:	460f      	mov	r7, r1
 8010952:	f7ef fdf9 	bl	8000548 <__aeabi_dmul>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	4620      	mov	r0, r4
 801095c:	4629      	mov	r1, r5
 801095e:	f7ef fc3b 	bl	80001d8 <__aeabi_dsub>
 8010962:	a33d      	add	r3, pc, #244	; (adr r3, 8010a58 <__ieee754_exp+0x2d0>)
 8010964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010968:	4680      	mov	r8, r0
 801096a:	4689      	mov	r9, r1
 801096c:	4630      	mov	r0, r6
 801096e:	4639      	mov	r1, r7
 8010970:	f7ef fdea 	bl	8000548 <__aeabi_dmul>
 8010974:	ec41 0b18 	vmov	d8, r0, r1
 8010978:	e76f      	b.n	801085a <__ieee754_exp+0xd2>
 801097a:	4b43      	ldr	r3, [pc, #268]	; (8010a88 <__ieee754_exp+0x300>)
 801097c:	429a      	cmp	r2, r3
 801097e:	d811      	bhi.n	80109a4 <__ieee754_exp+0x21c>
 8010980:	a337      	add	r3, pc, #220	; (adr r3, 8010a60 <__ieee754_exp+0x2d8>)
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	ee10 0a10 	vmov	r0, s0
 801098a:	4629      	mov	r1, r5
 801098c:	f7ef fc26 	bl	80001dc <__adddf3>
 8010990:	4b3b      	ldr	r3, [pc, #236]	; (8010a80 <__ieee754_exp+0x2f8>)
 8010992:	2200      	movs	r2, #0
 8010994:	f7f0 f868 	bl	8000a68 <__aeabi_dcmpgt>
 8010998:	b138      	cbz	r0, 80109aa <__ieee754_exp+0x222>
 801099a:	4b39      	ldr	r3, [pc, #228]	; (8010a80 <__ieee754_exp+0x2f8>)
 801099c:	2200      	movs	r2, #0
 801099e:	4620      	mov	r0, r4
 80109a0:	4629      	mov	r1, r5
 80109a2:	e70a      	b.n	80107ba <__ieee754_exp+0x32>
 80109a4:	f04f 0a00 	mov.w	sl, #0
 80109a8:	e75f      	b.n	801086a <__ieee754_exp+0xe2>
 80109aa:	4682      	mov	sl, r0
 80109ac:	e75d      	b.n	801086a <__ieee754_exp+0xe2>
 80109ae:	4632      	mov	r2, r6
 80109b0:	463b      	mov	r3, r7
 80109b2:	2000      	movs	r0, #0
 80109b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80109b8:	f7ef fc0e 	bl	80001d8 <__aeabi_dsub>
 80109bc:	4602      	mov	r2, r0
 80109be:	460b      	mov	r3, r1
 80109c0:	ec51 0b19 	vmov	r0, r1, d9
 80109c4:	f7ef feea 	bl	800079c <__aeabi_ddiv>
 80109c8:	4602      	mov	r2, r0
 80109ca:	460b      	mov	r3, r1
 80109cc:	ec51 0b18 	vmov	r0, r1, d8
 80109d0:	f7ef fc02 	bl	80001d8 <__aeabi_dsub>
 80109d4:	4642      	mov	r2, r8
 80109d6:	464b      	mov	r3, r9
 80109d8:	f7ef fbfe 	bl	80001d8 <__aeabi_dsub>
 80109dc:	4602      	mov	r2, r0
 80109de:	460b      	mov	r3, r1
 80109e0:	2000      	movs	r0, #0
 80109e2:	4927      	ldr	r1, [pc, #156]	; (8010a80 <__ieee754_exp+0x2f8>)
 80109e4:	f7ef fbf8 	bl	80001d8 <__aeabi_dsub>
 80109e8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80109ec:	4592      	cmp	sl, r2
 80109ee:	db02      	blt.n	80109f6 <__ieee754_exp+0x26e>
 80109f0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80109f4:	e6e3      	b.n	80107be <__ieee754_exp+0x36>
 80109f6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80109fa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80109fe:	2200      	movs	r2, #0
 8010a00:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010a04:	f7ef fda0 	bl	8000548 <__aeabi_dmul>
 8010a08:	e6d9      	b.n	80107be <__ieee754_exp+0x36>
 8010a0a:	bf00      	nop
 8010a0c:	f3af 8000 	nop.w
 8010a10:	fefa39ef 	.word	0xfefa39ef
 8010a14:	40862e42 	.word	0x40862e42
 8010a18:	d52d3051 	.word	0xd52d3051
 8010a1c:	c0874910 	.word	0xc0874910
 8010a20:	72bea4d0 	.word	0x72bea4d0
 8010a24:	3e663769 	.word	0x3e663769
 8010a28:	c5d26bf1 	.word	0xc5d26bf1
 8010a2c:	3ebbbd41 	.word	0x3ebbbd41
 8010a30:	af25de2c 	.word	0xaf25de2c
 8010a34:	3f11566a 	.word	0x3f11566a
 8010a38:	16bebd93 	.word	0x16bebd93
 8010a3c:	3f66c16c 	.word	0x3f66c16c
 8010a40:	5555553e 	.word	0x5555553e
 8010a44:	3fc55555 	.word	0x3fc55555
 8010a48:	652b82fe 	.word	0x652b82fe
 8010a4c:	3ff71547 	.word	0x3ff71547
 8010a50:	fee00000 	.word	0xfee00000
 8010a54:	3fe62e42 	.word	0x3fe62e42
 8010a58:	35793c76 	.word	0x35793c76
 8010a5c:	3dea39ef 	.word	0x3dea39ef
 8010a60:	8800759c 	.word	0x8800759c
 8010a64:	7e37e43c 	.word	0x7e37e43c
 8010a68:	40862e41 	.word	0x40862e41
 8010a6c:	7fefffff 	.word	0x7fefffff
 8010a70:	3fd62e42 	.word	0x3fd62e42
 8010a74:	3ff0a2b1 	.word	0x3ff0a2b1
 8010a78:	08011980 	.word	0x08011980
 8010a7c:	08011990 	.word	0x08011990
 8010a80:	3ff00000 	.word	0x3ff00000
 8010a84:	08011970 	.word	0x08011970
 8010a88:	3defffff 	.word	0x3defffff
 8010a8c:	00000000 	.word	0x00000000

08010a90 <__ieee754_rem_pio2>:
 8010a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	ed2d 8b02 	vpush	{d8}
 8010a98:	ec55 4b10 	vmov	r4, r5, d0
 8010a9c:	4bca      	ldr	r3, [pc, #808]	; (8010dc8 <__ieee754_rem_pio2+0x338>)
 8010a9e:	b08b      	sub	sp, #44	; 0x2c
 8010aa0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010aa4:	4598      	cmp	r8, r3
 8010aa6:	4682      	mov	sl, r0
 8010aa8:	9502      	str	r5, [sp, #8]
 8010aaa:	dc08      	bgt.n	8010abe <__ieee754_rem_pio2+0x2e>
 8010aac:	2200      	movs	r2, #0
 8010aae:	2300      	movs	r3, #0
 8010ab0:	ed80 0b00 	vstr	d0, [r0]
 8010ab4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010ab8:	f04f 0b00 	mov.w	fp, #0
 8010abc:	e028      	b.n	8010b10 <__ieee754_rem_pio2+0x80>
 8010abe:	4bc3      	ldr	r3, [pc, #780]	; (8010dcc <__ieee754_rem_pio2+0x33c>)
 8010ac0:	4598      	cmp	r8, r3
 8010ac2:	dc78      	bgt.n	8010bb6 <__ieee754_rem_pio2+0x126>
 8010ac4:	9b02      	ldr	r3, [sp, #8]
 8010ac6:	4ec2      	ldr	r6, [pc, #776]	; (8010dd0 <__ieee754_rem_pio2+0x340>)
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	ee10 0a10 	vmov	r0, s0
 8010ace:	a3b0      	add	r3, pc, #704	; (adr r3, 8010d90 <__ieee754_rem_pio2+0x300>)
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	dd39      	ble.n	8010b4c <__ieee754_rem_pio2+0xbc>
 8010ad8:	f7ef fb7e 	bl	80001d8 <__aeabi_dsub>
 8010adc:	45b0      	cmp	r8, r6
 8010ade:	4604      	mov	r4, r0
 8010ae0:	460d      	mov	r5, r1
 8010ae2:	d01b      	beq.n	8010b1c <__ieee754_rem_pio2+0x8c>
 8010ae4:	a3ac      	add	r3, pc, #688	; (adr r3, 8010d98 <__ieee754_rem_pio2+0x308>)
 8010ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aea:	f7ef fb75 	bl	80001d8 <__aeabi_dsub>
 8010aee:	4602      	mov	r2, r0
 8010af0:	460b      	mov	r3, r1
 8010af2:	e9ca 2300 	strd	r2, r3, [sl]
 8010af6:	4620      	mov	r0, r4
 8010af8:	4629      	mov	r1, r5
 8010afa:	f7ef fb6d 	bl	80001d8 <__aeabi_dsub>
 8010afe:	a3a6      	add	r3, pc, #664	; (adr r3, 8010d98 <__ieee754_rem_pio2+0x308>)
 8010b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b04:	f7ef fb68 	bl	80001d8 <__aeabi_dsub>
 8010b08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010b0c:	f04f 0b01 	mov.w	fp, #1
 8010b10:	4658      	mov	r0, fp
 8010b12:	b00b      	add	sp, #44	; 0x2c
 8010b14:	ecbd 8b02 	vpop	{d8}
 8010b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b1c:	a3a0      	add	r3, pc, #640	; (adr r3, 8010da0 <__ieee754_rem_pio2+0x310>)
 8010b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b22:	f7ef fb59 	bl	80001d8 <__aeabi_dsub>
 8010b26:	a3a0      	add	r3, pc, #640	; (adr r3, 8010da8 <__ieee754_rem_pio2+0x318>)
 8010b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	460d      	mov	r5, r1
 8010b30:	f7ef fb52 	bl	80001d8 <__aeabi_dsub>
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	e9ca 2300 	strd	r2, r3, [sl]
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	4629      	mov	r1, r5
 8010b40:	f7ef fb4a 	bl	80001d8 <__aeabi_dsub>
 8010b44:	a398      	add	r3, pc, #608	; (adr r3, 8010da8 <__ieee754_rem_pio2+0x318>)
 8010b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4a:	e7db      	b.n	8010b04 <__ieee754_rem_pio2+0x74>
 8010b4c:	f7ef fb46 	bl	80001dc <__adddf3>
 8010b50:	45b0      	cmp	r8, r6
 8010b52:	4604      	mov	r4, r0
 8010b54:	460d      	mov	r5, r1
 8010b56:	d016      	beq.n	8010b86 <__ieee754_rem_pio2+0xf6>
 8010b58:	a38f      	add	r3, pc, #572	; (adr r3, 8010d98 <__ieee754_rem_pio2+0x308>)
 8010b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5e:	f7ef fb3d 	bl	80001dc <__adddf3>
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	e9ca 2300 	strd	r2, r3, [sl]
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	4629      	mov	r1, r5
 8010b6e:	f7ef fb33 	bl	80001d8 <__aeabi_dsub>
 8010b72:	a389      	add	r3, pc, #548	; (adr r3, 8010d98 <__ieee754_rem_pio2+0x308>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	f7ef fb30 	bl	80001dc <__adddf3>
 8010b7c:	f04f 3bff 	mov.w	fp, #4294967295
 8010b80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010b84:	e7c4      	b.n	8010b10 <__ieee754_rem_pio2+0x80>
 8010b86:	a386      	add	r3, pc, #536	; (adr r3, 8010da0 <__ieee754_rem_pio2+0x310>)
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	f7ef fb26 	bl	80001dc <__adddf3>
 8010b90:	a385      	add	r3, pc, #532	; (adr r3, 8010da8 <__ieee754_rem_pio2+0x318>)
 8010b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b96:	4604      	mov	r4, r0
 8010b98:	460d      	mov	r5, r1
 8010b9a:	f7ef fb1f 	bl	80001dc <__adddf3>
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	e9ca 2300 	strd	r2, r3, [sl]
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	4629      	mov	r1, r5
 8010baa:	f7ef fb15 	bl	80001d8 <__aeabi_dsub>
 8010bae:	a37e      	add	r3, pc, #504	; (adr r3, 8010da8 <__ieee754_rem_pio2+0x318>)
 8010bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb4:	e7e0      	b.n	8010b78 <__ieee754_rem_pio2+0xe8>
 8010bb6:	4b87      	ldr	r3, [pc, #540]	; (8010dd4 <__ieee754_rem_pio2+0x344>)
 8010bb8:	4598      	cmp	r8, r3
 8010bba:	f300 80d8 	bgt.w	8010d6e <__ieee754_rem_pio2+0x2de>
 8010bbe:	f000 f96d 	bl	8010e9c <fabs>
 8010bc2:	ec55 4b10 	vmov	r4, r5, d0
 8010bc6:	ee10 0a10 	vmov	r0, s0
 8010bca:	a379      	add	r3, pc, #484	; (adr r3, 8010db0 <__ieee754_rem_pio2+0x320>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	4629      	mov	r1, r5
 8010bd2:	f7ef fcb9 	bl	8000548 <__aeabi_dmul>
 8010bd6:	4b80      	ldr	r3, [pc, #512]	; (8010dd8 <__ieee754_rem_pio2+0x348>)
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f7ef faff 	bl	80001dc <__adddf3>
 8010bde:	f7ef ff4d 	bl	8000a7c <__aeabi_d2iz>
 8010be2:	4683      	mov	fp, r0
 8010be4:	f7ef fc46 	bl	8000474 <__aeabi_i2d>
 8010be8:	4602      	mov	r2, r0
 8010bea:	460b      	mov	r3, r1
 8010bec:	ec43 2b18 	vmov	d8, r2, r3
 8010bf0:	a367      	add	r3, pc, #412	; (adr r3, 8010d90 <__ieee754_rem_pio2+0x300>)
 8010bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf6:	f7ef fca7 	bl	8000548 <__aeabi_dmul>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	4620      	mov	r0, r4
 8010c00:	4629      	mov	r1, r5
 8010c02:	f7ef fae9 	bl	80001d8 <__aeabi_dsub>
 8010c06:	a364      	add	r3, pc, #400	; (adr r3, 8010d98 <__ieee754_rem_pio2+0x308>)
 8010c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	ec51 0b18 	vmov	r0, r1, d8
 8010c14:	f7ef fc98 	bl	8000548 <__aeabi_dmul>
 8010c18:	f1bb 0f1f 	cmp.w	fp, #31
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	460d      	mov	r5, r1
 8010c20:	dc0d      	bgt.n	8010c3e <__ieee754_rem_pio2+0x1ae>
 8010c22:	4b6e      	ldr	r3, [pc, #440]	; (8010ddc <__ieee754_rem_pio2+0x34c>)
 8010c24:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c2c:	4543      	cmp	r3, r8
 8010c2e:	d006      	beq.n	8010c3e <__ieee754_rem_pio2+0x1ae>
 8010c30:	4622      	mov	r2, r4
 8010c32:	462b      	mov	r3, r5
 8010c34:	4630      	mov	r0, r6
 8010c36:	4639      	mov	r1, r7
 8010c38:	f7ef face 	bl	80001d8 <__aeabi_dsub>
 8010c3c:	e00e      	b.n	8010c5c <__ieee754_rem_pio2+0x1cc>
 8010c3e:	462b      	mov	r3, r5
 8010c40:	4622      	mov	r2, r4
 8010c42:	4630      	mov	r0, r6
 8010c44:	4639      	mov	r1, r7
 8010c46:	f7ef fac7 	bl	80001d8 <__aeabi_dsub>
 8010c4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010c4e:	9303      	str	r3, [sp, #12]
 8010c50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c54:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010c58:	2b10      	cmp	r3, #16
 8010c5a:	dc02      	bgt.n	8010c62 <__ieee754_rem_pio2+0x1d2>
 8010c5c:	e9ca 0100 	strd	r0, r1, [sl]
 8010c60:	e039      	b.n	8010cd6 <__ieee754_rem_pio2+0x246>
 8010c62:	a34f      	add	r3, pc, #316	; (adr r3, 8010da0 <__ieee754_rem_pio2+0x310>)
 8010c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c68:	ec51 0b18 	vmov	r0, r1, d8
 8010c6c:	f7ef fc6c 	bl	8000548 <__aeabi_dmul>
 8010c70:	4604      	mov	r4, r0
 8010c72:	460d      	mov	r5, r1
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	4630      	mov	r0, r6
 8010c7a:	4639      	mov	r1, r7
 8010c7c:	f7ef faac 	bl	80001d8 <__aeabi_dsub>
 8010c80:	4602      	mov	r2, r0
 8010c82:	460b      	mov	r3, r1
 8010c84:	4680      	mov	r8, r0
 8010c86:	4689      	mov	r9, r1
 8010c88:	4630      	mov	r0, r6
 8010c8a:	4639      	mov	r1, r7
 8010c8c:	f7ef faa4 	bl	80001d8 <__aeabi_dsub>
 8010c90:	4622      	mov	r2, r4
 8010c92:	462b      	mov	r3, r5
 8010c94:	f7ef faa0 	bl	80001d8 <__aeabi_dsub>
 8010c98:	a343      	add	r3, pc, #268	; (adr r3, 8010da8 <__ieee754_rem_pio2+0x318>)
 8010c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	460d      	mov	r5, r1
 8010ca2:	ec51 0b18 	vmov	r0, r1, d8
 8010ca6:	f7ef fc4f 	bl	8000548 <__aeabi_dmul>
 8010caa:	4622      	mov	r2, r4
 8010cac:	462b      	mov	r3, r5
 8010cae:	f7ef fa93 	bl	80001d8 <__aeabi_dsub>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	460d      	mov	r5, r1
 8010cba:	4640      	mov	r0, r8
 8010cbc:	4649      	mov	r1, r9
 8010cbe:	f7ef fa8b 	bl	80001d8 <__aeabi_dsub>
 8010cc2:	9a03      	ldr	r2, [sp, #12]
 8010cc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	2b31      	cmp	r3, #49	; 0x31
 8010ccc:	dc24      	bgt.n	8010d18 <__ieee754_rem_pio2+0x288>
 8010cce:	e9ca 0100 	strd	r0, r1, [sl]
 8010cd2:	4646      	mov	r6, r8
 8010cd4:	464f      	mov	r7, r9
 8010cd6:	e9da 8900 	ldrd	r8, r9, [sl]
 8010cda:	4630      	mov	r0, r6
 8010cdc:	4642      	mov	r2, r8
 8010cde:	464b      	mov	r3, r9
 8010ce0:	4639      	mov	r1, r7
 8010ce2:	f7ef fa79 	bl	80001d8 <__aeabi_dsub>
 8010ce6:	462b      	mov	r3, r5
 8010ce8:	4622      	mov	r2, r4
 8010cea:	f7ef fa75 	bl	80001d8 <__aeabi_dsub>
 8010cee:	9b02      	ldr	r3, [sp, #8]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010cf6:	f6bf af0b 	bge.w	8010b10 <__ieee754_rem_pio2+0x80>
 8010cfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010cfe:	f8ca 3004 	str.w	r3, [sl, #4]
 8010d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d06:	f8ca 8000 	str.w	r8, [sl]
 8010d0a:	f8ca 0008 	str.w	r0, [sl, #8]
 8010d0e:	f8ca 300c 	str.w	r3, [sl, #12]
 8010d12:	f1cb 0b00 	rsb	fp, fp, #0
 8010d16:	e6fb      	b.n	8010b10 <__ieee754_rem_pio2+0x80>
 8010d18:	a327      	add	r3, pc, #156	; (adr r3, 8010db8 <__ieee754_rem_pio2+0x328>)
 8010d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1e:	ec51 0b18 	vmov	r0, r1, d8
 8010d22:	f7ef fc11 	bl	8000548 <__aeabi_dmul>
 8010d26:	4604      	mov	r4, r0
 8010d28:	460d      	mov	r5, r1
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	4640      	mov	r0, r8
 8010d30:	4649      	mov	r1, r9
 8010d32:	f7ef fa51 	bl	80001d8 <__aeabi_dsub>
 8010d36:	4602      	mov	r2, r0
 8010d38:	460b      	mov	r3, r1
 8010d3a:	4606      	mov	r6, r0
 8010d3c:	460f      	mov	r7, r1
 8010d3e:	4640      	mov	r0, r8
 8010d40:	4649      	mov	r1, r9
 8010d42:	f7ef fa49 	bl	80001d8 <__aeabi_dsub>
 8010d46:	4622      	mov	r2, r4
 8010d48:	462b      	mov	r3, r5
 8010d4a:	f7ef fa45 	bl	80001d8 <__aeabi_dsub>
 8010d4e:	a31c      	add	r3, pc, #112	; (adr r3, 8010dc0 <__ieee754_rem_pio2+0x330>)
 8010d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d54:	4604      	mov	r4, r0
 8010d56:	460d      	mov	r5, r1
 8010d58:	ec51 0b18 	vmov	r0, r1, d8
 8010d5c:	f7ef fbf4 	bl	8000548 <__aeabi_dmul>
 8010d60:	4622      	mov	r2, r4
 8010d62:	462b      	mov	r3, r5
 8010d64:	f7ef fa38 	bl	80001d8 <__aeabi_dsub>
 8010d68:	4604      	mov	r4, r0
 8010d6a:	460d      	mov	r5, r1
 8010d6c:	e760      	b.n	8010c30 <__ieee754_rem_pio2+0x1a0>
 8010d6e:	4b1c      	ldr	r3, [pc, #112]	; (8010de0 <__ieee754_rem_pio2+0x350>)
 8010d70:	4598      	cmp	r8, r3
 8010d72:	dd37      	ble.n	8010de4 <__ieee754_rem_pio2+0x354>
 8010d74:	ee10 2a10 	vmov	r2, s0
 8010d78:	462b      	mov	r3, r5
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	f7ef fa2b 	bl	80001d8 <__aeabi_dsub>
 8010d82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010d86:	e9ca 0100 	strd	r0, r1, [sl]
 8010d8a:	e695      	b.n	8010ab8 <__ieee754_rem_pio2+0x28>
 8010d8c:	f3af 8000 	nop.w
 8010d90:	54400000 	.word	0x54400000
 8010d94:	3ff921fb 	.word	0x3ff921fb
 8010d98:	1a626331 	.word	0x1a626331
 8010d9c:	3dd0b461 	.word	0x3dd0b461
 8010da0:	1a600000 	.word	0x1a600000
 8010da4:	3dd0b461 	.word	0x3dd0b461
 8010da8:	2e037073 	.word	0x2e037073
 8010dac:	3ba3198a 	.word	0x3ba3198a
 8010db0:	6dc9c883 	.word	0x6dc9c883
 8010db4:	3fe45f30 	.word	0x3fe45f30
 8010db8:	2e000000 	.word	0x2e000000
 8010dbc:	3ba3198a 	.word	0x3ba3198a
 8010dc0:	252049c1 	.word	0x252049c1
 8010dc4:	397b839a 	.word	0x397b839a
 8010dc8:	3fe921fb 	.word	0x3fe921fb
 8010dcc:	4002d97b 	.word	0x4002d97b
 8010dd0:	3ff921fb 	.word	0x3ff921fb
 8010dd4:	413921fb 	.word	0x413921fb
 8010dd8:	3fe00000 	.word	0x3fe00000
 8010ddc:	080119a0 	.word	0x080119a0
 8010de0:	7fefffff 	.word	0x7fefffff
 8010de4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010de8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010dec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010df0:	4620      	mov	r0, r4
 8010df2:	460d      	mov	r5, r1
 8010df4:	f7ef fe42 	bl	8000a7c <__aeabi_d2iz>
 8010df8:	f7ef fb3c 	bl	8000474 <__aeabi_i2d>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	4620      	mov	r0, r4
 8010e02:	4629      	mov	r1, r5
 8010e04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e08:	f7ef f9e6 	bl	80001d8 <__aeabi_dsub>
 8010e0c:	4b21      	ldr	r3, [pc, #132]	; (8010e94 <__ieee754_rem_pio2+0x404>)
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f7ef fb9a 	bl	8000548 <__aeabi_dmul>
 8010e14:	460d      	mov	r5, r1
 8010e16:	4604      	mov	r4, r0
 8010e18:	f7ef fe30 	bl	8000a7c <__aeabi_d2iz>
 8010e1c:	f7ef fb2a 	bl	8000474 <__aeabi_i2d>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	4620      	mov	r0, r4
 8010e26:	4629      	mov	r1, r5
 8010e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e2c:	f7ef f9d4 	bl	80001d8 <__aeabi_dsub>
 8010e30:	4b18      	ldr	r3, [pc, #96]	; (8010e94 <__ieee754_rem_pio2+0x404>)
 8010e32:	2200      	movs	r2, #0
 8010e34:	f7ef fb88 	bl	8000548 <__aeabi_dmul>
 8010e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010e3c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010e40:	2703      	movs	r7, #3
 8010e42:	2400      	movs	r4, #0
 8010e44:	2500      	movs	r5, #0
 8010e46:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010e4a:	4622      	mov	r2, r4
 8010e4c:	462b      	mov	r3, r5
 8010e4e:	46b9      	mov	r9, r7
 8010e50:	3f01      	subs	r7, #1
 8010e52:	f7ef fde1 	bl	8000a18 <__aeabi_dcmpeq>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d1f5      	bne.n	8010e46 <__ieee754_rem_pio2+0x3b6>
 8010e5a:	4b0f      	ldr	r3, [pc, #60]	; (8010e98 <__ieee754_rem_pio2+0x408>)
 8010e5c:	9301      	str	r3, [sp, #4]
 8010e5e:	2302      	movs	r3, #2
 8010e60:	9300      	str	r3, [sp, #0]
 8010e62:	4632      	mov	r2, r6
 8010e64:	464b      	mov	r3, r9
 8010e66:	4651      	mov	r1, sl
 8010e68:	a804      	add	r0, sp, #16
 8010e6a:	f000 f851 	bl	8010f10 <__kernel_rem_pio2>
 8010e6e:	9b02      	ldr	r3, [sp, #8]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	4683      	mov	fp, r0
 8010e74:	f6bf ae4c 	bge.w	8010b10 <__ieee754_rem_pio2+0x80>
 8010e78:	e9da 2100 	ldrd	r2, r1, [sl]
 8010e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e80:	e9ca 2300 	strd	r2, r3, [sl]
 8010e84:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010e88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e8c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010e90:	e73f      	b.n	8010d12 <__ieee754_rem_pio2+0x282>
 8010e92:	bf00      	nop
 8010e94:	41700000 	.word	0x41700000
 8010e98:	08011a20 	.word	0x08011a20

08010e9c <fabs>:
 8010e9c:	ec51 0b10 	vmov	r0, r1, d0
 8010ea0:	ee10 2a10 	vmov	r2, s0
 8010ea4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ea8:	ec43 2b10 	vmov	d0, r2, r3
 8010eac:	4770      	bx	lr

08010eae <with_errno>:
 8010eae:	b570      	push	{r4, r5, r6, lr}
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	460d      	mov	r5, r1
 8010eb4:	4616      	mov	r6, r2
 8010eb6:	f7ff f99f 	bl	80101f8 <__errno>
 8010eba:	4629      	mov	r1, r5
 8010ebc:	6006      	str	r6, [r0, #0]
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	bd70      	pop	{r4, r5, r6, pc}

08010ec2 <xflow>:
 8010ec2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ec4:	4614      	mov	r4, r2
 8010ec6:	461d      	mov	r5, r3
 8010ec8:	b108      	cbz	r0, 8010ece <xflow+0xc>
 8010eca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010ece:	e9cd 2300 	strd	r2, r3, [sp]
 8010ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f7ef fb35 	bl	8000548 <__aeabi_dmul>
 8010ede:	2222      	movs	r2, #34	; 0x22
 8010ee0:	b003      	add	sp, #12
 8010ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ee6:	f7ff bfe2 	b.w	8010eae <with_errno>

08010eea <__math_uflow>:
 8010eea:	b508      	push	{r3, lr}
 8010eec:	2200      	movs	r2, #0
 8010eee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010ef2:	f7ff ffe6 	bl	8010ec2 <xflow>
 8010ef6:	ec41 0b10 	vmov	d0, r0, r1
 8010efa:	bd08      	pop	{r3, pc}

08010efc <__math_oflow>:
 8010efc:	b508      	push	{r3, lr}
 8010efe:	2200      	movs	r2, #0
 8010f00:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010f04:	f7ff ffdd 	bl	8010ec2 <xflow>
 8010f08:	ec41 0b10 	vmov	d0, r0, r1
 8010f0c:	bd08      	pop	{r3, pc}
	...

08010f10 <__kernel_rem_pio2>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	ed2d 8b02 	vpush	{d8}
 8010f18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010f1c:	f112 0f14 	cmn.w	r2, #20
 8010f20:	9306      	str	r3, [sp, #24]
 8010f22:	9104      	str	r1, [sp, #16]
 8010f24:	4bc2      	ldr	r3, [pc, #776]	; (8011230 <__kernel_rem_pio2+0x320>)
 8010f26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010f28:	9009      	str	r0, [sp, #36]	; 0x24
 8010f2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	9b06      	ldr	r3, [sp, #24]
 8010f32:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f36:	bfa8      	it	ge
 8010f38:	1ed4      	subge	r4, r2, #3
 8010f3a:	9305      	str	r3, [sp, #20]
 8010f3c:	bfb2      	itee	lt
 8010f3e:	2400      	movlt	r4, #0
 8010f40:	2318      	movge	r3, #24
 8010f42:	fb94 f4f3 	sdivge	r4, r4, r3
 8010f46:	f06f 0317 	mvn.w	r3, #23
 8010f4a:	fb04 3303 	mla	r3, r4, r3, r3
 8010f4e:	eb03 0a02 	add.w	sl, r3, r2
 8010f52:	9b00      	ldr	r3, [sp, #0]
 8010f54:	9a05      	ldr	r2, [sp, #20]
 8010f56:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011220 <__kernel_rem_pio2+0x310>
 8010f5a:	eb03 0802 	add.w	r8, r3, r2
 8010f5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010f60:	1aa7      	subs	r7, r4, r2
 8010f62:	ae20      	add	r6, sp, #128	; 0x80
 8010f64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010f68:	2500      	movs	r5, #0
 8010f6a:	4545      	cmp	r5, r8
 8010f6c:	dd13      	ble.n	8010f96 <__kernel_rem_pio2+0x86>
 8010f6e:	9b06      	ldr	r3, [sp, #24]
 8010f70:	aa20      	add	r2, sp, #128	; 0x80
 8010f72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010f76:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010f7a:	f04f 0800 	mov.w	r8, #0
 8010f7e:	9b00      	ldr	r3, [sp, #0]
 8010f80:	4598      	cmp	r8, r3
 8010f82:	dc31      	bgt.n	8010fe8 <__kernel_rem_pio2+0xd8>
 8010f84:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011220 <__kernel_rem_pio2+0x310>
 8010f88:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010f8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010f90:	462f      	mov	r7, r5
 8010f92:	2600      	movs	r6, #0
 8010f94:	e01b      	b.n	8010fce <__kernel_rem_pio2+0xbe>
 8010f96:	42ef      	cmn	r7, r5
 8010f98:	d407      	bmi.n	8010faa <__kernel_rem_pio2+0x9a>
 8010f9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010f9e:	f7ef fa69 	bl	8000474 <__aeabi_i2d>
 8010fa2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010fa6:	3501      	adds	r5, #1
 8010fa8:	e7df      	b.n	8010f6a <__kernel_rem_pio2+0x5a>
 8010faa:	ec51 0b18 	vmov	r0, r1, d8
 8010fae:	e7f8      	b.n	8010fa2 <__kernel_rem_pio2+0x92>
 8010fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010fb8:	f7ef fac6 	bl	8000548 <__aeabi_dmul>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fc4:	f7ef f90a 	bl	80001dc <__adddf3>
 8010fc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fcc:	3601      	adds	r6, #1
 8010fce:	9b05      	ldr	r3, [sp, #20]
 8010fd0:	429e      	cmp	r6, r3
 8010fd2:	f1a7 0708 	sub.w	r7, r7, #8
 8010fd6:	ddeb      	ble.n	8010fb0 <__kernel_rem_pio2+0xa0>
 8010fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fdc:	f108 0801 	add.w	r8, r8, #1
 8010fe0:	ecab 7b02 	vstmia	fp!, {d7}
 8010fe4:	3508      	adds	r5, #8
 8010fe6:	e7ca      	b.n	8010f7e <__kernel_rem_pio2+0x6e>
 8010fe8:	9b00      	ldr	r3, [sp, #0]
 8010fea:	aa0c      	add	r2, sp, #48	; 0x30
 8010fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ff2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010ff4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ff8:	9c00      	ldr	r4, [sp, #0]
 8010ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8010ffc:	00e3      	lsls	r3, r4, #3
 8010ffe:	9308      	str	r3, [sp, #32]
 8011000:	ab98      	add	r3, sp, #608	; 0x260
 8011002:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011006:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801100a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801100e:	ab70      	add	r3, sp, #448	; 0x1c0
 8011010:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011014:	46c3      	mov	fp, r8
 8011016:	46a1      	mov	r9, r4
 8011018:	f1b9 0f00 	cmp.w	r9, #0
 801101c:	f1a5 0508 	sub.w	r5, r5, #8
 8011020:	dc77      	bgt.n	8011112 <__kernel_rem_pio2+0x202>
 8011022:	ec47 6b10 	vmov	d0, r6, r7
 8011026:	4650      	mov	r0, sl
 8011028:	f000 fac2 	bl	80115b0 <scalbn>
 801102c:	ec57 6b10 	vmov	r6, r7, d0
 8011030:	2200      	movs	r2, #0
 8011032:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011036:	ee10 0a10 	vmov	r0, s0
 801103a:	4639      	mov	r1, r7
 801103c:	f7ef fa84 	bl	8000548 <__aeabi_dmul>
 8011040:	ec41 0b10 	vmov	d0, r0, r1
 8011044:	f000 fb34 	bl	80116b0 <floor>
 8011048:	4b7a      	ldr	r3, [pc, #488]	; (8011234 <__kernel_rem_pio2+0x324>)
 801104a:	ec51 0b10 	vmov	r0, r1, d0
 801104e:	2200      	movs	r2, #0
 8011050:	f7ef fa7a 	bl	8000548 <__aeabi_dmul>
 8011054:	4602      	mov	r2, r0
 8011056:	460b      	mov	r3, r1
 8011058:	4630      	mov	r0, r6
 801105a:	4639      	mov	r1, r7
 801105c:	f7ef f8bc 	bl	80001d8 <__aeabi_dsub>
 8011060:	460f      	mov	r7, r1
 8011062:	4606      	mov	r6, r0
 8011064:	f7ef fd0a 	bl	8000a7c <__aeabi_d2iz>
 8011068:	9002      	str	r0, [sp, #8]
 801106a:	f7ef fa03 	bl	8000474 <__aeabi_i2d>
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	4630      	mov	r0, r6
 8011074:	4639      	mov	r1, r7
 8011076:	f7ef f8af 	bl	80001d8 <__aeabi_dsub>
 801107a:	f1ba 0f00 	cmp.w	sl, #0
 801107e:	4606      	mov	r6, r0
 8011080:	460f      	mov	r7, r1
 8011082:	dd6d      	ble.n	8011160 <__kernel_rem_pio2+0x250>
 8011084:	1e61      	subs	r1, r4, #1
 8011086:	ab0c      	add	r3, sp, #48	; 0x30
 8011088:	9d02      	ldr	r5, [sp, #8]
 801108a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801108e:	f1ca 0018 	rsb	r0, sl, #24
 8011092:	fa43 f200 	asr.w	r2, r3, r0
 8011096:	4415      	add	r5, r2
 8011098:	4082      	lsls	r2, r0
 801109a:	1a9b      	subs	r3, r3, r2
 801109c:	aa0c      	add	r2, sp, #48	; 0x30
 801109e:	9502      	str	r5, [sp, #8]
 80110a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80110a4:	f1ca 0217 	rsb	r2, sl, #23
 80110a8:	fa43 fb02 	asr.w	fp, r3, r2
 80110ac:	f1bb 0f00 	cmp.w	fp, #0
 80110b0:	dd65      	ble.n	801117e <__kernel_rem_pio2+0x26e>
 80110b2:	9b02      	ldr	r3, [sp, #8]
 80110b4:	2200      	movs	r2, #0
 80110b6:	3301      	adds	r3, #1
 80110b8:	9302      	str	r3, [sp, #8]
 80110ba:	4615      	mov	r5, r2
 80110bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80110c0:	4294      	cmp	r4, r2
 80110c2:	f300 809f 	bgt.w	8011204 <__kernel_rem_pio2+0x2f4>
 80110c6:	f1ba 0f00 	cmp.w	sl, #0
 80110ca:	dd07      	ble.n	80110dc <__kernel_rem_pio2+0x1cc>
 80110cc:	f1ba 0f01 	cmp.w	sl, #1
 80110d0:	f000 80c1 	beq.w	8011256 <__kernel_rem_pio2+0x346>
 80110d4:	f1ba 0f02 	cmp.w	sl, #2
 80110d8:	f000 80c7 	beq.w	801126a <__kernel_rem_pio2+0x35a>
 80110dc:	f1bb 0f02 	cmp.w	fp, #2
 80110e0:	d14d      	bne.n	801117e <__kernel_rem_pio2+0x26e>
 80110e2:	4632      	mov	r2, r6
 80110e4:	463b      	mov	r3, r7
 80110e6:	4954      	ldr	r1, [pc, #336]	; (8011238 <__kernel_rem_pio2+0x328>)
 80110e8:	2000      	movs	r0, #0
 80110ea:	f7ef f875 	bl	80001d8 <__aeabi_dsub>
 80110ee:	4606      	mov	r6, r0
 80110f0:	460f      	mov	r7, r1
 80110f2:	2d00      	cmp	r5, #0
 80110f4:	d043      	beq.n	801117e <__kernel_rem_pio2+0x26e>
 80110f6:	4650      	mov	r0, sl
 80110f8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011228 <__kernel_rem_pio2+0x318>
 80110fc:	f000 fa58 	bl	80115b0 <scalbn>
 8011100:	4630      	mov	r0, r6
 8011102:	4639      	mov	r1, r7
 8011104:	ec53 2b10 	vmov	r2, r3, d0
 8011108:	f7ef f866 	bl	80001d8 <__aeabi_dsub>
 801110c:	4606      	mov	r6, r0
 801110e:	460f      	mov	r7, r1
 8011110:	e035      	b.n	801117e <__kernel_rem_pio2+0x26e>
 8011112:	4b4a      	ldr	r3, [pc, #296]	; (801123c <__kernel_rem_pio2+0x32c>)
 8011114:	2200      	movs	r2, #0
 8011116:	4630      	mov	r0, r6
 8011118:	4639      	mov	r1, r7
 801111a:	f7ef fa15 	bl	8000548 <__aeabi_dmul>
 801111e:	f7ef fcad 	bl	8000a7c <__aeabi_d2iz>
 8011122:	f7ef f9a7 	bl	8000474 <__aeabi_i2d>
 8011126:	4602      	mov	r2, r0
 8011128:	460b      	mov	r3, r1
 801112a:	ec43 2b18 	vmov	d8, r2, r3
 801112e:	4b44      	ldr	r3, [pc, #272]	; (8011240 <__kernel_rem_pio2+0x330>)
 8011130:	2200      	movs	r2, #0
 8011132:	f7ef fa09 	bl	8000548 <__aeabi_dmul>
 8011136:	4602      	mov	r2, r0
 8011138:	460b      	mov	r3, r1
 801113a:	4630      	mov	r0, r6
 801113c:	4639      	mov	r1, r7
 801113e:	f7ef f84b 	bl	80001d8 <__aeabi_dsub>
 8011142:	f7ef fc9b 	bl	8000a7c <__aeabi_d2iz>
 8011146:	e9d5 2300 	ldrd	r2, r3, [r5]
 801114a:	f84b 0b04 	str.w	r0, [fp], #4
 801114e:	ec51 0b18 	vmov	r0, r1, d8
 8011152:	f7ef f843 	bl	80001dc <__adddf3>
 8011156:	f109 39ff 	add.w	r9, r9, #4294967295
 801115a:	4606      	mov	r6, r0
 801115c:	460f      	mov	r7, r1
 801115e:	e75b      	b.n	8011018 <__kernel_rem_pio2+0x108>
 8011160:	d106      	bne.n	8011170 <__kernel_rem_pio2+0x260>
 8011162:	1e63      	subs	r3, r4, #1
 8011164:	aa0c      	add	r2, sp, #48	; 0x30
 8011166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801116a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801116e:	e79d      	b.n	80110ac <__kernel_rem_pio2+0x19c>
 8011170:	4b34      	ldr	r3, [pc, #208]	; (8011244 <__kernel_rem_pio2+0x334>)
 8011172:	2200      	movs	r2, #0
 8011174:	f7ef fc6e 	bl	8000a54 <__aeabi_dcmpge>
 8011178:	2800      	cmp	r0, #0
 801117a:	d140      	bne.n	80111fe <__kernel_rem_pio2+0x2ee>
 801117c:	4683      	mov	fp, r0
 801117e:	2200      	movs	r2, #0
 8011180:	2300      	movs	r3, #0
 8011182:	4630      	mov	r0, r6
 8011184:	4639      	mov	r1, r7
 8011186:	f7ef fc47 	bl	8000a18 <__aeabi_dcmpeq>
 801118a:	2800      	cmp	r0, #0
 801118c:	f000 80c1 	beq.w	8011312 <__kernel_rem_pio2+0x402>
 8011190:	1e65      	subs	r5, r4, #1
 8011192:	462b      	mov	r3, r5
 8011194:	2200      	movs	r2, #0
 8011196:	9900      	ldr	r1, [sp, #0]
 8011198:	428b      	cmp	r3, r1
 801119a:	da6d      	bge.n	8011278 <__kernel_rem_pio2+0x368>
 801119c:	2a00      	cmp	r2, #0
 801119e:	f000 808a 	beq.w	80112b6 <__kernel_rem_pio2+0x3a6>
 80111a2:	ab0c      	add	r3, sp, #48	; 0x30
 80111a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80111a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 80ae 	beq.w	801130e <__kernel_rem_pio2+0x3fe>
 80111b2:	4650      	mov	r0, sl
 80111b4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011228 <__kernel_rem_pio2+0x318>
 80111b8:	f000 f9fa 	bl	80115b0 <scalbn>
 80111bc:	1c6b      	adds	r3, r5, #1
 80111be:	00da      	lsls	r2, r3, #3
 80111c0:	9205      	str	r2, [sp, #20]
 80111c2:	ec57 6b10 	vmov	r6, r7, d0
 80111c6:	aa70      	add	r2, sp, #448	; 0x1c0
 80111c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801123c <__kernel_rem_pio2+0x32c>
 80111cc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80111d0:	462c      	mov	r4, r5
 80111d2:	f04f 0800 	mov.w	r8, #0
 80111d6:	2c00      	cmp	r4, #0
 80111d8:	f280 80d4 	bge.w	8011384 <__kernel_rem_pio2+0x474>
 80111dc:	462c      	mov	r4, r5
 80111de:	2c00      	cmp	r4, #0
 80111e0:	f2c0 8102 	blt.w	80113e8 <__kernel_rem_pio2+0x4d8>
 80111e4:	4b18      	ldr	r3, [pc, #96]	; (8011248 <__kernel_rem_pio2+0x338>)
 80111e6:	461e      	mov	r6, r3
 80111e8:	ab70      	add	r3, sp, #448	; 0x1c0
 80111ea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80111ee:	1b2b      	subs	r3, r5, r4
 80111f0:	f04f 0900 	mov.w	r9, #0
 80111f4:	f04f 0a00 	mov.w	sl, #0
 80111f8:	2700      	movs	r7, #0
 80111fa:	9306      	str	r3, [sp, #24]
 80111fc:	e0e6      	b.n	80113cc <__kernel_rem_pio2+0x4bc>
 80111fe:	f04f 0b02 	mov.w	fp, #2
 8011202:	e756      	b.n	80110b2 <__kernel_rem_pio2+0x1a2>
 8011204:	f8d8 3000 	ldr.w	r3, [r8]
 8011208:	bb05      	cbnz	r5, 801124c <__kernel_rem_pio2+0x33c>
 801120a:	b123      	cbz	r3, 8011216 <__kernel_rem_pio2+0x306>
 801120c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011210:	f8c8 3000 	str.w	r3, [r8]
 8011214:	2301      	movs	r3, #1
 8011216:	3201      	adds	r2, #1
 8011218:	f108 0804 	add.w	r8, r8, #4
 801121c:	461d      	mov	r5, r3
 801121e:	e74f      	b.n	80110c0 <__kernel_rem_pio2+0x1b0>
	...
 801122c:	3ff00000 	.word	0x3ff00000
 8011230:	08011b68 	.word	0x08011b68
 8011234:	40200000 	.word	0x40200000
 8011238:	3ff00000 	.word	0x3ff00000
 801123c:	3e700000 	.word	0x3e700000
 8011240:	41700000 	.word	0x41700000
 8011244:	3fe00000 	.word	0x3fe00000
 8011248:	08011b28 	.word	0x08011b28
 801124c:	1acb      	subs	r3, r1, r3
 801124e:	f8c8 3000 	str.w	r3, [r8]
 8011252:	462b      	mov	r3, r5
 8011254:	e7df      	b.n	8011216 <__kernel_rem_pio2+0x306>
 8011256:	1e62      	subs	r2, r4, #1
 8011258:	ab0c      	add	r3, sp, #48	; 0x30
 801125a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801125e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011262:	a90c      	add	r1, sp, #48	; 0x30
 8011264:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011268:	e738      	b.n	80110dc <__kernel_rem_pio2+0x1cc>
 801126a:	1e62      	subs	r2, r4, #1
 801126c:	ab0c      	add	r3, sp, #48	; 0x30
 801126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011272:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011276:	e7f4      	b.n	8011262 <__kernel_rem_pio2+0x352>
 8011278:	a90c      	add	r1, sp, #48	; 0x30
 801127a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801127e:	3b01      	subs	r3, #1
 8011280:	430a      	orrs	r2, r1
 8011282:	e788      	b.n	8011196 <__kernel_rem_pio2+0x286>
 8011284:	3301      	adds	r3, #1
 8011286:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801128a:	2900      	cmp	r1, #0
 801128c:	d0fa      	beq.n	8011284 <__kernel_rem_pio2+0x374>
 801128e:	9a08      	ldr	r2, [sp, #32]
 8011290:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011294:	446a      	add	r2, sp
 8011296:	3a98      	subs	r2, #152	; 0x98
 8011298:	9208      	str	r2, [sp, #32]
 801129a:	9a06      	ldr	r2, [sp, #24]
 801129c:	a920      	add	r1, sp, #128	; 0x80
 801129e:	18a2      	adds	r2, r4, r2
 80112a0:	18e3      	adds	r3, r4, r3
 80112a2:	f104 0801 	add.w	r8, r4, #1
 80112a6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80112aa:	9302      	str	r3, [sp, #8]
 80112ac:	9b02      	ldr	r3, [sp, #8]
 80112ae:	4543      	cmp	r3, r8
 80112b0:	da04      	bge.n	80112bc <__kernel_rem_pio2+0x3ac>
 80112b2:	461c      	mov	r4, r3
 80112b4:	e6a2      	b.n	8010ffc <__kernel_rem_pio2+0xec>
 80112b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112b8:	2301      	movs	r3, #1
 80112ba:	e7e4      	b.n	8011286 <__kernel_rem_pio2+0x376>
 80112bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80112c2:	f7ef f8d7 	bl	8000474 <__aeabi_i2d>
 80112c6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80112ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112cc:	46ab      	mov	fp, r5
 80112ce:	461c      	mov	r4, r3
 80112d0:	f04f 0900 	mov.w	r9, #0
 80112d4:	2600      	movs	r6, #0
 80112d6:	2700      	movs	r7, #0
 80112d8:	9b05      	ldr	r3, [sp, #20]
 80112da:	4599      	cmp	r9, r3
 80112dc:	dd06      	ble.n	80112ec <__kernel_rem_pio2+0x3dc>
 80112de:	9b08      	ldr	r3, [sp, #32]
 80112e0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80112e4:	f108 0801 	add.w	r8, r8, #1
 80112e8:	9308      	str	r3, [sp, #32]
 80112ea:	e7df      	b.n	80112ac <__kernel_rem_pio2+0x39c>
 80112ec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80112f0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80112f4:	f7ef f928 	bl	8000548 <__aeabi_dmul>
 80112f8:	4602      	mov	r2, r0
 80112fa:	460b      	mov	r3, r1
 80112fc:	4630      	mov	r0, r6
 80112fe:	4639      	mov	r1, r7
 8011300:	f7ee ff6c 	bl	80001dc <__adddf3>
 8011304:	f109 0901 	add.w	r9, r9, #1
 8011308:	4606      	mov	r6, r0
 801130a:	460f      	mov	r7, r1
 801130c:	e7e4      	b.n	80112d8 <__kernel_rem_pio2+0x3c8>
 801130e:	3d01      	subs	r5, #1
 8011310:	e747      	b.n	80111a2 <__kernel_rem_pio2+0x292>
 8011312:	ec47 6b10 	vmov	d0, r6, r7
 8011316:	f1ca 0000 	rsb	r0, sl, #0
 801131a:	f000 f949 	bl	80115b0 <scalbn>
 801131e:	ec57 6b10 	vmov	r6, r7, d0
 8011322:	4ba0      	ldr	r3, [pc, #640]	; (80115a4 <__kernel_rem_pio2+0x694>)
 8011324:	ee10 0a10 	vmov	r0, s0
 8011328:	2200      	movs	r2, #0
 801132a:	4639      	mov	r1, r7
 801132c:	f7ef fb92 	bl	8000a54 <__aeabi_dcmpge>
 8011330:	b1f8      	cbz	r0, 8011372 <__kernel_rem_pio2+0x462>
 8011332:	4b9d      	ldr	r3, [pc, #628]	; (80115a8 <__kernel_rem_pio2+0x698>)
 8011334:	2200      	movs	r2, #0
 8011336:	4630      	mov	r0, r6
 8011338:	4639      	mov	r1, r7
 801133a:	f7ef f905 	bl	8000548 <__aeabi_dmul>
 801133e:	f7ef fb9d 	bl	8000a7c <__aeabi_d2iz>
 8011342:	4680      	mov	r8, r0
 8011344:	f7ef f896 	bl	8000474 <__aeabi_i2d>
 8011348:	4b96      	ldr	r3, [pc, #600]	; (80115a4 <__kernel_rem_pio2+0x694>)
 801134a:	2200      	movs	r2, #0
 801134c:	f7ef f8fc 	bl	8000548 <__aeabi_dmul>
 8011350:	460b      	mov	r3, r1
 8011352:	4602      	mov	r2, r0
 8011354:	4639      	mov	r1, r7
 8011356:	4630      	mov	r0, r6
 8011358:	f7ee ff3e 	bl	80001d8 <__aeabi_dsub>
 801135c:	f7ef fb8e 	bl	8000a7c <__aeabi_d2iz>
 8011360:	1c65      	adds	r5, r4, #1
 8011362:	ab0c      	add	r3, sp, #48	; 0x30
 8011364:	f10a 0a18 	add.w	sl, sl, #24
 8011368:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801136c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011370:	e71f      	b.n	80111b2 <__kernel_rem_pio2+0x2a2>
 8011372:	4630      	mov	r0, r6
 8011374:	4639      	mov	r1, r7
 8011376:	f7ef fb81 	bl	8000a7c <__aeabi_d2iz>
 801137a:	ab0c      	add	r3, sp, #48	; 0x30
 801137c:	4625      	mov	r5, r4
 801137e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011382:	e716      	b.n	80111b2 <__kernel_rem_pio2+0x2a2>
 8011384:	ab0c      	add	r3, sp, #48	; 0x30
 8011386:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801138a:	f7ef f873 	bl	8000474 <__aeabi_i2d>
 801138e:	4632      	mov	r2, r6
 8011390:	463b      	mov	r3, r7
 8011392:	f7ef f8d9 	bl	8000548 <__aeabi_dmul>
 8011396:	4642      	mov	r2, r8
 8011398:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801139c:	464b      	mov	r3, r9
 801139e:	4630      	mov	r0, r6
 80113a0:	4639      	mov	r1, r7
 80113a2:	f7ef f8d1 	bl	8000548 <__aeabi_dmul>
 80113a6:	3c01      	subs	r4, #1
 80113a8:	4606      	mov	r6, r0
 80113aa:	460f      	mov	r7, r1
 80113ac:	e713      	b.n	80111d6 <__kernel_rem_pio2+0x2c6>
 80113ae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80113b2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80113b6:	f7ef f8c7 	bl	8000548 <__aeabi_dmul>
 80113ba:	4602      	mov	r2, r0
 80113bc:	460b      	mov	r3, r1
 80113be:	4648      	mov	r0, r9
 80113c0:	4651      	mov	r1, sl
 80113c2:	f7ee ff0b 	bl	80001dc <__adddf3>
 80113c6:	3701      	adds	r7, #1
 80113c8:	4681      	mov	r9, r0
 80113ca:	468a      	mov	sl, r1
 80113cc:	9b00      	ldr	r3, [sp, #0]
 80113ce:	429f      	cmp	r7, r3
 80113d0:	dc02      	bgt.n	80113d8 <__kernel_rem_pio2+0x4c8>
 80113d2:	9b06      	ldr	r3, [sp, #24]
 80113d4:	429f      	cmp	r7, r3
 80113d6:	ddea      	ble.n	80113ae <__kernel_rem_pio2+0x49e>
 80113d8:	9a06      	ldr	r2, [sp, #24]
 80113da:	ab48      	add	r3, sp, #288	; 0x120
 80113dc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80113e0:	e9c6 9a00 	strd	r9, sl, [r6]
 80113e4:	3c01      	subs	r4, #1
 80113e6:	e6fa      	b.n	80111de <__kernel_rem_pio2+0x2ce>
 80113e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80113ea:	2b02      	cmp	r3, #2
 80113ec:	dc0b      	bgt.n	8011406 <__kernel_rem_pio2+0x4f6>
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	dc39      	bgt.n	8011466 <__kernel_rem_pio2+0x556>
 80113f2:	d05d      	beq.n	80114b0 <__kernel_rem_pio2+0x5a0>
 80113f4:	9b02      	ldr	r3, [sp, #8]
 80113f6:	f003 0007 	and.w	r0, r3, #7
 80113fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80113fe:	ecbd 8b02 	vpop	{d8}
 8011402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011406:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011408:	2b03      	cmp	r3, #3
 801140a:	d1f3      	bne.n	80113f4 <__kernel_rem_pio2+0x4e4>
 801140c:	9b05      	ldr	r3, [sp, #20]
 801140e:	9500      	str	r5, [sp, #0]
 8011410:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011414:	eb0d 0403 	add.w	r4, sp, r3
 8011418:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801141c:	46a2      	mov	sl, r4
 801141e:	9b00      	ldr	r3, [sp, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	f1aa 0a08 	sub.w	sl, sl, #8
 8011426:	dc69      	bgt.n	80114fc <__kernel_rem_pio2+0x5ec>
 8011428:	46aa      	mov	sl, r5
 801142a:	f1ba 0f01 	cmp.w	sl, #1
 801142e:	f1a4 0408 	sub.w	r4, r4, #8
 8011432:	f300 8083 	bgt.w	801153c <__kernel_rem_pio2+0x62c>
 8011436:	9c05      	ldr	r4, [sp, #20]
 8011438:	ab48      	add	r3, sp, #288	; 0x120
 801143a:	441c      	add	r4, r3
 801143c:	2000      	movs	r0, #0
 801143e:	2100      	movs	r1, #0
 8011440:	2d01      	cmp	r5, #1
 8011442:	f300 809a 	bgt.w	801157a <__kernel_rem_pio2+0x66a>
 8011446:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801144a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801144e:	f1bb 0f00 	cmp.w	fp, #0
 8011452:	f040 8098 	bne.w	8011586 <__kernel_rem_pio2+0x676>
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	e9c3 7800 	strd	r7, r8, [r3]
 801145c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011460:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011464:	e7c6      	b.n	80113f4 <__kernel_rem_pio2+0x4e4>
 8011466:	9e05      	ldr	r6, [sp, #20]
 8011468:	ab48      	add	r3, sp, #288	; 0x120
 801146a:	441e      	add	r6, r3
 801146c:	462c      	mov	r4, r5
 801146e:	2000      	movs	r0, #0
 8011470:	2100      	movs	r1, #0
 8011472:	2c00      	cmp	r4, #0
 8011474:	da33      	bge.n	80114de <__kernel_rem_pio2+0x5ce>
 8011476:	f1bb 0f00 	cmp.w	fp, #0
 801147a:	d036      	beq.n	80114ea <__kernel_rem_pio2+0x5da>
 801147c:	4602      	mov	r2, r0
 801147e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011482:	9c04      	ldr	r4, [sp, #16]
 8011484:	e9c4 2300 	strd	r2, r3, [r4]
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011490:	f7ee fea2 	bl	80001d8 <__aeabi_dsub>
 8011494:	ae4a      	add	r6, sp, #296	; 0x128
 8011496:	2401      	movs	r4, #1
 8011498:	42a5      	cmp	r5, r4
 801149a:	da29      	bge.n	80114f0 <__kernel_rem_pio2+0x5e0>
 801149c:	f1bb 0f00 	cmp.w	fp, #0
 80114a0:	d002      	beq.n	80114a8 <__kernel_rem_pio2+0x598>
 80114a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114a6:	4619      	mov	r1, r3
 80114a8:	9b04      	ldr	r3, [sp, #16]
 80114aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80114ae:	e7a1      	b.n	80113f4 <__kernel_rem_pio2+0x4e4>
 80114b0:	9c05      	ldr	r4, [sp, #20]
 80114b2:	ab48      	add	r3, sp, #288	; 0x120
 80114b4:	441c      	add	r4, r3
 80114b6:	2000      	movs	r0, #0
 80114b8:	2100      	movs	r1, #0
 80114ba:	2d00      	cmp	r5, #0
 80114bc:	da09      	bge.n	80114d2 <__kernel_rem_pio2+0x5c2>
 80114be:	f1bb 0f00 	cmp.w	fp, #0
 80114c2:	d002      	beq.n	80114ca <__kernel_rem_pio2+0x5ba>
 80114c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114c8:	4619      	mov	r1, r3
 80114ca:	9b04      	ldr	r3, [sp, #16]
 80114cc:	e9c3 0100 	strd	r0, r1, [r3]
 80114d0:	e790      	b.n	80113f4 <__kernel_rem_pio2+0x4e4>
 80114d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80114d6:	f7ee fe81 	bl	80001dc <__adddf3>
 80114da:	3d01      	subs	r5, #1
 80114dc:	e7ed      	b.n	80114ba <__kernel_rem_pio2+0x5aa>
 80114de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80114e2:	f7ee fe7b 	bl	80001dc <__adddf3>
 80114e6:	3c01      	subs	r4, #1
 80114e8:	e7c3      	b.n	8011472 <__kernel_rem_pio2+0x562>
 80114ea:	4602      	mov	r2, r0
 80114ec:	460b      	mov	r3, r1
 80114ee:	e7c8      	b.n	8011482 <__kernel_rem_pio2+0x572>
 80114f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80114f4:	f7ee fe72 	bl	80001dc <__adddf3>
 80114f8:	3401      	adds	r4, #1
 80114fa:	e7cd      	b.n	8011498 <__kernel_rem_pio2+0x588>
 80114fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8011500:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011504:	9b00      	ldr	r3, [sp, #0]
 8011506:	3b01      	subs	r3, #1
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	4632      	mov	r2, r6
 801150c:	463b      	mov	r3, r7
 801150e:	4640      	mov	r0, r8
 8011510:	4649      	mov	r1, r9
 8011512:	f7ee fe63 	bl	80001dc <__adddf3>
 8011516:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	4640      	mov	r0, r8
 8011520:	4649      	mov	r1, r9
 8011522:	f7ee fe59 	bl	80001d8 <__aeabi_dsub>
 8011526:	4632      	mov	r2, r6
 8011528:	463b      	mov	r3, r7
 801152a:	f7ee fe57 	bl	80001dc <__adddf3>
 801152e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011532:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011536:	ed8a 7b00 	vstr	d7, [sl]
 801153a:	e770      	b.n	801141e <__kernel_rem_pio2+0x50e>
 801153c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011540:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011544:	4640      	mov	r0, r8
 8011546:	4632      	mov	r2, r6
 8011548:	463b      	mov	r3, r7
 801154a:	4649      	mov	r1, r9
 801154c:	f7ee fe46 	bl	80001dc <__adddf3>
 8011550:	e9cd 0100 	strd	r0, r1, [sp]
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	4640      	mov	r0, r8
 801155a:	4649      	mov	r1, r9
 801155c:	f7ee fe3c 	bl	80001d8 <__aeabi_dsub>
 8011560:	4632      	mov	r2, r6
 8011562:	463b      	mov	r3, r7
 8011564:	f7ee fe3a 	bl	80001dc <__adddf3>
 8011568:	ed9d 7b00 	vldr	d7, [sp]
 801156c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011570:	ed84 7b00 	vstr	d7, [r4]
 8011574:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011578:	e757      	b.n	801142a <__kernel_rem_pio2+0x51a>
 801157a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801157e:	f7ee fe2d 	bl	80001dc <__adddf3>
 8011582:	3d01      	subs	r5, #1
 8011584:	e75c      	b.n	8011440 <__kernel_rem_pio2+0x530>
 8011586:	9b04      	ldr	r3, [sp, #16]
 8011588:	9a04      	ldr	r2, [sp, #16]
 801158a:	601f      	str	r7, [r3, #0]
 801158c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011590:	605c      	str	r4, [r3, #4]
 8011592:	609d      	str	r5, [r3, #8]
 8011594:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011598:	60d3      	str	r3, [r2, #12]
 801159a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801159e:	6110      	str	r0, [r2, #16]
 80115a0:	6153      	str	r3, [r2, #20]
 80115a2:	e727      	b.n	80113f4 <__kernel_rem_pio2+0x4e4>
 80115a4:	41700000 	.word	0x41700000
 80115a8:	3e700000 	.word	0x3e700000
 80115ac:	00000000 	.word	0x00000000

080115b0 <scalbn>:
 80115b0:	b570      	push	{r4, r5, r6, lr}
 80115b2:	ec55 4b10 	vmov	r4, r5, d0
 80115b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80115ba:	4606      	mov	r6, r0
 80115bc:	462b      	mov	r3, r5
 80115be:	b999      	cbnz	r1, 80115e8 <scalbn+0x38>
 80115c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80115c4:	4323      	orrs	r3, r4
 80115c6:	d03f      	beq.n	8011648 <scalbn+0x98>
 80115c8:	4b35      	ldr	r3, [pc, #212]	; (80116a0 <scalbn+0xf0>)
 80115ca:	4629      	mov	r1, r5
 80115cc:	ee10 0a10 	vmov	r0, s0
 80115d0:	2200      	movs	r2, #0
 80115d2:	f7ee ffb9 	bl	8000548 <__aeabi_dmul>
 80115d6:	4b33      	ldr	r3, [pc, #204]	; (80116a4 <scalbn+0xf4>)
 80115d8:	429e      	cmp	r6, r3
 80115da:	4604      	mov	r4, r0
 80115dc:	460d      	mov	r5, r1
 80115de:	da10      	bge.n	8011602 <scalbn+0x52>
 80115e0:	a327      	add	r3, pc, #156	; (adr r3, 8011680 <scalbn+0xd0>)
 80115e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e6:	e01f      	b.n	8011628 <scalbn+0x78>
 80115e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80115ec:	4291      	cmp	r1, r2
 80115ee:	d10c      	bne.n	801160a <scalbn+0x5a>
 80115f0:	ee10 2a10 	vmov	r2, s0
 80115f4:	4620      	mov	r0, r4
 80115f6:	4629      	mov	r1, r5
 80115f8:	f7ee fdf0 	bl	80001dc <__adddf3>
 80115fc:	4604      	mov	r4, r0
 80115fe:	460d      	mov	r5, r1
 8011600:	e022      	b.n	8011648 <scalbn+0x98>
 8011602:	460b      	mov	r3, r1
 8011604:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011608:	3936      	subs	r1, #54	; 0x36
 801160a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801160e:	4296      	cmp	r6, r2
 8011610:	dd0d      	ble.n	801162e <scalbn+0x7e>
 8011612:	2d00      	cmp	r5, #0
 8011614:	a11c      	add	r1, pc, #112	; (adr r1, 8011688 <scalbn+0xd8>)
 8011616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801161a:	da02      	bge.n	8011622 <scalbn+0x72>
 801161c:	a11c      	add	r1, pc, #112	; (adr r1, 8011690 <scalbn+0xe0>)
 801161e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011622:	a319      	add	r3, pc, #100	; (adr r3, 8011688 <scalbn+0xd8>)
 8011624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011628:	f7ee ff8e 	bl	8000548 <__aeabi_dmul>
 801162c:	e7e6      	b.n	80115fc <scalbn+0x4c>
 801162e:	1872      	adds	r2, r6, r1
 8011630:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011634:	428a      	cmp	r2, r1
 8011636:	dcec      	bgt.n	8011612 <scalbn+0x62>
 8011638:	2a00      	cmp	r2, #0
 801163a:	dd08      	ble.n	801164e <scalbn+0x9e>
 801163c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011640:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011644:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011648:	ec45 4b10 	vmov	d0, r4, r5
 801164c:	bd70      	pop	{r4, r5, r6, pc}
 801164e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011652:	da08      	bge.n	8011666 <scalbn+0xb6>
 8011654:	2d00      	cmp	r5, #0
 8011656:	a10a      	add	r1, pc, #40	; (adr r1, 8011680 <scalbn+0xd0>)
 8011658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801165c:	dac0      	bge.n	80115e0 <scalbn+0x30>
 801165e:	a10e      	add	r1, pc, #56	; (adr r1, 8011698 <scalbn+0xe8>)
 8011660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011664:	e7bc      	b.n	80115e0 <scalbn+0x30>
 8011666:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801166a:	3236      	adds	r2, #54	; 0x36
 801166c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011670:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011674:	4620      	mov	r0, r4
 8011676:	4b0c      	ldr	r3, [pc, #48]	; (80116a8 <scalbn+0xf8>)
 8011678:	2200      	movs	r2, #0
 801167a:	e7d5      	b.n	8011628 <scalbn+0x78>
 801167c:	f3af 8000 	nop.w
 8011680:	c2f8f359 	.word	0xc2f8f359
 8011684:	01a56e1f 	.word	0x01a56e1f
 8011688:	8800759c 	.word	0x8800759c
 801168c:	7e37e43c 	.word	0x7e37e43c
 8011690:	8800759c 	.word	0x8800759c
 8011694:	fe37e43c 	.word	0xfe37e43c
 8011698:	c2f8f359 	.word	0xc2f8f359
 801169c:	81a56e1f 	.word	0x81a56e1f
 80116a0:	43500000 	.word	0x43500000
 80116a4:	ffff3cb0 	.word	0xffff3cb0
 80116a8:	3c900000 	.word	0x3c900000
 80116ac:	00000000 	.word	0x00000000

080116b0 <floor>:
 80116b0:	ec51 0b10 	vmov	r0, r1, d0
 80116b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80116b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80116c0:	2e13      	cmp	r6, #19
 80116c2:	ee10 5a10 	vmov	r5, s0
 80116c6:	ee10 8a10 	vmov	r8, s0
 80116ca:	460c      	mov	r4, r1
 80116cc:	dc31      	bgt.n	8011732 <floor+0x82>
 80116ce:	2e00      	cmp	r6, #0
 80116d0:	da14      	bge.n	80116fc <floor+0x4c>
 80116d2:	a333      	add	r3, pc, #204	; (adr r3, 80117a0 <floor+0xf0>)
 80116d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d8:	f7ee fd80 	bl	80001dc <__adddf3>
 80116dc:	2200      	movs	r2, #0
 80116de:	2300      	movs	r3, #0
 80116e0:	f7ef f9c2 	bl	8000a68 <__aeabi_dcmpgt>
 80116e4:	b138      	cbz	r0, 80116f6 <floor+0x46>
 80116e6:	2c00      	cmp	r4, #0
 80116e8:	da53      	bge.n	8011792 <floor+0xe2>
 80116ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80116ee:	4325      	orrs	r5, r4
 80116f0:	d052      	beq.n	8011798 <floor+0xe8>
 80116f2:	4c2d      	ldr	r4, [pc, #180]	; (80117a8 <floor+0xf8>)
 80116f4:	2500      	movs	r5, #0
 80116f6:	4621      	mov	r1, r4
 80116f8:	4628      	mov	r0, r5
 80116fa:	e024      	b.n	8011746 <floor+0x96>
 80116fc:	4f2b      	ldr	r7, [pc, #172]	; (80117ac <floor+0xfc>)
 80116fe:	4137      	asrs	r7, r6
 8011700:	ea01 0307 	and.w	r3, r1, r7
 8011704:	4303      	orrs	r3, r0
 8011706:	d01e      	beq.n	8011746 <floor+0x96>
 8011708:	a325      	add	r3, pc, #148	; (adr r3, 80117a0 <floor+0xf0>)
 801170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170e:	f7ee fd65 	bl	80001dc <__adddf3>
 8011712:	2200      	movs	r2, #0
 8011714:	2300      	movs	r3, #0
 8011716:	f7ef f9a7 	bl	8000a68 <__aeabi_dcmpgt>
 801171a:	2800      	cmp	r0, #0
 801171c:	d0eb      	beq.n	80116f6 <floor+0x46>
 801171e:	2c00      	cmp	r4, #0
 8011720:	bfbe      	ittt	lt
 8011722:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011726:	4133      	asrlt	r3, r6
 8011728:	18e4      	addlt	r4, r4, r3
 801172a:	ea24 0407 	bic.w	r4, r4, r7
 801172e:	2500      	movs	r5, #0
 8011730:	e7e1      	b.n	80116f6 <floor+0x46>
 8011732:	2e33      	cmp	r6, #51	; 0x33
 8011734:	dd0b      	ble.n	801174e <floor+0x9e>
 8011736:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801173a:	d104      	bne.n	8011746 <floor+0x96>
 801173c:	ee10 2a10 	vmov	r2, s0
 8011740:	460b      	mov	r3, r1
 8011742:	f7ee fd4b 	bl	80001dc <__adddf3>
 8011746:	ec41 0b10 	vmov	d0, r0, r1
 801174a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801174e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011752:	f04f 37ff 	mov.w	r7, #4294967295
 8011756:	40df      	lsrs	r7, r3
 8011758:	4238      	tst	r0, r7
 801175a:	d0f4      	beq.n	8011746 <floor+0x96>
 801175c:	a310      	add	r3, pc, #64	; (adr r3, 80117a0 <floor+0xf0>)
 801175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011762:	f7ee fd3b 	bl	80001dc <__adddf3>
 8011766:	2200      	movs	r2, #0
 8011768:	2300      	movs	r3, #0
 801176a:	f7ef f97d 	bl	8000a68 <__aeabi_dcmpgt>
 801176e:	2800      	cmp	r0, #0
 8011770:	d0c1      	beq.n	80116f6 <floor+0x46>
 8011772:	2c00      	cmp	r4, #0
 8011774:	da0a      	bge.n	801178c <floor+0xdc>
 8011776:	2e14      	cmp	r6, #20
 8011778:	d101      	bne.n	801177e <floor+0xce>
 801177a:	3401      	adds	r4, #1
 801177c:	e006      	b.n	801178c <floor+0xdc>
 801177e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011782:	2301      	movs	r3, #1
 8011784:	40b3      	lsls	r3, r6
 8011786:	441d      	add	r5, r3
 8011788:	45a8      	cmp	r8, r5
 801178a:	d8f6      	bhi.n	801177a <floor+0xca>
 801178c:	ea25 0507 	bic.w	r5, r5, r7
 8011790:	e7b1      	b.n	80116f6 <floor+0x46>
 8011792:	2500      	movs	r5, #0
 8011794:	462c      	mov	r4, r5
 8011796:	e7ae      	b.n	80116f6 <floor+0x46>
 8011798:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801179c:	e7ab      	b.n	80116f6 <floor+0x46>
 801179e:	bf00      	nop
 80117a0:	8800759c 	.word	0x8800759c
 80117a4:	7e37e43c 	.word	0x7e37e43c
 80117a8:	bff00000 	.word	0xbff00000
 80117ac:	000fffff 	.word	0x000fffff

080117b0 <_init>:
 80117b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b2:	bf00      	nop
 80117b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117b6:	bc08      	pop	{r3}
 80117b8:	469e      	mov	lr, r3
 80117ba:	4770      	bx	lr

080117bc <_fini>:
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117be:	bf00      	nop
 80117c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117c2:	bc08      	pop	{r3}
 80117c4:	469e      	mov	lr, r3
 80117c6:	4770      	bx	lr
>>>>>>> Stashed changes
