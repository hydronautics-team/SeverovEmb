
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08010ac8  08010ac8  00020ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ca0  08010ca0  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08010ca0  08010ca0  00020ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ca8  08010ca8  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ca8  08010ca8  00020ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cac  08010cac  00020cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08010cb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          00003070  20000110  20000110  00030110  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003180  20003180  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 14 .debug_info   000254c2  00000000  00000000  00030183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005af1  00000000  00000000  00055645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c18  00000000  00000000  0005b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015a4  00000000  00000000  0005cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022cb2  00000000  00000000  0005e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026f15  00000000  00000000  00080fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4608  00000000  00000000  000a7ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b30  00000000  00000000  0016c4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00173ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010aac 	.word	0x08010aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08010aac 	.word	0x08010aac

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8a:	f000 b9f1 	b.w	8000f70 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f883 	bl	8000ca8 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f876 	bl	8000ca8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f865 	bl	8000ca8 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f857 	bl	8000ca8 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a6 	b.w	8000f70 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff fef1 	bl	8000a2c <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_dmul>
 8000c7a:	f000 f97b 	bl	8000f74 <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fbe8 	bl	8000454 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fc5e 	bl	8000548 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faa0 	bl	80001d8 <__aeabi_dsub>
 8000c98:	f000 f96c 	bl	8000f74 <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__aeabi_d2uiz>:
 8000f74:	004a      	lsls	r2, r1, #1
 8000f76:	d211      	bcs.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f7c:	d211      	bcs.n	8000fa2 <__aeabi_d2uiz+0x2e>
 8000f7e:	d50d      	bpl.n	8000f9c <__aeabi_d2uiz+0x28>
 8000f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f88:	d40e      	bmi.n	8000fa8 <__aeabi_d2uiz+0x34>
 8000f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fa6:	d102      	bne.n	8000fae <__aeabi_d2uiz+0x3a>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <fromTickToMs>:

uint32_t fromSecToTick(float sec) {
	return (sec * configTICK_RATE_HZ);
}

float fromTickToMs(uint32_t ticks) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	return ((float) (ticks) * 1000.0f) / (float) configTICK_RATE_HZ;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fe8 <fromTickToMs+0x34>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe8 <fromTickToMs+0x34>
 8000fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	447a0000 	.word	0x447a0000

08000fec <cmp>:
uint32_t MS5837_conv_start_tick = CONVERTION_TIMEOUT;

void calculate();
void init_new_convertion();

int cmp(const void *a, const void *b) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    return *(int*)a - *(int*)b;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MS5837_02BA_init>:

bool MS5837_02BA_begin(I2C_HandleTypeDef * hi2c){
	return(MS5837_02BA_init(hi2c));
}

bool MS5837_02BA_init(I2C_HandleTypeDef * hi2c){
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
	MS5837_hi2c = hi2c;
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	HAL_I2C_Init(hi2c);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f005 ff1e 	bl	8006e5c <HAL_I2C_Init>
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, HAL_MAX_DELAY) != HAL_OK){
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <MS5837_02BA_init+0xa4>)
 800102e:	21ec      	movs	r1, #236	; 0xec
 8001030:	f005 ffd2 	bl	8006fd8 <HAL_I2C_Master_Transmit>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MS5837_02BA_init+0x32>
		return false;
 800103a:	2300      	movs	r3, #0
 800103c:	e032      	b.n	80010a4 <MS5837_02BA_init+0x98>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e029      	b.n	800109c <MS5837_02BA_init+0x90>
		uint8_t prom_buff[2];
		prom_addr += 2;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3302      	adds	r3, #2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 020e 	add.w	r2, r7, #14
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21ec      	movs	r1, #236	; 0xec
 8001062:	f005 ffb9 	bl	8006fd8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MS5837_02BA_init+0xa0>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	21ec      	movs	r1, #236	; 0xec
 8001078:	f006 f8a2 	bl	80071c0 <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	7b7a      	ldrb	r2, [r7, #13]
 8001082:	4313      	orrs	r3, r2
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	17d9      	asrs	r1, r3, #31
 8001088:	461c      	mov	r4, r3
 800108a:	460d      	mov	r5, r1
 800108c:	4909      	ldr	r1, [pc, #36]	; (80010b4 <MS5837_02BA_init+0xa8>)
 800108e:	00d3      	lsls	r3, r2, #3
 8001090:	440b      	add	r3, r1
 8001092:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d9d2      	bls.n	8001048 <MS5837_02BA_init+0x3c>
	}
	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bdb0      	pop	{r4, r5, r7, pc}
 80010ac:	2000012c 	.word	0x2000012c
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000138 	.word	0x20000138

080010b8 <MS5837_02BA_reinit>:

bool MS5837_02BA_reinit(){
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af02      	add	r7, sp, #8
	HAL_I2C_DeInit(MS5837_hi2c);
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MS5837_02BA_reinit+0xa8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 ff59 	bl	8006f7a <HAL_I2C_DeInit>
	HAL_I2C_Init(MS5837_hi2c);
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MS5837_02BA_reinit+0xa8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 fec5 	bl	8006e5c <HAL_I2C_Init>
	MS5837_I2C_State = MS5837_I2C_NONE;
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MS5837_02BA_reinit+0xac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &RES_DEVICE_COMM, COMMAND_LENGTH, HAL_MAX_DELAY) != HAL_OK){
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MS5837_02BA_reinit+0xa8>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <MS5837_02BA_reinit+0xb0>)
 80010e6:	21ec      	movs	r1, #236	; 0xec
 80010e8:	f005 ff76 	bl	8006fd8 <HAL_I2C_Master_Transmit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MS5837_02BA_reinit+0x3e>
		return false;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e030      	b.n	8001158 <MS5837_02BA_reinit+0xa0>
	}
	//receiving C1 - C6
	uint8_t prom_addr = 0xA0;
 80010f6:	23a0      	movs	r3, #160	; 0xa0
 80010f8:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 7; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	e027      	b.n	8001150 <MS5837_02BA_reinit+0x98>
		uint8_t prom_buff[2];
		prom_addr += 2;
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	3302      	adds	r3, #2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &prom_addr, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MS5837_02BA_reinit+0xa8>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	1dba      	adds	r2, r7, #6
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	21ec      	movs	r1, #236	; 0xec
 8001118:	f005 ff5e 	bl	8006fd8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, prom_buff, PROM_LENGTH, HAL_MAX_DELAY);
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MS5837_02BA_reinit+0xa8>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	1d3a      	adds	r2, r7, #4
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	21ec      	movs	r1, #236	; 0xec
 800112c:	f006 f848 	bl	80071c0 <HAL_I2C_Master_Receive>
		C[i] = (prom_buff[0] << 8) | (prom_buff[1]);
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	797a      	ldrb	r2, [r7, #5]
 8001136:	4313      	orrs	r3, r2
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	17d9      	asrs	r1, r3, #31
 800113c:	461c      	mov	r4, r3
 800113e:	460d      	mov	r5, r1
 8001140:	490a      	ldr	r1, [pc, #40]	; (800116c <MS5837_02BA_reinit+0xb4>)
 8001142:	00d3      	lsls	r3, r2, #3
 8001144:	440b      	add	r3, r1
 8001146:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint8_t i = 0; i < 7; i++) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b06      	cmp	r3, #6
 8001154:	d9d4      	bls.n	8001100 <MS5837_02BA_reinit+0x48>
	}
	return true;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	2000012c 	.word	0x2000012c
 8001164:	2000018b 	.word	0x2000018b
 8001168:	20000000 	.word	0x20000000
 800116c:	20000138 	.word	0x20000138

08001170 <MS5837_02BA_get_actual_pressure>:

int32_t MS5837_02BA_get_actual_pressure(){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
 8001176:	f004 fe95 	bl	8005ea4 <HAL_GetTick>
 800117a:	6078      	str	r0, [r7, #4]
	if(MS5837_I2C_NONE == MS5837_I2C_State){
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MS5837_02BA_get_actual_pressure+0x7c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <MS5837_02BA_get_actual_pressure+0x18>
		init_new_convertion();
 8001184:	f000 f83e 	bl	8001204 <init_new_convertion>
	}
	if(MS5837_I2C_D1_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MS5837_02BA_get_actual_pressure+0x7c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d10f      	bne.n	80011b0 <MS5837_02BA_get_actual_pressure+0x40>
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MS5837_02BA_get_actual_pressure+0x80>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b13      	cmp	r3, #19
 800119a:	d909      	bls.n	80011b0 <MS5837_02BA_get_actual_pressure+0x40>
		MS5837_I2C_State = MS5837_I2C_D1_TX_ADC_COM;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MS5837_02BA_get_actual_pressure+0x7c>)
 800119e:	2203      	movs	r2, #3
 80011a0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MS5837_02BA_get_actual_pressure+0x84>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MS5837_02BA_get_actual_pressure+0x88>)
 80011aa:	21ec      	movs	r1, #236	; 0xec
 80011ac:	f006 f8fe 	bl	80073ac <HAL_I2C_Master_Transmit_IT>
	}
	if(MS5837_I2C_D2_CONVERTION == MS5837_I2C_State && current_tick - MS5837_conv_start_tick >= CONVERTION_TIMEOUT){
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MS5837_02BA_get_actual_pressure+0x7c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b06      	cmp	r3, #6
 80011b6:	d10f      	bne.n	80011d8 <MS5837_02BA_get_actual_pressure+0x68>
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MS5837_02BA_get_actual_pressure+0x80>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b13      	cmp	r3, #19
 80011c2:	d909      	bls.n	80011d8 <MS5837_02BA_get_actual_pressure+0x68>
		MS5837_I2C_State = MS5837_I2C_D2_TX_ADC_COM;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MS5837_02BA_get_actual_pressure+0x7c>)
 80011c6:	2207      	movs	r2, #7
 80011c8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MS5837_02BA_get_actual_pressure+0x84>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <MS5837_02BA_get_actual_pressure+0x88>)
 80011d2:	21ec      	movs	r1, #236	; 0xec
 80011d4:	f006 f8ea 	bl	80073ac <HAL_I2C_Master_Transmit_IT>
	}
//	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(MS5837_hi2c);
	return presure-initial_pressure;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MS5837_02BA_get_actual_pressure+0x8c>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MS5837_02BA_get_actual_pressure+0x90>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	1ad3      	subs	r3, r2, r3
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000018b 	.word	0x2000018b
 80011f0:	20000004 	.word	0x20000004
 80011f4:	2000012c 	.word	0x2000012c
 80011f8:	20000130 	.word	0x20000130
 80011fc:	20000180 	.word	0x20000180
 8001200:	20000184 	.word	0x20000184

08001204 <init_new_convertion>:

void init_new_convertion(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	MS5837_I2C_State = MS5837_I2C_D1_TX_CONV_COM;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <init_new_convertion+0x1c>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH);
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <init_new_convertion+0x20>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <init_new_convertion+0x24>)
 8001216:	21ec      	movs	r1, #236	; 0xec
 8001218:	f006 f8c8 	bl	80073ac <HAL_I2C_Master_Transmit_IT>
//	MS5837_conv_start_tick = HAL_GetTick();
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000018b 	.word	0x2000018b
 8001224:	2000012c 	.word	0x2000012c
 8001228:	20000001 	.word	0x20000001

0800122c <MS5837_I2C_MasterRxCplt>:

void MS5837_I2C_MasterRxCplt (I2C_HandleTypeDef * hi2c){
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 8001234:	491f      	ldr	r1, [pc, #124]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x88>)
 8001236:	6809      	ldr	r1, [r1, #0]
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	4288      	cmp	r0, r1
 800123c:	d135      	bne.n	80012aa <MS5837_I2C_MasterRxCplt+0x7e>
		if(MS5837_I2C_D1_RX_ADC == MS5837_I2C_State){
 800123e:	491e      	ldr	r1, [pc, #120]	; (80012b8 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001240:	7809      	ldrb	r1, [r1, #0]
 8001242:	2904      	cmp	r1, #4
 8001244:	d119      	bne.n	800127a <MS5837_I2C_MasterRxCplt+0x4e>
			D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 8001246:	491d      	ldr	r1, [pc, #116]	; (80012bc <MS5837_I2C_MasterRxCplt+0x90>)
 8001248:	7809      	ldrb	r1, [r1, #0]
 800124a:	0408      	lsls	r0, r1, #16
 800124c:	491b      	ldr	r1, [pc, #108]	; (80012bc <MS5837_I2C_MasterRxCplt+0x90>)
 800124e:	7849      	ldrb	r1, [r1, #1]
 8001250:	0209      	lsls	r1, r1, #8
 8001252:	4301      	orrs	r1, r0
 8001254:	4819      	ldr	r0, [pc, #100]	; (80012bc <MS5837_I2C_MasterRxCplt+0x90>)
 8001256:	7880      	ldrb	r0, [r0, #2]
 8001258:	4301      	orrs	r1, r0
 800125a:	17c8      	asrs	r0, r1, #31
 800125c:	460a      	mov	r2, r1
 800125e:	4603      	mov	r3, r0
 8001260:	4917      	ldr	r1, [pc, #92]	; (80012c0 <MS5837_I2C_MasterRxCplt+0x94>)
 8001262:	e9c1 2300 	strd	r2, r3, [r1]
			MS5837_I2C_State = MS5837_I2C_D2_TX_CONV_COM;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MS5837_I2C_MasterRxCplt+0x8c>)
 8001268:	2205      	movs	r2, #5
 800126a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH);
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MS5837_I2C_MasterRxCplt+0x88>)
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <MS5837_I2C_MasterRxCplt+0x98>)
 8001274:	21ec      	movs	r1, #236	; 0xec
 8001276:	f006 f899 	bl	80073ac <HAL_I2C_Master_Transmit_IT>
		}
		if(MS5837_I2C_D2_RX_ADC == MS5837_I2C_State){
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MS5837_I2C_MasterRxCplt+0x8c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d113      	bne.n	80012aa <MS5837_I2C_MasterRxCplt+0x7e>
			D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MS5837_I2C_MasterRxCplt+0x90>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	041a      	lsls	r2, r3, #16
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MS5837_I2C_MasterRxCplt+0x90>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	4313      	orrs	r3, r2
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <MS5837_I2C_MasterRxCplt+0x90>)
 8001292:	7892      	ldrb	r2, [r2, #2]
 8001294:	4313      	orrs	r3, r2
 8001296:	17da      	asrs	r2, r3, #31
 8001298:	461c      	mov	r4, r3
 800129a:	4615      	mov	r5, r2
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MS5837_I2C_MasterRxCplt+0x9c>)
 800129e:	e9c3 4500 	strd	r4, r5, [r3]
			init_new_convertion();
 80012a2:	f7ff ffaf 	bl	8001204 <init_new_convertion>
			calculate();
 80012a6:	f000 f90b 	bl	80014c0 <calculate>
		}
//		MS5837_conv_start_tick = HAL_GetTick();
	}
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000012c 	.word	0x2000012c
 80012b8:	2000018b 	.word	0x2000018b
 80012bc:	20000188 	.word	0x20000188
 80012c0:	20000170 	.word	0x20000170
 80012c4:	20000002 	.word	0x20000002
 80012c8:	20000178 	.word	0x20000178

080012cc <MS5837_I2C_MasterTxCplt>:

void MS5837_I2C_MasterTxCplt (I2C_HandleTypeDef * hi2c){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if(hi2c == MS5837_hi2c){
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MS5837_I2C_MasterTxCplt+0x84>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d133      	bne.n	8001346 <MS5837_I2C_MasterTxCplt+0x7a>
		if(MS5837_I2C_D1_TX_CONV_COM == MS5837_I2C_State){
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <MS5837_I2C_MasterTxCplt+0x2a>
			MS5837_I2C_State = MS5837_I2C_D1_CONVERTION;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 80012ec:	f004 fdda 	bl	8005ea4 <HAL_GetTick>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <MS5837_I2C_MasterTxCplt+0x8c>)
 80012f4:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D1_TX_ADC_COM == MS5837_I2C_State){
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d109      	bne.n	8001312 <MS5837_I2C_MasterTxCplt+0x46>
			MS5837_I2C_State = MS5837_I2C_D1_RX_ADC;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 8001300:	2204      	movs	r2, #4
 8001302:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MS5837_I2C_MasterTxCplt+0x84>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	2303      	movs	r3, #3
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <MS5837_I2C_MasterTxCplt+0x90>)
 800130c:	21ec      	movs	r1, #236	; 0xec
 800130e:	f006 f8bd 	bl	800748c <HAL_I2C_Master_Receive_IT>
		}
		if(MS5837_I2C_D2_TX_CONV_COM == MS5837_I2C_State){
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b05      	cmp	r3, #5
 8001318:	d107      	bne.n	800132a <MS5837_I2C_MasterTxCplt+0x5e>
			MS5837_I2C_State = MS5837_I2C_D2_CONVERTION;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 800131c:	2206      	movs	r2, #6
 800131e:	701a      	strb	r2, [r3, #0]
			MS5837_conv_start_tick = HAL_GetTick();
 8001320:	f004 fdc0 	bl	8005ea4 <HAL_GetTick>
 8001324:	4603      	mov	r3, r0
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <MS5837_I2C_MasterTxCplt+0x8c>)
 8001328:	6013      	str	r3, [r2, #0]
		}
		if(MS5837_I2C_D2_TX_ADC_COM == MS5837_I2C_State){
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b07      	cmp	r3, #7
 8001330:	d109      	bne.n	8001346 <MS5837_I2C_MasterTxCplt+0x7a>
			MS5837_I2C_State = MS5837_I2C_D2_RX_ADC;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MS5837_I2C_MasterTxCplt+0x88>)
 8001334:	2208      	movs	r2, #8
 8001336:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Receive_IT(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH);
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <MS5837_I2C_MasterTxCplt+0x84>)
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	2303      	movs	r3, #3
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <MS5837_I2C_MasterTxCplt+0x90>)
 8001340:	21ec      	movs	r1, #236	; 0xec
 8001342:	f006 f8a3 	bl	800748c <HAL_I2C_Master_Receive_IT>
		}
	}
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000012c 	.word	0x2000012c
 8001354:	2000018b 	.word	0x2000018b
 8001358:	20000004 	.word	0x20000004
 800135c:	20000188 	.word	0x20000188

08001360 <MS5837_02BA_check_pressure>:

void MS5837_I2C_MasterError (I2C_HandleTypeDef * hi2c){
	__NOP();
}

int32_t MS5837_02BA_check_pressure(){
 8001360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af02      	add	r7, sp, #8
	//initializing D1 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D1_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <MS5837_02BA_check_pressure+0xe4>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	4a34      	ldr	r2, [pc, #208]	; (8001448 <MS5837_02BA_check_pressure+0xe8>)
 8001376:	21ec      	movs	r1, #236	; 0xec
 8001378:	f005 fe2e 	bl	8006fd8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800137c:	2014      	movs	r0, #20
 800137e:	f004 fd9d 	bl	8005ebc <HAL_Delay>
	//reading D1 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <MS5837_02BA_check_pressure+0xe4>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <MS5837_02BA_check_pressure+0xec>)
 8001390:	21ec      	movs	r1, #236	; 0xec
 8001392:	f005 fe21 	bl	8006fd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <MS5837_02BA_check_pressure+0xe4>)
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2303      	movs	r3, #3
 80013a2:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 80013a4:	21ec      	movs	r1, #236	; 0xec
 80013a6:	f005 ff0b 	bl	80071c0 <HAL_I2C_Master_Receive>
	D1 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	041a      	lsls	r2, r3, #16
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4313      	orrs	r3, r2
 80013b8:	4a25      	ldr	r2, [pc, #148]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 80013ba:	7892      	ldrb	r2, [r2, #2]
 80013bc:	4313      	orrs	r3, r2
 80013be:	17da      	asrs	r2, r3, #31
 80013c0:	4698      	mov	r8, r3
 80013c2:	4691      	mov	r9, r2
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MS5837_02BA_check_pressure+0xf4>)
 80013c6:	e9c3 8900 	strd	r8, r9, [r3]
	//initializing D2 conversion
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &CONVERT_D2_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MS5837_02BA_check_pressure+0xe4>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	4a20      	ldr	r2, [pc, #128]	; (8001458 <MS5837_02BA_check_pressure+0xf8>)
 80013d8:	21ec      	movs	r1, #236	; 0xec
 80013da:	f005 fdfd 	bl	8006fd8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80013de:	2014      	movs	r0, #20
 80013e0:	f004 fd6c 	bl	8005ebc <HAL_Delay>
	//reading D2 data
	HAL_I2C_Master_Transmit(MS5837_hi2c, DEVICE_ADDR, &ADC_READ_COMM, COMMAND_LENGTH, HAL_MAX_DELAY);
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MS5837_02BA_check_pressure+0xe4>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	4a16      	ldr	r2, [pc, #88]	; (800144c <MS5837_02BA_check_pressure+0xec>)
 80013f2:	21ec      	movs	r1, #236	; 0xec
 80013f4:	f005 fdf0 	bl	8006fd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(MS5837_hi2c, DEVICE_ADDR, adc_buff, ADC_LENGTH, HAL_MAX_DELAY);
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MS5837_02BA_check_pressure+0xe4>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2303      	movs	r3, #3
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 8001406:	21ec      	movs	r1, #236	; 0xec
 8001408:	f005 feda 	bl	80071c0 <HAL_I2C_Master_Receive>
	D2 = (adc_buff[0] << 16) | (adc_buff[1] << 8) | (adc_buff[2]);
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4313      	orrs	r3, r2
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <MS5837_02BA_check_pressure+0xf0>)
 800141c:	7892      	ldrb	r2, [r2, #2]
 800141e:	4313      	orrs	r3, r2
 8001420:	17da      	asrs	r2, r3, #31
 8001422:	461c      	mov	r4, r3
 8001424:	4615      	mov	r5, r2
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MS5837_02BA_check_pressure+0xfc>)
 8001428:	e9c3 4500 	strd	r4, r5, [r3]
	calculate();
 800142c:	f000 f848 	bl	80014c0 <calculate>
	return presure-initial_pressure;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MS5837_02BA_check_pressure+0x100>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MS5837_02BA_check_pressure+0x104>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1ad3      	subs	r3, r2, r3
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001442:	bf00      	nop
 8001444:	2000012c 	.word	0x2000012c
 8001448:	20000001 	.word	0x20000001
 800144c:	20000130 	.word	0x20000130
 8001450:	20000188 	.word	0x20000188
 8001454:	20000170 	.word	0x20000170
 8001458:	20000002 	.word	0x20000002
 800145c:	20000178 	.word	0x20000178
 8001460:	20000180 	.word	0x20000180
 8001464:	20000184 	.word	0x20000184

08001468 <MS5837_02BA_reset_pressure>:

uint32_t MS5837_02BA_reset_pressure(){
 8001468:	b580      	push	{r7, lr}
 800146a:	b09a      	sub	sp, #104	; 0x68
 800146c:	af00      	add	r7, sp, #0
	int32_t current_pressure[25];

	for(int i =0;i<25;i++)
 800146e:	2300      	movs	r3, #0
 8001470:	667b      	str	r3, [r7, #100]	; 0x64
 8001472:	e00b      	b.n	800148c <MS5837_02BA_reset_pressure+0x24>
	{
		current_pressure[i]=MS5837_02BA_check_pressure();
 8001474:	f7ff ff74 	bl	8001360 <MS5837_02BA_check_pressure>
 8001478:	4602      	mov	r2, r0
 800147a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	3368      	adds	r3, #104	; 0x68
 8001480:	443b      	add	r3, r7
 8001482:	f843 2c68 	str.w	r2, [r3, #-104]
	for(int i =0;i<25;i++)
 8001486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001488:	3301      	adds	r3, #1
 800148a:	667b      	str	r3, [r7, #100]	; 0x64
 800148c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800148e:	2b18      	cmp	r3, #24
 8001490:	ddf0      	ble.n	8001474 <MS5837_02BA_reset_pressure+0xc>
	}
	qsort(current_pressure, 25, sizeof(int32_t), cmp );
 8001492:	4638      	mov	r0, r7
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MS5837_02BA_reset_pressure+0x4c>)
 8001496:	2204      	movs	r2, #4
 8001498:	2119      	movs	r1, #25
 800149a:	f00e febf 	bl	801021c <qsort>
	init_new_convertion();
 800149e:	f7ff feb1 	bl	8001204 <init_new_convertion>
	return initial_pressure = current_pressure[24];
 80014a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <MS5837_02BA_reset_pressure+0x50>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <MS5837_02BA_reset_pressure+0x50>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3768      	adds	r7, #104	; 0x68
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	08000fed 	.word	0x08000fed
 80014b8:	20000184 	.word	0x20000184
 80014bc:	00000000 	.word	0x00000000

080014c0 <calculate>:

void calculate(){
 80014c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c4:	b0be      	sub	sp, #248	; 0xf8
 80014c6:	af00      	add	r7, sp, #0
	int64_t dT = 0;
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t TEMP = 0;
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	int64_t OFF = 0;
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	int64_t SENS = 0;
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	int64_t P = 0;
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	int64_t SENSi = 0;
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	int64_t OFFi = 0;
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	int64_t Ti = 0;
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int64_t OFF2 = 0;
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t SENS2 = 0;
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	int64_t P2 = 0;
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int64_t TEMP2 = 0;
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	//first order compensation
	dT = D2 -  C[4]*256;
 8001558:	4be1      	ldr	r3, [pc, #900]	; (80018e0 <calculate+0x420>)
 800155a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800155e:	4be1      	ldr	r3, [pc, #900]	; (80018e4 <calculate+0x424>)
 8001560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001564:	f04f 0000 	mov.w	r0, #0
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	0219      	lsls	r1, r3, #8
 800156e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8001572:	0210      	lsls	r0, r2, #8
 8001574:	1a23      	subs	r3, r4, r0
 8001576:	663b      	str	r3, [r7, #96]	; 0x60
 8001578:	eb65 0301 	sbc.w	r3, r5, r1
 800157c:	667b      	str	r3, [r7, #100]	; 0x64
 800157e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001582:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	TEMP = 2000 + dT*C[4]/8388608;
 8001586:	4bd7      	ldr	r3, [pc, #860]	; (80018e4 <calculate+0x424>)
 8001588:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800158c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001590:	fb02 f501 	mul.w	r5, r2, r1
 8001594:	fb00 f403 	mul.w	r4, r0, r3
 8001598:	442c      	add	r4, r5
 800159a:	fba0 8902 	umull	r8, r9, r0, r2
 800159e:	eb04 0309 	add.w	r3, r4, r9
 80015a2:	4699      	mov	r9, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 80015b0:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 80015b4:	ea4f 53d9 	mov.w	r3, r9, lsr #23
 80015b8:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 80015bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80015be:	f143 0300 	adc.w	r3, r3, #0
 80015c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015c4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80015c8:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8

//	OFF = C[1]*65536 + (C[3]*dT)/128;
//	SENS = C[0]*32768 + (C[2]*dT)/256;
//	P = ((D1 * SENS)/(2097152) - OFF)/8192;

	OFF = (C[1])*131072+(C[3]*dT)/64;
 80015cc:	4bc5      	ldr	r3, [pc, #788]	; (80018e4 <calculate+0x424>)
 80015ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d2:	f04f 0800 	mov.w	r8, #0
 80015d6:	f04f 0900 	mov.w	r9, #0
 80015da:	ea4f 4943 	mov.w	r9, r3, lsl #17
 80015de:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 80015e2:	ea4f 4842 	mov.w	r8, r2, lsl #17
 80015e6:	4bbf      	ldr	r3, [pc, #764]	; (80018e4 <calculate+0x424>)
 80015e8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80015ec:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80015f0:	fb02 f501 	mul.w	r5, r2, r1
 80015f4:	fb00 f403 	mul.w	r4, r0, r3
 80015f8:	442c      	add	r4, r5
 80015fa:	fba0 ab02 	umull	sl, fp, r0, r2
 80015fe:	eb04 030b 	add.w	r3, r4, fp
 8001602:	469b      	mov	fp, r3
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	ea4f 129a 	mov.w	r2, sl, lsr #6
 8001610:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 8001614:	ea4f 139b 	mov.w	r3, fp, lsr #6
 8001618:	eb18 0102 	adds.w	r1, r8, r2
 800161c:	6539      	str	r1, [r7, #80]	; 0x50
 800161e:	eb49 0303 	adc.w	r3, r9, r3
 8001622:	657b      	str	r3, [r7, #84]	; 0x54
 8001624:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001628:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

	SENS = C[0]*65536+(C[2]*dT)/128;
 800162c:	4bad      	ldr	r3, [pc, #692]	; (80018e4 <calculate+0x424>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f04f 0800 	mov.w	r8, #0
 8001636:	f04f 0900 	mov.w	r9, #0
 800163a:	ea4f 4903 	mov.w	r9, r3, lsl #16
 800163e:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 8001642:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8001646:	4ba7      	ldr	r3, [pc, #668]	; (80018e4 <calculate+0x424>)
 8001648:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800164c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001650:	fb02 f501 	mul.w	r5, r2, r1
 8001654:	fb00 f403 	mul.w	r4, r0, r3
 8001658:	442c      	add	r4, r5
 800165a:	fba0 2302 	umull	r2, r3, r0, r2
 800165e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001662:	4613      	mov	r3, r2
 8001664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800166c:	18e3      	adds	r3, r4, r3
 800166e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800167e:	4621      	mov	r1, r4
 8001680:	09ca      	lsrs	r2, r1, #7
 8001682:	4629      	mov	r1, r5
 8001684:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001688:	4629      	mov	r1, r5
 800168a:	09cb      	lsrs	r3, r1, #7
 800168c:	eb18 0102 	adds.w	r1, r8, r2
 8001690:	64b9      	str	r1, [r7, #72]	; 0x48
 8001692:	eb49 0303 	adc.w	r3, r9, r3
 8001696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001698:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800169c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	P = (D1*SENS/(2097152)-OFF)/(32768);
 80016a0:	4b91      	ldr	r3, [pc, #580]	; (80018e8 <calculate+0x428>)
 80016a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80016aa:	fb02 f501 	mul.w	r5, r2, r1
 80016ae:	fb00 f403 	mul.w	r4, r0, r3
 80016b2:	442c      	add	r4, r5
 80016b4:	fba0 2302 	umull	r2, r3, r0, r2
 80016b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016bc:	4613      	mov	r3, r2
 80016be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016c6:	18e3      	adds	r3, r4, r3
 80016c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80016d8:	4623      	mov	r3, r4
 80016da:	0d58      	lsrs	r0, r3, #21
 80016dc:	462b      	mov	r3, r5
 80016de:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80016e2:	462b      	mov	r3, r5
 80016e4:	0d59      	lsrs	r1, r3, #21
 80016e6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80016ea:	1a84      	subs	r4, r0, r2
 80016ec:	643c      	str	r4, [r7, #64]	; 0x40
 80016ee:	eb61 0303 	sbc.w	r3, r1, r3
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001700:	4621      	mov	r1, r4
 8001702:	0bca      	lsrs	r2, r1, #15
 8001704:	4629      	mov	r1, r5
 8001706:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800170a:	4629      	mov	r1, r5
 800170c:	0bcb      	lsrs	r3, r1, #15
 800170e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	//			OFFi = OFFi + 7*(TEMP + 1500l)*(TEMP + 1500l);
	//			SENSi = SENSi + 4*(TEMP + 1500l)*(TEMP + 1500l);
	//		}
	//	} else
	//	{
	Ti = (2*dT*dT)/1.37438953E11;
 8001712:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001716:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800171a:	fb03 f102 	mul.w	r1, r3, r2
 800171e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001722:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	18ca      	adds	r2, r1, r3
 800172c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001730:	fba3 1303 	umull	r1, r3, r3, r3
 8001734:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001736:	460b      	mov	r3, r1
 8001738:	67bb      	str	r3, [r7, #120]	; 0x78
 800173a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001740:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8001744:	460b      	mov	r3, r1
 8001746:	18db      	adds	r3, r3, r3
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	4613      	mov	r3, r2
 800174c:	eb42 0303 	adc.w	r3, r2, r3
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7fe fec7 	bl	80004ec <__aeabi_l2d>
 800175e:	a35e      	add	r3, pc, #376	; (adr r3, 80018d8 <calculate+0x418>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f81a 	bl	800079c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa64 	bl	8000c3c <__aeabi_d2lz>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	OFFi = ((TEMP-2000)*(TEMP - 2000))/16;
 800177c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001780:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8001784:	63b9      	str	r1, [r7, #56]	; 0x38
 8001786:	f143 33ff 	adc.w	r3, r3, #4294967295
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800178c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001790:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8001794:	6339      	str	r1, [r7, #48]	; 0x30
 8001796:	f143 33ff 	adc.w	r3, r3, #4294967295
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
 800179c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80017a0:	462b      	mov	r3, r5
 80017a2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80017a6:	4642      	mov	r2, r8
 80017a8:	fb02 f203 	mul.w	r2, r2, r3
 80017ac:	464b      	mov	r3, r9
 80017ae:	4621      	mov	r1, r4
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	4622      	mov	r2, r4
 80017b8:	4641      	mov	r1, r8
 80017ba:	fba2 1201 	umull	r1, r2, r2, r1
 80017be:	677a      	str	r2, [r7, #116]	; 0x74
 80017c0:	460a      	mov	r2, r1
 80017c2:	673a      	str	r2, [r7, #112]	; 0x70
 80017c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017c6:	4413      	add	r3, r2
 80017c8:	677b      	str	r3, [r7, #116]	; 0x74
 80017ca:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017ce:	2900      	cmp	r1, #0
 80017d0:	da07      	bge.n	80017e2 <calculate+0x322>
 80017d2:	f110 030f 	adds.w	r3, r0, #15
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	f141 0300 	adc.w	r3, r1, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	0902      	lsrs	r2, r0, #4
 80017ec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80017f0:	110b      	asrs	r3, r1, #4
 80017f2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	SENSi = 0;
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	//	}

	OFF2 = OFF - OFFi;
 8001802:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001806:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800180a:	1a84      	subs	r4, r0, r2
 800180c:	60bc      	str	r4, [r7, #8]
 800180e:	eb61 0303 	sbc.w	r3, r1, r3
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001818:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	SENS2 = SENS - SENSi;
 800181c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001820:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001824:	1a84      	subs	r4, r0, r2
 8001826:	603c      	str	r4, [r7, #0]
 8001828:	eb61 0303 	sbc.w	r3, r1, r3
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001832:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	TEMP2 = (TEMP - Ti) / 100; //C
 8001836:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800183a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800183e:	1a84      	subs	r4, r0, r2
 8001840:	62bc      	str	r4, [r7, #40]	; 0x28
 8001842:	eb61 0303 	sbc.w	r3, r1, r3
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001848:	f04f 0264 	mov.w	r2, #100	; 0x64
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001854:	f7ff f98a 	bl	8000b6c <__aeabi_ldivmod>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	P2 = (((D1*SENS2)/2097152 - OFF2)/8192)/10; //mbar
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <calculate+0x428>)
 8001862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001866:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800186a:	fb02 f501 	mul.w	r5, r2, r1
 800186e:	fb00 f403 	mul.w	r4, r0, r3
 8001872:	442c      	add	r4, r5
 8001874:	fba0 2302 	umull	r2, r3, r0, r2
 8001878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800187a:	4613      	mov	r3, r2
 800187c:	66bb      	str	r3, [r7, #104]	; 0x68
 800187e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001880:	18e3      	adds	r3, r4, r3
 8001882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001890:	4621      	mov	r1, r4
 8001892:	0d4a      	lsrs	r2, r1, #21
 8001894:	4629      	mov	r1, r5
 8001896:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800189a:	4629      	mov	r1, r5
 800189c:	0d4b      	lsrs	r3, r1, #21
 800189e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80018a2:	1a14      	subs	r4, r2, r0
 80018a4:	623c      	str	r4, [r7, #32]
 80018a6:	eb63 0301 	sbc.w	r3, r3, r1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018b8:	f7ff f9a8 	bl	8000c0c <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	int32_t res[2];
	res[0] = P;
 80018c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	res[1] = TEMP/100;
 80018cc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80018d0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80018d4:	e00a      	b.n	80018ec <calculate+0x42c>
 80018d6:	bf00      	nop
 80018d8:	fe280000 	.word	0xfe280000
 80018dc:	423fffff 	.word	0x423fffff
 80018e0:	20000178 	.word	0x20000178
 80018e4:	20000138 	.word	0x20000138
 80018e8:	20000170 	.word	0x20000170
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	f7ff f93c 	bl	8000b6c <__aeabi_ldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	//	strcat(snum1,"\r\n");
	//	HAL_UART_Transmit(&huart2, (uint8_t*) snum1, strlen(snum1),6);



	presure = res[0]/10;
 80018fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <calculate+0x45c>)
 8001904:	fb82 1203 	smull	r1, r2, r2, r3
 8001908:	1092      	asrs	r2, r2, #2
 800190a:	17db      	asrs	r3, r3, #31
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <calculate+0x460>)
 8001910:	6013      	str	r3, [r2, #0]
}
 8001912:	bf00      	nop
 8001914:	37f8      	adds	r7, #248	; 0xf8
 8001916:	46bd      	mov	sp, r7
 8001918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191c:	66666667 	.word	0x66666667
 8001920:	20000180 	.word	0x20000180

08001924 <GetCrc16Checksumm>:
 */

#include "checksum.h"

uint16_t GetCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8001930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001934:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	len = len-2;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	3b02      	subs	r3, #2
 800193a:	807b      	strh	r3, [r7, #2]

    while (len--) {
 800193c:	e025      	b.n	800198a <GetCrc16Checksumm+0x66>
        crc ^= *pcBlock++ << 8;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	b21a      	sxth	r2, r3
 800194a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800194e:	4053      	eors	r3, r2
 8001950:	b21b      	sxth	r3, r3
 8001952:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	737b      	strb	r3, [r7, #13]
 8001958:	e014      	b.n	8001984 <GetCrc16Checksumm+0x60>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 800195a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800195e:	2b00      	cmp	r3, #0
 8001960:	da09      	bge.n	8001976 <GetCrc16Checksumm+0x52>
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	b21b      	sxth	r3, r3
 8001968:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800196c:	f083 0301 	eor.w	r3, r3, #1
 8001970:	b21b      	sxth	r3, r3
 8001972:	b29b      	uxth	r3, r3
 8001974:	e002      	b.n	800197c <GetCrc16Checksumm+0x58>
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 800197e:	7b7b      	ldrb	r3, [r7, #13]
 8001980:	3301      	adds	r3, #1
 8001982:	737b      	strb	r3, [r7, #13]
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d9e7      	bls.n	800195a <GetCrc16Checksumm+0x36>
    while (len--) {
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	807a      	strh	r2, [r7, #2]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1d4      	bne.n	800193e <GetCrc16Checksumm+0x1a>
    }
    return crc;
 8001994:	89fb      	ldrh	r3, [r7, #14]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <IsCrc16ChecksummCorrect>:

bool IsCrc16ChecksummCorrect(uint8_t *pcBlock, uint16_t len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	807b      	strh	r3, [r7, #2]
	uint16_t crc_calculated = GetCrc16Checksumm(pcBlock, len);
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffb6 	bl	8001924 <GetCrc16Checksumm>
 80019b8:	4603      	mov	r3, r0
 80019ba:	82fb      	strh	r3, [r7, #22]

	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	3b02      	subs	r3, #2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
	uint16_t crc_got = *crc_pointer;
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	81fb      	strh	r3, [r7, #14]

	if(crc_got == crc_calculated) {
 80019cc:	89fa      	ldrh	r2, [r7, #14]
 80019ce:	8afb      	ldrh	r3, [r7, #22]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d101      	bne.n	80019d8 <IsCrc16ChecksummCorrect+0x36>
		return true;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <IsCrc16ChecksummCorrect+0x38>
	}
	else {
		return false;
 80019d8:	2300      	movs	r3, #0
	}
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <AddCrc16Checksumm>:

void AddCrc16Checksumm(uint8_t *pcBlock, uint16_t len)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	807b      	strh	r3, [r7, #2]
	uint16_t crc = GetCrc16Checksumm(pcBlock, len);
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff96 	bl	8001924 <GetCrc16Checksumm>
 80019f8:	4603      	mov	r3, r0
 80019fa:	81fb      	strh	r3, [r7, #14]
	uint16_t *crc_pointer = (uint16_t*) (&pcBlock[len-2]);
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	3b02      	subs	r3, #2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
	*crc_pointer = crc;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	89fa      	ldrh	r2, [r7, #14]
 8001a0a:	801a      	strh	r2, [r3, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <IsChecksumm8bCorrect>:
    msg[length - 2] = (uint8_t) (crc >> 8);
    msg[length - 1] = (uint8_t) crc;
}

bool IsChecksumm8bCorrect(uint8_t *msg, uint16_t length)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
    uint8_t crcGot, crc = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	75fb      	strb	r3, [r7, #23]
    int i;

    crcGot = msg[length-1] ;
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	73fb      	strb	r3, [r7, #15]

        for(i=0; i < length - 1; i++){
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	e009      	b.n	8001a4a <IsChecksumm8bCorrect+0x36>
            crc ^= msg[i];
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	4053      	eors	r3, r2
 8001a42:	75fb      	strb	r3, [r7, #23]
        for(i=0; i < length - 1; i++){
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	3301      	adds	r3, #1
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf0      	blt.n	8001a36 <IsChecksumm8bCorrect+0x22>
        }

    if(crc == crcGot)
 8001a54:	7dfa      	ldrb	r2, [r7, #23]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d101      	bne.n	8001a60 <IsChecksumm8bCorrect+0x4c>
        return 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <IsChecksumm8bCorrect+0x4e>
    else return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <AddChecksumm8b>:

void AddChecksumm8b(uint8_t *msg, uint16_t length)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
	int i = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]

	for(i=0; i < length - 1; i++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	e009      	b.n	8001a9c <AddChecksumm8b+0x2e>
		crc ^= msg[i];
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	4053      	eors	r3, r2
 8001a94:	73fb      	strb	r3, [r7, #15]
	for(i=0; i < length - 1; i++) {
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dbf0      	blt.n	8001a88 <AddChecksumm8b+0x1a>
	}

	msg[length-1] = crc;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	701a      	strb	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <IsChecksumm8bCorrectVma>:

bool IsChecksumm8bCorrectVma(uint8_t *msg, uint16_t length)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8001ada:	2301      	movs	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	e009      	b.n	8001af4 <IsChecksumm8bCorrectVma+0x36>
		crc ^= msg[i];
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	4053      	eors	r3, r2
 8001aec:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	3301      	adds	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dbf0      	blt.n	8001ae0 <IsChecksumm8bCorrectVma+0x22>
	}

	if (crc == crcGot) {
 8001afe:	7dfa      	ldrb	r2, [r7, #23]
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d101      	bne.n	8001b0a <IsChecksumm8bCorrectVma+0x4c>
		return 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <IsChecksumm8bCorrectVma+0x4e>
	}
	else {
		return 0;
 8001b0a:	2300      	movs	r3, #0
	}
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <AddChecksumm8bVma>:

void AddChecksumm8bVma(uint8_t *msg, uint16_t length)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

	for(int i = 1; i < length - 1; i++) {
 8001b28:	2301      	movs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	e009      	b.n	8001b42 <AddChecksumm8bVma+0x2a>
		crc ^= msg[i];
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	4053      	eors	r3, r2
 8001b3a:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < length - 1; i++) {
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf0      	blt.n	8001b2e <AddChecksumm8bVma+0x16>
	}

	msg[length-1] = crc;
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	701a      	strb	r2, [r3, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <PickBit>:
        array[i] = 0x00;
    }
}

bool PickBit(uint8_t input, uint8_t bit)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
	//return (bool) ((input << (7 - bit)) >> 7);

	switch(bit) {
 8001b74:	79bb      	ldrb	r3, [r7, #6]
 8001b76:	2b07      	cmp	r3, #7
 8001b78:	d857      	bhi.n	8001c2a <PickBit+0xc6>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <PickBit+0x1c>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001ba1 	.word	0x08001ba1
 8001b84:	08001bb3 	.word	0x08001bb3
 8001b88:	08001bc5 	.word	0x08001bc5
 8001b8c:	08001bd7 	.word	0x08001bd7
 8001b90:	08001be9 	.word	0x08001be9
 8001b94:	08001bfb 	.word	0x08001bfb
 8001b98:	08001c0d 	.word	0x08001c0d
 8001b9c:	08001c1f 	.word	0x08001c1f
	case 0:
			return (bool) (input & 0b00000001);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e03c      	b.n	8001c2c <PickBit+0xc8>
	case 1:
			return (bool) (input & 0b00000010);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	e033      	b.n	8001c2c <PickBit+0xc8>
	case 2:
			return (bool) (input & 0b00000100);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf14      	ite	ne
 8001bce:	2301      	movne	r3, #1
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	e02a      	b.n	8001c2c <PickBit+0xc8>
	case 3:
			return (bool) (input & 0b00001000);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e021      	b.n	8001c2c <PickBit+0xc8>
	case 4:
			return (bool) (input & 0b00010000);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf14      	ite	ne
 8001bf2:	2301      	movne	r3, #1
 8001bf4:	2300      	moveq	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	e018      	b.n	8001c2c <PickBit+0xc8>
	case 5:
			return (bool) (input & 0b00100000);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e00f      	b.n	8001c2c <PickBit+0xc8>
	case 6:
			return (bool) (input & 0b01000000);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	e006      	b.n	8001c2c <PickBit+0xc8>
	case 7:
			return (bool) (input & 0b10000000);
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	09db      	lsrs	r3, r3, #7
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	e000      	b.n	8001c2c <PickBit+0xc8>
	}
	return false;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <variableInit>:

uint16_t counterRx = 0;


void variableInit()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c3e:	af00      	add	r7, sp, #0
	rComputer.reset = 0;
 8001c40:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <variableInit+0x144>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

	rState.cameraNum = 0;
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <variableInit+0x148>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
	rState.contourSelected = 0;
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <variableInit+0x148>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	705a      	strb	r2, [r3, #1]
	rState.flash = 0;
 8001c52:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <variableInit+0x148>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	709a      	strb	r2, [r3, #2]
	rState.operationMode = 0;
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <variableInit+0x148>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	70da      	strb	r2, [r3, #3]
	rState.pcCounter = 0;
 8001c5e:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <variableInit+0x148>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	711a      	strb	r2, [r3, #4]
	rState.lag_error = 0;
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <variableInit+0x148>)
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]

	rSensors.yaw = 0;
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <variableInit+0x14c>)
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
	rSensors.raw_yaw = 0;
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <variableInit+0x14c>)
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
	rSensors.roll =  0;
 8001c7c:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <variableInit+0x14c>)
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
	rSensors.pitch =  0;
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <variableInit+0x14c>)
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]

	rSensors.old_yaw = 0;
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <variableInit+0x14c>)
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
	rSensors.spins = 0;
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <variableInit+0x14c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	831a      	strh	r2, [r3, #24]

	rSensors.pressure_raw = 0;
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <variableInit+0x14c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58
	rSensors.pressure = 0;
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <variableInit+0x14c>)
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
	rSensors.pressure_null = 0;
 8001ca8:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <variableInit+0x14c>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	661a      	str	r2, [r3, #96]	; 0x60
	rSensors.last_pressure = 0;
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <variableInit+0x14c>)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	665a      	str	r2, [r3, #100]	; 0x64

	rSensors.pressure_watchdog_counter = 0;
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <variableInit+0x14c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	rSensors.rollSpeed = 0;
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <variableInit+0x14c>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
	rSensors.pitchSpeed = 0;
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <variableInit+0x14c>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
	rSensors.yawSpeed = 0;
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <variableInit+0x14c>)
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

	rSensors.accelX = 0;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <variableInit+0x14c>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
	rSensors.accelY = 0;
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <variableInit+0x14c>)
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
	rSensors.accelZ = 0;
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <variableInit+0x14c>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30

	rSensors.magX = 0;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <variableInit+0x14c>)
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34
	rSensors.magY = 0;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <variableInit+0x14c>)
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
	rSensors.magZ = 0;
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <variableInit+0x14c>)
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c

	rSensors.quatA = 0;
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <variableInit+0x14c>)
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
	rSensors.quatB = 0;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <variableInit+0x14c>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
	rSensors.quatC = 0;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <variableInit+0x14c>)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	649a      	str	r2, [r3, #72]	; 0x48
	rSensors.quatD = 0;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <variableInit+0x14c>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	64da      	str	r2, [r3, #76]	; 0x4c

    rDevice[DEV1].address = 0x03;
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <variableInit+0x150>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    rDevice[DEV2].address = 0x05;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <variableInit+0x150>)
 8001d32:	2205      	movs	r2, #5
 8001d34:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    rDevice[GRAB].address = 0x02;
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <variableInit+0x150>)
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	729a      	strb	r2, [r3, #10]
    rDevice[GRAB_ROTATION].address = 0x06;
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <variableInit+0x150>)
 8001d40:	2206      	movs	r2, #6
 8001d42:	751a      	strb	r2, [r3, #20]
    rDevice[TILT].address = 0x01;
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <variableInit+0x150>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	779a      	strb	r2, [r3, #30]

	rSensors.startIMU = true;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <variableInit+0x14c>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rSensors.startPressure = true;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <variableInit+0x14c>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	thrustersInit();
 8001d5a:	f003 fb5f 	bl	800541c <thrustersInit>

	// Flash reading
	struct flashConfiguration_s config;
	flashReadSettings(&config);
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 f975 	bl	8003050 <flashReadSettings>
	flashReadStructure(&config);
 8001d66:	463b      	mov	r3, r7
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fb2b 	bl	80033c4 <flashReadStructure>

	// Thrusters initialization
	if(rState.flash) {
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <variableInit+0x148>)
 8001d70:	789b      	ldrb	r3, [r3, #2]
 8001d72:	2b00      	cmp	r3, #0
		return;
	}
}
 8001d74:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20001e40 	.word	0x20001e40
 8001d80:	20001d2c 	.word	0x20001d2c
 8001d84:	20001dc8 	.word	0x20001dc8
 8001d88:	20001e5c 	.word	0x20001e5c

08001d8c <uartBusesInit>:

void uartBusesInit()
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
	// Shore UART configuration
	uartBus[SHORE_UART].huart = &huart3; // Link to huart will be set before receiving
 8001d92:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <uartBusesInit+0x1dc>)
 8001d94:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <uartBusesInit+0x1e0>)
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
	uartBus[SHORE_UART].rxBuffer = ShoreRequestBuffer;
 8001d98:	4b73      	ldr	r3, [pc, #460]	; (8001f68 <uartBusesInit+0x1dc>)
 8001d9a:	4a75      	ldr	r2, [pc, #468]	; (8001f70 <uartBusesInit+0x1e4>)
 8001d9c:	601a      	str	r2, [r3, #0]
	uartBus[SHORE_UART].txBuffer = ShoreResponseBuffer;
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <uartBusesInit+0x1dc>)
 8001da0:	4a74      	ldr	r2, [pc, #464]	; (8001f74 <uartBusesInit+0x1e8>)
 8001da2:	605a      	str	r2, [r3, #4]
	uartBus[SHORE_UART].rxLength = 0; // Length of the received message will be determined when first byte will be received
 8001da4:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <uartBusesInit+0x1dc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	uartBus[SHORE_UART].txLength = 0; // Length of the transmitted message will be determined before transmit
 8001dac:	4b6e      	ldr	r3, [pc, #440]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	uartBus[SHORE_UART].brokenRxTolerance = 20;
 8001db4:	4b6c      	ldr	r3, [pc, #432]	; (8001f68 <uartBusesInit+0x1dc>)
 8001db6:	2214      	movs	r2, #20
 8001db8:	771a      	strb	r2, [r3, #28]
	uartBus[SHORE_UART].timeoutRxTolerance = 500;
 8001dba:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dc0:	621a      	str	r2, [r3, #32]
	uartBus[SHORE_UART].receiveTimeout = 200;
 8001dc2:	4b69      	ldr	r3, [pc, #420]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dc4:	22c8      	movs	r2, #200	; 0xc8
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
	uartBus[SHORE_UART].transmitTimeout = 200;
 8001dc8:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dca:	22c8      	movs	r2, #200	; 0xc8
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	uartBus[SHORE_UART].txrxType = TXRX_IT;
 8001dce:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Thrusters UART configuration
	uartBus[THRUSTERS_UART].huart = &huart1;
 8001dd6:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dd8:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <uartBusesInit+0x1ec>)
 8001dda:	669a      	str	r2, [r3, #104]	; 0x68
	uartBus[THRUSTERS_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001ddc:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
	uartBus[THRUSTERS_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001de2:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <uartBusesInit+0x1dc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
	uartBus[THRUSTERS_UART].rxLength = 0; // Receive length will be set before transmit
 8001de8:	4b5f      	ldr	r3, [pc, #380]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	uartBus[THRUSTERS_UART].txLength = 0; // Transmit length will be set before transmit
 8001df0:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <uartBusesInit+0x1dc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	uartBus[THRUSTERS_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001df8:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <uartBusesInit+0x1dc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	uartBus[THRUSTERS_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001e00:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	659a      	str	r2, [r3, #88]	; 0x58
	uartBus[THRUSTERS_UART].receiveTimeout = 100;
 8001e06:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e08:	2264      	movs	r2, #100	; 0x64
 8001e0a:	661a      	str	r2, [r3, #96]	; 0x60
	uartBus[THRUSTERS_UART].transmitTimeout = 100;
 8001e0c:	4b56      	ldr	r3, [pc, #344]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e0e:	2264      	movs	r2, #100	; 0x64
 8001e10:	665a      	str	r2, [r3, #100]	; 0x64
	uartBus[THRUSTERS_UART].txrxType = TXRX_DMA;
 8001e12:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// Devices UART configuration
	uartBus[DEVICES_UART].huart = &huart4;
 8001e1a:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e1c:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <uartBusesInit+0x1f0>)
 8001e1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	uartBus[DEVICES_UART].rxBuffer = 0; // Receive bugger will be set before receive
 8001e22:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	671a      	str	r2, [r3, #112]	; 0x70
	uartBus[DEVICES_UART].txBuffer = 0; // Transmit bugger will be set before transmit
 8001e28:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	675a      	str	r2, [r3, #116]	; 0x74
	uartBus[DEVICES_UART].rxLength = DEVICES_REQUEST_LENGTH;
 8001e2e:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	uartBus[DEVICES_UART].txLength = DEVICES_RESPONSE_LENGTH;
 8001e36:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e38:	220a      	movs	r2, #10
 8001e3a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	uartBus[DEVICES_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uartBus[DEVICES_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	uartBus[DEVICES_UART].receiveTimeout = 100;
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e50:	2264      	movs	r2, #100	; 0x64
 8001e52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	uartBus[DEVICES_UART].transmitTimeout = 100;
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e58:	2264      	movs	r2, #100	; 0x64
 8001e5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	uartBus[DEVICES_UART].txrxType = TXRX_DMA;
 8001e5e:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	// IMU UART configuration
	uartBus[IMU_UART].huart = &huart2;
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <uartBusesInit+0x1f4>)
 8001e6a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e70:	4a44      	ldr	r2, [pc, #272]	; (8001f84 <uartBusesInit+0x1f8>)
 8001e72:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	uartBus[IMU_UART].txBuffer = 0; // Buffer will be set before transmit
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uartBus[IMU_UART].rxLength = 0; // Receive length will be set before transmit
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	uartBus[IMU_UART].txLength = 0; // Transmit length will be set before transmit
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	uartBus[IMU_UART].brokenRxTolerance = 0; // There is no special event on this bus
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	uartBus[IMU_UART].timeoutRxTolerance = 0; // There is no special event on this bus
 8001e96:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <uartBusesInit+0x1dc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	uartBus[IMU_UART].receiveTimeout = 100;
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <uartBusesInit+0x1dc>)
 8001ea0:	2264      	movs	r2, #100	; 0x64
 8001ea2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	uartBus[IMU_UART].transmitTimeout = 100;
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <uartBusesInit+0x1dc>)
 8001ea8:	2264      	movs	r2, #100	; 0x64
 8001eaa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	uartBus[IMU_UART].txrxType = TXRX_IT;
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <uartBusesInit+0x1dc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	71fb      	strb	r3, [r7, #7]
 8001eba:	e04a      	b.n	8001f52 <uartBusesInit+0x1c6>
		uartBus[i].packageReceived = false;
 8001ebc:	79fa      	ldrb	r2, [r7, #7]
 8001ebe:	492a      	ldr	r1, [pc, #168]	; (8001f68 <uartBusesInit+0x1dc>)
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	3308      	adds	r3, #8
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
		uartBus[i].packageTransmitted = false;
 8001ed0:	79fa      	ldrb	r2, [r7, #7]
 8001ed2:	4925      	ldr	r1, [pc, #148]	; (8001f68 <uartBusesInit+0x1dc>)
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	3309      	adds	r3, #9
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
		uartBus[i].successRxCounter = 0;
 8001ee4:	79fa      	ldrb	r2, [r7, #7]
 8001ee6:	4920      	ldr	r1, [pc, #128]	; (8001f68 <uartBusesInit+0x1dc>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	330a      	adds	r3, #10
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	801a      	strh	r2, [r3, #0]
		uartBus[i].brokenRxCounter = 0;
 8001ef8:	79fa      	ldrb	r2, [r7, #7]
 8001efa:	491b      	ldr	r1, [pc, #108]	; (8001f68 <uartBusesInit+0x1dc>)
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	330c      	adds	r3, #12
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
		uartBus[i].outdatedRxCounter = 0;
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	4916      	ldr	r1, [pc, #88]	; (8001f68 <uartBusesInit+0x1dc>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
		uartBus[i].timeoutCounter = 0;
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	4911      	ldr	r1, [pc, #68]	; (8001f68 <uartBusesInit+0x1dc>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3314      	adds	r3, #20
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
		uartBus[i].lastMessage = 0;
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	490b      	ldr	r1, [pc, #44]	; (8001f68 <uartBusesInit+0x1dc>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	3318      	adds	r3, #24
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d9b1      	bls.n	8001ebc <uartBusesInit+0x130>
	}
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	2000018c 	.word	0x2000018c
 8001f6c:	200027fc 	.word	0x200027fc
 8001f70:	20002274 	.word	0x20002274
 8001f74:	200022c8 	.word	0x200022c8
 8001f78:	200026ec 	.word	0x200026ec
 8001f7c:	20002664 	.word	0x20002664
 8001f80:	20002774 	.word	0x20002774
 8001f84:	2000232c 	.word	0x2000232c

08001f88 <i2cBusesInit>:

void i2cBusesInit()
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
	// TODO refactor i2c communication routines
	i2cBus[DEV_I2C].hi2c = &hi2c1; // Link to hi2c will be set before receiving
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <i2cBusesInit+0x14>)
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <i2cBusesInit+0x18>)
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	2000026c 	.word	0x2000026c
 8001fa0:	200023d4 	.word	0x200023d4

08001fa4 <transmitPackage>:


bool transmitPackage(struct uartBus_s *bus, bool isrMode)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
    bus->packageTransmitted = false;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	725a      	strb	r2, [r3, #9]

    HAL_UART_AbortTransmit_IT(bus->huart);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f009 f9f8 	bl	800b3b0 <HAL_UART_AbortTransmit_IT>
    switch(bus->txrxType) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00d      	beq.n	8001fe6 <transmitPackage+0x42>
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d117      	bne.n	8001ffe <transmitPackage+0x5a>
        case TXRX_DMA:
            HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f009 f926 	bl	800b230 <HAL_UART_Transmit_DMA>
            break;
 8001fe4:	e00d      	b.n	8002002 <transmitPackage+0x5e>
        case TXRX_IT:
        	HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f009 f878 	bl	800b0ec <HAL_UART_Transmit_IT>
            break;
 8001ffc:	e001      	b.n	8002002 <transmitPackage+0x5e>
        default:
            return false;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e036      	b.n	8002070 <transmitPackage+0xcc>
    }

    bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8002002:	f00c fb85 	bl	800e710 <xTaskGetTickCount>
 8002006:	4603      	mov	r3, r0
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe ffd3 	bl	8000fb4 <fromTickToMs>
 800200e:	eef0 7a40 	vmov.f32	s15, s0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	edc3 7a05 	vstr	s15, [r3, #20]
    while (!bus->packageTransmitted && !isrMode) {
 8002018:	e01c      	b.n	8002054 <transmitPackage+0xb0>
    	if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800201a:	f00c fb79 	bl	800e710 <xTaskGetTickCount>
 800201e:	4603      	mov	r3, r0
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe ffc7 	bl	8000fb4 <fromTickToMs>
 8002026:	eeb0 7a40 	vmov.f32	s14, s0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002030:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	dd01      	ble.n	800204e <transmitPackage+0xaa>
    		return false;
 800204a:	2300      	movs	r3, #0
 800204c:	e010      	b.n	8002070 <transmitPackage+0xcc>
    	}
    	osDelay(DELAY_UART_TIMEOUT);
 800204e:	2032      	movs	r0, #50	; 0x32
 8002050:	f00b f834 	bl	800d0bc <osDelay>
    while (!bus->packageTransmitted && !isrMode) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7a5b      	ldrb	r3, [r3, #9]
 8002058:	f083 0301 	eor.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <transmitPackage+0xca>
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1d5      	bne.n	800201a <transmitPackage+0x76>
    }
    return true;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <transmitAndReceive>:
	}
	return true;
}

bool transmitAndReceive(struct uartBus_s *bus, bool isrMode)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
	bus->packageReceived = false;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	721a      	strb	r2, [r3, #8]
	bus->packageTransmitted = false;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	725a      	strb	r2, [r3, #9]

	HAL_UART_AbortReceive_IT(bus->huart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4618      	mov	r0, r3
 8002096:	f009 fa03 	bl	800b4a0 <HAL_UART_AbortReceive_IT>
	HAL_UART_AbortTransmit_IT(bus->huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4618      	mov	r0, r3
 80020a0:	f009 f986 	bl	800b3b0 <HAL_UART_AbortTransmit_IT>
	switch(bus->txrxType) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d018      	beq.n	80020e0 <transmitAndReceive+0x68>
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d12d      	bne.n	800210e <transmitAndReceive+0x96>
		case TXRX_DMA:
			HAL_UART_Receive_DMA(bus->huart, bus->rxBuffer, bus->rxLength);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	f009 f930 	bl	800b328 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(bus->huart, bus->txBuffer, bus->txLength);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	f009 f8a9 	bl	800b230 <HAL_UART_Transmit_DMA>
			break;
 80020de:	e018      	b.n	8002112 <transmitAndReceive+0x9a>
		case TXRX_IT:
			HAL_UART_Receive_IT(bus->huart, bus->rxBuffer, bus->rxLength);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6819      	ldr	r1, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	f009 f859 	bl	800b1a8 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(bus->huart, bus->txBuffer, bus->txLength);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	f008 fff0 	bl	800b0ec <HAL_UART_Transmit_IT>
			break;
 800210c:	e001      	b.n	8002112 <transmitAndReceive+0x9a>
		default:
			return false;
 800210e:	2300      	movs	r3, #0
 8002110:	e03d      	b.n	800218e <transmitAndReceive+0x116>
	}

	bus->timeoutCounter = fromTickToMs(xTaskGetTickCount());
 8002112:	f00c fafd 	bl	800e710 <xTaskGetTickCount>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe ff4b 	bl	8000fb4 <fromTickToMs>
 800211e:	eef0 7a40 	vmov.f32	s15, s0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	edc3 7a05 	vstr	s15, [r3, #20]
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8002128:	e01c      	b.n	8002164 <transmitAndReceive+0xec>
		if(fromTickToMs(xTaskGetTickCount()) - bus->timeoutCounter > bus->transmitTimeout) {
 800212a:	f00c faf1 	bl	800e710 <xTaskGetTickCount>
 800212e:	4603      	mov	r3, r0
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe ff3f 	bl	8000fb4 <fromTickToMs>
 8002136:	eeb0 7a40 	vmov.f32	s14, s0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002140:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	dd01      	ble.n	800215e <transmitAndReceive+0xe6>
			return false;
 800215a:	2300      	movs	r3, #0
 800215c:	e017      	b.n	800218e <transmitAndReceive+0x116>
		}
		osDelay(DELAY_UART_TIMEOUT);
 800215e:	2032      	movs	r0, #50	; 0x32
 8002160:	f00a ffac 	bl	800d0bc <osDelay>
	while (!bus->packageTransmitted && !bus->packageReceived && !isrMode) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7a5b      	ldrb	r3, [r3, #9]
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <transmitAndReceive+0x114>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7a1b      	ldrb	r3, [r3, #8]
 8002176:	f083 0301 	eor.w	r3, r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <transmitAndReceive+0x114>
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ce      	bne.n	800212a <transmitAndReceive+0xb2>
	}
	return true;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_UART_TxCpltCallback+0x6c>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d103      	bne.n	80021b2 <HAL_UART_TxCpltCallback+0x1a>
		uartBus[SHORE_UART].packageTransmitted = true;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_UART_TxCpltCallback+0x6c>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	725a      	strb	r2, [r3, #9]
		return;
 80021b0:	e022      	b.n	80021f8 <HAL_UART_TxCpltCallback+0x60>
	}

	struct uartBus_s *bus = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e01a      	b.n	80021f2 <HAL_UART_TxCpltCallback+0x5a>
		if(uartBus[i].huart == huart) {
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	4911      	ldr	r1, [pc, #68]	; (8002204 <HAL_UART_TxCpltCallback+0x6c>)
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	3330      	adds	r3, #48	; 0x30
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d10b      	bne.n	80021ec <HAL_UART_TxCpltCallback+0x54>
			bus = &uartBus[i];
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_UART_TxCpltCallback+0x6c>)
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
			bus->packageTransmitted = true;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2201      	movs	r2, #1
 80021e8:	725a      	strb	r2, [r3, #9]
			break;
 80021ea:	e005      	b.n	80021f8 <HAL_UART_TxCpltCallback+0x60>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	3301      	adds	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d9e1      	bls.n	80021bc <HAL_UART_TxCpltCallback+0x24>
		}
	}
}
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000018c 	.word	0x2000018c

08002208 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if(huart == uartBus[SHORE_UART].huart) {
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_UART_RxCpltCallback+0x7c>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d102      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x18>
		ShoreReceive();
 800221a:	f000 f84b 	bl	80022b4 <ShoreReceive>
		return;
 800221e:	e02d      	b.n	800227c <HAL_UART_RxCpltCallback+0x74>
	}

	struct uartBus_s *bus = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e025      	b.n	8002276 <HAL_UART_RxCpltCallback+0x6e>
		if(uartBus[i].huart == huart) {
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	4915      	ldr	r1, [pc, #84]	; (8002284 <HAL_UART_RxCpltCallback+0x7c>)
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	3330      	adds	r3, #48	; 0x30
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d116      	bne.n	8002270 <HAL_UART_RxCpltCallback+0x68>
			bus = &uartBus[i];
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_UART_RxCpltCallback+0x7c>)
 800224e:	4413      	add	r3, r2
 8002250:	60bb      	str	r3, [r7, #8]
			bus->packageReceived = true;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2201      	movs	r2, #1
 8002256:	721a      	strb	r2, [r3, #8]
			bus->lastMessage = fromTickToMs(xTaskGetTickCount());
 8002258:	f00c fa5a 	bl	800e710 <xTaskGetTickCount>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fea8 	bl	8000fb4 <fromTickToMs>
 8002264:	eef0 7a40 	vmov.f32	s15, s0
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 800226e:	e005      	b.n	800227c <HAL_UART_RxCpltCallback+0x74>
	for(uint8_t i=0; i<UART_NUMBER; i++) {
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	3301      	adds	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d9d6      	bls.n	800222a <HAL_UART_RxCpltCallback+0x22>
		}
	}
}
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000018c 	.word	0x2000018c

08002288 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterRxCplt(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe ffcb 	bl	800122c <MS5837_I2C_MasterRxCplt>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	MS5837_I2C_MasterTxCplt(hi2c);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff f810 	bl	80012cc <MS5837_I2C_MasterTxCplt>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <ShoreReceive>:
	MS5837_I2C_MasterError(hi2c);
}


void ShoreReceive()
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af02      	add	r7, sp, #8
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <ShoreReceive+0xec>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
	if(counterRx == 0) {
 80022c0:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <ShoreReceive+0xf0>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d142      	bne.n	800234e <ShoreReceive+0x9a>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 80022c8:	2300      	movs	r3, #0
 80022ca:	71fb      	strb	r3, [r7, #7]
 80022cc:	e03b      	b.n	8002346 <ShoreReceive+0x92>
			if(uartBus[SHORE_UART].rxBuffer[0] == ShoreCodes[i]) {
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <ShoreReceive+0xf4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	4935      	ldr	r1, [pc, #212]	; (80023ac <ShoreReceive+0xf8>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d125      	bne.n	800232a <ShoreReceive+0x76>
				counterRx = 1;
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <ShoreReceive+0xf0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	801a      	strh	r2, [r3, #0]
				uartBus[SHORE_UART].rxLength = ShoreLength[i]-1;
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4a32      	ldr	r2, [pc, #200]	; (80023b0 <ShoreReceive+0xfc>)
 80022e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <ShoreReceive+0xf4>)
 80022f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer+1, uartBus[SHORE_UART].rxLength);
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <ShoreReceive+0xf4>)
 80022fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <ShoreReceive+0xf4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <ShoreReceive+0xf4>)
 8002304:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002308:	b292      	uxth	r2, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f008 ff4c 	bl	800b1a8 <HAL_UART_Receive_IT>
				xTimerStartFromISR(UARTTimer, &xHigherPriorityTaskWoken);
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <ShoreReceive+0x100>)
 8002312:	681c      	ldr	r4, [r3, #0]
 8002314:	f00c fa0c 	bl	800e730 <xTaskGetTickCountFromISR>
 8002318:	4602      	mov	r2, r0
 800231a:	2300      	movs	r3, #0
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <ShoreReceive+0xec>)
 8002320:	2106      	movs	r1, #6
 8002322:	4620      	mov	r0, r4
 8002324:	f00d f868 	bl	800f3f8 <xTimerGenericCommand>
				break;
 8002328:	e026      	b.n	8002378 <ShoreReceive+0xc4>
			}

			if(i == SHORE_REQUEST_MODES_NUMBER-1) {
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d107      	bne.n	8002340 <ShoreReceive+0x8c>
				HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <ShoreReceive+0xf4>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <ShoreReceive+0xf4>)
 8002336:	6811      	ldr	r1, [r2, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f008 ff34 	bl	800b1a8 <HAL_UART_Receive_IT>
		for(uint8_t i=0; i<SHORE_REQUEST_MODES_NUMBER; ++i) {
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	3301      	adds	r3, #1
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d9c0      	bls.n	80022ce <ShoreReceive+0x1a>
 800234c:	e014      	b.n	8002378 <ShoreReceive+0xc4>
			}
		}
	}
	else if(counterRx == 1) {
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <ShoreReceive+0xf0>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d110      	bne.n	8002378 <ShoreReceive+0xc4>
		uartBus[SHORE_UART].packageReceived = true;
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <ShoreReceive+0xf4>)
 8002358:	2201      	movs	r2, #1
 800235a:	721a      	strb	r2, [r3, #8]
		uartBus[SHORE_UART].lastMessage = fromTickToMs(xTaskGetTickCount());
 800235c:	f00c f9d8 	bl	800e710 <xTaskGetTickCount>
 8002360:	4603      	mov	r3, r0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fe26 	bl	8000fb4 <fromTickToMs>
 8002368:	eef0 7a40 	vmov.f32	s15, s0
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <ShoreReceive+0xf4>)
 800236e:	edc3 7a06 	vstr	s15, [r3, #24]
		counterRx = 2;
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <ShoreReceive+0xf0>)
 8002374:	2202      	movs	r2, #2
 8002376:	801a      	strh	r2, [r3, #0]
	}

	if (xHigherPriorityTaskWoken == pdTRUE) {
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <ShoreReceive+0xec>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d10a      	bne.n	8002396 <ShoreReceive+0xe2>
		xHigherPriorityTaskWoken = pdFALSE;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <ShoreReceive+0xec>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
		taskYIELD();
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <ShoreReceive+0x104>)
 8002388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	f3bf 8f6f 	isb	sy
	}
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000278 	.word	0x20000278
 80023a4:	20000274 	.word	0x20000274
 80023a8:	2000018c 	.word	0x2000018c
 80023ac:	08010c34 	.word	0x08010c34
 80023b0:	08010c2c 	.word	0x08010c2c
 80023b4:	20000280 	.word	0x20000280
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <DevicesRequestUpdate>:

void DevicesRequestUpdate(uint8_t *buf, uint8_t dev)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
	struct devicesRequest_s req;

    req.AA1 = 0xAA;
 80023c8:	23aa      	movs	r3, #170	; 0xaa
 80023ca:	723b      	strb	r3, [r7, #8]
    req.AA2 = 0xAA;
 80023cc:	23aa      	movs	r3, #170	; 0xaa
 80023ce:	727b      	strb	r3, [r7, #9]
    req.address = rDevice[dev].address;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	4916      	ldr	r1, [pc, #88]	; (800242c <DevicesRequestUpdate+0x70>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	440b      	add	r3, r1
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	72bb      	strb	r3, [r7, #10]
    req.setting = rDevice[dev].settings;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	4911      	ldr	r1, [pc, #68]	; (800242c <DevicesRequestUpdate+0x70>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	440b      	add	r3, r1
 80023f0:	3301      	adds	r3, #1
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	72fb      	strb	r3, [r7, #11]
    //req.velocity1 = 0;
    //req.velocity2 = rDevice[dev].force;

   // if(dev == GRAB) {
    	req.velocity1 = rDevice[GRAB_ROTATION].force;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <DevicesRequestUpdate+0x70>)
 80023f8:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80023fc:	733b      	strb	r3, [r7, #12]
    	req.velocity2 = rDevice[GRAB].force;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <DevicesRequestUpdate+0x70>)
 8002400:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002404:	737b      	strb	r3, [r7, #13]
//    		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_NULL;
//    	}
//    }


    memcpy((void*)buf, (void*)&req, DEVICES_REQUEST_LENGTH);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	461a      	mov	r2, r3
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	6010      	str	r0, [r2, #0]
 8002412:	8899      	ldrh	r1, [r3, #4]
 8002414:	799b      	ldrb	r3, [r3, #6]
 8002416:	8091      	strh	r1, [r2, #4]
 8002418:	7193      	strb	r3, [r2, #6]
    AddChecksumm8b(buf, DEVICES_REQUEST_LENGTH);
 800241a:	2107      	movs	r1, #7
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fb26 	bl	8001a6e <AddChecksumm8b>
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20001e5c 	.word	0x20001e5c

08002430 <DevicesResponseUpdate>:

void DevicesResponseUpdate(uint8_t *buf, uint8_t dev)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
    if(IsChecksumm8bCorrect(buf, DEVICES_RESPONSE_LENGTH)) {
 800243c:	210a      	movs	r1, #10
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fae8 	bl	8001a14 <IsChecksumm8bCorrect>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d04a      	beq.n	80024e0 <DevicesResponseUpdate+0xb0>
    	struct devicesResponse_s res;
    	memcpy((void*)&res, (void*)buf, DEVICES_RESPONSE_LENGTH);
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	6810      	ldr	r0, [r2, #0]
 8002452:	6851      	ldr	r1, [r2, #4]
 8002454:	c303      	stmia	r3!, {r0, r1}
 8002456:	8912      	ldrh	r2, [r2, #8]
 8002458:	801a      	strh	r2, [r3, #0]

        rDevice[dev].current = res.current1;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8002460:	b298      	uxth	r0, r3
 8002462:	4924      	ldr	r1, [pc, #144]	; (80024f4 <DevicesResponseUpdate+0xc4>)
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
 800246e:	3304      	adds	r3, #4
 8002470:	4602      	mov	r2, r0
 8002472:	801a      	strh	r2, [r3, #0]
        rDevice[dev].velocity1 = res.velocity1;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	7cf8      	ldrb	r0, [r7, #19]
 8002478:	491e      	ldr	r1, [pc, #120]	; (80024f4 <DevicesResponseUpdate+0xc4>)
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	440b      	add	r3, r1
 8002484:	3307      	adds	r3, #7
 8002486:	4602      	mov	r2, r0
 8002488:	701a      	strb	r2, [r3, #0]
        rDevice[dev].velocity2 = res.velocity2;
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	7d38      	ldrb	r0, [r7, #20]
 800248e:	4919      	ldr	r1, [pc, #100]	; (80024f4 <DevicesResponseUpdate+0xc4>)
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	3308      	adds	r3, #8
 800249c:	4602      	mov	r2, r0
 800249e:	701a      	strb	r2, [r3, #0]

        if(rDevice[DEV2].velocity1 == 0x00 && dev == DEV2) {
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <DevicesResponseUpdate+0xc4>)
 80024a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <DevicesResponseUpdate+0x88>
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d103      	bne.n	80024b8 <DevicesResponseUpdate+0x88>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_FORWARD_SAT;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <DevicesResponseUpdate+0xc8>)
 80024b2:	2203      	movs	r2, #3
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e00a      	b.n	80024ce <DevicesResponseUpdate+0x9e>
        }
        else if(rDevice[DEV2].velocity2 == 0x00 && dev == DEV2) {
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <DevicesResponseUpdate+0xc4>)
 80024ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <DevicesResponseUpdate+0x9e>
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d102      	bne.n	80024ce <DevicesResponseUpdate+0x9e>
        	rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD_SAT;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <DevicesResponseUpdate+0xc8>)
 80024ca:	2204      	movs	r2, #4
 80024cc:	701a      	strb	r2, [r3, #0]
        }
        // TODO make errors work pls
        //writeBit(&(robot->device[dev].errors), res.errors, AGAR);

        ++uartBus[DEVICES_UART].successRxCounter;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <DevicesResponseUpdate+0xcc>)
 80024d0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80024d4:	3301      	adds	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <DevicesResponseUpdate+0xcc>)
 80024da:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    }
    else {
    	++uartBus[DEVICES_UART].brokenRxCounter;
    }
}
 80024de:	e004      	b.n	80024ea <DevicesResponseUpdate+0xba>
    	++uartBus[DEVICES_UART].brokenRxCounter;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <DevicesResponseUpdate+0xcc>)
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <DevicesResponseUpdate+0xcc>)
 80024e8:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20001e5c 	.word	0x20001e5c
 80024f8:	20001e98 	.word	0x20001e98
 80024fc:	2000018c 	.word	0x2000018c

08002500 <ShoreRequest>:

void ShoreRequest(uint8_t *requestBuf)
{
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8002506:	af00      	add	r7, sp, #0
 8002508:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800250c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002510:	6018      	str	r0, [r3, #0]
	bool flag = false;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	flag = IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH);
 8002518:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800251c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002520:	211f      	movs	r1, #31
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f7ff fa3d 	bl	80019a2 <IsCrc16ChecksummCorrect>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    if (IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_LENGTH)) {
 800252e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002532:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8002536:	211f      	movs	r1, #31
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	f7ff fa32 	bl	80019a2 <IsCrc16ChecksummCorrect>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8142 	beq.w	80027ca <ShoreRequest+0x2ca>
    	struct shoreRequest_s req;
    	memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_LENGTH);
 8002546:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800254a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f507 7405 	add.w	r4, r7, #532	; 0x214
 8002554:	461d      	mov	r5, r3
 8002556:	6828      	ldr	r0, [r5, #0]
 8002558:	6869      	ldr	r1, [r5, #4]
 800255a:	68aa      	ldr	r2, [r5, #8]
 800255c:	68eb      	ldr	r3, [r5, #12]
 800255e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002560:	6928      	ldr	r0, [r5, #16]
 8002562:	6969      	ldr	r1, [r5, #20]
 8002564:	69aa      	ldr	r2, [r5, #24]
 8002566:	c407      	stmia	r4!, {r0, r1, r2}
 8002568:	8bab      	ldrh	r3, [r5, #28]
 800256a:	7faa      	ldrb	r2, [r5, #30]
 800256c:	8023      	strh	r3, [r4, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	70a3      	strb	r3, [r4, #2]

    	uint8_t tempCameraNum = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

        rJoySpeed.march = req.march;
 8002578:	f8d7 3217 	ldr.w	r3, [r7, #535]	; 0x217
 800257c:	4a98      	ldr	r2, [pc, #608]	; (80027e0 <ShoreRequest+0x2e0>)
 800257e:	6013      	str	r3, [r2, #0]
        rJoySpeed.lag = req.lag;
 8002580:	f8d7 321b 	ldr.w	r3, [r7, #539]	; 0x21b
 8002584:	4a96      	ldr	r2, [pc, #600]	; (80027e0 <ShoreRequest+0x2e0>)
 8002586:	6053      	str	r3, [r2, #4]
        rJoySpeed.depth = req.depth;
 8002588:	f8d7 321f 	ldr.w	r3, [r7, #543]	; 0x21f
 800258c:	4a94      	ldr	r2, [pc, #592]	; (80027e0 <ShoreRequest+0x2e0>)
 800258e:	6093      	str	r3, [r2, #8]
        rJoySpeed.roll = req.roll;
 8002590:	f8d7 3223 	ldr.w	r3, [r7, #547]	; 0x223
 8002594:	4a92      	ldr	r2, [pc, #584]	; (80027e0 <ShoreRequest+0x2e0>)
 8002596:	60d3      	str	r3, [r2, #12]
        rJoySpeed.pitch = req.pitch;
 8002598:	f8d7 3227 	ldr.w	r3, [r7, #551]	; 0x227
 800259c:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <ShoreRequest+0x2e0>)
 800259e:	6113      	str	r3, [r2, #16]
        rJoySpeed.yaw = req.yaw;
 80025a0:	f8d7 322b 	ldr.w	r3, [r7, #555]	; 0x22b
 80025a4:	4a8e      	ldr	r2, [pc, #568]	; (80027e0 <ShoreRequest+0x2e0>)
 80025a6:	6153      	str	r3, [r2, #20]

        rDevice[GRAB].force = req.grab;
 80025a8:	f997 2230 	ldrsb.w	r2, [r7, #560]	; 0x230
 80025ac:	4b8d      	ldr	r3, [pc, #564]	; (80027e4 <ShoreRequest+0x2e4>)
 80025ae:	731a      	strb	r2, [r3, #12]
        if (rDevice[GRAB].force < -127) {
 80025b0:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <ShoreRequest+0x2e4>)
 80025b2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80025b6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80025ba:	d102      	bne.n	80025c2 <ShoreRequest+0xc2>
            rDevice[GRAB].force = -127;
 80025bc:	4b89      	ldr	r3, [pc, #548]	; (80027e4 <ShoreRequest+0x2e4>)
 80025be:	2281      	movs	r2, #129	; 0x81
 80025c0:	731a      	strb	r2, [r3, #12]
        }
        rDevice[TILT].force = req.drop;
 80025c2:	f997 222f 	ldrsb.w	r2, [r7, #559]	; 0x22f
 80025c6:	4b87      	ldr	r3, [pc, #540]	; (80027e4 <ShoreRequest+0x2e4>)
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]
        if (rDevice[TILT].force < -127) {
 80025cc:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <ShoreRequest+0x2e4>)
 80025ce:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80025d2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80025d6:	d103      	bne.n	80025e0 <ShoreRequest+0xe0>
        	rDevice[TILT].force = -127;
 80025d8:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <ShoreRequest+0x2e4>)
 80025da:	2281      	movs	r2, #129	; 0x81
 80025dc:	f883 2020 	strb.w	r2, [r3, #32]
//        rDevice[DEV1].force = req.dev1;
//        rDevice[DEV2].force = req.dev2;

//        rState.lag_error = (float) req.lag_error;

        rSensors.startIMU = PickBit(req.stabilize_flags, SHORE_STABILIZE_IMU_BIT);
 80025e0:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80025e4:	2106      	movs	r1, #6
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fabc 	bl	8001b64 <PickBit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b7d      	ldr	r3, [pc, #500]	; (80027e8 <ShoreRequest+0x2e8>)
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(PickBit(req.stabilize_flags, SHORE_STABILIZE_SAVE_BIT)) {
 80025f6:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80025fa:	2107      	movs	r1, #7
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fab1 	bl	8001b64 <PickBit>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <ShoreRequest+0x11c>
        	struct flashConfiguration_s config;
        	flashFillStructure(&config);
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fd7d 	bl	800310c <flashFillStructure>
        	flashWriteSettings(&config);
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fd3e 	bl	8003098 <flashWriteSettings>
        }

//        tempCameraNum = req.cameras;

        uint8_t old_reset = rComputer.reset;
 800261c:	4b73      	ldr	r3, [pc, #460]	; (80027ec <ShoreRequest+0x2ec>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
   //         	HAL_GPIO_WritePin(PC_CONTROL2_GPIO_Port, PC_CONTROL2_Pin, GPIO_PIN_SET); // ONOFF
//            }
//        }
//        rComputer.reset = req.pc_reset;

        bool wasEnabled = rStabConstants[STAB_YAW].enable;
 8002624:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <ShoreRequest+0x2f0>)
 8002626:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800262a:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_YAW].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_YAW_BIT);
 800262e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002632:	2103      	movs	r1, #3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fa95 	bl	8001b64 <PickBit>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <ShoreRequest+0x2f0>)
 8002640:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        if(wasEnabled == false && rStabConstants[STAB_YAW].enable == true) {
 8002644:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002648:	f083 0301 	eor.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <ShoreRequest+0x162>
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <ShoreRequest+0x2f0>)
 8002654:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <ShoreRequest+0x162>
        	stabilizationStart(STAB_YAW);
 800265c:	2003      	movs	r0, #3
 800265e:	f002 fa2f 	bl	8004ac0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_ROLL].enable;
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <ShoreRequest+0x2f0>)
 8002664:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002668:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_ROLL].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_ROLL_BIT);
 800266c:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fa76 	bl	8001b64 <PickBit>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <ShoreRequest+0x2f0>)
 800267e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        if(wasEnabled == false && rStabConstants[STAB_ROLL].enable == true) {
 8002682:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <ShoreRequest+0x1a0>
 8002690:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <ShoreRequest+0x2f0>)
 8002692:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <ShoreRequest+0x1a0>
        	stabilizationStart(STAB_ROLL);
 800269a:	2004      	movs	r0, #4
 800269c:	f002 fa10 	bl	8004ac0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_PITCH].enable;
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <ShoreRequest+0x2f0>)
 80026a2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80026a6:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_PITCH].enable = true; //PickBit(req.stabilize_flags, SHORE_STABILIZE_PITCH_BIT);
 80026aa:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <ShoreRequest+0x2f0>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        if(wasEnabled == false && rStabConstants[STAB_PITCH].enable == true) {
 80026b2:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <ShoreRequest+0x1d0>
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <ShoreRequest+0x2f0>)
 80026c2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <ShoreRequest+0x1d0>
        	stabilizationStart(STAB_PITCH);
 80026ca:	2005      	movs	r0, #5
 80026cc:	f002 f9f8 	bl	8004ac0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_DEPTH].enable;
 80026d0:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <ShoreRequest+0x2f0>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_DEPTH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_DEPTH_BIT);
 80026d8:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fa40 	bl	8001b64 <PickBit>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <ShoreRequest+0x2f0>)
 80026ea:	701a      	strb	r2, [r3, #0]
        if(wasEnabled == false && rStabConstants[STAB_DEPTH].enable == true) {
 80026ec:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80026f0:	f083 0301 	eor.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <ShoreRequest+0x208>
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <ShoreRequest+0x2f0>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <ShoreRequest+0x208>
        	stabilizationStart(STAB_DEPTH);
 8002702:	2000      	movs	r0, #0
 8002704:	f002 f9dc 	bl	8004ac0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_LAG].enable;
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <ShoreRequest+0x2f0>)
 800270a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800270e:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_LAG].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_LAG_BIT);
 8002712:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002716:	2104      	movs	r1, #4
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fa23 	bl	8001b64 <PickBit>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <ShoreRequest+0x2f0>)
 8002724:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        if(wasEnabled == false && rStabConstants[STAB_LAG].enable == true) {
 8002728:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 800272c:	f083 0301 	eor.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <ShoreRequest+0x246>
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <ShoreRequest+0x2f0>)
 8002738:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <ShoreRequest+0x246>
        	stabilizationStart(STAB_LAG);
 8002740:	2002      	movs	r0, #2
 8002742:	f002 f9bd 	bl	8004ac0 <stabilizationStart>
        }

        wasEnabled = rStabConstants[STAB_MARCH].enable;
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <ShoreRequest+0x2f0>)
 8002748:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800274c:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
        rStabConstants[STAB_MARCH].enable = PickBit(req.stabilize_flags, SHORE_STABILIZE_MARCH_BIT);
 8002750:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002754:	2105      	movs	r1, #5
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fa04 	bl	8001b64 <PickBit>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <ShoreRequest+0x2f0>)
 8002762:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if(wasEnabled == false && rStabConstants[STAB_MARCH].enable == true) {
 8002766:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 800276a:	f083 0301 	eor.w	r3, r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <ShoreRequest+0x284>
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <ShoreRequest+0x2f0>)
 8002776:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <ShoreRequest+0x284>
        	stabilizationStart(STAB_MARCH);
 800277e:	2001      	movs	r0, #1
 8002780:	f002 f99e 	bl	8004ac0 <stabilizationStart>
//        	else {
//        		rLogicDevice[LOGDEV_LIFTER].state = LOGDEV_BACKWARD;
//        	}
//        }

        if(tempCameraNum != rState.cameraNum) {
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <ShoreRequest+0x2f4>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f897 2236 	ldrb.w	r2, [r7, #566]	; 0x236
 800278c:	429a      	cmp	r2, r3
 800278e:	d013      	beq.n	80027b8 <ShoreRequest+0x2b8>
        	rState.cameraNum = tempCameraNum;
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <ShoreRequest+0x2f4>)
 8002792:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8002796:	7013      	strb	r3, [r2, #0]
        	switch(rState.cameraNum) {
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <ShoreRequest+0x2f4>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d80b      	bhi.n	80027b8 <ShoreRequest+0x2b8>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <ShoreRequest+0x2a8>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027b9 	.word	0x080027b9
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	080027b9 	.word	0x080027b9
        		break;
        	}
        }

        // TODO tuuuupoooo
        formThrustVectors();
 80027b8:	f002 ff46 	bl	8005648 <formThrustVectors>

        ++uartBus[SHORE_UART].successRxCounter;
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <ShoreRequest+0x2f8>)
 80027be:	895b      	ldrh	r3, [r3, #10]
 80027c0:	3301      	adds	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <ShoreRequest+0x2f8>)
 80027c6:	815a      	strh	r2, [r3, #10]

        	brokenRxTolerance = 0;
        }
        */
    }
}
 80027c8:	e004      	b.n	80027d4 <ShoreRequest+0x2d4>
    	++uartBus[SHORE_UART].brokenRxCounter;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <ShoreRequest+0x2f8>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <ShoreRequest+0x2f8>)
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	f507 770e 	add.w	r7, r7, #568	; 0x238
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdb0      	pop	{r4, r5, r7, pc}
 80027de:	bf00      	nop
 80027e0:	20001e44 	.word	0x20001e44
 80027e4:	20001e5c 	.word	0x20001e5c
 80027e8:	20001dc8 	.word	0x20001dc8
 80027ec:	20001e40 	.word	0x20001e40
 80027f0:	20001e9c 	.word	0x20001e9c
 80027f4:	20001d2c 	.word	0x20001d2c
 80027f8:	2000018c 	.word	0x2000018c

080027fc <ShoreConfigRequest>:

void ShoreConfigRequest(uint8_t *requestBuf)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b098      	sub	sp, #96	; 0x60
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, REQUEST_CONFIG_LENGTH)) {
 8002804:	2154      	movs	r1, #84	; 0x54
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff f8cb 	bl	80019a2 <IsCrc16ChecksummCorrect>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8124 	beq.w	8002a5c <ShoreConfigRequest+0x260>
		struct shoreConfigRequest_s req;
		memcpy((void*)&req, (void*)requestBuf, REQUEST_CONFIG_LENGTH);
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	4611      	mov	r1, r2
 800281c:	2254      	movs	r2, #84	; 0x54
 800281e:	4618      	mov	r0, r3
 8002820:	f00d fed6 	bl	80105d0 <memcpy>

		rJoySpeed.march = req.march;
 8002824:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002830:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <ShoreConfigRequest+0x274>)
 8002832:	edc3 7a00 	vstr	s15, [r3]
		rJoySpeed.lag = req.lag;
 8002836:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002842:	4b8b      	ldr	r3, [pc, #556]	; (8002a70 <ShoreConfigRequest+0x274>)
 8002844:	edc3 7a01 	vstr	s15, [r3, #4]
		rJoySpeed.depth = req.depth;
 8002848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002854:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <ShoreConfigRequest+0x274>)
 8002856:	edc3 7a02 	vstr	s15, [r3, #8]
		rJoySpeed.roll = req.roll;
 800285a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <ShoreConfigRequest+0x274>)
 8002868:	edc3 7a03 	vstr	s15, [r3, #12]
		rJoySpeed.pitch = req.pitch;
 800286c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <ShoreConfigRequest+0x274>)
 800287a:	edc3 7a04 	vstr	s15, [r3, #16]
		rJoySpeed.yaw = req.yaw;
 800287e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288a:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <ShoreConfigRequest+0x274>)
 800288c:	edc3 7a05 	vstr	s15, [r3, #20]

		rStabConstants[req.contour].pJoyUnitCast = req.pJoyUnitCast;
 8002890:	7a7b      	ldrb	r3, [r7, #9]
 8002892:	4618      	mov	r0, r3
 8002894:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8002898:	4976      	ldr	r1, [pc, #472]	; (8002a74 <ShoreConfigRequest+0x278>)
 800289a:	224c      	movs	r2, #76	; 0x4c
 800289c:	fb00 f202 	mul.w	r2, r0, r2
 80028a0:	440a      	add	r2, r1
 80028a2:	3204      	adds	r2, #4
 80028a4:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pSpeedDyn = req.pSpeedDyn;
 80028a6:	7a7b      	ldrb	r3, [r7, #9]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f8d7 301a 	ldr.w	r3, [r7, #26]
 80028ae:	4971      	ldr	r1, [pc, #452]	; (8002a74 <ShoreConfigRequest+0x278>)
 80028b0:	224c      	movs	r2, #76	; 0x4c
 80028b2:	fb00 f202 	mul.w	r2, r0, r2
 80028b6:	440a      	add	r2, r1
 80028b8:	3208      	adds	r2, #8
 80028ba:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pErrGain = req.pErrGain;
 80028bc:	7a7b      	ldrb	r3, [r7, #9]
 80028be:	4618      	mov	r0, r3
 80028c0:	f8d7 301e 	ldr.w	r3, [r7, #30]
 80028c4:	496b      	ldr	r1, [pc, #428]	; (8002a74 <ShoreConfigRequest+0x278>)
 80028c6:	224c      	movs	r2, #76	; 0x4c
 80028c8:	fb00 f202 	mul.w	r2, r0, r2
 80028cc:	440a      	add	r2, r1
 80028ce:	320c      	adds	r2, #12
 80028d0:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].aFilter[POS_FILTER].T = req.posFilterT;
 80028d2:	7a7b      	ldrb	r3, [r7, #9]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f8d7 3022 	ldr.w	r3, [r7, #34]	; 0x22
 80028da:	4966      	ldr	r1, [pc, #408]	; (8002a74 <ShoreConfigRequest+0x278>)
 80028dc:	224c      	movs	r2, #76	; 0x4c
 80028de:	fb00 f202 	mul.w	r2, r0, r2
 80028e2:	440a      	add	r2, r1
 80028e4:	3210      	adds	r2, #16
 80028e6:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[POS_FILTER].K = req.posFilterK;
 80028e8:	7a7b      	ldrb	r3, [r7, #9]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 80028f0:	4960      	ldr	r1, [pc, #384]	; (8002a74 <ShoreConfigRequest+0x278>)
 80028f2:	224c      	movs	r2, #76	; 0x4c
 80028f4:	fb00 f202 	mul.w	r2, r0, r2
 80028f8:	440a      	add	r2, r1
 80028fa:	3214      	adds	r2, #20
 80028fc:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].T = req.speedFilterT;
 80028fe:	7a7b      	ldrb	r3, [r7, #9]
 8002900:	4618      	mov	r0, r3
 8002902:	f8d7 302a 	ldr.w	r3, [r7, #42]	; 0x2a
 8002906:	495b      	ldr	r1, [pc, #364]	; (8002a74 <ShoreConfigRequest+0x278>)
 8002908:	224c      	movs	r2, #76	; 0x4c
 800290a:	fb00 f202 	mul.w	r2, r0, r2
 800290e:	440a      	add	r2, r1
 8002910:	3218      	adds	r2, #24
 8002912:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[SPEED_FILTER].K = req.speedFilterK;
 8002914:	7a7b      	ldrb	r3, [r7, #9]
 8002916:	4618      	mov	r0, r3
 8002918:	f8d7 302e 	ldr.w	r3, [r7, #46]	; 0x2e
 800291c:	4955      	ldr	r1, [pc, #340]	; (8002a74 <ShoreConfigRequest+0x278>)
 800291e:	224c      	movs	r2, #76	; 0x4c
 8002920:	fb00 f202 	mul.w	r2, r0, r2
 8002924:	440a      	add	r2, r1
 8002926:	321c      	adds	r2, #28
 8002928:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].pid.pGain = req.pid_pGain;
 800292a:	7a7b      	ldrb	r3, [r7, #9]
 800292c:	4618      	mov	r0, r3
 800292e:	f8d7 3032 	ldr.w	r3, [r7, #50]	; 0x32
 8002932:	4950      	ldr	r1, [pc, #320]	; (8002a74 <ShoreConfigRequest+0x278>)
 8002934:	224c      	movs	r2, #76	; 0x4c
 8002936:	fb00 f202 	mul.w	r2, r0, r2
 800293a:	440a      	add	r2, r1
 800293c:	3228      	adds	r2, #40	; 0x28
 800293e:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iGain = req.pid_iGain;
 8002940:	7a7b      	ldrb	r3, [r7, #9]
 8002942:	4618      	mov	r0, r3
 8002944:	f8d7 3036 	ldr.w	r3, [r7, #54]	; 0x36
 8002948:	494a      	ldr	r1, [pc, #296]	; (8002a74 <ShoreConfigRequest+0x278>)
 800294a:	224c      	movs	r2, #76	; 0x4c
 800294c:	fb00 f202 	mul.w	r2, r0, r2
 8002950:	440a      	add	r2, r1
 8002952:	322c      	adds	r2, #44	; 0x2c
 8002954:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iMax = req.pid_iMax;
 8002956:	7a7b      	ldrb	r3, [r7, #9]
 8002958:	4618      	mov	r0, r3
 800295a:	f8d7 303a 	ldr.w	r3, [r7, #58]	; 0x3a
 800295e:	4945      	ldr	r1, [pc, #276]	; (8002a74 <ShoreConfigRequest+0x278>)
 8002960:	224c      	movs	r2, #76	; 0x4c
 8002962:	fb00 f202 	mul.w	r2, r0, r2
 8002966:	440a      	add	r2, r1
 8002968:	3230      	adds	r2, #48	; 0x30
 800296a:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pid.iMin = req.pid_iMin;
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	4618      	mov	r0, r3
 8002970:	f8d7 303e 	ldr.w	r3, [r7, #62]	; 0x3e
 8002974:	493f      	ldr	r1, [pc, #252]	; (8002a74 <ShoreConfigRequest+0x278>)
 8002976:	224c      	movs	r2, #76	; 0x4c
 8002978:	fb00 f202 	mul.w	r2, r0, r2
 800297c:	440a      	add	r2, r1
 800297e:	3234      	adds	r2, #52	; 0x34
 8002980:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].pThrustersMin = req.pThrustersMin;
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	4618      	mov	r0, r3
 8002986:	f8d7 3042 	ldr.w	r3, [r7, #66]	; 0x42
 800298a:	493a      	ldr	r1, [pc, #232]	; (8002a74 <ShoreConfigRequest+0x278>)
 800298c:	224c      	movs	r2, #76	; 0x4c
 800298e:	fb00 f202 	mul.w	r2, r0, r2
 8002992:	440a      	add	r2, r1
 8002994:	3238      	adds	r2, #56	; 0x38
 8002996:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].pThrustersMax = req.pThrustersMax;
 8002998:	7a7b      	ldrb	r3, [r7, #9]
 800299a:	4618      	mov	r0, r3
 800299c:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 80029a0:	4934      	ldr	r1, [pc, #208]	; (8002a74 <ShoreConfigRequest+0x278>)
 80029a2:	224c      	movs	r2, #76	; 0x4c
 80029a4:	fb00 f202 	mul.w	r2, r0, r2
 80029a8:	440a      	add	r2, r1
 80029aa:	323c      	adds	r2, #60	; 0x3c
 80029ac:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].T = req.thrustersFilterT;
 80029ae:	7a7b      	ldrb	r3, [r7, #9]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f8d7 304a 	ldr.w	r3, [r7, #74]	; 0x4a
 80029b6:	492f      	ldr	r1, [pc, #188]	; (8002a74 <ShoreConfigRequest+0x278>)
 80029b8:	224c      	movs	r2, #76	; 0x4c
 80029ba:	fb00 f202 	mul.w	r2, r0, r2
 80029be:	440a      	add	r2, r1
 80029c0:	3220      	adds	r2, #32
 80029c2:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].aFilter[THRUSTERS_FILTER].K = req.thrustersFilterK;
 80029c4:	7a7b      	ldrb	r3, [r7, #9]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f8d7 304e 	ldr.w	r3, [r7, #78]	; 0x4e
 80029cc:	4929      	ldr	r1, [pc, #164]	; (8002a74 <ShoreConfigRequest+0x278>)
 80029ce:	224c      	movs	r2, #76	; 0x4c
 80029d0:	fb00 f202 	mul.w	r2, r0, r2
 80029d4:	440a      	add	r2, r1
 80029d6:	3224      	adds	r2, #36	; 0x24
 80029d8:	6013      	str	r3, [r2, #0]

		rStabConstants[req.contour].sOutSummatorMax = req.sOutSummatorMax;
 80029da:	7a7b      	ldrb	r3, [r7, #9]
 80029dc:	4618      	mov	r0, r3
 80029de:	f8d7 3052 	ldr.w	r3, [r7, #82]	; 0x52
 80029e2:	4924      	ldr	r1, [pc, #144]	; (8002a74 <ShoreConfigRequest+0x278>)
 80029e4:	224c      	movs	r2, #76	; 0x4c
 80029e6:	fb00 f202 	mul.w	r2, r0, r2
 80029ea:	440a      	add	r2, r1
 80029ec:	3244      	adds	r2, #68	; 0x44
 80029ee:	6013      	str	r3, [r2, #0]
		rStabConstants[req.contour].sOutSummatorMin = req.sOutSummatorMin;
 80029f0:	7a7b      	ldrb	r3, [r7, #9]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f8d7 3056 	ldr.w	r3, [r7, #86]	; 0x56
 80029f8:	491e      	ldr	r1, [pc, #120]	; (8002a74 <ShoreConfigRequest+0x278>)
 80029fa:	224c      	movs	r2, #76	; 0x4c
 80029fc:	fb00 f202 	mul.w	r2, r0, r2
 8002a00:	440a      	add	r2, r1
 8002a02:	3248      	adds	r2, #72	; 0x48
 8002a04:	6013      	str	r3, [r2, #0]

		if(rState.contourSelected != req.contour) {
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <ShoreConfigRequest+0x27c>)
 8002a08:	785a      	ldrb	r2, [r3, #1]
 8002a0a:	7a7b      	ldrb	r3, [r7, #9]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d01c      	beq.n	8002a4a <ShoreConfigRequest+0x24e>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a16:	e00d      	b.n	8002a34 <ShoreConfigRequest+0x238>
				rStabConstants[i].enable = false;
 8002a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <ShoreConfigRequest+0x278>)
 8002a1e:	214c      	movs	r1, #76	; 0x4c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d9ed      	bls.n	8002a18 <ShoreConfigRequest+0x21c>
			}
			rState.contourSelected = req.contour;
 8002a3c:	7a7a      	ldrb	r2, [r7, #9]
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <ShoreConfigRequest+0x27c>)
 8002a40:	705a      	strb	r2, [r3, #1]
			stabilizationStart(req.contour);
 8002a42:	7a7b      	ldrb	r3, [r7, #9]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 f83b 	bl	8004ac0 <stabilizationStart>
		}

		// TODO tuuuupooo
		formThrustVectors();
 8002a4a:	f002 fdfd 	bl	8005648 <formThrustVectors>

		++uartBus[SHORE_UART].successRxCounter;;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <ShoreConfigRequest+0x280>)
 8002a50:	895b      	ldrh	r3, [r3, #10]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <ShoreConfigRequest+0x280>)
 8002a58:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002a5a:	e004      	b.n	8002a66 <ShoreConfigRequest+0x26a>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <ShoreConfigRequest+0x280>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	3301      	adds	r3, #1
 8002a62:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <ShoreConfigRequest+0x280>)
 8002a64:	60d3      	str	r3, [r2, #12]
}
 8002a66:	bf00      	nop
 8002a68:	3760      	adds	r7, #96	; 0x60
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20001e44 	.word	0x20001e44
 8002a74:	20001e9c 	.word	0x20001e9c
 8002a78:	20001d2c 	.word	0x20001d2c
 8002a7c:	2000018c 	.word	0x2000018c

08002a80 <ShoreDirectRequest>:

void ShoreDirectRequest(uint8_t *requestBuf)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	if(IsCrc16ChecksummCorrect(requestBuf, SHORE_REQUEST_DIRECT_LENGTH)) {
 8002a88:	2111      	movs	r1, #17
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe ff89 	bl	80019a2 <IsCrc16ChecksummCorrect>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 809a 	beq.w	8002bcc <ShoreDirectRequest+0x14c>
		struct shoreRequestDirect_s req;
		memcpy((void*)&req, (void*)requestBuf, SHORE_REQUEST_DIRECT_LENGTH);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f107 040c 	add.w	r4, r7, #12
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	6828      	ldr	r0, [r5, #0]
 8002aa2:	6869      	ldr	r1, [r5, #4]
 8002aa4:	68aa      	ldr	r2, [r5, #8]
 8002aa6:	68eb      	ldr	r3, [r5, #12]
 8002aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aaa:	7c2b      	ldrb	r3, [r5, #16]
 8002aac:	7023      	strb	r3, [r4, #0]

		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002aae:	2300      	movs	r3, #0
 8002ab0:	77fb      	strb	r3, [r7, #31]
 8002ab2:	e00a      	b.n	8002aca <ShoreDirectRequest+0x4a>
			rStabConstants[i].enable = false;
 8002ab4:	7ffb      	ldrb	r3, [r7, #31]
 8002ab6:	4a4a      	ldr	r2, [pc, #296]	; (8002be0 <ShoreDirectRequest+0x160>)
 8002ab8:	214c      	movs	r1, #76	; 0x4c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8002ac4:	7ffb      	ldrb	r3, [r7, #31]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	7ffb      	ldrb	r3, [r7, #31]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d9f1      	bls.n	8002ab4 <ShoreDirectRequest+0x34>
		}

		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77bb      	strb	r3, [r7, #30]
 8002ad4:	e070      	b.n	8002bb8 <ShoreDirectRequest+0x138>
			if(i != req.number) {
 8002ad6:	7b7b      	ldrb	r3, [r7, #13]
 8002ad8:	7fba      	ldrb	r2, [r7, #30]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d00a      	beq.n	8002af4 <ShoreDirectRequest+0x74>
				rThrusters[i].desiredSpeed = 0;
 8002ade:	7fba      	ldrb	r2, [r7, #30]
 8002ae0:	4940      	ldr	r1, [pc, #256]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	3302      	adds	r3, #2
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e05e      	b.n	8002bb2 <ShoreDirectRequest+0x132>
			}
			else {
				rThrusters[req.number].desiredSpeed = req.velocity;
 8002af4:	7b7b      	ldrb	r3, [r7, #13]
 8002af6:	4619      	mov	r1, r3
 8002af8:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002afc:	4a39      	ldr	r2, [pc, #228]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002afe:	460b      	mov	r3, r1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].address = req.id;
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	4619      	mov	r1, r3
 8002b12:	7bb8      	ldrb	r0, [r7, #14]
 8002b14:	4a33      	ldr	r2, [pc, #204]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002b16:	460b      	mov	r3, r1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	440b      	add	r3, r1
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	4602      	mov	r2, r0
 8002b22:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].kForward = req.kForward;
 8002b24:	7b7b      	ldrb	r3, [r7, #13]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f8d7 2011 	ldr.w	r2, [r7, #17]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	492c      	ldr	r1, [pc, #176]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002b32:	4603      	mov	r3, r0
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4403      	add	r3, r0
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].kBackward = req.kBackward;
 8002b40:	7b7b      	ldrb	r3, [r7, #13]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f8d7 2015 	ldr.w	r2, [r7, #21]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4925      	ldr	r1, [pc, #148]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002b4e:	4603      	mov	r3, r0
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4403      	add	r3, r0
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	3310      	adds	r3, #16
 8002b5a:	601a      	str	r2, [r3, #0]
				rThrusters[req.number].sForward = req.sForward;
 8002b5c:	7b7b      	ldrb	r3, [r7, #13]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002b66:	460b      	mov	r3, r1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	440b      	add	r3, r1
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3314      	adds	r3, #20
 8002b72:	4602      	mov	r2, r0
 8002b74:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].sBackward = req.sBackward;
 8002b76:	7b7b      	ldrb	r3, [r7, #13]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f997 001a 	ldrsb.w	r0, [r7, #26]
 8002b7e:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002b80:	460b      	mov	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3315      	adds	r3, #21
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	701a      	strb	r2, [r3, #0]
				rThrusters[req.number].inverse = req.reverse;
 8002b90:	7c3b      	ldrb	r3, [r7, #16]
 8002b92:	7b7a      	ldrb	r2, [r7, #13]
 8002b94:	4611      	mov	r1, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2d8      	uxtb	r0, r3
 8002ba0:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <ShoreDirectRequest+0x164>)
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	440b      	add	r3, r1
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	3316      	adds	r3, #22
 8002bae:	4602      	mov	r2, r0
 8002bb0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8002bb2:	7fbb      	ldrb	r3, [r7, #30]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	77bb      	strb	r3, [r7, #30]
 8002bb8:	7fbb      	ldrb	r3, [r7, #30]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d98b      	bls.n	8002ad6 <ShoreDirectRequest+0x56>
			}
		}

		++uartBus[SHORE_UART].successRxCounter;;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <ShoreDirectRequest+0x168>)
 8002bc0:	895b      	ldrh	r3, [r3, #10]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <ShoreDirectRequest+0x168>)
 8002bc8:	815a      	strh	r2, [r3, #10]
	}
	else {
		++uartBus[SHORE_UART].brokenRxCounter;
	}
}
 8002bca:	e004      	b.n	8002bd6 <ShoreDirectRequest+0x156>
		++uartBus[SHORE_UART].brokenRxCounter;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <ShoreDirectRequest+0x168>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <ShoreDirectRequest+0x168>)
 8002bd4:	60d3      	str	r3, [r2, #12]
}
 8002bd6:	bf00      	nop
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20001e9c 	.word	0x20001e9c
 8002be4:	20001d38 	.word	0x20001d38
 8002be8:	2000018c 	.word	0x2000018c

08002bec <ShoreResponse>:

void ShoreResponse(uint8_t *responseBuf)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	struct shoreResponse_s res;

    res.roll = rSensors.roll;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <ShoreResponse+0x48>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
    res.pitch = rSensors.pitch;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <ShoreResponse+0x48>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	613b      	str	r3, [r7, #16]
    res.yaw =  rSensors.yaw;//*rStabState[STAB_YAW].posSignal;//rSensors.yaw;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <ShoreResponse+0x48>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	617b      	str	r3, [r7, #20]

    res.pressure = rSensors.pressure;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <ShoreResponse+0x48>)
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	61bb      	str	r3, [r7, #24]
    res.dropper = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	773b      	strb	r3, [r7, #28]
    res.grabber = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	777b      	strb	r3, [r7, #29]
   // res.vma_errors = 0x55;         //!!!!!TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // TODO do this properly pls
   // res.dev_errors = 0;//robot->device.errors;
  //  res.pc_errors = rComputer.errors;

    memcpy((void*)responseBuf, (void*)&res, SHORE_RESPONSE_LENGTH-2);
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	2212      	movs	r2, #18
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f00d fcd7 	bl	80105d0 <memcpy>

    AddCrc16Checksumm(responseBuf, SHORE_RESPONSE_LENGTH);
 8002c22:	2114      	movs	r1, #20
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe fedc 	bl	80019e2 <AddCrc16Checksumm>
}
 8002c2a:	bf00      	nop
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20001dc8 	.word	0x20001dc8

08002c38 <ShoreConfigResponse>:

void ShoreConfigResponse(uint8_t *responseBuf)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b09c      	sub	sp, #112	; 0x70
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	struct shoreConfigResponse_s res;

	res.code = REQUEST_CONFIG_CODE;
 8002c40:	2355      	movs	r3, #85	; 0x55
 8002c42:	733b      	strb	r3, [r7, #12]

	res.roll = rSensors.roll;
 8002c44:	4b74      	ldr	r3, [pc, #464]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8c7 300d 	str.w	r3, [r7, #13]
	res.pitch = rSensors.pitch;
 8002c4c:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f8c7 3011 	str.w	r3, [r7, #17]
	res.yaw = rSensors.yaw;
 8002c54:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f8c7 3015 	str.w	r3, [r7, #21]
	res.raw_yaw = rSensors.raw_yaw;
 8002c5c:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f8c7 3019 	str.w	r3, [r7, #25]

	res.rollSpeed = rSensors.rollSpeed;
 8002c64:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f8c7 301d 	str.w	r3, [r7, #29]
	res.pitchSpeed = rSensors.pitchSpeed;
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
	res.yawSpeed = rSensors.yawSpeed;
 8002c74:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25

	res.pressure = rSensors.pressure;
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <ShoreConfigResponse+0x1e0>)
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
	res.in_pressure = 0;
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	f8c7 302d 	str.w	r3, [r7, #45]	; 0x2d

	res.inputSignal = *rStabState[rState.contourSelected].inputSignal;
 8002c8c:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002c8e:	785b      	ldrb	r3, [r3, #1]
 8002c90:	4619      	mov	r1, r3
 8002c92:	4a63      	ldr	r2, [pc, #396]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002c94:	2358      	movs	r3, #88	; 0x58
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8c7 3031 	str.w	r3, [r7, #49]	; 0x31
	res.speedSignal = *rStabState[rState.contourSelected].speedSignal;
 8002ca4:	4b5d      	ldr	r3, [pc, #372]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002cac:	2358      	movs	r3, #88	; 0x58
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
	res.posSignal = *rStabState[rState.contourSelected].posSignal;
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4a56      	ldr	r2, [pc, #344]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002cc6:	2358      	movs	r3, #88	; 0x58
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3308      	adds	r3, #8
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39

	res.joyUnitCasted = rStabState[rState.contourSelected].joyUnitCasted;
 8002cd8:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002cda:	785b      	ldrb	r3, [r3, #1]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4a50      	ldr	r2, [pc, #320]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002ce0:	2358      	movs	r3, #88	; 0x58
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	331c      	adds	r3, #28
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
	res.joy_iValue = rStabState[rState.contourSelected].joy_iValue;
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4a4a      	ldr	r2, [pc, #296]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002cf8:	2358      	movs	r3, #88	; 0x58
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3320      	adds	r3, #32
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
	res.posError = rStabState[rState.contourSelected].posError;
 8002d08:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4a44      	ldr	r2, [pc, #272]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002d10:	2358      	movs	r3, #88	; 0x58
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3324      	adds	r3, #36	; 0x24
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8c7 3045 	str.w	r3, [r7, #69]	; 0x45
	res.speedError = rStabState[rState.contourSelected].speedError;
 8002d20:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002d22:	785b      	ldrb	r3, [r3, #1]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4a3e      	ldr	r2, [pc, #248]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002d28:	2358      	movs	r3, #88	; 0x58
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3328      	adds	r3, #40	; 0x28
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8c7 3049 	str.w	r3, [r7, #73]	; 0x49
	res.dynSummator = rStabState[rState.contourSelected].dynSummator;
 8002d38:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4a38      	ldr	r2, [pc, #224]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002d40:	2358      	movs	r3, #88	; 0x58
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	332c      	adds	r3, #44	; 0x2c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8c7 304d 	str.w	r3, [r7, #77]	; 0x4d
	res.pidValue = rStabState[rState.contourSelected].pidValue;
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002d58:	2358      	movs	r3, #88	; 0x58
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3330      	adds	r3, #48	; 0x30
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 3051 	str.w	r3, [r7, #81]	; 0x51
	res.posErrorAmp = rStabState[rState.contourSelected].posErrorAmp;
 8002d68:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002d6a:	785b      	ldrb	r3, [r3, #1]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4a2c      	ldr	r2, [pc, #176]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002d70:	2358      	movs	r3, #88	; 0x58
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3338      	adds	r3, #56	; 0x38
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c7 3055 	str.w	r3, [r7, #85]	; 0x55
	res.speedFiltered = rStabState[rState.contourSelected].speedFiltered;
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002d88:	2358      	movs	r3, #88	; 0x58
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	333c      	adds	r3, #60	; 0x3c
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8c7 3059 	str.w	r3, [r7, #89]	; 0x59
	res.posFiltered = rStabState[rState.contourSelected].posFiltered;
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002da0:	2358      	movs	r3, #88	; 0x58
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3340      	adds	r3, #64	; 0x40
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8c7 305d 	str.w	r3, [r7, #93]	; 0x5d

	res.pid_iValue = rStabState[rState.contourSelected].pid_iValue;
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002db8:	2358      	movs	r3, #88	; 0x58
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3334      	adds	r3, #52	; 0x34
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8c7 3061 	str.w	r3, [r7, #97]	; 0x61

	res.thrustersFiltered = rStabState[rState.contourSelected].thrustersFiltered;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002dd0:	2358      	movs	r3, #88	; 0x58
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	334c      	adds	r3, #76	; 0x4c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8c7 3065 	str.w	r3, [r7, #101]	; 0x65
	res.outputSignal = rStabState[rState.contourSelected].outputSignal;
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <ShoreConfigResponse+0x1e4>)
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	4619      	mov	r1, r3
 8002de6:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <ShoreConfigResponse+0x1e8>)
 8002de8:	2358      	movs	r3, #88	; 0x58
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3350      	adds	r3, #80	; 0x50
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8c7 3069 	str.w	r3, [r7, #105]	; 0x69

	memcpy((void*)responseBuf, (void*)&res, SHORE_CONFIG_RESPONSE_LENGTH);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f107 030c 	add.w	r3, r7, #12
 8002e00:	2263      	movs	r2, #99	; 0x63
 8002e02:	4619      	mov	r1, r3
 8002e04:	f00d fbe4 	bl	80105d0 <memcpy>

	AddCrc16Checksumm(responseBuf, SHORE_CONFIG_RESPONSE_LENGTH);
 8002e08:	2163      	movs	r1, #99	; 0x63
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fde9 	bl	80019e2 <AddCrc16Checksumm>
}
 8002e10:	bf00      	nop
 8002e12:	3770      	adds	r7, #112	; 0x70
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20001dc8 	.word	0x20001dc8
 8002e1c:	20001d2c 	.word	0x20001d2c
 8002e20:	20002064 	.word	0x20002064

08002e24 <ShoreDirectResponse>:

void ShoreDirectResponse(uint8_t *responseBuf)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	struct shoreResponseDirect_s res;

	res.number = 0xFF;
 8002e2c:	23ff      	movs	r3, #255	; 0xff
 8002e2e:	723b      	strb	r3, [r7, #8]
	res.connection = 0xAA;
 8002e30:	23aa      	movs	r3, #170	; 0xaa
 8002e32:	727b      	strb	r3, [r7, #9]
	res.current = 0xBB;
 8002e34:	23bb      	movs	r3, #187	; 0xbb
 8002e36:	817b      	strh	r3, [r7, #10]

    memcpy((void*)responseBuf, (void*)&res, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	6010      	str	r0, [r2, #0]
 8002e44:	889b      	ldrh	r3, [r3, #4]
 8002e46:	8093      	strh	r3, [r2, #4]

    AddCrc16Checksumm(responseBuf, SHORE_DIRECT_RESPONSE_LENGTH);
 8002e48:	2106      	movs	r1, #6
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fdc9 	bl	80019e2 <AddCrc16Checksumm>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <ImuReceive>:
	}
	return 0;
}

void ImuReceive(uint8_t *ReceiveBuf)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	 // Check sync byte
	 if ((ReceiveBuf[0] != 0xFA)||(ReceiveBuf[1] != 0x01)||(ReceiveBuf[2] != 0x28)||(ReceiveBuf[3] != 0x00))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2bfa      	cmp	r3, #250	; 0xfa
 8002e66:	d10e      	bne.n	8002e86 <ImuReceive+0x2e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d109      	bne.n	8002e86 <ImuReceive+0x2e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3302      	adds	r3, #2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b28      	cmp	r3, #40	; 0x28
 8002e7a:	d104      	bne.n	8002e86 <ImuReceive+0x2e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3303      	adds	r3, #3
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <ImuReceive+0x3e>
	 {
		 ++uartBus[IMU_UART].brokenRxCounter;
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <ImuReceive+0xf8>)
 8002e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <ImuReceive+0xf8>)
 8002e90:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		 return;
 8002e94:	e059      	b.n	8002f4a <ImuReceive+0xf2>
	 }

	 rSensors.crc = (ReceiveBuf[28] << 8) | ReceiveBuf[29];
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	331c      	adds	r3, #28
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	b21a      	sxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	331d      	adds	r3, #29
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <ImuReceive+0xfc>)
 8002eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	 //crc length= IMU_RESPONSE_LENGTH - 1 sync byte - 2 bytes crc
	 uint16_t calculated_crc = calculateCRC(ReceiveBuf + 1, IMU_RESPONSE_LENGTH - 1 - 2);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	211b      	movs	r1, #27
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f84c 	bl	8002f58 <calculateCRC>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	81fb      	strh	r3, [r7, #14]
	 if (rSensors.crc != calculated_crc)
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <ImuReceive+0xfc>)
 8002ec6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eca:	89fa      	ldrh	r2, [r7, #14]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d007      	beq.n	8002ee0 <ImuReceive+0x88>
	 {
		 ++uartBus[IMU_UART].brokenRxCounter;
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <ImuReceive+0xf8>)
 8002ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <ImuReceive+0xf8>)
 8002eda:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		 return;
 8002ede:	e034      	b.n	8002f4a <ImuReceive+0xf2>
	 }



  	  memcpy(&rSensors.yaw, ReceiveBuf + 4, sizeof(rSensors.yaw));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <ImuReceive+0xfc>)
 8002eea:	609a      	str	r2, [r3, #8]
  	  memcpy(&rSensors.pitch, ReceiveBuf + 8, sizeof(rSensors.pitch));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <ImuReceive+0xfc>)
 8002ef6:	605a      	str	r2, [r3, #4]
  	  memcpy(&rSensors.roll, ReceiveBuf + 12, sizeof(rSensors.roll));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	330c      	adds	r3, #12
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <ImuReceive+0xfc>)
 8002f02:	601a      	str	r2, [r3, #0]

  	  memcpy(&rSensors.rollSpeed, ReceiveBuf + 16, sizeof(rSensors.rollSpeed));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3310      	adds	r3, #16
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <ImuReceive+0xfc>)
 8002f0e:	61da      	str	r2, [r3, #28]
  	  memcpy(&rSensors.pitchSpeed, ReceiveBuf + 20, sizeof(rSensors.pitchSpeed));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3314      	adds	r3, #20
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <ImuReceive+0xfc>)
 8002f1a:	621a      	str	r2, [r3, #32]
  	  memcpy(&rSensors.yawSpeed, ReceiveBuf + 24, sizeof(rSensors.yawSpeed));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3318      	adds	r3, #24
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <ImuReceive+0xfc>)
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
//
//  	  memcpy(&rSensors.accelX, ReceiveBuf + 28, sizeof(rSensors.accelX));
//  	  memcpy(&rSensors.accelY, ReceiveBuf + 32, sizeof(rSensors.accelY));
//  	  memcpy(&rSensors.accelZ, ReceiveBuf + 36, sizeof(rSensors.accelZ));

    rSensors.LastTick = xTaskGetTickCount();
 8002f28:	f00b fbf2 	bl	800e710 <xTaskGetTickCount>
 8002f2c:	ee07 0a90 	vmov	s15, r0
 8002f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <ImuReceive+0xfc>)
 8002f36:	edc3 7a05 	vstr	s15, [r3, #20]


    ++uartBus[IMU_UART].successRxCounter;
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <ImuReceive+0xf8>)
 8002f3c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002f40:	3301      	adds	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <ImuReceive+0xf8>)
 8002f46:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
}
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000018c 	.word	0x2000018c
 8002f54:	20001dc8 	.word	0x20001dc8

08002f58 <calculateCRC>:

unsigned short calculateCRC(unsigned char data[], unsigned int length) {
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
    unsigned int i;
    unsigned short crc = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e030      	b.n	8002fce <calculateCRC+0x76>
        crc = (unsigned char)(crc >> 8) | (crc << 8);
 8002f6c:	897b      	ldrh	r3, [r7, #10]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	b21a      	sxth	r2, r3
 8002f76:	897b      	ldrh	r3, [r7, #10]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	817b      	strh	r3, [r7, #10]
        crc ^= data[i];
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	4053      	eors	r3, r2
 8002f90:	817b      	strh	r3, [r7, #10]
        crc ^= (unsigned char)(crc & 0xff) >> 4;
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	897b      	ldrh	r3, [r7, #10]
 8002f9e:	4053      	eors	r3, r2
 8002fa0:	817b      	strh	r3, [r7, #10]
        crc ^= crc << 12;
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	b21a      	sxth	r2, r3
 8002fa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fac:	4053      	eors	r3, r2
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	817b      	strh	r3, [r7, #10]
        crc ^= (crc & 0x00ff) << 5;
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	015b      	lsls	r3, r3, #5
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fc2:	4053      	eors	r3, r2
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < length; i++) {
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3ca      	bcc.n	8002f6c <calculateCRC+0x14>
    }
    return crc;
 8002fd6:	897b      	ldrh	r3, [r7, #10]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <MX_DMA_Init+0x68>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4a17      	ldr	r2, [pc, #92]	; (800304c <MX_DMA_Init+0x68>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6153      	str	r3, [r2, #20]
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <MX_DMA_Init+0x68>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2105      	movs	r1, #5
 8003006:	200e      	movs	r0, #14
 8003008:	f003 f858 	bl	80060bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800300c:	200e      	movs	r0, #14
 800300e:	f003 f871 	bl	80060f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2105      	movs	r1, #5
 8003016:	200f      	movs	r0, #15
 8003018:	f003 f850 	bl	80060bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800301c:	200f      	movs	r0, #15
 800301e:	f003 f869 	bl	80060f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2105      	movs	r1, #5
 8003026:	2010      	movs	r0, #16
 8003028:	f003 f848 	bl	80060bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800302c:	2010      	movs	r0, #16
 800302e:	f003 f861 	bl	80060f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2105      	movs	r1, #5
 8003036:	2011      	movs	r0, #17
 8003038:	f003 f840 	bl	80060bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800303c:	2011      	movs	r0, #17
 800303e:	f003 f859 	bl	80060f4 <HAL_NVIC_EnableIRQ>

}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000

08003050 <flashReadSettings>:
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
	HAL_FLASH_Lock();
}

void flashReadSettings(struct flashConfiguration_s *config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	uint32_t *source_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <flashReadSettings+0x44>)
 800305a:	617b      	str	r3, [r7, #20]
	uint32_t *dest_addr = (void *)config;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 8003060:	2300      	movs	r3, #0
 8003062:	81fb      	strh	r3, [r7, #14]
 8003064:	e00c      	b.n	8003080 <flashReadSettings+0x30>
		*dest_addr = *(__IO uint32_t*)source_addr;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	601a      	str	r2, [r3, #0]
		source_addr++;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3304      	adds	r3, #4
 8003072:	617b      	str	r3, [r7, #20]
		dest_addr++;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3304      	adds	r3, #4
 8003078:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < SETTINGS_WORDS; ++i) {
 800307a:	89fb      	ldrh	r3, [r7, #14]
 800307c:	3301      	adds	r3, #1
 800307e:	81fb      	strh	r3, [r7, #14]
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d9ef      	bls.n	8003066 <flashReadSettings+0x16>
	}
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	0803f800 	.word	0x0803f800

08003098 <flashWriteSettings>:

void flashWriteSettings(struct flashConfiguration_s *config)
{
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	// Write settings
	HAL_FLASH_Unlock();
 80030a0:	f003 faec 	bl	800667c <HAL_FLASH_Unlock>

	// erase page
	FLASH_EraseInitTypeDef erase_conf;
	erase_conf.TypeErase = FLASH_TYPEERASE_PAGES; // erase only 1 page
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
	erase_conf.PageAddress = (uint32_t)CONFIG_PAGE_ADDR;
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <flashWriteSettings+0x70>)
 80030aa:	617b      	str	r3, [r7, #20]
	erase_conf.NbPages = 1;
 80030ac:	2301      	movs	r3, #1
 80030ae:	61bb      	str	r3, [r7, #24]

	uint32_t page_error;
	HAL_FLASHEx_Erase(&erase_conf, &page_error);
 80030b0:	f107 020c 	add.w	r2, r7, #12
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fba2 	bl	8006804 <HAL_FLASHEx_Erase>

	// write page
	uint32_t *source_addr = (void *)config;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *dest_addr = (uint32_t *)CONFIG_PAGE_ADDR;
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <flashWriteSettings+0x70>)
 80030c6:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e013      	b.n	80030f6 <flashWriteSettings+0x5e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)dest_addr, *source_addr);
 80030ce:	6a39      	ldr	r1, [r7, #32]
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	461c      	mov	r4, r3
 80030d8:	4615      	mov	r5, r2
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	2002      	movs	r0, #2
 80030e0:	f003 fa5c 	bl	800659c <HAL_FLASH_Program>
		source_addr++;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	3304      	adds	r3, #4
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
		dest_addr++;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	3304      	adds	r3, #4
 80030ee:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < SETTINGS_WORDS; ++i) {
 80030f0:	7ffb      	ldrb	r3, [r7, #31]
 80030f2:	3301      	adds	r3, #1
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	7ffb      	ldrb	r3, [r7, #31]
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d9e8      	bls.n	80030ce <flashWriteSettings+0x36>
	}

	HAL_FLASH_Lock();
 80030fc:	f003 fae4 	bl	80066c8 <HAL_FLASH_Lock>
}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bdb0      	pop	{r4, r5, r7, pc}
 8003108:	0803f800 	.word	0x0803f800

0800310c <flashFillStructure>:

void flashFillStructure(struct flashConfiguration_s *config)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	config->writeFlag = 0xAA;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	22aa      	movs	r2, #170	; 0xaa
 8003118:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e143      	b.n	80033a8 <flashFillStructure+0x29c>
		config->stabConstants[i].pJoyUnitCast = rStabConstants[i].pJoyUnitCast;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	49a6      	ldr	r1, [pc, #664]	; (80033c0 <flashFillStructure+0x2b4>)
 8003126:	204c      	movs	r0, #76	; 0x4c
 8003128:	fb00 f303 	mul.w	r3, r0, r3
 800312c:	440b      	add	r3, r1
 800312e:	3304      	adds	r3, #4
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3301      	adds	r3, #1
 8003140:	4602      	mov	r2, r0
 8003142:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pSpeedDyn = rStabConstants[i].pSpeedDyn;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	499d      	ldr	r1, [pc, #628]	; (80033c0 <flashFillStructure+0x2b4>)
 800314a:	204c      	movs	r0, #76	; 0x4c
 800314c:	fb00 f303 	mul.w	r3, r0, r3
 8003150:	440b      	add	r3, r1
 8003152:	3308      	adds	r3, #8
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3305      	adds	r3, #5
 8003164:	4602      	mov	r2, r0
 8003166:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pErrGain = rStabConstants[i].pErrGain;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	4994      	ldr	r1, [pc, #592]	; (80033c0 <flashFillStructure+0x2b4>)
 800316e:	204c      	movs	r0, #76	; 0x4c
 8003170:	fb00 f303 	mul.w	r3, r0, r3
 8003174:	440b      	add	r3, r1
 8003176:	330c      	adds	r3, #12
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3308      	adds	r3, #8
 8003188:	3301      	adds	r3, #1
 800318a:	4602      	mov	r2, r0
 800318c:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T1 = rStabConstants[i].aFilter[POS_FILTER].T;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	498b      	ldr	r1, [pc, #556]	; (80033c0 <flashFillStructure+0x2b4>)
 8003194:	204c      	movs	r0, #76	; 0x4c
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	440b      	add	r3, r1
 800319c:	3310      	adds	r3, #16
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3308      	adds	r3, #8
 80031ae:	3305      	adds	r3, #5
 80031b0:	4602      	mov	r2, r0
 80031b2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_T2 = rStabConstants[i].aFilter[SPEED_FILTER].T;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	4981      	ldr	r1, [pc, #516]	; (80033c0 <flashFillStructure+0x2b4>)
 80031ba:	204c      	movs	r0, #76	; 0x4c
 80031bc:	fb00 f303 	mul.w	r3, r0, r3
 80031c0:	440b      	add	r3, r1
 80031c2:	3318      	adds	r3, #24
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3310      	adds	r3, #16
 80031d4:	3301      	adds	r3, #1
 80031d6:	4602      	mov	r2, r0
 80031d8:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K1 = rStabConstants[i].aFilter[POS_FILTER].K;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	4978      	ldr	r1, [pc, #480]	; (80033c0 <flashFillStructure+0x2b4>)
 80031e0:	204c      	movs	r0, #76	; 0x4c
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	440b      	add	r3, r1
 80031e8:	3314      	adds	r3, #20
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3310      	adds	r3, #16
 80031fa:	3305      	adds	r3, #5
 80031fc:	4602      	mov	r2, r0
 80031fe:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_K2 = rStabConstants[i].aFilter[SPEED_FILTER].K;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	496e      	ldr	r1, [pc, #440]	; (80033c0 <flashFillStructure+0x2b4>)
 8003206:	204c      	movs	r0, #76	; 0x4c
 8003208:	fb00 f303 	mul.w	r3, r0, r3
 800320c:	440b      	add	r3, r1
 800320e:	331c      	adds	r3, #28
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3318      	adds	r3, #24
 8003220:	3301      	adds	r3, #1
 8003222:	4602      	mov	r2, r0
 8003224:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_pGain = rStabConstants[i].pid.pGain;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	4965      	ldr	r1, [pc, #404]	; (80033c0 <flashFillStructure+0x2b4>)
 800322c:	204c      	movs	r0, #76	; 0x4c
 800322e:	fb00 f303 	mul.w	r3, r0, r3
 8003232:	440b      	add	r3, r1
 8003234:	3328      	adds	r3, #40	; 0x28
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3318      	adds	r3, #24
 8003246:	3305      	adds	r3, #5
 8003248:	4602      	mov	r2, r0
 800324a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iGain = rStabConstants[i].pid.iGain;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	495b      	ldr	r1, [pc, #364]	; (80033c0 <flashFillStructure+0x2b4>)
 8003252:	204c      	movs	r0, #76	; 0x4c
 8003254:	fb00 f303 	mul.w	r3, r0, r3
 8003258:	440b      	add	r3, r1
 800325a:	332c      	adds	r3, #44	; 0x2c
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3320      	adds	r3, #32
 800326c:	3301      	adds	r3, #1
 800326e:	4602      	mov	r2, r0
 8003270:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMax = rStabConstants[i].pid.iMax;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	4952      	ldr	r1, [pc, #328]	; (80033c0 <flashFillStructure+0x2b4>)
 8003278:	204c      	movs	r0, #76	; 0x4c
 800327a:	fb00 f303 	mul.w	r3, r0, r3
 800327e:	440b      	add	r3, r1
 8003280:	3330      	adds	r3, #48	; 0x30
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3320      	adds	r3, #32
 8003292:	3305      	adds	r3, #5
 8003294:	4602      	mov	r2, r0
 8003296:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pid_iMin = rStabConstants[i].pid.iMin;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	4948      	ldr	r1, [pc, #288]	; (80033c0 <flashFillStructure+0x2b4>)
 800329e:	204c      	movs	r0, #76	; 0x4c
 80032a0:	fb00 f303 	mul.w	r3, r0, r3
 80032a4:	440b      	add	r3, r1
 80032a6:	3334      	adds	r3, #52	; 0x34
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3328      	adds	r3, #40	; 0x28
 80032b8:	3301      	adds	r3, #1
 80032ba:	4602      	mov	r2, r0
 80032bc:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMin = rStabConstants[i].pThrustersMin;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	493f      	ldr	r1, [pc, #252]	; (80033c0 <flashFillStructure+0x2b4>)
 80032c4:	204c      	movs	r0, #76	; 0x4c
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	440b      	add	r3, r1
 80032cc:	3338      	adds	r3, #56	; 0x38
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3328      	adds	r3, #40	; 0x28
 80032de:	3305      	adds	r3, #5
 80032e0:	4602      	mov	r2, r0
 80032e2:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].pThrustersMax = rStabConstants[i].pThrustersMax;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	4935      	ldr	r1, [pc, #212]	; (80033c0 <flashFillStructure+0x2b4>)
 80032ea:	204c      	movs	r0, #76	; 0x4c
 80032ec:	fb00 f303 	mul.w	r3, r0, r3
 80032f0:	440b      	add	r3, r1
 80032f2:	333c      	adds	r3, #60	; 0x3c
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3330      	adds	r3, #48	; 0x30
 8003304:	3301      	adds	r3, #1
 8003306:	4602      	mov	r2, r0
 8003308:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_T = rStabConstants[i].aFilter[THRUSTERS_FILTER].T;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	492c      	ldr	r1, [pc, #176]	; (80033c0 <flashFillStructure+0x2b4>)
 8003310:	204c      	movs	r0, #76	; 0x4c
 8003312:	fb00 f303 	mul.w	r3, r0, r3
 8003316:	440b      	add	r3, r1
 8003318:	3320      	adds	r3, #32
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3330      	adds	r3, #48	; 0x30
 800332a:	3305      	adds	r3, #5
 800332c:	4602      	mov	r2, r0
 800332e:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].aFilter_thrusters_K = rStabConstants[i].aFilter[THRUSTERS_FILTER].K;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	4922      	ldr	r1, [pc, #136]	; (80033c0 <flashFillStructure+0x2b4>)
 8003336:	204c      	movs	r0, #76	; 0x4c
 8003338:	fb00 f303 	mul.w	r3, r0, r3
 800333c:	440b      	add	r3, r1
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3338      	adds	r3, #56	; 0x38
 8003350:	3301      	adds	r3, #1
 8003352:	4602      	mov	r2, r0
 8003354:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMax = rStabConstants[i].sOutSummatorMax;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	4919      	ldr	r1, [pc, #100]	; (80033c0 <flashFillStructure+0x2b4>)
 800335c:	204c      	movs	r0, #76	; 0x4c
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	440b      	add	r3, r1
 8003364:	3344      	adds	r3, #68	; 0x44
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	3338      	adds	r3, #56	; 0x38
 8003376:	3305      	adds	r3, #5
 8003378:	4602      	mov	r2, r0
 800337a:	601a      	str	r2, [r3, #0]
		config->stabConstants[i].sOutSummatorMin = rStabConstants[i].sOutSummatorMin;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	490f      	ldr	r1, [pc, #60]	; (80033c0 <flashFillStructure+0x2b4>)
 8003382:	204c      	movs	r0, #76	; 0x4c
 8003384:	fb00 f303 	mul.w	r3, r0, r3
 8003388:	440b      	add	r3, r1
 800338a:	3348      	adds	r3, #72	; 0x48
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3340      	adds	r3, #64	; 0x40
 800339c:	3301      	adds	r3, #1
 800339e:	4602      	mov	r2, r0
 80033a0:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	3301      	adds	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	f67f aeb8 	bls.w	8003120 <flashFillStructure+0x14>
//		config->thrusters[i].kBackward = rThrusters[i].kBackward;
//		config->thrusters[i].sForward = rThrusters[i].sForward;
//		config->thrusters[i].sBackward = rThrusters[i].sBackward;
//		config->thrusters[i].inverse = rThrusters[i].inverse;
//	}
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20001e9c 	.word	0x20001e9c

080033c4 <flashReadStructure>:

void flashReadStructure(struct flashConfiguration_s *config)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e132      	b.n	8003638 <flashReadStructure+0x274>
		rStabConstants[i].pJoyUnitCast = config->stabConstants[i].pJoyUnitCast;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	7bf9      	ldrb	r1, [r7, #15]
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4403      	add	r3, r0
 80033e2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80033e6:	489f      	ldr	r0, [pc, #636]	; (8003664 <flashReadStructure+0x2a0>)
 80033e8:	224c      	movs	r2, #76	; 0x4c
 80033ea:	fb01 f202 	mul.w	r2, r1, r2
 80033ee:	4402      	add	r2, r0
 80033f0:	3204      	adds	r2, #4
 80033f2:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pSpeedDyn = config->stabConstants[i].pSpeedDyn;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	7bf9      	ldrb	r1, [r7, #15]
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4403      	add	r3, r0
 8003404:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003408:	4896      	ldr	r0, [pc, #600]	; (8003664 <flashReadStructure+0x2a0>)
 800340a:	224c      	movs	r2, #76	; 0x4c
 800340c:	fb01 f202 	mul.w	r2, r1, r2
 8003410:	4402      	add	r2, r0
 8003412:	3208      	adds	r2, #8
 8003414:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pErrGain = config->stabConstants[i].pErrGain;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	7bf9      	ldrb	r1, [r7, #15]
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4403      	add	r3, r0
 8003426:	3308      	adds	r3, #8
 8003428:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800342c:	488d      	ldr	r0, [pc, #564]	; (8003664 <flashReadStructure+0x2a0>)
 800342e:	224c      	movs	r2, #76	; 0x4c
 8003430:	fb01 f202 	mul.w	r2, r1, r2
 8003434:	4402      	add	r2, r0
 8003436:	320c      	adds	r2, #12
 8003438:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].T = config->stabConstants[i].aFilter_T1;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	7bf9      	ldrb	r1, [r7, #15]
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4403      	add	r3, r0
 800344a:	3308      	adds	r3, #8
 800344c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003450:	4884      	ldr	r0, [pc, #528]	; (8003664 <flashReadStructure+0x2a0>)
 8003452:	224c      	movs	r2, #76	; 0x4c
 8003454:	fb01 f202 	mul.w	r2, r1, r2
 8003458:	4402      	add	r2, r0
 800345a:	3210      	adds	r2, #16
 800345c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].T = config->stabConstants[i].aFilter_T2;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	7bf9      	ldrb	r1, [r7, #15]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	3310      	adds	r3, #16
 8003470:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003474:	487b      	ldr	r0, [pc, #492]	; (8003664 <flashReadStructure+0x2a0>)
 8003476:	224c      	movs	r2, #76	; 0x4c
 8003478:	fb01 f202 	mul.w	r2, r1, r2
 800347c:	4402      	add	r2, r0
 800347e:	3218      	adds	r2, #24
 8003480:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[POS_FILTER].K = config->stabConstants[i].aFilter_K1;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	7bf9      	ldrb	r1, [r7, #15]
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4403      	add	r3, r0
 8003492:	3310      	adds	r3, #16
 8003494:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003498:	4872      	ldr	r0, [pc, #456]	; (8003664 <flashReadStructure+0x2a0>)
 800349a:	224c      	movs	r2, #76	; 0x4c
 800349c:	fb01 f202 	mul.w	r2, r1, r2
 80034a0:	4402      	add	r2, r0
 80034a2:	3214      	adds	r2, #20
 80034a4:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[SPEED_FILTER].K = config->stabConstants[i].aFilter_K2;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	7bf9      	ldrb	r1, [r7, #15]
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4403      	add	r3, r0
 80034b6:	3318      	adds	r3, #24
 80034b8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80034bc:	4869      	ldr	r0, [pc, #420]	; (8003664 <flashReadStructure+0x2a0>)
 80034be:	224c      	movs	r2, #76	; 0x4c
 80034c0:	fb01 f202 	mul.w	r2, r1, r2
 80034c4:	4402      	add	r2, r0
 80034c6:	321c      	adds	r2, #28
 80034c8:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.pGain = config->stabConstants[i].pid_pGain;
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	7bf9      	ldrb	r1, [r7, #15]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	3318      	adds	r3, #24
 80034dc:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80034e0:	4860      	ldr	r0, [pc, #384]	; (8003664 <flashReadStructure+0x2a0>)
 80034e2:	224c      	movs	r2, #76	; 0x4c
 80034e4:	fb01 f202 	mul.w	r2, r1, r2
 80034e8:	4402      	add	r2, r0
 80034ea:	3228      	adds	r2, #40	; 0x28
 80034ec:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iGain = config->stabConstants[i].pid_iGain;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	7bf9      	ldrb	r1, [r7, #15]
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4403      	add	r3, r0
 80034fe:	3320      	adds	r3, #32
 8003500:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003504:	4857      	ldr	r0, [pc, #348]	; (8003664 <flashReadStructure+0x2a0>)
 8003506:	224c      	movs	r2, #76	; 0x4c
 8003508:	fb01 f202 	mul.w	r2, r1, r2
 800350c:	4402      	add	r2, r0
 800350e:	322c      	adds	r2, #44	; 0x2c
 8003510:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMax = config->stabConstants[i].pid_iMax;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	7bf9      	ldrb	r1, [r7, #15]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4403      	add	r3, r0
 8003522:	3320      	adds	r3, #32
 8003524:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003528:	484e      	ldr	r0, [pc, #312]	; (8003664 <flashReadStructure+0x2a0>)
 800352a:	224c      	movs	r2, #76	; 0x4c
 800352c:	fb01 f202 	mul.w	r2, r1, r2
 8003530:	4402      	add	r2, r0
 8003532:	3230      	adds	r2, #48	; 0x30
 8003534:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pid.iMin = config->stabConstants[i].pid_iMin;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	7bf9      	ldrb	r1, [r7, #15]
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4403      	add	r3, r0
 8003546:	3328      	adds	r3, #40	; 0x28
 8003548:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800354c:	4845      	ldr	r0, [pc, #276]	; (8003664 <flashReadStructure+0x2a0>)
 800354e:	224c      	movs	r2, #76	; 0x4c
 8003550:	fb01 f202 	mul.w	r2, r1, r2
 8003554:	4402      	add	r2, r0
 8003556:	3234      	adds	r2, #52	; 0x34
 8003558:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMin = config->stabConstants[i].pThrustersMin;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	7bf9      	ldrb	r1, [r7, #15]
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4403      	add	r3, r0
 800356a:	3328      	adds	r3, #40	; 0x28
 800356c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003570:	483c      	ldr	r0, [pc, #240]	; (8003664 <flashReadStructure+0x2a0>)
 8003572:	224c      	movs	r2, #76	; 0x4c
 8003574:	fb01 f202 	mul.w	r2, r1, r2
 8003578:	4402      	add	r2, r0
 800357a:	3238      	adds	r2, #56	; 0x38
 800357c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].pThrustersMax = config->stabConstants[i].pThrustersMax;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	7bf9      	ldrb	r1, [r7, #15]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4403      	add	r3, r0
 800358e:	3330      	adds	r3, #48	; 0x30
 8003590:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003594:	4833      	ldr	r0, [pc, #204]	; (8003664 <flashReadStructure+0x2a0>)
 8003596:	224c      	movs	r2, #76	; 0x4c
 8003598:	fb01 f202 	mul.w	r2, r1, r2
 800359c:	4402      	add	r2, r0
 800359e:	323c      	adds	r2, #60	; 0x3c
 80035a0:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].T = config->stabConstants[i].aFilter_thrusters_T;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	7bf9      	ldrb	r1, [r7, #15]
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4403      	add	r3, r0
 80035b2:	3330      	adds	r3, #48	; 0x30
 80035b4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80035b8:	482a      	ldr	r0, [pc, #168]	; (8003664 <flashReadStructure+0x2a0>)
 80035ba:	224c      	movs	r2, #76	; 0x4c
 80035bc:	fb01 f202 	mul.w	r2, r1, r2
 80035c0:	4402      	add	r2, r0
 80035c2:	3220      	adds	r2, #32
 80035c4:	6013      	str	r3, [r2, #0]
		rStabConstants[i].aFilter[THRUSTERS_FILTER].K = config->stabConstants[i].aFilter_thrusters_K;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	7bf9      	ldrb	r1, [r7, #15]
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4403      	add	r3, r0
 80035d6:	3338      	adds	r3, #56	; 0x38
 80035d8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80035dc:	4821      	ldr	r0, [pc, #132]	; (8003664 <flashReadStructure+0x2a0>)
 80035de:	224c      	movs	r2, #76	; 0x4c
 80035e0:	fb01 f202 	mul.w	r2, r1, r2
 80035e4:	4402      	add	r2, r0
 80035e6:	3224      	adds	r2, #36	; 0x24
 80035e8:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMax = config->stabConstants[i].sOutSummatorMax;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	7bf9      	ldrb	r1, [r7, #15]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4403      	add	r3, r0
 80035fa:	3338      	adds	r3, #56	; 0x38
 80035fc:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003600:	4818      	ldr	r0, [pc, #96]	; (8003664 <flashReadStructure+0x2a0>)
 8003602:	224c      	movs	r2, #76	; 0x4c
 8003604:	fb01 f202 	mul.w	r2, r1, r2
 8003608:	4402      	add	r2, r0
 800360a:	3244      	adds	r2, #68	; 0x44
 800360c:	6013      	str	r3, [r2, #0]
		rStabConstants[i].sOutSummatorMin = config->stabConstants[i].sOutSummatorMin;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	7bf9      	ldrb	r1, [r7, #15]
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4403      	add	r3, r0
 800361e:	3340      	adds	r3, #64	; 0x40
 8003620:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003624:	480f      	ldr	r0, [pc, #60]	; (8003664 <flashReadStructure+0x2a0>)
 8003626:	224c      	movs	r2, #76	; 0x4c
 8003628:	fb01 f202 	mul.w	r2, r1, r2
 800362c:	4402      	add	r2, r0
 800362e:	3248      	adds	r2, #72	; 0x48
 8003630:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	3301      	adds	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b05      	cmp	r3, #5
 800363c:	f67f aec9 	bls.w	80033d2 <flashReadStructure+0xe>
//		rThrusters[i].sForward = config->thrusters[i].sForward;
//		rThrusters[i].sBackward = config->thrusters[i].sBackward;
//		rThrusters[i].inverse = config->thrusters[i].inverse;
//	}

	if(config->writeFlag == 0xAA) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2baa      	cmp	r3, #170	; 0xaa
 8003646:	d103      	bne.n	8003650 <flashReadStructure+0x28c>
		rState.flash = true;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <flashReadStructure+0x2a4>)
 800364a:	2201      	movs	r2, #1
 800364c:	709a      	strb	r2, [r3, #2]
	}
	else {
		rState.flash = false;
	}
}
 800364e:	e002      	b.n	8003656 <flashReadStructure+0x292>
		rState.flash = false;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <flashReadStructure+0x2a4>)
 8003652:	2200      	movs	r2, #0
 8003654:	709a      	strb	r2, [r3, #2]
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20001e9c 	.word	0x20001e9c
 8003668:	20001d2c 	.word	0x20001d2c

0800366c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <vApplicationGetIdleTaskMemory+0x2c>)
 800367c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a06      	ldr	r2, [pc, #24]	; (800369c <vApplicationGetIdleTaskMemory+0x30>)
 8003682:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	200015cc 	.word	0x200015cc
 800369c:	2000167c 	.word	0x2000167c

080036a0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a07      	ldr	r2, [pc, #28]	; (80036cc <vApplicationGetTimerTaskMemory+0x2c>)
 80036b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <vApplicationGetTimerTaskMemory+0x30>)
 80036b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036be:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	2000187c 	.word	0x2000187c
 80036d0:	2000192c 	.word	0x2000192c

080036d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80036d4:	b5b0      	push	{r4, r5, r7, lr}
 80036d6:	b0bc      	sub	sp, #240	; 0xf0
 80036d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    uartBusesInit();
 80036da:	f7fe fb57 	bl	8001d8c <uartBusesInit>
    i2cBusesInit();
 80036de:	f7fe fc53 	bl	8001f88 <i2cBusesInit>
    variableInit();
 80036e2:	f7fe faa9 	bl	8001c38 <variableInit>
    stabilizationInit();
 80036e6:	f000 feeb 	bl	80044c0 <stabilizationInit>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutData */
  osMutexStaticDef(mutData, &mutDataControlBlock);
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036f0:	4b76      	ldr	r3, [pc, #472]	; (80038cc <MX_FREERTOS_Init+0x1f8>)
 80036f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  mutDataHandle = osMutexCreate(osMutex(mutData));
 80036f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f009 fd26 	bl	800d14c <osMutexCreate>
 8003700:	4603      	mov	r3, r0
 8003702:	4a73      	ldr	r2, [pc, #460]	; (80038d0 <MX_FREERTOS_Init+0x1fc>)
 8003704:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of tUartTimer */
  osTimerDef(tUartTimer, func_tUartTimer);
 8003706:	4b73      	ldr	r3, [pc, #460]	; (80038d4 <MX_FREERTOS_Init+0x200>)
 8003708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  tUartTimerHandle = osTimerCreate(osTimer(tUartTimer), osTimerOnce, NULL);
 8003712:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f009 fce2 	bl	800d0e4 <osTimerCreate>
 8003720:	4603      	mov	r3, r0
 8003722:	4a6d      	ldr	r2, [pc, #436]	; (80038d8 <MX_FREERTOS_Init+0x204>)
 8003724:	6013      	str	r3, [r2, #0]

  /* definition and creation of tTechCommTimer */
  osTimerDef(tTechCommTimer, tTechCommTimer_callback);
 8003726:	4b6d      	ldr	r3, [pc, #436]	; (80038dc <MX_FREERTOS_Init+0x208>)
 8003728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  tTechCommTimerHandle = osTimerCreate(osTimer(tTechCommTimer), osTimerOnce, NULL);
 8003732:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f009 fcd2 	bl	800d0e4 <osTimerCreate>
 8003740:	4603      	mov	r3, r0
 8003742:	4a67      	ldr	r2, [pc, #412]	; (80038e0 <MX_FREERTOS_Init+0x20c>)
 8003744:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSilence */
  osTimerDef(tSilence, tSilence_func);
 8003746:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <MX_FREERTOS_Init+0x210>)
 8003748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  tSilenceHandle = osTimerCreate(osTimer(tSilence), osTimerOnce, NULL);
 8003752:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f009 fcc2 	bl	800d0e4 <osTimerCreate>
 8003760:	4603      	mov	r3, r0
 8003762:	4a61      	ldr	r2, [pc, #388]	; (80038e8 <MX_FREERTOS_Init+0x214>)
 8003764:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  SilenceTimer = xTimerCreate("silence", DELAY_SILENCE/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) tSilence_func);
 8003766:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <MX_FREERTOS_Init+0x210>)
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003772:	485e      	ldr	r0, [pc, #376]	; (80038ec <MX_FREERTOS_Init+0x218>)
 8003774:	f00b fdb0 	bl	800f2d8 <xTimerCreate>
 8003778:	4603      	mov	r3, r0
 800377a:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <MX_FREERTOS_Init+0x21c>)
 800377c:	6013      	str	r3, [r2, #0]
  UARTTimer = xTimerCreate("timer", DELAY_TIMER_TASK/portTICK_RATE_MS, pdFALSE, 0, (TimerCallbackFunction_t) func_tUartTimer);
 800377e:	4b55      	ldr	r3, [pc, #340]	; (80038d4 <MX_FREERTOS_Init+0x200>)
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	2200      	movs	r2, #0
 8003786:	211e      	movs	r1, #30
 8003788:	485a      	ldr	r0, [pc, #360]	; (80038f4 <MX_FREERTOS_Init+0x220>)
 800378a:	f00b fda5 	bl	800f2d8 <xTimerCreate>
 800378e:	4603      	mov	r3, r0
 8003790:	4a59      	ldr	r2, [pc, #356]	; (80038f8 <MX_FREERTOS_Init+0x224>)
 8003792:	6013      	str	r3, [r2, #0]

  xTimerStart(SilenceTimer, 10);
 8003794:	4b56      	ldr	r3, [pc, #344]	; (80038f0 <MX_FREERTOS_Init+0x21c>)
 8003796:	681c      	ldr	r4, [r3, #0]
 8003798:	f00a ffba 	bl	800e710 <xTaskGetTickCount>
 800379c:	4602      	mov	r2, r0
 800379e:	230a      	movs	r3, #10
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	2101      	movs	r1, #1
 80037a6:	4620      	mov	r0, r4
 80037a8:	f00b fe26 	bl	800f3f8 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tLedBlinkingTask */
  osThreadStaticDef(tLedBlinkingTask, func_tLedBlinkingTask, osPriorityLow, 0, 128, tLedBlinkingTaskBuffer, &tLedBlinkingTaskControlBlock);
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <MX_FREERTOS_Init+0x228>)
 80037ae:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80037b2:	461d      	mov	r5, r3
 80037b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tLedBlinkingTaskHandle = osThreadCreate(osThread(tLedBlinkingTask), NULL);
 80037c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f009 fc2c 	bl	800d024 <osThreadCreate>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a4c      	ldr	r2, [pc, #304]	; (8003900 <MX_FREERTOS_Init+0x22c>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of tVmaCommTask */
  osThreadStaticDef(tVmaCommTask, func_tVmaCommTask, osPriorityNormal, 0, 128, tVmaCommTaskBuffer, &tVmaCommTaskControlBlock);
 80037d2:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <MX_FREERTOS_Init+0x230>)
 80037d4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80037d8:	461d      	mov	r5, r3
 80037da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tVmaCommTaskHandle = osThreadCreate(osThread(tVmaCommTask), NULL);
 80037e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f009 fc19 	bl	800d024 <osThreadCreate>
 80037f2:	4603      	mov	r3, r0
 80037f4:	4a44      	ldr	r2, [pc, #272]	; (8003908 <MX_FREERTOS_Init+0x234>)
 80037f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of tImuCommTask */
  osThreadStaticDef(tImuCommTask, func_tImuCommTask, osPriorityNormal, 0, 128, tImuCommTaskBuffer, &tImuCommTaskControlBlock);
 80037f8:	4b44      	ldr	r3, [pc, #272]	; (800390c <MX_FREERTOS_Init+0x238>)
 80037fa:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80037fe:	461d      	mov	r5, r3
 8003800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tImuCommTaskHandle = osThreadCreate(osThread(tImuCommTask), NULL);
 800380c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f009 fc06 	bl	800d024 <osThreadCreate>
 8003818:	4603      	mov	r3, r0
 800381a:	4a3d      	ldr	r2, [pc, #244]	; (8003910 <MX_FREERTOS_Init+0x23c>)
 800381c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tStabilizationTask */
  osThreadStaticDef(tStabilizationTask, func_tStabilizationTask, osPriorityIdle, 0, 128, tStabilizationTaskBuffer, &tStabilizationTaskControlBlock);
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <MX_FREERTOS_Init+0x240>)
 8003820:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003824:	461d      	mov	r5, r3
 8003826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800382a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800382e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tStabilizationTaskHandle = osThreadCreate(osThread(tStabilizationTask), NULL);
 8003832:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f009 fbf3 	bl	800d024 <osThreadCreate>
 800383e:	4603      	mov	r3, r0
 8003840:	4a35      	ldr	r2, [pc, #212]	; (8003918 <MX_FREERTOS_Init+0x244>)
 8003842:	6013      	str	r3, [r2, #0]

  /* definition and creation of tDevCommTask */
  osThreadStaticDef(tDevCommTask, func_tDevCommTask, osPriorityIdle, 0, 128, tDevCommTaskBuffer, &tDevCommTaskControlBlock);
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <MX_FREERTOS_Init+0x248>)
 8003846:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800384a:	461d      	mov	r5, r3
 800384c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800384e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tDevCommTaskHandle = osThreadCreate(osThread(tDevCommTask), NULL);
 8003858:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f009 fbe0 	bl	800d024 <osThreadCreate>
 8003864:	4603      	mov	r3, r0
 8003866:	4a2e      	ldr	r2, [pc, #184]	; (8003920 <MX_FREERTOS_Init+0x24c>)
 8003868:	6013      	str	r3, [r2, #0]

  /* definition and creation of tSensCommTask */
  osThreadStaticDef(tSensCommTask, func_tSensCommTask, osPriorityNormal, 0, 128, tSensCommTaskBuffer, &tSensCommTaskControlBlock);
 800386a:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <MX_FREERTOS_Init+0x250>)
 800386c:	f107 0420 	add.w	r4, r7, #32
 8003870:	461d      	mov	r5, r3
 8003872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003876:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800387a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tSensCommTaskHandle = osThreadCreate(osThread(tSensCommTask), NULL);
 800387e:	f107 0320 	add.w	r3, r7, #32
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f009 fbcd 	bl	800d024 <osThreadCreate>
 800388a:	4603      	mov	r3, r0
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <MX_FREERTOS_Init+0x254>)
 800388e:	6013      	str	r3, [r2, #0]

  /* definition and creation of tPcCommTask */
  osThreadStaticDef(tPcCommTask, func_tPcCommTask, osPriorityHigh, 0, 128, tPcCommTaskBuffer, &tPcCommTaskControlBlock);
 8003890:	4b26      	ldr	r3, [pc, #152]	; (800392c <MX_FREERTOS_Init+0x258>)
 8003892:	1d3c      	adds	r4, r7, #4
 8003894:	461d      	mov	r5, r3
 8003896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800389a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800389e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tPcCommTaskHandle = osThreadCreate(osThread(tPcCommTask), NULL);
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f009 fbbc 	bl	800d024 <osThreadCreate>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a20      	ldr	r2, [pc, #128]	; (8003930 <MX_FREERTOS_Init+0x25c>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <MX_FREERTOS_Init+0x260>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <MX_FREERTOS_Init+0x260>)
 80038b8:	6811      	ldr	r1, [r2, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f007 fc73 	bl	800b1a8 <HAL_UART_Receive_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80038c2:	bf00      	nop
 80038c4:	37e8      	adds	r7, #232	; 0xe8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bdb0      	pop	{r4, r5, r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20001584 	.word	0x20001584
 80038d0:	20001580 	.word	0x20001580
 80038d4:	08003e01 	.word	0x08003e01
 80038d8:	20001574 	.word	0x20001574
 80038dc:	08003f0d 	.word	0x08003f0d
 80038e0:	20001578 	.word	0x20001578
 80038e4:	08003f21 	.word	0x08003f21
 80038e8:	2000157c 	.word	0x2000157c
 80038ec:	08010ac8 	.word	0x08010ac8
 80038f0:	20000284 	.word	0x20000284
 80038f4:	08010ad0 	.word	0x08010ad0
 80038f8:	20000280 	.word	0x20000280
 80038fc:	08010aec 	.word	0x08010aec
 8003900:	20000288 	.word	0x20000288
 8003904:	08010b18 	.word	0x08010b18
 8003908:	2000053c 	.word	0x2000053c
 800390c:	08010b44 	.word	0x08010b44
 8003910:	200007f0 	.word	0x200007f0
 8003914:	08010b74 	.word	0x08010b74
 8003918:	20000aa4 	.word	0x20000aa4
 800391c:	08010ba0 	.word	0x08010ba0
 8003920:	20000d58 	.word	0x20000d58
 8003924:	08010bcc 	.word	0x08010bcc
 8003928:	2000100c 	.word	0x2000100c
 800392c:	08010bf4 	.word	0x08010bf4
 8003930:	200012c0 	.word	0x200012c0
 8003934:	2000018c 	.word	0x2000018c

08003938 <func_tLedBlinkingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func_tLedBlinkingTask */
void func_tLedBlinkingTask(void const * argument)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tLedBlinkingTask */
    uint32_t sysTime = osKernelSysTick();
 8003940:	f009 fb60 	bl	800d004 <osKernelSysTick>
 8003944:	4603      	mov	r3, r0
 8003946:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  toggle_counter++;
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <func_tLedBlinkingTask+0x60>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <func_tLedBlinkingTask+0x60>)
 8003950:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8003952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003956:	4811      	ldr	r0, [pc, #68]	; (800399c <func_tLedBlinkingTask+0x64>)
 8003958:	f003 fa66 	bl	8006e28 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	2164      	movs	r1, #100	; 0x64
 8003962:	4618      	mov	r0, r3
 8003964:	f009 fc0a 	bl	800d17c <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8003968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800396c:	480b      	ldr	r0, [pc, #44]	; (800399c <func_tLedBlinkingTask+0x64>)
 800396e:	f003 fa5b 	bl	8006e28 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	2164      	movs	r1, #100	; 0x64
 8003978:	4618      	mov	r0, r3
 800397a:	f009 fbff 	bl	800d17c <osDelayUntil>
        HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 800397e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003982:	4806      	ldr	r0, [pc, #24]	; (800399c <func_tLedBlinkingTask+0x64>)
 8003984:	f003 fa50 	bl	8006e28 <HAL_GPIO_TogglePin>
        osDelayUntil(&sysTime, DELAY_LED_TASK);
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	2164      	movs	r1, #100	; 0x64
 800398e:	4618      	mov	r0, r3
 8003990:	f009 fbf4 	bl	800d17c <osDelayUntil>
	  toggle_counter++;
 8003994:	e7d8      	b.n	8003948 <func_tLedBlinkingTask+0x10>
 8003996:	bf00      	nop
 8003998:	2000027c 	.word	0x2000027c
 800399c:	48000400 	.word	0x48000400

080039a0 <func_tVmaCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tVmaCommTask */
void func_tVmaCommTask(void const * argument)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tVmaCommTask */
	uint32_t sysTime = osKernelSysTick();
 80039a8:	f009 fb2c 	bl	800d004 <osKernelSysTick>
 80039ac:	4603      	mov	r3, r0
 80039ae:	60bb      	str	r3, [r7, #8]
	uint8_t transaction = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RE_DE_GPIO_Port,RE_DE_Pin,GPIO_PIN_SET);
 80039b4:	2201      	movs	r2, #1
 80039b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039be:	f003 fa1b 	bl	8006df8 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <func_tVmaCommTask+0xdc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2114      	movs	r1, #20
 80039c8:	4618      	mov	r0, r3
 80039ca:	f00a f8a1 	bl	800db10 <xQueueSemaphoreTake>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10b      	bne.n	80039ec <func_tVmaCommTask+0x4c>
			fillThrustersRequest(ThrustersRequestBuffer, transaction);
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4829      	ldr	r0, [pc, #164]	; (8003a80 <func_tVmaCommTask+0xe0>)
 80039da:	f001 fdb9 	bl	8005550 <fillThrustersRequest>
			xSemaphoreGive(mutDataHandle);
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <func_tVmaCommTask+0xdc>)
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	f009 fe1c 	bl	800d624 <xQueueGenericSend>
		}

		uartBus[THRUSTERS_UART].txBuffer = ThrustersRequestBuffer;
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <func_tVmaCommTask+0xe4>)
 80039ee:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <func_tVmaCommTask+0xe0>)
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c
		uartBus[THRUSTERS_UART].txLength = THRUSTERS_REQUEST_LENGTH;
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <func_tVmaCommTask+0xe4>)
 80039f4:	220b      	movs	r2, #11
 80039f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

		uartBus[THRUSTERS_UART].rxBuffer = ThrustersResponseBuffer[transaction];
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <func_tVmaCommTask+0xe8>)
 8003a04:	4413      	add	r3, r2
 8003a06:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <func_tVmaCommTask+0xe4>)
 8003a08:	6393      	str	r3, [r2, #56]	; 0x38
		uartBus[THRUSTERS_UART].rxLength = THRUSTERS_RESPONSE_LENGTH;
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <func_tVmaCommTask+0xe4>)
 8003a0c:	2209      	movs	r2, #9
 8003a0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		transmitAndReceive(&uartBus[THRUSTERS_UART], false);
 8003a12:	2100      	movs	r1, #0
 8003a14:	481d      	ldr	r0, [pc, #116]	; (8003a8c <func_tVmaCommTask+0xec>)
 8003a16:	f7fe fb2f 	bl	8002078 <transmitAndReceive>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003a1a:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <func_tVmaCommTask+0xdc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2114      	movs	r1, #20
 8003a20:	4618      	mov	r0, r3
 8003a22:	f00a f875 	bl	800db10 <xQueueSemaphoreTake>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d111      	bne.n	8003a50 <func_tVmaCommTask+0xb0>
			fillThrustersResponse(ThrustersResponseBuffer[transaction], transaction);
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <func_tVmaCommTask+0xe8>)
 8003a36:	4413      	add	r3, r2
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fdc7 	bl	80055d0 <fillThrustersResponse>
			xSemaphoreGive(mutDataHandle);
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <func_tVmaCommTask+0xdc>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	f009 fdea 	bl	800d624 <xQueueGenericSend>
		}

		transaction = (transaction + 1) % THRUSTERS_NUMBER;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <func_tVmaCommTask+0xf0>)
 8003a56:	fb83 3102 	smull	r3, r1, r3, r2
 8003a5a:	17d3      	asrs	r3, r2, #31
 8003a5c:	1ac9      	subs	r1, r1, r3
 8003a5e:	460b      	mov	r3, r1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	440b      	add	r3, r1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	1ad1      	subs	r1, r2, r3
 8003a68:	460b      	mov	r3, r1
 8003a6a:	73fb      	strb	r3, [r7, #15]
		osDelayUntil(&sysTime, DELAY_THRUSTERS_TASK);
 8003a6c:	f107 0308 	add.w	r3, r7, #8
 8003a70:	2114      	movs	r1, #20
 8003a72:	4618      	mov	r0, r3
 8003a74:	f009 fb82 	bl	800d17c <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_THRUSTERS_TASK) == pdTRUE) {
 8003a78:	e7a3      	b.n	80039c2 <func_tVmaCommTask+0x22>
 8003a7a:	bf00      	nop
 8003a7c:	20001580 	.word	0x20001580
 8003a80:	2000234c 	.word	0x2000234c
 8003a84:	2000018c 	.word	0x2000018c
 8003a88:	20002358 	.word	0x20002358
 8003a8c:	200001c4 	.word	0x200001c4
 8003a90:	2aaaaaab 	.word	0x2aaaaaab

08003a94 <func_tImuCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tImuCommTask */
void func_tImuCommTask(void const * argument)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tImuCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003a9c:	f009 fab2 	bl	800d004 <osKernelSysTick>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	if(rSensors.startIMU) {
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <func_tImuCommTask+0xc8>)
 8003aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d020      	beq.n	8003af0 <func_tImuCommTask+0x5c>
			uartBus[IMU_UART].txBuffer = ImuStartRequestBuffer;
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003ab0:	4a2c      	ldr	r2, [pc, #176]	; (8003b64 <func_tImuCommTask+0xd0>)
 8003ab2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH_AC;
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003ab8:	2214      	movs	r2, #20
 8003aba:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4829      	ldr	r0, [pc, #164]	; (8003b68 <func_tImuCommTask+0xd4>)
 8003ac2:	f7fe fa6f 	bl	8001fa4 <transmitPackage>

			uartBus[IMU_UART].txBuffer = ImuRequestBuffer;
 8003ac6:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003ac8:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <func_tImuCommTask+0xd8>)
 8003aca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			uartBus[IMU_UART].txLength = IMU_REQUEST_LENGTH;
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003ad0:	221b      	movs	r2, #27
 8003ad2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	  		transmitPackage(&uartBus[IMU_UART], false);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4823      	ldr	r0, [pc, #140]	; (8003b68 <func_tImuCommTask+0xd4>)
 8003ada:	f7fe fa63 	bl	8001fa4 <transmitPackage>

	  		rSensors.pressure_null = rSensors.pressure;
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <func_tImuCommTask+0xc8>)
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <func_tImuCommTask+0xc8>)
 8003ae4:	6613      	str	r3, [r2, #96]	; 0x60
	  		rSensors.startIMU = false;
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <func_tImuCommTask+0xc8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003aee:	e02d      	b.n	8003b4c <func_tImuCommTask+0xb8>
	  	}
	  	else {

	  		uartBus[IMU_UART].rxBuffer = ImuResponseBuffer;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <func_tImuCommTask+0xdc>)
 8003af4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  		uartBus[IMU_UART].rxLength = IMU_RESPONSE_LENGTH;
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003afa:	221e      	movs	r2, #30
 8003afc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

	  		HAL_UART_Receive_IT(uartBus[IMU_UART].huart, uartBus[IMU_UART].rxBuffer, uartBus[IMU_UART].rxLength);
 8003b00:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003b02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003b08:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003b0c:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <func_tImuCommTask+0xcc>)
 8003b0e:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
 8003b12:	b292      	uxth	r2, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f007 fb47 	bl	800b1a8 <HAL_UART_Receive_IT>

	  		osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f009 fb2b 	bl	800d17c <osDelayUntil>

	  		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_IMU_TASK) == pdTRUE) {
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <func_tImuCommTask+0xe0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f009 ffef 	bl	800db10 <xQueueSemaphoreTake>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d109      	bne.n	8003b4c <func_tImuCommTask+0xb8>
	  			ImuReceive(ImuResponseBuffer);
 8003b38:	480d      	ldr	r0, [pc, #52]	; (8003b70 <func_tImuCommTask+0xdc>)
 8003b3a:	f7ff f98d 	bl	8002e58 <ImuReceive>
	  			xSemaphoreGive(mutDataHandle);
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <func_tImuCommTask+0xe0>)
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	2200      	movs	r2, #0
 8003b46:	2100      	movs	r1, #0
 8003b48:	f009 fd6c 	bl	800d624 <xQueueGenericSend>
	  		}

	  	}

	  	osDelayUntil(&sysTime, DELAY_IMU_TASK);
 8003b4c:	f107 030c 	add.w	r3, r7, #12
 8003b50:	2101      	movs	r1, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f009 fb12 	bl	800d17c <osDelayUntil>
	  	if(rSensors.startIMU) {
 8003b58:	e7a4      	b.n	8003aa4 <func_tImuCommTask+0x10>
 8003b5a:	bf00      	nop
 8003b5c:	20001dc8 	.word	0x20001dc8
 8003b60:	2000018c 	.word	0x2000018c
 8003b64:	20000024 	.word	0x20000024
 8003b68:	20000234 	.word	0x20000234
 8003b6c:	20000008 	.word	0x20000008
 8003b70:	2000232c 	.word	0x2000232c
 8003b74:	20001580 	.word	0x20001580

08003b78 <func_tStabilizationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tStabilizationTask */
void func_tStabilizationTask(void const * argument)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tStabilizationTask */
	uint32_t sysTime = osKernelSysTick();
 8003b80:	f009 fa40 	bl	800d004 <osKernelSysTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <func_tStabilizationTask+0x70>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	210a      	movs	r1, #10
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f009 ffbe 	bl	800db10 <xQueueSemaphoreTake>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d11e      	bne.n	8003bd8 <func_tStabilizationTask+0x60>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
 8003b9e:	e00f      	b.n	8003bc0 <func_tStabilizationTask+0x48>
				if (rStabConstants[i].enable) {
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <func_tStabilizationTask+0x74>)
 8003ba4:	214c      	movs	r1, #76	; 0x4c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <func_tStabilizationTask+0x42>
					stabilizationUpdate(i);
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f86f 	bl	8004c98 <stabilizationUpdate>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	d9ec      	bls.n	8003ba0 <func_tStabilizationTask+0x28>
				}
			}
			formThrustVectors();
 8003bc6:	f001 fd3f 	bl	8005648 <formThrustVectors>
			xSemaphoreGive(mutDataHandle);
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <func_tStabilizationTask+0x70>)
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f009 fd26 	bl	800d624 <xQueueGenericSend>
		}

		osDelayUntil(&sysTime, DELAY_STABILIZATION_TASK);
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	210a      	movs	r1, #10
 8003bde:	4618      	mov	r0, r3
 8003be0:	f009 facc 	bl	800d17c <osDelayUntil>
		if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_STABILIZATION_TASK) == pdTRUE) {
 8003be4:	e7d0      	b.n	8003b88 <func_tStabilizationTask+0x10>
 8003be6:	bf00      	nop
 8003be8:	20001580 	.word	0x20001580
 8003bec:	20001e9c 	.word	0x20001e9c

08003bf0 <func_tDevCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tDevCommTask */
void func_tDevCommTask(void const * argument)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tDevCommTask */
    uint32_t sysTime = osKernelSysTick();
 8003bf8:	f009 fa04 	bl	800d004 <osKernelSysTick>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60bb      	str	r3, [r7, #8]
    uint8_t transaction = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003c04:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <func_tDevCommTask+0xd8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f009 ff7f 	bl	800db10 <xQueueSemaphoreTake>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10b      	bne.n	8003c30 <func_tDevCommTask+0x40>
            DevicesRequestUpdate(DevicesRequestBuffer, transaction);
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	482b      	ldr	r0, [pc, #172]	; (8003ccc <func_tDevCommTask+0xdc>)
 8003c1e:	f7fe fbcd 	bl	80023bc <DevicesRequestUpdate>
            xSemaphoreGive(mutDataHandle);
 8003c22:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <func_tDevCommTask+0xd8>)
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	2300      	movs	r3, #0
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	f009 fcfa 	bl	800d624 <xQueueGenericSend>
        }

		uartBus[DEVICES_UART].txBuffer = DevicesRequestBuffer;
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <func_tDevCommTask+0xe0>)
 8003c32:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <func_tDevCommTask+0xdc>)
 8003c34:	675a      	str	r2, [r3, #116]	; 0x74
		uartBus[DEVICES_UART].txLength = DEVICES_REQUEST_LENGTH;
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <func_tDevCommTask+0xe0>)
 8003c38:	2207      	movs	r2, #7
 8003c3a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		uartBus[DEVICES_UART].rxBuffer = DevicesResponseBuffer[transaction];
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <func_tDevCommTask+0xe4>)
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a20      	ldr	r2, [pc, #128]	; (8003cd0 <func_tDevCommTask+0xe0>)
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
		uartBus[DEVICES_UART].rxLength = DEVICES_RESPONSE_LENGTH;
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <func_tDevCommTask+0xe0>)
 8003c52:	220a      	movs	r2, #10
 8003c54:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

		transmitAndReceive(&uartBus[DEVICES_UART], false);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	481f      	ldr	r0, [pc, #124]	; (8003cd8 <func_tDevCommTask+0xe8>)
 8003c5c:	f7fe fa0c 	bl	8002078 <transmitAndReceive>

        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <func_tDevCommTask+0xd8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f009 ff51 	bl	800db10 <xQueueSemaphoreTake>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d112      	bne.n	8003c9a <func_tDevCommTask+0xaa>
            DevicesResponseUpdate(DevicesResponseBuffer[transaction], transaction);
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <func_tDevCommTask+0xe4>)
 8003c80:	4413      	add	r3, r2
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fbd2 	bl	8002430 <DevicesResponseUpdate>
            xSemaphoreGive(mutDataHandle);
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <func_tDevCommTask+0xd8>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	2300      	movs	r3, #0
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	f009 fcc5 	bl	800d624 <xQueueGenericSend>
        }

        transaction = (transaction + 1) % DEVICES_NUMBER;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <func_tDevCommTask+0xec>)
 8003ca0:	fb83 3102 	smull	r3, r1, r3, r2
 8003ca4:	17d3      	asrs	r3, r2, #31
 8003ca6:	1ac9      	subs	r1, r1, r3
 8003ca8:	460b      	mov	r3, r1
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	440b      	add	r3, r1
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	1ad1      	subs	r1, r2, r3
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	73fb      	strb	r3, [r7, #15]
        osDelayUntil(&sysTime, DELAY_DEVICES_TASK);
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f009 fa5c 	bl	800d17c <osDelayUntil>
        if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_DEVICES_TASK) == pdTRUE) {
 8003cc4:	e79e      	b.n	8003c04 <func_tDevCommTask+0x14>
 8003cc6:	bf00      	nop
 8003cc8:	20001580 	.word	0x20001580
 8003ccc:	20002390 	.word	0x20002390
 8003cd0:	2000018c 	.word	0x2000018c
 8003cd4:	20002398 	.word	0x20002398
 8003cd8:	200001fc 	.word	0x200001fc
 8003cdc:	2aaaaaab 	.word	0x2aaaaaab

08003ce0 <func_tSensCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tSensCommTask */
void func_tSensCommTask(void const * argument)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tSensCommTask */
  uint32_t sysTime = osKernelSysTick();
 8003ce8:	f009 f98c 	bl	800d004 <osKernelSysTick>
 8003cec:	4603      	mov	r3, r0
 8003cee:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <func_tSensCommTask+0xec>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	210a      	movs	r1, #10
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f009 ff0a 	bl	800db10 <xQueueSemaphoreTake>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d151      	bne.n	8003da6 <func_tSensCommTask+0xc6>
//      MS5837_read(i2cBus[DEV_I2C].hi2c);
    	rSensors.pressure_raw = MS5837_02BA_get_actual_pressure();
 8003d02:	f7fd fa35 	bl	8001170 <MS5837_02BA_get_actual_pressure>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4a31      	ldr	r2, [pc, #196]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
    	float pressure = movingAverageIterate(&pressure_filter, rSensors.pressure_raw);
 8003d0c:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d18:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1c:	482d      	ldr	r0, [pc, #180]	; (8003dd4 <func_tSensCommTask+0xf4>)
 8003d1e:	f000 fb75 	bl	800440c <movingAverageIterate>
 8003d22:	ed87 0a03 	vstr	s0, [r7, #12]
    	rSensors.last_pressure = rSensors.pressure;
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d2c:	6653      	str	r3, [r2, #100]	; 0x64
		rSensors.pressure = pressure;
 8003d2e:	4a28      	ldr	r2, [pc, #160]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	65d3      	str	r3, [r2, #92]	; 0x5c
		if(rSensors.last_pressure == rSensors.pressure)
 8003d34:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d36:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d3c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003d40:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d108      	bne.n	8003d5c <func_tSensCommTask+0x7c>
			rSensors.pressure_watchdog_counter++;
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d4c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d56:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003d5a:	e003      	b.n	8003d64 <func_tSensCommTask+0x84>
		else
			rSensors.pressure_watchdog_counter = 0;
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
				(rSensors.pressure - rSensors.last_pressure)*1000/DELAY_SENSOR_TASK);
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d66:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d6c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d74:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003dd8 <func_tSensCommTask+0xf8>
 8003d78:	ee67 7a87 	vmul.f32	s15, s15, s14
		rSensors.velocity_pressure = movingAverageIterate(&velocity_pressure_filter,
 8003d7c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003d80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d84:	eeb0 0a47 	vmov.f32	s0, s14
 8003d88:	4814      	ldr	r0, [pc, #80]	; (8003ddc <func_tSensCommTask+0xfc>)
 8003d8a:	f000 fb3f 	bl	800440c <movingAverageIterate>
 8003d8e:	eef0 7a40 	vmov.f32	s15, s0
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003d94:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		xSemaphoreGive(mutDataHandle);
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <func_tSensCommTask+0xec>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	f009 fc3f 	bl	800d624 <xQueueGenericSend>
    }
    if(rSensors.pressure_watchdog_counter >= 250)
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003da8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003dac:	2bf9      	cmp	r3, #249	; 0xf9
 8003dae:	d905      	bls.n	8003dbc <func_tSensCommTask+0xdc>
    {
    	MS5837_02BA_reinit();
 8003db0:	f7fd f982 	bl	80010b8 <MS5837_02BA_reinit>
    	rSensors.pressure_watchdog_counter = 0;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <func_tSensCommTask+0xf0>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
    osDelayUntil(&sysTime, DELAY_SENSOR_TASK); // �?справленная задержка
 8003dbc:	f107 0308 	add.w	r3, r7, #8
 8003dc0:	210a      	movs	r1, #10
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f009 f9da 	bl	800d17c <osDelayUntil>
    if(xSemaphoreTake(mutDataHandle, (TickType_t) DELAY_SENSOR_TASK) == pdTRUE) {
 8003dc8:	e792      	b.n	8003cf0 <func_tSensCommTask+0x10>
 8003dca:	bf00      	nop
 8003dcc:	20001580 	.word	0x20001580
 8003dd0:	20001dc8 	.word	0x20001dc8
 8003dd4:	20002428 	.word	0x20002428
 8003dd8:	447a0000 	.word	0x447a0000
 8003ddc:	200024f8 	.word	0x200024f8

08003de0 <func_tPcCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func_tPcCommTask */
void func_tPcCommTask(void const * argument)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tPcCommTask */
	uint32_t sysTime = osKernelSysTick();
 8003de8:	f009 f90c 	bl	800d004 <osKernelSysTick>
 8003dec:	4603      	mov	r3, r0
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osDelayUntil(&sysTime, DELAY_PC_TASK);
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	210a      	movs	r1, #10
 8003df6:	4618      	mov	r0, r3
 8003df8:	f009 f9c0 	bl	800d17c <osDelayUntil>
 8003dfc:	e7f8      	b.n	8003df0 <func_tPcCommTask+0x10>
	...

08003e00 <func_tUartTimer>:
  /* USER CODE END func_tPcCommTask */
}

/* func_tUartTimer function */
void func_tUartTimer(void const * argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func_tUartTimer */
	if (uartBus[SHORE_UART].packageReceived) {
 8003e08:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <func_tUartTimer+0x100>)
 8003e0a:	7a1b      	ldrb	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05a      	beq.n	8003ec6 <func_tUartTimer+0xc6>
		bool package = true;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <func_tUartTimer+0x104>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2105      	movs	r1, #5
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f009 fe78 	bl	800db10 <xQueueSemaphoreTake>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d140      	bne.n	8003ea8 <func_tUartTimer+0xa8>
			switch(uartBus[SHORE_UART].rxBuffer[0]) {
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <func_tUartTimer+0x100>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2baa      	cmp	r3, #170	; 0xaa
 8003e2e:	d023      	beq.n	8003e78 <func_tUartTimer+0x78>
 8003e30:	2baa      	cmp	r3, #170	; 0xaa
 8003e32:	dc30      	bgt.n	8003e96 <func_tUartTimer+0x96>
 8003e34:	2b55      	cmp	r3, #85	; 0x55
 8003e36:	d010      	beq.n	8003e5a <func_tUartTimer+0x5a>
 8003e38:	2ba5      	cmp	r3, #165	; 0xa5
 8003e3a:	d12c      	bne.n	8003e96 <func_tUartTimer+0x96>
				case SHORE_REQUEST_CODE:
					ShoreRequest(uartBus[SHORE_UART].rxBuffer);
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <func_tUartTimer+0x100>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fb5d 	bl	8002500 <ShoreRequest>
					ShoreResponse(uartBus[SHORE_UART].txBuffer);
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <func_tUartTimer+0x100>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fece 	bl	8002bec <ShoreResponse>
					uartBus[SHORE_UART].txLength = SHORE_RESPONSE_LENGTH;
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <func_tUartTimer+0x100>)
 8003e52:	2214      	movs	r2, #20
 8003e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e58:	e01f      	b.n	8003e9a <func_tUartTimer+0x9a>
				case REQUEST_CONFIG_CODE:
					ShoreConfigRequest(uartBus[SHORE_UART].rxBuffer);
 8003e5a:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <func_tUartTimer+0x100>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fccc 	bl	80027fc <ShoreConfigRequest>
					ShoreConfigResponse(uartBus[SHORE_UART].txBuffer);
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <func_tUartTimer+0x100>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fee5 	bl	8002c38 <ShoreConfigResponse>
					uartBus[SHORE_UART].txLength = SHORE_CONFIG_RESPONSE_LENGTH;
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <func_tUartTimer+0x100>)
 8003e70:	2263      	movs	r2, #99	; 0x63
 8003e72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e76:	e010      	b.n	8003e9a <func_tUartTimer+0x9a>
				case DIRECT_REQUEST_CODE:
					ShoreDirectRequest(uartBus[SHORE_UART].rxBuffer);
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <func_tUartTimer+0x100>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fdff 	bl	8002a80 <ShoreDirectRequest>
					ShoreDirectResponse(uartBus[SHORE_UART].txBuffer);
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <func_tUartTimer+0x100>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe ffcc 	bl	8002e24 <ShoreDirectResponse>
					uartBus[SHORE_UART].txLength = SHORE_DIRECT_RESPONSE_LENGTH;
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <func_tUartTimer+0x100>)
 8003e8e:	2206      	movs	r2, #6
 8003e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					break;
 8003e94:	e001      	b.n	8003e9a <func_tUartTimer+0x9a>
				default:
					package = false;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(mutDataHandle);
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <func_tUartTimer+0x104>)
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f009 fbbe 	bl	800d624 <xQueueGenericSend>
		}
		if(package) {
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d010      	beq.n	8003ed0 <func_tUartTimer+0xd0>
			HAL_UART_Transmit_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].txBuffer, uartBus[SHORE_UART].txLength);
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <func_tUartTimer+0x100>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <func_tUartTimer+0x100>)
 8003eb4:	6851      	ldr	r1, [r2, #4]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <func_tUartTimer+0x100>)
 8003eb8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f007 f914 	bl	800b0ec <HAL_UART_Transmit_IT>
 8003ec4:	e004      	b.n	8003ed0 <func_tUartTimer+0xd0>
		}
	}
	else {
		++uartBus[SHORE_UART].outdatedRxCounter;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <func_tUartTimer+0x100>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <func_tUartTimer+0x100>)
 8003ece:	6113      	str	r3, [r2, #16]
	}
	counterRx = 0;
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <func_tUartTimer+0x108>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	801a      	strh	r2, [r3, #0]
	uartBus[SHORE_UART].packageReceived = false;
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <func_tUartTimer+0x100>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	721a      	strb	r2, [r3, #8]
	HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <func_tUartTimer+0x100>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f007 fadd 	bl	800b4a0 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <func_tUartTimer+0x100>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <func_tUartTimer+0x100>)
 8003eec:	6811      	ldr	r1, [r2, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f007 f959 	bl	800b1a8 <HAL_UART_Receive_IT>
  /* USER CODE END func_tUartTimer */
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2000018c 	.word	0x2000018c
 8003f04:	20001580 	.word	0x20001580
 8003f08:	20000274 	.word	0x20000274

08003f0c <tTechCommTimer_callback>:

/* tTechCommTimer_callback function */
void tTechCommTimer_callback(void const * argument)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tTechCommTimer_callback */

  /* USER CODE END tTechCommTimer_callback */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <tSilence_func>:

/* tSilence_func function */
void tSilence_func(void const * argument)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tSilence_func */
	if(fromTickToMs(xTaskGetTickCount()) - uartBus[SHORE_UART].lastMessage > UART_SWITCH_DELAY && counterRx == 0) {
 8003f28:	f00a fbf2 	bl	800e710 <xTaskGetTickCount>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd f840 	bl	8000fb4 <fromTickToMs>
 8003f34:	eeb0 7a40 	vmov.f32	s14, s0
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <tSilence_func+0xb8>)
 8003f3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f42:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003fdc <tSilence_func+0xbc>
 8003f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4e:	dd33      	ble.n	8003fb8 <tSilence_func+0x98>
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <tSilence_func+0xc0>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d12f      	bne.n	8003fb8 <tSilence_func+0x98>
//			uartBus[SHORE_UART].huart = &huart5;
//		}
//		else if(uartBus[SHORE_UART].huart == &huart5) {
//			uartBus[SHORE_UART].huart = &huart1;
//		}
		HAL_UART_AbortReceive_IT(uartBus[SHORE_UART].huart);
 8003f58:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <tSilence_func+0xb8>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f007 fa9f 	bl	800b4a0 <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(uartBus[SHORE_UART].huart, uartBus[SHORE_UART].rxBuffer, 1);
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <tSilence_func+0xb8>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a1c      	ldr	r2, [pc, #112]	; (8003fd8 <tSilence_func+0xb8>)
 8003f68:	6811      	ldr	r1, [r2, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f007 f91b 	bl	800b1a8 <HAL_UART_Receive_IT>

		if(xSemaphoreTake(mutDataHandle, (TickType_t) WAITING_TIMER) == pdTRUE) {
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <tSilence_func+0xc4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2105      	movs	r1, #5
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f009 fdc9 	bl	800db10 <xQueueSemaphoreTake>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d119      	bne.n	8003fb8 <tSilence_func+0x98>
			resetThrusters();
 8003f84:	f001 faaa 	bl	80054dc <resetThrusters>
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e00a      	b.n	8003fa4 <tSilence_func+0x84>
				rStabConstants[i].enable = false;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <tSilence_func+0xc8>)
 8003f92:	214c      	movs	r1, #76	; 0x4c
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d9f1      	bls.n	8003f8e <tSilence_func+0x6e>
			}

			xSemaphoreGive(mutDataHandle);
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <tSilence_func+0xc4>)
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f009 fb36 	bl	800d624 <xQueueGenericSend>
//			}
		}
//	}
	//HAL_GPIO_WritePin(GPIOE, RES_PC_2_Pin, GPIO_PIN_SET); // ONOFF

	xTimerStart(SilenceTimer, 50);
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <tSilence_func+0xcc>)
 8003fba:	681c      	ldr	r4, [r3, #0]
 8003fbc:	f00a fba8 	bl	800e710 <xTaskGetTickCount>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	2332      	movs	r3, #50	; 0x32
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f00b fa14 	bl	800f3f8 <xTimerGenericCommand>
  /* USER CODE END tSilence_func */
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}
 8003fd8:	2000018c 	.word	0x2000018c
 8003fdc:	447a0000 	.word	0x447a0000
 8003fe0:	20000274 	.word	0x20000274
 8003fe4:	20001580 	.word	0x20001580
 8003fe8:	20001e9c 	.word	0x20001e9c
 8003fec:	20000284 	.word	0x20000284

08003ff0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004006:	4b40      	ldr	r3, [pc, #256]	; (8004108 <MX_GPIO_Init+0x118>)
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	4a3f      	ldr	r2, [pc, #252]	; (8004108 <MX_GPIO_Init+0x118>)
 800400c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004010:	6153      	str	r3, [r2, #20]
 8004012:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <MX_GPIO_Init+0x118>)
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <MX_GPIO_Init+0x118>)
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4a39      	ldr	r2, [pc, #228]	; (8004108 <MX_GPIO_Init+0x118>)
 8004024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004028:	6153      	str	r3, [r2, #20]
 800402a:	4b37      	ldr	r3, [pc, #220]	; (8004108 <MX_GPIO_Init+0x118>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004036:	4b34      	ldr	r3, [pc, #208]	; (8004108 <MX_GPIO_Init+0x118>)
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4a33      	ldr	r2, [pc, #204]	; (8004108 <MX_GPIO_Init+0x118>)
 800403c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004040:	6153      	str	r3, [r2, #20]
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <MX_GPIO_Init+0x118>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <MX_GPIO_Init+0x118>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <MX_GPIO_Init+0x118>)
 8004054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004058:	6153      	str	r3, [r2, #20]
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <MX_GPIO_Init+0x118>)
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <MX_GPIO_Init+0x118>)
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4a27      	ldr	r2, [pc, #156]	; (8004108 <MX_GPIO_Init+0x118>)
 800406c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004070:	6153      	str	r3, [r2, #20]
 8004072:	4b25      	ldr	r3, [pc, #148]	; (8004108 <MX_GPIO_Init+0x118>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 800407e:	2200      	movs	r2, #0
 8004080:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004084:	4821      	ldr	r0, [pc, #132]	; (800410c <MX_GPIO_Init+0x11c>)
 8004086:	f002 feb7 	bl	8006df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);
 800408a:	2200      	movs	r2, #0
 800408c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004090:	481f      	ldr	r0, [pc, #124]	; (8004110 <MX_GPIO_Init+0x120>)
 8004092:	f002 feb1 	bl	8006df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8004096:	2200      	movs	r2, #0
 8004098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800409c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040a0:	f002 feaa 	bl	8006df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin|led1_Pin;
 80040a4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80040a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	4813      	ldr	r0, [pc, #76]	; (800410c <MX_GPIO_Init+0x11c>)
 80040be:	f002 fc45 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART3_DE_Pin;
 80040c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c8:	2301      	movs	r3, #1
 80040ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART3_DE_GPIO_Port, &GPIO_InitStruct);
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4619      	mov	r1, r3
 80040da:	480d      	ldr	r0, [pc, #52]	; (8004110 <MX_GPIO_Init+0x120>)
 80040dc:	f002 fc36 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 80040e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e6:	2301      	movs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	4619      	mov	r1, r3
 80040f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fc:	f002 fc26 	bl	800694c <HAL_GPIO_Init>

}
 8004100:	bf00      	nop
 8004102:	3728      	adds	r7, #40	; 0x28
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	48000400 	.word	0x48000400
 8004110:	48000c00 	.word	0x48000c00

08004114 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <MX_I2C1_Init+0x74>)
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <MX_I2C1_Init+0x78>)
 800411c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <MX_I2C1_Init+0x74>)
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <MX_I2C1_Init+0x7c>)
 8004122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004124:	4b18      	ldr	r3, [pc, #96]	; (8004188 <MX_I2C1_Init+0x74>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <MX_I2C1_Init+0x74>)
 800412c:	2201      	movs	r2, #1
 800412e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <MX_I2C1_Init+0x74>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <MX_I2C1_Init+0x74>)
 8004138:	2200      	movs	r2, #0
 800413a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <MX_I2C1_Init+0x74>)
 800413e:	2200      	movs	r2, #0
 8004140:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <MX_I2C1_Init+0x74>)
 8004144:	2200      	movs	r2, #0
 8004146:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <MX_I2C1_Init+0x74>)
 800414a:	2200      	movs	r2, #0
 800414c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800414e:	480e      	ldr	r0, [pc, #56]	; (8004188 <MX_I2C1_Init+0x74>)
 8004150:	f002 fe84 	bl	8006e5c <HAL_I2C_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800415a:	f000 f929 	bl	80043b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800415e:	2100      	movs	r1, #0
 8004160:	4809      	ldr	r0, [pc, #36]	; (8004188 <MX_I2C1_Init+0x74>)
 8004162:	f004 ff4d 	bl	8009000 <HAL_I2CEx_ConfigAnalogFilter>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800416c:	f000 f920 	bl	80043b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004170:	2100      	movs	r1, #0
 8004172:	4805      	ldr	r0, [pc, #20]	; (8004188 <MX_I2C1_Init+0x74>)
 8004174:	f004 ff8f 	bl	8009096 <HAL_I2CEx_ConfigDigitalFilter>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800417e:	f000 f917 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200023d4 	.word	0x200023d4
 800418c:	40005400 	.word	0x40005400
 8004190:	2000090e 	.word	0x2000090e

08004194 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <HAL_I2C_MspInit+0x8c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d12f      	bne.n	8004216 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b6:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <HAL_I2C_MspInit+0x90>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <HAL_I2C_MspInit+0x90>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c0:	6153      	str	r3, [r2, #20]
 80041c2:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_I2C_MspInit+0x90>)
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041ce:	23c0      	movs	r3, #192	; 0xc0
 80041d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041d2:	2312      	movs	r3, #18
 80041d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041da:	2303      	movs	r3, #3
 80041dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041de:	2304      	movs	r3, #4
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	4619      	mov	r1, r3
 80041e8:	480f      	ldr	r0, [pc, #60]	; (8004228 <HAL_I2C_MspInit+0x94>)
 80041ea:	f002 fbaf 	bl	800694c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <HAL_I2C_MspInit+0x90>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <HAL_I2C_MspInit+0x90>)
 80041f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041f8:	61d3      	str	r3, [r2, #28]
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_I2C_MspInit+0x90>)
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004206:	2200      	movs	r2, #0
 8004208:	2105      	movs	r1, #5
 800420a:	201f      	movs	r0, #31
 800420c:	f001 ff56 	bl	80060bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004210:	201f      	movs	r0, #31
 8004212:	f001 ff6f 	bl	80060f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004216:	bf00      	nop
 8004218:	3728      	adds	r7, #40	; 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40005400 	.word	0x40005400
 8004224:	40021000 	.word	0x40021000
 8004228:	48000400 	.word	0x48000400

0800422c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <HAL_I2C_MspDeInit+0x3c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d110      	bne.n	8004260 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_I2C_MspDeInit+0x40>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_I2C_MspDeInit+0x40>)
 8004244:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004248:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	4808      	ldr	r0, [pc, #32]	; (8004270 <HAL_I2C_MspDeInit+0x44>)
 800424e:	f002 fcf7 	bl	8006c40 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	4806      	ldr	r0, [pc, #24]	; (8004270 <HAL_I2C_MspDeInit+0x44>)
 8004256:	f002 fcf3 	bl	8006c40 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800425a:	201f      	movs	r0, #31
 800425c:	f001 ff58 	bl	8006110 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40005400 	.word	0x40005400
 800426c:	40021000 	.word	0x40021000
 8004270:	48000400 	.word	0x48000400

08004274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004278:	f001 fdea 	bl	8005e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800427c:	f000 f828 	bl	80042d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004280:	f7ff feb6 	bl	8003ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004284:	f7fe feae 	bl	8002fe4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004288:	f001 fb7a 	bl	8005980 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800428c:	f7ff ff42 	bl	8004114 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004290:	f001 fba6 	bl	80059e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004294:	f001 fbd8 	bl	8005a48 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8004298:	f001 fb42 	bl	8005920 <MX_UART4_Init>
  MX_TIM7_Init();
 800429c:	f001 faea 	bl	8005874 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(30e3); //30 seconds delay to start PC
  MS5837_02BA_init(&hi2c1);
 80042a0:	4808      	ldr	r0, [pc, #32]	; (80042c4 <main+0x50>)
 80042a2:	f7fc feb3 	bl	800100c <MS5837_02BA_init>
  MS5837_02BA_reset_pressure();
 80042a6:	f7fd f8df 	bl	8001468 <MS5837_02BA_reset_pressure>

  movingAverageInit(&pressure_filter, 50);
 80042aa:	2132      	movs	r1, #50	; 0x32
 80042ac:	4806      	ldr	r0, [pc, #24]	; (80042c8 <main+0x54>)
 80042ae:	f000 f884 	bl	80043ba <movingAverageInit>
  movingAverageInit(&velocity_pressure_filter, 50);
 80042b2:	2132      	movs	r1, #50	; 0x32
 80042b4:	4805      	ldr	r0, [pc, #20]	; (80042cc <main+0x58>)
 80042b6:	f000 f880 	bl	80043ba <movingAverageInit>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80042ba:	f7ff fa0b 	bl	80036d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80042be:	f008 fe9a 	bl	800cff6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80042c2:	e7fe      	b.n	80042c2 <main+0x4e>
 80042c4:	200023d4 	.word	0x200023d4
 80042c8:	20002428 	.word	0x20002428
 80042cc:	200024f8 	.word	0x200024f8

080042d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b09e      	sub	sp, #120	; 0x78
 80042d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042da:	2228      	movs	r2, #40	; 0x28
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f00c f8ec 	bl	80104bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042f4:	463b      	mov	r3, r7
 80042f6:	223c      	movs	r2, #60	; 0x3c
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f00c f8de 	bl	80104bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004300:	2302      	movs	r3, #2
 8004302:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004304:	2301      	movs	r3, #1
 8004306:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004308:	2310      	movs	r3, #16
 800430a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800430c:	2302      	movs	r3, #2
 800430e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004310:	2300      	movs	r3, #0
 8004312:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004314:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8004318:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800431a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800431e:	4618      	mov	r0, r3
 8004320:	f004 ff06 	bl	8009130 <HAL_RCC_OscConfig>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800432a:	f000 f841 	bl	80043b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800432e:	230f      	movs	r3, #15
 8004330:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004332:	2302      	movs	r3, #2
 8004334:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004336:	2300      	movs	r3, #0
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800433a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004340:	2300      	movs	r3, #0
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f005 ff2e 	bl	800a1ac <HAL_RCC_ClockConfig>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004356:	f000 f82b 	bl	80043b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800435a:	232f      	movs	r3, #47	; 0x2f
 800435c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004372:	463b      	mov	r3, r7
 8004374:	4618      	mov	r0, r3
 8004376:	f006 f983 	bl	800a680 <HAL_RCCEx_PeriphCLKConfig>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004380:	f000 f816 	bl	80043b0 <Error_Handler>
  }
}
 8004384:	bf00      	nop
 8004386:	3778      	adds	r7, #120	; 0x78
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800439e:	f001 fd6d 	bl	8005e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00

080043b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043b4:	b672      	cpsid	i
}
 80043b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043b8:	e7fe      	b.n	80043b8 <Error_Handler+0x8>

080043ba <movingAverageInit>:
#include "moving_average.h"

void movingAverageInit(Moving_Average_filter* filter, uint8_t order)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	460b      	mov	r3, r1
 80043c4:	70fb      	strb	r3, [r7, #3]
	filter->order = order;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e009      	b.n	80043e8 <movingAverageInit+0x2e>
		filter->data[i] = 0;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i<MOVING_AVERAGE_MAX_ORDER; i++)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	3301      	adds	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b31      	cmp	r3, #49	; 0x31
 80043ec:	d9f2      	bls.n	80043d4 <movingAverageInit+0x1a>
	filter->current_element = 0;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	filter->average = 0;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <movingAverageIterate>:

float movingAverageIterate(Moving_Average_filter* filter, float value)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	ed87 0a00 	vstr	s0, [r7]
	int32_t last_value = filter->data[filter->current_element];
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800442c:	ee17 3a90 	vmov	r3, s15
 8004430:	60fb      	str	r3, [r7, #12]
	filter->data[filter->current_element] = value;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	601a      	str	r2, [r3, #0]
	filter->average = (filter->average * filter->order - last_value + value) / (float)filter->order;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	ee07 3a90 	vmov	s15, r3
 8004460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004464:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004468:	edd7 7a00 	vldr	s15, [r7]
 800446c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800447e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	filter->current_element = (filter->current_element+1)%filter->order;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800448e:	3301      	adds	r3, #1
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 8004496:	fb93 f1f2 	sdiv	r1, r3, r2
 800449a:	fb01 f202 	mul.w	r2, r1, r2
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	return filter->average;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80044ae:	ee07 3a90 	vmov	s15, r3
}
 80044b2:	eeb0 0a67 	vmov.f32	s0, s15
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <stabilizationInit>:
#include "FreeRTOSTick.h"
#include "math.h"
#include "robot.h"

void stabilizationInit()
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 80044c6:	2300      	movs	r3, #0
 80044c8:	71fb      	strb	r3, [r7, #7]
 80044ca:	e15d      	b.n	8004788 <stabilizationInit+0x2c8>
		rStabConstants[i].enable = false;
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	4abf      	ldr	r2, [pc, #764]	; (80047cc <stabilizationInit+0x30c>)
 80044d0:	214c      	movs	r1, #76	; 0x4c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]

		rStabState[i].speedIntegral = 0;
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	4abc      	ldr	r2, [pc, #752]	; (80047d0 <stabilizationInit+0x310>)
 80044e0:	2158      	movs	r1, #88	; 0x58
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	330c      	adds	r3, #12
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
		rStabState[i].posDerivative = 0;
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	4ab7      	ldr	r2, [pc, #732]	; (80047d0 <stabilizationInit+0x310>)
 80044f4:	2158      	movs	r1, #88	; 0x58
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	3310      	adds	r3, #16
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeed = 0;
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	4ab2      	ldr	r2, [pc, #712]	; (80047d0 <stabilizationInit+0x310>)
 8004508:	2158      	movs	r1, #88	; 0x58
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3314      	adds	r3, #20
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPos = 0;
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	4aad      	ldr	r2, [pc, #692]	; (80047d0 <stabilizationInit+0x310>)
 800451c:	2158      	movs	r1, #88	; 0x58
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3318      	adds	r3, #24
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

		rStabState[i].joyUnitCasted = 0;
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	4aa8      	ldr	r2, [pc, #672]	; (80047d0 <stabilizationInit+0x310>)
 8004530:	2158      	movs	r1, #88	; 0x58
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	331c      	adds	r3, #28
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
		rStabState[i].joy_iValue = 0;
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	4aa3      	ldr	r2, [pc, #652]	; (80047d0 <stabilizationInit+0x310>)
 8004544:	2158      	movs	r1, #88	; 0x58
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	3320      	adds	r3, #32
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
		rStabState[i].posError = 0;
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	4a9e      	ldr	r2, [pc, #632]	; (80047d0 <stabilizationInit+0x310>)
 8004558:	2158      	movs	r1, #88	; 0x58
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3324      	adds	r3, #36	; 0x24
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
		rStabState[i].speedError = 0;
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	4a99      	ldr	r2, [pc, #612]	; (80047d0 <stabilizationInit+0x310>)
 800456c:	2158      	movs	r1, #88	; 0x58
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3328      	adds	r3, #40	; 0x28
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
		rStabState[i].dynSummator = 0;
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	4a94      	ldr	r2, [pc, #592]	; (80047d0 <stabilizationInit+0x310>)
 8004580:	2158      	movs	r1, #88	; 0x58
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	332c      	adds	r3, #44	; 0x2c
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
		rStabState[i].pidValue = 0;
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	4a8f      	ldr	r2, [pc, #572]	; (80047d0 <stabilizationInit+0x310>)
 8004594:	2158      	movs	r1, #88	; 0x58
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3330      	adds	r3, #48	; 0x30
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
		rStabState[i].pid_iValue = 0;
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	4a8a      	ldr	r2, [pc, #552]	; (80047d0 <stabilizationInit+0x310>)
 80045a8:	2158      	movs	r1, #88	; 0x58
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	3334      	adds	r3, #52	; 0x34
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
		rStabState[i].posErrorAmp = 0;
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	4a85      	ldr	r2, [pc, #532]	; (80047d0 <stabilizationInit+0x310>)
 80045bc:	2158      	movs	r1, #88	; 0x58
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	3338      	adds	r3, #56	; 0x38
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
		rStabState[i].speedFiltered = 0;
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	4a80      	ldr	r2, [pc, #512]	; (80047d0 <stabilizationInit+0x310>)
 80045d0:	2158      	movs	r1, #88	; 0x58
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	333c      	adds	r3, #60	; 0x3c
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
		rStabState[i].posFiltered = 0;
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	4a7b      	ldr	r2, [pc, #492]	; (80047d0 <stabilizationInit+0x310>)
 80045e4:	2158      	movs	r1, #88	; 0x58
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3340      	adds	r3, #64	; 0x40
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
		rStabState[i].oldPosFiltered = 0;
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	4a76      	ldr	r2, [pc, #472]	; (80047d0 <stabilizationInit+0x310>)
 80045f8:	2158      	movs	r1, #88	; 0x58
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	3344      	adds	r3, #68	; 0x44
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
		rStabState[i].oldSpeedError = 0;
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	4a71      	ldr	r2, [pc, #452]	; (80047d0 <stabilizationInit+0x310>)
 800460c:	2158      	movs	r1, #88	; 0x58
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3348      	adds	r3, #72	; 0x48
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
		rStabState[i].thrustersFiltered = 0;
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	4a6c      	ldr	r2, [pc, #432]	; (80047d0 <stabilizationInit+0x310>)
 8004620:	2158      	movs	r1, #88	; 0x58
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	334c      	adds	r3, #76	; 0x4c
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
		rStabState[i].outputSignal = 0;
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	4a67      	ldr	r2, [pc, #412]	; (80047d0 <stabilizationInit+0x310>)
 8004634:	2158      	movs	r1, #88	; 0x58
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3350      	adds	r3, #80	; 0x50
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

		rStabState[i].LastTick = 0;
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	4a62      	ldr	r2, [pc, #392]	; (80047d0 <stabilizationInit+0x310>)
 8004648:	2158      	movs	r1, #88	; 0x58
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3354      	adds	r3, #84	; 0x54
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

		if(!rState.flash) {
 8004658:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <stabilizationInit+0x314>)
 800465a:	789b      	ldrb	r3, [r3, #2]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8090 	bne.w	8004782 <stabilizationInit+0x2c2>
			rStabConstants[i].pJoyUnitCast = 1;
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	4a59      	ldr	r2, [pc, #356]	; (80047cc <stabilizationInit+0x30c>)
 8004666:	214c      	movs	r1, #76	; 0x4c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	3304      	adds	r3, #4
 8004670:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004674:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pSpeedDyn = 1;
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	4a54      	ldr	r2, [pc, #336]	; (80047cc <stabilizationInit+0x30c>)
 800467a:	214c      	movs	r1, #76	; 0x4c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	3308      	adds	r3, #8
 8004684:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004688:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pErrGain = 1;
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	4a4f      	ldr	r2, [pc, #316]	; (80047cc <stabilizationInit+0x30c>)
 800468e:	214c      	movs	r1, #76	; 0x4c
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	4413      	add	r3, r2
 8004696:	330c      	adds	r3, #12
 8004698:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800469c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].T = 0;
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <stabilizationInit+0x30c>)
 80046a2:	214c      	movs	r1, #76	; 0x4c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	3318      	adds	r3, #24
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[SPEED_FILTER].K = 1;
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	4a45      	ldr	r2, [pc, #276]	; (80047cc <stabilizationInit+0x30c>)
 80046b6:	214c      	movs	r1, #76	; 0x4c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	331c      	adds	r3, #28
 80046c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046c4:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].T = 0;
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	4a40      	ldr	r2, [pc, #256]	; (80047cc <stabilizationInit+0x30c>)
 80046ca:	214c      	movs	r1, #76	; 0x4c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	3310      	adds	r3, #16
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
			rStabConstants[i].aFilter[POS_FILTER].K = 1;
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <stabilizationInit+0x30c>)
 80046de:	214c      	movs	r1, #76	; 0x4c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	3314      	adds	r3, #20
 80046e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046ec:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.pGain = 1;
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	4a36      	ldr	r2, [pc, #216]	; (80047cc <stabilizationInit+0x30c>)
 80046f2:	214c      	movs	r1, #76	; 0x4c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	3328      	adds	r3, #40	; 0x28
 80046fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004700:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iGain = 1;
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4a31      	ldr	r2, [pc, #196]	; (80047cc <stabilizationInit+0x30c>)
 8004706:	214c      	movs	r1, #76	; 0x4c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	332c      	adds	r3, #44	; 0x2c
 8004710:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004714:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMax = -1000;
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	4a2c      	ldr	r2, [pc, #176]	; (80047cc <stabilizationInit+0x30c>)
 800471a:	214c      	movs	r1, #76	; 0x4c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	3330      	adds	r3, #48	; 0x30
 8004724:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <stabilizationInit+0x318>)
 8004726:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pid.iMin = 1000;
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	4a28      	ldr	r2, [pc, #160]	; (80047cc <stabilizationInit+0x30c>)
 800472c:	214c      	movs	r1, #76	; 0x4c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	3334      	adds	r3, #52	; 0x34
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <stabilizationInit+0x31c>)
 8004738:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMax = 5000;
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	4a23      	ldr	r2, [pc, #140]	; (80047cc <stabilizationInit+0x30c>)
 800473e:	214c      	movs	r1, #76	; 0x4c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	333c      	adds	r3, #60	; 0x3c
 8004748:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <stabilizationInit+0x320>)
 800474a:	601a      	str	r2, [r3, #0]
			rStabConstants[i].pThrustersMin = -5000;
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <stabilizationInit+0x30c>)
 8004750:	214c      	movs	r1, #76	; 0x4c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3338      	adds	r3, #56	; 0x38
 800475a:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <stabilizationInit+0x324>)
 800475c:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMax = 32000;
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <stabilizationInit+0x30c>)
 8004762:	214c      	movs	r1, #76	; 0x4c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	3344      	adds	r3, #68	; 0x44
 800476c:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <stabilizationInit+0x328>)
 800476e:	601a      	str	r2, [r3, #0]
			rStabConstants[i].sOutSummatorMin = -32000;
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	4a16      	ldr	r2, [pc, #88]	; (80047cc <stabilizationInit+0x30c>)
 8004774:	214c      	movs	r1, #76	; 0x4c
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	4413      	add	r3, r2
 800477c:	3348      	adds	r3, #72	; 0x48
 800477e:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <stabilizationInit+0x32c>)
 8004780:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<STABILIZATION_AMOUNT; i++) {
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	3301      	adds	r3, #1
 8004786:	71fb      	strb	r3, [r7, #7]
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	2b05      	cmp	r3, #5
 800478c:	f67f ae9e 	bls.w	80044cc <stabilizationInit+0xc>
		}
	}

	/////////DEBUG!!!!////////////////////////////////////////////
	rStabConstants[STAB_YAW].enable = false;
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <stabilizationInit+0x30c>)
 8004792:	2200      	movs	r2, #0
 8004794:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	rStabConstants[STAB_ROLL].enable = false;
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <stabilizationInit+0x30c>)
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	rStabConstants[STAB_DEPTH].enable = false;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <stabilizationInit+0x30c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
	rStabConstants[STAB_MARCH].enable = false;
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <stabilizationInit+0x30c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rStabConstants[STAB_LAG].enable = false;
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <stabilizationInit+0x30c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rStabConstants[STAB_PITCH].enable = false;
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <stabilizationInit+0x30c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
	//////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////
    rStabState[STAB_ROLL].inputSignal = &rJoySpeed.roll;
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <stabilizationInit+0x310>)
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <stabilizationInit+0x330>)
 80047c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    rStabState[STAB_ROLL].speedSignal = &rSensors.rollSpeed;
 80047c6:	4b02      	ldr	r3, [pc, #8]	; (80047d0 <stabilizationInit+0x310>)
 80047c8:	e014      	b.n	80047f4 <stabilizationInit+0x334>
 80047ca:	bf00      	nop
 80047cc:	20001e9c 	.word	0x20001e9c
 80047d0:	20002064 	.word	0x20002064
 80047d4:	20001d2c 	.word	0x20001d2c
 80047d8:	c47a0000 	.word	0xc47a0000
 80047dc:	447a0000 	.word	0x447a0000
 80047e0:	459c4000 	.word	0x459c4000
 80047e4:	c59c4000 	.word	0xc59c4000
 80047e8:	46fa0000 	.word	0x46fa0000
 80047ec:	c6fa0000 	.word	0xc6fa0000
 80047f0:	20001e50 	.word	0x20001e50
 80047f4:	4a96      	ldr	r2, [pc, #600]	; (8004a50 <stabilizationInit+0x590>)
 80047f6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    rStabState[STAB_ROLL].posSignal = &rSensors.roll;
 80047fa:	4b96      	ldr	r3, [pc, #600]	; (8004a54 <stabilizationInit+0x594>)
 80047fc:	4a96      	ldr	r2, [pc, #600]	; (8004a58 <stabilizationInit+0x598>)
 80047fe:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8004802:	4b96      	ldr	r3, [pc, #600]	; (8004a5c <stabilizationInit+0x59c>)
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    /////////////////////////////////////////////////////////////
    rStabState[STAB_PITCH].inputSignal = &rJoySpeed.pitch;
 800480a:	4b92      	ldr	r3, [pc, #584]	; (8004a54 <stabilizationInit+0x594>)
 800480c:	4a94      	ldr	r2, [pc, #592]	; (8004a60 <stabilizationInit+0x5a0>)
 800480e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    rStabState[STAB_PITCH].speedSignal = &rSensors.pitchSpeed;
 8004812:	4b90      	ldr	r3, [pc, #576]	; (8004a54 <stabilizationInit+0x594>)
 8004814:	4a93      	ldr	r2, [pc, #588]	; (8004a64 <stabilizationInit+0x5a4>)
 8004816:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    rStabState[STAB_PITCH].posSignal = &rSensors.pitch;
 800481a:	4b8e      	ldr	r3, [pc, #568]	; (8004a54 <stabilizationInit+0x594>)
 800481c:	4a92      	ldr	r2, [pc, #584]	; (8004a68 <stabilizationInit+0x5a8>)
 800481e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    rStabConstants[STAB_PITCH].joyIntegration = true;
 8004822:	4b8e      	ldr	r3, [pc, #568]	; (8004a5c <stabilizationInit+0x59c>)
 8004824:	2201      	movs	r2, #1
 8004826:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    /////////////////////////////////////////////////////////////
    rStabState[STAB_YAW].inputSignal = &rJoySpeed.yaw;
 800482a:	4b8a      	ldr	r3, [pc, #552]	; (8004a54 <stabilizationInit+0x594>)
 800482c:	4a8f      	ldr	r2, [pc, #572]	; (8004a6c <stabilizationInit+0x5ac>)
 800482e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    rStabState[STAB_YAW].speedSignal = &rSensors.yawSpeed;
 8004832:	4b88      	ldr	r3, [pc, #544]	; (8004a54 <stabilizationInit+0x594>)
 8004834:	4a8e      	ldr	r2, [pc, #568]	; (8004a70 <stabilizationInit+0x5b0>)
 8004836:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    rStabState[STAB_YAW].posSignal = &rSensors.yaw;//&rStabState[STAB_YAW].speedIntegral;
 800483a:	4b86      	ldr	r3, [pc, #536]	; (8004a54 <stabilizationInit+0x594>)
 800483c:	4a8d      	ldr	r2, [pc, #564]	; (8004a74 <stabilizationInit+0x5b4>)
 800483e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    rStabConstants[STAB_YAW].joyIntegration = true;
 8004842:	4b86      	ldr	r3, [pc, #536]	; (8004a5c <stabilizationInit+0x59c>)
 8004844:	2201      	movs	r2, #1
 8004846:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    /////////////////////////////////////////////////////////////
    rStabState[STAB_DEPTH].inputSignal = &rJoySpeed.depth;
 800484a:	4b82      	ldr	r3, [pc, #520]	; (8004a54 <stabilizationInit+0x594>)
 800484c:	4a8a      	ldr	r2, [pc, #552]	; (8004a78 <stabilizationInit+0x5b8>)
 800484e:	601a      	str	r2, [r3, #0]
    rStabState[STAB_DEPTH].speedSignal = &rSensors.velocity_pressure;//&rStabState[STAB_DEPTH].posDerivative;
 8004850:	4b80      	ldr	r3, [pc, #512]	; (8004a54 <stabilizationInit+0x594>)
 8004852:	4a8a      	ldr	r2, [pc, #552]	; (8004a7c <stabilizationInit+0x5bc>)
 8004854:	605a      	str	r2, [r3, #4]
    rStabState[STAB_DEPTH].posSignal = &rSensors.pressure;
 8004856:	4b7f      	ldr	r3, [pc, #508]	; (8004a54 <stabilizationInit+0x594>)
 8004858:	4a89      	ldr	r2, [pc, #548]	; (8004a80 <stabilizationInit+0x5c0>)
 800485a:	609a      	str	r2, [r3, #8]
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 800485c:	4b7f      	ldr	r3, [pc, #508]	; (8004a5c <stabilizationInit+0x59c>)
 800485e:	2200      	movs	r2, #0
 8004860:	705a      	strb	r2, [r3, #1]
    /////////////////////////////////////////////////////////////
    rStabState[STAB_LAG].inputSignal = &rJoySpeed.lag;
 8004862:	4b7c      	ldr	r3, [pc, #496]	; (8004a54 <stabilizationInit+0x594>)
 8004864:	4a87      	ldr	r2, [pc, #540]	; (8004a84 <stabilizationInit+0x5c4>)
 8004866:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    rStabState[STAB_LAG].speedSignal = &rStabState[STAB_LAG].posDerivative;
 800486a:	4b7a      	ldr	r3, [pc, #488]	; (8004a54 <stabilizationInit+0x594>)
 800486c:	4a86      	ldr	r2, [pc, #536]	; (8004a88 <stabilizationInit+0x5c8>)
 800486e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    rStabState[STAB_LAG].posSignal = &rState.lag_error;
 8004872:	4b78      	ldr	r3, [pc, #480]	; (8004a54 <stabilizationInit+0x594>)
 8004874:	4a85      	ldr	r2, [pc, #532]	; (8004a8c <stabilizationInit+0x5cc>)
 8004876:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    rStabConstants[STAB_LAG].joyIntegration = false;
 800487a:	4b78      	ldr	r3, [pc, #480]	; (8004a5c <stabilizationInit+0x59c>)
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    /////////////////////////////////////////////////////////////
    rStabState[STAB_MARCH].inputSignal = &rJoySpeed.march;
 8004882:	4b74      	ldr	r3, [pc, #464]	; (8004a54 <stabilizationInit+0x594>)
 8004884:	4a82      	ldr	r2, [pc, #520]	; (8004a90 <stabilizationInit+0x5d0>)
 8004886:	659a      	str	r2, [r3, #88]	; 0x58
    rStabState[STAB_MARCH].speedSignal = &rStabState[STAB_MARCH].posDerivative;
 8004888:	4b72      	ldr	r3, [pc, #456]	; (8004a54 <stabilizationInit+0x594>)
 800488a:	4a82      	ldr	r2, [pc, #520]	; (8004a94 <stabilizationInit+0x5d4>)
 800488c:	65da      	str	r2, [r3, #92]	; 0x5c
    rStabState[STAB_MARCH].posSignal = &rJoySpeed.march;
 800488e:	4b71      	ldr	r3, [pc, #452]	; (8004a54 <stabilizationInit+0x594>)
 8004890:	4a7f      	ldr	r2, [pc, #508]	; (8004a90 <stabilizationInit+0x5d0>)
 8004892:	661a      	str	r2, [r3, #96]	; 0x60
    rStabConstants[STAB_MARCH].joyIntegration = false;
 8004894:	4b71      	ldr	r3, [pc, #452]	; (8004a5c <stabilizationInit+0x59c>)
 8004896:	2200      	movs	r2, #0
 8004898:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


    //upload coef

	rStabConstants[STAB_YAW].pJoyUnitCast = 1;
 800489c:	4b6f      	ldr	r3, [pc, #444]	; (8004a5c <stabilizationInit+0x59c>)
 800489e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048a2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	rStabConstants[STAB_YAW].pSpeedDyn = 0;
 80048a6:	4b6d      	ldr	r3, [pc, #436]	; (8004a5c <stabilizationInit+0x59c>)
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	rStabConstants[STAB_YAW].pErrGain = 1;
 80048b0:	4b6a      	ldr	r3, [pc, #424]	; (8004a5c <stabilizationInit+0x59c>)
 80048b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].T = 0;
 80048ba:	4b68      	ldr	r3, [pc, #416]	; (8004a5c <stabilizationInit+0x59c>)
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	rStabConstants[STAB_YAW].aFilter[SPEED_FILTER].K = 1;
 80048c4:	4b65      	ldr	r3, [pc, #404]	; (8004a5c <stabilizationInit+0x59c>)
 80048c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].T = 0;
 80048ce:	4b63      	ldr	r3, [pc, #396]	; (8004a5c <stabilizationInit+0x59c>)
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	rStabConstants[STAB_YAW].aFilter[POS_FILTER].K = 1;
 80048d8:	4b60      	ldr	r3, [pc, #384]	; (8004a5c <stabilizationInit+0x59c>)
 80048da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048de:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	rStabConstants[STAB_YAW].pid.pGain = 0.1;
 80048e2:	4b5e      	ldr	r3, [pc, #376]	; (8004a5c <stabilizationInit+0x59c>)
 80048e4:	4a6c      	ldr	r2, [pc, #432]	; (8004a98 <stabilizationInit+0x5d8>)
 80048e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	rStabConstants[STAB_YAW].pid.iGain = 0;
 80048ea:	4b5c      	ldr	r3, [pc, #368]	; (8004a5c <stabilizationInit+0x59c>)
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	rStabConstants[STAB_YAW].pid.iMax = 90;
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <stabilizationInit+0x59c>)
 80048f6:	4a69      	ldr	r2, [pc, #420]	; (8004a9c <stabilizationInit+0x5dc>)
 80048f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rStabConstants[STAB_YAW].pid.iMin = -90;
 80048fc:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <stabilizationInit+0x59c>)
 80048fe:	4a68      	ldr	r2, [pc, #416]	; (8004aa0 <stabilizationInit+0x5e0>)
 8004900:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	rStabConstants[STAB_YAW].pThrustersCast = 45;
 8004904:	4b55      	ldr	r3, [pc, #340]	; (8004a5c <stabilizationInit+0x59c>)
 8004906:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <stabilizationInit+0x5e4>)
 8004908:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	rStabConstants[STAB_YAW].pThrustersMax = 90;
 800490c:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <stabilizationInit+0x59c>)
 800490e:	4a63      	ldr	r2, [pc, #396]	; (8004a9c <stabilizationInit+0x5dc>)
 8004910:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	rStabConstants[STAB_YAW].pThrustersMin = -90;
 8004914:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <stabilizationInit+0x59c>)
 8004916:	4a62      	ldr	r2, [pc, #392]	; (8004aa0 <stabilizationInit+0x5e0>)
 8004918:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rStabConstants[STAB_YAW].sOutSummatorMax = 32000;
 800491c:	4b4f      	ldr	r3, [pc, #316]	; (8004a5c <stabilizationInit+0x59c>)
 800491e:	4a62      	ldr	r2, [pc, #392]	; (8004aa8 <stabilizationInit+0x5e8>)
 8004920:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	rStabConstants[STAB_YAW].sOutSummatorMin = -32000;
 8004924:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <stabilizationInit+0x59c>)
 8004926:	4a61      	ldr	r2, [pc, #388]	; (8004aac <stabilizationInit+0x5ec>)
 8004928:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    rStabConstants[STAB_YAW].joyIntegration = false;
 800492c:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <stabilizationInit+0x59c>)
 800492e:	2200      	movs	r2, #0
 8004930:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5


	rStabConstants[STAB_DEPTH].pJoyUnitCast = 1;
 8004934:	4b49      	ldr	r3, [pc, #292]	; (8004a5c <stabilizationInit+0x59c>)
 8004936:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800493a:	605a      	str	r2, [r3, #4]
	rStabConstants[STAB_DEPTH].pSpeedDyn = 1;
 800493c:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <stabilizationInit+0x59c>)
 800493e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004942:	609a      	str	r2, [r3, #8]
	rStabConstants[STAB_DEPTH].pErrGain = 1;
 8004944:	4b45      	ldr	r3, [pc, #276]	; (8004a5c <stabilizationInit+0x59c>)
 8004946:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800494a:	60da      	str	r2, [r3, #12]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].T = 0;//0.02;
 800494c:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <stabilizationInit+0x59c>)
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
	rStabConstants[STAB_DEPTH].aFilter[SPEED_FILTER].K = 1;//25;
 8004954:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <stabilizationInit+0x59c>)
 8004956:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800495a:	61da      	str	r2, [r3, #28]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].T = 0;
 800495c:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <stabilizationInit+0x59c>)
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	611a      	str	r2, [r3, #16]
	rStabConstants[STAB_DEPTH].aFilter[POS_FILTER].K = 1;
 8004964:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <stabilizationInit+0x59c>)
 8004966:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800496a:	615a      	str	r2, [r3, #20]
	rStabConstants[STAB_DEPTH].pid.pGain = 2;
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <stabilizationInit+0x59c>)
 800496e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
	rStabConstants[STAB_DEPTH].pid.iGain = 0;
 8004974:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <stabilizationInit+0x59c>)
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c
	rStabConstants[STAB_DEPTH].pid.iMax = 90;
 800497c:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <stabilizationInit+0x59c>)
 800497e:	4a47      	ldr	r2, [pc, #284]	; (8004a9c <stabilizationInit+0x5dc>)
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
	rStabConstants[STAB_DEPTH].pid.iMin = -90;
 8004982:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <stabilizationInit+0x59c>)
 8004984:	4a46      	ldr	r2, [pc, #280]	; (8004aa0 <stabilizationInit+0x5e0>)
 8004986:	635a      	str	r2, [r3, #52]	; 0x34
	rStabConstants[STAB_DEPTH].pThrustersCast = 0.3;
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <stabilizationInit+0x59c>)
 800498a:	4a49      	ldr	r2, [pc, #292]	; (8004ab0 <stabilizationInit+0x5f0>)
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
	rStabConstants[STAB_DEPTH].pThrustersMax = 90;
 800498e:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <stabilizationInit+0x59c>)
 8004990:	4a42      	ldr	r2, [pc, #264]	; (8004a9c <stabilizationInit+0x5dc>)
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c
	rStabConstants[STAB_DEPTH].pThrustersMin = -90;
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <stabilizationInit+0x59c>)
 8004996:	4a42      	ldr	r2, [pc, #264]	; (8004aa0 <stabilizationInit+0x5e0>)
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
	rStabConstants[STAB_DEPTH].sOutSummatorMax = 32000;
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <stabilizationInit+0x59c>)
 800499c:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <stabilizationInit+0x5e8>)
 800499e:	645a      	str	r2, [r3, #68]	; 0x44
	rStabConstants[STAB_DEPTH].sOutSummatorMin = -32000;
 80049a0:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <stabilizationInit+0x59c>)
 80049a2:	4a42      	ldr	r2, [pc, #264]	; (8004aac <stabilizationInit+0x5ec>)
 80049a4:	649a      	str	r2, [r3, #72]	; 0x48
    rStabConstants[STAB_DEPTH].joyIntegration = false;
 80049a6:	4b2d      	ldr	r3, [pc, #180]	; (8004a5c <stabilizationInit+0x59c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	705a      	strb	r2, [r3, #1]

	rStabConstants[STAB_ROLL].pJoyUnitCast = 1;
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <stabilizationInit+0x59c>)
 80049ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049b2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	rStabConstants[STAB_ROLL].pSpeedDyn = 0;
 80049b6:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <stabilizationInit+0x59c>)
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	rStabConstants[STAB_ROLL].pErrGain = 1;
 80049c0:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <stabilizationInit+0x59c>)
 80049c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049c6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].T = 0;
 80049ca:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <stabilizationInit+0x59c>)
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	rStabConstants[STAB_ROLL].aFilter[SPEED_FILTER].K = 1;
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <stabilizationInit+0x59c>)
 80049d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049da:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].T = 0;
 80049de:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <stabilizationInit+0x59c>)
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	rStabConstants[STAB_ROLL].aFilter[POS_FILTER].K = 1;
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <stabilizationInit+0x59c>)
 80049ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049ee:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	rStabConstants[STAB_ROLL].pid.pGain = 0.1;
 80049f2:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <stabilizationInit+0x59c>)
 80049f4:	4a28      	ldr	r2, [pc, #160]	; (8004a98 <stabilizationInit+0x5d8>)
 80049f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	rStabConstants[STAB_ROLL].pid.iGain = 0;
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <stabilizationInit+0x59c>)
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	rStabConstants[STAB_ROLL].pid.iMax = 50;
 8004a04:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <stabilizationInit+0x59c>)
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <stabilizationInit+0x5f4>)
 8004a08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	rStabConstants[STAB_ROLL].pid.iMin = -50;
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <stabilizationInit+0x59c>)
 8004a0e:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <stabilizationInit+0x5f8>)
 8004a10:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	rStabConstants[STAB_ROLL].pThrustersCast = 40;
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <stabilizationInit+0x59c>)
 8004a16:	4a29      	ldr	r2, [pc, #164]	; (8004abc <stabilizationInit+0x5fc>)
 8004a18:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	rStabConstants[STAB_ROLL].pThrustersMax = 90;
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <stabilizationInit+0x59c>)
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <stabilizationInit+0x5dc>)
 8004a20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	rStabConstants[STAB_ROLL].pThrustersMin = -90;
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <stabilizationInit+0x59c>)
 8004a26:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <stabilizationInit+0x5e0>)
 8004a28:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	rStabConstants[STAB_ROLL].sOutSummatorMax = 32000;
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <stabilizationInit+0x59c>)
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <stabilizationInit+0x5e8>)
 8004a30:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	rStabConstants[STAB_ROLL].sOutSummatorMin = -32000;
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <stabilizationInit+0x59c>)
 8004a36:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <stabilizationInit+0x5ec>)
 8004a38:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    rStabConstants[STAB_ROLL].joyIntegration = false;
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <stabilizationInit+0x59c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131


}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	20001de4 	.word	0x20001de4
 8004a54:	20002064 	.word	0x20002064
 8004a58:	20001dc8 	.word	0x20001dc8
 8004a5c:	20001e9c 	.word	0x20001e9c
 8004a60:	20001e54 	.word	0x20001e54
 8004a64:	20001de8 	.word	0x20001de8
 8004a68:	20001dcc 	.word	0x20001dcc
 8004a6c:	20001e58 	.word	0x20001e58
 8004a70:	20001dec 	.word	0x20001dec
 8004a74:	20001dd0 	.word	0x20001dd0
 8004a78:	20001e4c 	.word	0x20001e4c
 8004a7c:	20001e30 	.word	0x20001e30
 8004a80:	20001e24 	.word	0x20001e24
 8004a84:	20001e48 	.word	0x20001e48
 8004a88:	20002124 	.word	0x20002124
 8004a8c:	20001d34 	.word	0x20001d34
 8004a90:	20001e44 	.word	0x20001e44
 8004a94:	200020cc 	.word	0x200020cc
 8004a98:	3dcccccd 	.word	0x3dcccccd
 8004a9c:	42b40000 	.word	0x42b40000
 8004aa0:	c2b40000 	.word	0xc2b40000
 8004aa4:	42340000 	.word	0x42340000
 8004aa8:	46fa0000 	.word	0x46fa0000
 8004aac:	c6fa0000 	.word	0xc6fa0000
 8004ab0:	3e99999a 	.word	0x3e99999a
 8004ab4:	42480000 	.word	0x42480000
 8004ab8:	c2480000 	.word	0xc2480000
 8004abc:	42200000 	.word	0x42200000

08004ac0 <stabilizationStart>:

void stabilizationStart(uint8_t contour)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
	rStabConstants[contour].enable = true;
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	4a6f      	ldr	r2, [pc, #444]	; (8004c8c <stabilizationStart+0x1cc>)
 8004ace:	214c      	movs	r1, #76	; 0x4c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]

	rStabState[contour].oldSpeed = *rStabState[contour].speedSignal;
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	4a6c      	ldr	r2, [pc, #432]	; (8004c90 <stabilizationStart+0x1d0>)
 8004ade:	2158      	movs	r1, #88	; 0x58
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	4968      	ldr	r1, [pc, #416]	; (8004c90 <stabilizationStart+0x1d0>)
 8004af0:	2058      	movs	r0, #88	; 0x58
 8004af2:	fb00 f303 	mul.w	r3, r0, r3
 8004af6:	440b      	add	r3, r1
 8004af8:	3314      	adds	r3, #20
 8004afa:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPos = *rStabState[contour].posSignal;
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	4a64      	ldr	r2, [pc, #400]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b00:	2158      	movs	r1, #88	; 0x58
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	4413      	add	r3, r2
 8004b08:	3308      	adds	r3, #8
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	495f      	ldr	r1, [pc, #380]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b12:	2058      	movs	r0, #88	; 0x58
 8004b14:	fb00 f303 	mul.w	r3, r0, r3
 8004b18:	440b      	add	r3, r1
 8004b1a:	3318      	adds	r3, #24
 8004b1c:	601a      	str	r2, [r3, #0]
	rStabState[contour].posDerivative = 0;
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	4a5b      	ldr	r2, [pc, #364]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b22:	2158      	movs	r1, #88	; 0x58
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3310      	adds	r3, #16
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
	//rStabState[contour].speedIntegral = 0;
if(contour==STAB_YAW)
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d103      	bne.n	8004b40 <stabilizationStart+0x80>
{
	rSensors.yaw =0;
 8004b38:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <stabilizationStart+0x1d4>)
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
}
	rStabState[contour].joyUnitCasted = 0;
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	4a53      	ldr	r2, [pc, #332]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b44:	2158      	movs	r1, #88	; 0x58
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	331c      	adds	r3, #28
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
	rStabState[contour].joy_iValue = *rStabState[contour].posSignal;
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	4a4e      	ldr	r2, [pc, #312]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b58:	2158      	movs	r1, #88	; 0x58
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	3308      	adds	r3, #8
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	4949      	ldr	r1, [pc, #292]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b6a:	2058      	movs	r0, #88	; 0x58
 8004b6c:	fb00 f303 	mul.w	r3, r0, r3
 8004b70:	440b      	add	r3, r1
 8004b72:	3320      	adds	r3, #32
 8004b74:	601a      	str	r2, [r3, #0]
	rStabState[contour].posError = 0;
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	4a45      	ldr	r2, [pc, #276]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b7a:	2158      	movs	r1, #88	; 0x58
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	3324      	adds	r3, #36	; 0x24
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedError = 0;
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	4a40      	ldr	r2, [pc, #256]	; (8004c90 <stabilizationStart+0x1d0>)
 8004b8e:	2158      	movs	r1, #88	; 0x58
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3328      	adds	r3, #40	; 0x28
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
	rStabState[contour].dynSummator = 0;
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <stabilizationStart+0x1d0>)
 8004ba2:	2158      	movs	r1, #88	; 0x58
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	332c      	adds	r3, #44	; 0x2c
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
	rStabState[contour].pidValue = 0;
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	4a36      	ldr	r2, [pc, #216]	; (8004c90 <stabilizationStart+0x1d0>)
 8004bb6:	2158      	movs	r1, #88	; 0x58
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3330      	adds	r3, #48	; 0x30
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
	rStabState[contour].pid_iValue = 0;
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	4a31      	ldr	r2, [pc, #196]	; (8004c90 <stabilizationStart+0x1d0>)
 8004bca:	2158      	movs	r1, #88	; 0x58
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3334      	adds	r3, #52	; 0x34
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
	rStabState[contour].posErrorAmp = 0;
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <stabilizationStart+0x1d0>)
 8004bde:	2158      	movs	r1, #88	; 0x58
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	3338      	adds	r3, #56	; 0x38
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
	rStabState[contour].speedFiltered = 0;
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <stabilizationStart+0x1d0>)
 8004bf2:	2158      	movs	r1, #88	; 0x58
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	333c      	adds	r3, #60	; 0x3c
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
	rStabState[contour].posFiltered = 0;
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <stabilizationStart+0x1d0>)
 8004c06:	2158      	movs	r1, #88	; 0x58
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3340      	adds	r3, #64	; 0x40
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldPosFiltered = 0;
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <stabilizationStart+0x1d0>)
 8004c1a:	2158      	movs	r1, #88	; 0x58
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	3344      	adds	r3, #68	; 0x44
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
	rStabState[contour].oldSpeedError = 0;
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <stabilizationStart+0x1d0>)
 8004c2e:	2158      	movs	r1, #88	; 0x58
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	3348      	adds	r3, #72	; 0x48
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
	rStabState[contour].thrustersFiltered = 0;
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <stabilizationStart+0x1d0>)
 8004c42:	2158      	movs	r1, #88	; 0x58
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	334c      	adds	r3, #76	; 0x4c
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
	rStabState[contour].outputSignal = 0;
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <stabilizationStart+0x1d0>)
 8004c56:	2158      	movs	r1, #88	; 0x58
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3350      	adds	r3, #80	; 0x50
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
	rStabState[contour].LastTick = xTaskGetTickCount();
 8004c66:	f009 fd53 	bl	800e710 <xTaskGetTickCount>
 8004c6a:	ee07 0a90 	vmov	s15, r0
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c74:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <stabilizationStart+0x1d0>)
 8004c76:	2158      	movs	r1, #88	; 0x58
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3354      	adds	r3, #84	; 0x54
 8004c80:	edc3 7a00 	vstr	s15, [r3]
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20001e9c 	.word	0x20001e9c
 8004c90:	20002064 	.word	0x20002064
 8004c94:	20001dc8 	.word	0x20001dc8

08004c98 <stabilizationUpdate>:

void stabilizationUpdate(uint8_t contour)
{
 8004c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	71fb      	strb	r3, [r7, #7]
	struct robotStabilizationConstants_s *constants = &rStabConstants[contour];
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	224c      	movs	r2, #76	; 0x4c
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	4ac7      	ldr	r2, [pc, #796]	; (8004fcc <stabilizationUpdate+0x334>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
	struct robotStabilizationState_s *state = &rStabState[contour];
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	2258      	movs	r2, #88	; 0x58
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	4ac5      	ldr	r2, [pc, #788]	; (8004fd0 <stabilizationUpdate+0x338>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
	float diffTime = fromTickToMs(xTaskGetTickCount() - state->LastTick) / 1000.0f;
 8004cc0:	f009 fd26 	bl	800e710 <xTaskGetTickCount>
 8004cc4:	ee07 0a90 	vmov	s15, r0
 8004cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cda:	ee17 0a90 	vmov	r0, s15
 8004cde:	f7fc f969 	bl	8000fb4 <fromTickToMs>
 8004ce2:	eeb0 7a40 	vmov.f32	s14, s0
 8004ce6:	eddf 6abb 	vldr	s13, [pc, #748]	; 8004fd4 <stabilizationUpdate+0x33c>
 8004cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cee:	edc7 7a03 	vstr	s15, [r7, #12]
	state->LastTick = xTaskGetTickCount();
 8004cf2:	f009 fd0d 	bl	800e710 <xTaskGetTickCount>
 8004cf6:	ee07 0a90 	vmov	s15, r0
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	// Speed feedback filtering
	struct AperiodicFilter *filter = &constants->aFilter[SPEED_FILTER];
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3318      	adds	r3, #24
 8004d08:	60bb      	str	r3, [r7, #8]

	if(filter->T != 0) {
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	edd3 7a00 	vldr	s15, [r3]
 8004d10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d18:	d02b      	beq.n	8004d72 <stabilizationUpdate+0xda>
		//state->speedFiltered = state->speedFiltered*exp(-diffTime/filter->T/1e5) + state->oldSpeed*filter->K*80*(1-exp(-diffTime/filter->T/1e5));
		state->speedFiltered = state->oldSpeed + diffTime * (1/filter->T*100) * (*state->speedSignal * filter->K*70 - state->oldSpeed);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	edd3 6a00 	vldr	s13, [r3]
 8004d26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004d2a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d2e:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004fe4 <stabilizationUpdate+0x34c>
 8004d32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	ed93 6a00 	vldr	s12, [r3]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004d50:	ed9f 6aa1 	vldr	s12, [pc, #644]	; 8004fd8 <stabilizationUpdate+0x340>
 8004d54:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004d70:	e01f      	b.n	8004db2 <stabilizationUpdate+0x11a>
	}
	else {
		if(contour==STAB_PITCH)
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d110      	bne.n	8004d9a <stabilizationUpdate+0x102>
		{
			state->speedFiltered = *state->speedSignal*filter->K*250;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	ed93 7a00 	vldr	s14, [r3]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004fdc <stabilizationUpdate+0x344>
 8004d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8004d98:	e00b      	b.n	8004db2 <stabilizationUpdate+0x11a>
		}
		else
		state->speedFiltered = *state->speedSignal*filter->K;//*10;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	ed93 7a00 	vldr	s14, [r3]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	//state->oldSpeed = *state->speedSignal;
	state->oldSpeed = state->speedFiltered;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	615a      	str	r2, [r3, #20]

	// Position feedback filtering
	filter = &constants->aFilter[POS_FILTER];
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	3310      	adds	r3, #16
 8004dbe:	60bb      	str	r3, [r7, #8]
	if(filter->T != 0) {
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d061      	beq.n	8004e94 <stabilizationUpdate+0x1fc>
		state->posFiltered = state->posFiltered*exp(-diffTime/filter->T) + state->oldPos*filter->K*(1-exp(-diffTime/filter->T));
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fb fb5f 	bl	8000498 <__aeabi_f2d>
 8004dda:	4604      	mov	r4, r0
 8004ddc:	460d      	mov	r5, r1
 8004dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8004de2:	eeb1 7a67 	vneg.f32	s14, s15
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	edd3 7a00 	vldr	s15, [r3]
 8004dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004df0:	ee16 0a90 	vmov	r0, s13
 8004df4:	f7fb fb50 	bl	8000498 <__aeabi_f2d>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	ec43 2b10 	vmov	d0, r2, r3
 8004e00:	f00b fc4e 	bl	80106a0 <exp>
 8004e04:	ec53 2b10 	vmov	r2, r3, d0
 8004e08:	4620      	mov	r0, r4
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	f7fb fb9c 	bl	8000548 <__aeabi_dmul>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4690      	mov	r8, r2
 8004e16:	4699      	mov	r9, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	ed93 7a06 	vldr	s14, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e28:	ee17 0a90 	vmov	r0, s15
 8004e2c:	f7fb fb34 	bl	8000498 <__aeabi_f2d>
 8004e30:	4604      	mov	r4, r0
 8004e32:	460d      	mov	r5, r1
 8004e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e38:	eeb1 7a67 	vneg.f32	s14, s15
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	edd3 7a00 	vldr	s15, [r3]
 8004e42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e46:	ee16 0a90 	vmov	r0, s13
 8004e4a:	f7fb fb25 	bl	8000498 <__aeabi_f2d>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	ec43 2b10 	vmov	d0, r2, r3
 8004e56:	f00b fc23 	bl	80106a0 <exp>
 8004e5a:	ec53 2b10 	vmov	r2, r3, d0
 8004e5e:	f04f 0000 	mov.w	r0, #0
 8004e62:	495f      	ldr	r1, [pc, #380]	; (8004fe0 <stabilizationUpdate+0x348>)
 8004e64:	f7fb f9b8 	bl	80001d8 <__aeabi_dsub>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fb6a 	bl	8000548 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4640      	mov	r0, r8
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	f7fb f9ae 	bl	80001dc <__adddf3>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	f7fb fe20 	bl	8000acc <__aeabi_d2f>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
 8004e92:	e00b      	b.n	8004eac <stabilizationUpdate+0x214>
	}
	else {
		state->posFiltered = *state->posSignal*filter->K;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	ed93 7a00 	vldr	s14, [r3]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	state->oldPos = *state->posSignal;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	619a      	str	r2, [r3, #24]

	// Speed integration calculation
	state->speedIntegral += (*state->speedSignal * diffTime);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	edd3 6a00 	vldr	s13, [r3]
 8004ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Position derivative calculation
    state->posDerivative = (state->posFiltered - state->oldPosFiltered) / diffTime;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004ee2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004ee6:	ed97 7a03 	vldr	s14, [r7, #12]
 8004eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	edc3 7a04 	vstr	s15, [r3, #16]
    state->oldPosFiltered = state->posFiltered;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44

	// Input signal unit cast
	state->joyUnitCasted = constants->pJoyUnitCast * *state->inputSignal;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	edd3 7a00 	vldr	s15, [r3]
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	edc3 7a07 	vstr	s15, [r3, #28]

    // Casted input signal integration
	if(constants->joyIntegration) {
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00f      	beq.n	8004f3c <stabilizationUpdate+0x2a4>
		state->joy_iValue += state->joyUnitCasted * diffTime;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	edd3 6a07 	vldr	s13, [r3, #28]
 8004f28:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	edc3 7a08 	vstr	s15, [r3, #32]
 8004f3a:	e003      	b.n	8004f44 <stabilizationUpdate+0x2ac>
	}
	else {
		state->joy_iValue = state->joyUnitCasted;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	621a      	str	r2, [r3, #32]
	}

    // Position feedback summator
    state->posError = state->joy_iValue - state->posFiltered;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Feedback amplifiers
    state->posErrorAmp = state->posError * constants->pErrGain;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    // PI integration
    state->pid_iValue += (state->posErrorAmp * diffTime) * constants->pid.iGain;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004f7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // PI integration saturation
    if(state->pid_iValue > constants->pid.iMax*100) {
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004fa4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004fe4 <stabilizationUpdate+0x34c>
 8004fa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb4:	dd18      	ble.n	8004fe8 <stabilizationUpdate+0x350>
    	state->pid_iValue = constants->pid.iMax*100;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004fbc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004fe4 <stabilizationUpdate+0x34c>
 8004fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8004fca:	e026      	b.n	800501a <stabilizationUpdate+0x382>
 8004fcc:	20001e9c 	.word	0x20001e9c
 8004fd0:	20002064 	.word	0x20002064
 8004fd4:	447a0000 	.word	0x447a0000
 8004fd8:	428c0000 	.word	0x428c0000
 8004fdc:	437a0000 	.word	0x437a0000
 8004fe0:	3ff00000 	.word	0x3ff00000
 8004fe4:	42c80000 	.word	0x42c80000
    }
    else if(state->pid_iValue < constants->pid.iMin*100) {
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004ff4:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8004fe4 <stabilizationUpdate+0x34c>
 8004ff8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005004:	d509      	bpl.n	800501a <stabilizationUpdate+0x382>
    	state->pid_iValue = constants->pid.iMin*100;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800500c:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8004fe4 <stabilizationUpdate+0x34c>
 8005010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // PI summator
    state->pidValue =  state->pid_iValue + (state->posErrorAmp * constants->pid.pGain);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800502c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Dynamic summator
    state->dynSummator = state->pidValue + *state->inputSignal * constants->pSpeedDyn;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	edd3 6a00 	vldr	s13, [r3]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	edd3 7a02 	vldr	s15, [r3, #8]
 800504e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Speed feedback
    state->speedError = state->dynSummator - state->speedFiltered;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Out filtering
    filter = &constants->aFilter[THRUSTERS_FILTER];
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3320      	adds	r3, #32
 8005076:	60bb      	str	r3, [r7, #8]
    if(filter->T != 0) {
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	edd3 7a00 	vldr	s15, [r3]
 800507e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	d061      	beq.n	800514c <stabilizationUpdate+0x4b4>
    	state->thrustersFiltered = state->thrustersFiltered*exp(-diffTime/filter->T) + state->oldSpeedError*filter->K*(1-exp(-diffTime/filter->T));
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	4618      	mov	r0, r3
 800508e:	f7fb fa03 	bl	8000498 <__aeabi_f2d>
 8005092:	4604      	mov	r4, r0
 8005094:	460d      	mov	r5, r1
 8005096:	edd7 7a03 	vldr	s15, [r7, #12]
 800509a:	eeb1 7a67 	vneg.f32	s14, s15
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	edd3 7a00 	vldr	s15, [r3]
 80050a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050a8:	ee16 0a90 	vmov	r0, s13
 80050ac:	f7fb f9f4 	bl	8000498 <__aeabi_f2d>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	ec43 2b10 	vmov	d0, r2, r3
 80050b8:	f00b faf2 	bl	80106a0 <exp>
 80050bc:	ec53 2b10 	vmov	r2, r3, d0
 80050c0:	4620      	mov	r0, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	f7fb fa40 	bl	8000548 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4690      	mov	r8, r2
 80050ce:	4699      	mov	r9, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80050dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e0:	ee17 0a90 	vmov	r0, s15
 80050e4:	f7fb f9d8 	bl	8000498 <__aeabi_f2d>
 80050e8:	4604      	mov	r4, r0
 80050ea:	460d      	mov	r5, r1
 80050ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80050f0:	eeb1 7a67 	vneg.f32	s14, s15
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	edd3 7a00 	vldr	s15, [r3]
 80050fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050fe:	ee16 0a90 	vmov	r0, s13
 8005102:	f7fb f9c9 	bl	8000498 <__aeabi_f2d>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	ec43 2b10 	vmov	d0, r2, r3
 800510e:	f00b fac7 	bl	80106a0 <exp>
 8005112:	ec53 2b10 	vmov	r2, r3, d0
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	492d      	ldr	r1, [pc, #180]	; (80051d0 <stabilizationUpdate+0x538>)
 800511c:	f7fb f85c 	bl	80001d8 <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4620      	mov	r0, r4
 8005126:	4629      	mov	r1, r5
 8005128:	f7fb fa0e 	bl	8000548 <__aeabi_dmul>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4640      	mov	r0, r8
 8005132:	4649      	mov	r1, r9
 8005134:	f7fb f852 	bl	80001dc <__adddf3>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	f7fb fcc4 	bl	8000acc <__aeabi_d2f>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c
 800514a:	e00a      	b.n	8005162 <stabilizationUpdate+0x4ca>
    }
    else {
    	state->thrustersFiltered = state->speedError*filter->K;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	edd3 7a01 	vldr	s15, [r3, #4]
 8005158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
    state->oldSpeedError = state->speedError;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	649a      	str	r2, [r3, #72]	; 0x48

    state->thrustersFiltered = constants->pThrustersCast*state->speedError;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

    if(state->thrustersFiltered > constants->pThrustersMax) {
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800518c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005194:	dd04      	ble.n	80051a0 <stabilizationUpdate+0x508>
    	state->thrustersFiltered = constants->pThrustersMax;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	64da      	str	r2, [r3, #76]	; 0x4c
 800519e:	e00e      	b.n	80051be <stabilizationUpdate+0x526>
    }
    else if(state->thrustersFiltered < constants->pThrustersMin) {
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80051ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	d503      	bpl.n	80051be <stabilizationUpdate+0x526>
    	state->thrustersFiltered = constants->pThrustersMin;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    state->outputSignal = state->thrustersFiltered;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051c6:	bf00      	nop
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051d0:	3ff00000 	.word	0x3ff00000

080051d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051da:	4b11      	ldr	r3, [pc, #68]	; (8005220 <HAL_MspInit+0x4c>)
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	4a10      	ldr	r2, [pc, #64]	; (8005220 <HAL_MspInit+0x4c>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6193      	str	r3, [r2, #24]
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <HAL_MspInit+0x4c>)
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_MspInit+0x4c>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <HAL_MspInit+0x4c>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fc:	61d3      	str	r3, [r2, #28]
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <HAL_MspInit+0x4c>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800520a:	2200      	movs	r2, #0
 800520c:	210f      	movs	r1, #15
 800520e:	f06f 0001 	mvn.w	r0, #1
 8005212:	f000 ff53 	bl	80060bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000

08005224 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005234:	4b2e      	ldr	r3, [pc, #184]	; (80052f0 <HAL_InitTick+0xcc>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	4a2d      	ldr	r2, [pc, #180]	; (80052f0 <HAL_InitTick+0xcc>)
 800523a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800523e:	6193      	str	r3, [r2, #24]
 8005240:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <HAL_InitTick+0xcc>)
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800524c:	f107 020c 	add.w	r2, r7, #12
 8005250:	f107 0310 	add.w	r3, r7, #16
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f005 f9e0 	bl	800a61c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800525c:	f005 f9bc 	bl	800a5d8 <HAL_RCC_GetPCLK2Freq>
 8005260:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <HAL_InitTick+0xd0>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0c9b      	lsrs	r3, r3, #18
 800526c:	3b01      	subs	r3, #1
 800526e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005270:	4b21      	ldr	r3, [pc, #132]	; (80052f8 <HAL_InitTick+0xd4>)
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <HAL_InitTick+0xd8>)
 8005274:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_InitTick+0xd4>)
 8005278:	f240 32e7 	movw	r2, #999	; 0x3e7
 800527c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800527e:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_InitTick+0xd4>)
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <HAL_InitTick+0xd4>)
 8005286:	2200      	movs	r2, #0
 8005288:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_InitTick+0xd4>)
 800528c:	2200      	movs	r2, #0
 800528e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005290:	4b19      	ldr	r3, [pc, #100]	; (80052f8 <HAL_InitTick+0xd4>)
 8005292:	2200      	movs	r2, #0
 8005294:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005296:	4818      	ldr	r0, [pc, #96]	; (80052f8 <HAL_InitTick+0xd4>)
 8005298:	f005 fba2 	bl	800a9e0 <HAL_TIM_Base_Init>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80052a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d11b      	bne.n	80052e2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80052aa:	4813      	ldr	r0, [pc, #76]	; (80052f8 <HAL_InitTick+0xd4>)
 80052ac:	f005 fbf0 	bl	800aa90 <HAL_TIM_Base_Start_IT>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80052b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d111      	bne.n	80052e2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80052be:	2019      	movs	r0, #25
 80052c0:	f000 ff18 	bl	80060f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b0f      	cmp	r3, #15
 80052c8:	d808      	bhi.n	80052dc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80052ca:	2200      	movs	r2, #0
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	2019      	movs	r0, #25
 80052d0:	f000 fef4 	bl	80060bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052d4:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <HAL_InitTick+0xdc>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e002      	b.n	80052e2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80052e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3730      	adds	r7, #48	; 0x30
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000
 80052f4:	431bde83 	.word	0x431bde83
 80052f8:	200025c8 	.word	0x200025c8
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	200000b4 	.word	0x200000b4

08005304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005308:	e7fe      	b.n	8005308 <NMI_Handler+0x4>

0800530a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800530e:	e7fe      	b.n	800530e <HardFault_Handler+0x4>

08005310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005314:	e7fe      	b.n	8005314 <MemManage_Handler+0x4>

08005316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800531a:	e7fe      	b.n	800531a <BusFault_Handler+0x4>

0800531c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005320:	e7fe      	b.n	8005320 <UsageFault_Handler+0x4>

08005322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005322:	b480      	push	{r7}
 8005324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005334:	4802      	ldr	r0, [pc, #8]	; (8005340 <DMA1_Channel4_IRQHandler+0x10>)
 8005336:	f001 f816 	bl	8006366 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20002884 	.word	0x20002884

08005344 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005348:	4802      	ldr	r0, [pc, #8]	; (8005354 <DMA1_Channel5_IRQHandler+0x10>)
 800534a:	f001 f80c 	bl	8006366 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	200028c8 	.word	0x200028c8

08005358 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800535c:	4802      	ldr	r0, [pc, #8]	; (8005368 <DMA1_Channel6_IRQHandler+0x10>)
 800535e:	f001 f802 	bl	8006366 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2000290c 	.word	0x2000290c

0800536c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005370:	4802      	ldr	r0, [pc, #8]	; (800537c <DMA1_Channel7_IRQHandler+0x10>)
 8005372:	f000 fff8 	bl	8006366 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20002950 	.word	0x20002950

08005380 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005386:	f005 fbed 	bl	800ab64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200025c8 	.word	0x200025c8

08005394 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <I2C1_EV_IRQHandler+0x10>)
 800539a:	f002 f8e7 	bl	800756c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200023d4 	.word	0x200023d4

080053a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80053ac:	4802      	ldr	r0, [pc, #8]	; (80053b8 <USART1_IRQHandler+0x10>)
 80053ae:	f006 f93f 	bl	800b630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	200026ec 	.word	0x200026ec

080053bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053c0:	4802      	ldr	r0, [pc, #8]	; (80053cc <USART2_IRQHandler+0x10>)
 80053c2:	f006 f935 	bl	800b630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20002774 	.word	0x20002774

080053d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053d4:	4802      	ldr	r0, [pc, #8]	; (80053e0 <USART3_IRQHandler+0x10>)
 80053d6:	f006 f92b 	bl	800b630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200027fc 	.word	0x200027fc

080053e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80053e8:	4802      	ldr	r0, [pc, #8]	; (80053f4 <UART4_IRQHandler+0x10>)
 80053ea:	f006 f921 	bl	800b630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20002664 	.word	0x20002664

080053f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <SystemInit+0x20>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	4a05      	ldr	r2, [pc, #20]	; (8005418 <SystemInit+0x20>)
 8005404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000ed00 	.word	0xe000ed00

0800541c <thrustersInit>:
    {0.0, 0.0, 1.0, 0.0, -1.0},
    {-1.0, 1.0, 0.0, 1.0, 0.0}
};

void thrustersInit()
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
  rThrusters[FDR].address = 1; //Forward Left
 8005422:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <thrustersInit+0xb8>)
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
  rThrusters[FDL].address = 2; //Forward Down Left
 8005428:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <thrustersInit+0xb8>)
 800542a:	2202      	movs	r2, #2
 800542c:	761a      	strb	r2, [r3, #24]
  rThrusters[BDR].address = 3; //Back Down Right
 800542e:	4b29      	ldr	r3, [pc, #164]	; (80054d4 <thrustersInit+0xb8>)
 8005430:	2203      	movs	r2, #3
 8005432:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  rThrusters[BDL].address = 4; //Back Down Left
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <thrustersInit+0xb8>)
 8005438:	2204      	movs	r2, #4
 800543a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  rThrusters[FUR].address = 5; //Forward Up Right
 800543e:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <thrustersInit+0xb8>)
 8005440:	2205      	movs	r2, #5
 8005442:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  rThrusters[FUL].address = 6; //Forward Up Left
 8005446:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <thrustersInit+0xb8>)
 8005448:	2206      	movs	r2, #6
 800544a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
//  rThrusters[BUR].address = 7; //Back Up Right
//  rThrusters[BUL].address = 8; //Back Up Left

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800544e:	2300      	movs	r3, #0
 8005450:	71fb      	strb	r3, [r7, #7]
 8005452:	e034      	b.n	80054be <thrustersInit+0xa2>
    rThrusters[i].desiredSpeed = 0;
 8005454:	79fa      	ldrb	r2, [r7, #7]
 8005456:	491f      	ldr	r1, [pc, #124]	; (80054d4 <thrustersInit+0xb8>)
 8005458:	4613      	mov	r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	4413      	add	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	440b      	add	r3, r1
 8005462:	3302      	adds	r3, #2
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
    rThrusters[i].kForward = 0.7;
 8005468:	79fa      	ldrb	r2, [r7, #7]
 800546a:	491a      	ldr	r1, [pc, #104]	; (80054d4 <thrustersInit+0xb8>)
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	440b      	add	r3, r1
 8005476:	330c      	adds	r3, #12
 8005478:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <thrustersInit+0xbc>)
 800547a:	601a      	str	r2, [r3, #0]
    rThrusters[i].kBackward = 0.7;
 800547c:	79fa      	ldrb	r2, [r7, #7]
 800547e:	4915      	ldr	r1, [pc, #84]	; (80054d4 <thrustersInit+0xb8>)
 8005480:	4613      	mov	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	3310      	adds	r3, #16
 800548c:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <thrustersInit+0xbc>)
 800548e:	601a      	str	r2, [r3, #0]
    rThrusters[i].sForward = 127;
 8005490:	79fa      	ldrb	r2, [r7, #7]
 8005492:	4910      	ldr	r1, [pc, #64]	; (80054d4 <thrustersInit+0xb8>)
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	440b      	add	r3, r1
 800549e:	3314      	adds	r3, #20
 80054a0:	227f      	movs	r2, #127	; 0x7f
 80054a2:	701a      	strb	r2, [r3, #0]
    rThrusters[i].sBackward = 127;
 80054a4:	79fa      	ldrb	r2, [r7, #7]
 80054a6:	490b      	ldr	r1, [pc, #44]	; (80054d4 <thrustersInit+0xb8>)
 80054a8:	4613      	mov	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4413      	add	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	440b      	add	r3, r1
 80054b2:	3315      	adds	r3, #21
 80054b4:	227f      	movs	r2, #127	; 0x7f
 80054b6:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	3301      	adds	r3, #1
 80054bc:	71fb      	strb	r3, [r7, #7]
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d9c7      	bls.n	8005454 <thrustersInit+0x38>
  }

}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20001d38 	.word	0x20001d38
 80054d8:	3f333333 	.word	0x3f333333

080054dc <resetThrusters>:

void resetThrusters()
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
  rJoySpeed.depth = 0;
 80054e2:	4b19      	ldr	r3, [pc, #100]	; (8005548 <resetThrusters+0x6c>)
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
  rJoySpeed.lag = 0;
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <resetThrusters+0x6c>)
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	605a      	str	r2, [r3, #4]
  rJoySpeed.march = 0;
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <resetThrusters+0x6c>)
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
  rJoySpeed.pitch = 0;
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <resetThrusters+0x6c>)
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	611a      	str	r2, [r3, #16]
  rJoySpeed.roll = 0;
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <resetThrusters+0x6c>)
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	60da      	str	r2, [r3, #12]
  rJoySpeed.yaw = 0;
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <resetThrusters+0x6c>)
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	615a      	str	r2, [r3, #20]

  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005512:	2300      	movs	r3, #0
 8005514:	71fb      	strb	r3, [r7, #7]
 8005516:	e00c      	b.n	8005532 <resetThrusters+0x56>
    rThrusters[i].desiredSpeed = 0;
 8005518:	79fa      	ldrb	r2, [r7, #7]
 800551a:	490c      	ldr	r1, [pc, #48]	; (800554c <resetThrusters+0x70>)
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	3302      	adds	r3, #2
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	3301      	adds	r3, #1
 8005530:	71fb      	strb	r3, [r7, #7]
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	2b05      	cmp	r3, #5
 8005536:	d9ef      	bls.n	8005518 <resetThrusters+0x3c>
  }

}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20001e44 	.word	0x20001e44
 800554c:	20001d38 	.word	0x20001d38

08005550 <fillThrustersRequest>:

void fillThrustersRequest(uint8_t *buf, uint8_t thruster)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	70fb      	strb	r3, [r7, #3]
    struct thrustersRequest_s res;

    res.AA = 0xAA;
 800555c:	23aa      	movs	r3, #170	; 0xaa
 800555e:	723b      	strb	r3, [r7, #8]
    res.type = 0x01;
 8005560:	2301      	movs	r3, #1
 8005562:	727b      	strb	r3, [r7, #9]
    res.address = 0xAF;
 8005564:	23af      	movs	r3, #175	; 0xaf
 8005566:	72bb      	strb	r3, [r7, #10]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e012      	b.n	8005594 <fillThrustersRequest+0x44>
//    	}
//    	else if(velocity < 0) {
//    		velocity = (int16_t) ((float) (velocity) * rThrusters[i].kBackward);
//    	}

    	res.velocity[i] = rThrusters[i].desiredSpeed;
 800556e:	4916      	ldr	r1, [pc, #88]	; (80055c8 <fillThrustersRequest+0x78>)
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	440b      	add	r3, r1
 800557c:	3302      	adds	r3, #2
 800557e:	f993 1000 	ldrsb.w	r1, [r3]
 8005582:	f107 020b 	add.w	r2, r7, #11
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	4413      	add	r3, r2
 800558a:	460a      	mov	r2, r1
 800558c:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<THRUSTERS_NUMBER;i++){
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	3301      	adds	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b05      	cmp	r3, #5
 8005598:	dde9      	ble.n	800556e <fillThrustersRequest+0x1e>
    }
    res.pwm_servo = rDevice[GRAB].force;
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <fillThrustersRequest+0x7c>)
 800559c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80055a0:	747b      	strb	r3, [r7, #17]
    memcpy((void*)buf, (void*)&res, THRUSTERS_REQUEST_LENGTH);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	461a      	mov	r2, r3
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	cb03      	ldmia	r3!, {r0, r1}
 80055ac:	6010      	str	r0, [r2, #0]
 80055ae:	6051      	str	r1, [r2, #4]
 80055b0:	8819      	ldrh	r1, [r3, #0]
 80055b2:	789b      	ldrb	r3, [r3, #2]
 80055b4:	8111      	strh	r1, [r2, #8]
 80055b6:	7293      	strb	r3, [r2, #10]
    AddChecksumm8bVma(buf, THRUSTERS_REQUEST_LENGTH);
 80055b8:	210b      	movs	r1, #11
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc faac 	bl	8001b18 <AddChecksumm8bVma>
}
 80055c0:	bf00      	nop
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20001d38 	.word	0x20001d38
 80055cc:	20001e5c 	.word	0x20001e5c

080055d0 <fillThrustersResponse>:

void fillThrustersResponse(uint8_t *buf, uint8_t thruster)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
	//TODO errors parsing! and what is all this new stuff means
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 80055dc:	2109      	movs	r1, #9
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fc fa6d 	bl	8001abe <IsChecksumm8bCorrectVma>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01f      	beq.n	800562a <fillThrustersResponse+0x5a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01b      	beq.n	800562a <fillThrustersResponse+0x5a>
    	struct thrustersResponse_s res;
    	memcpy((void*)&res, (void*)buf, THRUSTERS_RESPONSE_LENGTH);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	6810      	ldr	r0, [r2, #0]
 80055fa:	6851      	ldr	r1, [r2, #4]
 80055fc:	c303      	stmia	r3!, {r0, r1}
 80055fe:	7a12      	ldrb	r2, [r2, #8]
 8005600:	701a      	strb	r2, [r3, #0]

        rThrusters[thruster].current = res.current;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	8a38      	ldrh	r0, [r7, #16]
 8005606:	490e      	ldr	r1, [pc, #56]	; (8005640 <fillThrustersResponse+0x70>)
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	3304      	adds	r3, #4
 8005614:	4602      	mov	r2, r0
 8005616:	801a      	strh	r2, [r3, #0]

        ++uartBus[THRUSTERS_UART].successRxCounter;
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <fillThrustersResponse+0x74>)
 800561a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800561e:	3301      	adds	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <fillThrustersResponse+0x74>)
 8005624:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    if(IsChecksumm8bCorrectVma(buf, THRUSTERS_RESPONSE_LENGTH) && buf[0] != 0) {
 8005628:	e005      	b.n	8005636 <fillThrustersResponse+0x66>
    }
    else {
    	++uartBus[THRUSTERS_UART].brokenRxCounter;
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <fillThrustersResponse+0x74>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	3301      	adds	r3, #1
 8005630:	4a04      	ldr	r2, [pc, #16]	; (8005644 <fillThrustersResponse+0x74>)
 8005632:	6453      	str	r3, [r2, #68]	; 0x44
    }
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20001d38 	.word	0x20001d38
 8005644:	2000018c 	.word	0x2000018c

08005648 <formThrustVectors>:

void formThrustVectors()
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b08f      	sub	sp, #60	; 0x3c
 800564c:	af00      	add	r7, sp, #0
  float velocity[THRUSTERS_NUMBER];
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 800564e:	2300      	movs	r3, #0
 8005650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005654:	e00d      	b.n	8005672 <formThrustVectors+0x2a>
    velocity[i] = 0;
 8005656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	3338      	adds	r3, #56	; 0x38
 800565e:	443b      	add	r3, r7
 8005660:	3b1c      	subs	r3, #28
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<THRUSTERS_NUMBER; i++) {
 8005668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800566c:	3301      	adds	r3, #1
 800566e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005676:	2b05      	cmp	r3, #5
 8005678:	d9ed      	bls.n	8005656 <formThrustVectors+0xe>
//  Uz = rStabState[STAB_DEPTH].outputSignal;
//  Upsi = rStabState[STAB_YAW].outputSignal;
//  Ugamma = rStabState[STAB_ROLL].outputSignal;
//  Uteta = rJoySpeed.pitch;

  U[STAB_MARCH] = rJoySpeed.march;
 800567a:	4b67      	ldr	r3, [pc, #412]	; (8005818 <formThrustVectors+0x1d0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60bb      	str	r3, [r7, #8]
  U[STAB_LAG] = rJoySpeed.lag;
 8005680:	4b65      	ldr	r3, [pc, #404]	; (8005818 <formThrustVectors+0x1d0>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
  U[STAB_DEPTH] = rJoySpeed.depth;
 8005686:	4b64      	ldr	r3, [pc, #400]	; (8005818 <formThrustVectors+0x1d0>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	607b      	str	r3, [r7, #4]
  U[STAB_YAW] = rJoySpeed.yaw;
 800568c:	4b62      	ldr	r3, [pc, #392]	; (8005818 <formThrustVectors+0x1d0>)
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	613b      	str	r3, [r7, #16]
  U[STAB_ROLL] = rJoySpeed.roll;
 8005692:	4b61      	ldr	r3, [pc, #388]	; (8005818 <formThrustVectors+0x1d0>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	617b      	str	r3, [r7, #20]
  U[STAB_PITCH] = rJoySpeed.pitch;
 8005698:	4b5f      	ldr	r3, [pc, #380]	; (8005818 <formThrustVectors+0x1d0>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	61bb      	str	r3, [r7, #24]

  for(uint8_t i = 0; i < 6; i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80056a4:	e01e      	b.n	80056e4 <formThrustVectors+0x9c>
  {
	if(rStabConstants[i].enable)
 80056a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056aa:	4a5c      	ldr	r2, [pc, #368]	; (800581c <formThrustVectors+0x1d4>)
 80056ac:	214c      	movs	r1, #76	; 0x4c
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00f      	beq.n	80056da <formThrustVectors+0x92>
		U[i] = rStabState[i].outputSignal;
 80056ba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80056be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056c2:	4957      	ldr	r1, [pc, #348]	; (8005820 <formThrustVectors+0x1d8>)
 80056c4:	2058      	movs	r0, #88	; 0x58
 80056c6:	fb00 f202 	mul.w	r2, r0, r2
 80056ca:	440a      	add	r2, r1
 80056cc:	3250      	adds	r2, #80	; 0x50
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	3338      	adds	r3, #56	; 0x38
 80056d4:	443b      	add	r3, r7
 80056d6:	3b34      	subs	r3, #52	; 0x34
 80056d8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < 6; i++)
 80056da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056de:	3301      	adds	r3, #1
 80056e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80056e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d9dc      	bls.n	80056a6 <formThrustVectors+0x5e>
  }

  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80056f2:	e087      	b.n	8005804 <formThrustVectors+0x1bc>
  {
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 80056f4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80056f8:	494a      	ldr	r1, [pc, #296]	; (8005824 <formThrustVectors+0x1dc>)
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	ed93 7a00 	vldr	s14, [r3]
 8005708:	edd7 7a02 	vldr	s15, [r7, #8]
 800570c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005710:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005714:	4943      	ldr	r1, [pc, #268]	; (8005824 <formThrustVectors+0x1dc>)
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	3304      	adds	r3, #4
 8005722:	edd3 6a00 	vldr	s13, [r3]
 8005726:	edd7 7a03 	vldr	s15, [r7, #12]
 800572a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800572e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005732:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005736:	493b      	ldr	r1, [pc, #236]	; (8005824 <formThrustVectors+0x1dc>)
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	3308      	adds	r3, #8
 8005744:	edd3 6a00 	vldr	s13, [r3]
 8005748:	edd7 7a01 	vldr	s15, [r7, #4]
 800574c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005750:	ee37 7a27 	vadd.f32	s14, s14, s15
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 8005754:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005758:	4932      	ldr	r1, [pc, #200]	; (8005824 <formThrustVectors+0x1dc>)
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	330c      	adds	r3, #12
 8005766:	edd3 6a00 	vldr	s13, [r3]
 800576a:	edd7 7a04 	vldr	s15, [r7, #16]
 800576e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005776:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800577a:	492a      	ldr	r1, [pc, #168]	; (8005824 <formThrustVectors+0x1dc>)
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	3310      	adds	r3, #16
 8005788:	edd3 6a00 	vldr	s13, [r3]
 800578c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005790:	ee66 7aa7 	vmul.f32	s15, s13, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 8005794:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
         + KVMA[i][3]*U[STAB_YAW] + KVMA[i][4]*U[STAB_ROLL];
 8005798:	ee77 7a27 	vadd.f32	s15, s14, s15
    velocity[i] = KVMA[i][0]*U[STAB_MARCH] + KVMA[i][1]*U[STAB_LAG] + KVMA[i][2]*U[STAB_DEPTH]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	3338      	adds	r3, #56	; 0x38
 80057a0:	443b      	add	r3, r7
 80057a2:	3b1c      	subs	r3, #28
 80057a4:	edc3 7a00 	vstr	s15, [r3]
    if(!thruster_init)
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <formThrustVectors+0x1e0>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d119      	bne.n	80057e4 <formThrustVectors+0x19c>
    {
    	rThrusters[i].desiredSpeed = resizeFloatToInt8(velocity[i]);
 80057b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	3338      	adds	r3, #56	; 0x38
 80057b8:	443b      	add	r3, r7
 80057ba:	3b1c      	subs	r3, #28
 80057bc:	edd3 7a00 	vldr	s15, [r3]
 80057c0:	f897 4035 	ldrb.w	r4, [r7, #53]	; 0x35
 80057c4:	eeb0 0a67 	vmov.f32	s0, s15
 80057c8:	f000 f832 	bl	8005830 <resizeFloatToInt8>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4619      	mov	r1, r3
 80057d0:	4a16      	ldr	r2, [pc, #88]	; (800582c <formThrustVectors+0x1e4>)
 80057d2:	4623      	mov	r3, r4
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4423      	add	r3, r4
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	3302      	adds	r3, #2
 80057de:	460a      	mov	r2, r1
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e00a      	b.n	80057fa <formThrustVectors+0x1b2>
    }
    else
    	rThrusters[i].desiredSpeed = 0;
 80057e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80057e8:	4910      	ldr	r1, [pc, #64]	; (800582c <formThrustVectors+0x1e4>)
 80057ea:	4613      	mov	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4413      	add	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	440b      	add	r3, r1
 80057f4:	3302      	adds	r3, #2
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < THRUSTERS_NUMBER; ++i)
 80057fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80057fe:	3301      	adds	r3, #1
 8005800:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005804:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005808:	2b05      	cmp	r3, #5
 800580a:	f67f af73 	bls.w	80056f4 <formThrustVectors+0xac>
  	}

}
 800580e:	bf00      	nop
 8005810:	bf00      	nop
 8005812:	373c      	adds	r7, #60	; 0x3c
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}
 8005818:	20001e44 	.word	0x20001e44
 800581c:	20001e9c 	.word	0x20001e9c
 8005820:	20002064 	.word	0x20002064
 8005824:	2000003c 	.word	0x2000003c
 8005828:	20002614 	.word	0x20002614
 800582c:	20001d38 	.word	0x20001d38

08005830 <resizeFloatToInt8>:

int8_t resizeFloatToInt8(float input)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t cast = (int32_t) input;
 800583a:	edd7 7a01 	vldr	s15, [r7, #4]
 800583e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005842:	ee17 3a90 	vmov	r3, s15
 8005846:	60fb      	str	r3, [r7, #12]
//  cast = cast / 0xFF;
  if (cast > 127) {
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b7f      	cmp	r3, #127	; 0x7f
 800584c:	dd02      	ble.n	8005854 <resizeFloatToInt8+0x24>
    cast = 127;
 800584e:	237f      	movs	r3, #127	; 0x7f
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e006      	b.n	8005862 <resizeFloatToInt8+0x32>
  }
  else if(cast < -127) {
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800585a:	da02      	bge.n	8005862 <resizeFloatToInt8+0x32>
    cast = -127;
 800585c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8005860:	60fb      	str	r3, [r7, #12]
  }
  return (int8_t) cast;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	b25b      	sxtb	r3, r3
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005884:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <MX_TIM7_Init+0x64>)
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <MX_TIM7_Init+0x68>)
 8005888:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800588a:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <MX_TIM7_Init+0x64>)
 800588c:	2200      	movs	r2, #0
 800588e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005890:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <MX_TIM7_Init+0x64>)
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <MX_TIM7_Init+0x64>)
 8005898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800589e:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <MX_TIM7_Init+0x64>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80058a4:	480c      	ldr	r0, [pc, #48]	; (80058d8 <MX_TIM7_Init+0x64>)
 80058a6:	f005 f89b 	bl	800a9e0 <HAL_TIM_Base_Init>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80058b0:	f7fe fd7e 	bl	80043b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058b4:	2300      	movs	r3, #0
 80058b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <MX_TIM7_Init+0x64>)
 80058c2:	f005 fb27 	bl	800af14 <HAL_TIMEx_MasterConfigSynchronization>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80058cc:	f7fe fd70 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20002618 	.word	0x20002618
 80058dc:	40001400 	.word	0x40001400

080058e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <HAL_TIM_Base_MspInit+0x38>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10b      	bne.n	800590a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <HAL_TIM_Base_MspInit+0x3c>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <HAL_TIM_Base_MspInit+0x3c>)
 80058f8:	f043 0320 	orr.w	r3, r3, #32
 80058fc:	61d3      	str	r3, [r2, #28]
 80058fe:	4b07      	ldr	r3, [pc, #28]	; (800591c <HAL_TIM_Base_MspInit+0x3c>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40001400 	.word	0x40001400
 800591c:	40021000 	.word	0x40021000

08005920 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005924:	4b14      	ldr	r3, [pc, #80]	; (8005978 <MX_UART4_Init+0x58>)
 8005926:	4a15      	ldr	r2, [pc, #84]	; (800597c <MX_UART4_Init+0x5c>)
 8005928:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <MX_UART4_Init+0x58>)
 800592c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005930:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <MX_UART4_Init+0x58>)
 8005934:	2200      	movs	r2, #0
 8005936:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <MX_UART4_Init+0x58>)
 800593a:	2200      	movs	r2, #0
 800593c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800593e:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <MX_UART4_Init+0x58>)
 8005940:	2200      	movs	r2, #0
 8005942:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <MX_UART4_Init+0x58>)
 8005946:	220c      	movs	r2, #12
 8005948:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <MX_UART4_Init+0x58>)
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <MX_UART4_Init+0x58>)
 8005952:	2200      	movs	r2, #0
 8005954:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <MX_UART4_Init+0x58>)
 8005958:	2200      	movs	r2, #0
 800595a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <MX_UART4_Init+0x58>)
 800595e:	2200      	movs	r2, #0
 8005960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005962:	4805      	ldr	r0, [pc, #20]	; (8005978 <MX_UART4_Init+0x58>)
 8005964:	f005 fb74 	bl	800b050 <HAL_UART_Init>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800596e:	f7fe fd1f 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20002664 	.word	0x20002664
 800597c:	40004c00 	.word	0x40004c00

08005980 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 8005986:	4a15      	ldr	r2, [pc, #84]	; (80059dc <MX_USART1_UART_Init+0x5c>)
 8005988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800598a:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 800598c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005992:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 800599a:	2200      	movs	r2, #0
 800599c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800599e:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 80059a6:	220c      	movs	r2, #12
 80059a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 80059be:	2200      	movs	r2, #0
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80059c2:	4805      	ldr	r0, [pc, #20]	; (80059d8 <MX_USART1_UART_Init+0x58>)
 80059c4:	f005 fb44 	bl	800b050 <HAL_UART_Init>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80059ce:	f7fe fcef 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200026ec 	.word	0x200026ec
 80059dc:	40013800 	.word	0x40013800

080059e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80059e4:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 80059e6:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <MX_USART2_UART_Init+0x64>)
 80059e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 80059ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059fe:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a06:	220c      	movs	r2, #12
 8005a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a1e:	2220      	movs	r2, #32
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a28:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a2a:	4805      	ldr	r0, [pc, #20]	; (8005a40 <MX_USART2_UART_Init+0x60>)
 8005a2c:	f005 fb10 	bl	800b050 <HAL_UART_Init>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8005a36:	f7fe fcbb 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20002774 	.word	0x20002774
 8005a44:	40004400 	.word	0x40004400

08005a48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a4c:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a4e:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <MX_USART3_UART_Init+0x5c>)
 8005a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a6e:	220c      	movs	r2, #12
 8005a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a8a:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <MX_USART3_UART_Init+0x58>)
 8005a8c:	f005 fae0 	bl	800b050 <HAL_UART_Init>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005a96:	f7fe fc8b 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a9a:	bf00      	nop
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200027fc 	.word	0x200027fc
 8005aa4:	40004800 	.word	0x40004800

08005aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b090      	sub	sp, #64	; 0x40
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4aa0      	ldr	r2, [pc, #640]	; (8005d48 <HAL_UART_MspInit+0x2a0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d131      	bne.n	8005b2e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005aca:	4ba0      	ldr	r3, [pc, #640]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4a9f      	ldr	r2, [pc, #636]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad4:	61d3      	str	r3, [r2, #28]
 8005ad6:	4b9d      	ldr	r3, [pc, #628]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae2:	4b9a      	ldr	r3, [pc, #616]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	4a99      	ldr	r2, [pc, #612]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aec:	6153      	str	r3, [r2, #20]
 8005aee:	4b97      	ldr	r3, [pc, #604]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005afa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b00:	2302      	movs	r3, #2
 8005b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005b0c:	2305      	movs	r3, #5
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b14:	4619      	mov	r1, r3
 8005b16:	488e      	ldr	r0, [pc, #568]	; (8005d50 <HAL_UART_MspInit+0x2a8>)
 8005b18:	f000 ff18 	bl	800694c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2105      	movs	r1, #5
 8005b20:	2034      	movs	r0, #52	; 0x34
 8005b22:	f000 facb 	bl	80060bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005b26:	2034      	movs	r0, #52	; 0x34
 8005b28:	f000 fae4 	bl	80060f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005b2c:	e15c      	b.n	8005de8 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a88      	ldr	r2, [pc, #544]	; (8005d54 <HAL_UART_MspInit+0x2ac>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	f040 8081 	bne.w	8005c3c <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b3a:	4b84      	ldr	r3, [pc, #528]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	4a83      	ldr	r2, [pc, #524]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b44:	6193      	str	r3, [r2, #24]
 8005b46:	4b81      	ldr	r3, [pc, #516]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4e:	623b      	str	r3, [r7, #32]
 8005b50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b52:	4b7e      	ldr	r3, [pc, #504]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	4a7d      	ldr	r2, [pc, #500]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5c:	6153      	str	r3, [r2, #20]
 8005b5e:	4b7b      	ldr	r3, [pc, #492]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b70:	2302      	movs	r3, #2
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b7c:	2307      	movs	r3, #7
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b84:	4619      	mov	r1, r3
 8005b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b8a:	f000 fedf 	bl	800694c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005b8e:	4b72      	ldr	r3, [pc, #456]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005b90:	4a72      	ldr	r2, [pc, #456]	; (8005d5c <HAL_UART_MspInit+0x2b4>)
 8005b92:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b94:	4b70      	ldr	r3, [pc, #448]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005b96:	2210      	movs	r2, #16
 8005b98:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b9a:	4b6f      	ldr	r3, [pc, #444]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ba0:	4b6d      	ldr	r3, [pc, #436]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ba6:	4b6c      	ldr	r3, [pc, #432]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bac:	4b6a      	ldr	r3, [pc, #424]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005bb2:	4b69      	ldr	r3, [pc, #420]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005bb8:	4b67      	ldr	r3, [pc, #412]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005bba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005bbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005bc0:	4865      	ldr	r0, [pc, #404]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005bc2:	f000 fab3 	bl	800612c <HAL_DMA_Init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005bcc:	f7fe fbf0 	bl	80043b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a61      	ldr	r2, [pc, #388]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005bd4:	671a      	str	r2, [r3, #112]	; 0x70
 8005bd6:	4a60      	ldr	r2, [pc, #384]	; (8005d58 <HAL_UART_MspInit+0x2b0>)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005bdc:	4b60      	ldr	r3, [pc, #384]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005bde:	4a61      	ldr	r2, [pc, #388]	; (8005d64 <HAL_UART_MspInit+0x2bc>)
 8005be0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005be2:	4b5f      	ldr	r3, [pc, #380]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005be8:	4b5d      	ldr	r3, [pc, #372]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bee:	4b5c      	ldr	r3, [pc, #368]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bf4:	4b5a      	ldr	r3, [pc, #360]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bfa:	4b59      	ldr	r3, [pc, #356]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005c00:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005c06:	4b56      	ldr	r3, [pc, #344]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005c08:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005c0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005c0e:	4854      	ldr	r0, [pc, #336]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005c10:	f000 fa8c 	bl	800612c <HAL_DMA_Init>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_UART_MspInit+0x176>
      Error_Handler();
 8005c1a:	f7fe fbc9 	bl	80043b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a4f      	ldr	r2, [pc, #316]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005c22:	675a      	str	r2, [r3, #116]	; 0x74
 8005c24:	4a4e      	ldr	r2, [pc, #312]	; (8005d60 <HAL_UART_MspInit+0x2b8>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2105      	movs	r1, #5
 8005c2e:	2025      	movs	r0, #37	; 0x25
 8005c30:	f000 fa44 	bl	80060bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c34:	2025      	movs	r0, #37	; 0x25
 8005c36:	f000 fa5d 	bl	80060f4 <HAL_NVIC_EnableIRQ>
}
 8005c3a:	e0d5      	b.n	8005de8 <HAL_UART_MspInit+0x340>
  else if(uartHandle->Instance==USART2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a49      	ldr	r2, [pc, #292]	; (8005d68 <HAL_UART_MspInit+0x2c0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f040 809a 	bne.w	8005d7c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c48:	4b40      	ldr	r3, [pc, #256]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	4a3f      	ldr	r2, [pc, #252]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c52:	61d3      	str	r3, [r2, #28]
 8005c54:	4b3d      	ldr	r3, [pc, #244]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c60:	4b3a      	ldr	r3, [pc, #232]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	4a39      	ldr	r2, [pc, #228]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6a:	6153      	str	r3, [r2, #20]
 8005c6c:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <HAL_UART_MspInit+0x2a4>)
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c78:	230c      	movs	r3, #12
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c84:	2303      	movs	r3, #3
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c88:	2307      	movs	r3, #7
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c90:	4619      	mov	r1, r3
 8005c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c96:	f000 fe59 	bl	800694c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005c9c:	4a34      	ldr	r2, [pc, #208]	; (8005d70 <HAL_UART_MspInit+0x2c8>)
 8005c9e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ca0:	4b32      	ldr	r3, [pc, #200]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ca6:	4b31      	ldr	r3, [pc, #196]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cac:	4b2f      	ldr	r3, [pc, #188]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cb2:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cb8:	4b2c      	ldr	r3, [pc, #176]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005cbe:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005cc4:	4b29      	ldr	r3, [pc, #164]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005cc6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005cca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ccc:	4827      	ldr	r0, [pc, #156]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005cce:	f000 fa2d 	bl	800612c <HAL_DMA_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_UART_MspInit+0x234>
      Error_Handler();
 8005cd8:	f7fe fb6a 	bl	80043b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a23      	ldr	r2, [pc, #140]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005ce0:	675a      	str	r2, [r3, #116]	; 0x74
 8005ce2:	4a22      	ldr	r2, [pc, #136]	; (8005d6c <HAL_UART_MspInit+0x2c4>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005ce8:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005cea:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <HAL_UART_MspInit+0x2d0>)
 8005cec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cee:	4b21      	ldr	r3, [pc, #132]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cf4:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005cfc:	2280      	movs	r2, #128	; 0x80
 8005cfe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d06:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d12:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d18:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d1a:	4816      	ldr	r0, [pc, #88]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005d1c:	f000 fa06 	bl	800612c <HAL_DMA_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_UART_MspInit+0x282>
      Error_Handler();
 8005d26:	f7fe fb43 	bl	80043b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a11      	ldr	r2, [pc, #68]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005d2e:	671a      	str	r2, [r3, #112]	; 0x70
 8005d30:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <HAL_UART_MspInit+0x2cc>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005d36:	2200      	movs	r2, #0
 8005d38:	2105      	movs	r1, #5
 8005d3a:	2026      	movs	r0, #38	; 0x26
 8005d3c:	f000 f9be 	bl	80060bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d40:	2026      	movs	r0, #38	; 0x26
 8005d42:	f000 f9d7 	bl	80060f4 <HAL_NVIC_EnableIRQ>
}
 8005d46:	e04f      	b.n	8005de8 <HAL_UART_MspInit+0x340>
 8005d48:	40004c00 	.word	0x40004c00
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	48000800 	.word	0x48000800
 8005d54:	40013800 	.word	0x40013800
 8005d58:	20002884 	.word	0x20002884
 8005d5c:	40020044 	.word	0x40020044
 8005d60:	200028c8 	.word	0x200028c8
 8005d64:	40020058 	.word	0x40020058
 8005d68:	40004400 	.word	0x40004400
 8005d6c:	2000290c 	.word	0x2000290c
 8005d70:	4002006c 	.word	0x4002006c
 8005d74:	20002950 	.word	0x20002950
 8005d78:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <HAL_UART_MspInit+0x348>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d130      	bne.n	8005de8 <HAL_UART_MspInit+0x340>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d86:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <HAL_UART_MspInit+0x34c>)
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <HAL_UART_MspInit+0x34c>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d90:	61d3      	str	r3, [r2, #28]
 8005d92:	4b18      	ldr	r3, [pc, #96]	; (8005df4 <HAL_UART_MspInit+0x34c>)
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <HAL_UART_MspInit+0x34c>)
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_UART_MspInit+0x34c>)
 8005da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da8:	6153      	str	r3, [r2, #20]
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <HAL_UART_MspInit+0x34c>)
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005db6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005dc8:	2307      	movs	r3, #7
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4809      	ldr	r0, [pc, #36]	; (8005df8 <HAL_UART_MspInit+0x350>)
 8005dd4:	f000 fdba 	bl	800694c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2105      	movs	r1, #5
 8005ddc:	2027      	movs	r0, #39	; 0x27
 8005dde:	f000 f96d 	bl	80060bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005de2:	2027      	movs	r0, #39	; 0x27
 8005de4:	f000 f986 	bl	80060f4 <HAL_NVIC_EnableIRQ>
}
 8005de8:	bf00      	nop
 8005dea:	3740      	adds	r7, #64	; 0x40
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40004800 	.word	0x40004800
 8005df4:	40021000 	.word	0x40021000
 8005df8:	48000400 	.word	0x48000400

08005dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e00:	f7ff fafa 	bl	80053f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e04:	480c      	ldr	r0, [pc, #48]	; (8005e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e06:	490d      	ldr	r1, [pc, #52]	; (8005e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e08:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <LoopForever+0xe>)
  movs r3, #0
 8005e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e0c:	e002      	b.n	8005e14 <LoopCopyDataInit>

08005e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e12:	3304      	adds	r3, #4

08005e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e18:	d3f9      	bcc.n	8005e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e1c:	4c0a      	ldr	r4, [pc, #40]	; (8005e48 <LoopForever+0x16>)
  movs r3, #0
 8005e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e20:	e001      	b.n	8005e26 <LoopFillZerobss>

08005e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e24:	3204      	adds	r2, #4

08005e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e28:	d3fb      	bcc.n	8005e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e2a:	f00a fbab 	bl	8010584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e2e:	f7fe fa21 	bl	8004274 <main>

08005e32 <LoopForever>:

LoopForever:
    b LoopForever
 8005e32:	e7fe      	b.n	8005e32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e3c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8005e40:	08010cb0 	.word	0x08010cb0
  ldr r2, =_sbss
 8005e44:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8005e48:	20003180 	.word	0x20003180

08005e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e4c:	e7fe      	b.n	8005e4c <ADC1_2_IRQHandler>
	...

08005e50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_Init+0x28>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a07      	ldr	r2, [pc, #28]	; (8005e78 <HAL_Init+0x28>)
 8005e5a:	f043 0310 	orr.w	r3, r3, #16
 8005e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e60:	2003      	movs	r0, #3
 8005e62:	f000 f920 	bl	80060a6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e66:	200f      	movs	r0, #15
 8005e68:	f7ff f9dc 	bl	8005224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e6c:	f7ff f9b2 	bl	80051d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40022000 	.word	0x40022000

08005e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_IncTick+0x20>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <HAL_IncTick+0x24>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <HAL_IncTick+0x24>)
 8005e8e:	6013      	str	r3, [r2, #0]
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	200000b8 	.word	0x200000b8
 8005ea0:	20002994 	.word	0x20002994

08005ea4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return uwTick;  
 8005ea8:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <HAL_GetTick+0x14>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20002994 	.word	0x20002994

08005ebc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ec4:	f7ff ffee 	bl	8005ea4 <HAL_GetTick>
 8005ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d005      	beq.n	8005ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <HAL_Delay+0x44>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005ee2:	bf00      	nop
 8005ee4:	f7ff ffde 	bl	8005ea4 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d8f7      	bhi.n	8005ee4 <HAL_Delay+0x28>
  {
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200000b8 	.word	0x200000b8

08005f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <__NVIC_SetPriorityGrouping+0x44>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f20:	4013      	ands	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f36:	4a04      	ldr	r2, [pc, #16]	; (8005f48 <__NVIC_SetPriorityGrouping+0x44>)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	60d3      	str	r3, [r2, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000ed00 	.word	0xe000ed00

08005f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <__NVIC_GetPriorityGrouping+0x18>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	0a1b      	lsrs	r3, r3, #8
 8005f56:	f003 0307 	and.w	r3, r3, #7
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	e000ed00 	.word	0xe000ed00

08005f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	db0b      	blt.n	8005f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	f003 021f 	and.w	r2, r3, #31
 8005f80:	4907      	ldr	r1, [pc, #28]	; (8005fa0 <__NVIC_EnableIRQ+0x38>)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2001      	movs	r0, #1
 8005f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	e000e100 	.word	0xe000e100

08005fa4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	db12      	blt.n	8005fdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	f003 021f 	and.w	r2, r3, #31
 8005fbc:	490a      	ldr	r1, [pc, #40]	; (8005fe8 <__NVIC_DisableIRQ+0x44>)
 8005fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005fca:	3320      	adds	r3, #32
 8005fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005fd0:	f3bf 8f4f 	dsb	sy
}
 8005fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005fd6:	f3bf 8f6f 	isb	sy
}
 8005fda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	e000e100 	.word	0xe000e100

08005fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	6039      	str	r1, [r7, #0]
 8005ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	db0a      	blt.n	8006016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	b2da      	uxtb	r2, r3
 8006004:	490c      	ldr	r1, [pc, #48]	; (8006038 <__NVIC_SetPriority+0x4c>)
 8006006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600a:	0112      	lsls	r2, r2, #4
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	440b      	add	r3, r1
 8006010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006014:	e00a      	b.n	800602c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4908      	ldr	r1, [pc, #32]	; (800603c <__NVIC_SetPriority+0x50>)
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	3b04      	subs	r3, #4
 8006024:	0112      	lsls	r2, r2, #4
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	440b      	add	r3, r1
 800602a:	761a      	strb	r2, [r3, #24]
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	e000e100 	.word	0xe000e100
 800603c:	e000ed00 	.word	0xe000ed00

08006040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006040:	b480      	push	{r7}
 8006042:	b089      	sub	sp, #36	; 0x24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f1c3 0307 	rsb	r3, r3, #7
 800605a:	2b04      	cmp	r3, #4
 800605c:	bf28      	it	cs
 800605e:	2304      	movcs	r3, #4
 8006060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3304      	adds	r3, #4
 8006066:	2b06      	cmp	r3, #6
 8006068:	d902      	bls.n	8006070 <NVIC_EncodePriority+0x30>
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3b03      	subs	r3, #3
 800606e:	e000      	b.n	8006072 <NVIC_EncodePriority+0x32>
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006074:	f04f 32ff 	mov.w	r2, #4294967295
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	43da      	mvns	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	401a      	ands	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006088:	f04f 31ff 	mov.w	r1, #4294967295
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	fa01 f303 	lsl.w	r3, r1, r3
 8006092:	43d9      	mvns	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006098:	4313      	orrs	r3, r2
         );
}
 800609a:	4618      	mov	r0, r3
 800609c:	3724      	adds	r7, #36	; 0x24
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff ff28 	bl	8005f04 <__NVIC_SetPriorityGrouping>
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060ce:	f7ff ff3d 	bl	8005f4c <__NVIC_GetPriorityGrouping>
 80060d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	6978      	ldr	r0, [r7, #20]
 80060da:	f7ff ffb1 	bl	8006040 <NVIC_EncodePriority>
 80060de:	4602      	mov	r2, r0
 80060e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e4:	4611      	mov	r1, r2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff ff80 	bl	8005fec <__NVIC_SetPriority>
}
 80060ec:	bf00      	nop
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff ff30 	bl	8005f68 <__NVIC_EnableIRQ>
}
 8006108:	bf00      	nop
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800611a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff40 	bl	8005fa4 <__NVIC_DisableIRQ>
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e037      	b.n	80061b2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006158:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800615c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006166:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f9c5 	bl	8006524 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}  
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_DMA_Start_IT+0x20>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e04a      	b.n	8006270 <HAL_DMA_Start_IT+0xb6>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d13a      	bne.n	8006262 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f958 	bl	80064c6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 020e 	orr.w	r2, r2, #14
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e00f      	b.n	8006250 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 020a 	orr.w	r2, r2, #10
 800623e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e005      	b.n	800626e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800626a:	2302      	movs	r3, #2
 800626c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800626e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006286:	2b02      	cmp	r3, #2
 8006288:	d008      	beq.n	800629c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2204      	movs	r2, #4
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e020      	b.n	80062de <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 020e 	bic.w	r2, r2, #14
 80062aa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d005      	beq.n	800630c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2204      	movs	r2, #4
 8006304:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	73fb      	strb	r3, [r7, #15]
 800630a:	e027      	b.n	800635c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 020e 	bic.w	r2, r2, #14
 800631a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006334:	2101      	movs	r1, #1
 8006336:	fa01 f202 	lsl.w	r2, r1, r2
 800633a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
    } 
  }
  return status;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2204      	movs	r2, #4
 8006384:	409a      	lsls	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d024      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x72>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01f      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0204 	bic.w	r2, r2, #4
 80063b4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	2104      	movs	r1, #4
 80063c0:	fa01 f202 	lsl.w	r2, r1, r2
 80063c4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d06a      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80063d6:	e065      	b.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	2202      	movs	r2, #2
 80063de:	409a      	lsls	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02c      	beq.n	8006442 <HAL_DMA_IRQHandler+0xdc>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d027      	beq.n	8006442 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10b      	bne.n	8006418 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 020a 	bic.w	r2, r2, #10
 800640e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006420:	2102      	movs	r1, #2
 8006422:	fa01 f202 	lsl.w	r2, r1, r2
 8006426:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d035      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006440:	e030      	b.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	2208      	movs	r2, #8
 8006448:	409a      	lsls	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d028      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d023      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 020e 	bic.w	r2, r2, #14
 800646a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	2101      	movs	r1, #1
 8006476:	fa01 f202 	lsl.w	r2, r1, r2
 800647a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
    }
  }
}  
 80064a2:	e7ff      	b.n	80064a4 <HAL_DMA_IRQHandler+0x13e>
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	2101      	movs	r1, #1
 80064de:	fa01 f202 	lsl.w	r2, r1, r2
 80064e2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d108      	bne.n	8006506 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006504:	e007      	b.n	8006516 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	60da      	str	r2, [r3, #12]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	4b14      	ldr	r3, [pc, #80]	; (8006584 <DMA_CalcBaseAndBitshift+0x60>)
 8006534:	429a      	cmp	r2, r3
 8006536:	d80f      	bhi.n	8006558 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <DMA_CalcBaseAndBitshift+0x64>)
 8006540:	4413      	add	r3, r2
 8006542:	4a12      	ldr	r2, [pc, #72]	; (800658c <DMA_CalcBaseAndBitshift+0x68>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	009a      	lsls	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a0f      	ldr	r2, [pc, #60]	; (8006590 <DMA_CalcBaseAndBitshift+0x6c>)
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006556:	e00e      	b.n	8006576 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <DMA_CalcBaseAndBitshift+0x70>)
 8006560:	4413      	add	r3, r2
 8006562:	4a0a      	ldr	r2, [pc, #40]	; (800658c <DMA_CalcBaseAndBitshift+0x68>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	009a      	lsls	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <DMA_CalcBaseAndBitshift+0x74>)
 8006574:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40020407 	.word	0x40020407
 8006588:	bffdfff8 	.word	0xbffdfff8
 800658c:	cccccccd 	.word	0xcccccccd
 8006590:	40020000 	.word	0x40020000
 8006594:	bffdfbf8 	.word	0xbffdfbf8
 8006598:	40020400 	.word	0x40020400

0800659c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80065b6:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <HAL_FLASH_Program+0xd8>)
 80065b8:	7e1b      	ldrb	r3, [r3, #24]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_FLASH_Program+0x26>
 80065be:	2302      	movs	r3, #2
 80065c0:	e054      	b.n	800666c <HAL_FLASH_Program+0xd0>
 80065c2:	4b2c      	ldr	r3, [pc, #176]	; (8006674 <HAL_FLASH_Program+0xd8>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80065c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065cc:	f000 f8a8 	bl	8006720 <FLASH_WaitForLastOperation>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d144      	bne.n	8006664 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d102      	bne.n	80065e6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80065e0:	2301      	movs	r3, #1
 80065e2:	757b      	strb	r3, [r7, #21]
 80065e4:	e007      	b.n	80065f6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d102      	bne.n	80065f2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80065ec:	2302      	movs	r3, #2
 80065ee:	757b      	strb	r3, [r7, #21]
 80065f0:	e001      	b.n	80065f6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80065f2:	2304      	movs	r3, #4
 80065f4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	75bb      	strb	r3, [r7, #22]
 80065fa:	e02d      	b.n	8006658 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80065fc:	7dbb      	ldrb	r3, [r7, #22]
 80065fe:	005a      	lsls	r2, r3, #1
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	eb02 0c03 	add.w	ip, r2, r3
 8006606:	7dbb      	ldrb	r3, [r7, #22]
 8006608:	0119      	lsls	r1, r3, #4
 800660a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660e:	f1c1 0620 	rsb	r6, r1, #32
 8006612:	f1a1 0020 	sub.w	r0, r1, #32
 8006616:	fa22 f401 	lsr.w	r4, r2, r1
 800661a:	fa03 f606 	lsl.w	r6, r3, r6
 800661e:	4334      	orrs	r4, r6
 8006620:	fa23 f000 	lsr.w	r0, r3, r0
 8006624:	4304      	orrs	r4, r0
 8006626:	fa23 f501 	lsr.w	r5, r3, r1
 800662a:	b2a3      	uxth	r3, r4
 800662c:	4619      	mov	r1, r3
 800662e:	4660      	mov	r0, ip
 8006630:	f000 f85a 	bl	80066e8 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006634:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006638:	f000 f872 	bl	8006720 <FLASH_WaitForLastOperation>
 800663c:	4603      	mov	r3, r0
 800663e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006640:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <HAL_FLASH_Program+0xdc>)
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <HAL_FLASH_Program+0xdc>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d107      	bne.n	8006662 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006652:	7dbb      	ldrb	r3, [r7, #22]
 8006654:	3301      	adds	r3, #1
 8006656:	75bb      	strb	r3, [r7, #22]
 8006658:	7dba      	ldrb	r2, [r7, #22]
 800665a:	7d7b      	ldrb	r3, [r7, #21]
 800665c:	429a      	cmp	r2, r3
 800665e:	d3cd      	bcc.n	80065fc <HAL_FLASH_Program+0x60>
 8006660:	e000      	b.n	8006664 <HAL_FLASH_Program+0xc8>
      {
        break;
 8006662:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <HAL_FLASH_Program+0xd8>)
 8006666:	2200      	movs	r2, #0
 8006668:	761a      	strb	r2, [r3, #24]

  return status;
 800666a:	7dfb      	ldrb	r3, [r7, #23]
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006674:	20002998 	.word	0x20002998
 8006678:	40022000 	.word	0x40022000

0800667c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006686:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <HAL_FLASH_Unlock+0x40>)
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00d      	beq.n	80066ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <HAL_FLASH_Unlock+0x40>)
 8006694:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <HAL_FLASH_Unlock+0x44>)
 8006696:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006698:	4b08      	ldr	r3, [pc, #32]	; (80066bc <HAL_FLASH_Unlock+0x40>)
 800669a:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <HAL_FLASH_Unlock+0x48>)
 800669c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800669e:	4b07      	ldr	r3, [pc, #28]	; (80066bc <HAL_FLASH_Unlock+0x40>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80066ae:	79fb      	ldrb	r3, [r7, #7]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	40022000 	.word	0x40022000
 80066c0:	45670123 	.word	0x45670123
 80066c4:	cdef89ab 	.word	0xcdef89ab

080066c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_FLASH_Lock+0x1c>)
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <HAL_FLASH_Lock+0x1c>)
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40022000 	.word	0x40022000

080066e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80066f4:	4b08      	ldr	r3, [pc, #32]	; (8006718 <FLASH_Program_HalfWord+0x30>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <FLASH_Program_HalfWord+0x34>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	4a07      	ldr	r2, [pc, #28]	; (800671c <FLASH_Program_HalfWord+0x34>)
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	887a      	ldrh	r2, [r7, #2]
 800670a:	801a      	strh	r2, [r3, #0]
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	20002998 	.word	0x20002998
 800671c:	40022000 	.word	0x40022000

08006720 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006728:	f7ff fbbc 	bl	8005ea4 <HAL_GetTick>
 800672c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800672e:	e010      	b.n	8006752 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d00c      	beq.n	8006752 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <FLASH_WaitForLastOperation+0x2e>
 800673e:	f7ff fbb1 	bl	8005ea4 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d201      	bcs.n	8006752 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e01f      	b.n	8006792 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006752:	4b12      	ldr	r3, [pc, #72]	; (800679c <FLASH_WaitForLastOperation+0x7c>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b01      	cmp	r3, #1
 800675c:	d0e8      	beq.n	8006730 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <FLASH_WaitForLastOperation+0x7c>)
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d102      	bne.n	8006770 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <FLASH_WaitForLastOperation+0x7c>)
 800676c:	2220      	movs	r2, #32
 800676e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <FLASH_WaitForLastOperation+0x7c>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b10      	cmp	r3, #16
 800677a:	d005      	beq.n	8006788 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <FLASH_WaitForLastOperation+0x7c>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006784:	2b04      	cmp	r3, #4
 8006786:	d103      	bne.n	8006790 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006788:	f000 f80a 	bl	80067a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40022000 	.word	0x40022000

080067a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80067aa:	4b14      	ldr	r3, [pc, #80]	; (80067fc <FLASH_SetErrorCode+0x5c>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d109      	bne.n	80067ca <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <FLASH_SetErrorCode+0x60>)
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f043 0302 	orr.w	r3, r3, #2
 80067be:	4a10      	ldr	r2, [pc, #64]	; (8006800 <FLASH_SetErrorCode+0x60>)
 80067c0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f043 0310 	orr.w	r3, r3, #16
 80067c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80067ca:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <FLASH_SetErrorCode+0x5c>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d109      	bne.n	80067ea <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80067d6:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <FLASH_SetErrorCode+0x60>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	4a08      	ldr	r2, [pc, #32]	; (8006800 <FLASH_SetErrorCode+0x60>)
 80067e0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80067ea:	4a04      	ldr	r2, [pc, #16]	; (80067fc <FLASH_SetErrorCode+0x5c>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60d3      	str	r3, [r2, #12]
}  
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	40022000 	.word	0x40022000
 8006800:	20002998 	.word	0x20002998

08006804 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <HAL_FLASHEx_Erase+0xcc>)
 8006818:	7e1b      	ldrb	r3, [r3, #24]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_FLASHEx_Erase+0x1e>
 800681e:	2302      	movs	r3, #2
 8006820:	e052      	b.n	80068c8 <HAL_FLASHEx_Erase+0xc4>
 8006822:	4b2b      	ldr	r3, [pc, #172]	; (80068d0 <HAL_FLASHEx_Erase+0xcc>)
 8006824:	2201      	movs	r2, #1
 8006826:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d115      	bne.n	800685c <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006830:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006834:	f7ff ff74 	bl	8006720 <FLASH_WaitForLastOperation>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d140      	bne.n	80068c0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800683e:	f000 f84b 	bl	80068d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006842:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006846:	f7ff ff6b 	bl	8006720 <FLASH_WaitForLastOperation>
 800684a:	4603      	mov	r3, r0
 800684c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800684e:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <HAL_FLASHEx_Erase+0xd0>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4a20      	ldr	r2, [pc, #128]	; (80068d4 <HAL_FLASHEx_Erase+0xd0>)
 8006854:	f023 0304 	bic.w	r3, r3, #4
 8006858:	6113      	str	r3, [r2, #16]
 800685a:	e031      	b.n	80068c0 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800685c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006860:	f7ff ff5e 	bl	8006720 <FLASH_WaitForLastOperation>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d12a      	bne.n	80068c0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	60bb      	str	r3, [r7, #8]
 8006878:	e019      	b.n	80068ae <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f000 f846 	bl	800690c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006880:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006884:	f7ff ff4c 	bl	8006720 <FLASH_WaitForLastOperation>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <HAL_FLASHEx_Erase+0xd0>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	4a10      	ldr	r2, [pc, #64]	; (80068d4 <HAL_FLASHEx_Erase+0xd0>)
 8006892:	f023 0302 	bic.w	r3, r3, #2
 8006896:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	601a      	str	r2, [r3, #0]
            break;
 80068a4:	e00c      	b.n	80068c0 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	02da      	lsls	r2, r3, #11
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3dc      	bcc.n	800687a <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068c0:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <HAL_FLASHEx_Erase+0xcc>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	761a      	strb	r2, [r3, #24]

  return status;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20002998 	.word	0x20002998
 80068d4:	40022000 	.word	0x40022000

080068d8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <FLASH_MassErase+0x2c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <FLASH_MassErase+0x30>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	4a08      	ldr	r2, [pc, #32]	; (8006908 <FLASH_MassErase+0x30>)
 80068e8:	f043 0304 	orr.w	r3, r3, #4
 80068ec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <FLASH_MassErase+0x30>)
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	4a05      	ldr	r2, [pc, #20]	; (8006908 <FLASH_MassErase+0x30>)
 80068f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f8:	6113      	str	r3, [r2, #16]
}
 80068fa:	bf00      	nop
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20002998 	.word	0x20002998
 8006908:	40022000 	.word	0x40022000

0800690c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <FLASH_PageErase+0x38>)
 8006916:	2200      	movs	r2, #0
 8006918:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <FLASH_PageErase+0x3c>)
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <FLASH_PageErase+0x3c>)
 8006920:	f043 0302 	orr.w	r3, r3, #2
 8006924:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006926:	4a08      	ldr	r2, [pc, #32]	; (8006948 <FLASH_PageErase+0x3c>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <FLASH_PageErase+0x3c>)
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	4a05      	ldr	r2, [pc, #20]	; (8006948 <FLASH_PageErase+0x3c>)
 8006932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006936:	6113      	str	r3, [r2, #16]
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	20002998 	.word	0x20002998
 8006948:	40022000 	.word	0x40022000

0800694c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800695a:	e154      	b.n	8006c06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	2101      	movs	r1, #1
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	fa01 f303 	lsl.w	r3, r1, r3
 8006968:	4013      	ands	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8146 	beq.w	8006c00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	2b01      	cmp	r3, #1
 800697e:	d005      	beq.n	800698c <HAL_GPIO_Init+0x40>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d130      	bne.n	80069ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	2203      	movs	r2, #3
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4013      	ands	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	fa02 f303 	lsl.w	r3, r2, r3
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069c2:	2201      	movs	r2, #1
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	091b      	lsrs	r3, r3, #4
 80069d8:	f003 0201 	and.w	r2, r3, #1
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d017      	beq.n	8006a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	2203      	movs	r2, #3
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d123      	bne.n	8006a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	08da      	lsrs	r2, r3, #3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3208      	adds	r2, #8
 8006a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	220f      	movs	r2, #15
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	08da      	lsrs	r2, r3, #3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3208      	adds	r2, #8
 8006a78:	6939      	ldr	r1, [r7, #16]
 8006a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	2203      	movs	r2, #3
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	43db      	mvns	r3, r3
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4013      	ands	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 0203 	and.w	r2, r3, #3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80a0 	beq.w	8006c00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac0:	4b58      	ldr	r3, [pc, #352]	; (8006c24 <HAL_GPIO_Init+0x2d8>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	4a57      	ldr	r2, [pc, #348]	; (8006c24 <HAL_GPIO_Init+0x2d8>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	6193      	str	r3, [r2, #24]
 8006acc:	4b55      	ldr	r3, [pc, #340]	; (8006c24 <HAL_GPIO_Init+0x2d8>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006ad8:	4a53      	ldr	r2, [pc, #332]	; (8006c28 <HAL_GPIO_Init+0x2dc>)
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	089b      	lsrs	r3, r3, #2
 8006ade:	3302      	adds	r3, #2
 8006ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	220f      	movs	r2, #15
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	43db      	mvns	r3, r3
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4013      	ands	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b02:	d019      	beq.n	8006b38 <HAL_GPIO_Init+0x1ec>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a49      	ldr	r2, [pc, #292]	; (8006c2c <HAL_GPIO_Init+0x2e0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <HAL_GPIO_Init+0x1e8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a48      	ldr	r2, [pc, #288]	; (8006c30 <HAL_GPIO_Init+0x2e4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00d      	beq.n	8006b30 <HAL_GPIO_Init+0x1e4>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a47      	ldr	r2, [pc, #284]	; (8006c34 <HAL_GPIO_Init+0x2e8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <HAL_GPIO_Init+0x1e0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a46      	ldr	r2, [pc, #280]	; (8006c38 <HAL_GPIO_Init+0x2ec>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d101      	bne.n	8006b28 <HAL_GPIO_Init+0x1dc>
 8006b24:	2304      	movs	r3, #4
 8006b26:	e008      	b.n	8006b3a <HAL_GPIO_Init+0x1ee>
 8006b28:	2305      	movs	r3, #5
 8006b2a:	e006      	b.n	8006b3a <HAL_GPIO_Init+0x1ee>
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e004      	b.n	8006b3a <HAL_GPIO_Init+0x1ee>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e002      	b.n	8006b3a <HAL_GPIO_Init+0x1ee>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <HAL_GPIO_Init+0x1ee>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	f002 0203 	and.w	r2, r2, #3
 8006b40:	0092      	lsls	r2, r2, #2
 8006b42:	4093      	lsls	r3, r2
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b4a:	4937      	ldr	r1, [pc, #220]	; (8006c28 <HAL_GPIO_Init+0x2dc>)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	089b      	lsrs	r3, r3, #2
 8006b50:	3302      	adds	r3, #2
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b58:	4b38      	ldr	r3, [pc, #224]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4013      	ands	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006b7c:	4a2f      	ldr	r2, [pc, #188]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b82:	4b2e      	ldr	r3, [pc, #184]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006ba6:	4a25      	ldr	r2, [pc, #148]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bac:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006bd0:	4a1a      	ldr	r2, [pc, #104]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bd6:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4013      	ands	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006bfa:	4a10      	ldr	r2, [pc, #64]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	3301      	adds	r3, #1
 8006c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f47f aea3 	bne.w	800695c <HAL_GPIO_Init+0x10>
  }
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	48000400 	.word	0x48000400
 8006c30:	48000800 	.word	0x48000800
 8006c34:	48000c00 	.word	0x48000c00
 8006c38:	48001000 	.word	0x48001000
 8006c3c:	40010400 	.word	0x40010400

08006c40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006c4e:	e0b8      	b.n	8006dc2 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006c50:	2201      	movs	r2, #1
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80ab 	beq.w	8006dbc <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006c66:	4a5e      	ldr	r2, [pc, #376]	; (8006de0 <HAL_GPIO_DeInit+0x1a0>)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c72:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	220f      	movs	r2, #15
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4013      	ands	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c8e:	d019      	beq.n	8006cc4 <HAL_GPIO_DeInit+0x84>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a54      	ldr	r2, [pc, #336]	; (8006de4 <HAL_GPIO_DeInit+0x1a4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <HAL_GPIO_DeInit+0x80>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a53      	ldr	r2, [pc, #332]	; (8006de8 <HAL_GPIO_DeInit+0x1a8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00d      	beq.n	8006cbc <HAL_GPIO_DeInit+0x7c>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a52      	ldr	r2, [pc, #328]	; (8006dec <HAL_GPIO_DeInit+0x1ac>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <HAL_GPIO_DeInit+0x78>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a51      	ldr	r2, [pc, #324]	; (8006df0 <HAL_GPIO_DeInit+0x1b0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d101      	bne.n	8006cb4 <HAL_GPIO_DeInit+0x74>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	e008      	b.n	8006cc6 <HAL_GPIO_DeInit+0x86>
 8006cb4:	2305      	movs	r3, #5
 8006cb6:	e006      	b.n	8006cc6 <HAL_GPIO_DeInit+0x86>
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e004      	b.n	8006cc6 <HAL_GPIO_DeInit+0x86>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e002      	b.n	8006cc6 <HAL_GPIO_DeInit+0x86>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <HAL_GPIO_DeInit+0x86>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	f002 0203 	and.w	r2, r2, #3
 8006ccc:	0092      	lsls	r2, r2, #2
 8006cce:	4093      	lsls	r3, r2
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d132      	bne.n	8006d3c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006cd6:	4b47      	ldr	r3, [pc, #284]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	4945      	ldr	r1, [pc, #276]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006ce4:	4b43      	ldr	r3, [pc, #268]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	43db      	mvns	r3, r3
 8006cec:	4941      	ldr	r1, [pc, #260]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006cf2:	4b40      	ldr	r3, [pc, #256]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	493e      	ldr	r1, [pc, #248]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d00:	4b3c      	ldr	r3, [pc, #240]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	43db      	mvns	r3, r3
 8006d08:	493a      	ldr	r1, [pc, #232]	; (8006df4 <HAL_GPIO_DeInit+0x1b4>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	220f      	movs	r2, #15
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006d1e:	4a30      	ldr	r2, [pc, #192]	; (8006de0 <HAL_GPIO_DeInit+0x1a0>)
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	089b      	lsrs	r3, r3, #2
 8006d24:	3302      	adds	r3, #2
 8006d26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	43da      	mvns	r2, r3
 8006d2e:	482c      	ldr	r0, [pc, #176]	; (8006de0 <HAL_GPIO_DeInit+0x1a0>)
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	089b      	lsrs	r3, r3, #2
 8006d34:	400a      	ands	r2, r1
 8006d36:	3302      	adds	r3, #2
 8006d38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	2103      	movs	r1, #3
 8006d46:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	401a      	ands	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	08da      	lsrs	r2, r3, #3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3208      	adds	r2, #8
 8006d5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	220f      	movs	r2, #15
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	08d2      	lsrs	r2, r2, #3
 8006d72:	4019      	ands	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3208      	adds	r2, #8
 8006d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	2103      	movs	r1, #3
 8006d86:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8a:	43db      	mvns	r3, r3
 8006d8c:	401a      	ands	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	2101      	movs	r1, #1
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	401a      	ands	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	2103      	movs	r1, #3
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
 8006db4:	43db      	mvns	r3, r3
 8006db6:	401a      	ands	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f47f af40 	bne.w	8006c50 <HAL_GPIO_DeInit+0x10>
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40010000 	.word	0x40010000
 8006de4:	48000400 	.word	0x48000400
 8006de8:	48000800 	.word	0x48000800
 8006dec:	48000c00 	.word	0x48000c00
 8006df0:	48001000 	.word	0x48001000
 8006df4:	40010400 	.word	0x40010400

08006df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	807b      	strh	r3, [r7, #2]
 8006e04:	4613      	mov	r3, r2
 8006e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e08:	787b      	ldrb	r3, [r7, #1]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e0e:	887a      	ldrh	r2, [r7, #2]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e14:	e002      	b.n	8006e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e16:	887a      	ldrh	r2, [r7, #2]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e3a:	887a      	ldrh	r2, [r7, #2]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	041a      	lsls	r2, r3, #16
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	43d9      	mvns	r1, r3
 8006e46:	887b      	ldrh	r3, [r7, #2]
 8006e48:	400b      	ands	r3, r1
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	619a      	str	r2, [r3, #24]
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e081      	b.n	8006f72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fd f986 	bl	8004194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2224      	movs	r2, #36	; 0x24
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d107      	bne.n	8006ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	e006      	b.n	8006ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d104      	bne.n	8006ef6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e021      	b.n	8006fd0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2224      	movs	r2, #36	; 0x24
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7fd f941 	bl	800422c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	817b      	strh	r3, [r7, #10]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	f040 80da 	bne.w	80071ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_I2C_Master_Transmit+0x30>
 8007004:	2302      	movs	r3, #2
 8007006:	e0d3      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007010:	f7fe ff48 	bl	8005ea4 <HAL_GetTick>
 8007014:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	2319      	movs	r3, #25
 800701c:	2201      	movs	r2, #1
 800701e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f001 fc99 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e0be      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2221      	movs	r2, #33	; 0x21
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2210      	movs	r2, #16
 800703e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	893a      	ldrh	r2, [r7, #8]
 8007052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	2bff      	cmp	r3, #255	; 0xff
 8007062:	d90e      	bls.n	8007082 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22ff      	movs	r2, #255	; 0xff
 8007068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706e:	b2da      	uxtb	r2, r3
 8007070:	8979      	ldrh	r1, [r7, #10]
 8007072:	4b51      	ldr	r3, [pc, #324]	; (80071b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f001 fea8 	bl	8008dd0 <I2C_TransferConfig>
 8007080:	e06c      	b.n	800715c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007090:	b2da      	uxtb	r2, r3
 8007092:	8979      	ldrh	r1, [r7, #10]
 8007094:	4b48      	ldr	r3, [pc, #288]	; (80071b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f001 fe97 	bl	8008dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80070a2:	e05b      	b.n	800715c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	6a39      	ldr	r1, [r7, #32]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f001 fca5 	bl	80089f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e07b      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	781a      	ldrb	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d034      	beq.n	800715c <HAL_I2C_Master_Transmit+0x184>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d130      	bne.n	800715c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2200      	movs	r2, #0
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f001 fc28 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e04d      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	2bff      	cmp	r3, #255	; 0xff
 800711c:	d90e      	bls.n	800713c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	22ff      	movs	r2, #255	; 0xff
 8007122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007128:	b2da      	uxtb	r2, r3
 800712a:	8979      	ldrh	r1, [r7, #10]
 800712c:	2300      	movs	r3, #0
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f001 fe4b 	bl	8008dd0 <I2C_TransferConfig>
 800713a:	e00f      	b.n	800715c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714a:	b2da      	uxtb	r2, r3
 800714c:	8979      	ldrh	r1, [r7, #10]
 800714e:	2300      	movs	r3, #0
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f001 fe3a 	bl	8008dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d19e      	bne.n	80070a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	6a39      	ldr	r1, [r7, #32]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 fc8b 	bl	8008a86 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e01a      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2220      	movs	r2, #32
 8007180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6859      	ldr	r1, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <HAL_I2C_Master_Transmit+0x1e4>)
 800718e:	400b      	ands	r3, r1
 8007190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e000      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	80002000 	.word	0x80002000
 80071bc:	fe00e800 	.word	0xfe00e800

080071c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	461a      	mov	r2, r3
 80071cc:	460b      	mov	r3, r1
 80071ce:	817b      	strh	r3, [r7, #10]
 80071d0:	4613      	mov	r3, r2
 80071d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b20      	cmp	r3, #32
 80071de:	f040 80db 	bne.w	8007398 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_I2C_Master_Receive+0x30>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e0d4      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071f8:	f7fe fe54 	bl	8005ea4 <HAL_GetTick>
 80071fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2319      	movs	r3, #25
 8007204:	2201      	movs	r2, #1
 8007206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f001 fba5 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e0bf      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2222      	movs	r2, #34	; 0x22
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2210      	movs	r2, #16
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	893a      	ldrh	r2, [r7, #8]
 800723a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007246:	b29b      	uxth	r3, r3
 8007248:	2bff      	cmp	r3, #255	; 0xff
 800724a:	d90e      	bls.n	800726a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	22ff      	movs	r2, #255	; 0xff
 8007250:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007256:	b2da      	uxtb	r2, r3
 8007258:	8979      	ldrh	r1, [r7, #10]
 800725a:	4b52      	ldr	r3, [pc, #328]	; (80073a4 <HAL_I2C_Master_Receive+0x1e4>)
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f001 fdb4 	bl	8008dd0 <I2C_TransferConfig>
 8007268:	e06d      	b.n	8007346 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007278:	b2da      	uxtb	r2, r3
 800727a:	8979      	ldrh	r1, [r7, #10]
 800727c:	4b49      	ldr	r3, [pc, #292]	; (80073a4 <HAL_I2C_Master_Receive+0x1e4>)
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f001 fda3 	bl	8008dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800728a:	e05c      	b.n	8007346 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	6a39      	ldr	r1, [r7, #32]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 fc3b 	bl	8008b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e07c      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d034      	beq.n	8007346 <HAL_I2C_Master_Receive+0x186>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d130      	bne.n	8007346 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2200      	movs	r2, #0
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 fb33 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e04d      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	2bff      	cmp	r3, #255	; 0xff
 8007306:	d90e      	bls.n	8007326 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	22ff      	movs	r2, #255	; 0xff
 800730c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007312:	b2da      	uxtb	r2, r3
 8007314:	8979      	ldrh	r1, [r7, #10]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f001 fd56 	bl	8008dd0 <I2C_TransferConfig>
 8007324:	e00f      	b.n	8007346 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007334:	b2da      	uxtb	r2, r3
 8007336:	8979      	ldrh	r1, [r7, #10]
 8007338:	2300      	movs	r3, #0
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 fd45 	bl	8008dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d19d      	bne.n	800728c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	6a39      	ldr	r1, [r7, #32]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f001 fb96 	bl	8008a86 <I2C_WaitOnSTOPFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e01a      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2220      	movs	r2, #32
 800736a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6859      	ldr	r1, [r3, #4]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <HAL_I2C_Master_Receive+0x1e8>)
 8007378:	400b      	ands	r3, r1
 800737a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	80002400 	.word	0x80002400
 80073a8:	fe00e800 	.word	0xfe00e800

080073ac <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	461a      	mov	r2, r3
 80073b8:	460b      	mov	r3, r1
 80073ba:	817b      	strh	r3, [r7, #10]
 80073bc:	4613      	mov	r3, r2
 80073be:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d153      	bne.n	8007474 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073da:	d101      	bne.n	80073e0 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
 80073de:	e04a      	b.n	8007476 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_I2C_Master_Transmit_IT+0x42>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e043      	b.n	8007476 <HAL_I2C_Master_Transmit_IT+0xca>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2221      	movs	r2, #33	; 0x21
 80073fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2210      	movs	r2, #16
 8007402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	893a      	ldrh	r2, [r7, #8]
 8007416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4a19      	ldr	r2, [pc, #100]	; (8007480 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4a18      	ldr	r2, [pc, #96]	; (8007484 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8007422:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007428:	b29b      	uxth	r3, r3
 800742a:	2bff      	cmp	r3, #255	; 0xff
 800742c:	d906      	bls.n	800743c <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	22ff      	movs	r2, #255	; 0xff
 8007432:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e007      	b.n	800744c <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800744a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007450:	b2da      	uxtb	r2, r3
 8007452:	8979      	ldrh	r1, [r7, #10]
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f001 fcb8 	bl	8008dd0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007468:	2101      	movs	r1, #1
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f001 fce2 	bl	8008e34 <I2C_Enable_IRQ>

    return HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e000      	b.n	8007476 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007474:	2302      	movs	r3, #2
  }
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	ffff0000 	.word	0xffff0000
 8007484:	08007649 	.word	0x08007649
 8007488:	80002000 	.word	0x80002000

0800748c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af02      	add	r7, sp, #8
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	607a      	str	r2, [r7, #4]
 8007496:	461a      	mov	r2, r3
 8007498:	460b      	mov	r3, r1
 800749a:	817b      	strh	r3, [r7, #10]
 800749c:	4613      	mov	r3, r2
 800749e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d153      	bne.n	8007554 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ba:	d101      	bne.n	80074c0 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
 80074be:	e04a      	b.n	8007556 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <HAL_I2C_Master_Receive_IT+0x42>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e043      	b.n	8007556 <HAL_I2C_Master_Receive_IT+0xca>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2222      	movs	r2, #34	; 0x22
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2210      	movs	r2, #16
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	893a      	ldrh	r2, [r7, #8]
 80074f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a19      	ldr	r2, [pc, #100]	; (8007560 <HAL_I2C_Master_Receive_IT+0xd4>)
 80074fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4a18      	ldr	r2, [pc, #96]	; (8007564 <HAL_I2C_Master_Receive_IT+0xd8>)
 8007502:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2bff      	cmp	r3, #255	; 0xff
 800750c:	d906      	bls.n	800751c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	22ff      	movs	r2, #255	; 0xff
 8007512:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	e007      	b.n	800752c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800752a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007530:	b2da      	uxtb	r2, r3
 8007532:	8979      	ldrh	r1, [r7, #10]
 8007534:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <HAL_I2C_Master_Receive_IT+0xdc>)
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f001 fc48 	bl	8008dd0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007548:	2102      	movs	r1, #2
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f001 fc72 	bl	8008e34 <I2C_Enable_IRQ>

    return HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	e000      	b.n	8007556 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007554:	2302      	movs	r3, #2
  }
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	ffff0000 	.word	0xffff0000
 8007564:	08007649 	.word	0x08007649
 8007568:	80002400 	.word	0x80002400

0800756c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	68f9      	ldr	r1, [r7, #12]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3
  }
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
 80075d4:	4613      	mov	r3, r2
 80075d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <I2C_Master_ISR_IT+0x1e>
 8007662:	2302      	movs	r3, #2
 8007664:	e108      	b.n	8007878 <I2C_Master_ISR_IT+0x230>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d012      	beq.n	800769e <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00d      	beq.n	800769e <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2210      	movs	r2, #16
 8007688:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768e:	f043 0204 	orr.w	r2, r3, #4
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f001 f91d 	bl	80088d6 <I2C_Flush_TXDR>
 800769c:	e0d9      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d022      	beq.n	80076ee <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01d      	beq.n	80076ee <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f023 0304 	bic.w	r3, r3, #4
 80076b8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	b2d2      	uxtb	r2, r2
 80076c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076ec:	e0b1      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01d      	beq.n	8007734 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d018      	beq.n	8007734 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007732:	e08e      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773a:	2b00      	cmp	r3, #0
 800773c:	d05c      	beq.n	80077f8 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007744:	2b00      	cmp	r3, #0
 8007746:	d057      	beq.n	80077f8 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d040      	beq.n	80077d4 <I2C_Master_ISR_IT+0x18c>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d13c      	bne.n	80077d4 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007766:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	2bff      	cmp	r3, #255	; 0xff
 8007770:	d90e      	bls.n	8007790 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	22ff      	movs	r2, #255	; 0xff
 8007776:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777c:	b2da      	uxtb	r2, r3
 800777e:	8a79      	ldrh	r1, [r7, #18]
 8007780:	2300      	movs	r3, #0
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f001 fb21 	bl	8008dd0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800778e:	e032      	b.n	80077f6 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077a2:	d00b      	beq.n	80077bc <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077ae:	8a79      	ldrh	r1, [r7, #18]
 80077b0:	2000      	movs	r0, #0
 80077b2:	9000      	str	r0, [sp, #0]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f001 fb0b 	bl	8008dd0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ba:	e01c      	b.n	80077f6 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	8a79      	ldrh	r1, [r7, #18]
 80077c4:	2300      	movs	r3, #0
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 faff 	bl	8008dd0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d2:	e010      	b.n	80077f6 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077e2:	d003      	beq.n	80077ec <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fca3 	bl	8008130 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077ea:	e032      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80077ec:	2140      	movs	r1, #64	; 0x40
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 ff5a 	bl	80086a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077f4:	e02d      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
 80077f6:	e02c      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d027      	beq.n	8007852 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007808:	2b00      	cmp	r3, #0
 800780a:	d022      	beq.n	8007852 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d119      	bne.n	800784a <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007824:	d015      	beq.n	8007852 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800782e:	d108      	bne.n	8007842 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	e007      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fc74 	bl	8008130 <I2C_ITMasterSeqCplt>
 8007848:	e003      	b.n	8007852 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800784a:	2140      	movs	r1, #64	; 0x40
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 ff2b 	bl	80086a8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007866:	6979      	ldr	r1, [r7, #20]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fcfb 	bl	8008264 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <I2C_Slave_ISR_IT+0x24>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e0e1      	b.n	8007a68 <I2C_Slave_ISR_IT+0x1e8>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80078c0:	6939      	ldr	r1, [r7, #16]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fd96 	bl	80083f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d04b      	beq.n	800796a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d046      	beq.n	800796a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d128      	bne.n	8007938 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b28      	cmp	r3, #40	; 0x28
 80078f0:	d108      	bne.n	8007904 <I2C_Slave_ISR_IT+0x84>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078f8:	d104      	bne.n	8007904 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80078fa:	6939      	ldr	r1, [r7, #16]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fe7f 	bl	8008600 <I2C_ITListenCplt>
 8007902:	e031      	b.n	8007968 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b29      	cmp	r3, #41	; 0x29
 800790e:	d10e      	bne.n	800792e <I2C_Slave_ISR_IT+0xae>
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007916:	d00a      	beq.n	800792e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2210      	movs	r2, #16
 800791e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 ffd8 	bl	80088d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 fc3f 	bl	80081aa <I2C_ITSlaveSeqCplt>
 800792c:	e01c      	b.n	8007968 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2210      	movs	r2, #16
 8007934:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007936:	e08f      	b.n	8007a58 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2210      	movs	r2, #16
 800793e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007944:	f043 0204 	orr.w	r2, r3, #4
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <I2C_Slave_ISR_IT+0xda>
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007958:	d17e      	bne.n	8007a58 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795e:	4619      	mov	r1, r3
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fea1 	bl	80086a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007966:	e077      	b.n	8007a58 <I2C_Slave_ISR_IT+0x1d8>
 8007968:	e076      	b.n	8007a58 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d02f      	beq.n	80079d4 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800797a:	2b00      	cmp	r3, #0
 800797c:	d02a      	beq.n	80079d4 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d018      	beq.n	80079ba <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d14b      	bne.n	8007a5c <I2C_Slave_ISR_IT+0x1dc>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079ca:	d047      	beq.n	8007a5c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fbec 	bl	80081aa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80079d2:	e043      	b.n	8007a5c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80079e8:	6939      	ldr	r1, [r7, #16]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 fb1c 	bl	8008028 <I2C_ITAddrCplt>
 80079f0:	e035      	b.n	8007a5e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d030      	beq.n	8007a5e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d02b      	beq.n	8007a5e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d018      	beq.n	8007a42 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	781a      	ldrb	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a40:	e00d      	b.n	8007a5e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a48:	d002      	beq.n	8007a50 <I2C_Slave_ISR_IT+0x1d0>
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fbaa 	bl	80081aa <I2C_ITSlaveSeqCplt>
 8007a56:	e002      	b.n	8007a5e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8007a58:	bf00      	nop
 8007a5a:	e000      	b.n	8007a5e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8007a5c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <I2C_Master_ISR_DMA+0x1a>
 8007a86:	2302      	movs	r3, #2
 8007a88:	e0d9      	b.n	8007c3e <I2C_Master_ISR_DMA+0x1ce>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d016      	beq.n	8007aca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d011      	beq.n	8007aca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab2:	f043 0204 	orr.w	r2, r3, #4
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007aba:	2120      	movs	r1, #32
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f001 f9b9 	bl	8008e34 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 ff07 	bl	80088d6 <I2C_Flush_TXDR>
 8007ac8:	e0b4      	b.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d071      	beq.n	8007bb8 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d06c      	beq.n	8007bb8 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d04e      	beq.n	8007b96 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b04:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2bff      	cmp	r3, #255	; 0xff
 8007b0e:	d906      	bls.n	8007b1e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	22ff      	movs	r2, #255	; 0xff
 8007b14:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007b16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	e010      	b.n	8007b40 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b30:	d003      	beq.n	8007b3a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e002      	b.n	8007b40 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b3e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	8a79      	ldrh	r1, [r7, #18]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f001 f93e 	bl	8008dd0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b22      	cmp	r3, #34	; 0x22
 8007b70:	d108      	bne.n	8007b84 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b82:	e057      	b.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b92:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b94:	e04e      	b.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba4:	d003      	beq.n	8007bae <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fac2 	bl	8008130 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007bac:	e042      	b.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007bae:	2140      	movs	r1, #64	; 0x40
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fd79 	bl	80086a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007bb6:	e03d      	b.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d028      	beq.n	8007c14 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d023      	beq.n	8007c14 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d119      	bne.n	8007c0a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be4:	d025      	beq.n	8007c32 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bee:	d108      	bne.n	8007c02 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bfe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007c00:	e017      	b.n	8007c32 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fa94 	bl	8008130 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007c08:	e013      	b.n	8007c32 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007c0a:	2140      	movs	r1, #64	; 0x40
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fd4b 	bl	80086a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c12:	e00e      	b.n	8007c32 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fb1a 	bl	8008264 <I2C_ITMasterCplt>
 8007c30:	e000      	b.n	8007c34 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8007c32:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007c54:	4b87      	ldr	r3, [pc, #540]	; (8007e74 <I2C_Mem_ISR_DMA+0x22c>)
 8007c56:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <I2C_Mem_ISR_DMA+0x1e>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e102      	b.n	8007e6c <I2C_Mem_ISR_DMA+0x224>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d016      	beq.n	8007ca6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d011      	beq.n	8007ca6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2210      	movs	r2, #16
 8007c88:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8e:	f043 0204 	orr.w	r2, r3, #4
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007c96:	2120      	movs	r1, #32
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f001 f8cb 	bl	8008e34 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fe19 	bl	80088d6 <I2C_Flush_TXDR>
 8007ca4:	e0dd      	b.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00e      	beq.n	8007cce <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	651a      	str	r2, [r3, #80]	; 0x50
 8007ccc:	e0c9      	b.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d05b      	beq.n	8007d90 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d056      	beq.n	8007d90 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007ce2:	2110      	movs	r1, #16
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f001 f8a5 	bl	8008e34 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d048      	beq.n	8007d86 <I2C_Mem_ISR_DMA+0x13e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2bff      	cmp	r3, #255	; 0xff
 8007cfc:	d910      	bls.n	8007d20 <I2C_Mem_ISR_DMA+0xd8>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	22ff      	movs	r2, #255	; 0xff
 8007d02:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d08:	b299      	uxth	r1, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f001 f859 	bl	8008dd0 <I2C_TransferConfig>
 8007d1e:	e011      	b.n	8007d44 <I2C_Mem_ISR_DMA+0xfc>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	b299      	uxth	r1, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	2300      	movs	r3, #0
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f001 f846 	bl	8008dd0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b22      	cmp	r3, #34	; 0x22
 8007d60:	d108      	bne.n	8007d74 <I2C_Mem_ISR_DMA+0x12c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d72:	e076      	b.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d82:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d84:	e06d      	b.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007d86:	2140      	movs	r1, #64	; 0x40
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fc8d 	bl	80086a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007d8e:	e068      	b.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d055      	beq.n	8007e46 <I2C_Mem_ISR_DMA+0x1fe>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d050      	beq.n	8007e46 <I2C_Mem_ISR_DMA+0x1fe>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b22      	cmp	r3, #34	; 0x22
 8007dae:	d101      	bne.n	8007db4 <I2C_Mem_ISR_DMA+0x16c>
    {
      direction = I2C_GENERATE_START_READ;
 8007db0:	4b31      	ldr	r3, [pc, #196]	; (8007e78 <I2C_Mem_ISR_DMA+0x230>)
 8007db2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2bff      	cmp	r3, #255	; 0xff
 8007dbc:	d910      	bls.n	8007de0 <I2C_Mem_ISR_DMA+0x198>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	22ff      	movs	r2, #255	; 0xff
 8007dc2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	b299      	uxth	r1, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fff9 	bl	8008dd0 <I2C_TransferConfig>
 8007dde:	e011      	b.n	8007e04 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dee:	b299      	uxth	r1, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 ffe6 	bl	8008dd0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b22      	cmp	r3, #34	; 0x22
 8007e20:	d108      	bne.n	8007e34 <I2C_Mem_ISR_DMA+0x1ec>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e30:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e32:	e016      	b.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e44:	e00d      	b.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <I2C_Mem_ISR_DMA+0x21a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fa01 	bl	8008264 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	80002000 	.word	0x80002000
 8007e78:	80002400 	.word	0x80002400

08007e7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <I2C_Slave_ISR_DMA+0x24>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e0bf      	b.n	8008020 <I2C_Slave_ISR_DMA+0x1a4>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 fa98 	bl	80083f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f003 0310 	and.w	r3, r3, #16
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8095 	beq.w	8007ffa <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 808f 	beq.w	8007ffa <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d07d      	beq.n	8007fec <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00c      	beq.n	8007f12 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8007f30:	2301      	movs	r3, #1
 8007f32:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d128      	bne.n	8007f8c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b28      	cmp	r3, #40	; 0x28
 8007f44:	d108      	bne.n	8007f58 <I2C_Slave_ISR_DMA+0xdc>
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f4c:	d104      	bne.n	8007f58 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fb55 	bl	8008600 <I2C_ITListenCplt>
 8007f56:	e048      	b.n	8007fea <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b29      	cmp	r3, #41	; 0x29
 8007f62:	d10e      	bne.n	8007f82 <I2C_Slave_ISR_DMA+0x106>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f6a:	d00a      	beq.n	8007f82 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2210      	movs	r2, #16
 8007f72:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fcae 	bl	80088d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f915 	bl	80081aa <I2C_ITSlaveSeqCplt>
 8007f80:	e033      	b.n	8007fea <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2210      	movs	r2, #16
 8007f88:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f8a:	e034      	b.n	8007ff6 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2210      	movs	r2, #16
 8007f92:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f98:	f043 0204 	orr.w	r2, r3, #4
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fa6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <I2C_Slave_ISR_DMA+0x13a>
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb4:	d11f      	bne.n	8007ff6 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	2b21      	cmp	r3, #33	; 0x21
 8007fba:	d002      	beq.n	8007fc2 <I2C_Slave_ISR_DMA+0x146>
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	2b29      	cmp	r3, #41	; 0x29
 8007fc0:	d103      	bne.n	8007fca <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2221      	movs	r2, #33	; 0x21
 8007fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fc8:	e008      	b.n	8007fdc <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b22      	cmp	r3, #34	; 0x22
 8007fce:	d002      	beq.n	8007fd6 <I2C_Slave_ISR_DMA+0x15a>
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd4:	d102      	bne.n	8007fdc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2222      	movs	r2, #34	; 0x22
 8007fda:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 fb60 	bl	80086a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8007fe8:	e005      	b.n	8007ff6 <I2C_Slave_ISR_DMA+0x17a>
 8007fea:	e004      	b.n	8007ff6 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2210      	movs	r2, #16
 8007ff2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ff4:	e00f      	b.n	8008016 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8007ff6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ff8:	e00d      	b.n	8008016 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f809 	bl	8008028 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800803e:	2b28      	cmp	r3, #40	; 0x28
 8008040:	d16a      	bne.n	8008118 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	0c1b      	lsrs	r3, r3, #16
 800805a:	b29b      	uxth	r3, r3
 800805c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008060:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800806e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	b29b      	uxth	r3, r3
 8008078:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800807c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d138      	bne.n	80080f8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008086:	897b      	ldrh	r3, [r7, #10]
 8008088:	09db      	lsrs	r3, r3, #7
 800808a:	b29a      	uxth	r2, r3
 800808c:	89bb      	ldrh	r3, [r7, #12]
 800808e:	4053      	eors	r3, r2
 8008090:	b29b      	uxth	r3, r3
 8008092:	f003 0306 	and.w	r3, r3, #6
 8008096:	2b00      	cmp	r3, #0
 8008098:	d11c      	bne.n	80080d4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d13b      	bne.n	8008128 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2208      	movs	r2, #8
 80080bc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080c6:	89ba      	ldrh	r2, [r7, #12]
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fa7b 	bl	80075c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80080d2:	e029      	b.n	8008128 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80080d4:	893b      	ldrh	r3, [r7, #8]
 80080d6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 ff31 	bl	8008f44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080ea:	89ba      	ldrh	r2, [r7, #12]
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff fa69 	bl	80075c8 <HAL_I2C_AddrCallback>
}
 80080f6:	e017      	b.n	8008128 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 ff21 	bl	8008f44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800810a:	89ba      	ldrh	r2, [r7, #12]
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff fa59 	bl	80075c8 <HAL_I2C_AddrCallback>
}
 8008116:	e007      	b.n	8008128 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2208      	movs	r2, #8
 800811e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b21      	cmp	r3, #33	; 0x21
 800814a:	d115      	bne.n	8008178 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2211      	movs	r2, #17
 8008158:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008160:	2101      	movs	r1, #1
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 feee 	bl	8008f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fa f894 	bl	800229e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008176:	e014      	b.n	80081a2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2212      	movs	r2, #18
 8008184:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800818c:	2102      	movs	r1, #2
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fed8 	bl	8008f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fa f873 	bl	8002288 <HAL_I2C_MasterRxCpltCallback>
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e00c      	b.n	80081f8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081f6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b29      	cmp	r3, #41	; 0x29
 8008202:	d112      	bne.n	800822a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2228      	movs	r2, #40	; 0x28
 8008208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2221      	movs	r2, #33	; 0x21
 8008210:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008212:	2101      	movs	r1, #1
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fe95 	bl	8008f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff f9bc 	bl	80075a0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008228:	e017      	b.n	800825a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b2a      	cmp	r3, #42	; 0x2a
 8008234:	d111      	bne.n	800825a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2228      	movs	r2, #40	; 0x28
 800823a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2222      	movs	r2, #34	; 0x22
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008244:	2102      	movs	r1, #2
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fe7c 	bl	8008f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff f9ad 	bl	80075b4 <HAL_I2C_SlaveRxCpltCallback>
}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2220      	movs	r2, #32
 8008278:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b21      	cmp	r3, #33	; 0x21
 8008284:	d107      	bne.n	8008296 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008286:	2101      	movs	r1, #1
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fe5b 	bl	8008f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2211      	movs	r2, #17
 8008292:	631a      	str	r2, [r3, #48]	; 0x30
 8008294:	e00c      	b.n	80082b0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b22      	cmp	r3, #34	; 0x22
 80082a0:	d106      	bne.n	80082b0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80082a2:	2102      	movs	r1, #2
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fe4d 	bl	8008f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2212      	movs	r2, #18
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6859      	ldr	r1, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4b4c      	ldr	r3, [pc, #304]	; (80083ec <I2C_ITMasterCplt+0x188>)
 80082bc:	400b      	ands	r3, r1
 80082be:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a49      	ldr	r2, [pc, #292]	; (80083f0 <I2C_ITMasterCplt+0x18c>)
 80082ca:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2210      	movs	r2, #16
 80082dc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	f043 0204 	orr.w	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b60      	cmp	r3, #96	; 0x60
 80082f4:	d10a      	bne.n	800830c <I2C_ITMasterCplt+0xa8>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	b2db      	uxtb	r3, r3
 8008308:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800830a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fae2 	bl	80088d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b60      	cmp	r3, #96	; 0x60
 8008322:	d002      	beq.n	800832a <I2C_ITMasterCplt+0xc6>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d006      	beq.n	8008338 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f9b9 	bl	80086a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008336:	e054      	b.n	80083e2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b21      	cmp	r3, #33	; 0x21
 8008342:	d124      	bne.n	800838e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d10b      	bne.n	8008376 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff f942 	bl	80075f8 <HAL_I2C_MemTxCpltCallback>
}
 8008374:	e035      	b.n	80083e2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7f9 ff89 	bl	800229e <HAL_I2C_MasterTxCpltCallback>
}
 800838c:	e029      	b.n	80083e2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b22      	cmp	r3, #34	; 0x22
 8008398:	d123      	bne.n	80083e2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d10b      	bne.n	80083cc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff f921 	bl	800760c <HAL_I2C_MemRxCpltCallback>
}
 80083ca:	e00a      	b.n	80083e2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7f9 ff53 	bl	8002288 <HAL_I2C_MasterRxCpltCallback>
}
 80083e2:	bf00      	nop
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	fe00e800 	.word	0xfe00e800
 80083f0:	ffff0000 	.word	0xffff0000

080083f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008410:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2220      	movs	r2, #32
 8008418:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	2b21      	cmp	r3, #33	; 0x21
 800841e:	d002      	beq.n	8008426 <I2C_ITSlaveCplt+0x32>
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b29      	cmp	r3, #41	; 0x29
 8008424:	d108      	bne.n	8008438 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008426:	f248 0101 	movw	r1, #32769	; 0x8001
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fd8a 	bl	8008f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2221      	movs	r2, #33	; 0x21
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
 8008436:	e00d      	b.n	8008454 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b22      	cmp	r3, #34	; 0x22
 800843c:	d002      	beq.n	8008444 <I2C_ITSlaveCplt+0x50>
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	2b2a      	cmp	r3, #42	; 0x2a
 8008442:	d107      	bne.n	8008454 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008444:	f248 0102 	movw	r1, #32770	; 0x8002
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fd7b 	bl	8008f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2222      	movs	r2, #34	; 0x22
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008462:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6859      	ldr	r1, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4b62      	ldr	r3, [pc, #392]	; (80085f8 <I2C_ITSlaveCplt+0x204>)
 8008470:	400b      	ands	r3, r1
 8008472:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa2e 	bl	80088d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d013      	beq.n	80084ac <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008492:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01f      	beq.n	80084dc <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084aa:	e017      	b.n	80084dc <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d012      	beq.n	80084dc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d006      	beq.n	80084dc <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f003 0304 	and.w	r3, r3, #4
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d020      	beq.n	8008528 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 0304 	bic.w	r3, r3, #4
 80084ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008512:	3b01      	subs	r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008536:	f043 0204 	orr.w	r2, r3, #4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8a4 	bl	80086a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b28      	cmp	r3, #40	; 0x28
 800856a:	d141      	bne.n	80085f0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f846 	bl	8008600 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008574:	e03c      	b.n	80085f0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800857e:	d014      	beq.n	80085aa <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff fe12 	bl	80081aa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1c      	ldr	r2, [pc, #112]	; (80085fc <I2C_ITSlaveCplt+0x208>)
 800858a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2220      	movs	r2, #32
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff f81e 	bl	80075e4 <HAL_I2C_ListenCpltCallback>
}
 80085a8:	e022      	b.n	80085f0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b22      	cmp	r3, #34	; 0x22
 80085b4:	d10e      	bne.n	80085d4 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7fe fff1 	bl	80075b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80085d2:	e00d      	b.n	80085f0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7fe ffd8 	bl	80075a0 <HAL_I2C_SlaveTxCpltCallback>
}
 80085f0:	bf00      	nop
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	fe00e800 	.word	0xfe00e800
 80085fc:	ffff0000 	.word	0xffff0000

08008600 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a25      	ldr	r2, [pc, #148]	; (80086a4 <I2C_ITListenCplt+0xa4>)
 800860e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d022      	beq.n	800867c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008652:	2b00      	cmp	r3, #0
 8008654:	d012      	beq.n	800867c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008666:	b29b      	uxth	r3, r3
 8008668:	3b01      	subs	r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008674:	f043 0204 	orr.w	r2, r3, #4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800867c:	f248 0103 	movw	r1, #32771	; 0x8003
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc5f 	bl	8008f44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2210      	movs	r2, #16
 800868c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7fe ffa4 	bl	80075e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	ffff0000 	.word	0xffff0000

080086a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a6d      	ldr	r2, [pc, #436]	; (800887c <I2C_ITError+0x1d4>)
 80086c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b28      	cmp	r3, #40	; 0x28
 80086de:	d005      	beq.n	80086ec <I2C_ITError+0x44>
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	2b29      	cmp	r3, #41	; 0x29
 80086e4:	d002      	beq.n	80086ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ea:	d10b      	bne.n	8008704 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80086ec:	2103      	movs	r1, #3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fc28 	bl	8008f44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2228      	movs	r2, #40	; 0x28
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a60      	ldr	r2, [pc, #384]	; (8008880 <I2C_ITError+0x1d8>)
 8008700:	635a      	str	r2, [r3, #52]	; 0x34
 8008702:	e030      	b.n	8008766 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008704:	f248 0103 	movw	r1, #32771	; 0x8003
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fc1b 	bl	8008f44 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f8e1 	bl	80088d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b60      	cmp	r3, #96	; 0x60
 800871e:	d01f      	beq.n	8008760 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b20      	cmp	r3, #32
 8008734:	d114      	bne.n	8008760 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b10      	cmp	r3, #16
 8008742:	d109      	bne.n	8008758 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2210      	movs	r2, #16
 800874a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008750:	f043 0204 	orr.w	r2, r3, #4
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2220      	movs	r2, #32
 800875e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d039      	beq.n	80087e8 <I2C_ITError+0x140>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b11      	cmp	r3, #17
 8008778:	d002      	beq.n	8008780 <I2C_ITError+0xd8>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b21      	cmp	r3, #33	; 0x21
 800877e:	d133      	bne.n	80087e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800878a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800878e:	d107      	bne.n	80087a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800879e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd fe81 	bl	80064ac <HAL_DMA_GetState>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d017      	beq.n	80087e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	4a33      	ldr	r2, [pc, #204]	; (8008884 <I2C_ITError+0x1dc>)
 80087b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fd fd90 	bl	80062ea <HAL_DMA_Abort_IT>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d04d      	beq.n	800886c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087da:	4610      	mov	r0, r2
 80087dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087de:	e045      	b.n	800886c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f851 	bl	8008888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087e6:	e041      	b.n	800886c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d039      	beq.n	8008864 <I2C_ITError+0x1bc>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b12      	cmp	r3, #18
 80087f4:	d002      	beq.n	80087fc <I2C_ITError+0x154>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b22      	cmp	r3, #34	; 0x22
 80087fa:	d133      	bne.n	8008864 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800880a:	d107      	bne.n	800881c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800881a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008820:	4618      	mov	r0, r3
 8008822:	f7fd fe43 	bl	80064ac <HAL_DMA_GetState>
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	d017      	beq.n	800885c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008830:	4a14      	ldr	r2, [pc, #80]	; (8008884 <I2C_ITError+0x1dc>)
 8008832:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008840:	4618      	mov	r0, r3
 8008842:	f7fd fd52 	bl	80062ea <HAL_DMA_Abort_IT>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d011      	beq.n	8008870 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008856:	4610      	mov	r0, r2
 8008858:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800885a:	e009      	b.n	8008870 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f813 	bl	8008888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008862:	e005      	b.n	8008870 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f80f 	bl	8008888 <I2C_TreatErrorCallback>
  }
}
 800886a:	e002      	b.n	8008872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008870:	bf00      	nop
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	ffff0000 	.word	0xffff0000
 8008880:	08007881 	.word	0x08007881
 8008884:	0800891f 	.word	0x0800891f

08008888 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b60      	cmp	r3, #96	; 0x60
 800889a:	d10e      	bne.n	80088ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fe febe 	bl	8007634 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088b8:	e009      	b.n	80088ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7fe fea9 	bl	8007620 <HAL_I2C_ErrorCallback>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d103      	bne.n	80088f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d007      	beq.n	8008912 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	699a      	ldr	r2, [r3, #24]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0201 	orr.w	r2, r2, #1
 8008910:	619a      	str	r2, [r3, #24]
  }
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008938:	2200      	movs	r2, #0
 800893a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008948:	2200      	movs	r2, #0
 800894a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff ff9b 	bl	8008888 <I2C_TreatErrorCallback>
}
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4613      	mov	r3, r2
 8008968:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800896a:	e031      	b.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008972:	d02d      	beq.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008974:	f7fd fa96 	bl	8005ea4 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d302      	bcc.n	800898a <I2C_WaitOnFlagUntilTimeout+0x30>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d122      	bne.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699a      	ldr	r2, [r3, #24]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4013      	ands	r3, r2
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	429a      	cmp	r2, r3
 8008998:	bf0c      	ite	eq
 800899a:	2301      	moveq	r3, #1
 800899c:	2300      	movne	r3, #0
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d113      	bne.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ac:	f043 0220 	orr.w	r2, r3, #32
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e00f      	b.n	80089f0 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	4013      	ands	r3, r2
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	429a      	cmp	r2, r3
 80089de:	bf0c      	ite	eq
 80089e0:	2301      	moveq	r3, #1
 80089e2:	2300      	movne	r3, #0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d0be      	beq.n	800896c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a04:	e033      	b.n	8008a6e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 f900 	bl	8008c10 <I2C_IsErrorOccurred>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e031      	b.n	8008a7e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a20:	d025      	beq.n	8008a6e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a22:	f7fd fa3f 	bl	8005ea4 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d302      	bcc.n	8008a38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d11a      	bne.n	8008a6e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d013      	beq.n	8008a6e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4a:	f043 0220 	orr.w	r2, r3, #32
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e007      	b.n	8008a7e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d1c4      	bne.n	8008a06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a92:	e02f      	b.n	8008af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f8b9 	bl	8008c10 <I2C_IsErrorOccurred>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e02d      	b.n	8008b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa8:	f7fd f9fc 	bl	8005ea4 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d302      	bcc.n	8008abe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d11a      	bne.n	8008af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d013      	beq.n	8008af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad0:	f043 0220 	orr.w	r2, r3, #32
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e007      	b.n	8008b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d1c8      	bne.n	8008a94 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b18:	e06b      	b.n	8008bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f876 	bl	8008c10 <I2C_IsErrorOccurred>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e069      	b.n	8008c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	d138      	bne.n	8008bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d105      	bne.n	8008b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	e055      	b.n	8008c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d107      	bne.n	8008b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2210      	movs	r2, #16
 8008b6a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2204      	movs	r2, #4
 8008b70:	645a      	str	r2, [r3, #68]	; 0x44
 8008b72:	e002      	b.n	8008b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6859      	ldr	r1, [r3, #4]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008b8e:	400b      	ands	r3, r1
 8008b90:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e029      	b.n	8008c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bae:	f7fd f979 	bl	8005ea4 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d302      	bcc.n	8008bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d116      	bne.n	8008bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d00f      	beq.n	8008bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd6:	f043 0220 	orr.w	r2, r3, #32
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e007      	b.n	8008c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d18c      	bne.n	8008b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	fe00e800 	.word	0xfe00e800

08008c10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	; 0x28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f003 0310 	and.w	r3, r3, #16
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d068      	beq.n	8008d0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2210      	movs	r2, #16
 8008c42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c44:	e049      	b.n	8008cda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d045      	beq.n	8008cda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c4e:	f7fd f929 	bl	8005ea4 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d302      	bcc.n	8008c64 <I2C_IsErrorOccurred+0x54>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d13a      	bne.n	8008cda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c86:	d121      	bne.n	8008ccc <I2C_IsErrorOccurred+0xbc>
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c8e:	d01d      	beq.n	8008ccc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008c90:	7cfb      	ldrb	r3, [r7, #19]
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d01a      	beq.n	8008ccc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ca4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008ca6:	f7fd f8fd 	bl	8005ea4 <HAL_GetTick>
 8008caa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cac:	e00e      	b.n	8008ccc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008cae:	f7fd f8f9 	bl	8005ea4 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b19      	cmp	r3, #25
 8008cba:	d907      	bls.n	8008ccc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	f043 0320 	orr.w	r3, r3, #32
 8008cc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008cca:	e006      	b.n	8008cda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	d1e9      	bne.n	8008cae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	d003      	beq.n	8008cf0 <I2C_IsErrorOccurred+0xe0>
 8008ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0aa      	beq.n	8008c46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d103      	bne.n	8008d00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	f043 0304 	orr.w	r3, r3, #4
 8008d06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	f043 0308 	orr.w	r3, r3, #8
 8008d48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	f043 0302 	orr.w	r3, r3, #2
 8008d6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01c      	beq.n	8008dbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7ff fda6 	bl	80088d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6859      	ldr	r1, [r3, #4]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <I2C_IsErrorOccurred+0x1bc>)
 8008d96:	400b      	ands	r3, r1
 8008d98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	431a      	orrs	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3728      	adds	r7, #40	; 0x28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	fe00e800 	.word	0xfe00e800

08008dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	817b      	strh	r3, [r7, #10]
 8008dde:	4613      	mov	r3, r2
 8008de0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008de2:	897b      	ldrh	r3, [r7, #10]
 8008de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008de8:	7a7b      	ldrb	r3, [r7, #9]
 8008dea:	041b      	lsls	r3, r3, #16
 8008dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008df0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	0d5b      	lsrs	r3, r3, #21
 8008e0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008e0e:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <I2C_TransferConfig+0x60>)
 8008e10:	430b      	orrs	r3, r1
 8008e12:	43db      	mvns	r3, r3
 8008e14:	ea02 0103 	and.w	r1, r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	03ff63ff 	.word	0x03ff63ff

08008e34 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e48:	4a3b      	ldr	r2, [pc, #236]	; (8008f38 <I2C_Enable_IRQ+0x104>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d032      	beq.n	8008eb4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008e52:	4a3a      	ldr	r2, [pc, #232]	; (8008f3c <I2C_Enable_IRQ+0x108>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d02d      	beq.n	8008eb4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008e5c:	4a38      	ldr	r2, [pc, #224]	; (8008f40 <I2C_Enable_IRQ+0x10c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d028      	beq.n	8008eb4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008e62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da03      	bge.n	8008e72 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008e70:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e72:	887b      	ldrh	r3, [r7, #2]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008e82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008e84:	887b      	ldrh	r3, [r7, #2]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008e94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008e96:	887b      	ldrh	r3, [r7, #2]
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	d103      	bne.n	8008ea4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008ea2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008ea4:	887b      	ldrh	r3, [r7, #2]
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d138      	bne.n	8008f1c <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f043 0320 	orr.w	r3, r3, #32
 8008eb0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008eb2:	e033      	b.n	8008f1c <I2C_Enable_IRQ+0xe8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	da03      	bge.n	8008ec4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008ec2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008ec4:	887b      	ldrh	r3, [r7, #2]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008ed4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ed6:	887b      	ldrh	r3, [r7, #2]
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008ee6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ee8:	887b      	ldrh	r3, [r7, #2]
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d103      	bne.n	8008ef6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008ef4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008ef6:	887b      	ldrh	r3, [r7, #2]
 8008ef8:	2b20      	cmp	r3, #32
 8008efa:	d103      	bne.n	8008f04 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f02:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f08:	4a0d      	ldr	r2, [pc, #52]	; (8008f40 <I2C_Enable_IRQ+0x10c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d006      	beq.n	8008f1c <I2C_Enable_IRQ+0xe8>
 8008f0e:	887b      	ldrh	r3, [r7, #2]
 8008f10:	2b40      	cmp	r3, #64	; 0x40
 8008f12:	d103      	bne.n	8008f1c <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	601a      	str	r2, [r3, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	08007a71 	.word	0x08007a71
 8008f3c:	08007e7d 	.word	0x08007e7d
 8008f40:	08007c49 	.word	0x08007c49

08008f44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f54:	887b      	ldrh	r3, [r7, #2]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00f      	beq.n	8008f7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008f64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f72:	2b28      	cmp	r3, #40	; 0x28
 8008f74:	d003      	beq.n	8008f7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00f      	beq.n	8008fa8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008f8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f9c:	2b28      	cmp	r3, #40	; 0x28
 8008f9e:	d003      	beq.n	8008fa8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008fa6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008fa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da03      	bge.n	8008fb8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008fb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fb8:	887b      	ldrh	r3, [r7, #2]
 8008fba:	2b10      	cmp	r3, #16
 8008fbc:	d103      	bne.n	8008fc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008fc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fc6:	887b      	ldrh	r3, [r7, #2]
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d103      	bne.n	8008fd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f043 0320 	orr.w	r3, r3, #32
 8008fd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008fd4:	887b      	ldrh	r3, [r7, #2]
 8008fd6:	2b40      	cmp	r3, #64	; 0x40
 8008fd8:	d103      	bne.n	8008fe2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6819      	ldr	r1, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	43da      	mvns	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	400a      	ands	r2, r1
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b20      	cmp	r3, #32
 8009014:	d138      	bne.n	8009088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009020:	2302      	movs	r3, #2
 8009022:	e032      	b.n	800908a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2224      	movs	r2, #36	; 0x24
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0201 	bic.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6819      	ldr	r1, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	e000      	b.n	800908a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009088:	2302      	movs	r3, #2
  }
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d139      	bne.n	8009120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e033      	b.n	8009122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2224      	movs	r2, #36	; 0x24
 80090c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0201 	bic.w	r2, r2, #1
 80090d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80090e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	e000      	b.n	8009122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009120:	2302      	movs	r3, #2
  }
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
	...

08009130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8009136:	af00      	add	r7, sp, #0
 8009138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800913c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009140:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f001 b823 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800915a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 817d 	beq.w	8009466 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800916c:	4bbc      	ldr	r3, [pc, #752]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f003 030c 	and.w	r3, r3, #12
 8009174:	2b04      	cmp	r3, #4
 8009176:	d00c      	beq.n	8009192 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009178:	4bb9      	ldr	r3, [pc, #740]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f003 030c 	and.w	r3, r3, #12
 8009180:	2b08      	cmp	r3, #8
 8009182:	d15c      	bne.n	800923e <HAL_RCC_OscConfig+0x10e>
 8009184:	4bb6      	ldr	r3, [pc, #728]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009190:	d155      	bne.n	800923e <HAL_RCC_OscConfig+0x10e>
 8009192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009196:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800919a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800919e:	fa93 f3a3 	rbit	r3, r3
 80091a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80091a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091aa:	fab3 f383 	clz	r3, r3
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	095b      	lsrs	r3, r3, #5
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f043 0301 	orr.w	r3, r3, #1
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d102      	bne.n	80091c4 <HAL_RCC_OscConfig+0x94>
 80091be:	4ba8      	ldr	r3, [pc, #672]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	e015      	b.n	80091f0 <HAL_RCC_OscConfig+0xc0>
 80091c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80091d0:	fa93 f3a3 	rbit	r3, r3
 80091d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80091d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80091e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80091e4:	fa93 f3a3 	rbit	r3, r3
 80091e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80091ec:	4b9c      	ldr	r3, [pc, #624]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80091f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80091f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80091fc:	fa92 f2a2 	rbit	r2, r2
 8009200:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8009204:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8009208:	fab2 f282 	clz	r2, r2
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	f042 0220 	orr.w	r2, r2, #32
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	f002 021f 	and.w	r2, r2, #31
 8009218:	2101      	movs	r1, #1
 800921a:	fa01 f202 	lsl.w	r2, r1, r2
 800921e:	4013      	ands	r3, r2
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 811f 	beq.w	8009464 <HAL_RCC_OscConfig+0x334>
 8009226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800922a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 8116 	bne.w	8009464 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	f000 bfaf 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800923e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800924e:	d106      	bne.n	800925e <HAL_RCC_OscConfig+0x12e>
 8009250:	4b83      	ldr	r3, [pc, #524]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a82      	ldr	r2, [pc, #520]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	e036      	b.n	80092cc <HAL_RCC_OscConfig+0x19c>
 800925e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10c      	bne.n	8009288 <HAL_RCC_OscConfig+0x158>
 800926e:	4b7c      	ldr	r3, [pc, #496]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a7b      	ldr	r2, [pc, #492]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	4b79      	ldr	r3, [pc, #484]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a78      	ldr	r2, [pc, #480]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	e021      	b.n	80092cc <HAL_RCC_OscConfig+0x19c>
 8009288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800928c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009298:	d10c      	bne.n	80092b4 <HAL_RCC_OscConfig+0x184>
 800929a:	4b71      	ldr	r3, [pc, #452]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a70      	ldr	r2, [pc, #448]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	4b6e      	ldr	r3, [pc, #440]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a6d      	ldr	r2, [pc, #436]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	e00b      	b.n	80092cc <HAL_RCC_OscConfig+0x19c>
 80092b4:	4b6a      	ldr	r3, [pc, #424]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a69      	ldr	r2, [pc, #420]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	4b67      	ldr	r3, [pc, #412]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a66      	ldr	r2, [pc, #408]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80092cc:	4b64      	ldr	r3, [pc, #400]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	f023 020f 	bic.w	r2, r3, #15
 80092d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	495f      	ldr	r1, [pc, #380]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d059      	beq.n	80093aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f6:	f7fc fdd5 	bl	8005ea4 <HAL_GetTick>
 80092fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092fe:	e00a      	b.n	8009316 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009300:	f7fc fdd0 	bl	8005ea4 <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b64      	cmp	r3, #100	; 0x64
 800930e:	d902      	bls.n	8009316 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	f000 bf43 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
 8009316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800931a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800931e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8009322:	fa93 f3a3 	rbit	r3, r3
 8009326:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800932a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800932e:	fab3 f383 	clz	r3, r3
 8009332:	b2db      	uxtb	r3, r3
 8009334:	095b      	lsrs	r3, r3, #5
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f043 0301 	orr.w	r3, r3, #1
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b01      	cmp	r3, #1
 8009340:	d102      	bne.n	8009348 <HAL_RCC_OscConfig+0x218>
 8009342:	4b47      	ldr	r3, [pc, #284]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	e015      	b.n	8009374 <HAL_RCC_OscConfig+0x244>
 8009348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800934c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009350:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8009354:	fa93 f3a3 	rbit	r3, r3
 8009358:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800935c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009360:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8009364:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009368:	fa93 f3a3 	rbit	r3, r3
 800936c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8009370:	4b3b      	ldr	r3, [pc, #236]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009378:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800937c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8009380:	fa92 f2a2 	rbit	r2, r2
 8009384:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8009388:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800938c:	fab2 f282 	clz	r2, r2
 8009390:	b2d2      	uxtb	r2, r2
 8009392:	f042 0220 	orr.w	r2, r2, #32
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	f002 021f 	and.w	r2, r2, #31
 800939c:	2101      	movs	r1, #1
 800939e:	fa01 f202 	lsl.w	r2, r1, r2
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0ab      	beq.n	8009300 <HAL_RCC_OscConfig+0x1d0>
 80093a8:	e05d      	b.n	8009466 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093aa:	f7fc fd7b 	bl	8005ea4 <HAL_GetTick>
 80093ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093b2:	e00a      	b.n	80093ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093b4:	f7fc fd76 	bl	8005ea4 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b64      	cmp	r3, #100	; 0x64
 80093c2:	d902      	bls.n	80093ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	f000 bee9 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
 80093ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80093d6:	fa93 f3a3 	rbit	r3, r3
 80093da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80093de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093e2:	fab3 f383 	clz	r3, r3
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	095b      	lsrs	r3, r3, #5
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d102      	bne.n	80093fc <HAL_RCC_OscConfig+0x2cc>
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	e015      	b.n	8009428 <HAL_RCC_OscConfig+0x2f8>
 80093fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009400:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009404:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009408:	fa93 f3a3 	rbit	r3, r3
 800940c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009414:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009418:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800941c:	fa93 f3a3 	rbit	r3, r3
 8009420:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <HAL_RCC_OscConfig+0x330>)
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800942c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8009430:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009434:	fa92 f2a2 	rbit	r2, r2
 8009438:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800943c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009440:	fab2 f282 	clz	r2, r2
 8009444:	b2d2      	uxtb	r2, r2
 8009446:	f042 0220 	orr.w	r2, r2, #32
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	f002 021f 	and.w	r2, r2, #31
 8009450:	2101      	movs	r1, #1
 8009452:	fa01 f202 	lsl.w	r2, r1, r2
 8009456:	4013      	ands	r3, r2
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1ab      	bne.n	80093b4 <HAL_RCC_OscConfig+0x284>
 800945c:	e003      	b.n	8009466 <HAL_RCC_OscConfig+0x336>
 800945e:	bf00      	nop
 8009460:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800946a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 817d 	beq.w	8009776 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800947c:	4ba6      	ldr	r3, [pc, #664]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f003 030c 	and.w	r3, r3, #12
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009488:	4ba3      	ldr	r3, [pc, #652]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f003 030c 	and.w	r3, r3, #12
 8009490:	2b08      	cmp	r3, #8
 8009492:	d172      	bne.n	800957a <HAL_RCC_OscConfig+0x44a>
 8009494:	4ba0      	ldr	r3, [pc, #640]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d16c      	bne.n	800957a <HAL_RCC_OscConfig+0x44a>
 80094a0:	2302      	movs	r3, #2
 80094a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80094aa:	fa93 f3a3 	rbit	r3, r3
 80094ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80094b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094b6:	fab3 f383 	clz	r3, r3
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	f043 0301 	orr.w	r3, r3, #1
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d102      	bne.n	80094d0 <HAL_RCC_OscConfig+0x3a0>
 80094ca:	4b93      	ldr	r3, [pc, #588]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	e013      	b.n	80094f8 <HAL_RCC_OscConfig+0x3c8>
 80094d0:	2302      	movs	r3, #2
 80094d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80094da:	fa93 f3a3 	rbit	r3, r3
 80094de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80094e2:	2302      	movs	r3, #2
 80094e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80094e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80094ec:	fa93 f3a3 	rbit	r3, r3
 80094f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80094f4:	4b88      	ldr	r3, [pc, #544]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2202      	movs	r2, #2
 80094fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80094fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009502:	fa92 f2a2 	rbit	r2, r2
 8009506:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800950a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800950e:	fab2 f282 	clz	r2, r2
 8009512:	b2d2      	uxtb	r2, r2
 8009514:	f042 0220 	orr.w	r2, r2, #32
 8009518:	b2d2      	uxtb	r2, r2
 800951a:	f002 021f 	and.w	r2, r2, #31
 800951e:	2101      	movs	r1, #1
 8009520:	fa01 f202 	lsl.w	r2, r1, r2
 8009524:	4013      	ands	r3, r2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <HAL_RCC_OscConfig+0x410>
 800952a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800952e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d002      	beq.n	8009540 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	f000 be2e 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009540:	4b75      	ldr	r3, [pc, #468]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800954c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	21f8      	movs	r1, #248	; 0xf8
 8009556:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800955a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800955e:	fa91 f1a1 	rbit	r1, r1
 8009562:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8009566:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800956a:	fab1 f181 	clz	r1, r1
 800956e:	b2c9      	uxtb	r1, r1
 8009570:	408b      	lsls	r3, r1
 8009572:	4969      	ldr	r1, [pc, #420]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 8009574:	4313      	orrs	r3, r2
 8009576:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009578:	e0fd      	b.n	8009776 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800957a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800957e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 8088 	beq.w	800969c <HAL_RCC_OscConfig+0x56c>
 800958c:	2301      	movs	r3, #1
 800958e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009592:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009596:	fa93 f3a3 	rbit	r3, r3
 800959a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800959e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095a2:	fab3 f383 	clz	r3, r3
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80095ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	461a      	mov	r2, r3
 80095b4:	2301      	movs	r3, #1
 80095b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b8:	f7fc fc74 	bl	8005ea4 <HAL_GetTick>
 80095bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095c0:	e00a      	b.n	80095d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095c2:	f7fc fc6f 	bl	8005ea4 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d902      	bls.n	80095d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	f000 bde2 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
 80095d8:	2302      	movs	r3, #2
 80095da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80095e2:	fa93 f3a3 	rbit	r3, r3
 80095e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80095ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095ee:	fab3 f383 	clz	r3, r3
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d102      	bne.n	8009608 <HAL_RCC_OscConfig+0x4d8>
 8009602:	4b45      	ldr	r3, [pc, #276]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	e013      	b.n	8009630 <HAL_RCC_OscConfig+0x500>
 8009608:	2302      	movs	r3, #2
 800960a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800960e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009612:	fa93 f3a3 	rbit	r3, r3
 8009616:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800961a:	2302      	movs	r3, #2
 800961c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009620:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009624:	fa93 f3a3 	rbit	r3, r3
 8009628:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800962c:	4b3a      	ldr	r3, [pc, #232]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2202      	movs	r2, #2
 8009632:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8009636:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800963a:	fa92 f2a2 	rbit	r2, r2
 800963e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8009642:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009646:	fab2 f282 	clz	r2, r2
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	f042 0220 	orr.w	r2, r2, #32
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	f002 021f 	and.w	r2, r2, #31
 8009656:	2101      	movs	r1, #1
 8009658:	fa01 f202 	lsl.w	r2, r1, r2
 800965c:	4013      	ands	r3, r2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0af      	beq.n	80095c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009662:	4b2d      	ldr	r3, [pc, #180]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800966a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800966e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	21f8      	movs	r1, #248	; 0xf8
 8009678:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800967c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009680:	fa91 f1a1 	rbit	r1, r1
 8009684:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8009688:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800968c:	fab1 f181 	clz	r1, r1
 8009690:	b2c9      	uxtb	r1, r1
 8009692:	408b      	lsls	r3, r1
 8009694:	4920      	ldr	r1, [pc, #128]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 8009696:	4313      	orrs	r3, r2
 8009698:	600b      	str	r3, [r1, #0]
 800969a:	e06c      	b.n	8009776 <HAL_RCC_OscConfig+0x646>
 800969c:	2301      	movs	r3, #1
 800969e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80096a6:	fa93 f3a3 	rbit	r3, r3
 80096aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80096ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096b2:	fab3 f383 	clz	r3, r3
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80096bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	461a      	mov	r2, r3
 80096c4:	2300      	movs	r3, #0
 80096c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096c8:	f7fc fbec 	bl	8005ea4 <HAL_GetTick>
 80096cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096d0:	e00a      	b.n	80096e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096d2:	f7fc fbe7 	bl	8005ea4 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d902      	bls.n	80096e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	f000 bd5a 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
 80096e8:	2302      	movs	r3, #2
 80096ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096f2:	fa93 f3a3 	rbit	r3, r3
 80096f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80096fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096fe:	fab3 f383 	clz	r3, r3
 8009702:	b2db      	uxtb	r3, r3
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b01      	cmp	r3, #1
 8009710:	d104      	bne.n	800971c <HAL_RCC_OscConfig+0x5ec>
 8009712:	4b01      	ldr	r3, [pc, #4]	; (8009718 <HAL_RCC_OscConfig+0x5e8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	e015      	b.n	8009744 <HAL_RCC_OscConfig+0x614>
 8009718:	40021000 	.word	0x40021000
 800971c:	2302      	movs	r3, #2
 800971e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009726:	fa93 f3a3 	rbit	r3, r3
 800972a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800972e:	2302      	movs	r3, #2
 8009730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009734:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009738:	fa93 f3a3 	rbit	r3, r3
 800973c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009740:	4bc8      	ldr	r3, [pc, #800]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	2202      	movs	r2, #2
 8009746:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800974a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800974e:	fa92 f2a2 	rbit	r2, r2
 8009752:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8009756:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800975a:	fab2 f282 	clz	r2, r2
 800975e:	b2d2      	uxtb	r2, r2
 8009760:	f042 0220 	orr.w	r2, r2, #32
 8009764:	b2d2      	uxtb	r2, r2
 8009766:	f002 021f 	and.w	r2, r2, #31
 800976a:	2101      	movs	r1, #1
 800976c:	fa01 f202 	lsl.w	r2, r1, r2
 8009770:	4013      	ands	r3, r2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1ad      	bne.n	80096d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800977a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0308 	and.w	r3, r3, #8
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8110 	beq.w	80099ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800978c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d079      	beq.n	8009890 <HAL_RCC_OscConfig+0x760>
 800979c:	2301      	movs	r3, #1
 800979e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80097a6:	fa93 f3a3 	rbit	r3, r3
 80097aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80097ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097b2:	fab3 f383 	clz	r3, r3
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	4bab      	ldr	r3, [pc, #684]	; (8009a68 <HAL_RCC_OscConfig+0x938>)
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	461a      	mov	r2, r3
 80097c2:	2301      	movs	r3, #1
 80097c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097c6:	f7fc fb6d 	bl	8005ea4 <HAL_GetTick>
 80097ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097ce:	e00a      	b.n	80097e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097d0:	f7fc fb68 	bl	8005ea4 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d902      	bls.n	80097e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	f000 bcdb 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
 80097e6:	2302      	movs	r3, #2
 80097e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097f0:	fa93 f3a3 	rbit	r3, r3
 80097f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80097f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009800:	2202      	movs	r2, #2
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009808:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	fa93 f2a3 	rbit	r2, r3
 8009812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009824:	2202      	movs	r2, #2
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800982c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	fa93 f2a3 	rbit	r2, r3
 8009836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800983a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800983e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009840:	4b88      	ldr	r3, [pc, #544]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 8009842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009848:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800984c:	2102      	movs	r1, #2
 800984e:	6019      	str	r1, [r3, #0]
 8009850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009854:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	fa93 f1a3 	rbit	r1, r3
 800985e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009866:	6019      	str	r1, [r3, #0]
  return result;
 8009868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800986c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	fab3 f383 	clz	r3, r3
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 031f 	and.w	r3, r3, #31
 8009882:	2101      	movs	r1, #1
 8009884:	fa01 f303 	lsl.w	r3, r1, r3
 8009888:	4013      	ands	r3, r2
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0a0      	beq.n	80097d0 <HAL_RCC_OscConfig+0x6a0>
 800988e:	e08d      	b.n	80099ac <HAL_RCC_OscConfig+0x87c>
 8009890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009894:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009898:	2201      	movs	r2, #1
 800989a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800989c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	fa93 f2a3 	rbit	r2, r3
 80098aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098b2:	601a      	str	r2, [r3, #0]
  return result;
 80098b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098be:	fab3 f383 	clz	r3, r3
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	4b68      	ldr	r3, [pc, #416]	; (8009a68 <HAL_RCC_OscConfig+0x938>)
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	461a      	mov	r2, r3
 80098ce:	2300      	movs	r3, #0
 80098d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098d2:	f7fc fae7 	bl	8005ea4 <HAL_GetTick>
 80098d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098da:	e00a      	b.n	80098f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098dc:	f7fc fae2 	bl	8005ea4 <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d902      	bls.n	80098f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	f000 bc55 	b.w	800a19c <HAL_RCC_OscConfig+0x106c>
 80098f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80098fa:	2202      	movs	r2, #2
 80098fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009902:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	fa93 f2a3 	rbit	r2, r3
 800990c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009910:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800991a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800991e:	2202      	movs	r2, #2
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009926:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	fa93 f2a3 	rbit	r2, r3
 8009930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800993e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009942:	2202      	movs	r2, #2
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800994a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	fa93 f2a3 	rbit	r2, r3
 8009954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009958:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800995c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800995e:	4b41      	ldr	r3, [pc, #260]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 8009960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009966:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800996a:	2102      	movs	r1, #2
 800996c:	6019      	str	r1, [r3, #0]
 800996e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009972:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	fa93 f1a3 	rbit	r1, r3
 800997c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009980:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009984:	6019      	str	r1, [r3, #0]
  return result;
 8009986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800998a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	fab3 f383 	clz	r3, r3
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800999a:	b2db      	uxtb	r3, r3
 800999c:	f003 031f 	and.w	r3, r3, #31
 80099a0:	2101      	movs	r1, #1
 80099a2:	fa01 f303 	lsl.w	r3, r1, r3
 80099a6:	4013      	ands	r3, r2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d197      	bne.n	80098dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0304 	and.w	r3, r3, #4
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 81a1 	beq.w	8009d04 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099c8:	4b26      	ldr	r3, [pc, #152]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d116      	bne.n	8009a02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099d4:	4b23      	ldr	r3, [pc, #140]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	4a22      	ldr	r2, [pc, #136]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 80099da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099de:	61d3      	str	r3, [r2, #28]
 80099e0:	4b20      	ldr	r3, [pc, #128]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80099e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80099fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a02:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <HAL_RCC_OscConfig+0x93c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d11a      	bne.n	8009a44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a0e:	4b17      	ldr	r3, [pc, #92]	; (8009a6c <HAL_RCC_OscConfig+0x93c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a16      	ldr	r2, [pc, #88]	; (8009a6c <HAL_RCC_OscConfig+0x93c>)
 8009a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a1a:	f7fc fa43 	bl	8005ea4 <HAL_GetTick>
 8009a1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a22:	e009      	b.n	8009a38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a24:	f7fc fa3e 	bl	8005ea4 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b64      	cmp	r3, #100	; 0x64
 8009a32:	d901      	bls.n	8009a38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e3b1      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a38:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <HAL_RCC_OscConfig+0x93c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0ef      	beq.n	8009a24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d10d      	bne.n	8009a70 <HAL_RCC_OscConfig+0x940>
 8009a54:	4b03      	ldr	r3, [pc, #12]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	4a02      	ldr	r2, [pc, #8]	; (8009a64 <HAL_RCC_OscConfig+0x934>)
 8009a5a:	f043 0301 	orr.w	r3, r3, #1
 8009a5e:	6213      	str	r3, [r2, #32]
 8009a60:	e03c      	b.n	8009adc <HAL_RCC_OscConfig+0x9ac>
 8009a62:	bf00      	nop
 8009a64:	40021000 	.word	0x40021000
 8009a68:	10908120 	.word	0x10908120
 8009a6c:	40007000 	.word	0x40007000
 8009a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10c      	bne.n	8009a9a <HAL_RCC_OscConfig+0x96a>
 8009a80:	4bc1      	ldr	r3, [pc, #772]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	4ac0      	ldr	r2, [pc, #768]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009a86:	f023 0301 	bic.w	r3, r3, #1
 8009a8a:	6213      	str	r3, [r2, #32]
 8009a8c:	4bbe      	ldr	r3, [pc, #760]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	4abd      	ldr	r2, [pc, #756]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009a92:	f023 0304 	bic.w	r3, r3, #4
 8009a96:	6213      	str	r3, [r2, #32]
 8009a98:	e020      	b.n	8009adc <HAL_RCC_OscConfig+0x9ac>
 8009a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x994>
 8009aaa:	4bb7      	ldr	r3, [pc, #732]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	4ab6      	ldr	r2, [pc, #728]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009ab0:	f043 0304 	orr.w	r3, r3, #4
 8009ab4:	6213      	str	r3, [r2, #32]
 8009ab6:	4bb4      	ldr	r3, [pc, #720]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	4ab3      	ldr	r2, [pc, #716]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009abc:	f043 0301 	orr.w	r3, r3, #1
 8009ac0:	6213      	str	r3, [r2, #32]
 8009ac2:	e00b      	b.n	8009adc <HAL_RCC_OscConfig+0x9ac>
 8009ac4:	4bb0      	ldr	r3, [pc, #704]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	4aaf      	ldr	r2, [pc, #700]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009aca:	f023 0301 	bic.w	r3, r3, #1
 8009ace:	6213      	str	r3, [r2, #32]
 8009ad0:	4bad      	ldr	r3, [pc, #692]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	4aac      	ldr	r2, [pc, #688]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009ad6:	f023 0304 	bic.w	r3, r3, #4
 8009ada:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 8081 	beq.w	8009bf0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009aee:	f7fc f9d9 	bl	8005ea4 <HAL_GetTick>
 8009af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009af6:	e00b      	b.n	8009b10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009af8:	f7fc f9d4 	bl	8005ea4 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d901      	bls.n	8009b10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e345      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
 8009b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009b18:	2202      	movs	r2, #2
 8009b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	fa93 f2a3 	rbit	r2, r3
 8009b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	fa93 f2a3 	rbit	r2, r3
 8009b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009b56:	601a      	str	r2, [r3, #0]
  return result;
 8009b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009b60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b62:	fab3 f383 	clz	r3, r3
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	f043 0302 	orr.w	r3, r3, #2
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d102      	bne.n	8009b7c <HAL_RCC_OscConfig+0xa4c>
 8009b76:	4b84      	ldr	r3, [pc, #528]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	e013      	b.n	8009ba4 <HAL_RCC_OscConfig+0xa74>
 8009b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009b84:	2202      	movs	r2, #2
 8009b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	fa93 f2a3 	rbit	r2, r3
 8009b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	4b79      	ldr	r3, [pc, #484]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ba8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009bac:	2102      	movs	r1, #2
 8009bae:	6011      	str	r1, [r2, #0]
 8009bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	fa92 f1a2 	rbit	r1, r2
 8009bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009bc6:	6011      	str	r1, [r2, #0]
  return result;
 8009bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bcc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009bd0:	6812      	ldr	r2, [r2, #0]
 8009bd2:	fab2 f282 	clz	r2, r2
 8009bd6:	b2d2      	uxtb	r2, r2
 8009bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bdc:	b2d2      	uxtb	r2, r2
 8009bde:	f002 021f 	and.w	r2, r2, #31
 8009be2:	2101      	movs	r1, #1
 8009be4:	fa01 f202 	lsl.w	r2, r1, r2
 8009be8:	4013      	ands	r3, r2
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d084      	beq.n	8009af8 <HAL_RCC_OscConfig+0x9c8>
 8009bee:	e07f      	b.n	8009cf0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bf0:	f7fc f958 	bl	8005ea4 <HAL_GetTick>
 8009bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bf8:	e00b      	b.n	8009c12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bfa:	f7fc f953 	bl	8005ea4 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e2c4      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
 8009c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	fa93 f2a3 	rbit	r2, r3
 8009c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009c3e:	2202      	movs	r2, #2
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	fa93 f2a3 	rbit	r2, r3
 8009c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009c58:	601a      	str	r2, [r3, #0]
  return result;
 8009c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c64:	fab3 f383 	clz	r3, r3
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f043 0302 	orr.w	r3, r3, #2
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d102      	bne.n	8009c7e <HAL_RCC_OscConfig+0xb4e>
 8009c78:	4b43      	ldr	r3, [pc, #268]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	e013      	b.n	8009ca6 <HAL_RCC_OscConfig+0xb76>
 8009c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009c86:	2202      	movs	r2, #2
 8009c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	fa93 f2a3 	rbit	r2, r3
 8009c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	4b39      	ldr	r3, [pc, #228]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009caa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009cae:	2102      	movs	r1, #2
 8009cb0:	6011      	str	r1, [r2, #0]
 8009cb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009cba:	6812      	ldr	r2, [r2, #0]
 8009cbc:	fa92 f1a2 	rbit	r1, r2
 8009cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009cc8:	6011      	str	r1, [r2, #0]
  return result;
 8009cca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009cd2:	6812      	ldr	r2, [r2, #0]
 8009cd4:	fab2 f282 	clz	r2, r2
 8009cd8:	b2d2      	uxtb	r2, r2
 8009cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	f002 021f 	and.w	r2, r2, #31
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8009cea:	4013      	ands	r3, r2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d184      	bne.n	8009bfa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009cf0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d105      	bne.n	8009d04 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cf8:	4b23      	ldr	r3, [pc, #140]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	4a22      	ldr	r2, [pc, #136]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 8242 	beq.w	800a19a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d16:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <HAL_RCC_OscConfig+0xc58>)
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f003 030c 	and.w	r3, r3, #12
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	f000 8213 	beq.w	800a14a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	f040 8162 	bne.w	8009ffa <HAL_RCC_OscConfig+0xeca>
 8009d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d48:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	fa93 f2a3 	rbit	r2, r3
 8009d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009d5a:	601a      	str	r2, [r3, #0]
  return result;
 8009d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009d64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d66:	fab3 f383 	clz	r3, r3
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009d70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	461a      	mov	r2, r3
 8009d78:	2300      	movs	r3, #0
 8009d7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d7c:	f7fc f892 	bl	8005ea4 <HAL_GetTick>
 8009d80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d84:	e00c      	b.n	8009da0 <HAL_RCC_OscConfig+0xc70>
 8009d86:	bf00      	nop
 8009d88:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d8c:	f7fc f88a 	bl	8005ea4 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d901      	bls.n	8009da0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e1fd      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
 8009da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009da4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009db2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	fa93 f2a3 	rbit	r2, r3
 8009dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009dc4:	601a      	str	r2, [r3, #0]
  return result;
 8009dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009dce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009dd0:	fab3 f383 	clz	r3, r3
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	095b      	lsrs	r3, r3, #5
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d102      	bne.n	8009dea <HAL_RCC_OscConfig+0xcba>
 8009de4:	4bb0      	ldr	r3, [pc, #704]	; (800a0a8 <HAL_RCC_OscConfig+0xf78>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	e027      	b.n	8009e3a <HAL_RCC_OscConfig+0xd0a>
 8009dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dfc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	fa93 f2a3 	rbit	r2, r3
 8009e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e14:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e22:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	fa93 f2a3 	rbit	r2, r3
 8009e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	4b9c      	ldr	r3, [pc, #624]	; (800a0a8 <HAL_RCC_OscConfig+0xf78>)
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e3e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009e42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009e46:	6011      	str	r1, [r2, #0]
 8009e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e4c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009e50:	6812      	ldr	r2, [r2, #0]
 8009e52:	fa92 f1a2 	rbit	r1, r2
 8009e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009e5e:	6011      	str	r1, [r2, #0]
  return result;
 8009e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e64:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009e68:	6812      	ldr	r2, [r2, #0]
 8009e6a:	fab2 f282 	clz	r2, r2
 8009e6e:	b2d2      	uxtb	r2, r2
 8009e70:	f042 0220 	orr.w	r2, r2, #32
 8009e74:	b2d2      	uxtb	r2, r2
 8009e76:	f002 021f 	and.w	r2, r2, #31
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d182      	bne.n	8009d8c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e86:	4b88      	ldr	r3, [pc, #544]	; (800a0a8 <HAL_RCC_OscConfig+0xf78>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	430b      	orrs	r3, r1
 8009ea8:	497f      	ldr	r1, [pc, #508]	; (800a0a8 <HAL_RCC_OscConfig+0xf78>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	604b      	str	r3, [r1, #4]
 8009eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eb2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009eb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ec0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	fa93 f2a3 	rbit	r2, r3
 8009eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ece:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009ed2:	601a      	str	r2, [r3, #0]
  return result;
 8009ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ed8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009edc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ede:	fab3 f383 	clz	r3, r3
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009ee8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ef4:	f7fb ffd6 	bl	8005ea4 <HAL_GetTick>
 8009ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009efc:	e009      	b.n	8009f12 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009efe:	f7fb ffd1 	bl	8005ea4 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e144      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
 8009f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f16:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f24:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	fa93 f2a3 	rbit	r2, r3
 8009f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009f36:	601a      	str	r2, [r3, #0]
  return result;
 8009f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f3c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009f40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009f42:	fab3 f383 	clz	r3, r3
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f043 0301 	orr.w	r3, r3, #1
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d102      	bne.n	8009f5c <HAL_RCC_OscConfig+0xe2c>
 8009f56:	4b54      	ldr	r3, [pc, #336]	; (800a0a8 <HAL_RCC_OscConfig+0xf78>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	e027      	b.n	8009fac <HAL_RCC_OscConfig+0xe7c>
 8009f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	fa93 f2a3 	rbit	r2, r3
 8009f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f94:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	fa93 f2a3 	rbit	r2, r3
 8009f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fa2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	4b3f      	ldr	r3, [pc, #252]	; (800a0a8 <HAL_RCC_OscConfig+0xf78>)
 8009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fb0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009fb8:	6011      	str	r1, [r2, #0]
 8009fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fbe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009fc2:	6812      	ldr	r2, [r2, #0]
 8009fc4:	fa92 f1a2 	rbit	r1, r2
 8009fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fcc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009fd0:	6011      	str	r1, [r2, #0]
  return result;
 8009fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fd6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009fda:	6812      	ldr	r2, [r2, #0]
 8009fdc:	fab2 f282 	clz	r2, r2
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	f042 0220 	orr.w	r2, r2, #32
 8009fe6:	b2d2      	uxtb	r2, r2
 8009fe8:	f002 021f 	and.w	r2, r2, #31
 8009fec:	2101      	movs	r1, #1
 8009fee:	fa01 f202 	lsl.w	r2, r1, r2
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d082      	beq.n	8009efe <HAL_RCC_OscConfig+0xdce>
 8009ff8:	e0cf      	b.n	800a19a <HAL_RCC_OscConfig+0x106a>
 8009ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ffe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a002:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a00c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	fa93 f2a3 	rbit	r2, r3
 800a016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a01a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a01e:	601a      	str	r2, [r3, #0]
  return result;
 800a020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a024:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a028:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a02a:	fab3 f383 	clz	r3, r3
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a034:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	461a      	mov	r2, r3
 800a03c:	2300      	movs	r3, #0
 800a03e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a040:	f7fb ff30 	bl	8005ea4 <HAL_GetTick>
 800a044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a048:	e009      	b.n	800a05e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a04a:	f7fb ff2b 	bl	8005ea4 <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e09e      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
 800a05e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a062:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a06a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a06c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a070:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	fa93 f2a3 	rbit	r2, r3
 800a07a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a07e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a082:	601a      	str	r2, [r3, #0]
  return result;
 800a084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a088:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a08c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a08e:	fab3 f383 	clz	r3, r3
 800a092:	b2db      	uxtb	r3, r3
 800a094:	095b      	lsrs	r3, r3, #5
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f043 0301 	orr.w	r3, r3, #1
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d104      	bne.n	800a0ac <HAL_RCC_OscConfig+0xf7c>
 800a0a2:	4b01      	ldr	r3, [pc, #4]	; (800a0a8 <HAL_RCC_OscConfig+0xf78>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	e029      	b.n	800a0fc <HAL_RCC_OscConfig+0xfcc>
 800a0a8:	40021000 	.word	0x40021000
 800a0ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a0b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	fa93 f2a3 	rbit	r2, r3
 800a0c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a0da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	fa93 f2a3 	rbit	r2, r3
 800a0ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	4b2b      	ldr	r3, [pc, #172]	; (800a1a8 <HAL_RCC_OscConfig+0x1078>)
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a100:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a104:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a108:	6011      	str	r1, [r2, #0]
 800a10a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a10e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	fa92 f1a2 	rbit	r1, r2
 800a118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a11c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a120:	6011      	str	r1, [r2, #0]
  return result;
 800a122:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a126:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	fab2 f282 	clz	r2, r2
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	f042 0220 	orr.w	r2, r2, #32
 800a136:	b2d2      	uxtb	r2, r2
 800a138:	f002 021f 	and.w	r2, r2, #31
 800a13c:	2101      	movs	r1, #1
 800a13e:	fa01 f202 	lsl.w	r2, r1, r2
 800a142:	4013      	ands	r3, r2
 800a144:	2b00      	cmp	r3, #0
 800a146:	d180      	bne.n	800a04a <HAL_RCC_OscConfig+0xf1a>
 800a148:	e027      	b.n	800a19a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a14a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a14e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d101      	bne.n	800a15e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e01e      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <HAL_RCC_OscConfig+0x1078>)
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a166:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a16a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a16e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d10b      	bne.n	800a196 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800a17e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a18a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a192:	429a      	cmp	r2, r3
 800a194:	d001      	beq.n	800a19a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e000      	b.n	800a19c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	40021000 	.word	0x40021000

0800a1ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b09e      	sub	sp, #120	; 0x78
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e162      	b.n	800a48a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a1c4:	4b90      	ldr	r3, [pc, #576]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0307 	and.w	r3, r3, #7
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d910      	bls.n	800a1f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1d2:	4b8d      	ldr	r3, [pc, #564]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f023 0207 	bic.w	r2, r3, #7
 800a1da:	498b      	ldr	r1, [pc, #556]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1e2:	4b89      	ldr	r3, [pc, #548]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d001      	beq.n	800a1f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e14a      	b.n	800a48a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d008      	beq.n	800a212 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a200:	4b82      	ldr	r3, [pc, #520]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	497f      	ldr	r1, [pc, #508]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a20e:	4313      	orrs	r3, r2
 800a210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80dc 	beq.w	800a3d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d13c      	bne.n	800a2a2 <HAL_RCC_ClockConfig+0xf6>
 800a228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a22c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a22e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a230:	fa93 f3a3 	rbit	r3, r3
 800a234:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800a236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a238:	fab3 f383 	clz	r3, r3
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	095b      	lsrs	r3, r3, #5
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d102      	bne.n	800a252 <HAL_RCC_ClockConfig+0xa6>
 800a24c:	4b6f      	ldr	r3, [pc, #444]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	e00f      	b.n	800a272 <HAL_RCC_ClockConfig+0xc6>
 800a252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a256:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a25a:	fa93 f3a3 	rbit	r3, r3
 800a25e:	667b      	str	r3, [r7, #100]	; 0x64
 800a260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a264:	663b      	str	r3, [r7, #96]	; 0x60
 800a266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a268:	fa93 f3a3 	rbit	r3, r3
 800a26c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a26e:	4b67      	ldr	r3, [pc, #412]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a276:	65ba      	str	r2, [r7, #88]	; 0x58
 800a278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a27a:	fa92 f2a2 	rbit	r2, r2
 800a27e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800a280:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a282:	fab2 f282 	clz	r2, r2
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	f042 0220 	orr.w	r2, r2, #32
 800a28c:	b2d2      	uxtb	r2, r2
 800a28e:	f002 021f 	and.w	r2, r2, #31
 800a292:	2101      	movs	r1, #1
 800a294:	fa01 f202 	lsl.w	r2, r1, r2
 800a298:	4013      	ands	r3, r2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d17b      	bne.n	800a396 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e0f3      	b.n	800a48a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d13c      	bne.n	800a324 <HAL_RCC_ClockConfig+0x178>
 800a2aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b2:	fa93 f3a3 	rbit	r3, r3
 800a2b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2ba:	fab3 f383 	clz	r3, r3
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	095b      	lsrs	r3, r3, #5
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f043 0301 	orr.w	r3, r3, #1
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d102      	bne.n	800a2d4 <HAL_RCC_ClockConfig+0x128>
 800a2ce:	4b4f      	ldr	r3, [pc, #316]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	e00f      	b.n	800a2f4 <HAL_RCC_ClockConfig+0x148>
 800a2d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2dc:	fa93 f3a3 	rbit	r3, r3
 800a2e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a2e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2e6:	643b      	str	r3, [r7, #64]	; 0x40
 800a2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ea:	fa93 f3a3 	rbit	r3, r3
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f0:	4b46      	ldr	r3, [pc, #280]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a2f8:	63ba      	str	r2, [r7, #56]	; 0x38
 800a2fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2fc:	fa92 f2a2 	rbit	r2, r2
 800a300:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a304:	fab2 f282 	clz	r2, r2
 800a308:	b2d2      	uxtb	r2, r2
 800a30a:	f042 0220 	orr.w	r2, r2, #32
 800a30e:	b2d2      	uxtb	r2, r2
 800a310:	f002 021f 	and.w	r2, r2, #31
 800a314:	2101      	movs	r1, #1
 800a316:	fa01 f202 	lsl.w	r2, r1, r2
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d13a      	bne.n	800a396 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e0b2      	b.n	800a48a <HAL_RCC_ClockConfig+0x2de>
 800a324:	2302      	movs	r3, #2
 800a326:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	fa93 f3a3 	rbit	r3, r3
 800a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a332:	fab3 f383 	clz	r3, r3
 800a336:	b2db      	uxtb	r3, r3
 800a338:	095b      	lsrs	r3, r3, #5
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f043 0301 	orr.w	r3, r3, #1
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b01      	cmp	r3, #1
 800a344:	d102      	bne.n	800a34c <HAL_RCC_ClockConfig+0x1a0>
 800a346:	4b31      	ldr	r3, [pc, #196]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	e00d      	b.n	800a368 <HAL_RCC_ClockConfig+0x1bc>
 800a34c:	2302      	movs	r3, #2
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	fa93 f3a3 	rbit	r3, r3
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
 800a358:	2302      	movs	r3, #2
 800a35a:	623b      	str	r3, [r7, #32]
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	fa93 f3a3 	rbit	r3, r3
 800a362:	61fb      	str	r3, [r7, #28]
 800a364:	4b29      	ldr	r3, [pc, #164]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	2202      	movs	r2, #2
 800a36a:	61ba      	str	r2, [r7, #24]
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	fa92 f2a2 	rbit	r2, r2
 800a372:	617a      	str	r2, [r7, #20]
  return result;
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	fab2 f282 	clz	r2, r2
 800a37a:	b2d2      	uxtb	r2, r2
 800a37c:	f042 0220 	orr.w	r2, r2, #32
 800a380:	b2d2      	uxtb	r2, r2
 800a382:	f002 021f 	and.w	r2, r2, #31
 800a386:	2101      	movs	r1, #1
 800a388:	fa01 f202 	lsl.w	r2, r1, r2
 800a38c:	4013      	ands	r3, r2
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e079      	b.n	800a48a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f023 0203 	bic.w	r2, r3, #3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	491a      	ldr	r1, [pc, #104]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3a8:	f7fb fd7c 	bl	8005ea4 <HAL_GetTick>
 800a3ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ae:	e00a      	b.n	800a3c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3b0:	f7fb fd78 	bl	8005ea4 <HAL_GetTick>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d901      	bls.n	800a3c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e061      	b.n	800a48a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3c6:	4b11      	ldr	r3, [pc, #68]	; (800a40c <HAL_RCC_ClockConfig+0x260>)
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f003 020c 	and.w	r2, r3, #12
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d1eb      	bne.n	800a3b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0307 	and.w	r3, r3, #7
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d214      	bcs.n	800a410 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3e6:	4b08      	ldr	r3, [pc, #32]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f023 0207 	bic.w	r2, r3, #7
 800a3ee:	4906      	ldr	r1, [pc, #24]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3f6:	4b04      	ldr	r3, [pc, #16]	; (800a408 <HAL_RCC_ClockConfig+0x25c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0307 	and.w	r3, r3, #7
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d005      	beq.n	800a410 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e040      	b.n	800a48a <HAL_RCC_ClockConfig+0x2de>
 800a408:	40022000 	.word	0x40022000
 800a40c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d008      	beq.n	800a42e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a41c:	4b1d      	ldr	r3, [pc, #116]	; (800a494 <HAL_RCC_ClockConfig+0x2e8>)
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	491a      	ldr	r1, [pc, #104]	; (800a494 <HAL_RCC_ClockConfig+0x2e8>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 0308 	and.w	r3, r3, #8
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a43a:	4b16      	ldr	r3, [pc, #88]	; (800a494 <HAL_RCC_ClockConfig+0x2e8>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	4912      	ldr	r1, [pc, #72]	; (800a494 <HAL_RCC_ClockConfig+0x2e8>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a44e:	f000 f829 	bl	800a4a4 <HAL_RCC_GetSysClockFreq>
 800a452:	4601      	mov	r1, r0
 800a454:	4b0f      	ldr	r3, [pc, #60]	; (800a494 <HAL_RCC_ClockConfig+0x2e8>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a45c:	22f0      	movs	r2, #240	; 0xf0
 800a45e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	fa92 f2a2 	rbit	r2, r2
 800a466:	60fa      	str	r2, [r7, #12]
  return result;
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	fab2 f282 	clz	r2, r2
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	40d3      	lsrs	r3, r2
 800a472:	4a09      	ldr	r2, [pc, #36]	; (800a498 <HAL_RCC_ClockConfig+0x2ec>)
 800a474:	5cd3      	ldrb	r3, [r2, r3]
 800a476:	fa21 f303 	lsr.w	r3, r1, r3
 800a47a:	4a08      	ldr	r2, [pc, #32]	; (800a49c <HAL_RCC_ClockConfig+0x2f0>)
 800a47c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a47e:	4b08      	ldr	r3, [pc, #32]	; (800a4a0 <HAL_RCC_ClockConfig+0x2f4>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	f7fa fece 	bl	8005224 <HAL_InitTick>
  
  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3778      	adds	r7, #120	; 0x78
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	40021000 	.word	0x40021000
 800a498:	08010c38 	.word	0x08010c38
 800a49c:	20000038 	.word	0x20000038
 800a4a0:	200000b4 	.word	0x200000b4

0800a4a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b08b      	sub	sp, #44	; 0x2c
 800a4a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61fb      	str	r3, [r7, #28]
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	61bb      	str	r3, [r7, #24]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a4be:	4b29      	ldr	r3, [pc, #164]	; (800a564 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	f003 030c 	and.w	r3, r3, #12
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d002      	beq.n	800a4d4 <HAL_RCC_GetSysClockFreq+0x30>
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d003      	beq.n	800a4da <HAL_RCC_GetSysClockFreq+0x36>
 800a4d2:	e03c      	b.n	800a54e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a4d4:	4b24      	ldr	r3, [pc, #144]	; (800a568 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a4d6:	623b      	str	r3, [r7, #32]
      break;
 800a4d8:	e03c      	b.n	800a554 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a4e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a4e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	fa92 f2a2 	rbit	r2, r2
 800a4ec:	607a      	str	r2, [r7, #4]
  return result;
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	fab2 f282 	clz	r2, r2
 800a4f4:	b2d2      	uxtb	r2, r2
 800a4f6:	40d3      	lsrs	r3, r2
 800a4f8:	4a1c      	ldr	r2, [pc, #112]	; (800a56c <HAL_RCC_GetSysClockFreq+0xc8>)
 800a4fa:	5cd3      	ldrb	r3, [r2, r3]
 800a4fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a4fe:	4b19      	ldr	r3, [pc, #100]	; (800a564 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	220f      	movs	r2, #15
 800a508:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	fa92 f2a2 	rbit	r2, r2
 800a510:	60fa      	str	r2, [r7, #12]
  return result;
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	fab2 f282 	clz	r2, r2
 800a518:	b2d2      	uxtb	r2, r2
 800a51a:	40d3      	lsrs	r3, r2
 800a51c:	4a14      	ldr	r2, [pc, #80]	; (800a570 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a51e:	5cd3      	ldrb	r3, [r2, r3]
 800a520:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d008      	beq.n	800a53e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a52c:	4a0e      	ldr	r2, [pc, #56]	; (800a568 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	fbb2 f2f3 	udiv	r2, r2, r3
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	fb02 f303 	mul.w	r3, r2, r3
 800a53a:	627b      	str	r3, [r7, #36]	; 0x24
 800a53c:	e004      	b.n	800a548 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	4a0c      	ldr	r2, [pc, #48]	; (800a574 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a542:	fb02 f303 	mul.w	r3, r2, r3
 800a546:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	623b      	str	r3, [r7, #32]
      break;
 800a54c:	e002      	b.n	800a554 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a550:	623b      	str	r3, [r7, #32]
      break;
 800a552:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a554:	6a3b      	ldr	r3, [r7, #32]
}
 800a556:	4618      	mov	r0, r3
 800a558:	372c      	adds	r7, #44	; 0x2c
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	40021000 	.word	0x40021000
 800a568:	016e3600 	.word	0x016e3600
 800a56c:	08010c50 	.word	0x08010c50
 800a570:	08010c60 	.word	0x08010c60
 800a574:	003d0900 	.word	0x003d0900
 800a578:	007a1200 	.word	0x007a1200

0800a57c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a580:	4b03      	ldr	r3, [pc, #12]	; (800a590 <HAL_RCC_GetHCLKFreq+0x14>)
 800a582:	681b      	ldr	r3, [r3, #0]
}
 800a584:	4618      	mov	r0, r3
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	20000038 	.word	0x20000038

0800a594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a59a:	f7ff ffef 	bl	800a57c <HAL_RCC_GetHCLKFreq>
 800a59e:	4601      	mov	r1, r0
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a5ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	fa92 f2a2 	rbit	r2, r2
 800a5b4:	603a      	str	r2, [r7, #0]
  return result;
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	fab2 f282 	clz	r2, r2
 800a5bc:	b2d2      	uxtb	r2, r2
 800a5be:	40d3      	lsrs	r3, r2
 800a5c0:	4a04      	ldr	r2, [pc, #16]	; (800a5d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a5c2:	5cd3      	ldrb	r3, [r2, r3]
 800a5c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	40021000 	.word	0x40021000
 800a5d4:	08010c48 	.word	0x08010c48

0800a5d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a5de:	f7ff ffcd 	bl	800a57c <HAL_RCC_GetHCLKFreq>
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a5ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a5f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	fa92 f2a2 	rbit	r2, r2
 800a5f8:	603a      	str	r2, [r7, #0]
  return result;
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	fab2 f282 	clz	r2, r2
 800a600:	b2d2      	uxtb	r2, r2
 800a602:	40d3      	lsrs	r3, r2
 800a604:	4a04      	ldr	r2, [pc, #16]	; (800a618 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a606:	5cd3      	ldrb	r3, [r2, r3]
 800a608:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	40021000 	.word	0x40021000
 800a618:	08010c48 	.word	0x08010c48

0800a61c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	220f      	movs	r2, #15
 800a62a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a62c:	4b12      	ldr	r3, [pc, #72]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f003 0203 	and.w	r2, r3, #3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800a638:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a650:	4b09      	ldr	r3, [pc, #36]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	08db      	lsrs	r3, r3, #3
 800a656:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <HAL_RCC_GetClockConfig+0x60>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 0207 	and.w	r2, r3, #7
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	601a      	str	r2, [r3, #0]
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	40021000 	.word	0x40021000
 800a67c:	40022000 	.word	0x40022000

0800a680 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b092      	sub	sp, #72	; 0x48
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a690:	2300      	movs	r3, #0
 800a692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 80d4 	beq.w	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a6a4:	4b4e      	ldr	r3, [pc, #312]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10e      	bne.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6b0:	4b4b      	ldr	r3, [pc, #300]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	4a4a      	ldr	r2, [pc, #296]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6ba:	61d3      	str	r3, [r2, #28]
 800a6bc:	4b48      	ldr	r3, [pc, #288]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c4:	60bb      	str	r3, [r7, #8]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ce:	4b45      	ldr	r3, [pc, #276]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d118      	bne.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6da:	4b42      	ldr	r3, [pc, #264]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a41      	ldr	r2, [pc, #260]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6e6:	f7fb fbdd 	bl	8005ea4 <HAL_GetTick>
 800a6ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ec:	e008      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6ee:	f7fb fbd9 	bl	8005ea4 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	2b64      	cmp	r3, #100	; 0x64
 800a6fa:	d901      	bls.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e169      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a700:	4b38      	ldr	r3, [pc, #224]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0f0      	beq.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a70c:	4b34      	ldr	r3, [pc, #208]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 8084 	beq.w	800a826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a728:	429a      	cmp	r2, r3
 800a72a:	d07c      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a72c:	4b2c      	ldr	r3, [pc, #176]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a72e:	6a1b      	ldr	r3, [r3, #32]
 800a730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a734:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a73a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	fa93 f3a3 	rbit	r3, r3
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a746:	fab3 f383 	clz	r3, r3
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	461a      	mov	r2, r3
 800a74e:	4b26      	ldr	r3, [pc, #152]	; (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a750:	4413      	add	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	461a      	mov	r2, r3
 800a756:	2301      	movs	r3, #1
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a75e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	fa93 f3a3 	rbit	r3, r3
 800a766:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a76a:	fab3 f383 	clz	r3, r3
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	461a      	mov	r2, r3
 800a772:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a774:	4413      	add	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	461a      	mov	r2, r3
 800a77a:	2300      	movs	r3, #0
 800a77c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a77e:	4a18      	ldr	r2, [pc, #96]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a782:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d04b      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a78e:	f7fb fb89 	bl	8005ea4 <HAL_GetTick>
 800a792:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a794:	e00a      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a796:	f7fb fb85 	bl	8005ea4 <HAL_GetTick>
 800a79a:	4602      	mov	r2, r0
 800a79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d901      	bls.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e113      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	fa93 f3a3 	rbit	r3, r3
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	623b      	str	r3, [r7, #32]
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	fa93 f3a3 	rbit	r3, r3
 800a7c2:	61fb      	str	r3, [r7, #28]
  return result;
 800a7c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7c6:	fab3 f383 	clz	r3, r3
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	095b      	lsrs	r3, r3, #5
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	f043 0302 	orr.w	r3, r3, #2
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d108      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a7da:	4b01      	ldr	r3, [pc, #4]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	e00d      	b.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a7e0:	40021000 	.word	0x40021000
 800a7e4:	40007000 	.word	0x40007000
 800a7e8:	10908100 	.word	0x10908100
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	fa93 f3a3 	rbit	r3, r3
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	4b78      	ldr	r3, [pc, #480]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	613a      	str	r2, [r7, #16]
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	fa92 f2a2 	rbit	r2, r2
 800a806:	60fa      	str	r2, [r7, #12]
  return result;
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	fab2 f282 	clz	r2, r2
 800a80e:	b2d2      	uxtb	r2, r2
 800a810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a814:	b2d2      	uxtb	r2, r2
 800a816:	f002 021f 	and.w	r2, r2, #31
 800a81a:	2101      	movs	r1, #1
 800a81c:	fa01 f202 	lsl.w	r2, r1, r2
 800a820:	4013      	ands	r3, r2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0b7      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a826:	4b6d      	ldr	r3, [pc, #436]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	496a      	ldr	r1, [pc, #424]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a834:	4313      	orrs	r3, r2
 800a836:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d105      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a840:	4b66      	ldr	r3, [pc, #408]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	4a65      	ldr	r2, [pc, #404]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a84a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d008      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a858:	4b60      	ldr	r3, [pc, #384]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	f023 0203 	bic.w	r2, r3, #3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	495d      	ldr	r1, [pc, #372]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a866:	4313      	orrs	r3, r2
 800a868:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d008      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a876:	4b59      	ldr	r3, [pc, #356]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	4956      	ldr	r1, [pc, #344]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a884:	4313      	orrs	r3, r2
 800a886:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a894:	4b51      	ldr	r3, [pc, #324]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	494e      	ldr	r1, [pc, #312]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d008      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a8b2:	4b4a      	ldr	r3, [pc, #296]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	f023 0210 	bic.w	r2, r3, #16
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	4947      	ldr	r1, [pc, #284]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d008      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a8d0:	4b42      	ldr	r3, [pc, #264]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	493f      	ldr	r1, [pc, #252]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d008      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a8ee:	4b3b      	ldr	r3, [pc, #236]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	f023 0220 	bic.w	r2, r3, #32
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	4938      	ldr	r1, [pc, #224]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d008      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a90c:	4b33      	ldr	r3, [pc, #204]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	4930      	ldr	r1, [pc, #192]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a91a:	4313      	orrs	r3, r2
 800a91c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0310 	and.w	r3, r3, #16
 800a926:	2b00      	cmp	r3, #0
 800a928:	d008      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a92a:	4b2c      	ldr	r3, [pc, #176]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	4929      	ldr	r1, [pc, #164]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a948:	4b24      	ldr	r3, [pc, #144]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	4921      	ldr	r1, [pc, #132]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a956:	4313      	orrs	r3, r2
 800a958:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a962:	2b00      	cmp	r3, #0
 800a964:	d008      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a966:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	491a      	ldr	r1, [pc, #104]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a974:	4313      	orrs	r3, r2
 800a976:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a980:	2b00      	cmp	r3, #0
 800a982:	d008      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a984:	4b15      	ldr	r3, [pc, #84]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a988:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	4912      	ldr	r1, [pc, #72]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a992:	4313      	orrs	r3, r2
 800a994:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d008      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a9a2:	4b0e      	ldr	r3, [pc, #56]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ae:	490b      	ldr	r1, [pc, #44]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d008      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a9c0:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	4903      	ldr	r1, [pc, #12]	; (800a9dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3748      	adds	r7, #72	; 0x48
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	40021000 	.word	0x40021000

0800a9e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e049      	b.n	800aa86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7fa ff6a 	bl	80058e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f000 f9e8 	bl	800adf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d001      	beq.n	800aaa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e04a      	b.n	800ab3e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2202      	movs	r2, #2
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f042 0201 	orr.w	r2, r2, #1
 800aabe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a21      	ldr	r2, [pc, #132]	; (800ab4c <HAL_TIM_Base_Start_IT+0xbc>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d018      	beq.n	800aafc <HAL_TIM_Base_Start_IT+0x6c>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad2:	d013      	beq.n	800aafc <HAL_TIM_Base_Start_IT+0x6c>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a1d      	ldr	r2, [pc, #116]	; (800ab50 <HAL_TIM_Base_Start_IT+0xc0>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d00e      	beq.n	800aafc <HAL_TIM_Base_Start_IT+0x6c>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a1c      	ldr	r2, [pc, #112]	; (800ab54 <HAL_TIM_Base_Start_IT+0xc4>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d009      	beq.n	800aafc <HAL_TIM_Base_Start_IT+0x6c>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a1a      	ldr	r2, [pc, #104]	; (800ab58 <HAL_TIM_Base_Start_IT+0xc8>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d004      	beq.n	800aafc <HAL_TIM_Base_Start_IT+0x6c>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a19      	ldr	r2, [pc, #100]	; (800ab5c <HAL_TIM_Base_Start_IT+0xcc>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d115      	bne.n	800ab28 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689a      	ldr	r2, [r3, #8]
 800ab02:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab04:	4013      	ands	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b06      	cmp	r3, #6
 800ab0c:	d015      	beq.n	800ab3a <HAL_TIM_Base_Start_IT+0xaa>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab14:	d011      	beq.n	800ab3a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0201 	orr.w	r2, r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab26:	e008      	b.n	800ab3a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 0201 	orr.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	e000      	b.n	800ab3c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	40012c00 	.word	0x40012c00
 800ab50:	40000400 	.word	0x40000400
 800ab54:	40000800 	.word	0x40000800
 800ab58:	40013400 	.word	0x40013400
 800ab5c:	40014000 	.word	0x40014000
 800ab60:	00010007 	.word	0x00010007

0800ab64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d122      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f003 0302 	and.w	r3, r3, #2
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d11b      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f06f 0202 	mvn.w	r2, #2
 800ab90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	f003 0303 	and.w	r3, r3, #3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f905 	bl	800adb6 <HAL_TIM_IC_CaptureCallback>
 800abac:	e005      	b.n	800abba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f8f7 	bl	800ada2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f908 	bl	800adca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b04      	cmp	r3, #4
 800abcc:	d122      	bne.n	800ac14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d11b      	bne.n	800ac14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f06f 0204 	mvn.w	r2, #4
 800abe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2202      	movs	r2, #2
 800abea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f8db 	bl	800adb6 <HAL_TIM_IC_CaptureCallback>
 800ac00:	e005      	b.n	800ac0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f8cd 	bl	800ada2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f8de 	bl	800adca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0308 	and.w	r3, r3, #8
 800ac1e:	2b08      	cmp	r3, #8
 800ac20:	d122      	bne.n	800ac68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d11b      	bne.n	800ac68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0208 	mvn.w	r2, #8
 800ac38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	f003 0303 	and.w	r3, r3, #3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f8b1 	bl	800adb6 <HAL_TIM_IC_CaptureCallback>
 800ac54:	e005      	b.n	800ac62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f8a3 	bl	800ada2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f8b4 	bl	800adca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	f003 0310 	and.w	r3, r3, #16
 800ac72:	2b10      	cmp	r3, #16
 800ac74:	d122      	bne.n	800acbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f003 0310 	and.w	r3, r3, #16
 800ac80:	2b10      	cmp	r3, #16
 800ac82:	d11b      	bne.n	800acbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f06f 0210 	mvn.w	r2, #16
 800ac8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2208      	movs	r2, #8
 800ac92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f887 	bl	800adb6 <HAL_TIM_IC_CaptureCallback>
 800aca8:	e005      	b.n	800acb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f879 	bl	800ada2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f88a 	bl	800adca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	f003 0301 	and.w	r3, r3, #1
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d10e      	bne.n	800ace8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d107      	bne.n	800ace8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f06f 0201 	mvn.w	r2, #1
 800ace0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7f9 fb52 	bl	800438c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf2:	2b80      	cmp	r3, #128	; 0x80
 800acf4:	d10e      	bne.n	800ad14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad00:	2b80      	cmp	r3, #128	; 0x80
 800ad02:	d107      	bne.n	800ad14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f98a 	bl	800b028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad22:	d10e      	bne.n	800ad42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad2e:	2b80      	cmp	r3, #128	; 0x80
 800ad30:	d107      	bne.n	800ad42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ad3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f97d 	bl	800b03c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad4c:	2b40      	cmp	r3, #64	; 0x40
 800ad4e:	d10e      	bne.n	800ad6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad5a:	2b40      	cmp	r3, #64	; 0x40
 800ad5c:	d107      	bne.n	800ad6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f838 	bl	800adde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	d10e      	bne.n	800ad9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f003 0320 	and.w	r3, r3, #32
 800ad86:	2b20      	cmp	r3, #32
 800ad88:	d107      	bne.n	800ad9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f06f 0220 	mvn.w	r2, #32
 800ad92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f93d 	bl	800b014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad9a:	bf00      	nop
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
	...

0800adf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a3c      	ldr	r2, [pc, #240]	; (800aef8 <TIM_Base_SetConfig+0x104>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d00f      	beq.n	800ae2c <TIM_Base_SetConfig+0x38>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae12:	d00b      	beq.n	800ae2c <TIM_Base_SetConfig+0x38>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a39      	ldr	r2, [pc, #228]	; (800aefc <TIM_Base_SetConfig+0x108>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d007      	beq.n	800ae2c <TIM_Base_SetConfig+0x38>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a38      	ldr	r2, [pc, #224]	; (800af00 <TIM_Base_SetConfig+0x10c>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d003      	beq.n	800ae2c <TIM_Base_SetConfig+0x38>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a37      	ldr	r2, [pc, #220]	; (800af04 <TIM_Base_SetConfig+0x110>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d108      	bne.n	800ae3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a2d      	ldr	r2, [pc, #180]	; (800aef8 <TIM_Base_SetConfig+0x104>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d01b      	beq.n	800ae7e <TIM_Base_SetConfig+0x8a>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae4c:	d017      	beq.n	800ae7e <TIM_Base_SetConfig+0x8a>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a2a      	ldr	r2, [pc, #168]	; (800aefc <TIM_Base_SetConfig+0x108>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d013      	beq.n	800ae7e <TIM_Base_SetConfig+0x8a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a29      	ldr	r2, [pc, #164]	; (800af00 <TIM_Base_SetConfig+0x10c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00f      	beq.n	800ae7e <TIM_Base_SetConfig+0x8a>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a28      	ldr	r2, [pc, #160]	; (800af04 <TIM_Base_SetConfig+0x110>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d00b      	beq.n	800ae7e <TIM_Base_SetConfig+0x8a>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a27      	ldr	r2, [pc, #156]	; (800af08 <TIM_Base_SetConfig+0x114>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d007      	beq.n	800ae7e <TIM_Base_SetConfig+0x8a>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a26      	ldr	r2, [pc, #152]	; (800af0c <TIM_Base_SetConfig+0x118>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d003      	beq.n	800ae7e <TIM_Base_SetConfig+0x8a>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a25      	ldr	r2, [pc, #148]	; (800af10 <TIM_Base_SetConfig+0x11c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d108      	bne.n	800ae90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a10      	ldr	r2, [pc, #64]	; (800aef8 <TIM_Base_SetConfig+0x104>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d00f      	beq.n	800aedc <TIM_Base_SetConfig+0xe8>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a11      	ldr	r2, [pc, #68]	; (800af04 <TIM_Base_SetConfig+0x110>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d00b      	beq.n	800aedc <TIM_Base_SetConfig+0xe8>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a10      	ldr	r2, [pc, #64]	; (800af08 <TIM_Base_SetConfig+0x114>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d007      	beq.n	800aedc <TIM_Base_SetConfig+0xe8>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a0f      	ldr	r2, [pc, #60]	; (800af0c <TIM_Base_SetConfig+0x118>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d003      	beq.n	800aedc <TIM_Base_SetConfig+0xe8>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a0e      	ldr	r2, [pc, #56]	; (800af10 <TIM_Base_SetConfig+0x11c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d103      	bne.n	800aee4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	691a      	ldr	r2, [r3, #16]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	615a      	str	r2, [r3, #20]
}
 800aeea:	bf00      	nop
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40012c00 	.word	0x40012c00
 800aefc:	40000400 	.word	0x40000400
 800af00:	40000800 	.word	0x40000800
 800af04:	40013400 	.word	0x40013400
 800af08:	40014000 	.word	0x40014000
 800af0c:	40014400 	.word	0x40014400
 800af10:	40014800 	.word	0x40014800

0800af14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af24:	2b01      	cmp	r3, #1
 800af26:	d101      	bne.n	800af2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af28:	2302      	movs	r3, #2
 800af2a:	e063      	b.n	800aff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2202      	movs	r2, #2
 800af38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a2b      	ldr	r2, [pc, #172]	; (800b000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d004      	beq.n	800af60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a2a      	ldr	r2, [pc, #168]	; (800b004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d108      	bne.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a1b      	ldr	r2, [pc, #108]	; (800b000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d018      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af9e:	d013      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a18      	ldr	r2, [pc, #96]	; (800b008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d00e      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a17      	ldr	r2, [pc, #92]	; (800b00c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d009      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a12      	ldr	r2, [pc, #72]	; (800b004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d004      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a13      	ldr	r2, [pc, #76]	; (800b010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d10c      	bne.n	800afe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	40012c00 	.word	0x40012c00
 800b004:	40013400 	.word	0x40013400
 800b008:	40000400 	.word	0x40000400
 800b00c:	40000800 	.word	0x40000800
 800b010:	40014000 	.word	0x40014000

0800b014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e040      	b.n	800b0e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7fa fd18 	bl	8005aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2224      	movs	r2, #36	; 0x24
 800b07c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f022 0201 	bic.w	r2, r2, #1
 800b08c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fdf2 	bl	800bc78 <UART_SetConfig>
 800b094:	4603      	mov	r3, r0
 800b096:	2b01      	cmp	r3, #1
 800b098:	d101      	bne.n	800b09e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e022      	b.n	800b0e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 ffba 	bl	800c020 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689a      	ldr	r2, [r3, #8]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f042 0201 	orr.w	r2, r2, #1
 800b0da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 f841 	bl	800c164 <UART_CheckIdleState>
 800b0e2:	4603      	mov	r3, r0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b08b      	sub	sp, #44	; 0x2c
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	d147      	bne.n	800b192 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <HAL_UART_Transmit_IT+0x22>
 800b108:	88fb      	ldrh	r3, [r7, #6]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e040      	b.n	800b194 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	88fa      	ldrh	r2, [r7, #6]
 800b11c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	88fa      	ldrh	r2, [r7, #6]
 800b124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2221      	movs	r2, #33	; 0x21
 800b13a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b144:	d107      	bne.n	800b156 <HAL_UART_Transmit_IT+0x6a>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d103      	bne.n	800b156 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4a13      	ldr	r2, [pc, #76]	; (800b1a0 <HAL_UART_Transmit_IT+0xb4>)
 800b152:	66da      	str	r2, [r3, #108]	; 0x6c
 800b154:	e002      	b.n	800b15c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	4a12      	ldr	r2, [pc, #72]	; (800b1a4 <HAL_UART_Transmit_IT+0xb8>)
 800b15a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	613b      	str	r3, [r7, #16]
   return(result);
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	623b      	str	r3, [r7, #32]
 800b17c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17e:	69f9      	ldr	r1, [r7, #28]
 800b180:	6a3a      	ldr	r2, [r7, #32]
 800b182:	e841 2300 	strex	r3, r2, [r1]
 800b186:	61bb      	str	r3, [r7, #24]
   return(result);
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1e6      	bne.n	800b15c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	e000      	b.n	800b194 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b192:	2302      	movs	r3, #2
  }
}
 800b194:	4618      	mov	r0, r3
 800b196:	372c      	adds	r7, #44	; 0x2c
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	0800cb2b 	.word	0x0800cb2b
 800b1a4:	0800ca73 	.word	0x0800ca73

0800b1a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	; 0x28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d132      	bne.n	800b226 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <HAL_UART_Receive_IT+0x24>
 800b1c6:	88fb      	ldrh	r3, [r7, #6]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e02b      	b.n	800b228 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d018      	beq.n	800b216 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	623b      	str	r3, [r7, #32]
 800b204:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	69f9      	ldr	r1, [r7, #28]
 800b208:	6a3a      	ldr	r2, [r7, #32]
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e6      	bne.n	800b1e4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b216:	88fb      	ldrh	r3, [r7, #6]
 800b218:	461a      	mov	r2, r3
 800b21a:	68b9      	ldr	r1, [r7, #8]
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f001 f8b1 	bl	800c384 <UART_Start_Receive_IT>
 800b222:	4603      	mov	r3, r0
 800b224:	e000      	b.n	800b228 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b226:	2302      	movs	r3, #2
  }
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3728      	adds	r7, #40	; 0x28
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b08a      	sub	sp, #40	; 0x28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	4613      	mov	r3, r2
 800b23c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b242:	2b20      	cmp	r3, #32
 800b244:	d165      	bne.n	800b312 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <HAL_UART_Transmit_DMA+0x22>
 800b24c:	88fb      	ldrh	r3, [r7, #6]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e05e      	b.n	800b314 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	88fa      	ldrh	r2, [r7, #6]
 800b260:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	88fa      	ldrh	r2, [r7, #6]
 800b268:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2221      	movs	r2, #33	; 0x21
 800b278:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d027      	beq.n	800b2d2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b286:	4a25      	ldr	r2, [pc, #148]	; (800b31c <HAL_UART_Transmit_DMA+0xec>)
 800b288:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b28e:	4a24      	ldr	r2, [pc, #144]	; (800b320 <HAL_UART_Transmit_DMA+0xf0>)
 800b290:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b296:	4a23      	ldr	r2, [pc, #140]	; (800b324 <HAL_UART_Transmit_DMA+0xf4>)
 800b298:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29e:	2200      	movs	r2, #0
 800b2a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3328      	adds	r3, #40	; 0x28
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	88fb      	ldrh	r3, [r7, #6]
 800b2b6:	f7fa ff80 	bl	80061ba <HAL_DMA_Start_IT>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d008      	beq.n	800b2d2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2210      	movs	r2, #16
 800b2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2220      	movs	r2, #32
 800b2cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e020      	b.n	800b314 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2240      	movs	r2, #64	; 0x40
 800b2d8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fa:	623a      	str	r2, [r7, #32]
 800b2fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	69f9      	ldr	r1, [r7, #28]
 800b300:	6a3a      	ldr	r2, [r7, #32]
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	61bb      	str	r3, [r7, #24]
   return(result);
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e5      	bne.n	800b2da <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	e000      	b.n	800b314 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b312:	2302      	movs	r3, #2
  }
}
 800b314:	4618      	mov	r0, r3
 800b316:	3728      	adds	r7, #40	; 0x28
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	0800c741 	.word	0x0800c741
 800b320:	0800c7d5 	.word	0x0800c7d5
 800b324:	0800c955 	.word	0x0800c955

0800b328 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08a      	sub	sp, #40	; 0x28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d132      	bne.n	800b3a6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <HAL_UART_Receive_DMA+0x24>
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e02b      	b.n	800b3a8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d018      	beq.n	800b396 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	613b      	str	r3, [r7, #16]
   return(result);
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	623b      	str	r3, [r7, #32]
 800b384:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	69f9      	ldr	r1, [r7, #28]
 800b388:	6a3a      	ldr	r2, [r7, #32]
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e6      	bne.n	800b364 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b396:	88fb      	ldrh	r3, [r7, #6]
 800b398:	461a      	mov	r2, r3
 800b39a:	68b9      	ldr	r1, [r7, #8]
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f001 f8a5 	bl	800c4ec <UART_Start_Receive_DMA>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	e000      	b.n	800b3a8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b3a6:	2302      	movs	r3, #2
  }
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3728      	adds	r7, #40	; 0x28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b08e      	sub	sp, #56	; 0x38
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e6      	bne.n	800b3b8 <HAL_UART_AbortTransmit_IT+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f4:	2b80      	cmp	r3, #128	; 0x80
 800b3f6:	d13f      	bne.n	800b478 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	e853 3f00 	ldrex	r3, [r3]
 800b406:	60bb      	str	r3, [r7, #8]
   return(result);
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b40e:	633b      	str	r3, [r7, #48]	; 0x30
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3308      	adds	r3, #8
 800b416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b418:	61ba      	str	r2, [r7, #24]
 800b41a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41c:	6979      	ldr	r1, [r7, #20]
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	e841 2300 	strex	r3, r2, [r1]
 800b424:	613b      	str	r3, [r7, #16]
   return(result);
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e5      	bne.n	800b3f8 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b430:	2b00      	cmp	r3, #0
 800b432:	d013      	beq.n	800b45c <HAL_UART_AbortTransmit_IT+0xac>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b438:	4a18      	ldr	r2, [pc, #96]	; (800b49c <HAL_UART_AbortTransmit_IT+0xec>)
 800b43a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b440:	4618      	mov	r0, r3
 800b442:	f7fa ff52 	bl	80062ea <HAL_DMA_Abort_IT>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d022      	beq.n	800b492 <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b456:	4610      	mov	r0, r2
 800b458:	4798      	blx	r3
 800b45a:	e01a      	b.n	800b492 <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fbe1 	bl	800bc38 <HAL_UART_AbortTransmitCpltCallback>
 800b476:	e00c      	b.n	800b492 <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	66da      	str	r2, [r3, #108]	; 0x6c


    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2220      	movs	r2, #32
 800b48a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fbd3 	bl	800bc38 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3738      	adds	r7, #56	; 0x38
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	0800c9ff 	.word	0x0800c9ff

0800b4a0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b09a      	sub	sp, #104	; 0x68
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4bc:	667b      	str	r3, [r7, #100]	; 0x64
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4c6:	657b      	str	r3, [r7, #84]	; 0x54
 800b4c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e6      	bne.n	800b4a8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	f023 0301 	bic.w	r3, r3, #1
 800b4f0:	663b      	str	r3, [r7, #96]	; 0x60
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4fa:	643a      	str	r2, [r7, #64]	; 0x40
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e5      	bne.n	800b4da <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b512:	2b01      	cmp	r3, #1
 800b514:	d118      	bne.n	800b548 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	e853 3f00 	ldrex	r3, [r3]
 800b522:	61fb      	str	r3, [r7, #28]
   return(result);
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f023 0310 	bic.w	r3, r3, #16
 800b52a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	461a      	mov	r2, r3
 800b532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b536:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b53c:	e841 2300 	strex	r3, r2, [r1]
 800b540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1e6      	bne.n	800b516 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b552:	2b40      	cmp	r3, #64	; 0x40
 800b554:	d14f      	bne.n	800b5f6 <HAL_UART_AbortReceive_IT+0x156>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3308      	adds	r3, #8
 800b55c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	e853 3f00 	ldrex	r3, [r3]
 800b564:	60bb      	str	r3, [r7, #8]
   return(result);
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b56c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3308      	adds	r3, #8
 800b574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b576:	61ba      	str	r2, [r7, #24]
 800b578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57a:	6979      	ldr	r1, [r7, #20]
 800b57c:	69ba      	ldr	r2, [r7, #24]
 800b57e:	e841 2300 	strex	r3, r2, [r1]
 800b582:	613b      	str	r3, [r7, #16]
   return(result);
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1e5      	bne.n	800b556 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d013      	beq.n	800b5ba <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b596:	4a25      	ldr	r2, [pc, #148]	; (800b62c <HAL_UART_AbortReceive_IT+0x18c>)
 800b598:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fa fea3 	bl	80062ea <HAL_DMA_Abort_IT>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d03a      	beq.n	800b620 <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	4798      	blx	r3
 800b5b8:	e032      	b.n	800b620 <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	220f      	movs	r2, #15
 800b5ce:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	699a      	ldr	r2, [r3, #24]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f042 0208 	orr.w	r2, r2, #8
 800b5de:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fb2c 	bl	800bc4c <HAL_UART_AbortReceiveCpltCallback>
 800b5f4:	e014      	b.n	800b620 <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	220f      	movs	r2, #15
 800b60a:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fb16 	bl	800bc4c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3768      	adds	r7, #104	; 0x68
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	0800ca29 	.word	0x0800ca29

0800b630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b0ba      	sub	sp, #232	; 0xe8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b656:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b65a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b65e:	4013      	ands	r3, r2
 800b660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d115      	bne.n	800b698 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b670:	f003 0320 	and.w	r3, r3, #32
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00f      	beq.n	800b698 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b67c:	f003 0320 	and.w	r3, r3, #32
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 82ab 	beq.w	800bbe4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	4798      	blx	r3
      }
      return;
 800b696:	e2a5      	b.n	800bbe4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 8117 	beq.w	800b8d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b6a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d106      	bne.n	800b6bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b6ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b6b2:	4b85      	ldr	r3, [pc, #532]	; (800b8c8 <HAL_UART_IRQHandler+0x298>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 810a 	beq.w	800b8d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d011      	beq.n	800b6ec <HAL_UART_IRQHandler+0xbc>
 800b6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00b      	beq.n	800b6ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6e2:	f043 0201 	orr.w	r2, r3, #1
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d011      	beq.n	800b71c <HAL_UART_IRQHandler+0xec>
 800b6f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6fc:	f003 0301 	and.w	r3, r3, #1
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00b      	beq.n	800b71c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2202      	movs	r2, #2
 800b70a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b712:	f043 0204 	orr.w	r2, r3, #4
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b720:	f003 0304 	and.w	r3, r3, #4
 800b724:	2b00      	cmp	r3, #0
 800b726:	d011      	beq.n	800b74c <HAL_UART_IRQHandler+0x11c>
 800b728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00b      	beq.n	800b74c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2204      	movs	r2, #4
 800b73a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b742:	f043 0202 	orr.w	r2, r3, #2
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b750:	f003 0308 	and.w	r3, r3, #8
 800b754:	2b00      	cmp	r3, #0
 800b756:	d017      	beq.n	800b788 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b75c:	f003 0320 	and.w	r3, r3, #32
 800b760:	2b00      	cmp	r3, #0
 800b762:	d105      	bne.n	800b770 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b768:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2208      	movs	r2, #8
 800b776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b77e:	f043 0208 	orr.w	r2, r3, #8
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b78c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b790:	2b00      	cmp	r3, #0
 800b792:	d012      	beq.n	800b7ba <HAL_UART_IRQHandler+0x18a>
 800b794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00c      	beq.n	800b7ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7b0:	f043 0220 	orr.w	r2, r3, #32
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 8211 	beq.w	800bbe8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00d      	beq.n	800b7ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d007      	beq.n	800b7ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b802:	2b40      	cmp	r3, #64	; 0x40
 800b804:	d005      	beq.n	800b812 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b80a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d04f      	beq.n	800b8b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 ff30 	bl	800c678 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b822:	2b40      	cmp	r3, #64	; 0x40
 800b824:	d141      	bne.n	800b8aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3308      	adds	r3, #8
 800b82c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b83c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b85e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b862:	e841 2300 	strex	r3, r2, [r1]
 800b866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b86a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1d9      	bne.n	800b826 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b876:	2b00      	cmp	r3, #0
 800b878:	d013      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b87e:	4a13      	ldr	r2, [pc, #76]	; (800b8cc <HAL_UART_IRQHandler+0x29c>)
 800b880:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b886:	4618      	mov	r0, r3
 800b888:	f7fa fd2f 	bl	80062ea <HAL_DMA_Abort_IT>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d017      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a0:	e00f      	b.n	800b8c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f9be 	bl	800bc24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a8:	e00b      	b.n	800b8c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f9ba 	bl	800bc24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8b0:	e007      	b.n	800b8c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f9b6 	bl	800bc24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b8c0:	e192      	b.n	800bbe8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c2:	bf00      	nop
    return;
 800b8c4:	e190      	b.n	800bbe8 <HAL_UART_IRQHandler+0x5b8>
 800b8c6:	bf00      	nop
 800b8c8:	04000120 	.word	0x04000120
 800b8cc:	0800c9d3 	.word	0x0800c9d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	f040 814b 	bne.w	800bb70 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8de:	f003 0310 	and.w	r3, r3, #16
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 8144 	beq.w	800bb70 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ec:	f003 0310 	and.w	r3, r3, #16
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 813d 	beq.w	800bb70 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b908:	2b40      	cmp	r3, #64	; 0x40
 800b90a:	f040 80b5 	bne.w	800ba78 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b91a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 8164 	beq.w	800bbec <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b92a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b92e:	429a      	cmp	r2, r3
 800b930:	f080 815c 	bcs.w	800bbec <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b93a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	2b20      	cmp	r3, #32
 800b946:	f000 8086 	beq.w	800ba56 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b95e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b966:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	461a      	mov	r2, r3
 800b970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b978:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b980:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b984:	e841 2300 	strex	r3, r2, [r1]
 800b988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b98c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1da      	bne.n	800b94a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3308      	adds	r3, #8
 800b99a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9a6:	f023 0301 	bic.w	r3, r3, #1
 800b9aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9c4:	e841 2300 	strex	r3, r2, [r1]
 800b9c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1e1      	bne.n	800b994 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9fc:	e841 2300 	strex	r3, r2, [r1]
 800ba00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1e3      	bne.n	800b9d0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2220      	movs	r2, #32
 800ba0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba1e:	e853 3f00 	ldrex	r3, [r3]
 800ba22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba26:	f023 0310 	bic.w	r3, r3, #16
 800ba2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba40:	e841 2300 	strex	r3, r2, [r1]
 800ba44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1e4      	bne.n	800ba16 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fa fc11 	bl	8006278 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f8f5 	bl	800bc60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba76:	e0b9      	b.n	800bbec <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 80ab 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800ba9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80a6 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baac:	e853 3f00 	ldrex	r3, [r3]
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	461a      	mov	r2, r3
 800bac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bac6:	647b      	str	r3, [r7, #68]	; 0x44
 800bac8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bacc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bace:	e841 2300 	strex	r3, r2, [r1]
 800bad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1e4      	bne.n	800baa4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3308      	adds	r3, #8
 800bae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae4:	e853 3f00 	ldrex	r3, [r3]
 800bae8:	623b      	str	r3, [r7, #32]
   return(result);
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	f023 0301 	bic.w	r3, r3, #1
 800baf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3308      	adds	r3, #8
 800bafa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bafe:	633a      	str	r2, [r7, #48]	; 0x30
 800bb00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb06:	e841 2300 	strex	r3, r2, [r1]
 800bb0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1e3      	bne.n	800bada <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2220      	movs	r2, #32
 800bb16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	e853 3f00 	ldrex	r3, [r3]
 800bb32:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f023 0310 	bic.w	r3, r3, #16
 800bb3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb48:	61fb      	str	r3, [r7, #28]
 800bb4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	69b9      	ldr	r1, [r7, #24]
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	617b      	str	r3, [r7, #20]
   return(result);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e4      	bne.n	800bb26 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2202      	movs	r2, #2
 800bb60:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f879 	bl	800bc60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb6e:	e03f      	b.n	800bbf0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00e      	beq.n	800bb9a <HAL_UART_IRQHandler+0x56a>
 800bb7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d008      	beq.n	800bb9a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 f9fb 	bl	800cf8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb98:	e02d      	b.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00e      	beq.n	800bbc4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d008      	beq.n	800bbc4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d01c      	beq.n	800bbf4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	4798      	blx	r3
    }
    return;
 800bbc2:	e017      	b.n	800bbf4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bbc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d012      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
 800bbd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00c      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f001 f804 	bl	800cbea <UART_EndTransmit_IT>
    return;
 800bbe2:	e008      	b.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800bbe4:	bf00      	nop
 800bbe6:	e006      	b.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
    return;
 800bbe8:	bf00      	nop
 800bbea:	e004      	b.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800bbec:	bf00      	nop
 800bbee:	e002      	b.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800bbf0:	bf00      	nop
 800bbf2:	e000      	b.n	800bbf6 <HAL_UART_IRQHandler+0x5c6>
    return;
 800bbf4:	bf00      	nop
  }

}
 800bbf6:	37e8      	adds	r7, #232	; 0xe8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	431a      	orrs	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bca6:	f023 030c 	bic.w	r3, r3, #12
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	6812      	ldr	r2, [r2, #0]
 800bcae:	6979      	ldr	r1, [r7, #20]
 800bcb0:	430b      	orrs	r3, r1
 800bcb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68da      	ldr	r2, [r3, #12]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	430a      	orrs	r2, r1
 800bcec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4aa7      	ldr	r2, [pc, #668]	; (800bf90 <UART_SetConfig+0x318>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d120      	bne.n	800bd3a <UART_SetConfig+0xc2>
 800bcf8:	4ba6      	ldr	r3, [pc, #664]	; (800bf94 <UART_SetConfig+0x31c>)
 800bcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfc:	f003 0303 	and.w	r3, r3, #3
 800bd00:	2b03      	cmp	r3, #3
 800bd02:	d817      	bhi.n	800bd34 <UART_SetConfig+0xbc>
 800bd04:	a201      	add	r2, pc, #4	; (adr r2, 800bd0c <UART_SetConfig+0x94>)
 800bd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0a:	bf00      	nop
 800bd0c:	0800bd1d 	.word	0x0800bd1d
 800bd10:	0800bd29 	.word	0x0800bd29
 800bd14:	0800bd2f 	.word	0x0800bd2f
 800bd18:	0800bd23 	.word	0x0800bd23
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	77fb      	strb	r3, [r7, #31]
 800bd20:	e0b5      	b.n	800be8e <UART_SetConfig+0x216>
 800bd22:	2302      	movs	r3, #2
 800bd24:	77fb      	strb	r3, [r7, #31]
 800bd26:	e0b2      	b.n	800be8e <UART_SetConfig+0x216>
 800bd28:	2304      	movs	r3, #4
 800bd2a:	77fb      	strb	r3, [r7, #31]
 800bd2c:	e0af      	b.n	800be8e <UART_SetConfig+0x216>
 800bd2e:	2308      	movs	r3, #8
 800bd30:	77fb      	strb	r3, [r7, #31]
 800bd32:	e0ac      	b.n	800be8e <UART_SetConfig+0x216>
 800bd34:	2310      	movs	r3, #16
 800bd36:	77fb      	strb	r3, [r7, #31]
 800bd38:	e0a9      	b.n	800be8e <UART_SetConfig+0x216>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a96      	ldr	r2, [pc, #600]	; (800bf98 <UART_SetConfig+0x320>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d124      	bne.n	800bd8e <UART_SetConfig+0x116>
 800bd44:	4b93      	ldr	r3, [pc, #588]	; (800bf94 <UART_SetConfig+0x31c>)
 800bd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd50:	d011      	beq.n	800bd76 <UART_SetConfig+0xfe>
 800bd52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd56:	d817      	bhi.n	800bd88 <UART_SetConfig+0x110>
 800bd58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd5c:	d011      	beq.n	800bd82 <UART_SetConfig+0x10a>
 800bd5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd62:	d811      	bhi.n	800bd88 <UART_SetConfig+0x110>
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d003      	beq.n	800bd70 <UART_SetConfig+0xf8>
 800bd68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd6c:	d006      	beq.n	800bd7c <UART_SetConfig+0x104>
 800bd6e:	e00b      	b.n	800bd88 <UART_SetConfig+0x110>
 800bd70:	2300      	movs	r3, #0
 800bd72:	77fb      	strb	r3, [r7, #31]
 800bd74:	e08b      	b.n	800be8e <UART_SetConfig+0x216>
 800bd76:	2302      	movs	r3, #2
 800bd78:	77fb      	strb	r3, [r7, #31]
 800bd7a:	e088      	b.n	800be8e <UART_SetConfig+0x216>
 800bd7c:	2304      	movs	r3, #4
 800bd7e:	77fb      	strb	r3, [r7, #31]
 800bd80:	e085      	b.n	800be8e <UART_SetConfig+0x216>
 800bd82:	2308      	movs	r3, #8
 800bd84:	77fb      	strb	r3, [r7, #31]
 800bd86:	e082      	b.n	800be8e <UART_SetConfig+0x216>
 800bd88:	2310      	movs	r3, #16
 800bd8a:	77fb      	strb	r3, [r7, #31]
 800bd8c:	e07f      	b.n	800be8e <UART_SetConfig+0x216>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a82      	ldr	r2, [pc, #520]	; (800bf9c <UART_SetConfig+0x324>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d124      	bne.n	800bde2 <UART_SetConfig+0x16a>
 800bd98:	4b7e      	ldr	r3, [pc, #504]	; (800bf94 <UART_SetConfig+0x31c>)
 800bd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bda0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bda4:	d011      	beq.n	800bdca <UART_SetConfig+0x152>
 800bda6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bdaa:	d817      	bhi.n	800bddc <UART_SetConfig+0x164>
 800bdac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bdb0:	d011      	beq.n	800bdd6 <UART_SetConfig+0x15e>
 800bdb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bdb6:	d811      	bhi.n	800bddc <UART_SetConfig+0x164>
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <UART_SetConfig+0x14c>
 800bdbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bdc0:	d006      	beq.n	800bdd0 <UART_SetConfig+0x158>
 800bdc2:	e00b      	b.n	800bddc <UART_SetConfig+0x164>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	77fb      	strb	r3, [r7, #31]
 800bdc8:	e061      	b.n	800be8e <UART_SetConfig+0x216>
 800bdca:	2302      	movs	r3, #2
 800bdcc:	77fb      	strb	r3, [r7, #31]
 800bdce:	e05e      	b.n	800be8e <UART_SetConfig+0x216>
 800bdd0:	2304      	movs	r3, #4
 800bdd2:	77fb      	strb	r3, [r7, #31]
 800bdd4:	e05b      	b.n	800be8e <UART_SetConfig+0x216>
 800bdd6:	2308      	movs	r3, #8
 800bdd8:	77fb      	strb	r3, [r7, #31]
 800bdda:	e058      	b.n	800be8e <UART_SetConfig+0x216>
 800bddc:	2310      	movs	r3, #16
 800bdde:	77fb      	strb	r3, [r7, #31]
 800bde0:	e055      	b.n	800be8e <UART_SetConfig+0x216>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a6e      	ldr	r2, [pc, #440]	; (800bfa0 <UART_SetConfig+0x328>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d124      	bne.n	800be36 <UART_SetConfig+0x1be>
 800bdec:	4b69      	ldr	r3, [pc, #420]	; (800bf94 <UART_SetConfig+0x31c>)
 800bdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bdf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdf8:	d011      	beq.n	800be1e <UART_SetConfig+0x1a6>
 800bdfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdfe:	d817      	bhi.n	800be30 <UART_SetConfig+0x1b8>
 800be00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be04:	d011      	beq.n	800be2a <UART_SetConfig+0x1b2>
 800be06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be0a:	d811      	bhi.n	800be30 <UART_SetConfig+0x1b8>
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <UART_SetConfig+0x1a0>
 800be10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be14:	d006      	beq.n	800be24 <UART_SetConfig+0x1ac>
 800be16:	e00b      	b.n	800be30 <UART_SetConfig+0x1b8>
 800be18:	2300      	movs	r3, #0
 800be1a:	77fb      	strb	r3, [r7, #31]
 800be1c:	e037      	b.n	800be8e <UART_SetConfig+0x216>
 800be1e:	2302      	movs	r3, #2
 800be20:	77fb      	strb	r3, [r7, #31]
 800be22:	e034      	b.n	800be8e <UART_SetConfig+0x216>
 800be24:	2304      	movs	r3, #4
 800be26:	77fb      	strb	r3, [r7, #31]
 800be28:	e031      	b.n	800be8e <UART_SetConfig+0x216>
 800be2a:	2308      	movs	r3, #8
 800be2c:	77fb      	strb	r3, [r7, #31]
 800be2e:	e02e      	b.n	800be8e <UART_SetConfig+0x216>
 800be30:	2310      	movs	r3, #16
 800be32:	77fb      	strb	r3, [r7, #31]
 800be34:	e02b      	b.n	800be8e <UART_SetConfig+0x216>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a5a      	ldr	r2, [pc, #360]	; (800bfa4 <UART_SetConfig+0x32c>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d124      	bne.n	800be8a <UART_SetConfig+0x212>
 800be40:	4b54      	ldr	r3, [pc, #336]	; (800bf94 <UART_SetConfig+0x31c>)
 800be42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800be48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800be4c:	d011      	beq.n	800be72 <UART_SetConfig+0x1fa>
 800be4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800be52:	d817      	bhi.n	800be84 <UART_SetConfig+0x20c>
 800be54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be58:	d011      	beq.n	800be7e <UART_SetConfig+0x206>
 800be5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be5e:	d811      	bhi.n	800be84 <UART_SetConfig+0x20c>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <UART_SetConfig+0x1f4>
 800be64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be68:	d006      	beq.n	800be78 <UART_SetConfig+0x200>
 800be6a:	e00b      	b.n	800be84 <UART_SetConfig+0x20c>
 800be6c:	2300      	movs	r3, #0
 800be6e:	77fb      	strb	r3, [r7, #31]
 800be70:	e00d      	b.n	800be8e <UART_SetConfig+0x216>
 800be72:	2302      	movs	r3, #2
 800be74:	77fb      	strb	r3, [r7, #31]
 800be76:	e00a      	b.n	800be8e <UART_SetConfig+0x216>
 800be78:	2304      	movs	r3, #4
 800be7a:	77fb      	strb	r3, [r7, #31]
 800be7c:	e007      	b.n	800be8e <UART_SetConfig+0x216>
 800be7e:	2308      	movs	r3, #8
 800be80:	77fb      	strb	r3, [r7, #31]
 800be82:	e004      	b.n	800be8e <UART_SetConfig+0x216>
 800be84:	2310      	movs	r3, #16
 800be86:	77fb      	strb	r3, [r7, #31]
 800be88:	e001      	b.n	800be8e <UART_SetConfig+0x216>
 800be8a:	2310      	movs	r3, #16
 800be8c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be96:	d15b      	bne.n	800bf50 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800be98:	7ffb      	ldrb	r3, [r7, #31]
 800be9a:	2b08      	cmp	r3, #8
 800be9c:	d827      	bhi.n	800beee <UART_SetConfig+0x276>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <UART_SetConfig+0x22c>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bec9 	.word	0x0800bec9
 800bea8:	0800bed1 	.word	0x0800bed1
 800beac:	0800bed9 	.word	0x0800bed9
 800beb0:	0800beef 	.word	0x0800beef
 800beb4:	0800bedf 	.word	0x0800bedf
 800beb8:	0800beef 	.word	0x0800beef
 800bebc:	0800beef 	.word	0x0800beef
 800bec0:	0800beef 	.word	0x0800beef
 800bec4:	0800bee7 	.word	0x0800bee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bec8:	f7fe fb64 	bl	800a594 <HAL_RCC_GetPCLK1Freq>
 800becc:	61b8      	str	r0, [r7, #24]
        break;
 800bece:	e013      	b.n	800bef8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bed0:	f7fe fb82 	bl	800a5d8 <HAL_RCC_GetPCLK2Freq>
 800bed4:	61b8      	str	r0, [r7, #24]
        break;
 800bed6:	e00f      	b.n	800bef8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bed8:	4b33      	ldr	r3, [pc, #204]	; (800bfa8 <UART_SetConfig+0x330>)
 800beda:	61bb      	str	r3, [r7, #24]
        break;
 800bedc:	e00c      	b.n	800bef8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bede:	f7fe fae1 	bl	800a4a4 <HAL_RCC_GetSysClockFreq>
 800bee2:	61b8      	str	r0, [r7, #24]
        break;
 800bee4:	e008      	b.n	800bef8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beea:	61bb      	str	r3, [r7, #24]
        break;
 800beec:	e004      	b.n	800bef8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800beee:	2300      	movs	r3, #0
 800bef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	77bb      	strb	r3, [r7, #30]
        break;
 800bef6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 8082 	beq.w	800c004 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	005a      	lsls	r2, r3, #1
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	085b      	lsrs	r3, r3, #1
 800bf0a:	441a      	add	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2b0f      	cmp	r3, #15
 800bf1a:	d916      	bls.n	800bf4a <UART_SetConfig+0x2d2>
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf22:	d212      	bcs.n	800bf4a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	f023 030f 	bic.w	r3, r3, #15
 800bf2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	085b      	lsrs	r3, r3, #1
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f003 0307 	and.w	r3, r3, #7
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	89fb      	ldrh	r3, [r7, #14]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	89fa      	ldrh	r2, [r7, #14]
 800bf46:	60da      	str	r2, [r3, #12]
 800bf48:	e05c      	b.n	800c004 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	77bb      	strb	r3, [r7, #30]
 800bf4e:	e059      	b.n	800c004 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf50:	7ffb      	ldrb	r3, [r7, #31]
 800bf52:	2b08      	cmp	r3, #8
 800bf54:	d835      	bhi.n	800bfc2 <UART_SetConfig+0x34a>
 800bf56:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <UART_SetConfig+0x2e4>)
 800bf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5c:	0800bf81 	.word	0x0800bf81
 800bf60:	0800bf89 	.word	0x0800bf89
 800bf64:	0800bfad 	.word	0x0800bfad
 800bf68:	0800bfc3 	.word	0x0800bfc3
 800bf6c:	0800bfb3 	.word	0x0800bfb3
 800bf70:	0800bfc3 	.word	0x0800bfc3
 800bf74:	0800bfc3 	.word	0x0800bfc3
 800bf78:	0800bfc3 	.word	0x0800bfc3
 800bf7c:	0800bfbb 	.word	0x0800bfbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf80:	f7fe fb08 	bl	800a594 <HAL_RCC_GetPCLK1Freq>
 800bf84:	61b8      	str	r0, [r7, #24]
        break;
 800bf86:	e021      	b.n	800bfcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf88:	f7fe fb26 	bl	800a5d8 <HAL_RCC_GetPCLK2Freq>
 800bf8c:	61b8      	str	r0, [r7, #24]
        break;
 800bf8e:	e01d      	b.n	800bfcc <UART_SetConfig+0x354>
 800bf90:	40013800 	.word	0x40013800
 800bf94:	40021000 	.word	0x40021000
 800bf98:	40004400 	.word	0x40004400
 800bf9c:	40004800 	.word	0x40004800
 800bfa0:	40004c00 	.word	0x40004c00
 800bfa4:	40005000 	.word	0x40005000
 800bfa8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfac:	4b1b      	ldr	r3, [pc, #108]	; (800c01c <UART_SetConfig+0x3a4>)
 800bfae:	61bb      	str	r3, [r7, #24]
        break;
 800bfb0:	e00c      	b.n	800bfcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfb2:	f7fe fa77 	bl	800a4a4 <HAL_RCC_GetSysClockFreq>
 800bfb6:	61b8      	str	r0, [r7, #24]
        break;
 800bfb8:	e008      	b.n	800bfcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfbe:	61bb      	str	r3, [r7, #24]
        break;
 800bfc0:	e004      	b.n	800bfcc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	77bb      	strb	r3, [r7, #30]
        break;
 800bfca:	bf00      	nop
    }

    if (pclk != 0U)
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d018      	beq.n	800c004 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	085a      	lsrs	r2, r3, #1
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	441a      	add	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	2b0f      	cmp	r3, #15
 800bfea:	d909      	bls.n	800c000 <UART_SetConfig+0x388>
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff2:	d205      	bcs.n	800c000 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	60da      	str	r2, [r3, #12]
 800bffe:	e001      	b.n	800c004 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c010:	7fbb      	ldrb	r3, [r7, #30]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3720      	adds	r7, #32
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	007a1200 	.word	0x007a1200

0800c020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00a      	beq.n	800c04a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04e:	f003 0302 	and.w	r3, r3, #2
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	430a      	orrs	r2, r1
 800c06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	f003 0304 	and.w	r3, r3, #4
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00a      	beq.n	800c08e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	430a      	orrs	r2, r1
 800c08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c092:	f003 0308 	and.w	r3, r3, #8
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00a      	beq.n	800c0b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	f003 0310 	and.w	r3, r3, #16
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00a      	beq.n	800c0d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d6:	f003 0320 	and.w	r3, r3, #32
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00a      	beq.n	800c0f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	430a      	orrs	r2, r1
 800c0f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d01a      	beq.n	800c136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	430a      	orrs	r2, r1
 800c114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c11e:	d10a      	bne.n	800c136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	430a      	orrs	r2, r1
 800c134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00a      	beq.n	800c158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	430a      	orrs	r2, r1
 800c156:	605a      	str	r2, [r3, #4]
  }
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b098      	sub	sp, #96	; 0x60
 800c168:	af02      	add	r7, sp, #8
 800c16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c174:	f7f9 fe96 	bl	8005ea4 <HAL_GetTick>
 800c178:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f003 0308 	and.w	r3, r3, #8
 800c184:	2b08      	cmp	r3, #8
 800c186:	d12e      	bne.n	800c1e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c190:	2200      	movs	r2, #0
 800c192:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f88c 	bl	800c2b4 <UART_WaitOnFlagUntilTimeout>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d021      	beq.n	800c1e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	e853 3f00 	ldrex	r3, [r3]
 800c1ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1b6:	653b      	str	r3, [r7, #80]	; 0x50
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c1c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1c8:	e841 2300 	strex	r3, r2, [r1]
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1e6      	bne.n	800c1a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2220      	movs	r2, #32
 800c1d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e062      	b.n	800c2ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d149      	bne.n	800c288 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f856 	bl	800c2b4 <UART_WaitOnFlagUntilTimeout>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d03c      	beq.n	800c288 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	e853 3f00 	ldrex	r3, [r3]
 800c21a:	623b      	str	r3, [r7, #32]
   return(result);
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c222:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c22c:	633b      	str	r3, [r7, #48]	; 0x30
 800c22e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e6      	bne.n	800c20e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3308      	adds	r3, #8
 800c246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0301 	bic.w	r3, r3, #1
 800c256:	64bb      	str	r3, [r7, #72]	; 0x48
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3308      	adds	r3, #8
 800c25e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c260:	61fa      	str	r2, [r7, #28]
 800c262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c264:	69b9      	ldr	r1, [r7, #24]
 800c266:	69fa      	ldr	r2, [r7, #28]
 800c268:	e841 2300 	strex	r3, r2, [r1]
 800c26c:	617b      	str	r3, [r7, #20]
   return(result);
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e5      	bne.n	800c240 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2220      	movs	r2, #32
 800c278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e011      	b.n	800c2ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2220      	movs	r2, #32
 800c28c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2220      	movs	r2, #32
 800c292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3758      	adds	r7, #88	; 0x58
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	603b      	str	r3, [r7, #0]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2c4:	e049      	b.n	800c35a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2cc:	d045      	beq.n	800c35a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ce:	f7f9 fde9 	bl	8005ea4 <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d302      	bcc.n	800c2e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e048      	b.n	800c37a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f003 0304 	and.w	r3, r3, #4
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d031      	beq.n	800c35a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	f003 0308 	and.w	r3, r3, #8
 800c300:	2b08      	cmp	r3, #8
 800c302:	d110      	bne.n	800c326 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2208      	movs	r2, #8
 800c30a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 f9b3 	bl	800c678 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2208      	movs	r2, #8
 800c316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e029      	b.n	800c37a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c334:	d111      	bne.n	800c35a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c33e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 f999 	bl	800c678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2220      	movs	r2, #32
 800c34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	e00f      	b.n	800c37a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	69da      	ldr	r2, [r3, #28]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	4013      	ands	r3, r2
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	429a      	cmp	r2, r3
 800c368:	bf0c      	ite	eq
 800c36a:	2301      	moveq	r3, #1
 800c36c:	2300      	movne	r3, #0
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	429a      	cmp	r2, r3
 800c376:	d0a6      	beq.n	800c2c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c384:	b480      	push	{r7}
 800c386:	b097      	sub	sp, #92	; 0x5c
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	4613      	mov	r3, r2
 800c390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	88fa      	ldrh	r2, [r7, #6]
 800c39c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	88fa      	ldrh	r2, [r7, #6]
 800c3a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3b6:	d10e      	bne.n	800c3d6 <UART_Start_Receive_IT+0x52>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d105      	bne.n	800c3cc <UART_Start_Receive_IT+0x48>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c3c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3ca:	e01a      	b.n	800c402 <UART_Start_Receive_IT+0x7e>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	22ff      	movs	r2, #255	; 0xff
 800c3d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3d4:	e015      	b.n	800c402 <UART_Start_Receive_IT+0x7e>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10d      	bne.n	800c3fa <UART_Start_Receive_IT+0x76>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d104      	bne.n	800c3f0 <UART_Start_Receive_IT+0x6c>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	22ff      	movs	r2, #255	; 0xff
 800c3ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3ee:	e008      	b.n	800c402 <UART_Start_Receive_IT+0x7e>
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	227f      	movs	r2, #127	; 0x7f
 800c3f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3f8:	e003      	b.n	800c402 <UART_Start_Receive_IT+0x7e>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2222      	movs	r2, #34	; 0x22
 800c40e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3308      	adds	r3, #8
 800c418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c41c:	e853 3f00 	ldrex	r3, [r3]
 800c420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c424:	f043 0301 	orr.w	r3, r3, #1
 800c428:	657b      	str	r3, [r7, #84]	; 0x54
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c432:	64ba      	str	r2, [r7, #72]	; 0x48
 800c434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c43a:	e841 2300 	strex	r3, r2, [r1]
 800c43e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1e5      	bne.n	800c412 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c44e:	d107      	bne.n	800c460 <UART_Start_Receive_IT+0xdc>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4a22      	ldr	r2, [pc, #136]	; (800c4e4 <UART_Start_Receive_IT+0x160>)
 800c45c:	669a      	str	r2, [r3, #104]	; 0x68
 800c45e:	e002      	b.n	800c466 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a21      	ldr	r2, [pc, #132]	; (800c4e8 <UART_Start_Receive_IT+0x164>)
 800c464:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d019      	beq.n	800c4a2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	e853 3f00 	ldrex	r3, [r3]
 800c47a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c482:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c48c:	637b      	str	r3, [r7, #52]	; 0x34
 800c48e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c494:	e841 2300 	strex	r3, r2, [r1]
 800c498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e6      	bne.n	800c46e <UART_Start_Receive_IT+0xea>
 800c4a0:	e018      	b.n	800c4d4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	e853 3f00 	ldrex	r3, [r3]
 800c4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f043 0320 	orr.w	r3, r3, #32
 800c4b6:	653b      	str	r3, [r7, #80]	; 0x50
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c0:	623b      	str	r3, [r7, #32]
 800c4c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	69f9      	ldr	r1, [r7, #28]
 800c4c6:	6a3a      	ldr	r2, [r7, #32]
 800c4c8:	e841 2300 	strex	r3, r2, [r1]
 800c4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1e6      	bne.n	800c4a2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	375c      	adds	r7, #92	; 0x5c
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	0800cde7 	.word	0x0800cde7
 800c4e8:	0800cc3f 	.word	0x0800cc3f

0800c4ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b096      	sub	sp, #88	; 0x58
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	88fa      	ldrh	r2, [r7, #6]
 800c504:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2222      	movs	r2, #34	; 0x22
 800c514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d028      	beq.n	800c572 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c524:	4a3e      	ldr	r2, [pc, #248]	; (800c620 <UART_Start_Receive_DMA+0x134>)
 800c526:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c52c:	4a3d      	ldr	r2, [pc, #244]	; (800c624 <UART_Start_Receive_DMA+0x138>)
 800c52e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c534:	4a3c      	ldr	r2, [pc, #240]	; (800c628 <UART_Start_Receive_DMA+0x13c>)
 800c536:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c53c:	2200      	movs	r2, #0
 800c53e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3324      	adds	r3, #36	; 0x24
 800c54a:	4619      	mov	r1, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c550:	461a      	mov	r2, r3
 800c552:	88fb      	ldrh	r3, [r7, #6]
 800c554:	f7f9 fe31 	bl	80061ba <HAL_DMA_Start_IT>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d009      	beq.n	800c572 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2210      	movs	r2, #16
 800c562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e051      	b.n	800c616 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d018      	beq.n	800c5ac <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c58e:	657b      	str	r3, [r7, #84]	; 0x54
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	461a      	mov	r2, r3
 800c596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c598:	64bb      	str	r3, [r7, #72]	; 0x48
 800c59a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c59e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5a0:	e841 2300 	strex	r3, r2, [r1]
 800c5a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e6      	bne.n	800c57a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	e853 3f00 	ldrex	r3, [r3]
 800c5ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5be:	f043 0301 	orr.w	r3, r3, #1
 800c5c2:	653b      	str	r3, [r7, #80]	; 0x50
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5cc:	637a      	str	r2, [r7, #52]	; 0x34
 800c5ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5d4:	e841 2300 	strex	r3, r2, [r1]
 800c5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1e5      	bne.n	800c5ac <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	e853 3f00 	ldrex	r3, [r3]
 800c5ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c600:	623a      	str	r2, [r7, #32]
 800c602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	69f9      	ldr	r1, [r7, #28]
 800c606:	6a3a      	ldr	r2, [r7, #32]
 800c608:	e841 2300 	strex	r3, r2, [r1]
 800c60c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e5      	bne.n	800c5e0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3758      	adds	r7, #88	; 0x58
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	0800c7f1 	.word	0x0800c7f1
 800c624:	0800c917 	.word	0x0800c917
 800c628:	0800c955 	.word	0x0800c955

0800c62c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b089      	sub	sp, #36	; 0x24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	e853 3f00 	ldrex	r3, [r3]
 800c640:	60bb      	str	r3, [r7, #8]
   return(result);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c648:	61fb      	str	r3, [r7, #28]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	461a      	mov	r2, r3
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	61bb      	str	r3, [r7, #24]
 800c654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c656:	6979      	ldr	r1, [r7, #20]
 800c658:	69ba      	ldr	r2, [r7, #24]
 800c65a:	e841 2300 	strex	r3, r2, [r1]
 800c65e:	613b      	str	r3, [r7, #16]
   return(result);
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1e6      	bne.n	800c634 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2220      	movs	r2, #32
 800c66a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c66c:	bf00      	nop
 800c66e:	3724      	adds	r7, #36	; 0x24
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c678:	b480      	push	{r7}
 800c67a:	b095      	sub	sp, #84	; 0x54
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c688:	e853 3f00 	ldrex	r3, [r3]
 800c68c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c694:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c69e:	643b      	str	r3, [r7, #64]	; 0x40
 800c6a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6a6:	e841 2300 	strex	r3, r2, [r1]
 800c6aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1e6      	bne.n	800c680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3308      	adds	r3, #8
 800c6b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	f023 0301 	bic.w	r3, r3, #1
 800c6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3308      	adds	r3, #8
 800c6d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6da:	e841 2300 	strex	r3, r2, [r1]
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1e5      	bne.n	800c6b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d118      	bne.n	800c720 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	e853 3f00 	ldrex	r3, [r3]
 800c6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	f023 0310 	bic.w	r3, r3, #16
 800c702:	647b      	str	r3, [r7, #68]	; 0x44
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	461a      	mov	r2, r3
 800c70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c70c:	61bb      	str	r3, [r7, #24]
 800c70e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c710:	6979      	ldr	r1, [r7, #20]
 800c712:	69ba      	ldr	r2, [r7, #24]
 800c714:	e841 2300 	strex	r3, r2, [r1]
 800c718:	613b      	str	r3, [r7, #16]
   return(result);
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1e6      	bne.n	800c6ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2220      	movs	r2, #32
 800c724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c734:	bf00      	nop
 800c736:	3754      	adds	r7, #84	; 0x54
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b090      	sub	sp, #64	; 0x40
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	2b20      	cmp	r3, #32
 800c754:	d037      	beq.n	800c7c6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800c756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c758:	2200      	movs	r2, #0
 800c75a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3308      	adds	r3, #8
 800c764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	e853 3f00 	ldrex	r3, [r3]
 800c76c:	623b      	str	r3, [r7, #32]
   return(result);
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c774:	63bb      	str	r3, [r7, #56]	; 0x38
 800c776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3308      	adds	r3, #8
 800c77c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c77e:	633a      	str	r2, [r7, #48]	; 0x30
 800c780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e5      	bne.n	800c75e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	e853 3f00 	ldrex	r3, [r3]
 800c79e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b0:	61fb      	str	r3, [r7, #28]
 800c7b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	69b9      	ldr	r1, [r7, #24]
 800c7b6:	69fa      	ldr	r2, [r7, #28]
 800c7b8:	e841 2300 	strex	r3, r2, [r1]
 800c7bc:	617b      	str	r3, [r7, #20]
   return(result);
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1e6      	bne.n	800c792 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7c4:	e002      	b.n	800c7cc <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800c7c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c7c8:	f7f5 fce6 	bl	8002198 <HAL_UART_TxCpltCallback>
}
 800c7cc:	bf00      	nop
 800c7ce:	3740      	adds	r7, #64	; 0x40
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff fa0a 	bl	800bbfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b09c      	sub	sp, #112	; 0x70
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	2b20      	cmp	r3, #32
 800c804:	d071      	beq.n	800c8ea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c808:	2200      	movs	r2, #0
 800c80a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c816:	e853 3f00 	ldrex	r3, [r3]
 800c81a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c81e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c822:	66bb      	str	r3, [r7, #104]	; 0x68
 800c824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	461a      	mov	r2, r3
 800c82a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c82c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c82e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c834:	e841 2300 	strex	r3, r2, [r1]
 800c838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d1e6      	bne.n	800c80e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3308      	adds	r3, #8
 800c846:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	e853 3f00 	ldrex	r3, [r3]
 800c84e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c852:	f023 0301 	bic.w	r3, r3, #1
 800c856:	667b      	str	r3, [r7, #100]	; 0x64
 800c858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3308      	adds	r3, #8
 800c85e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c860:	647a      	str	r2, [r7, #68]	; 0x44
 800c862:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c868:	e841 2300 	strex	r3, r2, [r1]
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1e5      	bne.n	800c840 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3308      	adds	r3, #8
 800c87a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	e853 3f00 	ldrex	r3, [r3]
 800c882:	623b      	str	r3, [r7, #32]
   return(result);
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c88a:	663b      	str	r3, [r7, #96]	; 0x60
 800c88c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3308      	adds	r3, #8
 800c892:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c894:	633a      	str	r2, [r7, #48]	; 0x30
 800c896:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c89a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89c:	e841 2300 	strex	r3, r2, [r1]
 800c8a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1e5      	bne.n	800c874 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8aa:	2220      	movs	r2, #32
 800c8ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d118      	bne.n	800c8ea <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f023 0310 	bic.w	r3, r3, #16
 800c8cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8d6:	61fb      	str	r3, [r7, #28]
 800c8d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	69b9      	ldr	r1, [r7, #24]
 800c8dc:	69fa      	ldr	r2, [r7, #28]
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	617b      	str	r3, [r7, #20]
   return(result);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e6      	bne.n	800c8b8 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d107      	bne.n	800c908 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8fe:	4619      	mov	r1, r3
 800c900:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c902:	f7ff f9ad 	bl	800bc60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c906:	e002      	b.n	800c90e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c908:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c90a:	f7f5 fc7d 	bl	8002208 <HAL_UART_RxCpltCallback>
}
 800c90e:	bf00      	nop
 800c910:	3770      	adds	r7, #112	; 0x70
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c922:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d109      	bne.n	800c946 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c938:	085b      	lsrs	r3, r3, #1
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	4619      	mov	r1, r3
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f7ff f98e 	bl	800bc60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c944:	e002      	b.n	800c94c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7ff f962 	bl	800bc10 <HAL_UART_RxHalfCpltCallback>
}
 800c94c:	bf00      	nop
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c966:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c96e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c97a:	2b80      	cmp	r3, #128	; 0x80
 800c97c:	d109      	bne.n	800c992 <UART_DMAError+0x3e>
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	2b21      	cmp	r3, #33	; 0x21
 800c982:	d106      	bne.n	800c992 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	2200      	movs	r2, #0
 800c988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c98c:	6978      	ldr	r0, [r7, #20]
 800c98e:	f7ff fe4d 	bl	800c62c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c99c:	2b40      	cmp	r3, #64	; 0x40
 800c99e:	d109      	bne.n	800c9b4 <UART_DMAError+0x60>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b22      	cmp	r3, #34	; 0x22
 800c9a4:	d106      	bne.n	800c9b4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c9ae:	6978      	ldr	r0, [r7, #20]
 800c9b0:	f7ff fe62 	bl	800c678 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ba:	f043 0210 	orr.w	r2, r3, #16
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9c4:	6978      	ldr	r0, [r7, #20]
 800c9c6:	f7ff f92d 	bl	800bc24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9ca:	bf00      	nop
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f7ff f917 	bl	800bc24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9f6:	bf00      	nop
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2220      	movs	r2, #32
 800ca18:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff f90c 	bl	800bc38 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca20:	bf00      	nop
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca34:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	220f      	movs	r2, #15
 800ca44:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	699a      	ldr	r2, [r3, #24]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f042 0208 	orr.w	r2, r2, #8
 800ca54:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2220      	movs	r2, #32
 800ca5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff f8f1 	bl	800bc4c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca6a:	bf00      	nop
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ca72:	b480      	push	{r7}
 800ca74:	b08f      	sub	sp, #60	; 0x3c
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca7e:	2b21      	cmp	r3, #33	; 0x21
 800ca80:	d14d      	bne.n	800cb1e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d132      	bne.n	800caf4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	e853 3f00 	ldrex	r3, [r3]
 800ca9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caa2:	637b      	str	r3, [r7, #52]	; 0x34
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	461a      	mov	r2, r3
 800caaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cab4:	e841 2300 	strex	r3, r2, [r1]
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1e6      	bne.n	800ca8e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cad4:	633b      	str	r3, [r7, #48]	; 0x30
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cade:	61bb      	str	r3, [r7, #24]
 800cae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae2:	6979      	ldr	r1, [r7, #20]
 800cae4:	69ba      	ldr	r2, [r7, #24]
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	613b      	str	r3, [r7, #16]
   return(result);
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e6      	bne.n	800cac0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800caf2:	e014      	b.n	800cb1e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caf8:	781a      	ldrb	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	b292      	uxth	r2, r2
 800cb00:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb06:	1c5a      	adds	r2, r3, #1
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	3b01      	subs	r3, #1
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800cb1e:	bf00      	nop
 800cb20:	373c      	adds	r7, #60	; 0x3c
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b091      	sub	sp, #68	; 0x44
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb36:	2b21      	cmp	r3, #33	; 0x21
 800cb38:	d151      	bne.n	800cbde <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d132      	bne.n	800cbac <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	e853 3f00 	ldrex	r3, [r3]
 800cb52:	623b      	str	r3, [r7, #32]
   return(result);
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	461a      	mov	r2, r3
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	633b      	str	r3, [r7, #48]	; 0x30
 800cb66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6c:	e841 2300 	strex	r3, r2, [r1]
 800cb70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1e6      	bne.n	800cb46 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	e853 3f00 	ldrex	r3, [r3]
 800cb84:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	461a      	mov	r2, r3
 800cb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb96:	61fb      	str	r3, [r7, #28]
 800cb98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9a:	69b9      	ldr	r1, [r7, #24]
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	e841 2300 	strex	r3, r2, [r1]
 800cba2:	617b      	str	r3, [r7, #20]
   return(result);
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1e6      	bne.n	800cb78 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cbaa:	e018      	b.n	800cbde <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbb0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb4:	881a      	ldrh	r2, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbbe:	b292      	uxth	r2, r2
 800cbc0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbc6:	1c9a      	adds	r2, r3, #2
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800cbde:	bf00      	nop
 800cbe0:	3744      	adds	r7, #68	; 0x44
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b088      	sub	sp, #32
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	e853 3f00 	ldrex	r3, [r3]
 800cbfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc06:	61fb      	str	r3, [r7, #28]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	61bb      	str	r3, [r7, #24]
 800cc12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc14:	6979      	ldr	r1, [r7, #20]
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	e841 2300 	strex	r3, r2, [r1]
 800cc1c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1e6      	bne.n	800cbf2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2220      	movs	r2, #32
 800cc28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7f5 fab1 	bl	8002198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc36:	bf00      	nop
 800cc38:	3720      	adds	r7, #32
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b09c      	sub	sp, #112	; 0x70
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc4c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc56:	2b22      	cmp	r3, #34	; 0x22
 800cc58:	f040 80b9 	bne.w	800cdce <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cc6a:	b2d9      	uxtb	r1, r3
 800cc6c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc76:	400a      	ands	r2, r1
 800cc78:	b2d2      	uxtb	r2, r2
 800cc7a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f040 809c 	bne.w	800cdde <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccae:	e853 3f00 	ldrex	r3, [r3]
 800ccb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccba:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccc4:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cccc:	e841 2300 	strex	r3, r2, [r1]
 800ccd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ccd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1e6      	bne.n	800cca6 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3308      	adds	r3, #8
 800ccde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	e853 3f00 	ldrex	r3, [r3]
 800cce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccea:	f023 0301 	bic.w	r3, r3, #1
 800ccee:	667b      	str	r3, [r7, #100]	; 0x64
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ccf8:	647a      	str	r2, [r7, #68]	; 0x44
 800ccfa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ccfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd00:	e841 2300 	strex	r3, r2, [r1]
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1e5      	bne.n	800ccd8 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2220      	movs	r2, #32
 800cd10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d018      	beq.n	800cd60 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	e853 3f00 	ldrex	r3, [r3]
 800cd3a:	623b      	str	r3, [r7, #32]
   return(result);
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd42:	663b      	str	r3, [r7, #96]	; 0x60
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd4c:	633b      	str	r3, [r7, #48]	; 0x30
 800cd4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd54:	e841 2300 	strex	r3, r2, [r1]
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1e6      	bne.n	800cd2e <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d12e      	bne.n	800cdc6 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	e853 3f00 	ldrex	r3, [r3]
 800cd7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f023 0310 	bic.w	r3, r3, #16
 800cd82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	461a      	mov	r2, r3
 800cd8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd8c:	61fb      	str	r3, [r7, #28]
 800cd8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd90:	69b9      	ldr	r1, [r7, #24]
 800cd92:	69fa      	ldr	r2, [r7, #28]
 800cd94:	e841 2300 	strex	r3, r2, [r1]
 800cd98:	617b      	str	r3, [r7, #20]
   return(result);
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1e6      	bne.n	800cd6e <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	69db      	ldr	r3, [r3, #28]
 800cda6:	f003 0310 	and.w	r3, r3, #16
 800cdaa:	2b10      	cmp	r3, #16
 800cdac:	d103      	bne.n	800cdb6 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2210      	movs	r2, #16
 800cdb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7fe ff4e 	bl	800bc60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdc4:	e00b      	b.n	800cdde <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7f5 fa1e 	bl	8002208 <HAL_UART_RxCpltCallback>
}
 800cdcc:	e007      	b.n	800cdde <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	699a      	ldr	r2, [r3, #24]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f042 0208 	orr.w	r2, r2, #8
 800cddc:	619a      	str	r2, [r3, #24]
}
 800cdde:	bf00      	nop
 800cde0:	3770      	adds	r7, #112	; 0x70
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b09c      	sub	sp, #112	; 0x70
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdf4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdfe:	2b22      	cmp	r3, #34	; 0x22
 800ce00:	f040 80b9 	bne.w	800cf76 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce12:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ce14:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ce18:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce22:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce28:	1c9a      	adds	r2, r3, #2
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	3b01      	subs	r3, #1
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f040 809c 	bne.w	800cf86 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce56:	e853 3f00 	ldrex	r3, [r3]
 800ce5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ce5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce62:	667b      	str	r3, [r7, #100]	; 0x64
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce6c:	657b      	str	r3, [r7, #84]	; 0x54
 800ce6e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce74:	e841 2300 	strex	r3, r2, [r1]
 800ce78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1e6      	bne.n	800ce4e <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3308      	adds	r3, #8
 800ce86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8a:	e853 3f00 	ldrex	r3, [r3]
 800ce8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce92:	f023 0301 	bic.w	r3, r3, #1
 800ce96:	663b      	str	r3, [r7, #96]	; 0x60
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cea0:	643a      	str	r2, [r7, #64]	; 0x40
 800cea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cea8:	e841 2300 	strex	r3, r2, [r1]
 800ceac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ceae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1e5      	bne.n	800ce80 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d018      	beq.n	800cf08 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	e853 3f00 	ldrex	r3, [r3]
 800cee2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ceea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	461a      	mov	r2, r3
 800cef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cef6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cefa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cefc:	e841 2300 	strex	r3, r2, [r1]
 800cf00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1e6      	bne.n	800ced6 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d12e      	bne.n	800cf6e <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	e853 3f00 	ldrex	r3, [r3]
 800cf22:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	f023 0310 	bic.w	r3, r3, #16
 800cf2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	461a      	mov	r2, r3
 800cf32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf34:	61bb      	str	r3, [r7, #24]
 800cf36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf38:	6979      	ldr	r1, [r7, #20]
 800cf3a:	69ba      	ldr	r2, [r7, #24]
 800cf3c:	e841 2300 	strex	r3, r2, [r1]
 800cf40:	613b      	str	r3, [r7, #16]
   return(result);
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1e6      	bne.n	800cf16 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	69db      	ldr	r3, [r3, #28]
 800cf4e:	f003 0310 	and.w	r3, r3, #16
 800cf52:	2b10      	cmp	r3, #16
 800cf54:	d103      	bne.n	800cf5e <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2210      	movs	r2, #16
 800cf5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7fe fe7a 	bl	800bc60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf6c:	e00b      	b.n	800cf86 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7f5 f94a 	bl	8002208 <HAL_UART_RxCpltCallback>
}
 800cf74:	e007      	b.n	800cf86 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	699a      	ldr	r2, [r3, #24]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f042 0208 	orr.w	r2, r2, #8
 800cf84:	619a      	str	r2, [r3, #24]
}
 800cf86:	bf00      	nop
 800cf88:	3770      	adds	r7, #112	; 0x70
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf8e:	b480      	push	{r7}
 800cf90:	b083      	sub	sp, #12
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf96:	bf00      	nop
 800cf98:	370c      	adds	r7, #12
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cfa2:	b480      	push	{r7}
 800cfa4:	b085      	sub	sp, #20
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cfac:	2300      	movs	r3, #0
 800cfae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cfb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfb4:	2b84      	cmp	r3, #132	; 0x84
 800cfb6:	d005      	beq.n	800cfc4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cfb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	3303      	adds	r3, #3
 800cfc2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b083      	sub	sp, #12
 800cfd6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfd8:	f3ef 8305 	mrs	r3, IPSR
 800cfdc:	607b      	str	r3, [r7, #4]
  return(result);
 800cfde:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	bf14      	ite	ne
 800cfe4:	2301      	movne	r3, #1
 800cfe6:	2300      	moveq	r3, #0
 800cfe8:	b2db      	uxtb	r3, r3
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cffa:	f001 fa6f 	bl	800e4dc <vTaskStartScheduler>
  
  return osOK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	bd80      	pop	{r7, pc}

0800d004 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d008:	f7ff ffe3 	bl	800cfd2 <inHandlerMode>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d012:	f001 fb8d 	bl	800e730 <xTaskGetTickCountFromISR>
 800d016:	4603      	mov	r3, r0
 800d018:	e002      	b.n	800d020 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d01a:	f001 fb79 	bl	800e710 <xTaskGetTickCount>
 800d01e:	4603      	mov	r3, r0
  }
}
 800d020:	4618      	mov	r0, r3
 800d022:	bd80      	pop	{r7, pc}

0800d024 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d026:	b089      	sub	sp, #36	; 0x24
 800d028:	af04      	add	r7, sp, #16
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d020      	beq.n	800d078 <osThreadCreate+0x54>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d01c      	beq.n	800d078 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685c      	ldr	r4, [r3, #4]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	691e      	ldr	r6, [r3, #16]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d050:	4618      	mov	r0, r3
 800d052:	f7ff ffa6 	bl	800cfa2 <makeFreeRtosPriority>
 800d056:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d060:	9202      	str	r2, [sp, #8]
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	9100      	str	r1, [sp, #0]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	4632      	mov	r2, r6
 800d06a:	4629      	mov	r1, r5
 800d06c:	4620      	mov	r0, r4
 800d06e:	f000 ffe1 	bl	800e034 <xTaskCreateStatic>
 800d072:	4603      	mov	r3, r0
 800d074:	60fb      	str	r3, [r7, #12]
 800d076:	e01c      	b.n	800d0b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	685c      	ldr	r4, [r3, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d084:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7ff ff88 	bl	800cfa2 <makeFreeRtosPriority>
 800d092:	4602      	mov	r2, r0
 800d094:	f107 030c 	add.w	r3, r7, #12
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	9200      	str	r2, [sp, #0]
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	4632      	mov	r2, r6
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f001 f822 	bl	800e0ec <xTaskCreate>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d001      	beq.n	800d0b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e000      	b.n	800d0b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <osDelay+0x16>
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	e000      	b.n	800d0d4 <osDelay+0x18>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f001 f9cd 	bl	800e474 <vTaskDelay>
  
  return osOK;
 800d0da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af02      	add	r7, sp, #8
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d013      	beq.n	800d122 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800d0fa:	7afb      	ldrb	r3, [r7, #11]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d101      	bne.n	800d104 <osTimerCreate+0x20>
 800d100:	2101      	movs	r1, #1
 800d102:	e000      	b.n	800d106 <osTimerCreate+0x22>
 800d104:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800d10e:	9201      	str	r2, [sp, #4]
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	460a      	mov	r2, r1
 800d116:	2101      	movs	r1, #1
 800d118:	480b      	ldr	r0, [pc, #44]	; (800d148 <osTimerCreate+0x64>)
 800d11a:	f002 f8fe 	bl	800f31a <xTimerCreateStatic>
 800d11e:	4603      	mov	r3, r0
 800d120:	e00e      	b.n	800d140 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800d122:	7afb      	ldrb	r3, [r7, #11]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d101      	bne.n	800d12c <osTimerCreate+0x48>
 800d128:	2201      	movs	r2, #1
 800d12a:	e000      	b.n	800d12e <osTimerCreate+0x4a>
 800d12c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2101      	movs	r1, #1
 800d138:	4803      	ldr	r0, [pc, #12]	; (800d148 <osTimerCreate+0x64>)
 800d13a:	f002 f8cd 	bl	800f2d8 <xTimerCreate>
 800d13e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	08010c10 	.word	0x08010c10

0800d14c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	4619      	mov	r1, r3
 800d162:	2001      	movs	r0, #1
 800d164:	f000 fa42 	bl	800d5ec <xQueueCreateMutexStatic>
 800d168:	4603      	mov	r3, r0
 800d16a:	e003      	b.n	800d174 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d16c:	2001      	movs	r0, #1
 800d16e:	f000 fa25 	bl	800d5bc <xQueueCreateMutex>
 800d172:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <osDelayUntil+0x18>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	e000      	b.n	800d196 <osDelayUntil+0x1a>
 800d194:	2301      	movs	r3, #1
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f001 f8ed 	bl	800e378 <vTaskDelayUntil>
  
  return osOK;
 800d19e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f103 0208 	add.w	r2, r3, #8
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f103 0208 	add.w	r2, r3, #8
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f103 0208 	add.w	r2, r3, #8
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1dc:	bf00      	nop
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d1f6:	bf00      	nop
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d202:	b480      	push	{r7}
 800d204:	b085      	sub	sp, #20
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	689a      	ldr	r2, [r3, #8]
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	601a      	str	r2, [r3, #0]
}
 800d23e:	bf00      	nop
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d24a:	b480      	push	{r7}
 800d24c:	b085      	sub	sp, #20
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d260:	d103      	bne.n	800d26a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	e00c      	b.n	800d284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3308      	adds	r3, #8
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	e002      	b.n	800d278 <vListInsert+0x2e>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	429a      	cmp	r2, r3
 800d282:	d2f6      	bcs.n	800d272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	683a      	ldr	r2, [r7, #0]
 800d292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	1c5a      	adds	r2, r3, #1
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	601a      	str	r2, [r3, #0]
}
 800d2b0:	bf00      	nop
 800d2b2:	3714      	adds	r7, #20
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	6892      	ldr	r2, [r2, #8]
 800d2d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	6852      	ldr	r2, [r2, #4]
 800d2dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d103      	bne.n	800d2f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	689a      	ldr	r2, [r3, #8]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	1e5a      	subs	r2, r3, #1
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d10a      	bne.n	800d33a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d33a:	f002 fc3b 	bl	800fbb4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d346:	68f9      	ldr	r1, [r7, #12]
 800d348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d34a:	fb01 f303 	mul.w	r3, r1, r3
 800d34e:	441a      	add	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36a:	3b01      	subs	r3, #1
 800d36c:	68f9      	ldr	r1, [r7, #12]
 800d36e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d370:	fb01 f303 	mul.w	r3, r1, r3
 800d374:	441a      	add	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	22ff      	movs	r2, #255	; 0xff
 800d386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d114      	bne.n	800d3ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d01a      	beq.n	800d3ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3310      	adds	r3, #16
 800d39c:	4618      	mov	r0, r3
 800d39e:	f001 fb49 	bl	800ea34 <xTaskRemoveFromEventList>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d012      	beq.n	800d3ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d3a8:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <xQueueGenericReset+0xcc>)
 800d3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ae:	601a      	str	r2, [r3, #0]
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	e009      	b.n	800d3ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	3310      	adds	r3, #16
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7ff fef2 	bl	800d1a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3324      	adds	r3, #36	; 0x24
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff feed 	bl	800d1a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d3ce:	f002 fc21 	bl	800fc14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d3d2:	2301      	movs	r3, #1
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	e000ed04 	.word	0xe000ed04

0800d3e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b08e      	sub	sp, #56	; 0x38
 800d3e4:	af02      	add	r7, sp, #8
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10a      	bne.n	800d40a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d406:	bf00      	nop
 800d408:	e7fe      	b.n	800d408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10a      	bne.n	800d426 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <xQueueGenericCreateStatic+0x52>
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d001      	beq.n	800d436 <xQueueGenericCreateStatic+0x56>
 800d432:	2301      	movs	r3, #1
 800d434:	e000      	b.n	800d438 <xQueueGenericCreateStatic+0x58>
 800d436:	2300      	movs	r3, #0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10a      	bne.n	800d452 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d440:	f383 8811 	msr	BASEPRI, r3
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	623b      	str	r3, [r7, #32]
}
 800d44e:	bf00      	nop
 800d450:	e7fe      	b.n	800d450 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d102      	bne.n	800d45e <xQueueGenericCreateStatic+0x7e>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <xQueueGenericCreateStatic+0x82>
 800d45e:	2301      	movs	r3, #1
 800d460:	e000      	b.n	800d464 <xQueueGenericCreateStatic+0x84>
 800d462:	2300      	movs	r3, #0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	61fb      	str	r3, [r7, #28]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d47e:	2348      	movs	r3, #72	; 0x48
 800d480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b48      	cmp	r3, #72	; 0x48
 800d486:	d00a      	beq.n	800d49e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	61bb      	str	r3, [r7, #24]
}
 800d49a:	bf00      	nop
 800d49c:	e7fe      	b.n	800d49c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00d      	beq.n	800d4c4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	68b9      	ldr	r1, [r7, #8]
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 f843 	bl	800d54a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3730      	adds	r7, #48	; 0x30
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b08a      	sub	sp, #40	; 0x28
 800d4d2:	af02      	add	r7, sp, #8
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10a      	bne.n	800d4f8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	613b      	str	r3, [r7, #16]
}
 800d4f4:	bf00      	nop
 800d4f6:	e7fe      	b.n	800d4f6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d102      	bne.n	800d504 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	61fb      	str	r3, [r7, #28]
 800d502:	e004      	b.n	800d50e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	fb02 f303 	mul.w	r3, r2, r3
 800d50c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	3348      	adds	r3, #72	; 0x48
 800d512:	4618      	mov	r0, r3
 800d514:	f002 fc70 	bl	800fdf8 <pvPortMalloc>
 800d518:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00f      	beq.n	800d540 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	3348      	adds	r3, #72	; 0x48
 800d524:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d52e:	79fa      	ldrb	r2, [r7, #7]
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	9300      	str	r3, [sp, #0]
 800d534:	4613      	mov	r3, r2
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	68b9      	ldr	r1, [r7, #8]
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f000 f805 	bl	800d54a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d540:	69bb      	ldr	r3, [r7, #24]
	}
 800d542:	4618      	mov	r0, r3
 800d544:	3720      	adds	r7, #32
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	60f8      	str	r0, [r7, #12]
 800d552:	60b9      	str	r1, [r7, #8]
 800d554:	607a      	str	r2, [r7, #4]
 800d556:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d103      	bne.n	800d566 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	69ba      	ldr	r2, [r7, #24]
 800d562:	601a      	str	r2, [r3, #0]
 800d564:	e002      	b.n	800d56c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d578:	2101      	movs	r1, #1
 800d57a:	69b8      	ldr	r0, [r7, #24]
 800d57c:	f7ff fec8 	bl	800d310 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d580:	bf00      	nop
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00e      	beq.n	800d5b4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f838 	bl	800d624 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	6939      	ldr	r1, [r7, #16]
 800d5d4:	6978      	ldr	r0, [r7, #20]
 800d5d6:	f7ff ff7a 	bl	800d4ce <xQueueGenericCreate>
 800d5da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff ffd3 	bl	800d588 <prvInitialiseMutex>

		return pxNewQueue;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
	}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	6039      	str	r1, [r7, #0]
 800d5f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	617b      	str	r3, [r7, #20]
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2200      	movs	r2, #0
 800d608:	6939      	ldr	r1, [r7, #16]
 800d60a:	6978      	ldr	r0, [r7, #20]
 800d60c:	f7ff fee8 	bl	800d3e0 <xQueueGenericCreateStatic>
 800d610:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f7ff ffb8 	bl	800d588 <prvInitialiseMutex>

		return pxNewQueue;
 800d618:	68fb      	ldr	r3, [r7, #12]
	}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
	...

0800d624 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08e      	sub	sp, #56	; 0x38
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
 800d630:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d632:	2300      	movs	r3, #0
 800d634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10a      	bne.n	800d656 <xQueueGenericSend+0x32>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d652:	bf00      	nop
 800d654:	e7fe      	b.n	800d654 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d103      	bne.n	800d664 <xQueueGenericSend+0x40>
 800d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <xQueueGenericSend+0x44>
 800d664:	2301      	movs	r3, #1
 800d666:	e000      	b.n	800d66a <xQueueGenericSend+0x46>
 800d668:	2300      	movs	r3, #0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d10a      	bne.n	800d684 <xQueueGenericSend+0x60>
	__asm volatile
 800d66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d680:	bf00      	nop
 800d682:	e7fe      	b.n	800d682 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d103      	bne.n	800d692 <xQueueGenericSend+0x6e>
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d101      	bne.n	800d696 <xQueueGenericSend+0x72>
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <xQueueGenericSend+0x74>
 800d696:	2300      	movs	r3, #0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10a      	bne.n	800d6b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	623b      	str	r3, [r7, #32]
}
 800d6ae:	bf00      	nop
 800d6b0:	e7fe      	b.n	800d6b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6b2:	f001 fb85 	bl	800edc0 <xTaskGetSchedulerState>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d102      	bne.n	800d6c2 <xQueueGenericSend+0x9e>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <xQueueGenericSend+0xa2>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <xQueueGenericSend+0xa4>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	61fb      	str	r3, [r7, #28]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6e2:	f002 fa67 	bl	800fbb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d302      	bcc.n	800d6f8 <xQueueGenericSend+0xd4>
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d129      	bne.n	800d74c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	68b9      	ldr	r1, [r7, #8]
 800d6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6fe:	f000 fb2b 	bl	800dd58 <prvCopyDataToQueue>
 800d702:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d010      	beq.n	800d72e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70e:	3324      	adds	r3, #36	; 0x24
 800d710:	4618      	mov	r0, r3
 800d712:	f001 f98f 	bl	800ea34 <xTaskRemoveFromEventList>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d013      	beq.n	800d744 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d71c:	4b3f      	ldr	r3, [pc, #252]	; (800d81c <xQueueGenericSend+0x1f8>)
 800d71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	e00a      	b.n	800d744 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d730:	2b00      	cmp	r3, #0
 800d732:	d007      	beq.n	800d744 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d734:	4b39      	ldr	r3, [pc, #228]	; (800d81c <xQueueGenericSend+0x1f8>)
 800d736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73a:	601a      	str	r2, [r3, #0]
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d744:	f002 fa66 	bl	800fc14 <vPortExitCritical>
				return pdPASS;
 800d748:	2301      	movs	r3, #1
 800d74a:	e063      	b.n	800d814 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d103      	bne.n	800d75a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d752:	f002 fa5f 	bl	800fc14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d756:	2300      	movs	r3, #0
 800d758:	e05c      	b.n	800d814 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d106      	bne.n	800d76e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d760:	f107 0314 	add.w	r3, r7, #20
 800d764:	4618      	mov	r0, r3
 800d766:	f001 f9c7 	bl	800eaf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d76a:	2301      	movs	r3, #1
 800d76c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d76e:	f002 fa51 	bl	800fc14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d772:	f000 ff23 	bl	800e5bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d776:	f002 fa1d 	bl	800fbb4 <vPortEnterCritical>
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d780:	b25b      	sxtb	r3, r3
 800d782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d786:	d103      	bne.n	800d790 <xQueueGenericSend+0x16c>
 800d788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d796:	b25b      	sxtb	r3, r3
 800d798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79c:	d103      	bne.n	800d7a6 <xQueueGenericSend+0x182>
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7a6:	f002 fa35 	bl	800fc14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7aa:	1d3a      	adds	r2, r7, #4
 800d7ac:	f107 0314 	add.w	r3, r7, #20
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f001 f9b6 	bl	800eb24 <xTaskCheckForTimeOut>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d124      	bne.n	800d808 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7c0:	f000 fbc2 	bl	800df48 <prvIsQueueFull>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d018      	beq.n	800d7fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7cc:	3310      	adds	r3, #16
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f001 f8de 	bl	800e994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7da:	f000 fb4d 	bl	800de78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7de:	f000 fefb 	bl	800e5d8 <xTaskResumeAll>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f47f af7c 	bne.w	800d6e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d7ea:	4b0c      	ldr	r3, [pc, #48]	; (800d81c <xQueueGenericSend+0x1f8>)
 800d7ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f0:	601a      	str	r2, [r3, #0]
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	e772      	b.n	800d6e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d7fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7fe:	f000 fb3b 	bl	800de78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d802:	f000 fee9 	bl	800e5d8 <xTaskResumeAll>
 800d806:	e76c      	b.n	800d6e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d80a:	f000 fb35 	bl	800de78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d80e:	f000 fee3 	bl	800e5d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d812:	2300      	movs	r3, #0
		}
	}
}
 800d814:	4618      	mov	r0, r3
 800d816:	3738      	adds	r7, #56	; 0x38
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	e000ed04 	.word	0xe000ed04

0800d820 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b08e      	sub	sp, #56	; 0x38
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
 800d82c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10a      	bne.n	800d84e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83c:	f383 8811 	msr	BASEPRI, r3
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d84a:	bf00      	nop
 800d84c:	e7fe      	b.n	800d84c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d103      	bne.n	800d85c <xQueueGenericSendFromISR+0x3c>
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d101      	bne.n	800d860 <xQueueGenericSendFromISR+0x40>
 800d85c:	2301      	movs	r3, #1
 800d85e:	e000      	b.n	800d862 <xQueueGenericSendFromISR+0x42>
 800d860:	2300      	movs	r3, #0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	623b      	str	r3, [r7, #32]
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d103      	bne.n	800d88a <xQueueGenericSendFromISR+0x6a>
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d886:	2b01      	cmp	r3, #1
 800d888:	d101      	bne.n	800d88e <xQueueGenericSendFromISR+0x6e>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <xQueueGenericSendFromISR+0x70>
 800d88e:	2300      	movs	r3, #0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10a      	bne.n	800d8aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	61fb      	str	r3, [r7, #28]
}
 800d8a6:	bf00      	nop
 800d8a8:	e7fe      	b.n	800d8a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8aa:	f002 fa65 	bl	800fd78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d8ae:	f3ef 8211 	mrs	r2, BASEPRI
 800d8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	61ba      	str	r2, [r7, #24]
 800d8c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d8c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d302      	bcc.n	800d8dc <xQueueGenericSendFromISR+0xbc>
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d12c      	bne.n	800d936 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8ec:	f000 fa34 	bl	800dd58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f8:	d112      	bne.n	800d920 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d016      	beq.n	800d930 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d904:	3324      	adds	r3, #36	; 0x24
 800d906:	4618      	mov	r0, r3
 800d908:	f001 f894 	bl	800ea34 <xTaskRemoveFromEventList>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00e      	beq.n	800d930 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00b      	beq.n	800d930 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	e007      	b.n	800d930 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d924:	3301      	adds	r3, #1
 800d926:	b2db      	uxtb	r3, r3
 800d928:	b25a      	sxtb	r2, r3
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d930:	2301      	movs	r3, #1
 800d932:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d934:	e001      	b.n	800d93a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d936:	2300      	movs	r3, #0
 800d938:	637b      	str	r3, [r7, #52]	; 0x34
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d944:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3738      	adds	r7, #56	; 0x38
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b08c      	sub	sp, #48	; 0x30
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d95c:	2300      	movs	r3, #0
 800d95e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10a      	bne.n	800d980 <xQueueReceive+0x30>
	__asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	623b      	str	r3, [r7, #32]
}
 800d97c:	bf00      	nop
 800d97e:	e7fe      	b.n	800d97e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d103      	bne.n	800d98e <xQueueReceive+0x3e>
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <xQueueReceive+0x42>
 800d98e:	2301      	movs	r3, #1
 800d990:	e000      	b.n	800d994 <xQueueReceive+0x44>
 800d992:	2300      	movs	r3, #0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <xQueueReceive+0x5e>
	__asm volatile
 800d998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	61fb      	str	r3, [r7, #28]
}
 800d9aa:	bf00      	nop
 800d9ac:	e7fe      	b.n	800d9ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9ae:	f001 fa07 	bl	800edc0 <xTaskGetSchedulerState>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <xQueueReceive+0x6e>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <xQueueReceive+0x72>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e000      	b.n	800d9c4 <xQueueReceive+0x74>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <xQueueReceive+0x8e>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	61bb      	str	r3, [r7, #24]
}
 800d9da:	bf00      	nop
 800d9dc:	e7fe      	b.n	800d9dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9de:	f002 f8e9 	bl	800fbb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d01f      	beq.n	800da2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9ee:	68b9      	ldr	r1, [r7, #8]
 800d9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f2:	f000 fa1b 	bl	800de2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	1e5a      	subs	r2, r3, #1
 800d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00f      	beq.n	800da26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	3310      	adds	r3, #16
 800da0a:	4618      	mov	r0, r3
 800da0c:	f001 f812 	bl	800ea34 <xTaskRemoveFromEventList>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d007      	beq.n	800da26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da16:	4b3d      	ldr	r3, [pc, #244]	; (800db0c <xQueueReceive+0x1bc>)
 800da18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da26:	f002 f8f5 	bl	800fc14 <vPortExitCritical>
				return pdPASS;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e069      	b.n	800db02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d103      	bne.n	800da3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da34:	f002 f8ee 	bl	800fc14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da38:	2300      	movs	r3, #0
 800da3a:	e062      	b.n	800db02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da42:	f107 0310 	add.w	r3, r7, #16
 800da46:	4618      	mov	r0, r3
 800da48:	f001 f856 	bl	800eaf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da50:	f002 f8e0 	bl	800fc14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da54:	f000 fdb2 	bl	800e5bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da58:	f002 f8ac 	bl	800fbb4 <vPortEnterCritical>
 800da5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da62:	b25b      	sxtb	r3, r3
 800da64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da68:	d103      	bne.n	800da72 <xQueueReceive+0x122>
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da78:	b25b      	sxtb	r3, r3
 800da7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7e:	d103      	bne.n	800da88 <xQueueReceive+0x138>
 800da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da88:	f002 f8c4 	bl	800fc14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da8c:	1d3a      	adds	r2, r7, #4
 800da8e:	f107 0310 	add.w	r3, r7, #16
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f001 f845 	bl	800eb24 <xTaskCheckForTimeOut>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d123      	bne.n	800dae8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa2:	f000 fa3b 	bl	800df1c <prvIsQueueEmpty>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d017      	beq.n	800dadc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800daac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daae:	3324      	adds	r3, #36	; 0x24
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	4611      	mov	r1, r2
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 ff6d 	bl	800e994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800daba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dabc:	f000 f9dc 	bl	800de78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dac0:	f000 fd8a 	bl	800e5d8 <xTaskResumeAll>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d189      	bne.n	800d9de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800daca:	4b10      	ldr	r3, [pc, #64]	; (800db0c <xQueueReceive+0x1bc>)
 800dacc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	e780      	b.n	800d9de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dade:	f000 f9cb 	bl	800de78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dae2:	f000 fd79 	bl	800e5d8 <xTaskResumeAll>
 800dae6:	e77a      	b.n	800d9de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daea:	f000 f9c5 	bl	800de78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daee:	f000 fd73 	bl	800e5d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daf4:	f000 fa12 	bl	800df1c <prvIsQueueEmpty>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f43f af6f 	beq.w	800d9de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800db02:	4618      	mov	r0, r3
 800db04:	3730      	adds	r7, #48	; 0x30
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	e000ed04 	.word	0xe000ed04

0800db10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b08e      	sub	sp, #56	; 0x38
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800db1a:	2300      	movs	r3, #0
 800db1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800db22:	2300      	movs	r3, #0
 800db24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	623b      	str	r3, [r7, #32]
}
 800db3e:	bf00      	nop
 800db40:	e7fe      	b.n	800db40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00a      	beq.n	800db60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800db4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	61fb      	str	r3, [r7, #28]
}
 800db5c:	bf00      	nop
 800db5e:	e7fe      	b.n	800db5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db60:	f001 f92e 	bl	800edc0 <xTaskGetSchedulerState>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d102      	bne.n	800db70 <xQueueSemaphoreTake+0x60>
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d101      	bne.n	800db74 <xQueueSemaphoreTake+0x64>
 800db70:	2301      	movs	r3, #1
 800db72:	e000      	b.n	800db76 <xQueueSemaphoreTake+0x66>
 800db74:	2300      	movs	r3, #0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10a      	bne.n	800db90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	61bb      	str	r3, [r7, #24]
}
 800db8c:	bf00      	nop
 800db8e:	e7fe      	b.n	800db8e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800db90:	f002 f810 	bl	800fbb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d024      	beq.n	800dbea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba2:	1e5a      	subs	r2, r3, #1
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d104      	bne.n	800dbba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800dbb0:	f001 fad0 	bl	800f154 <pvTaskIncrementMutexHeldCount>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00f      	beq.n	800dbe2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc4:	3310      	adds	r3, #16
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 ff34 	bl	800ea34 <xTaskRemoveFromEventList>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d007      	beq.n	800dbe2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbd2:	4b54      	ldr	r3, [pc, #336]	; (800dd24 <xQueueSemaphoreTake+0x214>)
 800dbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dbe2:	f002 f817 	bl	800fc14 <vPortExitCritical>
				return pdPASS;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e097      	b.n	800dd1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d111      	bne.n	800dc14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00a      	beq.n	800dc0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	617b      	str	r3, [r7, #20]
}
 800dc08:	bf00      	nop
 800dc0a:	e7fe      	b.n	800dc0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dc0c:	f002 f802 	bl	800fc14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc10:	2300      	movs	r3, #0
 800dc12:	e082      	b.n	800dd1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d106      	bne.n	800dc28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc1a:	f107 030c 	add.w	r3, r7, #12
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 ff6a 	bl	800eaf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc24:	2301      	movs	r3, #1
 800dc26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc28:	f001 fff4 	bl	800fc14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc2c:	f000 fcc6 	bl	800e5bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc30:	f001 ffc0 	bl	800fbb4 <vPortEnterCritical>
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc3a:	b25b      	sxtb	r3, r3
 800dc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc40:	d103      	bne.n	800dc4a <xQueueSemaphoreTake+0x13a>
 800dc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc50:	b25b      	sxtb	r3, r3
 800dc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc56:	d103      	bne.n	800dc60 <xQueueSemaphoreTake+0x150>
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc60:	f001 ffd8 	bl	800fc14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc64:	463a      	mov	r2, r7
 800dc66:	f107 030c 	add.w	r3, r7, #12
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f000 ff59 	bl	800eb24 <xTaskCheckForTimeOut>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d132      	bne.n	800dcde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc7a:	f000 f94f 	bl	800df1c <prvIsQueueEmpty>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d026      	beq.n	800dcd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d109      	bne.n	800dca0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800dc8c:	f001 ff92 	bl	800fbb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 f8b1 	bl	800edfc <xTaskPriorityInherit>
 800dc9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dc9c:	f001 ffba 	bl	800fc14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	3324      	adds	r3, #36	; 0x24
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	4611      	mov	r1, r2
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 fe73 	bl	800e994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcb0:	f000 f8e2 	bl	800de78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcb4:	f000 fc90 	bl	800e5d8 <xTaskResumeAll>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f47f af68 	bne.w	800db90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dcc0:	4b18      	ldr	r3, [pc, #96]	; (800dd24 <xQueueSemaphoreTake+0x214>)
 800dcc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc6:	601a      	str	r2, [r3, #0]
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	e75e      	b.n	800db90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dcd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcd4:	f000 f8d0 	bl	800de78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcd8:	f000 fc7e 	bl	800e5d8 <xTaskResumeAll>
 800dcdc:	e758      	b.n	800db90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dcde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dce0:	f000 f8ca 	bl	800de78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dce4:	f000 fc78 	bl	800e5d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcea:	f000 f917 	bl	800df1c <prvIsQueueEmpty>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f43f af4d 	beq.w	800db90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00d      	beq.n	800dd18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dcfc:	f001 ff5a 	bl	800fbb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dd00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd02:	f000 f811 	bl	800dd28 <prvGetDisinheritPriorityAfterTimeout>
 800dd06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f001 f980 	bl	800f014 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dd14:	f001 ff7e 	bl	800fc14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3738      	adds	r7, #56	; 0x38
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	e000ed04 	.word	0xe000ed04

0800dd28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d006      	beq.n	800dd46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f1c3 0307 	rsb	r3, r3, #7
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	e001      	b.n	800dd4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dd46:	2300      	movs	r3, #0
 800dd48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
	}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd64:	2300      	movs	r3, #0
 800dd66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10d      	bne.n	800dd92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d14d      	bne.n	800de1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f001 f8c0 	bl	800ef08 <xTaskPriorityDisinherit>
 800dd88:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	605a      	str	r2, [r3, #4]
 800dd90:	e043      	b.n	800de1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d119      	bne.n	800ddcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6898      	ldr	r0, [r3, #8]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda0:	461a      	mov	r2, r3
 800dda2:	68b9      	ldr	r1, [r7, #8]
 800dda4:	f002 fc14 	bl	80105d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	689a      	ldr	r2, [r3, #8]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb0:	441a      	add	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d32b      	bcc.n	800de1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	609a      	str	r2, [r3, #8]
 800ddca:	e026      	b.n	800de1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	68d8      	ldr	r0, [r3, #12]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	68b9      	ldr	r1, [r7, #8]
 800ddd8:	f002 fbfa 	bl	80105d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	68da      	ldr	r2, [r3, #12]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde4:	425b      	negs	r3, r3
 800dde6:	441a      	add	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	68da      	ldr	r2, [r3, #12]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d207      	bcs.n	800de08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de00:	425b      	negs	r3, r3
 800de02:	441a      	add	r2, r3
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d105      	bne.n	800de1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	3b01      	subs	r3, #1
 800de18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	1c5a      	adds	r2, r3, #1
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de22:	697b      	ldr	r3, [r7, #20]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d018      	beq.n	800de70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	68da      	ldr	r2, [r3, #12]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de46:	441a      	add	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	68da      	ldr	r2, [r3, #12]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	429a      	cmp	r2, r3
 800de56:	d303      	bcc.n	800de60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	68d9      	ldr	r1, [r3, #12]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de68:	461a      	mov	r2, r3
 800de6a:	6838      	ldr	r0, [r7, #0]
 800de6c:	f002 fbb0 	bl	80105d0 <memcpy>
	}
}
 800de70:	bf00      	nop
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de80:	f001 fe98 	bl	800fbb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de8c:	e011      	b.n	800deb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de92:	2b00      	cmp	r3, #0
 800de94:	d012      	beq.n	800debc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	3324      	adds	r3, #36	; 0x24
 800de9a:	4618      	mov	r0, r3
 800de9c:	f000 fdca 	bl	800ea34 <xTaskRemoveFromEventList>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dea6:	f000 fe9f 	bl	800ebe8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	3b01      	subs	r3, #1
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	dce9      	bgt.n	800de8e <prvUnlockQueue+0x16>
 800deba:	e000      	b.n	800debe <prvUnlockQueue+0x46>
					break;
 800debc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	22ff      	movs	r2, #255	; 0xff
 800dec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dec6:	f001 fea5 	bl	800fc14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800deca:	f001 fe73 	bl	800fbb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ded4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ded6:	e011      	b.n	800defc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d012      	beq.n	800df06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	3310      	adds	r3, #16
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 fda5 	bl	800ea34 <xTaskRemoveFromEventList>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800def0:	f000 fe7a 	bl	800ebe8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	3b01      	subs	r3, #1
 800def8:	b2db      	uxtb	r3, r3
 800defa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800defc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df00:	2b00      	cmp	r3, #0
 800df02:	dce9      	bgt.n	800ded8 <prvUnlockQueue+0x60>
 800df04:	e000      	b.n	800df08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	22ff      	movs	r2, #255	; 0xff
 800df0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df10:	f001 fe80 	bl	800fc14 <vPortExitCritical>
}
 800df14:	bf00      	nop
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df24:	f001 fe46 	bl	800fbb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d102      	bne.n	800df36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df30:	2301      	movs	r3, #1
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	e001      	b.n	800df3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df36:	2300      	movs	r3, #0
 800df38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df3a:	f001 fe6b 	bl	800fc14 <vPortExitCritical>

	return xReturn;
 800df3e:	68fb      	ldr	r3, [r7, #12]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df50:	f001 fe30 	bl	800fbb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d102      	bne.n	800df66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df60:	2301      	movs	r3, #1
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	e001      	b.n	800df6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df66:	2300      	movs	r3, #0
 800df68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df6a:	f001 fe53 	bl	800fc14 <vPortExitCritical>

	return xReturn;
 800df6e:	68fb      	ldr	r3, [r7, #12]
}
 800df70:	4618      	mov	r0, r3
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df82:	2300      	movs	r3, #0
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	e014      	b.n	800dfb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df88:	4a0f      	ldr	r2, [pc, #60]	; (800dfc8 <vQueueAddToRegistry+0x50>)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10b      	bne.n	800dfac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df94:	490c      	ldr	r1, [pc, #48]	; (800dfc8 <vQueueAddToRegistry+0x50>)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	683a      	ldr	r2, [r7, #0]
 800df9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df9e:	4a0a      	ldr	r2, [pc, #40]	; (800dfc8 <vQueueAddToRegistry+0x50>)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	00db      	lsls	r3, r3, #3
 800dfa4:	4413      	add	r3, r2
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfaa:	e006      	b.n	800dfba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b07      	cmp	r3, #7
 800dfb6:	d9e7      	bls.n	800df88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfb8:	bf00      	nop
 800dfba:	bf00      	nop
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	200029b8 	.word	0x200029b8

0800dfcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b086      	sub	sp, #24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dfdc:	f001 fdea 	bl	800fbb4 <vPortEnterCritical>
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfe6:	b25b      	sxtb	r3, r3
 800dfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfec:	d103      	bne.n	800dff6 <vQueueWaitForMessageRestricted+0x2a>
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dffc:	b25b      	sxtb	r3, r3
 800dffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e002:	d103      	bne.n	800e00c <vQueueWaitForMessageRestricted+0x40>
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e00c:	f001 fe02 	bl	800fc14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e014:	2b00      	cmp	r3, #0
 800e016:	d106      	bne.n	800e026 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	3324      	adds	r3, #36	; 0x24
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	68b9      	ldr	r1, [r7, #8]
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fcdb 	bl	800e9dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e026:	6978      	ldr	r0, [r7, #20]
 800e028:	f7ff ff26 	bl	800de78 <prvUnlockQueue>
	}
 800e02c:	bf00      	nop
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08e      	sub	sp, #56	; 0x38
 800e038:	af04      	add	r7, sp, #16
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
 800e040:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10a      	bne.n	800e05e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04c:	f383 8811 	msr	BASEPRI, r3
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	f3bf 8f4f 	dsb	sy
 800e058:	623b      	str	r3, [r7, #32]
}
 800e05a:	bf00      	nop
 800e05c:	e7fe      	b.n	800e05c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10a      	bne.n	800e07a <xTaskCreateStatic+0x46>
	__asm volatile
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	f383 8811 	msr	BASEPRI, r3
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f3bf 8f4f 	dsb	sy
 800e074:	61fb      	str	r3, [r7, #28]
}
 800e076:	bf00      	nop
 800e078:	e7fe      	b.n	800e078 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e07a:	23b0      	movs	r3, #176	; 0xb0
 800e07c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2bb0      	cmp	r3, #176	; 0xb0
 800e082:	d00a      	beq.n	800e09a <xTaskCreateStatic+0x66>
	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	61bb      	str	r3, [r7, #24]
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d01e      	beq.n	800e0de <xTaskCreateStatic+0xaa>
 800e0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d01b      	beq.n	800e0de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	9303      	str	r3, [sp, #12]
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	9302      	str	r3, [sp, #8]
 800e0c0:	f107 0314 	add.w	r3, r7, #20
 800e0c4:	9301      	str	r3, [sp, #4]
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	68b9      	ldr	r1, [r7, #8]
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f000 f851 	bl	800e178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0d8:	f000 f8e4 	bl	800e2a4 <prvAddNewTaskToReadyList>
 800e0dc:	e001      	b.n	800e0e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e0e2:	697b      	ldr	r3, [r7, #20]
	}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3728      	adds	r7, #40	; 0x28
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08c      	sub	sp, #48	; 0x30
 800e0f0:	af04      	add	r7, sp, #16
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	603b      	str	r3, [r7, #0]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0fc:	88fb      	ldrh	r3, [r7, #6]
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4618      	mov	r0, r3
 800e102:	f001 fe79 	bl	800fdf8 <pvPortMalloc>
 800e106:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00e      	beq.n	800e12c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e10e:	20b0      	movs	r0, #176	; 0xb0
 800e110:	f001 fe72 	bl	800fdf8 <pvPortMalloc>
 800e114:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	631a      	str	r2, [r3, #48]	; 0x30
 800e122:	e005      	b.n	800e130 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e124:	6978      	ldr	r0, [r7, #20]
 800e126:	f001 ff2b 	bl	800ff80 <vPortFree>
 800e12a:	e001      	b.n	800e130 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e12c:	2300      	movs	r3, #0
 800e12e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d017      	beq.n	800e166 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e13e:	88fa      	ldrh	r2, [r7, #6]
 800e140:	2300      	movs	r3, #0
 800e142:	9303      	str	r3, [sp, #12]
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	9302      	str	r3, [sp, #8]
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	68b9      	ldr	r1, [r7, #8]
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 f80f 	bl	800e178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e15a:	69f8      	ldr	r0, [r7, #28]
 800e15c:	f000 f8a2 	bl	800e2a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e160:	2301      	movs	r3, #1
 800e162:	61bb      	str	r3, [r7, #24]
 800e164:	e002      	b.n	800e16c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e166:	f04f 33ff 	mov.w	r3, #4294967295
 800e16a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e16c:	69bb      	ldr	r3, [r7, #24]
	}
 800e16e:	4618      	mov	r0, r3
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e190:	3b01      	subs	r3, #1
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4413      	add	r3, r2
 800e196:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	f023 0307 	bic.w	r3, r3, #7
 800e19e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	f003 0307 	and.w	r3, r3, #7
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00a      	beq.n	800e1c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	617b      	str	r3, [r7, #20]
}
 800e1bc:	bf00      	nop
 800e1be:	e7fe      	b.n	800e1be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	61fb      	str	r3, [r7, #28]
 800e1c4:	e012      	b.n	800e1ec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	7819      	ldrb	r1, [r3, #0]
 800e1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	3334      	adds	r3, #52	; 0x34
 800e1d6:	460a      	mov	r2, r1
 800e1d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	4413      	add	r3, r2
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d006      	beq.n	800e1f4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	61fb      	str	r3, [r7, #28]
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	2b1f      	cmp	r3, #31
 800e1f0:	d9e9      	bls.n	800e1c6 <prvInitialiseNewTask+0x4e>
 800e1f2:	e000      	b.n	800e1f6 <prvInitialiseNewTask+0x7e>
		{
			break;
 800e1f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	2b06      	cmp	r3, #6
 800e202:	d901      	bls.n	800e208 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e204:	2306      	movs	r3, #6
 800e206:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e20c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e212:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	2200      	movs	r2, #0
 800e218:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21c:	3304      	adds	r3, #4
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe ffe2 	bl	800d1e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	3318      	adds	r3, #24
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fe ffdd 	bl	800d1e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e232:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e236:	f1c3 0207 	rsb	r2, r3, #7
 800e23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e242:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	2200      	movs	r2, #0
 800e248:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	2200      	movs	r2, #0
 800e250:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e256:	335c      	adds	r3, #92	; 0x5c
 800e258:	224c      	movs	r2, #76	; 0x4c
 800e25a:	2100      	movs	r1, #0
 800e25c:	4618      	mov	r0, r3
 800e25e:	f002 f92d 	bl	80104bc <memset>
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	4a0c      	ldr	r2, [pc, #48]	; (800e298 <prvInitialiseNewTask+0x120>)
 800e266:	661a      	str	r2, [r3, #96]	; 0x60
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	4a0c      	ldr	r2, [pc, #48]	; (800e29c <prvInitialiseNewTask+0x124>)
 800e26c:	665a      	str	r2, [r3, #100]	; 0x64
 800e26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e270:	4a0b      	ldr	r2, [pc, #44]	; (800e2a0 <prvInitialiseNewTask+0x128>)
 800e272:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e274:	683a      	ldr	r2, [r7, #0]
 800e276:	68f9      	ldr	r1, [r7, #12]
 800e278:	69b8      	ldr	r0, [r7, #24]
 800e27a:	f001 fb6d 	bl	800f958 <pxPortInitialiseStack>
 800e27e:	4602      	mov	r2, r0
 800e280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e282:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e28e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e290:	bf00      	nop
 800e292:	3720      	adds	r7, #32
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20003040 	.word	0x20003040
 800e29c:	200030a8 	.word	0x200030a8
 800e2a0:	20003110 	.word	0x20003110

0800e2a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2ac:	f001 fc82 	bl	800fbb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2b0:	4b2a      	ldr	r3, [pc, #168]	; (800e35c <prvAddNewTaskToReadyList+0xb8>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	4a29      	ldr	r2, [pc, #164]	; (800e35c <prvAddNewTaskToReadyList+0xb8>)
 800e2b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2ba:	4b29      	ldr	r3, [pc, #164]	; (800e360 <prvAddNewTaskToReadyList+0xbc>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d109      	bne.n	800e2d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2c2:	4a27      	ldr	r2, [pc, #156]	; (800e360 <prvAddNewTaskToReadyList+0xbc>)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2c8:	4b24      	ldr	r3, [pc, #144]	; (800e35c <prvAddNewTaskToReadyList+0xb8>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d110      	bne.n	800e2f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2d0:	f000 fcae 	bl	800ec30 <prvInitialiseTaskLists>
 800e2d4:	e00d      	b.n	800e2f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2d6:	4b23      	ldr	r3, [pc, #140]	; (800e364 <prvAddNewTaskToReadyList+0xc0>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d109      	bne.n	800e2f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2de:	4b20      	ldr	r3, [pc, #128]	; (800e360 <prvAddNewTaskToReadyList+0xbc>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d802      	bhi.n	800e2f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e2ec:	4a1c      	ldr	r2, [pc, #112]	; (800e360 <prvAddNewTaskToReadyList+0xbc>)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e2f2:	4b1d      	ldr	r3, [pc, #116]	; (800e368 <prvAddNewTaskToReadyList+0xc4>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	4a1b      	ldr	r2, [pc, #108]	; (800e368 <prvAddNewTaskToReadyList+0xc4>)
 800e2fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e300:	2201      	movs	r2, #1
 800e302:	409a      	lsls	r2, r3
 800e304:	4b19      	ldr	r3, [pc, #100]	; (800e36c <prvAddNewTaskToReadyList+0xc8>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4313      	orrs	r3, r2
 800e30a:	4a18      	ldr	r2, [pc, #96]	; (800e36c <prvAddNewTaskToReadyList+0xc8>)
 800e30c:	6013      	str	r3, [r2, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e312:	4613      	mov	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	4a15      	ldr	r2, [pc, #84]	; (800e370 <prvAddNewTaskToReadyList+0xcc>)
 800e31c:	441a      	add	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	3304      	adds	r3, #4
 800e322:	4619      	mov	r1, r3
 800e324:	4610      	mov	r0, r2
 800e326:	f7fe ff6c 	bl	800d202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e32a:	f001 fc73 	bl	800fc14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e32e:	4b0d      	ldr	r3, [pc, #52]	; (800e364 <prvAddNewTaskToReadyList+0xc0>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00e      	beq.n	800e354 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e336:	4b0a      	ldr	r3, [pc, #40]	; (800e360 <prvAddNewTaskToReadyList+0xbc>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e340:	429a      	cmp	r2, r3
 800e342:	d207      	bcs.n	800e354 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e344:	4b0b      	ldr	r3, [pc, #44]	; (800e374 <prvAddNewTaskToReadyList+0xd0>)
 800e346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e354:	bf00      	nop
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20002af8 	.word	0x20002af8
 800e360:	200029f8 	.word	0x200029f8
 800e364:	20002b04 	.word	0x20002b04
 800e368:	20002b14 	.word	0x20002b14
 800e36c:	20002b00 	.word	0x20002b00
 800e370:	200029fc 	.word	0x200029fc
 800e374:	e000ed04 	.word	0xe000ed04

0800e378 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08a      	sub	sp, #40	; 0x28
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e382:	2300      	movs	r3, #0
 800e384:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	617b      	str	r3, [r7, #20]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10a      	bne.n	800e3be <vTaskDelayUntil+0x46>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	613b      	str	r3, [r7, #16]
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e3be:	4b2a      	ldr	r3, [pc, #168]	; (800e468 <vTaskDelayUntil+0xf0>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00a      	beq.n	800e3dc <vTaskDelayUntil+0x64>
	__asm volatile
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	60fb      	str	r3, [r7, #12]
}
 800e3d8:	bf00      	nop
 800e3da:	e7fe      	b.n	800e3da <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e3dc:	f000 f8ee 	bl	800e5bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e3e0:	4b22      	ldr	r3, [pc, #136]	; (800e46c <vTaskDelayUntil+0xf4>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	683a      	ldr	r2, [r7, #0]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6a3a      	ldr	r2, [r7, #32]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d20b      	bcs.n	800e412 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	69fa      	ldr	r2, [r7, #28]
 800e400:	429a      	cmp	r2, r3
 800e402:	d211      	bcs.n	800e428 <vTaskDelayUntil+0xb0>
 800e404:	69fa      	ldr	r2, [r7, #28]
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d90d      	bls.n	800e428 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e40c:	2301      	movs	r3, #1
 800e40e:	627b      	str	r3, [r7, #36]	; 0x24
 800e410:	e00a      	b.n	800e428 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	69fa      	ldr	r2, [r7, #28]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d303      	bcc.n	800e424 <vTaskDelayUntil+0xac>
 800e41c:	69fa      	ldr	r2, [r7, #28]
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	429a      	cmp	r2, r3
 800e422:	d901      	bls.n	800e428 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e424:	2301      	movs	r3, #1
 800e426:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	69fa      	ldr	r2, [r7, #28]
 800e42c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e434:	69fa      	ldr	r2, [r7, #28]
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	2100      	movs	r1, #0
 800e43c:	4618      	mov	r0, r3
 800e43e:	f000 fe9d 	bl	800f17c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e442:	f000 f8c9 	bl	800e5d8 <xTaskResumeAll>
 800e446:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d107      	bne.n	800e45e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e44e:	4b08      	ldr	r3, [pc, #32]	; (800e470 <vTaskDelayUntil+0xf8>)
 800e450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e454:	601a      	str	r2, [r3, #0]
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e45e:	bf00      	nop
 800e460:	3728      	adds	r7, #40	; 0x28
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	20002b20 	.word	0x20002b20
 800e46c:	20002afc 	.word	0x20002afc
 800e470:	e000ed04 	.word	0xe000ed04

0800e474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d017      	beq.n	800e4b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e486:	4b13      	ldr	r3, [pc, #76]	; (800e4d4 <vTaskDelay+0x60>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00a      	beq.n	800e4a4 <vTaskDelay+0x30>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	60bb      	str	r3, [r7, #8]
}
 800e4a0:	bf00      	nop
 800e4a2:	e7fe      	b.n	800e4a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e4a4:	f000 f88a 	bl	800e5bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fe66 	bl	800f17c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4b0:	f000 f892 	bl	800e5d8 <xTaskResumeAll>
 800e4b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d107      	bne.n	800e4cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e4bc:	4b06      	ldr	r3, [pc, #24]	; (800e4d8 <vTaskDelay+0x64>)
 800e4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c2:	601a      	str	r2, [r3, #0]
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4cc:	bf00      	nop
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	20002b20 	.word	0x20002b20
 800e4d8:	e000ed04 	.word	0xe000ed04

0800e4dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08a      	sub	sp, #40	; 0x28
 800e4e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4ea:	463a      	mov	r2, r7
 800e4ec:	1d39      	adds	r1, r7, #4
 800e4ee:	f107 0308 	add.w	r3, r7, #8
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7f5 f8ba 	bl	800366c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	9202      	str	r2, [sp, #8]
 800e500:	9301      	str	r3, [sp, #4]
 800e502:	2300      	movs	r3, #0
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	2300      	movs	r3, #0
 800e508:	460a      	mov	r2, r1
 800e50a:	4924      	ldr	r1, [pc, #144]	; (800e59c <vTaskStartScheduler+0xc0>)
 800e50c:	4824      	ldr	r0, [pc, #144]	; (800e5a0 <vTaskStartScheduler+0xc4>)
 800e50e:	f7ff fd91 	bl	800e034 <xTaskCreateStatic>
 800e512:	4603      	mov	r3, r0
 800e514:	4a23      	ldr	r2, [pc, #140]	; (800e5a4 <vTaskStartScheduler+0xc8>)
 800e516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e518:	4b22      	ldr	r3, [pc, #136]	; (800e5a4 <vTaskStartScheduler+0xc8>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e520:	2301      	movs	r3, #1
 800e522:	617b      	str	r3, [r7, #20]
 800e524:	e001      	b.n	800e52a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e526:	2300      	movs	r3, #0
 800e528:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d102      	bne.n	800e536 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e530:	f000 fe8a 	bl	800f248 <xTimerCreateTimerTask>
 800e534:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d11b      	bne.n	800e574 <vTaskStartScheduler+0x98>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	613b      	str	r3, [r7, #16]
}
 800e54e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e550:	4b15      	ldr	r3, [pc, #84]	; (800e5a8 <vTaskStartScheduler+0xcc>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	335c      	adds	r3, #92	; 0x5c
 800e556:	4a15      	ldr	r2, [pc, #84]	; (800e5ac <vTaskStartScheduler+0xd0>)
 800e558:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e55a:	4b15      	ldr	r3, [pc, #84]	; (800e5b0 <vTaskStartScheduler+0xd4>)
 800e55c:	f04f 32ff 	mov.w	r2, #4294967295
 800e560:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e562:	4b14      	ldr	r3, [pc, #80]	; (800e5b4 <vTaskStartScheduler+0xd8>)
 800e564:	2201      	movs	r2, #1
 800e566:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e568:	4b13      	ldr	r3, [pc, #76]	; (800e5b8 <vTaskStartScheduler+0xdc>)
 800e56a:	2200      	movs	r2, #0
 800e56c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e56e:	f001 fa7f 	bl	800fa70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e572:	e00e      	b.n	800e592 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57a:	d10a      	bne.n	800e592 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	60fb      	str	r3, [r7, #12]
}
 800e58e:	bf00      	nop
 800e590:	e7fe      	b.n	800e590 <vTaskStartScheduler+0xb4>
}
 800e592:	bf00      	nop
 800e594:	3718      	adds	r7, #24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	08010c14 	.word	0x08010c14
 800e5a0:	0800ec01 	.word	0x0800ec01
 800e5a4:	20002b1c 	.word	0x20002b1c
 800e5a8:	200029f8 	.word	0x200029f8
 800e5ac:	2000010c 	.word	0x2000010c
 800e5b0:	20002b18 	.word	0x20002b18
 800e5b4:	20002b04 	.word	0x20002b04
 800e5b8:	20002afc 	.word	0x20002afc

0800e5bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e5bc:	b480      	push	{r7}
 800e5be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e5c0:	4b04      	ldr	r3, [pc, #16]	; (800e5d4 <vTaskSuspendAll+0x18>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	4a03      	ldr	r2, [pc, #12]	; (800e5d4 <vTaskSuspendAll+0x18>)
 800e5c8:	6013      	str	r3, [r2, #0]
}
 800e5ca:	bf00      	nop
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	20002b20 	.word	0x20002b20

0800e5d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5e6:	4b41      	ldr	r3, [pc, #260]	; (800e6ec <xTaskResumeAll+0x114>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10a      	bne.n	800e604 <xTaskResumeAll+0x2c>
	__asm volatile
 800e5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	603b      	str	r3, [r7, #0]
}
 800e600:	bf00      	nop
 800e602:	e7fe      	b.n	800e602 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e604:	f001 fad6 	bl	800fbb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e608:	4b38      	ldr	r3, [pc, #224]	; (800e6ec <xTaskResumeAll+0x114>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	4a37      	ldr	r2, [pc, #220]	; (800e6ec <xTaskResumeAll+0x114>)
 800e610:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e612:	4b36      	ldr	r3, [pc, #216]	; (800e6ec <xTaskResumeAll+0x114>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d161      	bne.n	800e6de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e61a:	4b35      	ldr	r3, [pc, #212]	; (800e6f0 <xTaskResumeAll+0x118>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d05d      	beq.n	800e6de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e622:	e02e      	b.n	800e682 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e624:	4b33      	ldr	r3, [pc, #204]	; (800e6f4 <xTaskResumeAll+0x11c>)
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	3318      	adds	r3, #24
 800e630:	4618      	mov	r0, r3
 800e632:	f7fe fe43 	bl	800d2bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3304      	adds	r3, #4
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fe fe3e 	bl	800d2bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e644:	2201      	movs	r2, #1
 800e646:	409a      	lsls	r2, r3
 800e648:	4b2b      	ldr	r3, [pc, #172]	; (800e6f8 <xTaskResumeAll+0x120>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	4a2a      	ldr	r2, [pc, #168]	; (800e6f8 <xTaskResumeAll+0x120>)
 800e650:	6013      	str	r3, [r2, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e656:	4613      	mov	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4a27      	ldr	r2, [pc, #156]	; (800e6fc <xTaskResumeAll+0x124>)
 800e660:	441a      	add	r2, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	3304      	adds	r3, #4
 800e666:	4619      	mov	r1, r3
 800e668:	4610      	mov	r0, r2
 800e66a:	f7fe fdca 	bl	800d202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e672:	4b23      	ldr	r3, [pc, #140]	; (800e700 <xTaskResumeAll+0x128>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e678:	429a      	cmp	r2, r3
 800e67a:	d302      	bcc.n	800e682 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e67c:	4b21      	ldr	r3, [pc, #132]	; (800e704 <xTaskResumeAll+0x12c>)
 800e67e:	2201      	movs	r2, #1
 800e680:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e682:	4b1c      	ldr	r3, [pc, #112]	; (800e6f4 <xTaskResumeAll+0x11c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d1cc      	bne.n	800e624 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e690:	f000 fb70 	bl	800ed74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e694:	4b1c      	ldr	r3, [pc, #112]	; (800e708 <xTaskResumeAll+0x130>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d010      	beq.n	800e6c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e6a0:	f000 f858 	bl	800e754 <xTaskIncrementTick>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e6aa:	4b16      	ldr	r3, [pc, #88]	; (800e704 <xTaskResumeAll+0x12c>)
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1f1      	bne.n	800e6a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e6bc:	4b12      	ldr	r3, [pc, #72]	; (800e708 <xTaskResumeAll+0x130>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e6c2:	4b10      	ldr	r3, [pc, #64]	; (800e704 <xTaskResumeAll+0x12c>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d009      	beq.n	800e6de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6ce:	4b0f      	ldr	r3, [pc, #60]	; (800e70c <xTaskResumeAll+0x134>)
 800e6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d4:	601a      	str	r2, [r3, #0]
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6de:	f001 fa99 	bl	800fc14 <vPortExitCritical>

	return xAlreadyYielded;
 800e6e2:	68bb      	ldr	r3, [r7, #8]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	20002b20 	.word	0x20002b20
 800e6f0:	20002af8 	.word	0x20002af8
 800e6f4:	20002ab8 	.word	0x20002ab8
 800e6f8:	20002b00 	.word	0x20002b00
 800e6fc:	200029fc 	.word	0x200029fc
 800e700:	200029f8 	.word	0x200029f8
 800e704:	20002b0c 	.word	0x20002b0c
 800e708:	20002b08 	.word	0x20002b08
 800e70c:	e000ed04 	.word	0xe000ed04

0800e710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e716:	4b05      	ldr	r3, [pc, #20]	; (800e72c <xTaskGetTickCount+0x1c>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e71c:	687b      	ldr	r3, [r7, #4]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	20002afc 	.word	0x20002afc

0800e730 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e736:	f001 fb1f 	bl	800fd78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e73a:	2300      	movs	r3, #0
 800e73c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e73e:	4b04      	ldr	r3, [pc, #16]	; (800e750 <xTaskGetTickCountFromISR+0x20>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e744:	683b      	ldr	r3, [r7, #0]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20002afc 	.word	0x20002afc

0800e754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e75a:	2300      	movs	r3, #0
 800e75c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e75e:	4b51      	ldr	r3, [pc, #324]	; (800e8a4 <xTaskIncrementTick+0x150>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f040 808d 	bne.w	800e882 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e768:	4b4f      	ldr	r3, [pc, #316]	; (800e8a8 <xTaskIncrementTick+0x154>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3301      	adds	r3, #1
 800e76e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e770:	4a4d      	ldr	r2, [pc, #308]	; (800e8a8 <xTaskIncrementTick+0x154>)
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d120      	bne.n	800e7be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e77c:	4b4b      	ldr	r3, [pc, #300]	; (800e8ac <xTaskIncrementTick+0x158>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00a      	beq.n	800e79c <xTaskIncrementTick+0x48>
	__asm volatile
 800e786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	603b      	str	r3, [r7, #0]
}
 800e798:	bf00      	nop
 800e79a:	e7fe      	b.n	800e79a <xTaskIncrementTick+0x46>
 800e79c:	4b43      	ldr	r3, [pc, #268]	; (800e8ac <xTaskIncrementTick+0x158>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	60fb      	str	r3, [r7, #12]
 800e7a2:	4b43      	ldr	r3, [pc, #268]	; (800e8b0 <xTaskIncrementTick+0x15c>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a41      	ldr	r2, [pc, #260]	; (800e8ac <xTaskIncrementTick+0x158>)
 800e7a8:	6013      	str	r3, [r2, #0]
 800e7aa:	4a41      	ldr	r2, [pc, #260]	; (800e8b0 <xTaskIncrementTick+0x15c>)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	4b40      	ldr	r3, [pc, #256]	; (800e8b4 <xTaskIncrementTick+0x160>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	4a3f      	ldr	r2, [pc, #252]	; (800e8b4 <xTaskIncrementTick+0x160>)
 800e7b8:	6013      	str	r3, [r2, #0]
 800e7ba:	f000 fadb 	bl	800ed74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e7be:	4b3e      	ldr	r3, [pc, #248]	; (800e8b8 <xTaskIncrementTick+0x164>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	693a      	ldr	r2, [r7, #16]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d34d      	bcc.n	800e864 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7c8:	4b38      	ldr	r3, [pc, #224]	; (800e8ac <xTaskIncrementTick+0x158>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <xTaskIncrementTick+0x82>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e000      	b.n	800e7d8 <xTaskIncrementTick+0x84>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d004      	beq.n	800e7e6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7dc:	4b36      	ldr	r3, [pc, #216]	; (800e8b8 <xTaskIncrementTick+0x164>)
 800e7de:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e2:	601a      	str	r2, [r3, #0]
					break;
 800e7e4:	e03e      	b.n	800e864 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e7e6:	4b31      	ldr	r3, [pc, #196]	; (800e8ac <xTaskIncrementTick+0x158>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7f6:	693a      	ldr	r2, [r7, #16]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d203      	bcs.n	800e806 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7fe:	4a2e      	ldr	r2, [pc, #184]	; (800e8b8 <xTaskIncrementTick+0x164>)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6013      	str	r3, [r2, #0]
						break;
 800e804:	e02e      	b.n	800e864 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	3304      	adds	r3, #4
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fe fd56 	bl	800d2bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	3318      	adds	r3, #24
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe fd4d 	bl	800d2bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e826:	2201      	movs	r2, #1
 800e828:	409a      	lsls	r2, r3
 800e82a:	4b24      	ldr	r3, [pc, #144]	; (800e8bc <xTaskIncrementTick+0x168>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4313      	orrs	r3, r2
 800e830:	4a22      	ldr	r2, [pc, #136]	; (800e8bc <xTaskIncrementTick+0x168>)
 800e832:	6013      	str	r3, [r2, #0]
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e838:	4613      	mov	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4413      	add	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4a1f      	ldr	r2, [pc, #124]	; (800e8c0 <xTaskIncrementTick+0x16c>)
 800e842:	441a      	add	r2, r3
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	3304      	adds	r3, #4
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f7fe fcd9 	bl	800d202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	4b1b      	ldr	r3, [pc, #108]	; (800e8c4 <xTaskIncrementTick+0x170>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d3b4      	bcc.n	800e7c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e85e:	2301      	movs	r3, #1
 800e860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e862:	e7b1      	b.n	800e7c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e864:	4b17      	ldr	r3, [pc, #92]	; (800e8c4 <xTaskIncrementTick+0x170>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86a:	4915      	ldr	r1, [pc, #84]	; (800e8c0 <xTaskIncrementTick+0x16c>)
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	440b      	add	r3, r1
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d907      	bls.n	800e88c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e87c:	2301      	movs	r3, #1
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	e004      	b.n	800e88c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e882:	4b11      	ldr	r3, [pc, #68]	; (800e8c8 <xTaskIncrementTick+0x174>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	3301      	adds	r3, #1
 800e888:	4a0f      	ldr	r2, [pc, #60]	; (800e8c8 <xTaskIncrementTick+0x174>)
 800e88a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e88c:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <xTaskIncrementTick+0x178>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d001      	beq.n	800e898 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e894:	2301      	movs	r3, #1
 800e896:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e898:	697b      	ldr	r3, [r7, #20]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20002b20 	.word	0x20002b20
 800e8a8:	20002afc 	.word	0x20002afc
 800e8ac:	20002ab0 	.word	0x20002ab0
 800e8b0:	20002ab4 	.word	0x20002ab4
 800e8b4:	20002b10 	.word	0x20002b10
 800e8b8:	20002b18 	.word	0x20002b18
 800e8bc:	20002b00 	.word	0x20002b00
 800e8c0:	200029fc 	.word	0x200029fc
 800e8c4:	200029f8 	.word	0x200029f8
 800e8c8:	20002b08 	.word	0x20002b08
 800e8cc:	20002b0c 	.word	0x20002b0c

0800e8d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b087      	sub	sp, #28
 800e8d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8d6:	4b29      	ldr	r3, [pc, #164]	; (800e97c <vTaskSwitchContext+0xac>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e8de:	4b28      	ldr	r3, [pc, #160]	; (800e980 <vTaskSwitchContext+0xb0>)
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e8e4:	e044      	b.n	800e970 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e8e6:	4b26      	ldr	r3, [pc, #152]	; (800e980 <vTaskSwitchContext+0xb0>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e8ec:	4b25      	ldr	r3, [pc, #148]	; (800e984 <vTaskSwitchContext+0xb4>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	fab3 f383 	clz	r3, r3
 800e8f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e8fa:	7afb      	ldrb	r3, [r7, #11]
 800e8fc:	f1c3 031f 	rsb	r3, r3, #31
 800e900:	617b      	str	r3, [r7, #20]
 800e902:	4921      	ldr	r1, [pc, #132]	; (800e988 <vTaskSwitchContext+0xb8>)
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	4613      	mov	r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4413      	add	r3, r2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	440b      	add	r3, r1
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10a      	bne.n	800e92c <vTaskSwitchContext+0x5c>
	__asm volatile
 800e916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91a:	f383 8811 	msr	BASEPRI, r3
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	f3bf 8f4f 	dsb	sy
 800e926:	607b      	str	r3, [r7, #4]
}
 800e928:	bf00      	nop
 800e92a:	e7fe      	b.n	800e92a <vTaskSwitchContext+0x5a>
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	4613      	mov	r3, r2
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4413      	add	r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4a14      	ldr	r2, [pc, #80]	; (800e988 <vTaskSwitchContext+0xb8>)
 800e938:	4413      	add	r3, r2
 800e93a:	613b      	str	r3, [r7, #16]
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	605a      	str	r2, [r3, #4]
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	685a      	ldr	r2, [r3, #4]
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	3308      	adds	r3, #8
 800e94e:	429a      	cmp	r2, r3
 800e950:	d104      	bne.n	800e95c <vTaskSwitchContext+0x8c>
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	605a      	str	r2, [r3, #4]
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	4a0a      	ldr	r2, [pc, #40]	; (800e98c <vTaskSwitchContext+0xbc>)
 800e964:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e966:	4b09      	ldr	r3, [pc, #36]	; (800e98c <vTaskSwitchContext+0xbc>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	335c      	adds	r3, #92	; 0x5c
 800e96c:	4a08      	ldr	r2, [pc, #32]	; (800e990 <vTaskSwitchContext+0xc0>)
 800e96e:	6013      	str	r3, [r2, #0]
}
 800e970:	bf00      	nop
 800e972:	371c      	adds	r7, #28
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	20002b20 	.word	0x20002b20
 800e980:	20002b0c 	.word	0x20002b0c
 800e984:	20002b00 	.word	0x20002b00
 800e988:	200029fc 	.word	0x200029fc
 800e98c:	200029f8 	.word	0x200029f8
 800e990:	2000010c 	.word	0x2000010c

0800e994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10a      	bne.n	800e9ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	60fb      	str	r3, [r7, #12]
}
 800e9b6:	bf00      	nop
 800e9b8:	e7fe      	b.n	800e9b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9ba:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <vTaskPlaceOnEventList+0x44>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	3318      	adds	r3, #24
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7fe fc41 	bl	800d24a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9c8:	2101      	movs	r1, #1
 800e9ca:	6838      	ldr	r0, [r7, #0]
 800e9cc:	f000 fbd6 	bl	800f17c <prvAddCurrentTaskToDelayedList>
}
 800e9d0:	bf00      	nop
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	200029f8 	.word	0x200029f8

0800e9dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10a      	bne.n	800ea04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	617b      	str	r3, [r7, #20]
}
 800ea00:	bf00      	nop
 800ea02:	e7fe      	b.n	800ea02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea04:	4b0a      	ldr	r3, [pc, #40]	; (800ea30 <vTaskPlaceOnEventListRestricted+0x54>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3318      	adds	r3, #24
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7fe fbf8 	bl	800d202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ea18:	f04f 33ff 	mov.w	r3, #4294967295
 800ea1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	68b8      	ldr	r0, [r7, #8]
 800ea22:	f000 fbab 	bl	800f17c <prvAddCurrentTaskToDelayedList>
	}
 800ea26:	bf00      	nop
 800ea28:	3718      	adds	r7, #24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	200029f8 	.word	0x200029f8

0800ea34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b086      	sub	sp, #24
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d10a      	bne.n	800ea60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ea4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4e:	f383 8811 	msr	BASEPRI, r3
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	f3bf 8f4f 	dsb	sy
 800ea5a:	60fb      	str	r3, [r7, #12]
}
 800ea5c:	bf00      	nop
 800ea5e:	e7fe      	b.n	800ea5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	3318      	adds	r3, #24
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe fc29 	bl	800d2bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea6a:	4b1d      	ldr	r3, [pc, #116]	; (800eae0 <xTaskRemoveFromEventList+0xac>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d11c      	bne.n	800eaac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	3304      	adds	r3, #4
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fe fc20 	bl	800d2bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea80:	2201      	movs	r2, #1
 800ea82:	409a      	lsls	r2, r3
 800ea84:	4b17      	ldr	r3, [pc, #92]	; (800eae4 <xTaskRemoveFromEventList+0xb0>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	4a16      	ldr	r2, [pc, #88]	; (800eae4 <xTaskRemoveFromEventList+0xb0>)
 800ea8c:	6013      	str	r3, [r2, #0]
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea92:	4613      	mov	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	4a13      	ldr	r2, [pc, #76]	; (800eae8 <xTaskRemoveFromEventList+0xb4>)
 800ea9c:	441a      	add	r2, r3
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	4610      	mov	r0, r2
 800eaa6:	f7fe fbac 	bl	800d202 <vListInsertEnd>
 800eaaa:	e005      	b.n	800eab8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	3318      	adds	r3, #24
 800eab0:	4619      	mov	r1, r3
 800eab2:	480e      	ldr	r0, [pc, #56]	; (800eaec <xTaskRemoveFromEventList+0xb8>)
 800eab4:	f7fe fba5 	bl	800d202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eabc:	4b0c      	ldr	r3, [pc, #48]	; (800eaf0 <xTaskRemoveFromEventList+0xbc>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d905      	bls.n	800ead2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eac6:	2301      	movs	r3, #1
 800eac8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eaca:	4b0a      	ldr	r3, [pc, #40]	; (800eaf4 <xTaskRemoveFromEventList+0xc0>)
 800eacc:	2201      	movs	r2, #1
 800eace:	601a      	str	r2, [r3, #0]
 800ead0:	e001      	b.n	800ead6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ead2:	2300      	movs	r3, #0
 800ead4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ead6:	697b      	ldr	r3, [r7, #20]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	20002b20 	.word	0x20002b20
 800eae4:	20002b00 	.word	0x20002b00
 800eae8:	200029fc 	.word	0x200029fc
 800eaec:	20002ab8 	.word	0x20002ab8
 800eaf0:	200029f8 	.word	0x200029f8
 800eaf4:	20002b0c 	.word	0x20002b0c

0800eaf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb00:	4b06      	ldr	r3, [pc, #24]	; (800eb1c <vTaskInternalSetTimeOutState+0x24>)
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb08:	4b05      	ldr	r3, [pc, #20]	; (800eb20 <vTaskInternalSetTimeOutState+0x28>)
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	605a      	str	r2, [r3, #4]
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr
 800eb1c:	20002b10 	.word	0x20002b10
 800eb20:	20002afc 	.word	0x20002afc

0800eb24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b088      	sub	sp, #32
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10a      	bne.n	800eb4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	613b      	str	r3, [r7, #16]
}
 800eb46:	bf00      	nop
 800eb48:	e7fe      	b.n	800eb48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10a      	bne.n	800eb66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	60fb      	str	r3, [r7, #12]
}
 800eb62:	bf00      	nop
 800eb64:	e7fe      	b.n	800eb64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eb66:	f001 f825 	bl	800fbb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb6a:	4b1d      	ldr	r3, [pc, #116]	; (800ebe0 <xTaskCheckForTimeOut+0xbc>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	69ba      	ldr	r2, [r7, #24]
 800eb76:	1ad3      	subs	r3, r2, r3
 800eb78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d102      	bne.n	800eb8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb84:	2300      	movs	r3, #0
 800eb86:	61fb      	str	r3, [r7, #28]
 800eb88:	e023      	b.n	800ebd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	4b15      	ldr	r3, [pc, #84]	; (800ebe4 <xTaskCheckForTimeOut+0xc0>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d007      	beq.n	800eba6 <xTaskCheckForTimeOut+0x82>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	69ba      	ldr	r2, [r7, #24]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d302      	bcc.n	800eba6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eba0:	2301      	movs	r3, #1
 800eba2:	61fb      	str	r3, [r7, #28]
 800eba4:	e015      	b.n	800ebd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	697a      	ldr	r2, [r7, #20]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d20b      	bcs.n	800ebc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	1ad2      	subs	r2, r2, r3
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7ff ff9b 	bl	800eaf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	61fb      	str	r3, [r7, #28]
 800ebc6:	e004      	b.n	800ebd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ebd2:	f001 f81f 	bl	800fc14 <vPortExitCritical>

	return xReturn;
 800ebd6:	69fb      	ldr	r3, [r7, #28]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3720      	adds	r7, #32
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	20002afc 	.word	0x20002afc
 800ebe4:	20002b10 	.word	0x20002b10

0800ebe8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebe8:	b480      	push	{r7}
 800ebea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebec:	4b03      	ldr	r3, [pc, #12]	; (800ebfc <vTaskMissedYield+0x14>)
 800ebee:	2201      	movs	r2, #1
 800ebf0:	601a      	str	r2, [r3, #0]
}
 800ebf2:	bf00      	nop
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	20002b0c 	.word	0x20002b0c

0800ec00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec08:	f000 f852 	bl	800ecb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec0c:	4b06      	ldr	r3, [pc, #24]	; (800ec28 <prvIdleTask+0x28>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d9f9      	bls.n	800ec08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ec14:	4b05      	ldr	r3, [pc, #20]	; (800ec2c <prvIdleTask+0x2c>)
 800ec16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ec24:	e7f0      	b.n	800ec08 <prvIdleTask+0x8>
 800ec26:	bf00      	nop
 800ec28:	200029fc 	.word	0x200029fc
 800ec2c:	e000ed04 	.word	0xe000ed04

0800ec30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec36:	2300      	movs	r3, #0
 800ec38:	607b      	str	r3, [r7, #4]
 800ec3a:	e00c      	b.n	800ec56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	4413      	add	r3, r2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4a12      	ldr	r2, [pc, #72]	; (800ec90 <prvInitialiseTaskLists+0x60>)
 800ec48:	4413      	add	r3, r2
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fe faac 	bl	800d1a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	3301      	adds	r3, #1
 800ec54:	607b      	str	r3, [r7, #4]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b06      	cmp	r3, #6
 800ec5a:	d9ef      	bls.n	800ec3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec5c:	480d      	ldr	r0, [pc, #52]	; (800ec94 <prvInitialiseTaskLists+0x64>)
 800ec5e:	f7fe faa3 	bl	800d1a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec62:	480d      	ldr	r0, [pc, #52]	; (800ec98 <prvInitialiseTaskLists+0x68>)
 800ec64:	f7fe faa0 	bl	800d1a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec68:	480c      	ldr	r0, [pc, #48]	; (800ec9c <prvInitialiseTaskLists+0x6c>)
 800ec6a:	f7fe fa9d 	bl	800d1a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec6e:	480c      	ldr	r0, [pc, #48]	; (800eca0 <prvInitialiseTaskLists+0x70>)
 800ec70:	f7fe fa9a 	bl	800d1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec74:	480b      	ldr	r0, [pc, #44]	; (800eca4 <prvInitialiseTaskLists+0x74>)
 800ec76:	f7fe fa97 	bl	800d1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec7a:	4b0b      	ldr	r3, [pc, #44]	; (800eca8 <prvInitialiseTaskLists+0x78>)
 800ec7c:	4a05      	ldr	r2, [pc, #20]	; (800ec94 <prvInitialiseTaskLists+0x64>)
 800ec7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec80:	4b0a      	ldr	r3, [pc, #40]	; (800ecac <prvInitialiseTaskLists+0x7c>)
 800ec82:	4a05      	ldr	r2, [pc, #20]	; (800ec98 <prvInitialiseTaskLists+0x68>)
 800ec84:	601a      	str	r2, [r3, #0]
}
 800ec86:	bf00      	nop
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	200029fc 	.word	0x200029fc
 800ec94:	20002a88 	.word	0x20002a88
 800ec98:	20002a9c 	.word	0x20002a9c
 800ec9c:	20002ab8 	.word	0x20002ab8
 800eca0:	20002acc 	.word	0x20002acc
 800eca4:	20002ae4 	.word	0x20002ae4
 800eca8:	20002ab0 	.word	0x20002ab0
 800ecac:	20002ab4 	.word	0x20002ab4

0800ecb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecb6:	e019      	b.n	800ecec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ecb8:	f000 ff7c 	bl	800fbb4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ecbc:	4b10      	ldr	r3, [pc, #64]	; (800ed00 <prvCheckTasksWaitingTermination+0x50>)
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fe faf7 	bl	800d2bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ecce:	4b0d      	ldr	r3, [pc, #52]	; (800ed04 <prvCheckTasksWaitingTermination+0x54>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	4a0b      	ldr	r2, [pc, #44]	; (800ed04 <prvCheckTasksWaitingTermination+0x54>)
 800ecd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecd8:	4b0b      	ldr	r3, [pc, #44]	; (800ed08 <prvCheckTasksWaitingTermination+0x58>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	4a0a      	ldr	r2, [pc, #40]	; (800ed08 <prvCheckTasksWaitingTermination+0x58>)
 800ece0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ece2:	f000 ff97 	bl	800fc14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 f810 	bl	800ed0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecec:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <prvCheckTasksWaitingTermination+0x58>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1e1      	bne.n	800ecb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	20002acc 	.word	0x20002acc
 800ed04:	20002af8 	.word	0x20002af8
 800ed08:	20002ae0 	.word	0x20002ae0

0800ed0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	335c      	adds	r3, #92	; 0x5c
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f001 fbd7 	bl	80104cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d108      	bne.n	800ed3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f001 f927 	bl	800ff80 <vPortFree>
				vPortFree( pxTCB );
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f001 f924 	bl	800ff80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed38:	e018      	b.n	800ed6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d103      	bne.n	800ed4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f001 f91b 	bl	800ff80 <vPortFree>
	}
 800ed4a:	e00f      	b.n	800ed6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d00a      	beq.n	800ed6c <prvDeleteTCB+0x60>
	__asm volatile
 800ed56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5a:	f383 8811 	msr	BASEPRI, r3
 800ed5e:	f3bf 8f6f 	isb	sy
 800ed62:	f3bf 8f4f 	dsb	sy
 800ed66:	60fb      	str	r3, [r7, #12]
}
 800ed68:	bf00      	nop
 800ed6a:	e7fe      	b.n	800ed6a <prvDeleteTCB+0x5e>
	}
 800ed6c:	bf00      	nop
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed7a:	4b0f      	ldr	r3, [pc, #60]	; (800edb8 <prvResetNextTaskUnblockTime+0x44>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <prvResetNextTaskUnblockTime+0x14>
 800ed84:	2301      	movs	r3, #1
 800ed86:	e000      	b.n	800ed8a <prvResetNextTaskUnblockTime+0x16>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d004      	beq.n	800ed98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed8e:	4b0b      	ldr	r3, [pc, #44]	; (800edbc <prvResetNextTaskUnblockTime+0x48>)
 800ed90:	f04f 32ff 	mov.w	r2, #4294967295
 800ed94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed96:	e008      	b.n	800edaa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ed98:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <prvResetNextTaskUnblockTime+0x44>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	4a05      	ldr	r2, [pc, #20]	; (800edbc <prvResetNextTaskUnblockTime+0x48>)
 800eda8:	6013      	str	r3, [r2, #0]
}
 800edaa:	bf00      	nop
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20002ab0 	.word	0x20002ab0
 800edbc:	20002b18 	.word	0x20002b18

0800edc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edc6:	4b0b      	ldr	r3, [pc, #44]	; (800edf4 <xTaskGetSchedulerState+0x34>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edce:	2301      	movs	r3, #1
 800edd0:	607b      	str	r3, [r7, #4]
 800edd2:	e008      	b.n	800ede6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edd4:	4b08      	ldr	r3, [pc, #32]	; (800edf8 <xTaskGetSchedulerState+0x38>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d102      	bne.n	800ede2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eddc:	2302      	movs	r3, #2
 800edde:	607b      	str	r3, [r7, #4]
 800ede0:	e001      	b.n	800ede6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ede2:	2300      	movs	r3, #0
 800ede4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ede6:	687b      	ldr	r3, [r7, #4]
	}
 800ede8:	4618      	mov	r0, r3
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr
 800edf4:	20002b04 	.word	0x20002b04
 800edf8:	20002b20 	.word	0x20002b20

0800edfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d06e      	beq.n	800eef0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee16:	4b39      	ldr	r3, [pc, #228]	; (800eefc <xTaskPriorityInherit+0x100>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d25e      	bcs.n	800eede <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	699b      	ldr	r3, [r3, #24]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	db06      	blt.n	800ee36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee28:	4b34      	ldr	r3, [pc, #208]	; (800eefc <xTaskPriorityInherit+0x100>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2e:	f1c3 0207 	rsb	r2, r3, #7
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	6959      	ldr	r1, [r3, #20]
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4a2e      	ldr	r2, [pc, #184]	; (800ef00 <xTaskPriorityInherit+0x104>)
 800ee48:	4413      	add	r3, r2
 800ee4a:	4299      	cmp	r1, r3
 800ee4c:	d101      	bne.n	800ee52 <xTaskPriorityInherit+0x56>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e000      	b.n	800ee54 <xTaskPriorityInherit+0x58>
 800ee52:	2300      	movs	r3, #0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d03a      	beq.n	800eece <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	3304      	adds	r3, #4
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fe fa2d 	bl	800d2bc <uxListRemove>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d115      	bne.n	800ee94 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee6c:	4924      	ldr	r1, [pc, #144]	; (800ef00 <xTaskPriorityInherit+0x104>)
 800ee6e:	4613      	mov	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	440b      	add	r3, r1
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d10a      	bne.n	800ee94 <xTaskPriorityInherit+0x98>
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee82:	2201      	movs	r2, #1
 800ee84:	fa02 f303 	lsl.w	r3, r2, r3
 800ee88:	43da      	mvns	r2, r3
 800ee8a:	4b1e      	ldr	r3, [pc, #120]	; (800ef04 <xTaskPriorityInherit+0x108>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4013      	ands	r3, r2
 800ee90:	4a1c      	ldr	r2, [pc, #112]	; (800ef04 <xTaskPriorityInherit+0x108>)
 800ee92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee94:	4b19      	ldr	r3, [pc, #100]	; (800eefc <xTaskPriorityInherit+0x100>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea2:	2201      	movs	r2, #1
 800eea4:	409a      	lsls	r2, r3
 800eea6:	4b17      	ldr	r3, [pc, #92]	; (800ef04 <xTaskPriorityInherit+0x108>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	4a15      	ldr	r2, [pc, #84]	; (800ef04 <xTaskPriorityInherit+0x108>)
 800eeae:	6013      	str	r3, [r2, #0]
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	4a10      	ldr	r2, [pc, #64]	; (800ef00 <xTaskPriorityInherit+0x104>)
 800eebe:	441a      	add	r2, r3
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	3304      	adds	r3, #4
 800eec4:	4619      	mov	r1, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	f7fe f99b 	bl	800d202 <vListInsertEnd>
 800eecc:	e004      	b.n	800eed8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eece:	4b0b      	ldr	r3, [pc, #44]	; (800eefc <xTaskPriorityInherit+0x100>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eed8:	2301      	movs	r3, #1
 800eeda:	60fb      	str	r3, [r7, #12]
 800eedc:	e008      	b.n	800eef0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eee2:	4b06      	ldr	r3, [pc, #24]	; (800eefc <xTaskPriorityInherit+0x100>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d201      	bcs.n	800eef0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eeec:	2301      	movs	r3, #1
 800eeee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eef0:	68fb      	ldr	r3, [r7, #12]
	}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	200029f8 	.word	0x200029f8
 800ef00:	200029fc 	.word	0x200029fc
 800ef04:	20002b00 	.word	0x20002b00

0800ef08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef14:	2300      	movs	r3, #0
 800ef16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d06e      	beq.n	800effc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef1e:	4b3a      	ldr	r3, [pc, #232]	; (800f008 <xTaskPriorityDisinherit+0x100>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	693a      	ldr	r2, [r7, #16]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d00a      	beq.n	800ef3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	60fb      	str	r3, [r7, #12]
}
 800ef3a:	bf00      	nop
 800ef3c:	e7fe      	b.n	800ef3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d10a      	bne.n	800ef5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ef46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4a:	f383 8811 	msr	BASEPRI, r3
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	60bb      	str	r3, [r7, #8]
}
 800ef58:	bf00      	nop
 800ef5a:	e7fe      	b.n	800ef5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef60:	1e5a      	subs	r2, r3, #1
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d044      	beq.n	800effc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d140      	bne.n	800effc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fe f99c 	bl	800d2bc <uxListRemove>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d115      	bne.n	800efb6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef8e:	491f      	ldr	r1, [pc, #124]	; (800f00c <xTaskPriorityDisinherit+0x104>)
 800ef90:	4613      	mov	r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	440b      	add	r3, r1
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10a      	bne.n	800efb6 <xTaskPriorityDisinherit+0xae>
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa4:	2201      	movs	r2, #1
 800efa6:	fa02 f303 	lsl.w	r3, r2, r3
 800efaa:	43da      	mvns	r2, r3
 800efac:	4b18      	ldr	r3, [pc, #96]	; (800f010 <xTaskPriorityDisinherit+0x108>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4013      	ands	r3, r2
 800efb2:	4a17      	ldr	r2, [pc, #92]	; (800f010 <xTaskPriorityDisinherit+0x108>)
 800efb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc2:	f1c3 0207 	rsb	r2, r3, #7
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efce:	2201      	movs	r2, #1
 800efd0:	409a      	lsls	r2, r3
 800efd2:	4b0f      	ldr	r3, [pc, #60]	; (800f010 <xTaskPriorityDisinherit+0x108>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4313      	orrs	r3, r2
 800efd8:	4a0d      	ldr	r2, [pc, #52]	; (800f010 <xTaskPriorityDisinherit+0x108>)
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe0:	4613      	mov	r3, r2
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	4413      	add	r3, r2
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	4a08      	ldr	r2, [pc, #32]	; (800f00c <xTaskPriorityDisinherit+0x104>)
 800efea:	441a      	add	r2, r3
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	3304      	adds	r3, #4
 800eff0:	4619      	mov	r1, r3
 800eff2:	4610      	mov	r0, r2
 800eff4:	f7fe f905 	bl	800d202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eff8:	2301      	movs	r3, #1
 800effa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800effc:	697b      	ldr	r3, [r7, #20]
	}
 800effe:	4618      	mov	r0, r3
 800f000:	3718      	adds	r7, #24
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	200029f8 	.word	0x200029f8
 800f00c:	200029fc 	.word	0x200029fc
 800f010:	20002b00 	.word	0x20002b00

0800f014 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f014:	b580      	push	{r7, lr}
 800f016:	b088      	sub	sp, #32
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f022:	2301      	movs	r3, #1
 800f024:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f000 8088 	beq.w	800f13e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10a      	bne.n	800f04c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	60fb      	str	r3, [r7, #12]
}
 800f048:	bf00      	nop
 800f04a:	e7fe      	b.n	800f04a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f050:	683a      	ldr	r2, [r7, #0]
 800f052:	429a      	cmp	r2, r3
 800f054:	d902      	bls.n	800f05c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	61fb      	str	r3, [r7, #28]
 800f05a:	e002      	b.n	800f062 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f060:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f066:	69fa      	ldr	r2, [r7, #28]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d068      	beq.n	800f13e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f070:	697a      	ldr	r2, [r7, #20]
 800f072:	429a      	cmp	r2, r3
 800f074:	d163      	bne.n	800f13e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f076:	4b34      	ldr	r3, [pc, #208]	; (800f148 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	69ba      	ldr	r2, [r7, #24]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d10a      	bne.n	800f096 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800f080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	60bb      	str	r3, [r7, #8]
}
 800f092:	bf00      	nop
 800f094:	e7fe      	b.n	800f094 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	69fa      	ldr	r2, [r7, #28]
 800f0a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	699b      	ldr	r3, [r3, #24]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	db04      	blt.n	800f0b4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	f1c3 0207 	rsb	r2, r3, #7
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	6959      	ldr	r1, [r3, #20]
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	009b      	lsls	r3, r3, #2
 800f0be:	4413      	add	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4a22      	ldr	r2, [pc, #136]	; (800f14c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f0c4:	4413      	add	r3, r2
 800f0c6:	4299      	cmp	r1, r3
 800f0c8:	d101      	bne.n	800f0ce <vTaskPriorityDisinheritAfterTimeout+0xba>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e000      	b.n	800f0d0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d034      	beq.n	800f13e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fe f8ef 	bl	800d2bc <uxListRemove>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d115      	bne.n	800f110 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e8:	4918      	ldr	r1, [pc, #96]	; (800f14c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4413      	add	r3, r2
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	440b      	add	r3, r1
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10a      	bne.n	800f110 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fe:	2201      	movs	r2, #1
 800f100:	fa02 f303 	lsl.w	r3, r2, r3
 800f104:	43da      	mvns	r2, r3
 800f106:	4b12      	ldr	r3, [pc, #72]	; (800f150 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4013      	ands	r3, r2
 800f10c:	4a10      	ldr	r2, [pc, #64]	; (800f150 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f10e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f114:	2201      	movs	r2, #1
 800f116:	409a      	lsls	r2, r3
 800f118:	4b0d      	ldr	r3, [pc, #52]	; (800f150 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	4a0c      	ldr	r2, [pc, #48]	; (800f150 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f120:	6013      	str	r3, [r2, #0]
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f126:	4613      	mov	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4a07      	ldr	r2, [pc, #28]	; (800f14c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f130:	441a      	add	r2, r3
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	3304      	adds	r3, #4
 800f136:	4619      	mov	r1, r3
 800f138:	4610      	mov	r0, r2
 800f13a:	f7fe f862 	bl	800d202 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f13e:	bf00      	nop
 800f140:	3720      	adds	r7, #32
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	200029f8 	.word	0x200029f8
 800f14c:	200029fc 	.word	0x200029fc
 800f150:	20002b00 	.word	0x20002b00

0800f154 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800f154:	b480      	push	{r7}
 800f156:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f158:	4b07      	ldr	r3, [pc, #28]	; (800f178 <pvTaskIncrementMutexHeldCount+0x24>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d004      	beq.n	800f16a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f160:	4b05      	ldr	r3, [pc, #20]	; (800f178 <pvTaskIncrementMutexHeldCount+0x24>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f166:	3201      	adds	r2, #1
 800f168:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800f16a:	4b03      	ldr	r3, [pc, #12]	; (800f178 <pvTaskIncrementMutexHeldCount+0x24>)
 800f16c:	681b      	ldr	r3, [r3, #0]
	}
 800f16e:	4618      	mov	r0, r3
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr
 800f178:	200029f8 	.word	0x200029f8

0800f17c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f186:	4b29      	ldr	r3, [pc, #164]	; (800f22c <prvAddCurrentTaskToDelayedList+0xb0>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f18c:	4b28      	ldr	r3, [pc, #160]	; (800f230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	3304      	adds	r3, #4
 800f192:	4618      	mov	r0, r3
 800f194:	f7fe f892 	bl	800d2bc <uxListRemove>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10b      	bne.n	800f1b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800f19e:	4b24      	ldr	r3, [pc, #144]	; (800f230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1aa:	43da      	mvns	r2, r3
 800f1ac:	4b21      	ldr	r3, [pc, #132]	; (800f234 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4013      	ands	r3, r2
 800f1b2:	4a20      	ldr	r2, [pc, #128]	; (800f234 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1bc:	d10a      	bne.n	800f1d4 <prvAddCurrentTaskToDelayedList+0x58>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d007      	beq.n	800f1d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1c4:	4b1a      	ldr	r3, [pc, #104]	; (800f230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	481a      	ldr	r0, [pc, #104]	; (800f238 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f1ce:	f7fe f818 	bl	800d202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1d2:	e026      	b.n	800f222 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4413      	add	r3, r2
 800f1da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1dc:	4b14      	ldr	r3, [pc, #80]	; (800f230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d209      	bcs.n	800f200 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1ec:	4b13      	ldr	r3, [pc, #76]	; (800f23c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	4b0f      	ldr	r3, [pc, #60]	; (800f230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3304      	adds	r3, #4
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	f7fe f826 	bl	800d24a <vListInsert>
}
 800f1fe:	e010      	b.n	800f222 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f200:	4b0f      	ldr	r3, [pc, #60]	; (800f240 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	4b0a      	ldr	r3, [pc, #40]	; (800f230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	3304      	adds	r3, #4
 800f20a:	4619      	mov	r1, r3
 800f20c:	4610      	mov	r0, r2
 800f20e:	f7fe f81c 	bl	800d24a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f212:	4b0c      	ldr	r3, [pc, #48]	; (800f244 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	68ba      	ldr	r2, [r7, #8]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d202      	bcs.n	800f222 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f21c:	4a09      	ldr	r2, [pc, #36]	; (800f244 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	6013      	str	r3, [r2, #0]
}
 800f222:	bf00      	nop
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	20002afc 	.word	0x20002afc
 800f230:	200029f8 	.word	0x200029f8
 800f234:	20002b00 	.word	0x20002b00
 800f238:	20002ae4 	.word	0x20002ae4
 800f23c:	20002ab4 	.word	0x20002ab4
 800f240:	20002ab0 	.word	0x20002ab0
 800f244:	20002b18 	.word	0x20002b18

0800f248 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b08a      	sub	sp, #40	; 0x28
 800f24c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f24e:	2300      	movs	r3, #0
 800f250:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f252:	f000 fb41 	bl	800f8d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f256:	4b1c      	ldr	r3, [pc, #112]	; (800f2c8 <xTimerCreateTimerTask+0x80>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d021      	beq.n	800f2a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f262:	2300      	movs	r3, #0
 800f264:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f266:	1d3a      	adds	r2, r7, #4
 800f268:	f107 0108 	add.w	r1, r7, #8
 800f26c:	f107 030c 	add.w	r3, r7, #12
 800f270:	4618      	mov	r0, r3
 800f272:	f7f4 fa15 	bl	80036a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	9202      	str	r2, [sp, #8]
 800f27e:	9301      	str	r3, [sp, #4]
 800f280:	2302      	movs	r3, #2
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	2300      	movs	r3, #0
 800f286:	460a      	mov	r2, r1
 800f288:	4910      	ldr	r1, [pc, #64]	; (800f2cc <xTimerCreateTimerTask+0x84>)
 800f28a:	4811      	ldr	r0, [pc, #68]	; (800f2d0 <xTimerCreateTimerTask+0x88>)
 800f28c:	f7fe fed2 	bl	800e034 <xTaskCreateStatic>
 800f290:	4603      	mov	r3, r0
 800f292:	4a10      	ldr	r2, [pc, #64]	; (800f2d4 <xTimerCreateTimerTask+0x8c>)
 800f294:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f296:	4b0f      	ldr	r3, [pc, #60]	; (800f2d4 <xTimerCreateTimerTask+0x8c>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d001      	beq.n	800f2a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	613b      	str	r3, [r7, #16]
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2be:	697b      	ldr	r3, [r7, #20]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	20002b54 	.word	0x20002b54
 800f2cc:	08010c1c 	.word	0x08010c1c
 800f2d0:	0800f515 	.word	0x0800f515
 800f2d4:	20002b58 	.word	0x20002b58

0800f2d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b088      	sub	sp, #32
 800f2dc:	af02      	add	r7, sp, #8
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
 800f2e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f2e6:	202c      	movs	r0, #44	; 0x2c
 800f2e8:	f000 fd86 	bl	800fdf8 <pvPortMalloc>
 800f2ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00d      	beq.n	800f310 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	9301      	str	r3, [sp, #4]
 800f2f8:	6a3b      	ldr	r3, [r7, #32]
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	f000 f846 	bl	800f394 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800f310:	697b      	ldr	r3, [r7, #20]
	}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b08a      	sub	sp, #40	; 0x28
 800f31e:	af02      	add	r7, sp, #8
 800f320:	60f8      	str	r0, [r7, #12]
 800f322:	60b9      	str	r1, [r7, #8]
 800f324:	607a      	str	r2, [r7, #4]
 800f326:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f328:	232c      	movs	r3, #44	; 0x2c
 800f32a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	2b2c      	cmp	r3, #44	; 0x2c
 800f330:	d00a      	beq.n	800f348 <xTimerCreateStatic+0x2e>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	61bb      	str	r3, [r7, #24]
}
 800f344:	bf00      	nop
 800f346:	e7fe      	b.n	800f346 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d10a      	bne.n	800f364 <xTimerCreateStatic+0x4a>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	617b      	str	r3, [r7, #20]
}
 800f360:	bf00      	nop
 800f362:	e7fe      	b.n	800f362 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f366:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00d      	beq.n	800f38a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	9301      	str	r3, [sp, #4]
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	68b9      	ldr	r1, [r7, #8]
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f000 f809 	bl	800f394 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	2201      	movs	r2, #1
 800f386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800f38a:	69fb      	ldr	r3, [r7, #28]
	}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3720      	adds	r7, #32
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b086      	sub	sp, #24
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
 800f3a0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d10a      	bne.n	800f3be <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ac:	f383 8811 	msr	BASEPRI, r3
 800f3b0:	f3bf 8f6f 	isb	sy
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	617b      	str	r3, [r7, #20]
}
 800f3ba:	bf00      	nop
 800f3bc:	e7fe      	b.n	800f3bc <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d015      	beq.n	800f3f0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3c4:	f000 fa88 	bl	800f8d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d0:	68ba      	ldr	r2, [r7, #8]
 800f3d2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	6a3a      	ldr	r2, [r7, #32]
 800f3e4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fd fefc 	bl	800d1e8 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f3f0:	bf00      	nop
 800f3f2:	3718      	adds	r7, #24
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b08a      	sub	sp, #40	; 0x28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f406:	2300      	movs	r3, #0
 800f408:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d10a      	bne.n	800f426 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f414:	f383 8811 	msr	BASEPRI, r3
 800f418:	f3bf 8f6f 	isb	sy
 800f41c:	f3bf 8f4f 	dsb	sy
 800f420:	623b      	str	r3, [r7, #32]
}
 800f422:	bf00      	nop
 800f424:	e7fe      	b.n	800f424 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f426:	4b1a      	ldr	r3, [pc, #104]	; (800f490 <xTimerGenericCommand+0x98>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d02a      	beq.n	800f484 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	2b05      	cmp	r3, #5
 800f43e:	dc18      	bgt.n	800f472 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f440:	f7ff fcbe 	bl	800edc0 <xTaskGetSchedulerState>
 800f444:	4603      	mov	r3, r0
 800f446:	2b02      	cmp	r3, #2
 800f448:	d109      	bne.n	800f45e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f44a:	4b11      	ldr	r3, [pc, #68]	; (800f490 <xTimerGenericCommand+0x98>)
 800f44c:	6818      	ldr	r0, [r3, #0]
 800f44e:	f107 0114 	add.w	r1, r7, #20
 800f452:	2300      	movs	r3, #0
 800f454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f456:	f7fe f8e5 	bl	800d624 <xQueueGenericSend>
 800f45a:	6278      	str	r0, [r7, #36]	; 0x24
 800f45c:	e012      	b.n	800f484 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f45e:	4b0c      	ldr	r3, [pc, #48]	; (800f490 <xTimerGenericCommand+0x98>)
 800f460:	6818      	ldr	r0, [r3, #0]
 800f462:	f107 0114 	add.w	r1, r7, #20
 800f466:	2300      	movs	r3, #0
 800f468:	2200      	movs	r2, #0
 800f46a:	f7fe f8db 	bl	800d624 <xQueueGenericSend>
 800f46e:	6278      	str	r0, [r7, #36]	; 0x24
 800f470:	e008      	b.n	800f484 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f472:	4b07      	ldr	r3, [pc, #28]	; (800f490 <xTimerGenericCommand+0x98>)
 800f474:	6818      	ldr	r0, [r3, #0]
 800f476:	f107 0114 	add.w	r1, r7, #20
 800f47a:	2300      	movs	r3, #0
 800f47c:	683a      	ldr	r2, [r7, #0]
 800f47e:	f7fe f9cf 	bl	800d820 <xQueueGenericSendFromISR>
 800f482:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f486:	4618      	mov	r0, r3
 800f488:	3728      	adds	r7, #40	; 0x28
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20002b54 	.word	0x20002b54

0800f494 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af02      	add	r7, sp, #8
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f49e:	4b1c      	ldr	r3, [pc, #112]	; (800f510 <prvProcessExpiredTimer+0x7c>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fd ff05 	bl	800d2bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	69db      	ldr	r3, [r3, #28]
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d122      	bne.n	800f500 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	699a      	ldr	r2, [r3, #24]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	18d1      	adds	r1, r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	683a      	ldr	r2, [r7, #0]
 800f4c6:	6978      	ldr	r0, [r7, #20]
 800f4c8:	f000 f8c8 	bl	800f65c <prvInsertTimerInActiveList>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d016      	beq.n	800f500 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	2100      	movs	r1, #0
 800f4dc:	6978      	ldr	r0, [r7, #20]
 800f4de:	f7ff ff8b 	bl	800f3f8 <xTimerGenericCommand>
 800f4e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d10a      	bne.n	800f500 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	60fb      	str	r3, [r7, #12]
}
 800f4fc:	bf00      	nop
 800f4fe:	e7fe      	b.n	800f4fe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f504:	6978      	ldr	r0, [r7, #20]
 800f506:	4798      	blx	r3
}
 800f508:	bf00      	nop
 800f50a:	3718      	adds	r7, #24
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	20002b4c 	.word	0x20002b4c

0800f514 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f51c:	f107 0308 	add.w	r3, r7, #8
 800f520:	4618      	mov	r0, r3
 800f522:	f000 f857 	bl	800f5d4 <prvGetNextExpireTime>
 800f526:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	4619      	mov	r1, r3
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f000 f803 	bl	800f538 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f532:	f000 f8d5 	bl	800f6e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f536:	e7f1      	b.n	800f51c <prvTimerTask+0x8>

0800f538 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f542:	f7ff f83b 	bl	800e5bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f546:	f107 0308 	add.w	r3, r7, #8
 800f54a:	4618      	mov	r0, r3
 800f54c:	f000 f866 	bl	800f61c <prvSampleTimeNow>
 800f550:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d130      	bne.n	800f5ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d10a      	bne.n	800f574 <prvProcessTimerOrBlockTask+0x3c>
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	429a      	cmp	r2, r3
 800f564:	d806      	bhi.n	800f574 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f566:	f7ff f837 	bl	800e5d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f56a:	68f9      	ldr	r1, [r7, #12]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7ff ff91 	bl	800f494 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f572:	e024      	b.n	800f5be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d008      	beq.n	800f58c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f57a:	4b13      	ldr	r3, [pc, #76]	; (800f5c8 <prvProcessTimerOrBlockTask+0x90>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	bf0c      	ite	eq
 800f584:	2301      	moveq	r3, #1
 800f586:	2300      	movne	r3, #0
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f58c:	4b0f      	ldr	r3, [pc, #60]	; (800f5cc <prvProcessTimerOrBlockTask+0x94>)
 800f58e:	6818      	ldr	r0, [r3, #0]
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	4619      	mov	r1, r3
 800f59a:	f7fe fd17 	bl	800dfcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f59e:	f7ff f81b 	bl	800e5d8 <xTaskResumeAll>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d10a      	bne.n	800f5be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5a8:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <prvProcessTimerOrBlockTask+0x98>)
 800f5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ae:	601a      	str	r2, [r3, #0]
 800f5b0:	f3bf 8f4f 	dsb	sy
 800f5b4:	f3bf 8f6f 	isb	sy
}
 800f5b8:	e001      	b.n	800f5be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f5ba:	f7ff f80d 	bl	800e5d8 <xTaskResumeAll>
}
 800f5be:	bf00      	nop
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20002b50 	.word	0x20002b50
 800f5cc:	20002b54 	.word	0x20002b54
 800f5d0:	e000ed04 	.word	0xe000ed04

0800f5d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f5dc:	4b0e      	ldr	r3, [pc, #56]	; (800f618 <prvGetNextExpireTime+0x44>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	bf0c      	ite	eq
 800f5e6:	2301      	moveq	r3, #1
 800f5e8:	2300      	movne	r3, #0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d105      	bne.n	800f606 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5fa:	4b07      	ldr	r3, [pc, #28]	; (800f618 <prvGetNextExpireTime+0x44>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	60fb      	str	r3, [r7, #12]
 800f604:	e001      	b.n	800f60a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f606:	2300      	movs	r3, #0
 800f608:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f60a:	68fb      	ldr	r3, [r7, #12]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3714      	adds	r7, #20
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	20002b4c 	.word	0x20002b4c

0800f61c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f624:	f7ff f874 	bl	800e710 <xTaskGetTickCount>
 800f628:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f62a:	4b0b      	ldr	r3, [pc, #44]	; (800f658 <prvSampleTimeNow+0x3c>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	429a      	cmp	r2, r3
 800f632:	d205      	bcs.n	800f640 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f634:	f000 f8ee 	bl	800f814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2201      	movs	r2, #1
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	e002      	b.n	800f646 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f646:	4a04      	ldr	r2, [pc, #16]	; (800f658 <prvSampleTimeNow+0x3c>)
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f64c:	68fb      	ldr	r3, [r7, #12]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20002b5c 	.word	0x20002b5c

0800f65c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f66a:	2300      	movs	r3, #0
 800f66c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d812      	bhi.n	800f6a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	1ad2      	subs	r2, r2, r3
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	699b      	ldr	r3, [r3, #24]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d302      	bcc.n	800f696 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f690:	2301      	movs	r3, #1
 800f692:	617b      	str	r3, [r7, #20]
 800f694:	e01b      	b.n	800f6ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f696:	4b10      	ldr	r3, [pc, #64]	; (800f6d8 <prvInsertTimerInActiveList+0x7c>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	3304      	adds	r3, #4
 800f69e:	4619      	mov	r1, r3
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	f7fd fdd2 	bl	800d24a <vListInsert>
 800f6a6:	e012      	b.n	800f6ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d206      	bcs.n	800f6be <prvInsertTimerInActiveList+0x62>
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d302      	bcc.n	800f6be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	e007      	b.n	800f6ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6be:	4b07      	ldr	r3, [pc, #28]	; (800f6dc <prvInsertTimerInActiveList+0x80>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	f7fd fdbe 	bl	800d24a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f6ce:	697b      	ldr	r3, [r7, #20]
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3718      	adds	r7, #24
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	20002b50 	.word	0x20002b50
 800f6dc:	20002b4c 	.word	0x20002b4c

0800f6e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b08c      	sub	sp, #48	; 0x30
 800f6e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6e6:	e081      	b.n	800f7ec <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	db7e      	blt.n	800f7ec <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f4:	695b      	ldr	r3, [r3, #20]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d004      	beq.n	800f704 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fc:	3304      	adds	r3, #4
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fd fddc 	bl	800d2bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f704:	1d3b      	adds	r3, r7, #4
 800f706:	4618      	mov	r0, r3
 800f708:	f7ff ff88 	bl	800f61c <prvSampleTimeNow>
 800f70c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	2b09      	cmp	r3, #9
 800f712:	d86a      	bhi.n	800f7ea <prvProcessReceivedCommands+0x10a>
 800f714:	a201      	add	r2, pc, #4	; (adr r2, 800f71c <prvProcessReceivedCommands+0x3c>)
 800f716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71a:	bf00      	nop
 800f71c:	0800f745 	.word	0x0800f745
 800f720:	0800f745 	.word	0x0800f745
 800f724:	0800f745 	.word	0x0800f745
 800f728:	0800f7ed 	.word	0x0800f7ed
 800f72c:	0800f7a1 	.word	0x0800f7a1
 800f730:	0800f7d9 	.word	0x0800f7d9
 800f734:	0800f745 	.word	0x0800f745
 800f738:	0800f745 	.word	0x0800f745
 800f73c:	0800f7ed 	.word	0x0800f7ed
 800f740:	0800f7a1 	.word	0x0800f7a1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	699b      	ldr	r3, [r3, #24]
 800f74a:	18d1      	adds	r1, r2, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6a3a      	ldr	r2, [r7, #32]
 800f750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f752:	f7ff ff83 	bl	800f65c <prvInsertTimerInActiveList>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d047      	beq.n	800f7ec <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f762:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d13f      	bne.n	800f7ec <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f770:	699b      	ldr	r3, [r3, #24]
 800f772:	441a      	add	r2, r3
 800f774:	2300      	movs	r3, #0
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	2300      	movs	r3, #0
 800f77a:	2100      	movs	r1, #0
 800f77c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f77e:	f7ff fe3b 	bl	800f3f8 <xTimerGenericCommand>
 800f782:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d130      	bne.n	800f7ec <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	61bb      	str	r3, [r7, #24]
}
 800f79c:	bf00      	nop
 800f79e:	e7fe      	b.n	800f79e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d10a      	bne.n	800f7c4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	617b      	str	r3, [r7, #20]
}
 800f7c0:	bf00      	nop
 800f7c2:	e7fe      	b.n	800f7c2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c6:	699a      	ldr	r2, [r3, #24]
 800f7c8:	6a3b      	ldr	r3, [r7, #32]
 800f7ca:	18d1      	adds	r1, r2, r3
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	6a3a      	ldr	r2, [r7, #32]
 800f7d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7d2:	f7ff ff43 	bl	800f65c <prvInsertTimerInActiveList>
					break;
 800f7d6:	e009      	b.n	800f7ec <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d104      	bne.n	800f7ec <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800f7e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7e4:	f000 fbcc 	bl	800ff80 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f7e8:	e000      	b.n	800f7ec <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800f7ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7ec:	4b08      	ldr	r3, [pc, #32]	; (800f810 <prvProcessReceivedCommands+0x130>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f107 0108 	add.w	r1, r7, #8
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fe f8aa 	bl	800d950 <xQueueReceive>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f47f af72 	bne.w	800f6e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop
 800f808:	3728      	adds	r7, #40	; 0x28
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	20002b54 	.word	0x20002b54

0800f814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b088      	sub	sp, #32
 800f818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f81a:	e045      	b.n	800f8a8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f81c:	4b2c      	ldr	r3, [pc, #176]	; (800f8d0 <prvSwitchTimerLists+0xbc>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f826:	4b2a      	ldr	r3, [pc, #168]	; (800f8d0 <prvSwitchTimerLists+0xbc>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	3304      	adds	r3, #4
 800f834:	4618      	mov	r0, r3
 800f836:	f7fd fd41 	bl	800d2bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	69db      	ldr	r3, [r3, #28]
 800f846:	2b01      	cmp	r3, #1
 800f848:	d12e      	bne.n	800f8a8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	699b      	ldr	r3, [r3, #24]
 800f84e:	693a      	ldr	r2, [r7, #16]
 800f850:	4413      	add	r3, r2
 800f852:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d90e      	bls.n	800f87a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f868:	4b19      	ldr	r3, [pc, #100]	; (800f8d0 <prvSwitchTimerLists+0xbc>)
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	3304      	adds	r3, #4
 800f870:	4619      	mov	r1, r3
 800f872:	4610      	mov	r0, r2
 800f874:	f7fd fce9 	bl	800d24a <vListInsert>
 800f878:	e016      	b.n	800f8a8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f87a:	2300      	movs	r3, #0
 800f87c:	9300      	str	r3, [sp, #0]
 800f87e:	2300      	movs	r3, #0
 800f880:	693a      	ldr	r2, [r7, #16]
 800f882:	2100      	movs	r1, #0
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f7ff fdb7 	bl	800f3f8 <xTimerGenericCommand>
 800f88a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d10a      	bne.n	800f8a8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f896:	f383 8811 	msr	BASEPRI, r3
 800f89a:	f3bf 8f6f 	isb	sy
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	603b      	str	r3, [r7, #0]
}
 800f8a4:	bf00      	nop
 800f8a6:	e7fe      	b.n	800f8a6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8a8:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <prvSwitchTimerLists+0xbc>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d1b4      	bne.n	800f81c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8b2:	4b07      	ldr	r3, [pc, #28]	; (800f8d0 <prvSwitchTimerLists+0xbc>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8b8:	4b06      	ldr	r3, [pc, #24]	; (800f8d4 <prvSwitchTimerLists+0xc0>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a04      	ldr	r2, [pc, #16]	; (800f8d0 <prvSwitchTimerLists+0xbc>)
 800f8be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8c0:	4a04      	ldr	r2, [pc, #16]	; (800f8d4 <prvSwitchTimerLists+0xc0>)
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	6013      	str	r3, [r2, #0]
}
 800f8c6:	bf00      	nop
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	20002b4c 	.word	0x20002b4c
 800f8d4:	20002b50 	.word	0x20002b50

0800f8d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f8de:	f000 f969 	bl	800fbb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f8e2:	4b15      	ldr	r3, [pc, #84]	; (800f938 <prvCheckForValidListAndQueue+0x60>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d120      	bne.n	800f92c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f8ea:	4814      	ldr	r0, [pc, #80]	; (800f93c <prvCheckForValidListAndQueue+0x64>)
 800f8ec:	f7fd fc5c 	bl	800d1a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f8f0:	4813      	ldr	r0, [pc, #76]	; (800f940 <prvCheckForValidListAndQueue+0x68>)
 800f8f2:	f7fd fc59 	bl	800d1a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f8f6:	4b13      	ldr	r3, [pc, #76]	; (800f944 <prvCheckForValidListAndQueue+0x6c>)
 800f8f8:	4a10      	ldr	r2, [pc, #64]	; (800f93c <prvCheckForValidListAndQueue+0x64>)
 800f8fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f8fc:	4b12      	ldr	r3, [pc, #72]	; (800f948 <prvCheckForValidListAndQueue+0x70>)
 800f8fe:	4a10      	ldr	r2, [pc, #64]	; (800f940 <prvCheckForValidListAndQueue+0x68>)
 800f900:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f902:	2300      	movs	r3, #0
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	4b11      	ldr	r3, [pc, #68]	; (800f94c <prvCheckForValidListAndQueue+0x74>)
 800f908:	4a11      	ldr	r2, [pc, #68]	; (800f950 <prvCheckForValidListAndQueue+0x78>)
 800f90a:	210c      	movs	r1, #12
 800f90c:	200a      	movs	r0, #10
 800f90e:	f7fd fd67 	bl	800d3e0 <xQueueGenericCreateStatic>
 800f912:	4603      	mov	r3, r0
 800f914:	4a08      	ldr	r2, [pc, #32]	; (800f938 <prvCheckForValidListAndQueue+0x60>)
 800f916:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f918:	4b07      	ldr	r3, [pc, #28]	; (800f938 <prvCheckForValidListAndQueue+0x60>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d005      	beq.n	800f92c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f920:	4b05      	ldr	r3, [pc, #20]	; (800f938 <prvCheckForValidListAndQueue+0x60>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	490b      	ldr	r1, [pc, #44]	; (800f954 <prvCheckForValidListAndQueue+0x7c>)
 800f926:	4618      	mov	r0, r3
 800f928:	f7fe fb26 	bl	800df78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f92c:	f000 f972 	bl	800fc14 <vPortExitCritical>
}
 800f930:	bf00      	nop
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20002b54 	.word	0x20002b54
 800f93c:	20002b24 	.word	0x20002b24
 800f940:	20002b38 	.word	0x20002b38
 800f944:	20002b4c 	.word	0x20002b4c
 800f948:	20002b50 	.word	0x20002b50
 800f94c:	20002bd8 	.word	0x20002bd8
 800f950:	20002b60 	.word	0x20002b60
 800f954:	08010c24 	.word	0x08010c24

0800f958 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f958:	b480      	push	{r7}
 800f95a:	b085      	sub	sp, #20
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	3b04      	subs	r3, #4
 800f968:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	3b04      	subs	r3, #4
 800f976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f023 0201 	bic.w	r2, r3, #1
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	3b04      	subs	r3, #4
 800f986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f988:	4a0c      	ldr	r2, [pc, #48]	; (800f9bc <pxPortInitialiseStack+0x64>)
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3b14      	subs	r3, #20
 800f992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3b04      	subs	r3, #4
 800f99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f06f 0202 	mvn.w	r2, #2
 800f9a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	3b20      	subs	r3, #32
 800f9ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3714      	adds	r7, #20
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	0800f9c1 	.word	0x0800f9c1

0800f9c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b085      	sub	sp, #20
 800f9c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9ca:	4b12      	ldr	r3, [pc, #72]	; (800fa14 <prvTaskExitError+0x54>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d2:	d00a      	beq.n	800f9ea <prvTaskExitError+0x2a>
	__asm volatile
 800f9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	60fb      	str	r3, [r7, #12]
}
 800f9e6:	bf00      	nop
 800f9e8:	e7fe      	b.n	800f9e8 <prvTaskExitError+0x28>
	__asm volatile
 800f9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ee:	f383 8811 	msr	BASEPRI, r3
 800f9f2:	f3bf 8f6f 	isb	sy
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	60bb      	str	r3, [r7, #8]
}
 800f9fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f9fe:	bf00      	nop
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0fc      	beq.n	800fa00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fa06:	bf00      	nop
 800fa08:	bf00      	nop
 800fa0a:	3714      	adds	r7, #20
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	200000bc 	.word	0x200000bc
	...

0800fa20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa20:	4b07      	ldr	r3, [pc, #28]	; (800fa40 <pxCurrentTCBConst2>)
 800fa22:	6819      	ldr	r1, [r3, #0]
 800fa24:	6808      	ldr	r0, [r1, #0]
 800fa26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2a:	f380 8809 	msr	PSP, r0
 800fa2e:	f3bf 8f6f 	isb	sy
 800fa32:	f04f 0000 	mov.w	r0, #0
 800fa36:	f380 8811 	msr	BASEPRI, r0
 800fa3a:	4770      	bx	lr
 800fa3c:	f3af 8000 	nop.w

0800fa40 <pxCurrentTCBConst2>:
 800fa40:	200029f8 	.word	0x200029f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa44:	bf00      	nop
 800fa46:	bf00      	nop

0800fa48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa48:	4808      	ldr	r0, [pc, #32]	; (800fa6c <prvPortStartFirstTask+0x24>)
 800fa4a:	6800      	ldr	r0, [r0, #0]
 800fa4c:	6800      	ldr	r0, [r0, #0]
 800fa4e:	f380 8808 	msr	MSP, r0
 800fa52:	f04f 0000 	mov.w	r0, #0
 800fa56:	f380 8814 	msr	CONTROL, r0
 800fa5a:	b662      	cpsie	i
 800fa5c:	b661      	cpsie	f
 800fa5e:	f3bf 8f4f 	dsb	sy
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	df00      	svc	0
 800fa68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa6a:	bf00      	nop
 800fa6c:	e000ed08 	.word	0xe000ed08

0800fa70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b086      	sub	sp, #24
 800fa74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa76:	4b46      	ldr	r3, [pc, #280]	; (800fb90 <xPortStartScheduler+0x120>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a46      	ldr	r2, [pc, #280]	; (800fb94 <xPortStartScheduler+0x124>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d10a      	bne.n	800fa96 <xPortStartScheduler+0x26>
	__asm volatile
 800fa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	613b      	str	r3, [r7, #16]
}
 800fa92:	bf00      	nop
 800fa94:	e7fe      	b.n	800fa94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fa96:	4b3e      	ldr	r3, [pc, #248]	; (800fb90 <xPortStartScheduler+0x120>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4a3f      	ldr	r2, [pc, #252]	; (800fb98 <xPortStartScheduler+0x128>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d10a      	bne.n	800fab6 <xPortStartScheduler+0x46>
	__asm volatile
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	60fb      	str	r3, [r7, #12]
}
 800fab2:	bf00      	nop
 800fab4:	e7fe      	b.n	800fab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fab6:	4b39      	ldr	r3, [pc, #228]	; (800fb9c <xPortStartScheduler+0x12c>)
 800fab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	22ff      	movs	r2, #255	; 0xff
 800fac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	b2db      	uxtb	r3, r3
 800face:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fad0:	78fb      	ldrb	r3, [r7, #3]
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fad8:	b2da      	uxtb	r2, r3
 800fada:	4b31      	ldr	r3, [pc, #196]	; (800fba0 <xPortStartScheduler+0x130>)
 800fadc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fade:	4b31      	ldr	r3, [pc, #196]	; (800fba4 <xPortStartScheduler+0x134>)
 800fae0:	2207      	movs	r2, #7
 800fae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fae4:	e009      	b.n	800fafa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fae6:	4b2f      	ldr	r3, [pc, #188]	; (800fba4 <xPortStartScheduler+0x134>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	3b01      	subs	r3, #1
 800faec:	4a2d      	ldr	r2, [pc, #180]	; (800fba4 <xPortStartScheduler+0x134>)
 800faee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800faf0:	78fb      	ldrb	r3, [r7, #3]
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb02:	2b80      	cmp	r3, #128	; 0x80
 800fb04:	d0ef      	beq.n	800fae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fb06:	4b27      	ldr	r3, [pc, #156]	; (800fba4 <xPortStartScheduler+0x134>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f1c3 0307 	rsb	r3, r3, #7
 800fb0e:	2b04      	cmp	r3, #4
 800fb10:	d00a      	beq.n	800fb28 <xPortStartScheduler+0xb8>
	__asm volatile
 800fb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb16:	f383 8811 	msr	BASEPRI, r3
 800fb1a:	f3bf 8f6f 	isb	sy
 800fb1e:	f3bf 8f4f 	dsb	sy
 800fb22:	60bb      	str	r3, [r7, #8]
}
 800fb24:	bf00      	nop
 800fb26:	e7fe      	b.n	800fb26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb28:	4b1e      	ldr	r3, [pc, #120]	; (800fba4 <xPortStartScheduler+0x134>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	021b      	lsls	r3, r3, #8
 800fb2e:	4a1d      	ldr	r2, [pc, #116]	; (800fba4 <xPortStartScheduler+0x134>)
 800fb30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb32:	4b1c      	ldr	r3, [pc, #112]	; (800fba4 <xPortStartScheduler+0x134>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb3a:	4a1a      	ldr	r2, [pc, #104]	; (800fba4 <xPortStartScheduler+0x134>)
 800fb3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	b2da      	uxtb	r2, r3
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb46:	4b18      	ldr	r3, [pc, #96]	; (800fba8 <xPortStartScheduler+0x138>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a17      	ldr	r2, [pc, #92]	; (800fba8 <xPortStartScheduler+0x138>)
 800fb4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb52:	4b15      	ldr	r3, [pc, #84]	; (800fba8 <xPortStartScheduler+0x138>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a14      	ldr	r2, [pc, #80]	; (800fba8 <xPortStartScheduler+0x138>)
 800fb58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fb5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb5e:	f000 f8dd 	bl	800fd1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb62:	4b12      	ldr	r3, [pc, #72]	; (800fbac <xPortStartScheduler+0x13c>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb68:	f000 f8fc 	bl	800fd64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb6c:	4b10      	ldr	r3, [pc, #64]	; (800fbb0 <xPortStartScheduler+0x140>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a0f      	ldr	r2, [pc, #60]	; (800fbb0 <xPortStartScheduler+0x140>)
 800fb72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fb76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb78:	f7ff ff66 	bl	800fa48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb7c:	f7fe fea8 	bl	800e8d0 <vTaskSwitchContext>
	prvTaskExitError();
 800fb80:	f7ff ff1e 	bl	800f9c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3718      	adds	r7, #24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	e000ed00 	.word	0xe000ed00
 800fb94:	410fc271 	.word	0x410fc271
 800fb98:	410fc270 	.word	0x410fc270
 800fb9c:	e000e400 	.word	0xe000e400
 800fba0:	20002c20 	.word	0x20002c20
 800fba4:	20002c24 	.word	0x20002c24
 800fba8:	e000ed20 	.word	0xe000ed20
 800fbac:	200000bc 	.word	0x200000bc
 800fbb0:	e000ef34 	.word	0xe000ef34

0800fbb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
	__asm volatile
 800fbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbbe:	f383 8811 	msr	BASEPRI, r3
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	f3bf 8f4f 	dsb	sy
 800fbca:	607b      	str	r3, [r7, #4]
}
 800fbcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fbce:	4b0f      	ldr	r3, [pc, #60]	; (800fc0c <vPortEnterCritical+0x58>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	4a0d      	ldr	r2, [pc, #52]	; (800fc0c <vPortEnterCritical+0x58>)
 800fbd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fbd8:	4b0c      	ldr	r3, [pc, #48]	; (800fc0c <vPortEnterCritical+0x58>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d10f      	bne.n	800fc00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fbe0:	4b0b      	ldr	r3, [pc, #44]	; (800fc10 <vPortEnterCritical+0x5c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00a      	beq.n	800fc00 <vPortEnterCritical+0x4c>
	__asm volatile
 800fbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbee:	f383 8811 	msr	BASEPRI, r3
 800fbf2:	f3bf 8f6f 	isb	sy
 800fbf6:	f3bf 8f4f 	dsb	sy
 800fbfa:	603b      	str	r3, [r7, #0]
}
 800fbfc:	bf00      	nop
 800fbfe:	e7fe      	b.n	800fbfe <vPortEnterCritical+0x4a>
	}
}
 800fc00:	bf00      	nop
 800fc02:	370c      	adds	r7, #12
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	200000bc 	.word	0x200000bc
 800fc10:	e000ed04 	.word	0xe000ed04

0800fc14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fc1a:	4b12      	ldr	r3, [pc, #72]	; (800fc64 <vPortExitCritical+0x50>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d10a      	bne.n	800fc38 <vPortExitCritical+0x24>
	__asm volatile
 800fc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc26:	f383 8811 	msr	BASEPRI, r3
 800fc2a:	f3bf 8f6f 	isb	sy
 800fc2e:	f3bf 8f4f 	dsb	sy
 800fc32:	607b      	str	r3, [r7, #4]
}
 800fc34:	bf00      	nop
 800fc36:	e7fe      	b.n	800fc36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fc38:	4b0a      	ldr	r3, [pc, #40]	; (800fc64 <vPortExitCritical+0x50>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	4a09      	ldr	r2, [pc, #36]	; (800fc64 <vPortExitCritical+0x50>)
 800fc40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc42:	4b08      	ldr	r3, [pc, #32]	; (800fc64 <vPortExitCritical+0x50>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d105      	bne.n	800fc56 <vPortExitCritical+0x42>
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	f383 8811 	msr	BASEPRI, r3
}
 800fc54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc56:	bf00      	nop
 800fc58:	370c      	adds	r7, #12
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	200000bc 	.word	0x200000bc
	...

0800fc70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc70:	f3ef 8009 	mrs	r0, PSP
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	4b15      	ldr	r3, [pc, #84]	; (800fcd0 <pxCurrentTCBConst>)
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	f01e 0f10 	tst.w	lr, #16
 800fc80:	bf08      	it	eq
 800fc82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8a:	6010      	str	r0, [r2, #0]
 800fc8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc94:	f380 8811 	msr	BASEPRI, r0
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	f3bf 8f6f 	isb	sy
 800fca0:	f7fe fe16 	bl	800e8d0 <vTaskSwitchContext>
 800fca4:	f04f 0000 	mov.w	r0, #0
 800fca8:	f380 8811 	msr	BASEPRI, r0
 800fcac:	bc09      	pop	{r0, r3}
 800fcae:	6819      	ldr	r1, [r3, #0]
 800fcb0:	6808      	ldr	r0, [r1, #0]
 800fcb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb6:	f01e 0f10 	tst.w	lr, #16
 800fcba:	bf08      	it	eq
 800fcbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fcc0:	f380 8809 	msr	PSP, r0
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	f3af 8000 	nop.w

0800fcd0 <pxCurrentTCBConst>:
 800fcd0:	200029f8 	.word	0x200029f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fcd4:	bf00      	nop
 800fcd6:	bf00      	nop

0800fcd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	607b      	str	r3, [r7, #4]
}
 800fcf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fcf2:	f7fe fd2f 	bl	800e754 <xTaskIncrementTick>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d003      	beq.n	800fd04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fcfc:	4b06      	ldr	r3, [pc, #24]	; (800fd18 <SysTick_Handler+0x40>)
 800fcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	2300      	movs	r3, #0
 800fd06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	f383 8811 	msr	BASEPRI, r3
}
 800fd0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fd10:	bf00      	nop
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	e000ed04 	.word	0xe000ed04

0800fd1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd20:	4b0b      	ldr	r3, [pc, #44]	; (800fd50 <vPortSetupTimerInterrupt+0x34>)
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd26:	4b0b      	ldr	r3, [pc, #44]	; (800fd54 <vPortSetupTimerInterrupt+0x38>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd2c:	4b0a      	ldr	r3, [pc, #40]	; (800fd58 <vPortSetupTimerInterrupt+0x3c>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a0a      	ldr	r2, [pc, #40]	; (800fd5c <vPortSetupTimerInterrupt+0x40>)
 800fd32:	fba2 2303 	umull	r2, r3, r2, r3
 800fd36:	099b      	lsrs	r3, r3, #6
 800fd38:	4a09      	ldr	r2, [pc, #36]	; (800fd60 <vPortSetupTimerInterrupt+0x44>)
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd3e:	4b04      	ldr	r3, [pc, #16]	; (800fd50 <vPortSetupTimerInterrupt+0x34>)
 800fd40:	2207      	movs	r2, #7
 800fd42:	601a      	str	r2, [r3, #0]
}
 800fd44:	bf00      	nop
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	e000e010 	.word	0xe000e010
 800fd54:	e000e018 	.word	0xe000e018
 800fd58:	20000038 	.word	0x20000038
 800fd5c:	10624dd3 	.word	0x10624dd3
 800fd60:	e000e014 	.word	0xe000e014

0800fd64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fd74 <vPortEnableVFP+0x10>
 800fd68:	6801      	ldr	r1, [r0, #0]
 800fd6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fd6e:	6001      	str	r1, [r0, #0]
 800fd70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd72:	bf00      	nop
 800fd74:	e000ed88 	.word	0xe000ed88

0800fd78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd7e:	f3ef 8305 	mrs	r3, IPSR
 800fd82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2b0f      	cmp	r3, #15
 800fd88:	d914      	bls.n	800fdb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd8a:	4a17      	ldr	r2, [pc, #92]	; (800fde8 <vPortValidateInterruptPriority+0x70>)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4413      	add	r3, r2
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd94:	4b15      	ldr	r3, [pc, #84]	; (800fdec <vPortValidateInterruptPriority+0x74>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	7afa      	ldrb	r2, [r7, #11]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d20a      	bcs.n	800fdb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	607b      	str	r3, [r7, #4]
}
 800fdb0:	bf00      	nop
 800fdb2:	e7fe      	b.n	800fdb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fdb4:	4b0e      	ldr	r3, [pc, #56]	; (800fdf0 <vPortValidateInterruptPriority+0x78>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fdbc:	4b0d      	ldr	r3, [pc, #52]	; (800fdf4 <vPortValidateInterruptPriority+0x7c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d90a      	bls.n	800fdda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc8:	f383 8811 	msr	BASEPRI, r3
 800fdcc:	f3bf 8f6f 	isb	sy
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	603b      	str	r3, [r7, #0]
}
 800fdd6:	bf00      	nop
 800fdd8:	e7fe      	b.n	800fdd8 <vPortValidateInterruptPriority+0x60>
	}
 800fdda:	bf00      	nop
 800fddc:	3714      	adds	r7, #20
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	e000e3f0 	.word	0xe000e3f0
 800fdec:	20002c20 	.word	0x20002c20
 800fdf0:	e000ed0c 	.word	0xe000ed0c
 800fdf4:	20002c24 	.word	0x20002c24

0800fdf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08a      	sub	sp, #40	; 0x28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fe00:	2300      	movs	r3, #0
 800fe02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fe04:	f7fe fbda 	bl	800e5bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fe08:	4b58      	ldr	r3, [pc, #352]	; (800ff6c <pvPortMalloc+0x174>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d101      	bne.n	800fe14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fe10:	f000 f910 	bl	8010034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe14:	4b56      	ldr	r3, [pc, #344]	; (800ff70 <pvPortMalloc+0x178>)
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	f040 808e 	bne.w	800ff3e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d01d      	beq.n	800fe64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fe28:	2208      	movs	r2, #8
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f003 0307 	and.w	r3, r3, #7
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d014      	beq.n	800fe64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f023 0307 	bic.w	r3, r3, #7
 800fe40:	3308      	adds	r3, #8
 800fe42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f003 0307 	and.w	r3, r3, #7
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00a      	beq.n	800fe64 <pvPortMalloc+0x6c>
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	617b      	str	r3, [r7, #20]
}
 800fe60:	bf00      	nop
 800fe62:	e7fe      	b.n	800fe62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d069      	beq.n	800ff3e <pvPortMalloc+0x146>
 800fe6a:	4b42      	ldr	r3, [pc, #264]	; (800ff74 <pvPortMalloc+0x17c>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d864      	bhi.n	800ff3e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe74:	4b40      	ldr	r3, [pc, #256]	; (800ff78 <pvPortMalloc+0x180>)
 800fe76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe78:	4b3f      	ldr	r3, [pc, #252]	; (800ff78 <pvPortMalloc+0x180>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe7e:	e004      	b.n	800fe8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d903      	bls.n	800fe9c <pvPortMalloc+0xa4>
 800fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1f1      	bne.n	800fe80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe9c:	4b33      	ldr	r3, [pc, #204]	; (800ff6c <pvPortMalloc+0x174>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d04b      	beq.n	800ff3e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fea6:	6a3b      	ldr	r3, [r7, #32]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	2208      	movs	r2, #8
 800feac:	4413      	add	r3, r2
 800feae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800feb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	1ad2      	subs	r2, r2, r3
 800fec0:	2308      	movs	r3, #8
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d91f      	bls.n	800ff08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4413      	add	r3, r2
 800fece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	f003 0307 	and.w	r3, r3, #7
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00a      	beq.n	800fef0 <pvPortMalloc+0xf8>
	__asm volatile
 800feda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fede:	f383 8811 	msr	BASEPRI, r3
 800fee2:	f3bf 8f6f 	isb	sy
 800fee6:	f3bf 8f4f 	dsb	sy
 800feea:	613b      	str	r3, [r7, #16]
}
 800feec:	bf00      	nop
 800feee:	e7fe      	b.n	800feee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef2:	685a      	ldr	r2, [r3, #4]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	1ad2      	subs	r2, r2, r3
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ff02:	69b8      	ldr	r0, [r7, #24]
 800ff04:	f000 f8f8 	bl	80100f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff08:	4b1a      	ldr	r3, [pc, #104]	; (800ff74 <pvPortMalloc+0x17c>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	4a18      	ldr	r2, [pc, #96]	; (800ff74 <pvPortMalloc+0x17c>)
 800ff14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff16:	4b17      	ldr	r3, [pc, #92]	; (800ff74 <pvPortMalloc+0x17c>)
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	4b18      	ldr	r3, [pc, #96]	; (800ff7c <pvPortMalloc+0x184>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d203      	bcs.n	800ff2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff22:	4b14      	ldr	r3, [pc, #80]	; (800ff74 <pvPortMalloc+0x17c>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4a15      	ldr	r2, [pc, #84]	; (800ff7c <pvPortMalloc+0x184>)
 800ff28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2c:	685a      	ldr	r2, [r3, #4]
 800ff2e:	4b10      	ldr	r3, [pc, #64]	; (800ff70 <pvPortMalloc+0x178>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	431a      	orrs	r2, r3
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff3e:	f7fe fb4b 	bl	800e5d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	f003 0307 	and.w	r3, r3, #7
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d00a      	beq.n	800ff62 <pvPortMalloc+0x16a>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff50:	f383 8811 	msr	BASEPRI, r3
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	60fb      	str	r3, [r7, #12]
}
 800ff5e:	bf00      	nop
 800ff60:	e7fe      	b.n	800ff60 <pvPortMalloc+0x168>
	return pvReturn;
 800ff62:	69fb      	ldr	r3, [r7, #28]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3728      	adds	r7, #40	; 0x28
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	20003030 	.word	0x20003030
 800ff70:	2000303c 	.word	0x2000303c
 800ff74:	20003034 	.word	0x20003034
 800ff78:	20003028 	.word	0x20003028
 800ff7c:	20003038 	.word	0x20003038

0800ff80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d048      	beq.n	8010024 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff92:	2308      	movs	r3, #8
 800ff94:	425b      	negs	r3, r3
 800ff96:	697a      	ldr	r2, [r7, #20]
 800ff98:	4413      	add	r3, r2
 800ff9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	685a      	ldr	r2, [r3, #4]
 800ffa4:	4b21      	ldr	r3, [pc, #132]	; (801002c <vPortFree+0xac>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4013      	ands	r3, r2
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d10a      	bne.n	800ffc4 <vPortFree+0x44>
	__asm volatile
 800ffae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb2:	f383 8811 	msr	BASEPRI, r3
 800ffb6:	f3bf 8f6f 	isb	sy
 800ffba:	f3bf 8f4f 	dsb	sy
 800ffbe:	60fb      	str	r3, [r7, #12]
}
 800ffc0:	bf00      	nop
 800ffc2:	e7fe      	b.n	800ffc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00a      	beq.n	800ffe2 <vPortFree+0x62>
	__asm volatile
 800ffcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd0:	f383 8811 	msr	BASEPRI, r3
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	60bb      	str	r3, [r7, #8]
}
 800ffde:	bf00      	nop
 800ffe0:	e7fe      	b.n	800ffe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	685a      	ldr	r2, [r3, #4]
 800ffe6:	4b11      	ldr	r3, [pc, #68]	; (801002c <vPortFree+0xac>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4013      	ands	r3, r2
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d019      	beq.n	8010024 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d115      	bne.n	8010024 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	685a      	ldr	r2, [r3, #4]
 800fffc:	4b0b      	ldr	r3, [pc, #44]	; (801002c <vPortFree+0xac>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	43db      	mvns	r3, r3
 8010002:	401a      	ands	r2, r3
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010008:	f7fe fad8 	bl	800e5bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	685a      	ldr	r2, [r3, #4]
 8010010:	4b07      	ldr	r3, [pc, #28]	; (8010030 <vPortFree+0xb0>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4413      	add	r3, r2
 8010016:	4a06      	ldr	r2, [pc, #24]	; (8010030 <vPortFree+0xb0>)
 8010018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801001a:	6938      	ldr	r0, [r7, #16]
 801001c:	f000 f86c 	bl	80100f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010020:	f7fe fada 	bl	800e5d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010024:	bf00      	nop
 8010026:	3718      	adds	r7, #24
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	2000303c 	.word	0x2000303c
 8010030:	20003034 	.word	0x20003034

08010034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801003a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801003e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010040:	4b27      	ldr	r3, [pc, #156]	; (80100e0 <prvHeapInit+0xac>)
 8010042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f003 0307 	and.w	r3, r3, #7
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00c      	beq.n	8010068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	3307      	adds	r3, #7
 8010052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f023 0307 	bic.w	r3, r3, #7
 801005a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801005c:	68ba      	ldr	r2, [r7, #8]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	4a1f      	ldr	r2, [pc, #124]	; (80100e0 <prvHeapInit+0xac>)
 8010064:	4413      	add	r3, r2
 8010066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801006c:	4a1d      	ldr	r2, [pc, #116]	; (80100e4 <prvHeapInit+0xb0>)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010072:	4b1c      	ldr	r3, [pc, #112]	; (80100e4 <prvHeapInit+0xb0>)
 8010074:	2200      	movs	r2, #0
 8010076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	68ba      	ldr	r2, [r7, #8]
 801007c:	4413      	add	r3, r2
 801007e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010080:	2208      	movs	r2, #8
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	1a9b      	subs	r3, r3, r2
 8010086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f023 0307 	bic.w	r3, r3, #7
 801008e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4a15      	ldr	r2, [pc, #84]	; (80100e8 <prvHeapInit+0xb4>)
 8010094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010096:	4b14      	ldr	r3, [pc, #80]	; (80100e8 <prvHeapInit+0xb4>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2200      	movs	r2, #0
 801009c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801009e:	4b12      	ldr	r3, [pc, #72]	; (80100e8 <prvHeapInit+0xb4>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2200      	movs	r2, #0
 80100a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	1ad2      	subs	r2, r2, r3
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80100b4:	4b0c      	ldr	r3, [pc, #48]	; (80100e8 <prvHeapInit+0xb4>)
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	4a0a      	ldr	r2, [pc, #40]	; (80100ec <prvHeapInit+0xb8>)
 80100c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	4a09      	ldr	r2, [pc, #36]	; (80100f0 <prvHeapInit+0xbc>)
 80100ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80100cc:	4b09      	ldr	r3, [pc, #36]	; (80100f4 <prvHeapInit+0xc0>)
 80100ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80100d2:	601a      	str	r2, [r3, #0]
}
 80100d4:	bf00      	nop
 80100d6:	3714      	adds	r7, #20
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	20002c28 	.word	0x20002c28
 80100e4:	20003028 	.word	0x20003028
 80100e8:	20003030 	.word	0x20003030
 80100ec:	20003038 	.word	0x20003038
 80100f0:	20003034 	.word	0x20003034
 80100f4:	2000303c 	.word	0x2000303c

080100f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010100:	4b28      	ldr	r3, [pc, #160]	; (80101a4 <prvInsertBlockIntoFreeList+0xac>)
 8010102:	60fb      	str	r3, [r7, #12]
 8010104:	e002      	b.n	801010c <prvInsertBlockIntoFreeList+0x14>
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	429a      	cmp	r2, r3
 8010114:	d8f7      	bhi.n	8010106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	4413      	add	r3, r2
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	429a      	cmp	r2, r3
 8010126:	d108      	bne.n	801013a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	685a      	ldr	r2, [r3, #4]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	441a      	add	r2, r3
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	441a      	add	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	429a      	cmp	r2, r3
 801014c:	d118      	bne.n	8010180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	4b15      	ldr	r3, [pc, #84]	; (80101a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	429a      	cmp	r2, r3
 8010158:	d00d      	beq.n	8010176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	441a      	add	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	601a      	str	r2, [r3, #0]
 8010174:	e008      	b.n	8010188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010176:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	601a      	str	r2, [r3, #0]
 801017e:	e003      	b.n	8010188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	429a      	cmp	r2, r3
 801018e:	d002      	beq.n	8010196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010196:	bf00      	nop
 8010198:	3714      	adds	r7, #20
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	20003028 	.word	0x20003028
 80101a8:	20003030 	.word	0x20003030

080101ac <swapfunc>:
 80101ac:	2b02      	cmp	r3, #2
 80101ae:	b510      	push	{r4, lr}
 80101b0:	d00a      	beq.n	80101c8 <swapfunc+0x1c>
 80101b2:	0892      	lsrs	r2, r2, #2
 80101b4:	3a01      	subs	r2, #1
 80101b6:	6803      	ldr	r3, [r0, #0]
 80101b8:	680c      	ldr	r4, [r1, #0]
 80101ba:	f840 4b04 	str.w	r4, [r0], #4
 80101be:	2a00      	cmp	r2, #0
 80101c0:	f841 3b04 	str.w	r3, [r1], #4
 80101c4:	dcf6      	bgt.n	80101b4 <swapfunc+0x8>
 80101c6:	bd10      	pop	{r4, pc}
 80101c8:	4402      	add	r2, r0
 80101ca:	780c      	ldrb	r4, [r1, #0]
 80101cc:	7803      	ldrb	r3, [r0, #0]
 80101ce:	f800 4b01 	strb.w	r4, [r0], #1
 80101d2:	f801 3b01 	strb.w	r3, [r1], #1
 80101d6:	1a13      	subs	r3, r2, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	dcf6      	bgt.n	80101ca <swapfunc+0x1e>
 80101dc:	e7f3      	b.n	80101c6 <swapfunc+0x1a>

080101de <med3.constprop.0>:
 80101de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e0:	460c      	mov	r4, r1
 80101e2:	4615      	mov	r5, r2
 80101e4:	4607      	mov	r7, r0
 80101e6:	461e      	mov	r6, r3
 80101e8:	4798      	blx	r3
 80101ea:	2800      	cmp	r0, #0
 80101ec:	4629      	mov	r1, r5
 80101ee:	4620      	mov	r0, r4
 80101f0:	da0a      	bge.n	8010208 <med3.constprop.0+0x2a>
 80101f2:	47b0      	blx	r6
 80101f4:	2800      	cmp	r0, #0
 80101f6:	db05      	blt.n	8010204 <med3.constprop.0+0x26>
 80101f8:	4629      	mov	r1, r5
 80101fa:	4638      	mov	r0, r7
 80101fc:	47b0      	blx	r6
 80101fe:	2800      	cmp	r0, #0
 8010200:	db0a      	blt.n	8010218 <med3.constprop.0+0x3a>
 8010202:	463c      	mov	r4, r7
 8010204:	4620      	mov	r0, r4
 8010206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010208:	47b0      	blx	r6
 801020a:	2800      	cmp	r0, #0
 801020c:	dcfa      	bgt.n	8010204 <med3.constprop.0+0x26>
 801020e:	4629      	mov	r1, r5
 8010210:	4638      	mov	r0, r7
 8010212:	47b0      	blx	r6
 8010214:	2800      	cmp	r0, #0
 8010216:	dbf4      	blt.n	8010202 <med3.constprop.0+0x24>
 8010218:	462c      	mov	r4, r5
 801021a:	e7f3      	b.n	8010204 <med3.constprop.0+0x26>

0801021c <qsort>:
 801021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010220:	469a      	mov	sl, r3
 8010222:	ea40 0302 	orr.w	r3, r0, r2
 8010226:	079b      	lsls	r3, r3, #30
 8010228:	b097      	sub	sp, #92	; 0x5c
 801022a:	4606      	mov	r6, r0
 801022c:	4614      	mov	r4, r2
 801022e:	d11a      	bne.n	8010266 <qsort+0x4a>
 8010230:	f1b2 0804 	subs.w	r8, r2, #4
 8010234:	bf18      	it	ne
 8010236:	f04f 0801 	movne.w	r8, #1
 801023a:	2300      	movs	r3, #0
 801023c:	9302      	str	r3, [sp, #8]
 801023e:	1933      	adds	r3, r6, r4
 8010240:	fb04 f701 	mul.w	r7, r4, r1
 8010244:	9301      	str	r3, [sp, #4]
 8010246:	2906      	cmp	r1, #6
 8010248:	eb06 0307 	add.w	r3, r6, r7
 801024c:	9303      	str	r3, [sp, #12]
 801024e:	d82a      	bhi.n	80102a6 <qsort+0x8a>
 8010250:	9b01      	ldr	r3, [sp, #4]
 8010252:	9a03      	ldr	r2, [sp, #12]
 8010254:	4293      	cmp	r3, r2
 8010256:	d310      	bcc.n	801027a <qsort+0x5e>
 8010258:	9b02      	ldr	r3, [sp, #8]
 801025a:	2b00      	cmp	r3, #0
 801025c:	f040 811e 	bne.w	801049c <qsort+0x280>
 8010260:	b017      	add	sp, #92	; 0x5c
 8010262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010266:	f04f 0802 	mov.w	r8, #2
 801026a:	e7e6      	b.n	801023a <qsort+0x1e>
 801026c:	4643      	mov	r3, r8
 801026e:	4622      	mov	r2, r4
 8010270:	4639      	mov	r1, r7
 8010272:	4628      	mov	r0, r5
 8010274:	f7ff ff9a 	bl	80101ac <swapfunc>
 8010278:	e00e      	b.n	8010298 <qsort+0x7c>
 801027a:	9d01      	ldr	r5, [sp, #4]
 801027c:	e00d      	b.n	801029a <qsort+0x7e>
 801027e:	1b2f      	subs	r7, r5, r4
 8010280:	4629      	mov	r1, r5
 8010282:	4638      	mov	r0, r7
 8010284:	47d0      	blx	sl
 8010286:	2800      	cmp	r0, #0
 8010288:	dd09      	ble.n	801029e <qsort+0x82>
 801028a:	f1b8 0f00 	cmp.w	r8, #0
 801028e:	d1ed      	bne.n	801026c <qsort+0x50>
 8010290:	682b      	ldr	r3, [r5, #0]
 8010292:	683a      	ldr	r2, [r7, #0]
 8010294:	602a      	str	r2, [r5, #0]
 8010296:	603b      	str	r3, [r7, #0]
 8010298:	463d      	mov	r5, r7
 801029a:	42ae      	cmp	r6, r5
 801029c:	d3ef      	bcc.n	801027e <qsort+0x62>
 801029e:	9b01      	ldr	r3, [sp, #4]
 80102a0:	4423      	add	r3, r4
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	e7d4      	b.n	8010250 <qsort+0x34>
 80102a6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80102aa:	1b3f      	subs	r7, r7, r4
 80102ac:	2907      	cmp	r1, #7
 80102ae:	fb04 6909 	mla	r9, r4, r9, r6
 80102b2:	4437      	add	r7, r6
 80102b4:	d021      	beq.n	80102fa <qsort+0xde>
 80102b6:	2928      	cmp	r1, #40	; 0x28
 80102b8:	d944      	bls.n	8010344 <qsort+0x128>
 80102ba:	08cd      	lsrs	r5, r1, #3
 80102bc:	4365      	muls	r5, r4
 80102be:	4653      	mov	r3, sl
 80102c0:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80102c4:	1971      	adds	r1, r6, r5
 80102c6:	4630      	mov	r0, r6
 80102c8:	f7ff ff89 	bl	80101de <med3.constprop.0>
 80102cc:	4649      	mov	r1, r9
 80102ce:	eb09 0205 	add.w	r2, r9, r5
 80102d2:	4653      	mov	r3, sl
 80102d4:	4683      	mov	fp, r0
 80102d6:	1b48      	subs	r0, r1, r5
 80102d8:	f7ff ff81 	bl	80101de <med3.constprop.0>
 80102dc:	463a      	mov	r2, r7
 80102de:	4681      	mov	r9, r0
 80102e0:	4653      	mov	r3, sl
 80102e2:	1b79      	subs	r1, r7, r5
 80102e4:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80102e8:	f7ff ff79 	bl	80101de <med3.constprop.0>
 80102ec:	4602      	mov	r2, r0
 80102ee:	4649      	mov	r1, r9
 80102f0:	4653      	mov	r3, sl
 80102f2:	4658      	mov	r0, fp
 80102f4:	f7ff ff73 	bl	80101de <med3.constprop.0>
 80102f8:	4681      	mov	r9, r0
 80102fa:	f1b8 0f00 	cmp.w	r8, #0
 80102fe:	d124      	bne.n	801034a <qsort+0x12e>
 8010300:	6833      	ldr	r3, [r6, #0]
 8010302:	f8d9 2000 	ldr.w	r2, [r9]
 8010306:	6032      	str	r2, [r6, #0]
 8010308:	f8c9 3000 	str.w	r3, [r9]
 801030c:	eb06 0b04 	add.w	fp, r6, r4
 8010310:	46b9      	mov	r9, r7
 8010312:	465d      	mov	r5, fp
 8010314:	2300      	movs	r3, #0
 8010316:	45bb      	cmp	fp, r7
 8010318:	d835      	bhi.n	8010386 <qsort+0x16a>
 801031a:	4631      	mov	r1, r6
 801031c:	4658      	mov	r0, fp
 801031e:	9304      	str	r3, [sp, #16]
 8010320:	47d0      	blx	sl
 8010322:	2800      	cmp	r0, #0
 8010324:	9b04      	ldr	r3, [sp, #16]
 8010326:	dc3e      	bgt.n	80103a6 <qsort+0x18a>
 8010328:	d10a      	bne.n	8010340 <qsort+0x124>
 801032a:	f1b8 0f00 	cmp.w	r8, #0
 801032e:	d113      	bne.n	8010358 <qsort+0x13c>
 8010330:	682b      	ldr	r3, [r5, #0]
 8010332:	f8db 2000 	ldr.w	r2, [fp]
 8010336:	602a      	str	r2, [r5, #0]
 8010338:	f8cb 3000 	str.w	r3, [fp]
 801033c:	4425      	add	r5, r4
 801033e:	2301      	movs	r3, #1
 8010340:	44a3      	add	fp, r4
 8010342:	e7e8      	b.n	8010316 <qsort+0xfa>
 8010344:	463a      	mov	r2, r7
 8010346:	46b3      	mov	fp, r6
 8010348:	e7d1      	b.n	80102ee <qsort+0xd2>
 801034a:	4643      	mov	r3, r8
 801034c:	4622      	mov	r2, r4
 801034e:	4649      	mov	r1, r9
 8010350:	4630      	mov	r0, r6
 8010352:	f7ff ff2b 	bl	80101ac <swapfunc>
 8010356:	e7d9      	b.n	801030c <qsort+0xf0>
 8010358:	4643      	mov	r3, r8
 801035a:	4622      	mov	r2, r4
 801035c:	4659      	mov	r1, fp
 801035e:	4628      	mov	r0, r5
 8010360:	f7ff ff24 	bl	80101ac <swapfunc>
 8010364:	e7ea      	b.n	801033c <qsort+0x120>
 8010366:	d10b      	bne.n	8010380 <qsort+0x164>
 8010368:	f1b8 0f00 	cmp.w	r8, #0
 801036c:	d114      	bne.n	8010398 <qsort+0x17c>
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	f8d9 2000 	ldr.w	r2, [r9]
 8010374:	603a      	str	r2, [r7, #0]
 8010376:	f8c9 3000 	str.w	r3, [r9]
 801037a:	eba9 0904 	sub.w	r9, r9, r4
 801037e:	2301      	movs	r3, #1
 8010380:	9f04      	ldr	r7, [sp, #16]
 8010382:	45bb      	cmp	fp, r7
 8010384:	d90f      	bls.n	80103a6 <qsort+0x18a>
 8010386:	2b00      	cmp	r3, #0
 8010388:	d143      	bne.n	8010412 <qsort+0x1f6>
 801038a:	9b01      	ldr	r3, [sp, #4]
 801038c:	9a03      	ldr	r2, [sp, #12]
 801038e:	4293      	cmp	r3, r2
 8010390:	f4bf af62 	bcs.w	8010258 <qsort+0x3c>
 8010394:	9d01      	ldr	r5, [sp, #4]
 8010396:	e036      	b.n	8010406 <qsort+0x1ea>
 8010398:	4643      	mov	r3, r8
 801039a:	4622      	mov	r2, r4
 801039c:	4649      	mov	r1, r9
 801039e:	4638      	mov	r0, r7
 80103a0:	f7ff ff04 	bl	80101ac <swapfunc>
 80103a4:	e7e9      	b.n	801037a <qsort+0x15e>
 80103a6:	4631      	mov	r1, r6
 80103a8:	4638      	mov	r0, r7
 80103aa:	9305      	str	r3, [sp, #20]
 80103ac:	47d0      	blx	sl
 80103ae:	1b3b      	subs	r3, r7, r4
 80103b0:	2800      	cmp	r0, #0
 80103b2:	9304      	str	r3, [sp, #16]
 80103b4:	9b05      	ldr	r3, [sp, #20]
 80103b6:	dad6      	bge.n	8010366 <qsort+0x14a>
 80103b8:	f1b8 0f00 	cmp.w	r8, #0
 80103bc:	d006      	beq.n	80103cc <qsort+0x1b0>
 80103be:	4643      	mov	r3, r8
 80103c0:	4622      	mov	r2, r4
 80103c2:	4639      	mov	r1, r7
 80103c4:	4658      	mov	r0, fp
 80103c6:	f7ff fef1 	bl	80101ac <swapfunc>
 80103ca:	e005      	b.n	80103d8 <qsort+0x1bc>
 80103cc:	f8db 3000 	ldr.w	r3, [fp]
 80103d0:	683a      	ldr	r2, [r7, #0]
 80103d2:	f8cb 2000 	str.w	r2, [fp]
 80103d6:	603b      	str	r3, [r7, #0]
 80103d8:	9f04      	ldr	r7, [sp, #16]
 80103da:	e7b0      	b.n	801033e <qsort+0x122>
 80103dc:	4643      	mov	r3, r8
 80103de:	4622      	mov	r2, r4
 80103e0:	4639      	mov	r1, r7
 80103e2:	4628      	mov	r0, r5
 80103e4:	f7ff fee2 	bl	80101ac <swapfunc>
 80103e8:	e00c      	b.n	8010404 <qsort+0x1e8>
 80103ea:	1b2f      	subs	r7, r5, r4
 80103ec:	4629      	mov	r1, r5
 80103ee:	4638      	mov	r0, r7
 80103f0:	47d0      	blx	sl
 80103f2:	2800      	cmp	r0, #0
 80103f4:	dd09      	ble.n	801040a <qsort+0x1ee>
 80103f6:	f1b8 0f00 	cmp.w	r8, #0
 80103fa:	d1ef      	bne.n	80103dc <qsort+0x1c0>
 80103fc:	682b      	ldr	r3, [r5, #0]
 80103fe:	683a      	ldr	r2, [r7, #0]
 8010400:	602a      	str	r2, [r5, #0]
 8010402:	603b      	str	r3, [r7, #0]
 8010404:	463d      	mov	r5, r7
 8010406:	42ae      	cmp	r6, r5
 8010408:	d3ef      	bcc.n	80103ea <qsort+0x1ce>
 801040a:	9b01      	ldr	r3, [sp, #4]
 801040c:	4423      	add	r3, r4
 801040e:	9301      	str	r3, [sp, #4]
 8010410:	e7bb      	b.n	801038a <qsort+0x16e>
 8010412:	ebab 0305 	sub.w	r3, fp, r5
 8010416:	1baa      	subs	r2, r5, r6
 8010418:	429a      	cmp	r2, r3
 801041a:	bfa8      	it	ge
 801041c:	461a      	movge	r2, r3
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	b12a      	cbz	r2, 801042e <qsort+0x212>
 8010422:	4643      	mov	r3, r8
 8010424:	ebab 0102 	sub.w	r1, fp, r2
 8010428:	4630      	mov	r0, r6
 801042a:	f7ff febf 	bl	80101ac <swapfunc>
 801042e:	9b03      	ldr	r3, [sp, #12]
 8010430:	eba3 0209 	sub.w	r2, r3, r9
 8010434:	eba9 0707 	sub.w	r7, r9, r7
 8010438:	1b12      	subs	r2, r2, r4
 801043a:	42ba      	cmp	r2, r7
 801043c:	bf28      	it	cs
 801043e:	463a      	movcs	r2, r7
 8010440:	b12a      	cbz	r2, 801044e <qsort+0x232>
 8010442:	9903      	ldr	r1, [sp, #12]
 8010444:	4643      	mov	r3, r8
 8010446:	1a89      	subs	r1, r1, r2
 8010448:	4658      	mov	r0, fp
 801044a:	f7ff feaf 	bl	80101ac <swapfunc>
 801044e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010452:	9b03      	ldr	r3, [sp, #12]
 8010454:	454f      	cmp	r7, r9
 8010456:	eba3 0007 	sub.w	r0, r3, r7
 801045a:	d904      	bls.n	8010466 <qsort+0x24a>
 801045c:	4633      	mov	r3, r6
 801045e:	46b9      	mov	r9, r7
 8010460:	9f01      	ldr	r7, [sp, #4]
 8010462:	4606      	mov	r6, r0
 8010464:	4618      	mov	r0, r3
 8010466:	42a7      	cmp	r7, r4
 8010468:	d921      	bls.n	80104ae <qsort+0x292>
 801046a:	fbb7 f1f4 	udiv	r1, r7, r4
 801046e:	9b02      	ldr	r3, [sp, #8]
 8010470:	2b07      	cmp	r3, #7
 8010472:	d80d      	bhi.n	8010490 <qsort+0x274>
 8010474:	aa16      	add	r2, sp, #88	; 0x58
 8010476:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801047a:	fbb9 f2f4 	udiv	r2, r9, r4
 801047e:	f843 6c40 	str.w	r6, [r3, #-64]
 8010482:	f843 2c3c 	str.w	r2, [r3, #-60]
 8010486:	9b02      	ldr	r3, [sp, #8]
 8010488:	3301      	adds	r3, #1
 801048a:	9302      	str	r3, [sp, #8]
 801048c:	4606      	mov	r6, r0
 801048e:	e6d6      	b.n	801023e <qsort+0x22>
 8010490:	4653      	mov	r3, sl
 8010492:	4622      	mov	r2, r4
 8010494:	f7ff fec2 	bl	801021c <qsort>
 8010498:	45a1      	cmp	r9, r4
 801049a:	d80b      	bhi.n	80104b4 <qsort+0x298>
 801049c:	9b02      	ldr	r3, [sp, #8]
 801049e:	aa16      	add	r2, sp, #88	; 0x58
 80104a0:	3b01      	subs	r3, #1
 80104a2:	9302      	str	r3, [sp, #8]
 80104a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80104a8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 80104ac:	e7ee      	b.n	801048c <qsort+0x270>
 80104ae:	45a1      	cmp	r9, r4
 80104b0:	f67f aed2 	bls.w	8010258 <qsort+0x3c>
 80104b4:	fbb9 f1f4 	udiv	r1, r9, r4
 80104b8:	4630      	mov	r0, r6
 80104ba:	e7e7      	b.n	801048c <qsort+0x270>

080104bc <memset>:
 80104bc:	4402      	add	r2, r0
 80104be:	4603      	mov	r3, r0
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d100      	bne.n	80104c6 <memset+0xa>
 80104c4:	4770      	bx	lr
 80104c6:	f803 1b01 	strb.w	r1, [r3], #1
 80104ca:	e7f9      	b.n	80104c0 <memset+0x4>

080104cc <_reclaim_reent>:
 80104cc:	4b29      	ldr	r3, [pc, #164]	; (8010574 <_reclaim_reent+0xa8>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4283      	cmp	r3, r0
 80104d2:	b570      	push	{r4, r5, r6, lr}
 80104d4:	4604      	mov	r4, r0
 80104d6:	d04b      	beq.n	8010570 <_reclaim_reent+0xa4>
 80104d8:	69c3      	ldr	r3, [r0, #28]
 80104da:	b143      	cbz	r3, 80104ee <_reclaim_reent+0x22>
 80104dc:	68db      	ldr	r3, [r3, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d144      	bne.n	801056c <_reclaim_reent+0xa0>
 80104e2:	69e3      	ldr	r3, [r4, #28]
 80104e4:	6819      	ldr	r1, [r3, #0]
 80104e6:	b111      	cbz	r1, 80104ee <_reclaim_reent+0x22>
 80104e8:	4620      	mov	r0, r4
 80104ea:	f000 f87f 	bl	80105ec <_free_r>
 80104ee:	6961      	ldr	r1, [r4, #20]
 80104f0:	b111      	cbz	r1, 80104f8 <_reclaim_reent+0x2c>
 80104f2:	4620      	mov	r0, r4
 80104f4:	f000 f87a 	bl	80105ec <_free_r>
 80104f8:	69e1      	ldr	r1, [r4, #28]
 80104fa:	b111      	cbz	r1, 8010502 <_reclaim_reent+0x36>
 80104fc:	4620      	mov	r0, r4
 80104fe:	f000 f875 	bl	80105ec <_free_r>
 8010502:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010504:	b111      	cbz	r1, 801050c <_reclaim_reent+0x40>
 8010506:	4620      	mov	r0, r4
 8010508:	f000 f870 	bl	80105ec <_free_r>
 801050c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801050e:	b111      	cbz	r1, 8010516 <_reclaim_reent+0x4a>
 8010510:	4620      	mov	r0, r4
 8010512:	f000 f86b 	bl	80105ec <_free_r>
 8010516:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010518:	b111      	cbz	r1, 8010520 <_reclaim_reent+0x54>
 801051a:	4620      	mov	r0, r4
 801051c:	f000 f866 	bl	80105ec <_free_r>
 8010520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010522:	b111      	cbz	r1, 801052a <_reclaim_reent+0x5e>
 8010524:	4620      	mov	r0, r4
 8010526:	f000 f861 	bl	80105ec <_free_r>
 801052a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801052c:	b111      	cbz	r1, 8010534 <_reclaim_reent+0x68>
 801052e:	4620      	mov	r0, r4
 8010530:	f000 f85c 	bl	80105ec <_free_r>
 8010534:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010536:	b111      	cbz	r1, 801053e <_reclaim_reent+0x72>
 8010538:	4620      	mov	r0, r4
 801053a:	f000 f857 	bl	80105ec <_free_r>
 801053e:	6a23      	ldr	r3, [r4, #32]
 8010540:	b1b3      	cbz	r3, 8010570 <_reclaim_reent+0xa4>
 8010542:	4620      	mov	r0, r4
 8010544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010548:	4718      	bx	r3
 801054a:	5949      	ldr	r1, [r1, r5]
 801054c:	b941      	cbnz	r1, 8010560 <_reclaim_reent+0x94>
 801054e:	3504      	adds	r5, #4
 8010550:	69e3      	ldr	r3, [r4, #28]
 8010552:	2d80      	cmp	r5, #128	; 0x80
 8010554:	68d9      	ldr	r1, [r3, #12]
 8010556:	d1f8      	bne.n	801054a <_reclaim_reent+0x7e>
 8010558:	4620      	mov	r0, r4
 801055a:	f000 f847 	bl	80105ec <_free_r>
 801055e:	e7c0      	b.n	80104e2 <_reclaim_reent+0x16>
 8010560:	680e      	ldr	r6, [r1, #0]
 8010562:	4620      	mov	r0, r4
 8010564:	f000 f842 	bl	80105ec <_free_r>
 8010568:	4631      	mov	r1, r6
 801056a:	e7ef      	b.n	801054c <_reclaim_reent+0x80>
 801056c:	2500      	movs	r5, #0
 801056e:	e7ef      	b.n	8010550 <_reclaim_reent+0x84>
 8010570:	bd70      	pop	{r4, r5, r6, pc}
 8010572:	bf00      	nop
 8010574:	2000010c 	.word	0x2000010c

08010578 <__errno>:
 8010578:	4b01      	ldr	r3, [pc, #4]	; (8010580 <__errno+0x8>)
 801057a:	6818      	ldr	r0, [r3, #0]
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop
 8010580:	2000010c 	.word	0x2000010c

08010584 <__libc_init_array>:
 8010584:	b570      	push	{r4, r5, r6, lr}
 8010586:	4d0d      	ldr	r5, [pc, #52]	; (80105bc <__libc_init_array+0x38>)
 8010588:	4c0d      	ldr	r4, [pc, #52]	; (80105c0 <__libc_init_array+0x3c>)
 801058a:	1b64      	subs	r4, r4, r5
 801058c:	10a4      	asrs	r4, r4, #2
 801058e:	2600      	movs	r6, #0
 8010590:	42a6      	cmp	r6, r4
 8010592:	d109      	bne.n	80105a8 <__libc_init_array+0x24>
 8010594:	4d0b      	ldr	r5, [pc, #44]	; (80105c4 <__libc_init_array+0x40>)
 8010596:	4c0c      	ldr	r4, [pc, #48]	; (80105c8 <__libc_init_array+0x44>)
 8010598:	f000 fa88 	bl	8010aac <_init>
 801059c:	1b64      	subs	r4, r4, r5
 801059e:	10a4      	asrs	r4, r4, #2
 80105a0:	2600      	movs	r6, #0
 80105a2:	42a6      	cmp	r6, r4
 80105a4:	d105      	bne.n	80105b2 <__libc_init_array+0x2e>
 80105a6:	bd70      	pop	{r4, r5, r6, pc}
 80105a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80105ac:	4798      	blx	r3
 80105ae:	3601      	adds	r6, #1
 80105b0:	e7ee      	b.n	8010590 <__libc_init_array+0xc>
 80105b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80105b6:	4798      	blx	r3
 80105b8:	3601      	adds	r6, #1
 80105ba:	e7f2      	b.n	80105a2 <__libc_init_array+0x1e>
 80105bc:	08010ca8 	.word	0x08010ca8
 80105c0:	08010ca8 	.word	0x08010ca8
 80105c4:	08010ca8 	.word	0x08010ca8
 80105c8:	08010cac 	.word	0x08010cac

080105cc <__retarget_lock_acquire_recursive>:
 80105cc:	4770      	bx	lr

080105ce <__retarget_lock_release_recursive>:
 80105ce:	4770      	bx	lr

080105d0 <memcpy>:
 80105d0:	440a      	add	r2, r1
 80105d2:	4291      	cmp	r1, r2
 80105d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80105d8:	d100      	bne.n	80105dc <memcpy+0xc>
 80105da:	4770      	bx	lr
 80105dc:	b510      	push	{r4, lr}
 80105de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105e6:	4291      	cmp	r1, r2
 80105e8:	d1f9      	bne.n	80105de <memcpy+0xe>
 80105ea:	bd10      	pop	{r4, pc}

080105ec <_free_r>:
 80105ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105ee:	2900      	cmp	r1, #0
 80105f0:	d044      	beq.n	801067c <_free_r+0x90>
 80105f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105f6:	9001      	str	r0, [sp, #4]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f1a1 0404 	sub.w	r4, r1, #4
 80105fe:	bfb8      	it	lt
 8010600:	18e4      	addlt	r4, r4, r3
 8010602:	f000 f83f 	bl	8010684 <__malloc_lock>
 8010606:	4a1e      	ldr	r2, [pc, #120]	; (8010680 <_free_r+0x94>)
 8010608:	9801      	ldr	r0, [sp, #4]
 801060a:	6813      	ldr	r3, [r2, #0]
 801060c:	b933      	cbnz	r3, 801061c <_free_r+0x30>
 801060e:	6063      	str	r3, [r4, #4]
 8010610:	6014      	str	r4, [r2, #0]
 8010612:	b003      	add	sp, #12
 8010614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010618:	f000 b83a 	b.w	8010690 <__malloc_unlock>
 801061c:	42a3      	cmp	r3, r4
 801061e:	d908      	bls.n	8010632 <_free_r+0x46>
 8010620:	6825      	ldr	r5, [r4, #0]
 8010622:	1961      	adds	r1, r4, r5
 8010624:	428b      	cmp	r3, r1
 8010626:	bf01      	itttt	eq
 8010628:	6819      	ldreq	r1, [r3, #0]
 801062a:	685b      	ldreq	r3, [r3, #4]
 801062c:	1949      	addeq	r1, r1, r5
 801062e:	6021      	streq	r1, [r4, #0]
 8010630:	e7ed      	b.n	801060e <_free_r+0x22>
 8010632:	461a      	mov	r2, r3
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	b10b      	cbz	r3, 801063c <_free_r+0x50>
 8010638:	42a3      	cmp	r3, r4
 801063a:	d9fa      	bls.n	8010632 <_free_r+0x46>
 801063c:	6811      	ldr	r1, [r2, #0]
 801063e:	1855      	adds	r5, r2, r1
 8010640:	42a5      	cmp	r5, r4
 8010642:	d10b      	bne.n	801065c <_free_r+0x70>
 8010644:	6824      	ldr	r4, [r4, #0]
 8010646:	4421      	add	r1, r4
 8010648:	1854      	adds	r4, r2, r1
 801064a:	42a3      	cmp	r3, r4
 801064c:	6011      	str	r1, [r2, #0]
 801064e:	d1e0      	bne.n	8010612 <_free_r+0x26>
 8010650:	681c      	ldr	r4, [r3, #0]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	6053      	str	r3, [r2, #4]
 8010656:	440c      	add	r4, r1
 8010658:	6014      	str	r4, [r2, #0]
 801065a:	e7da      	b.n	8010612 <_free_r+0x26>
 801065c:	d902      	bls.n	8010664 <_free_r+0x78>
 801065e:	230c      	movs	r3, #12
 8010660:	6003      	str	r3, [r0, #0]
 8010662:	e7d6      	b.n	8010612 <_free_r+0x26>
 8010664:	6825      	ldr	r5, [r4, #0]
 8010666:	1961      	adds	r1, r4, r5
 8010668:	428b      	cmp	r3, r1
 801066a:	bf04      	itt	eq
 801066c:	6819      	ldreq	r1, [r3, #0]
 801066e:	685b      	ldreq	r3, [r3, #4]
 8010670:	6063      	str	r3, [r4, #4]
 8010672:	bf04      	itt	eq
 8010674:	1949      	addeq	r1, r1, r5
 8010676:	6021      	streq	r1, [r4, #0]
 8010678:	6054      	str	r4, [r2, #4]
 801067a:	e7ca      	b.n	8010612 <_free_r+0x26>
 801067c:	b003      	add	sp, #12
 801067e:	bd30      	pop	{r4, r5, pc}
 8010680:	2000317c 	.word	0x2000317c

08010684 <__malloc_lock>:
 8010684:	4801      	ldr	r0, [pc, #4]	; (801068c <__malloc_lock+0x8>)
 8010686:	f7ff bfa1 	b.w	80105cc <__retarget_lock_acquire_recursive>
 801068a:	bf00      	nop
 801068c:	20003178 	.word	0x20003178

08010690 <__malloc_unlock>:
 8010690:	4801      	ldr	r0, [pc, #4]	; (8010698 <__malloc_unlock+0x8>)
 8010692:	f7ff bf9c 	b.w	80105ce <__retarget_lock_release_recursive>
 8010696:	bf00      	nop
 8010698:	20003178 	.word	0x20003178
 801069c:	00000000 	.word	0x00000000

080106a0 <exp>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	ed2d 8b02 	vpush	{d8}
 80106a6:	ec55 4b10 	vmov	r4, r5, d0
 80106aa:	f000 f84d 	bl	8010748 <__ieee754_exp>
 80106ae:	eeb0 8a40 	vmov.f32	s16, s0
 80106b2:	eef0 8a60 	vmov.f32	s17, s1
 80106b6:	ec45 4b10 	vmov	d0, r4, r5
 80106ba:	f000 f839 	bl	8010730 <finite>
 80106be:	b168      	cbz	r0, 80106dc <exp+0x3c>
 80106c0:	a317      	add	r3, pc, #92	; (adr r3, 8010720 <exp+0x80>)
 80106c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c6:	4620      	mov	r0, r4
 80106c8:	4629      	mov	r1, r5
 80106ca:	f7f0 f9cd 	bl	8000a68 <__aeabi_dcmpgt>
 80106ce:	b160      	cbz	r0, 80106ea <exp+0x4a>
 80106d0:	f7ff ff52 	bl	8010578 <__errno>
 80106d4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010710 <exp+0x70>
 80106d8:	2322      	movs	r3, #34	; 0x22
 80106da:	6003      	str	r3, [r0, #0]
 80106dc:	eeb0 0a48 	vmov.f32	s0, s16
 80106e0:	eef0 0a68 	vmov.f32	s1, s17
 80106e4:	ecbd 8b02 	vpop	{d8}
 80106e8:	bd38      	pop	{r3, r4, r5, pc}
 80106ea:	a30f      	add	r3, pc, #60	; (adr r3, 8010728 <exp+0x88>)
 80106ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f0:	4620      	mov	r0, r4
 80106f2:	4629      	mov	r1, r5
 80106f4:	f7f0 f99a 	bl	8000a2c <__aeabi_dcmplt>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d0ef      	beq.n	80106dc <exp+0x3c>
 80106fc:	f7ff ff3c 	bl	8010578 <__errno>
 8010700:	2322      	movs	r3, #34	; 0x22
 8010702:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010718 <exp+0x78>
 8010706:	6003      	str	r3, [r0, #0]
 8010708:	e7e8      	b.n	80106dc <exp+0x3c>
 801070a:	bf00      	nop
 801070c:	f3af 8000 	nop.w
 8010710:	00000000 	.word	0x00000000
 8010714:	7ff00000 	.word	0x7ff00000
	...
 8010720:	fefa39ef 	.word	0xfefa39ef
 8010724:	40862e42 	.word	0x40862e42
 8010728:	d52d3051 	.word	0xd52d3051
 801072c:	c0874910 	.word	0xc0874910

08010730 <finite>:
 8010730:	b082      	sub	sp, #8
 8010732:	ed8d 0b00 	vstr	d0, [sp]
 8010736:	9801      	ldr	r0, [sp, #4]
 8010738:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801073c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010740:	0fc0      	lsrs	r0, r0, #31
 8010742:	b002      	add	sp, #8
 8010744:	4770      	bx	lr
	...

08010748 <__ieee754_exp>:
 8010748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801074c:	ec55 4b10 	vmov	r4, r5, d0
 8010750:	49b5      	ldr	r1, [pc, #724]	; (8010a28 <__ieee754_exp+0x2e0>)
 8010752:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010756:	428a      	cmp	r2, r1
 8010758:	ed2d 8b04 	vpush	{d8-d9}
 801075c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010760:	d93b      	bls.n	80107da <__ieee754_exp+0x92>
 8010762:	49b2      	ldr	r1, [pc, #712]	; (8010a2c <__ieee754_exp+0x2e4>)
 8010764:	428a      	cmp	r2, r1
 8010766:	d916      	bls.n	8010796 <__ieee754_exp+0x4e>
 8010768:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801076c:	4323      	orrs	r3, r4
 801076e:	ee10 2a10 	vmov	r2, s0
 8010772:	d007      	beq.n	8010784 <__ieee754_exp+0x3c>
 8010774:	462b      	mov	r3, r5
 8010776:	4620      	mov	r0, r4
 8010778:	4629      	mov	r1, r5
 801077a:	f7ef fd2f 	bl	80001dc <__adddf3>
 801077e:	4604      	mov	r4, r0
 8010780:	460d      	mov	r5, r1
 8010782:	e002      	b.n	801078a <__ieee754_exp+0x42>
 8010784:	b10e      	cbz	r6, 801078a <__ieee754_exp+0x42>
 8010786:	2400      	movs	r4, #0
 8010788:	2500      	movs	r5, #0
 801078a:	ecbd 8b04 	vpop	{d8-d9}
 801078e:	ec45 4b10 	vmov	d0, r4, r5
 8010792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010796:	a38e      	add	r3, pc, #568	; (adr r3, 80109d0 <__ieee754_exp+0x288>)
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	ee10 0a10 	vmov	r0, s0
 80107a0:	4629      	mov	r1, r5
 80107a2:	f7f0 f961 	bl	8000a68 <__aeabi_dcmpgt>
 80107a6:	4607      	mov	r7, r0
 80107a8:	b130      	cbz	r0, 80107b8 <__ieee754_exp+0x70>
 80107aa:	ecbd 8b04 	vpop	{d8-d9}
 80107ae:	2000      	movs	r0, #0
 80107b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107b4:	f000 b971 	b.w	8010a9a <__math_oflow>
 80107b8:	a387      	add	r3, pc, #540	; (adr r3, 80109d8 <__ieee754_exp+0x290>)
 80107ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107be:	4620      	mov	r0, r4
 80107c0:	4629      	mov	r1, r5
 80107c2:	f7f0 f933 	bl	8000a2c <__aeabi_dcmplt>
 80107c6:	2800      	cmp	r0, #0
 80107c8:	f000 808b 	beq.w	80108e2 <__ieee754_exp+0x19a>
 80107cc:	ecbd 8b04 	vpop	{d8-d9}
 80107d0:	4638      	mov	r0, r7
 80107d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d6:	f000 b957 	b.w	8010a88 <__math_uflow>
 80107da:	4b95      	ldr	r3, [pc, #596]	; (8010a30 <__ieee754_exp+0x2e8>)
 80107dc:	429a      	cmp	r2, r3
 80107de:	f240 80ac 	bls.w	801093a <__ieee754_exp+0x1f2>
 80107e2:	4b94      	ldr	r3, [pc, #592]	; (8010a34 <__ieee754_exp+0x2ec>)
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d87c      	bhi.n	80108e2 <__ieee754_exp+0x19a>
 80107e8:	4b93      	ldr	r3, [pc, #588]	; (8010a38 <__ieee754_exp+0x2f0>)
 80107ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80107ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f2:	ee10 0a10 	vmov	r0, s0
 80107f6:	4629      	mov	r1, r5
 80107f8:	f7ef fcee 	bl	80001d8 <__aeabi_dsub>
 80107fc:	4b8f      	ldr	r3, [pc, #572]	; (8010a3c <__ieee754_exp+0x2f4>)
 80107fe:	00f7      	lsls	r7, r6, #3
 8010800:	443b      	add	r3, r7
 8010802:	ed93 7b00 	vldr	d7, [r3]
 8010806:	f1c6 0a01 	rsb	sl, r6, #1
 801080a:	4680      	mov	r8, r0
 801080c:	4689      	mov	r9, r1
 801080e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010812:	eeb0 8a47 	vmov.f32	s16, s14
 8010816:	eef0 8a67 	vmov.f32	s17, s15
 801081a:	ec53 2b18 	vmov	r2, r3, d8
 801081e:	4640      	mov	r0, r8
 8010820:	4649      	mov	r1, r9
 8010822:	f7ef fcd9 	bl	80001d8 <__aeabi_dsub>
 8010826:	4604      	mov	r4, r0
 8010828:	460d      	mov	r5, r1
 801082a:	4622      	mov	r2, r4
 801082c:	462b      	mov	r3, r5
 801082e:	4620      	mov	r0, r4
 8010830:	4629      	mov	r1, r5
 8010832:	f7ef fe89 	bl	8000548 <__aeabi_dmul>
 8010836:	a36a      	add	r3, pc, #424	; (adr r3, 80109e0 <__ieee754_exp+0x298>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	4606      	mov	r6, r0
 801083e:	460f      	mov	r7, r1
 8010840:	f7ef fe82 	bl	8000548 <__aeabi_dmul>
 8010844:	a368      	add	r3, pc, #416	; (adr r3, 80109e8 <__ieee754_exp+0x2a0>)
 8010846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084a:	f7ef fcc5 	bl	80001d8 <__aeabi_dsub>
 801084e:	4632      	mov	r2, r6
 8010850:	463b      	mov	r3, r7
 8010852:	f7ef fe79 	bl	8000548 <__aeabi_dmul>
 8010856:	a366      	add	r3, pc, #408	; (adr r3, 80109f0 <__ieee754_exp+0x2a8>)
 8010858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085c:	f7ef fcbe 	bl	80001dc <__adddf3>
 8010860:	4632      	mov	r2, r6
 8010862:	463b      	mov	r3, r7
 8010864:	f7ef fe70 	bl	8000548 <__aeabi_dmul>
 8010868:	a363      	add	r3, pc, #396	; (adr r3, 80109f8 <__ieee754_exp+0x2b0>)
 801086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086e:	f7ef fcb3 	bl	80001d8 <__aeabi_dsub>
 8010872:	4632      	mov	r2, r6
 8010874:	463b      	mov	r3, r7
 8010876:	f7ef fe67 	bl	8000548 <__aeabi_dmul>
 801087a:	a361      	add	r3, pc, #388	; (adr r3, 8010a00 <__ieee754_exp+0x2b8>)
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	f7ef fcac 	bl	80001dc <__adddf3>
 8010884:	4632      	mov	r2, r6
 8010886:	463b      	mov	r3, r7
 8010888:	f7ef fe5e 	bl	8000548 <__aeabi_dmul>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4620      	mov	r0, r4
 8010892:	4629      	mov	r1, r5
 8010894:	f7ef fca0 	bl	80001d8 <__aeabi_dsub>
 8010898:	4602      	mov	r2, r0
 801089a:	460b      	mov	r3, r1
 801089c:	4606      	mov	r6, r0
 801089e:	460f      	mov	r7, r1
 80108a0:	4620      	mov	r0, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	f7ef fe50 	bl	8000548 <__aeabi_dmul>
 80108a8:	ec41 0b19 	vmov	d9, r0, r1
 80108ac:	f1ba 0f00 	cmp.w	sl, #0
 80108b0:	d15d      	bne.n	801096e <__ieee754_exp+0x226>
 80108b2:	2200      	movs	r2, #0
 80108b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80108b8:	4630      	mov	r0, r6
 80108ba:	4639      	mov	r1, r7
 80108bc:	f7ef fc8c 	bl	80001d8 <__aeabi_dsub>
 80108c0:	4602      	mov	r2, r0
 80108c2:	460b      	mov	r3, r1
 80108c4:	ec51 0b19 	vmov	r0, r1, d9
 80108c8:	f7ef ff68 	bl	800079c <__aeabi_ddiv>
 80108cc:	4622      	mov	r2, r4
 80108ce:	462b      	mov	r3, r5
 80108d0:	f7ef fc82 	bl	80001d8 <__aeabi_dsub>
 80108d4:	4602      	mov	r2, r0
 80108d6:	460b      	mov	r3, r1
 80108d8:	2000      	movs	r0, #0
 80108da:	4959      	ldr	r1, [pc, #356]	; (8010a40 <__ieee754_exp+0x2f8>)
 80108dc:	f7ef fc7c 	bl	80001d8 <__aeabi_dsub>
 80108e0:	e74d      	b.n	801077e <__ieee754_exp+0x36>
 80108e2:	4b58      	ldr	r3, [pc, #352]	; (8010a44 <__ieee754_exp+0x2fc>)
 80108e4:	4620      	mov	r0, r4
 80108e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80108ea:	4629      	mov	r1, r5
 80108ec:	a346      	add	r3, pc, #280	; (adr r3, 8010a08 <__ieee754_exp+0x2c0>)
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	f7ef fe29 	bl	8000548 <__aeabi_dmul>
 80108f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80108fa:	f7ef fc6f 	bl	80001dc <__adddf3>
 80108fe:	f7f0 f8bd 	bl	8000a7c <__aeabi_d2iz>
 8010902:	4682      	mov	sl, r0
 8010904:	f7ef fdb6 	bl	8000474 <__aeabi_i2d>
 8010908:	a341      	add	r3, pc, #260	; (adr r3, 8010a10 <__ieee754_exp+0x2c8>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	4606      	mov	r6, r0
 8010910:	460f      	mov	r7, r1
 8010912:	f7ef fe19 	bl	8000548 <__aeabi_dmul>
 8010916:	4602      	mov	r2, r0
 8010918:	460b      	mov	r3, r1
 801091a:	4620      	mov	r0, r4
 801091c:	4629      	mov	r1, r5
 801091e:	f7ef fc5b 	bl	80001d8 <__aeabi_dsub>
 8010922:	a33d      	add	r3, pc, #244	; (adr r3, 8010a18 <__ieee754_exp+0x2d0>)
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	4680      	mov	r8, r0
 801092a:	4689      	mov	r9, r1
 801092c:	4630      	mov	r0, r6
 801092e:	4639      	mov	r1, r7
 8010930:	f7ef fe0a 	bl	8000548 <__aeabi_dmul>
 8010934:	ec41 0b18 	vmov	d8, r0, r1
 8010938:	e76f      	b.n	801081a <__ieee754_exp+0xd2>
 801093a:	4b43      	ldr	r3, [pc, #268]	; (8010a48 <__ieee754_exp+0x300>)
 801093c:	429a      	cmp	r2, r3
 801093e:	d811      	bhi.n	8010964 <__ieee754_exp+0x21c>
 8010940:	a337      	add	r3, pc, #220	; (adr r3, 8010a20 <__ieee754_exp+0x2d8>)
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	ee10 0a10 	vmov	r0, s0
 801094a:	4629      	mov	r1, r5
 801094c:	f7ef fc46 	bl	80001dc <__adddf3>
 8010950:	4b3b      	ldr	r3, [pc, #236]	; (8010a40 <__ieee754_exp+0x2f8>)
 8010952:	2200      	movs	r2, #0
 8010954:	f7f0 f888 	bl	8000a68 <__aeabi_dcmpgt>
 8010958:	b138      	cbz	r0, 801096a <__ieee754_exp+0x222>
 801095a:	4b39      	ldr	r3, [pc, #228]	; (8010a40 <__ieee754_exp+0x2f8>)
 801095c:	2200      	movs	r2, #0
 801095e:	4620      	mov	r0, r4
 8010960:	4629      	mov	r1, r5
 8010962:	e70a      	b.n	801077a <__ieee754_exp+0x32>
 8010964:	f04f 0a00 	mov.w	sl, #0
 8010968:	e75f      	b.n	801082a <__ieee754_exp+0xe2>
 801096a:	4682      	mov	sl, r0
 801096c:	e75d      	b.n	801082a <__ieee754_exp+0xe2>
 801096e:	4632      	mov	r2, r6
 8010970:	463b      	mov	r3, r7
 8010972:	2000      	movs	r0, #0
 8010974:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010978:	f7ef fc2e 	bl	80001d8 <__aeabi_dsub>
 801097c:	4602      	mov	r2, r0
 801097e:	460b      	mov	r3, r1
 8010980:	ec51 0b19 	vmov	r0, r1, d9
 8010984:	f7ef ff0a 	bl	800079c <__aeabi_ddiv>
 8010988:	4602      	mov	r2, r0
 801098a:	460b      	mov	r3, r1
 801098c:	ec51 0b18 	vmov	r0, r1, d8
 8010990:	f7ef fc22 	bl	80001d8 <__aeabi_dsub>
 8010994:	4642      	mov	r2, r8
 8010996:	464b      	mov	r3, r9
 8010998:	f7ef fc1e 	bl	80001d8 <__aeabi_dsub>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	2000      	movs	r0, #0
 80109a2:	4927      	ldr	r1, [pc, #156]	; (8010a40 <__ieee754_exp+0x2f8>)
 80109a4:	f7ef fc18 	bl	80001d8 <__aeabi_dsub>
 80109a8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80109ac:	4592      	cmp	sl, r2
 80109ae:	db02      	blt.n	80109b6 <__ieee754_exp+0x26e>
 80109b0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80109b4:	e6e3      	b.n	801077e <__ieee754_exp+0x36>
 80109b6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80109ba:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80109be:	2200      	movs	r2, #0
 80109c0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80109c4:	f7ef fdc0 	bl	8000548 <__aeabi_dmul>
 80109c8:	e6d9      	b.n	801077e <__ieee754_exp+0x36>
 80109ca:	bf00      	nop
 80109cc:	f3af 8000 	nop.w
 80109d0:	fefa39ef 	.word	0xfefa39ef
 80109d4:	40862e42 	.word	0x40862e42
 80109d8:	d52d3051 	.word	0xd52d3051
 80109dc:	c0874910 	.word	0xc0874910
 80109e0:	72bea4d0 	.word	0x72bea4d0
 80109e4:	3e663769 	.word	0x3e663769
 80109e8:	c5d26bf1 	.word	0xc5d26bf1
 80109ec:	3ebbbd41 	.word	0x3ebbbd41
 80109f0:	af25de2c 	.word	0xaf25de2c
 80109f4:	3f11566a 	.word	0x3f11566a
 80109f8:	16bebd93 	.word	0x16bebd93
 80109fc:	3f66c16c 	.word	0x3f66c16c
 8010a00:	5555553e 	.word	0x5555553e
 8010a04:	3fc55555 	.word	0x3fc55555
 8010a08:	652b82fe 	.word	0x652b82fe
 8010a0c:	3ff71547 	.word	0x3ff71547
 8010a10:	fee00000 	.word	0xfee00000
 8010a14:	3fe62e42 	.word	0x3fe62e42
 8010a18:	35793c76 	.word	0x35793c76
 8010a1c:	3dea39ef 	.word	0x3dea39ef
 8010a20:	8800759c 	.word	0x8800759c
 8010a24:	7e37e43c 	.word	0x7e37e43c
 8010a28:	40862e41 	.word	0x40862e41
 8010a2c:	7fefffff 	.word	0x7fefffff
 8010a30:	3fd62e42 	.word	0x3fd62e42
 8010a34:	3ff0a2b1 	.word	0x3ff0a2b1
 8010a38:	08010c80 	.word	0x08010c80
 8010a3c:	08010c90 	.word	0x08010c90
 8010a40:	3ff00000 	.word	0x3ff00000
 8010a44:	08010c70 	.word	0x08010c70
 8010a48:	3defffff 	.word	0x3defffff

08010a4c <with_errno>:
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	4604      	mov	r4, r0
 8010a50:	460d      	mov	r5, r1
 8010a52:	4616      	mov	r6, r2
 8010a54:	f7ff fd90 	bl	8010578 <__errno>
 8010a58:	4629      	mov	r1, r5
 8010a5a:	6006      	str	r6, [r0, #0]
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	bd70      	pop	{r4, r5, r6, pc}

08010a60 <xflow>:
 8010a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a62:	4614      	mov	r4, r2
 8010a64:	461d      	mov	r5, r3
 8010a66:	b108      	cbz	r0, 8010a6c <xflow+0xc>
 8010a68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a6c:	e9cd 2300 	strd	r2, r3, [sp]
 8010a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a74:	4620      	mov	r0, r4
 8010a76:	4629      	mov	r1, r5
 8010a78:	f7ef fd66 	bl	8000548 <__aeabi_dmul>
 8010a7c:	2222      	movs	r2, #34	; 0x22
 8010a7e:	b003      	add	sp, #12
 8010a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a84:	f7ff bfe2 	b.w	8010a4c <with_errno>

08010a88 <__math_uflow>:
 8010a88:	b508      	push	{r3, lr}
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010a90:	f7ff ffe6 	bl	8010a60 <xflow>
 8010a94:	ec41 0b10 	vmov	d0, r0, r1
 8010a98:	bd08      	pop	{r3, pc}

08010a9a <__math_oflow>:
 8010a9a:	b508      	push	{r3, lr}
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010aa2:	f7ff ffdd 	bl	8010a60 <xflow>
 8010aa6:	ec41 0b10 	vmov	d0, r0, r1
 8010aaa:	bd08      	pop	{r3, pc}

08010aac <_init>:
 8010aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aae:	bf00      	nop
 8010ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ab2:	bc08      	pop	{r3}
 8010ab4:	469e      	mov	lr, r3
 8010ab6:	4770      	bx	lr

08010ab8 <_fini>:
 8010ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aba:	bf00      	nop
 8010abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010abe:	bc08      	pop	{r3}
 8010ac0:	469e      	mov	lr, r3
 8010ac2:	4770      	bx	lr
